/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class TalkService {

  public interface Iface {

    public Hashtable getChatRoomAnnouncementsBulk(Vector chatRoomMids) throws TalkException, TException;

    public Vector getChatRoomAnnouncements(String chatRoomMid) throws TalkException, TException;

    public ChatRoomAnnouncement createChatRoomAnnouncement(int reqSeq, String chatRoomMid, ChatRoomAnnouncementType type, ChatRoomAnnouncementContents contents) throws TalkException, TException;

    public void removeChatRoomAnnouncement(int reqSeq, String chatRoomMid, long announcementSeq) throws TalkException, TException;

    public void unsendMessage(int seq, String messageId) throws TalkException, TException;

    public Group getGroupWithoutMembers(String groupId) throws TalkException, TException;

    public void requestResendMessage(int reqSeq, String senderMid, String messageId) throws TalkException, TException;

    public void respondResendMessage(int reqSeq, String receiverMid, String originalMessageId, Message resendMessage, ErrorCode errorCode) throws TalkException, TException;

    public void acceptGroupInvitation(int reqSeq, String groupId) throws TalkException, TException;

    public void acceptGroupInvitationByTicket(int reqSeq, String GroupMid, String ticketId) throws TalkException, TException;

    public void acceptProximityMatches(String sessionId, Hashtable ids) throws TalkException, TException;

    public Vector acquireCallRoute(String to) throws TalkException, TException;

    public String acquireCallTicket(String to) throws TalkException, TException;

    public String acquireEncryptedAccessToken(FeatureType featureType) throws TalkException, TException;

    public String addSnsId(SnsIdType snsIdType, String snsAccessToken) throws TalkException, TException;

    public void blockContact(int reqSeq, String id) throws TalkException, TException;

    public void blockRecommendation(int reqSeq, String id) throws TalkException, TException;

    public void cancelGroupInvitation(int reqSeq, String groupId, Vector contactIds) throws TalkException, TException;

    public VerificationSessionData changeVerificationMethod(String sessionId, VerificationMethod method) throws TalkException, TException;

    public void clearIdentityCredential() throws TalkException, TException;

    public void clearMessageBox(String channelId, String messageBoxId) throws TalkException, TException;

    public void closeProximityMatch(String sessionId) throws TalkException, TException;

    public Hashtable commitSendMessage(int seq, String messageId, Vector receiverMids) throws TalkException, TException;

    public Hashtable commitSendMessages(int seq, Vector messageIds, Vector receiverMids) throws TalkException, TException;

    public Hashtable commitUpdateProfile(int seq, Vector attrs, Vector receiverMids) throws TalkException, TException;

    public void confirmEmail(String verifier, String pinCode) throws TalkException, TException;

    public Group createGroup(int seq, String name, Vector contactIds) throws TalkException, TException;

    public String createQrcodeBase64Image(String url, String characterSet, int imageSize, int x, int y, int width, int height) throws TalkException, TException;

    public Room createRoom(int reqSeq, Vector contactIds) throws TalkException, TException;

    public String createSession() throws TalkException, TException;

    public Vector fetchAnnouncements(int lastFetchedIndex) throws TalkException, TException;

    public Vector fetchMessages(long localTs, int count) throws TalkException, TException;

    public Vector fetchOperations(long localRev, int count) throws ShouldSyncException, TException;

    public Vector fetchOps(long localRev, int count, long globalRev, long individualRev) throws ShouldSyncException, TException;

    public Hashtable findAndAddContactsByEmail(int reqSeq, Hashtable emails) throws TalkException, TException;

    public Hashtable findAndAddContactsByMid(int reqSeq, String mid, ContactType type, String reference) throws TalkException, TException;

    public Group findGroupByTicketV2(String ticketId) throws TalkException, TException;

    public Hashtable findAndAddContactsByPhone(int reqSeq, Hashtable phones) throws TalkException, TException;

    public Vector getFriendRequests(FriendRequestDirection direction, long lastSeenSeqId) throws TalkException, TException;

    public void removeFriendRequest(FriendRequestDirection direction, String midOrEMid) throws TalkException, TException;

    public Hashtable findAndAddContactsByUserid(int reqSeq, String userid) throws TalkException, TException;

    public Contact findContactByUserid(String userid) throws TalkException, TException;

    public Contact findContactByUserTicket(String ticketIdWithTag) throws TalkException, TException;

    public Hashtable findContactsByEmail(Hashtable emails) throws TalkException, TException;

    public Hashtable findContactsByPhone(Hashtable phones) throws TalkException, TException;

    public SnsIdUserStatus findSnsIdUserStatus(SnsIdType snsIdType, String snsAccessToken, String udidHash) throws TalkException, TException;

    public void finishUpdateVerification(String sessionId) throws TalkException, TException;

    public Ticket generateUserTicket(long expirationTime, int maxUseCount) throws TalkException, TException;

    public void destroyMessage(int seq, String chatId, String messageId, byte sessionId) throws TalkException, TException;

    public Hashtable getAcceptedProximityMatches(String sessionId) throws TalkException, TException;

    public Vector getActiveBuddySubscriberIds() throws TalkException, TException;

    public Vector getAllContactIds() throws TalkException, TException;

    public AuthQrcode getAuthQrcode(boolean keepLoggedIn, String systemName) throws TalkException, TException;

    public Vector getBlockedContactIds() throws TalkException, TException;

    public RegisterWithPhoneNumberResult registerWithPhoneNumber(String sessionId, String migrationPincodeSessionId) throws TalkException, TException;

    public RegisterWithPhoneNumberResult registerWithPhoneNumberAndPassword(String sessionId, String keynm, String encrypted) throws TalkException, TException;

    public AnalyticsInfo getAnalyticsInfo() throws TalkException, TException;

    public void reportClientStatistics(int reqSeq, ReportCategory category, int count) throws TalkException, TException;

    public String verifyPhoneNumberForLogin(String verifierFromPhone, String pinCodeForPhone, String verifierFromLogin) throws TalkException, TException;

    public PhoneVerificationResult verifyPhoneNumber(String sessionId, String pinCode, String udidHash, String migrationPincodeSessionId, String oldUdidHash) throws TalkException, TException;

    public Vector getBlockedContactIdsByRange(int start, int count) throws TalkException, TException;

    public Vector getBlockedRecommendationIds() throws TalkException, TException;

    public Vector getBuddyBlockerIds() throws TalkException, TException;

    public Geolocation getBuddyLocation(String mid, int index) throws TalkException, TException;

    public Vector getCompactContactsModifiedSince(long timestamp) throws TalkException, TException;

    public Group getCompactGroup(String groupId) throws TalkException, TException;

    public Room getCompactRoom(String roomId) throws TalkException, TException;

    public Contact getContact(String id) throws TalkException, TException;

    public Vector getContacts(Vector ids) throws TalkException, TException;

    public Contact getContactWithFriendRequestStatus(String id) throws TalkException, TException;

    public String getCountryWithRequestIp() throws TalkException, TException;

    public Vector getFavoriteMids() throws TalkException, TException;

    public Group getGroup(String groupId) throws TalkException, TException;

    public Vector getGroupIdsInvited() throws TalkException, TException;

    public Vector getGroupIdsJoined() throws TalkException, TException;

    public Vector getGroups(Vector groupIds) throws TalkException, TException;

    public Vector getHiddenContactMids() throws TalkException, TException;

    public String getIdentityIdentifier() throws TalkException, TException;

    public int getLastAnnouncementIndex() throws TalkException, TException;

    public long getLastOpRevision() throws TalkException, TException;

    public SuggestDictionaryRevisions getSuggestRevisions() throws TalkException, TException;

    public Vector getPreviousMessagesV2WithReadCount(String messageBoxId, MessageBoxV2MessageId endMessageId, int messagesCount) throws TalkException, TException;

    public TMessageBox getMessageBox(String channelId, String messageBoxId, int lastMessagesCount) throws TalkException, TException;

    public TMessageBoxWrapUp getMessageBoxCompactWrapUp(String mid) throws TalkException, TException;

    public TMessageBoxWrapUpResponse getMessageBoxCompactWrapUpList(int start, int messageBoxCount) throws TalkException, TException;

    public Vector getMessageBoxList(String channelId, int lastMessagesCount) throws TalkException, TException;

    public Vector getMessageBoxListByStatus(String channelId, int lastMessagesCount, int status) throws TalkException, TException;

    public TMessageBoxWrapUp getMessageBoxWrapUp(String mid) throws TalkException, TException;

    public TMessageBoxWrapUpResponse getMessageBoxWrapUpList(int start, int messageBoxCount) throws TalkException, TException;

    public Vector getMessagesBySequenceNumber(String channelId, String messageBoxId, long startSeq, long endSeq) throws TalkException, TException;

    public Vector getNextMessages(String messageBoxId, long startSeq, int messagesCount) throws TalkException, TException;

    public Vector getNotificationPolicy(CarrierCode carrier) throws TalkException, TException;

    public Vector getPreviousMessages(String messageBoxId, long endSeq, int messagesCount) throws TalkException, TException;

    public Profile getProfile() throws TalkException, TException;

    public ProximityMatchCandidateResult getProximityMatchCandidateList(String sessionId) throws TalkException, TException;

    public Hashtable getProximityMatchCandidates(String sessionId) throws TalkException, TException;

    public Vector getRecentMessages(String messageBoxId, int messagesCount) throws TalkException, TException;

    public Vector getRecommendationIds() throws TalkException, TException;

    public Room getRoom(String roomId) throws TalkException, TException;

    public RSAKey getRSAKeyInfo(IdentityProvider provider) throws TalkException, TException;

    public long getServerTime() throws TalkException, TException;

    public Vector getSessions() throws TalkException, TException;

    public Settings getSettings() throws TalkException, TException;

    public Vector getGroupsV2(Vector groupIds) throws TalkException, TException;

    public Settings getSettingsAttributes(int attrBitset) throws TalkException, TException;

    public SystemConfiguration getSystemConfiguration() throws TalkException, TException;

    public Ticket getUserTicket() throws TalkException, TException;

    public WapInvitation getWapInvitation(String invitationHash) throws TalkException, TException;

    public void invalidateUserTicket() throws TalkException, TException;

    public void inviteFriendsBySms(Vector phoneNumberList) throws TalkException, TException;

    public void inviteIntoGroup(int reqSeq, String groupId, Vector contactIds) throws TalkException, TException;

    public void inviteIntoRoom(int reqSeq, String roomId, Vector contactIds) throws TalkException, TException;

    public void inviteViaEmail(int reqSeq, String email, String name) throws TalkException, TException;

    public boolean isIdentityIdentifierAvailable(IdentityProvider provider, String identifier) throws TalkException, TException;

    public boolean isUseridAvailable(String userid) throws TalkException, TException;

    public void kickoutFromGroup(int reqSeq, String groupId, Vector contactIds) throws TalkException, TException;

    public String reissueGroupTicket(String groupMid) throws TalkException, TException;

    public Group findGroupByTicket(String ticketId) throws TalkException, TException;

    public void leaveGroup(int reqSeq, String groupId) throws TalkException, TException;

    public void leaveRoom(int reqSeq, String roomId) throws TalkException, TException;

    public String loginWithIdentityCredential(IdentityProvider identityProvider, String identifier, String password, boolean keepLoggedIn, String accessLocation, String systemName, String certificate) throws TalkException, TException;

    public LoginResult loginWithIdentityCredentialForCertificate(IdentityProvider identityProvider, String identifier, String password, boolean keepLoggedIn, String accessLocation, String systemName, String certificate) throws TalkException, TException;

    public String loginWithVerifier(String verifier) throws TalkException, TException;

    public LoginResult loginWithVerifierForCerificate(String verifier) throws TalkException, TException;

    public LoginResult loginWithVerifierForCertificate(String verifier) throws TalkException, TException;

    public void logout() throws TalkException, TException;

    public void logoutSession(String tokenKey) throws TalkException, TException;

    public void noop() throws TalkException, TException;

    public void notifiedRedirect(Hashtable paramMap) throws TalkException, TException;

    public Hashtable notifyBuddyOnAir(int seq, Vector receiverMids) throws TalkException, TException;

    public void notifyIndividualEvent(NotificationStatus notificationStatus, Vector receiverMids) throws TalkException, TException;

    public void notifyInstalled(String udidHash, String applicationTypeWithExtensions) throws TalkException, TException;

    public void notifyRegistrationComplete(String udidHash, String applicationTypeWithExtensions) throws TalkException, TException;

    public void notifySleep(long lastRev, int badge) throws TalkException, TException;

    public void notifyUpdated(long lastRev, DeviceInfo deviceInfo) throws TalkException, TException;

    public String openProximityMatch(Location location) throws TalkException, TException;

    public String registerBuddyUser(String buddyId, String registrarPassword) throws TalkException, TException;

    public void registerBuddyUserid(int seq, String userid) throws TalkException, TException;

    public String registerDevice(String sessionId) throws TalkException, TException;

    public String registerDeviceWithIdentityCredential(String sessionId, IdentityProvider provider, String identifier, String verifier) throws TalkException, TException;

    public String registerDeviceWithoutPhoneNumber(String region, String udidHash, DeviceInfo deviceInfo) throws TalkException, TException;

    public String registerDeviceWithoutPhoneNumberWithIdentityCredential(String region, String udidHash, DeviceInfo deviceInfo, IdentityProvider provider, String identifier, String verifier, String mid, String migrationPincodeSessionId) throws TalkException, TException;

    public boolean registerUserid(int reqSeq, String userid) throws TalkException, TException;

    public String registerWapDevice(String invitationHash, String guidHash, String email, DeviceInfo deviceInfo) throws TalkException, TException;

    public String registerWithExistingSnsIdAndIdentityCredential(IdentityCredential identityCredential, String region, String udidHash, DeviceInfo deviceInfo) throws TalkException, TException;

    public RegisterWithSnsIdResult registerWithSnsId(SnsIdType snsIdType, String snsAccessToken, String region, String udidHash, DeviceInfo deviceInfo, String mid) throws TalkException, TException;

    public String registerWithSnsIdAndIdentityCredential(SnsIdType snsIdType, String snsAccessToken, IdentityCredential identityCredential, String region, String udidHash, DeviceInfo deviceInfo) throws TalkException, TException;

    public String reissueDeviceCredential() throws TalkException, TException;

    public String reissueUserTicket(long expirationTime, int maxUseCount) throws TalkException, TException;

    public Vector getMessageReadRange(Vector chatIds) throws TalkException, TException;

    public void rejectGroupInvitation(int reqSeq, String groupId) throws TalkException, TException;

    public void releaseSession() throws TalkException, TException;

    public void removeAllMessages(int seq, String lastMessageId) throws TalkException, TException;

    public void removeBuddyLocation(String mid, int index) throws TalkException, TException;

    public boolean removeMessage(String messageId) throws TalkException, TException;

    public ContactTransition makeUserAddMyselfAsContact(String contactOwnerMid) throws TalkException, TException;

    public boolean removeMessageFromMyHome(String messageId) throws TalkException, TException;

    public String removeSnsId(SnsIdType snsIdType) throws TalkException, TException;

    public void report(long syncOpRevision, SyncCategory category, String report) throws TalkException, TException;

    public Vector reportContacts(long syncOpRevision, SyncCategory category, Vector contactReports, SyncActionType actionType) throws TalkException, TException;

    public void reportGroups(long syncOpRevision, Vector groups) throws TalkException, TException;

    public void reportProfile(long syncOpRevision, Profile profile) throws TalkException, TException;

    public void reportRooms(long syncOpRevision, Vector rooms) throws TalkException, TException;

    public Contact findAndAddContactByMetaTag(int reqSeq, String userid, String reference) throws TalkException, TException;

    public void reportSettings(long syncOpRevision, Settings settings) throws TalkException, TException;

    public void reportSpam(String chatMid, Vector memberMids, Vector spammerReasons, Vector senderMids, Vector spamMessageIds, Vector spamMessages) throws TalkException, TException;

    public void reportSpammer(String spammerMid, Vector spammerReasons, Vector spamMessageIds) throws TalkException, TException;

    public void requestAccountPasswordReset(IdentityProvider provider, String identifier, String locale) throws TalkException, TException;

    public EmailConfirmationSession requestEmailConfirmation(EmailConfirmation emailConfirmation) throws TalkException, TException;

    public void requestIdentityUnbind(IdentityProvider provider, String identifier) throws TalkException, TException;

    public EmailConfirmationSession resendEmailConfirmation(String verifier) throws TalkException, TException;

    public void resendPinCode(String sessionId) throws TalkException, TException;

    public void resendPinCodeBySMS(String sessionId) throws TalkException, TException;

    public void sendChatChecked(int seq, String consumer, String lastMessageId) throws TalkException, TException;

    public CommitMessageResult sendMessageAwaitCommit(int seq, Message message) throws TalkException, TException;

    public void sendChatRemoved(int seq, String consumer, String lastMessageId) throws TalkException, TException;

    public Hashtable sendContentPreviewUpdated(int esq, String messageId, Vector receiverMids) throws TalkException, TException;

    public void sendContentReceipt(int seq, String consumer, String messageId) throws TalkException, TException;

    public void sendDummyPush() throws TalkException, TException;

    public void removeE2EEPublicKey(E2EEPublicKey publicKey) throws TalkException, TException;

    public E2EENegotiationResult negotiateE2EEPublicKey(String mid) throws TalkException, TException;

    public E2EEPublicKey getE2EEPublicKey(String mid, int version, int keyId) throws TalkException, TException;

    public void requestE2EEKeyExchange(int reqSeq, byte[] temporalPublicKey, E2EEPublicKey publicKey, byte[] verifier) throws TalkException, TException;

    public Hashtable getLastE2EEPublicKeys(String chatMid) throws TalkException, TException;

    public E2EEPublicKey registerE2EEPublicKey(int reqSeq, E2EEPublicKey publicKey) throws TalkException, TException;

    public Vector getE2EEPublicKeys() throws TalkException, TException;

    public Vector getE2EEPublicKeysEx(boolean ignoreE2EEStatus) throws TalkException, TException;

    public Vector getReadMessageOpsInBulk(Vector chatIds) throws TalkException, TException;

    public Message sendEvent(int seq, Message message) throws TalkException, TException;

    public Message sendMessage(int seq, Message message) throws TalkException, TException;

    public void sendMessageIgnored(int seq, String consumer, Vector messageIds) throws TalkException, TException;

    public void sendMessageReceipt(int seq, String consumer, Vector messageIds) throws TalkException, TException;

    public Contact findContactByMetaTag(String userid, String reference) throws TalkException, TException;

    public Message sendMessageToMyHome(int seq, Message message) throws TalkException, TException;

    public void setBuddyLocation(String mid, int index, Geolocation location) throws TalkException, TException;

    public void setIdentityCredential(String identifier, String verifier, IdentityProvider provider) throws TalkException, TException;

    public void setNotificationsEnabled(int reqSeq, MIDType type, String target, boolean enablement) throws TalkException, TException;

    public VerificationSessionData startUpdateVerification(String region, CarrierCode carrier, String phone, String udidHash, DeviceInfo deviceInfo, String networkCode, String locale) throws TalkException, TException;

    public VerificationSessionData startVerification(String region, CarrierCode carrier, String phone, String udidHash, DeviceInfo deviceInfo, String networkCode, String mid, String locale, SIMInfo simInfo, String oldUdidHash) throws TalkException, TException;

    public void updateGroupPreferenceAttribute(int reqSeq, String groupMid, Hashtable updatedAttrs) throws TalkException, TException;

    public Room createRoomV2(int reqSeq, Vector contactIds) throws TalkException, TException;

    public void storeUpdateProfileAttribute(int seq, ProfileAttribute profileAttribute, String value) throws TalkException, TException;

    public Vector syncContactBySnsIds(int reqSeq, Vector modifications) throws TalkException, TException;

    public Hashtable syncContacts(int reqSeq, Vector localContacts) throws TalkException, TException;

    public Message trySendMessage(int seq, Message message) throws TalkException, TException;

    public Vector getNextMessagesV2(String messageBoxId, MessageBoxV2MessageId startMessageId, int messagesCount) throws TalkException, TException;

    public TMessageBoxWrapUp getMessageBoxCompactWrapUpV2(String messageBoxId) throws TalkException, TException;

    public Vector getRecentMessagesV2(String messageBoxId, int messagesCount) throws TalkException, TException;

    public Hashtable validateContactsOnBot(Vector contacts) throws TalkException, TException;

    public void tryFriendRequest(String midOrEMid, FriendRequestMethod method, String friendRequestParams) throws TalkException, TException;

    public void unblockContact(int reqSeq, String id) throws TalkException, TException;

    public void unblockRecommendation(int reqSeq, String id) throws TalkException, TException;

    public String unregisterUserAndDevice() throws TalkException, TException;

    public void updateApnsDeviceToken(byte[] apnsDeviceToken) throws TalkException, TException;

    public void updateBuddySetting(String key, String value) throws TalkException, TException;

    public void updateC2DMRegistrationId(String registrationId) throws TalkException, TException;

    public void updateContactSetting(int reqSeq, String mid, ContactSetting flag, String value) throws TalkException, TException;

    public void updateCustomModeSettings(CustomMode customMode, Hashtable paramMap) throws TalkException, TException;

    public void updateDeviceInfo(String deviceUid, DeviceInfo deviceInfo) throws TalkException, TException;

    public void updateGroup(int reqSeq, Group group) throws TalkException, TException;

    public void updateNotificationToken(NotificationType type, String token) throws TalkException, TException;

    public void updateNotificationTokenWithBytes(NotificationType type, byte[] token) throws TalkException, TException;

    public void updateProfile(int reqSeq, Profile profile) throws TalkException, TException;

    public void updateProfileAttribute(int reqSeq, ProfileAttribute attr, String value) throws TalkException, TException;

    public void updateRegion(String region) throws TalkException, TException;

    public void updateSettings(int reqSeq, Settings settings) throws TalkException, TException;

    public int updateSettings2(int reqSeq, Settings settings) throws TalkException, TException;

    public void updateSettingsAttribute(int reqSeq, SettingsAttribute attr, String value) throws TalkException, TException;

    public int updateSettingsAttributes(int reqSeq, int attrBitset, Settings settings) throws TalkException, TException;

    public void verifyIdentityCredential(IdentityProvider identityProvider, String identifier, String password) throws TalkException, TException;

    public UserAuthStatus verifyIdentityCredentialWithResult(IdentityCredential identityCredential) throws TalkException, TException;

    public VerificationResult verifyPhone(String sessionId, String pinCode, String udidHash) throws TalkException, TException;

    public String verifyQrcode(String verifier, String pinCode) throws TalkException, TException;

  }

  public static class Client implements TServiceClient, Iface {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public Hashtable getChatRoomAnnouncementsBulk(Vector chatRoomMids) throws TalkException, TException
    {
      send_getChatRoomAnnouncementsBulk(chatRoomMids);
      return recv_getChatRoomAnnouncementsBulk();
    }

    public void send_getChatRoomAnnouncementsBulk(Vector chatRoomMids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getChatRoomAnnouncementsBulk", TMessageType.CALL, ++seqid_));
      getChatRoomAnnouncementsBulk_args args = new getChatRoomAnnouncementsBulk_args();
      args.setChatRoomMids(chatRoomMids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Hashtable recv_getChatRoomAnnouncementsBulk() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getChatRoomAnnouncementsBulk failed: out of sequence response");
      }
      getChatRoomAnnouncementsBulk_result result = new getChatRoomAnnouncementsBulk_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getChatRoomAnnouncementsBulk failed: unknown result");
    }

    public Vector getChatRoomAnnouncements(String chatRoomMid) throws TalkException, TException
    {
      send_getChatRoomAnnouncements(chatRoomMid);
      return recv_getChatRoomAnnouncements();
    }

    public void send_getChatRoomAnnouncements(String chatRoomMid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getChatRoomAnnouncements", TMessageType.CALL, ++seqid_));
      getChatRoomAnnouncements_args args = new getChatRoomAnnouncements_args();
      args.setChatRoomMid(chatRoomMid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getChatRoomAnnouncements() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getChatRoomAnnouncements failed: out of sequence response");
      }
      getChatRoomAnnouncements_result result = new getChatRoomAnnouncements_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getChatRoomAnnouncements failed: unknown result");
    }

    public ChatRoomAnnouncement createChatRoomAnnouncement(int reqSeq, String chatRoomMid, ChatRoomAnnouncementType type, ChatRoomAnnouncementContents contents) throws TalkException, TException
    {
      send_createChatRoomAnnouncement(reqSeq, chatRoomMid, type, contents);
      return recv_createChatRoomAnnouncement();
    }

    public void send_createChatRoomAnnouncement(int reqSeq, String chatRoomMid, ChatRoomAnnouncementType type, ChatRoomAnnouncementContents contents) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("createChatRoomAnnouncement", TMessageType.CALL, ++seqid_));
      createChatRoomAnnouncement_args args = new createChatRoomAnnouncement_args();
      args.setReqSeq(reqSeq);
      args.setChatRoomMid(chatRoomMid);
      args.setType(type);
      args.setContents(contents);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ChatRoomAnnouncement recv_createChatRoomAnnouncement() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "createChatRoomAnnouncement failed: out of sequence response");
      }
      createChatRoomAnnouncement_result result = new createChatRoomAnnouncement_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "createChatRoomAnnouncement failed: unknown result");
    }

    public void removeChatRoomAnnouncement(int reqSeq, String chatRoomMid, long announcementSeq) throws TalkException, TException
    {
      send_removeChatRoomAnnouncement(reqSeq, chatRoomMid, announcementSeq);
      recv_removeChatRoomAnnouncement();
    }

    public void send_removeChatRoomAnnouncement(int reqSeq, String chatRoomMid, long announcementSeq) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("removeChatRoomAnnouncement", TMessageType.CALL, ++seqid_));
      removeChatRoomAnnouncement_args args = new removeChatRoomAnnouncement_args();
      args.setReqSeq(reqSeq);
      args.setChatRoomMid(chatRoomMid);
      args.setAnnouncementSeq(announcementSeq);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_removeChatRoomAnnouncement() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "removeChatRoomAnnouncement failed: out of sequence response");
      }
      removeChatRoomAnnouncement_result result = new removeChatRoomAnnouncement_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void unsendMessage(int seq, String messageId) throws TalkException, TException
    {
      send_unsendMessage(seq, messageId);
      recv_unsendMessage();
    }

    public void send_unsendMessage(int seq, String messageId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("unsendMessage", TMessageType.CALL, ++seqid_));
      unsendMessage_args args = new unsendMessage_args();
      args.setSeq(seq);
      args.setMessageId(messageId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_unsendMessage() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "unsendMessage failed: out of sequence response");
      }
      unsendMessage_result result = new unsendMessage_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public Group getGroupWithoutMembers(String groupId) throws TalkException, TException
    {
      send_getGroupWithoutMembers(groupId);
      return recv_getGroupWithoutMembers();
    }

    public void send_getGroupWithoutMembers(String groupId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getGroupWithoutMembers", TMessageType.CALL, ++seqid_));
      getGroupWithoutMembers_args args = new getGroupWithoutMembers_args();
      args.setGroupId(groupId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Group recv_getGroupWithoutMembers() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getGroupWithoutMembers failed: out of sequence response");
      }
      getGroupWithoutMembers_result result = new getGroupWithoutMembers_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getGroupWithoutMembers failed: unknown result");
    }

    public void requestResendMessage(int reqSeq, String senderMid, String messageId) throws TalkException, TException
    {
      send_requestResendMessage(reqSeq, senderMid, messageId);
      recv_requestResendMessage();
    }

    public void send_requestResendMessage(int reqSeq, String senderMid, String messageId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("requestResendMessage", TMessageType.CALL, ++seqid_));
      requestResendMessage_args args = new requestResendMessage_args();
      args.setReqSeq(reqSeq);
      args.setSenderMid(senderMid);
      args.setMessageId(messageId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_requestResendMessage() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "requestResendMessage failed: out of sequence response");
      }
      requestResendMessage_result result = new requestResendMessage_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void respondResendMessage(int reqSeq, String receiverMid, String originalMessageId, Message resendMessage, ErrorCode errorCode) throws TalkException, TException
    {
      send_respondResendMessage(reqSeq, receiverMid, originalMessageId, resendMessage, errorCode);
      recv_respondResendMessage();
    }

    public void send_respondResendMessage(int reqSeq, String receiverMid, String originalMessageId, Message resendMessage, ErrorCode errorCode) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("respondResendMessage", TMessageType.CALL, ++seqid_));
      respondResendMessage_args args = new respondResendMessage_args();
      args.setReqSeq(reqSeq);
      args.setReceiverMid(receiverMid);
      args.setOriginalMessageId(originalMessageId);
      args.setResendMessage(resendMessage);
      args.setErrorCode(errorCode);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_respondResendMessage() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "respondResendMessage failed: out of sequence response");
      }
      respondResendMessage_result result = new respondResendMessage_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void acceptGroupInvitation(int reqSeq, String groupId) throws TalkException, TException
    {
      send_acceptGroupInvitation(reqSeq, groupId);
      recv_acceptGroupInvitation();
    }

    public void send_acceptGroupInvitation(int reqSeq, String groupId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("acceptGroupInvitation", TMessageType.CALL, ++seqid_));
      acceptGroupInvitation_args args = new acceptGroupInvitation_args();
      args.setReqSeq(reqSeq);
      args.setGroupId(groupId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_acceptGroupInvitation() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "acceptGroupInvitation failed: out of sequence response");
      }
      acceptGroupInvitation_result result = new acceptGroupInvitation_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void acceptGroupInvitationByTicket(int reqSeq, String GroupMid, String ticketId) throws TalkException, TException
    {
      send_acceptGroupInvitationByTicket(reqSeq, GroupMid, ticketId);
      recv_acceptGroupInvitationByTicket();
    }

    public void send_acceptGroupInvitationByTicket(int reqSeq, String GroupMid, String ticketId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("acceptGroupInvitationByTicket", TMessageType.CALL, ++seqid_));
      acceptGroupInvitationByTicket_args args = new acceptGroupInvitationByTicket_args();
      args.setReqSeq(reqSeq);
      args.setGroupMid(GroupMid);
      args.setTicketId(ticketId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_acceptGroupInvitationByTicket() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "acceptGroupInvitationByTicket failed: out of sequence response");
      }
      acceptGroupInvitationByTicket_result result = new acceptGroupInvitationByTicket_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void acceptProximityMatches(String sessionId, Hashtable ids) throws TalkException, TException
    {
      send_acceptProximityMatches(sessionId, ids);
      recv_acceptProximityMatches();
    }

    public void send_acceptProximityMatches(String sessionId, Hashtable ids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("acceptProximityMatches", TMessageType.CALL, ++seqid_));
      acceptProximityMatches_args args = new acceptProximityMatches_args();
      args.setSessionId(sessionId);
      args.setIds(ids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_acceptProximityMatches() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "acceptProximityMatches failed: out of sequence response");
      }
      acceptProximityMatches_result result = new acceptProximityMatches_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public Vector acquireCallRoute(String to) throws TalkException, TException
    {
      send_acquireCallRoute(to);
      return recv_acquireCallRoute();
    }

    public void send_acquireCallRoute(String to) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("acquireCallRoute", TMessageType.CALL, ++seqid_));
      acquireCallRoute_args args = new acquireCallRoute_args();
      args.setTo(to);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_acquireCallRoute() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "acquireCallRoute failed: out of sequence response");
      }
      acquireCallRoute_result result = new acquireCallRoute_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "acquireCallRoute failed: unknown result");
    }

    public String acquireCallTicket(String to) throws TalkException, TException
    {
      send_acquireCallTicket(to);
      return recv_acquireCallTicket();
    }

    public void send_acquireCallTicket(String to) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("acquireCallTicket", TMessageType.CALL, ++seqid_));
      acquireCallTicket_args args = new acquireCallTicket_args();
      args.setTo(to);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_acquireCallTicket() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "acquireCallTicket failed: out of sequence response");
      }
      acquireCallTicket_result result = new acquireCallTicket_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "acquireCallTicket failed: unknown result");
    }

    public String acquireEncryptedAccessToken(FeatureType featureType) throws TalkException, TException
    {
      send_acquireEncryptedAccessToken(featureType);
      return recv_acquireEncryptedAccessToken();
    }

    public void send_acquireEncryptedAccessToken(FeatureType featureType) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("acquireEncryptedAccessToken", TMessageType.CALL, ++seqid_));
      acquireEncryptedAccessToken_args args = new acquireEncryptedAccessToken_args();
      args.setFeatureType(featureType);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_acquireEncryptedAccessToken() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "acquireEncryptedAccessToken failed: out of sequence response");
      }
      acquireEncryptedAccessToken_result result = new acquireEncryptedAccessToken_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "acquireEncryptedAccessToken failed: unknown result");
    }

    public String addSnsId(SnsIdType snsIdType, String snsAccessToken) throws TalkException, TException
    {
      send_addSnsId(snsIdType, snsAccessToken);
      return recv_addSnsId();
    }

    public void send_addSnsId(SnsIdType snsIdType, String snsAccessToken) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("addSnsId", TMessageType.CALL, ++seqid_));
      addSnsId_args args = new addSnsId_args();
      args.setSnsIdType(snsIdType);
      args.setSnsAccessToken(snsAccessToken);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_addSnsId() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "addSnsId failed: out of sequence response");
      }
      addSnsId_result result = new addSnsId_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "addSnsId failed: unknown result");
    }

    public void blockContact(int reqSeq, String id) throws TalkException, TException
    {
      send_blockContact(reqSeq, id);
      recv_blockContact();
    }

    public void send_blockContact(int reqSeq, String id) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("blockContact", TMessageType.CALL, ++seqid_));
      blockContact_args args = new blockContact_args();
      args.setReqSeq(reqSeq);
      args.setId(id);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_blockContact() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "blockContact failed: out of sequence response");
      }
      blockContact_result result = new blockContact_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void blockRecommendation(int reqSeq, String id) throws TalkException, TException
    {
      send_blockRecommendation(reqSeq, id);
      recv_blockRecommendation();
    }

    public void send_blockRecommendation(int reqSeq, String id) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("blockRecommendation", TMessageType.CALL, ++seqid_));
      blockRecommendation_args args = new blockRecommendation_args();
      args.setReqSeq(reqSeq);
      args.setId(id);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_blockRecommendation() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "blockRecommendation failed: out of sequence response");
      }
      blockRecommendation_result result = new blockRecommendation_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void cancelGroupInvitation(int reqSeq, String groupId, Vector contactIds) throws TalkException, TException
    {
      send_cancelGroupInvitation(reqSeq, groupId, contactIds);
      recv_cancelGroupInvitation();
    }

    public void send_cancelGroupInvitation(int reqSeq, String groupId, Vector contactIds) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("cancelGroupInvitation", TMessageType.CALL, ++seqid_));
      cancelGroupInvitation_args args = new cancelGroupInvitation_args();
      args.setReqSeq(reqSeq);
      args.setGroupId(groupId);
      args.setContactIds(contactIds);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_cancelGroupInvitation() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "cancelGroupInvitation failed: out of sequence response");
      }
      cancelGroupInvitation_result result = new cancelGroupInvitation_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public VerificationSessionData changeVerificationMethod(String sessionId, VerificationMethod method) throws TalkException, TException
    {
      send_changeVerificationMethod(sessionId, method);
      return recv_changeVerificationMethod();
    }

    public void send_changeVerificationMethod(String sessionId, VerificationMethod method) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("changeVerificationMethod", TMessageType.CALL, ++seqid_));
      changeVerificationMethod_args args = new changeVerificationMethod_args();
      args.setSessionId(sessionId);
      args.setMethod(method);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public VerificationSessionData recv_changeVerificationMethod() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "changeVerificationMethod failed: out of sequence response");
      }
      changeVerificationMethod_result result = new changeVerificationMethod_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "changeVerificationMethod failed: unknown result");
    }

    public void clearIdentityCredential() throws TalkException, TException
    {
      send_clearIdentityCredential();
      recv_clearIdentityCredential();
    }

    public void send_clearIdentityCredential() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("clearIdentityCredential", TMessageType.CALL, ++seqid_));
      clearIdentityCredential_args args = new clearIdentityCredential_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_clearIdentityCredential() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "clearIdentityCredential failed: out of sequence response");
      }
      clearIdentityCredential_result result = new clearIdentityCredential_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void clearMessageBox(String channelId, String messageBoxId) throws TalkException, TException
    {
      send_clearMessageBox(channelId, messageBoxId);
      recv_clearMessageBox();
    }

    public void send_clearMessageBox(String channelId, String messageBoxId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("clearMessageBox", TMessageType.CALL, ++seqid_));
      clearMessageBox_args args = new clearMessageBox_args();
      args.setChannelId(channelId);
      args.setMessageBoxId(messageBoxId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_clearMessageBox() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "clearMessageBox failed: out of sequence response");
      }
      clearMessageBox_result result = new clearMessageBox_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void closeProximityMatch(String sessionId) throws TalkException, TException
    {
      send_closeProximityMatch(sessionId);
      recv_closeProximityMatch();
    }

    public void send_closeProximityMatch(String sessionId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("closeProximityMatch", TMessageType.CALL, ++seqid_));
      closeProximityMatch_args args = new closeProximityMatch_args();
      args.setSessionId(sessionId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_closeProximityMatch() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "closeProximityMatch failed: out of sequence response");
      }
      closeProximityMatch_result result = new closeProximityMatch_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public Hashtable commitSendMessage(int seq, String messageId, Vector receiverMids) throws TalkException, TException
    {
      send_commitSendMessage(seq, messageId, receiverMids);
      return recv_commitSendMessage();
    }

    public void send_commitSendMessage(int seq, String messageId, Vector receiverMids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("commitSendMessage", TMessageType.CALL, ++seqid_));
      commitSendMessage_args args = new commitSendMessage_args();
      args.setSeq(seq);
      args.setMessageId(messageId);
      args.setReceiverMids(receiverMids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Hashtable recv_commitSendMessage() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "commitSendMessage failed: out of sequence response");
      }
      commitSendMessage_result result = new commitSendMessage_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "commitSendMessage failed: unknown result");
    }

    public Hashtable commitSendMessages(int seq, Vector messageIds, Vector receiverMids) throws TalkException, TException
    {
      send_commitSendMessages(seq, messageIds, receiverMids);
      return recv_commitSendMessages();
    }

    public void send_commitSendMessages(int seq, Vector messageIds, Vector receiverMids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("commitSendMessages", TMessageType.CALL, ++seqid_));
      commitSendMessages_args args = new commitSendMessages_args();
      args.setSeq(seq);
      args.setMessageIds(messageIds);
      args.setReceiverMids(receiverMids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Hashtable recv_commitSendMessages() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "commitSendMessages failed: out of sequence response");
      }
      commitSendMessages_result result = new commitSendMessages_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "commitSendMessages failed: unknown result");
    }

    public Hashtable commitUpdateProfile(int seq, Vector attrs, Vector receiverMids) throws TalkException, TException
    {
      send_commitUpdateProfile(seq, attrs, receiverMids);
      return recv_commitUpdateProfile();
    }

    public void send_commitUpdateProfile(int seq, Vector attrs, Vector receiverMids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("commitUpdateProfile", TMessageType.CALL, ++seqid_));
      commitUpdateProfile_args args = new commitUpdateProfile_args();
      args.setSeq(seq);
      args.setAttrs(attrs);
      args.setReceiverMids(receiverMids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Hashtable recv_commitUpdateProfile() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "commitUpdateProfile failed: out of sequence response");
      }
      commitUpdateProfile_result result = new commitUpdateProfile_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "commitUpdateProfile failed: unknown result");
    }

    public void confirmEmail(String verifier, String pinCode) throws TalkException, TException
    {
      send_confirmEmail(verifier, pinCode);
      recv_confirmEmail();
    }

    public void send_confirmEmail(String verifier, String pinCode) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("confirmEmail", TMessageType.CALL, ++seqid_));
      confirmEmail_args args = new confirmEmail_args();
      args.setVerifier(verifier);
      args.setPinCode(pinCode);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_confirmEmail() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "confirmEmail failed: out of sequence response");
      }
      confirmEmail_result result = new confirmEmail_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public Group createGroup(int seq, String name, Vector contactIds) throws TalkException, TException
    {
      send_createGroup(seq, name, contactIds);
      return recv_createGroup();
    }

    public void send_createGroup(int seq, String name, Vector contactIds) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("createGroup", TMessageType.CALL, ++seqid_));
      createGroup_args args = new createGroup_args();
      args.setSeq(seq);
      args.setName(name);
      args.setContactIds(contactIds);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Group recv_createGroup() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "createGroup failed: out of sequence response");
      }
      createGroup_result result = new createGroup_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "createGroup failed: unknown result");
    }

    public String createQrcodeBase64Image(String url, String characterSet, int imageSize, int x, int y, int width, int height) throws TalkException, TException
    {
      send_createQrcodeBase64Image(url, characterSet, imageSize, x, y, width, height);
      return recv_createQrcodeBase64Image();
    }

    public void send_createQrcodeBase64Image(String url, String characterSet, int imageSize, int x, int y, int width, int height) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("createQrcodeBase64Image", TMessageType.CALL, ++seqid_));
      createQrcodeBase64Image_args args = new createQrcodeBase64Image_args();
      args.setUrl(url);
      args.setCharacterSet(characterSet);
      args.setImageSize(imageSize);
      args.setX(x);
      args.setY(y);
      args.setWidth(width);
      args.setHeight(height);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_createQrcodeBase64Image() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "createQrcodeBase64Image failed: out of sequence response");
      }
      createQrcodeBase64Image_result result = new createQrcodeBase64Image_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "createQrcodeBase64Image failed: unknown result");
    }

    public Room createRoom(int reqSeq, Vector contactIds) throws TalkException, TException
    {
      send_createRoom(reqSeq, contactIds);
      return recv_createRoom();
    }

    public void send_createRoom(int reqSeq, Vector contactIds) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("createRoom", TMessageType.CALL, ++seqid_));
      createRoom_args args = new createRoom_args();
      args.setReqSeq(reqSeq);
      args.setContactIds(contactIds);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Room recv_createRoom() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "createRoom failed: out of sequence response");
      }
      createRoom_result result = new createRoom_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "createRoom failed: unknown result");
    }

    public String createSession() throws TalkException, TException
    {
      send_createSession();
      return recv_createSession();
    }

    public void send_createSession() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("createSession", TMessageType.CALL, ++seqid_));
      createSession_args args = new createSession_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_createSession() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "createSession failed: out of sequence response");
      }
      createSession_result result = new createSession_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "createSession failed: unknown result");
    }

    public Vector fetchAnnouncements(int lastFetchedIndex) throws TalkException, TException
    {
      send_fetchAnnouncements(lastFetchedIndex);
      return recv_fetchAnnouncements();
    }

    public void send_fetchAnnouncements(int lastFetchedIndex) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("fetchAnnouncements", TMessageType.CALL, ++seqid_));
      fetchAnnouncements_args args = new fetchAnnouncements_args();
      args.setLastFetchedIndex(lastFetchedIndex);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_fetchAnnouncements() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "fetchAnnouncements failed: out of sequence response");
      }
      fetchAnnouncements_result result = new fetchAnnouncements_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "fetchAnnouncements failed: unknown result");
    }

    public Vector fetchMessages(long localTs, int count) throws TalkException, TException
    {
      send_fetchMessages(localTs, count);
      return recv_fetchMessages();
    }

    public void send_fetchMessages(long localTs, int count) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("fetchMessages", TMessageType.CALL, ++seqid_));
      fetchMessages_args args = new fetchMessages_args();
      args.setLocalTs(localTs);
      args.setCount(count);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_fetchMessages() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "fetchMessages failed: out of sequence response");
      }
      fetchMessages_result result = new fetchMessages_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "fetchMessages failed: unknown result");
    }

    public Vector fetchOperations(long localRev, int count) throws ShouldSyncException, TException
    {
      send_fetchOperations(localRev, count);
      return recv_fetchOperations();
    }

    public void send_fetchOperations(long localRev, int count) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("fetchOperations", TMessageType.CALL, ++seqid_));
      fetchOperations_args args = new fetchOperations_args();
      args.setLocalRev(localRev);
      args.setCount(count);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_fetchOperations() throws ShouldSyncException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "fetchOperations failed: out of sequence response");
      }
      fetchOperations_result result = new fetchOperations_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "fetchOperations failed: unknown result");
    }

    public Vector fetchOps(long localRev, int count, long globalRev, long individualRev) throws ShouldSyncException, TException
    {
      send_fetchOps(localRev, count, globalRev, individualRev);
      return recv_fetchOps();
    }

    public void send_fetchOps(long localRev, int count, long globalRev, long individualRev) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("fetchOps", TMessageType.CALL, ++seqid_));
      fetchOps_args args = new fetchOps_args();
      args.setLocalRev(localRev);
      args.setCount(count);
      args.setGlobalRev(globalRev);
      args.setIndividualRev(individualRev);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_fetchOps() throws ShouldSyncException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "fetchOps failed: out of sequence response");
      }
      fetchOps_result result = new fetchOps_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "fetchOps failed: unknown result");
    }

    public Hashtable findAndAddContactsByEmail(int reqSeq, Hashtable emails) throws TalkException, TException
    {
      send_findAndAddContactsByEmail(reqSeq, emails);
      return recv_findAndAddContactsByEmail();
    }

    public void send_findAndAddContactsByEmail(int reqSeq, Hashtable emails) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("findAndAddContactsByEmail", TMessageType.CALL, ++seqid_));
      findAndAddContactsByEmail_args args = new findAndAddContactsByEmail_args();
      args.setReqSeq(reqSeq);
      args.setEmails(emails);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Hashtable recv_findAndAddContactsByEmail() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "findAndAddContactsByEmail failed: out of sequence response");
      }
      findAndAddContactsByEmail_result result = new findAndAddContactsByEmail_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "findAndAddContactsByEmail failed: unknown result");
    }

    public Hashtable findAndAddContactsByMid(int reqSeq, String mid, ContactType type, String reference) throws TalkException, TException
    {
      send_findAndAddContactsByMid(reqSeq, mid, type, reference);
      return recv_findAndAddContactsByMid();
    }

    public void send_findAndAddContactsByMid(int reqSeq, String mid, ContactType type, String reference) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("findAndAddContactsByMid", TMessageType.CALL, ++seqid_));
      findAndAddContactsByMid_args args = new findAndAddContactsByMid_args();
      args.setReqSeq(reqSeq);
      args.setMid(mid);
      args.setType(type);
      args.setReference(reference);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Hashtable recv_findAndAddContactsByMid() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "findAndAddContactsByMid failed: out of sequence response");
      }
      findAndAddContactsByMid_result result = new findAndAddContactsByMid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "findAndAddContactsByMid failed: unknown result");
    }

    public Group findGroupByTicketV2(String ticketId) throws TalkException, TException
    {
      send_findGroupByTicketV2(ticketId);
      return recv_findGroupByTicketV2();
    }

    public void send_findGroupByTicketV2(String ticketId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("findGroupByTicketV2", TMessageType.CALL, ++seqid_));
      findGroupByTicketV2_args args = new findGroupByTicketV2_args();
      args.setTicketId(ticketId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Group recv_findGroupByTicketV2() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "findGroupByTicketV2 failed: out of sequence response");
      }
      findGroupByTicketV2_result result = new findGroupByTicketV2_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "findGroupByTicketV2 failed: unknown result");
    }

    public Hashtable findAndAddContactsByPhone(int reqSeq, Hashtable phones) throws TalkException, TException
    {
      send_findAndAddContactsByPhone(reqSeq, phones);
      return recv_findAndAddContactsByPhone();
    }

    public void send_findAndAddContactsByPhone(int reqSeq, Hashtable phones) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("findAndAddContactsByPhone", TMessageType.CALL, ++seqid_));
      findAndAddContactsByPhone_args args = new findAndAddContactsByPhone_args();
      args.setReqSeq(reqSeq);
      args.setPhones(phones);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Hashtable recv_findAndAddContactsByPhone() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "findAndAddContactsByPhone failed: out of sequence response");
      }
      findAndAddContactsByPhone_result result = new findAndAddContactsByPhone_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "findAndAddContactsByPhone failed: unknown result");
    }

    public Vector getFriendRequests(FriendRequestDirection direction, long lastSeenSeqId) throws TalkException, TException
    {
      send_getFriendRequests(direction, lastSeenSeqId);
      return recv_getFriendRequests();
    }

    public void send_getFriendRequests(FriendRequestDirection direction, long lastSeenSeqId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getFriendRequests", TMessageType.CALL, ++seqid_));
      getFriendRequests_args args = new getFriendRequests_args();
      args.setDirection(direction);
      args.setLastSeenSeqId(lastSeenSeqId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getFriendRequests() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getFriendRequests failed: out of sequence response");
      }
      getFriendRequests_result result = new getFriendRequests_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getFriendRequests failed: unknown result");
    }

    public void removeFriendRequest(FriendRequestDirection direction, String midOrEMid) throws TalkException, TException
    {
      send_removeFriendRequest(direction, midOrEMid);
      recv_removeFriendRequest();
    }

    public void send_removeFriendRequest(FriendRequestDirection direction, String midOrEMid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("removeFriendRequest", TMessageType.CALL, ++seqid_));
      removeFriendRequest_args args = new removeFriendRequest_args();
      args.setDirection(direction);
      args.setMidOrEMid(midOrEMid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_removeFriendRequest() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "removeFriendRequest failed: out of sequence response");
      }
      removeFriendRequest_result result = new removeFriendRequest_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public Hashtable findAndAddContactsByUserid(int reqSeq, String userid) throws TalkException, TException
    {
      send_findAndAddContactsByUserid(reqSeq, userid);
      return recv_findAndAddContactsByUserid();
    }

    public void send_findAndAddContactsByUserid(int reqSeq, String userid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("findAndAddContactsByUserid", TMessageType.CALL, ++seqid_));
      findAndAddContactsByUserid_args args = new findAndAddContactsByUserid_args();
      args.setReqSeq(reqSeq);
      args.setUserid(userid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Hashtable recv_findAndAddContactsByUserid() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "findAndAddContactsByUserid failed: out of sequence response");
      }
      findAndAddContactsByUserid_result result = new findAndAddContactsByUserid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "findAndAddContactsByUserid failed: unknown result");
    }

    public Contact findContactByUserid(String userid) throws TalkException, TException
    {
      send_findContactByUserid(userid);
      return recv_findContactByUserid();
    }

    public void send_findContactByUserid(String userid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("findContactByUserid", TMessageType.CALL, ++seqid_));
      findContactByUserid_args args = new findContactByUserid_args();
      args.setUserid(userid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Contact recv_findContactByUserid() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "findContactByUserid failed: out of sequence response");
      }
      findContactByUserid_result result = new findContactByUserid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "findContactByUserid failed: unknown result");
    }

    public Contact findContactByUserTicket(String ticketIdWithTag) throws TalkException, TException
    {
      send_findContactByUserTicket(ticketIdWithTag);
      return recv_findContactByUserTicket();
    }

    public void send_findContactByUserTicket(String ticketIdWithTag) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("findContactByUserTicket", TMessageType.CALL, ++seqid_));
      findContactByUserTicket_args args = new findContactByUserTicket_args();
      args.setTicketIdWithTag(ticketIdWithTag);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Contact recv_findContactByUserTicket() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "findContactByUserTicket failed: out of sequence response");
      }
      findContactByUserTicket_result result = new findContactByUserTicket_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "findContactByUserTicket failed: unknown result");
    }

    public Hashtable findContactsByEmail(Hashtable emails) throws TalkException, TException
    {
      send_findContactsByEmail(emails);
      return recv_findContactsByEmail();
    }

    public void send_findContactsByEmail(Hashtable emails) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("findContactsByEmail", TMessageType.CALL, ++seqid_));
      findContactsByEmail_args args = new findContactsByEmail_args();
      args.setEmails(emails);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Hashtable recv_findContactsByEmail() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "findContactsByEmail failed: out of sequence response");
      }
      findContactsByEmail_result result = new findContactsByEmail_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "findContactsByEmail failed: unknown result");
    }

    public Hashtable findContactsByPhone(Hashtable phones) throws TalkException, TException
    {
      send_findContactsByPhone(phones);
      return recv_findContactsByPhone();
    }

    public void send_findContactsByPhone(Hashtable phones) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("findContactsByPhone", TMessageType.CALL, ++seqid_));
      findContactsByPhone_args args = new findContactsByPhone_args();
      args.setPhones(phones);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Hashtable recv_findContactsByPhone() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "findContactsByPhone failed: out of sequence response");
      }
      findContactsByPhone_result result = new findContactsByPhone_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "findContactsByPhone failed: unknown result");
    }

    public SnsIdUserStatus findSnsIdUserStatus(SnsIdType snsIdType, String snsAccessToken, String udidHash) throws TalkException, TException
    {
      send_findSnsIdUserStatus(snsIdType, snsAccessToken, udidHash);
      return recv_findSnsIdUserStatus();
    }

    public void send_findSnsIdUserStatus(SnsIdType snsIdType, String snsAccessToken, String udidHash) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("findSnsIdUserStatus", TMessageType.CALL, ++seqid_));
      findSnsIdUserStatus_args args = new findSnsIdUserStatus_args();
      args.setSnsIdType(snsIdType);
      args.setSnsAccessToken(snsAccessToken);
      args.setUdidHash(udidHash);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public SnsIdUserStatus recv_findSnsIdUserStatus() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "findSnsIdUserStatus failed: out of sequence response");
      }
      findSnsIdUserStatus_result result = new findSnsIdUserStatus_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "findSnsIdUserStatus failed: unknown result");
    }

    public void finishUpdateVerification(String sessionId) throws TalkException, TException
    {
      send_finishUpdateVerification(sessionId);
      recv_finishUpdateVerification();
    }

    public void send_finishUpdateVerification(String sessionId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("finishUpdateVerification", TMessageType.CALL, ++seqid_));
      finishUpdateVerification_args args = new finishUpdateVerification_args();
      args.setSessionId(sessionId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_finishUpdateVerification() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "finishUpdateVerification failed: out of sequence response");
      }
      finishUpdateVerification_result result = new finishUpdateVerification_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public Ticket generateUserTicket(long expirationTime, int maxUseCount) throws TalkException, TException
    {
      send_generateUserTicket(expirationTime, maxUseCount);
      return recv_generateUserTicket();
    }

    public void send_generateUserTicket(long expirationTime, int maxUseCount) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("generateUserTicket", TMessageType.CALL, ++seqid_));
      generateUserTicket_args args = new generateUserTicket_args();
      args.setExpirationTime(expirationTime);
      args.setMaxUseCount(maxUseCount);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Ticket recv_generateUserTicket() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "generateUserTicket failed: out of sequence response");
      }
      generateUserTicket_result result = new generateUserTicket_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "generateUserTicket failed: unknown result");
    }

    public void destroyMessage(int seq, String chatId, String messageId, byte sessionId) throws TalkException, TException
    {
      send_destroyMessage(seq, chatId, messageId, sessionId);
      recv_destroyMessage();
    }

    public void send_destroyMessage(int seq, String chatId, String messageId, byte sessionId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("destroyMessage", TMessageType.CALL, ++seqid_));
      destroyMessage_args args = new destroyMessage_args();
      args.setSeq(seq);
      args.setChatId(chatId);
      args.setMessageId(messageId);
      args.setSessionId(sessionId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_destroyMessage() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "destroyMessage failed: out of sequence response");
      }
      destroyMessage_result result = new destroyMessage_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public Hashtable getAcceptedProximityMatches(String sessionId) throws TalkException, TException
    {
      send_getAcceptedProximityMatches(sessionId);
      return recv_getAcceptedProximityMatches();
    }

    public void send_getAcceptedProximityMatches(String sessionId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getAcceptedProximityMatches", TMessageType.CALL, ++seqid_));
      getAcceptedProximityMatches_args args = new getAcceptedProximityMatches_args();
      args.setSessionId(sessionId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Hashtable recv_getAcceptedProximityMatches() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getAcceptedProximityMatches failed: out of sequence response");
      }
      getAcceptedProximityMatches_result result = new getAcceptedProximityMatches_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getAcceptedProximityMatches failed: unknown result");
    }

    public Vector getActiveBuddySubscriberIds() throws TalkException, TException
    {
      send_getActiveBuddySubscriberIds();
      return recv_getActiveBuddySubscriberIds();
    }

    public void send_getActiveBuddySubscriberIds() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getActiveBuddySubscriberIds", TMessageType.CALL, ++seqid_));
      getActiveBuddySubscriberIds_args args = new getActiveBuddySubscriberIds_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getActiveBuddySubscriberIds() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getActiveBuddySubscriberIds failed: out of sequence response");
      }
      getActiveBuddySubscriberIds_result result = new getActiveBuddySubscriberIds_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getActiveBuddySubscriberIds failed: unknown result");
    }

    public Vector getAllContactIds() throws TalkException, TException
    {
      send_getAllContactIds();
      return recv_getAllContactIds();
    }

    public void send_getAllContactIds() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getAllContactIds", TMessageType.CALL, ++seqid_));
      getAllContactIds_args args = new getAllContactIds_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getAllContactIds() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getAllContactIds failed: out of sequence response");
      }
      getAllContactIds_result result = new getAllContactIds_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getAllContactIds failed: unknown result");
    }

    public AuthQrcode getAuthQrcode(boolean keepLoggedIn, String systemName) throws TalkException, TException
    {
      send_getAuthQrcode(keepLoggedIn, systemName);
      return recv_getAuthQrcode();
    }

    public void send_getAuthQrcode(boolean keepLoggedIn, String systemName) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getAuthQrcode", TMessageType.CALL, ++seqid_));
      getAuthQrcode_args args = new getAuthQrcode_args();
      args.setKeepLoggedIn(keepLoggedIn);
      args.setSystemName(systemName);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public AuthQrcode recv_getAuthQrcode() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getAuthQrcode failed: out of sequence response");
      }
      getAuthQrcode_result result = new getAuthQrcode_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getAuthQrcode failed: unknown result");
    }

    public Vector getBlockedContactIds() throws TalkException, TException
    {
      send_getBlockedContactIds();
      return recv_getBlockedContactIds();
    }

    public void send_getBlockedContactIds() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getBlockedContactIds", TMessageType.CALL, ++seqid_));
      getBlockedContactIds_args args = new getBlockedContactIds_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getBlockedContactIds() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getBlockedContactIds failed: out of sequence response");
      }
      getBlockedContactIds_result result = new getBlockedContactIds_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getBlockedContactIds failed: unknown result");
    }

    public RegisterWithPhoneNumberResult registerWithPhoneNumber(String sessionId, String migrationPincodeSessionId) throws TalkException, TException
    {
      send_registerWithPhoneNumber(sessionId, migrationPincodeSessionId);
      return recv_registerWithPhoneNumber();
    }

    public void send_registerWithPhoneNumber(String sessionId, String migrationPincodeSessionId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("registerWithPhoneNumber", TMessageType.CALL, ++seqid_));
      registerWithPhoneNumber_args args = new registerWithPhoneNumber_args();
      args.setSessionId(sessionId);
      args.setMigrationPincodeSessionId(migrationPincodeSessionId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public RegisterWithPhoneNumberResult recv_registerWithPhoneNumber() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "registerWithPhoneNumber failed: out of sequence response");
      }
      registerWithPhoneNumber_result result = new registerWithPhoneNumber_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "registerWithPhoneNumber failed: unknown result");
    }

    public RegisterWithPhoneNumberResult registerWithPhoneNumberAndPassword(String sessionId, String keynm, String encrypted) throws TalkException, TException
    {
      send_registerWithPhoneNumberAndPassword(sessionId, keynm, encrypted);
      return recv_registerWithPhoneNumberAndPassword();
    }

    public void send_registerWithPhoneNumberAndPassword(String sessionId, String keynm, String encrypted) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("registerWithPhoneNumberAndPassword", TMessageType.CALL, ++seqid_));
      registerWithPhoneNumberAndPassword_args args = new registerWithPhoneNumberAndPassword_args();
      args.setSessionId(sessionId);
      args.setKeynm(keynm);
      args.setEncrypted(encrypted);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public RegisterWithPhoneNumberResult recv_registerWithPhoneNumberAndPassword() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "registerWithPhoneNumberAndPassword failed: out of sequence response");
      }
      registerWithPhoneNumberAndPassword_result result = new registerWithPhoneNumberAndPassword_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "registerWithPhoneNumberAndPassword failed: unknown result");
    }

    public AnalyticsInfo getAnalyticsInfo() throws TalkException, TException
    {
      send_getAnalyticsInfo();
      return recv_getAnalyticsInfo();
    }

    public void send_getAnalyticsInfo() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getAnalyticsInfo", TMessageType.CALL, ++seqid_));
      getAnalyticsInfo_args args = new getAnalyticsInfo_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public AnalyticsInfo recv_getAnalyticsInfo() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getAnalyticsInfo failed: out of sequence response");
      }
      getAnalyticsInfo_result result = new getAnalyticsInfo_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getAnalyticsInfo failed: unknown result");
    }

    public void reportClientStatistics(int reqSeq, ReportCategory category, int count) throws TalkException, TException
    {
      send_reportClientStatistics(reqSeq, category, count);
      recv_reportClientStatistics();
    }

    public void send_reportClientStatistics(int reqSeq, ReportCategory category, int count) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("reportClientStatistics", TMessageType.CALL, ++seqid_));
      reportClientStatistics_args args = new reportClientStatistics_args();
      args.setReqSeq(reqSeq);
      args.setCategory(category);
      args.setCount(count);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_reportClientStatistics() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "reportClientStatistics failed: out of sequence response");
      }
      reportClientStatistics_result result = new reportClientStatistics_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public String verifyPhoneNumberForLogin(String verifierFromPhone, String pinCodeForPhone, String verifierFromLogin) throws TalkException, TException
    {
      send_verifyPhoneNumberForLogin(verifierFromPhone, pinCodeForPhone, verifierFromLogin);
      return recv_verifyPhoneNumberForLogin();
    }

    public void send_verifyPhoneNumberForLogin(String verifierFromPhone, String pinCodeForPhone, String verifierFromLogin) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("verifyPhoneNumberForLogin", TMessageType.CALL, ++seqid_));
      verifyPhoneNumberForLogin_args args = new verifyPhoneNumberForLogin_args();
      args.setVerifierFromPhone(verifierFromPhone);
      args.setPinCodeForPhone(pinCodeForPhone);
      args.setVerifierFromLogin(verifierFromLogin);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_verifyPhoneNumberForLogin() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "verifyPhoneNumberForLogin failed: out of sequence response");
      }
      verifyPhoneNumberForLogin_result result = new verifyPhoneNumberForLogin_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "verifyPhoneNumberForLogin failed: unknown result");
    }

    public PhoneVerificationResult verifyPhoneNumber(String sessionId, String pinCode, String udidHash, String migrationPincodeSessionId, String oldUdidHash) throws TalkException, TException
    {
      send_verifyPhoneNumber(sessionId, pinCode, udidHash, migrationPincodeSessionId, oldUdidHash);
      return recv_verifyPhoneNumber();
    }

    public void send_verifyPhoneNumber(String sessionId, String pinCode, String udidHash, String migrationPincodeSessionId, String oldUdidHash) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("verifyPhoneNumber", TMessageType.CALL, ++seqid_));
      verifyPhoneNumber_args args = new verifyPhoneNumber_args();
      args.setSessionId(sessionId);
      args.setPinCode(pinCode);
      args.setUdidHash(udidHash);
      args.setMigrationPincodeSessionId(migrationPincodeSessionId);
      args.setOldUdidHash(oldUdidHash);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public PhoneVerificationResult recv_verifyPhoneNumber() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "verifyPhoneNumber failed: out of sequence response");
      }
      verifyPhoneNumber_result result = new verifyPhoneNumber_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "verifyPhoneNumber failed: unknown result");
    }

    public Vector getBlockedContactIdsByRange(int start, int count) throws TalkException, TException
    {
      send_getBlockedContactIdsByRange(start, count);
      return recv_getBlockedContactIdsByRange();
    }

    public void send_getBlockedContactIdsByRange(int start, int count) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getBlockedContactIdsByRange", TMessageType.CALL, ++seqid_));
      getBlockedContactIdsByRange_args args = new getBlockedContactIdsByRange_args();
      args.setStart(start);
      args.setCount(count);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getBlockedContactIdsByRange() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getBlockedContactIdsByRange failed: out of sequence response");
      }
      getBlockedContactIdsByRange_result result = new getBlockedContactIdsByRange_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getBlockedContactIdsByRange failed: unknown result");
    }

    public Vector getBlockedRecommendationIds() throws TalkException, TException
    {
      send_getBlockedRecommendationIds();
      return recv_getBlockedRecommendationIds();
    }

    public void send_getBlockedRecommendationIds() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getBlockedRecommendationIds", TMessageType.CALL, ++seqid_));
      getBlockedRecommendationIds_args args = new getBlockedRecommendationIds_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getBlockedRecommendationIds() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getBlockedRecommendationIds failed: out of sequence response");
      }
      getBlockedRecommendationIds_result result = new getBlockedRecommendationIds_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getBlockedRecommendationIds failed: unknown result");
    }

    public Vector getBuddyBlockerIds() throws TalkException, TException
    {
      send_getBuddyBlockerIds();
      return recv_getBuddyBlockerIds();
    }

    public void send_getBuddyBlockerIds() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getBuddyBlockerIds", TMessageType.CALL, ++seqid_));
      getBuddyBlockerIds_args args = new getBuddyBlockerIds_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getBuddyBlockerIds() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getBuddyBlockerIds failed: out of sequence response");
      }
      getBuddyBlockerIds_result result = new getBuddyBlockerIds_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getBuddyBlockerIds failed: unknown result");
    }

    public Geolocation getBuddyLocation(String mid, int index) throws TalkException, TException
    {
      send_getBuddyLocation(mid, index);
      return recv_getBuddyLocation();
    }

    public void send_getBuddyLocation(String mid, int index) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getBuddyLocation", TMessageType.CALL, ++seqid_));
      getBuddyLocation_args args = new getBuddyLocation_args();
      args.setMid(mid);
      args.setIndex(index);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Geolocation recv_getBuddyLocation() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getBuddyLocation failed: out of sequence response");
      }
      getBuddyLocation_result result = new getBuddyLocation_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getBuddyLocation failed: unknown result");
    }

    public Vector getCompactContactsModifiedSince(long timestamp) throws TalkException, TException
    {
      send_getCompactContactsModifiedSince(timestamp);
      return recv_getCompactContactsModifiedSince();
    }

    public void send_getCompactContactsModifiedSince(long timestamp) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getCompactContactsModifiedSince", TMessageType.CALL, ++seqid_));
      getCompactContactsModifiedSince_args args = new getCompactContactsModifiedSince_args();
      args.setTimestamp(timestamp);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getCompactContactsModifiedSince() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getCompactContactsModifiedSince failed: out of sequence response");
      }
      getCompactContactsModifiedSince_result result = new getCompactContactsModifiedSince_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getCompactContactsModifiedSince failed: unknown result");
    }

    public Group getCompactGroup(String groupId) throws TalkException, TException
    {
      send_getCompactGroup(groupId);
      return recv_getCompactGroup();
    }

    public void send_getCompactGroup(String groupId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getCompactGroup", TMessageType.CALL, ++seqid_));
      getCompactGroup_args args = new getCompactGroup_args();
      args.setGroupId(groupId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Group recv_getCompactGroup() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getCompactGroup failed: out of sequence response");
      }
      getCompactGroup_result result = new getCompactGroup_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getCompactGroup failed: unknown result");
    }

    public Room getCompactRoom(String roomId) throws TalkException, TException
    {
      send_getCompactRoom(roomId);
      return recv_getCompactRoom();
    }

    public void send_getCompactRoom(String roomId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getCompactRoom", TMessageType.CALL, ++seqid_));
      getCompactRoom_args args = new getCompactRoom_args();
      args.setRoomId(roomId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Room recv_getCompactRoom() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getCompactRoom failed: out of sequence response");
      }
      getCompactRoom_result result = new getCompactRoom_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getCompactRoom failed: unknown result");
    }

    public Contact getContact(String id) throws TalkException, TException
    {
      send_getContact(id);
      return recv_getContact();
    }

    public void send_getContact(String id) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getContact", TMessageType.CALL, ++seqid_));
      getContact_args args = new getContact_args();
      args.setId(id);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Contact recv_getContact() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getContact failed: out of sequence response");
      }
      getContact_result result = new getContact_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getContact failed: unknown result");
    }

    public Vector getContacts(Vector ids) throws TalkException, TException
    {
      send_getContacts(ids);
      return recv_getContacts();
    }

    public void send_getContacts(Vector ids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getContacts", TMessageType.CALL, ++seqid_));
      getContacts_args args = new getContacts_args();
      args.setIds(ids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getContacts() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getContacts failed: out of sequence response");
      }
      getContacts_result result = new getContacts_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getContacts failed: unknown result");
    }

    public Contact getContactWithFriendRequestStatus(String id) throws TalkException, TException
    {
      send_getContactWithFriendRequestStatus(id);
      return recv_getContactWithFriendRequestStatus();
    }

    public void send_getContactWithFriendRequestStatus(String id) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getContactWithFriendRequestStatus", TMessageType.CALL, ++seqid_));
      getContactWithFriendRequestStatus_args args = new getContactWithFriendRequestStatus_args();
      args.setId(id);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Contact recv_getContactWithFriendRequestStatus() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getContactWithFriendRequestStatus failed: out of sequence response");
      }
      getContactWithFriendRequestStatus_result result = new getContactWithFriendRequestStatus_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getContactWithFriendRequestStatus failed: unknown result");
    }

    public String getCountryWithRequestIp() throws TalkException, TException
    {
      send_getCountryWithRequestIp();
      return recv_getCountryWithRequestIp();
    }

    public void send_getCountryWithRequestIp() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getCountryWithRequestIp", TMessageType.CALL, ++seqid_));
      getCountryWithRequestIp_args args = new getCountryWithRequestIp_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getCountryWithRequestIp() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getCountryWithRequestIp failed: out of sequence response");
      }
      getCountryWithRequestIp_result result = new getCountryWithRequestIp_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getCountryWithRequestIp failed: unknown result");
    }

    public Vector getFavoriteMids() throws TalkException, TException
    {
      send_getFavoriteMids();
      return recv_getFavoriteMids();
    }

    public void send_getFavoriteMids() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getFavoriteMids", TMessageType.CALL, ++seqid_));
      getFavoriteMids_args args = new getFavoriteMids_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getFavoriteMids() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getFavoriteMids failed: out of sequence response");
      }
      getFavoriteMids_result result = new getFavoriteMids_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getFavoriteMids failed: unknown result");
    }

    public Group getGroup(String groupId) throws TalkException, TException
    {
      send_getGroup(groupId);
      return recv_getGroup();
    }

    public void send_getGroup(String groupId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getGroup", TMessageType.CALL, ++seqid_));
      getGroup_args args = new getGroup_args();
      args.setGroupId(groupId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Group recv_getGroup() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getGroup failed: out of sequence response");
      }
      getGroup_result result = new getGroup_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getGroup failed: unknown result");
    }

    public Vector getGroupIdsInvited() throws TalkException, TException
    {
      send_getGroupIdsInvited();
      return recv_getGroupIdsInvited();
    }

    public void send_getGroupIdsInvited() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getGroupIdsInvited", TMessageType.CALL, ++seqid_));
      getGroupIdsInvited_args args = new getGroupIdsInvited_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getGroupIdsInvited() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getGroupIdsInvited failed: out of sequence response");
      }
      getGroupIdsInvited_result result = new getGroupIdsInvited_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getGroupIdsInvited failed: unknown result");
    }

    public Vector getGroupIdsJoined() throws TalkException, TException
    {
      send_getGroupIdsJoined();
      return recv_getGroupIdsJoined();
    }

    public void send_getGroupIdsJoined() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getGroupIdsJoined", TMessageType.CALL, ++seqid_));
      getGroupIdsJoined_args args = new getGroupIdsJoined_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getGroupIdsJoined() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getGroupIdsJoined failed: out of sequence response");
      }
      getGroupIdsJoined_result result = new getGroupIdsJoined_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getGroupIdsJoined failed: unknown result");
    }

    public Vector getGroups(Vector groupIds) throws TalkException, TException
    {
      send_getGroups(groupIds);
      return recv_getGroups();
    }

    public void send_getGroups(Vector groupIds) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getGroups", TMessageType.CALL, ++seqid_));
      getGroups_args args = new getGroups_args();
      args.setGroupIds(groupIds);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getGroups() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getGroups failed: out of sequence response");
      }
      getGroups_result result = new getGroups_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getGroups failed: unknown result");
    }

    public Vector getHiddenContactMids() throws TalkException, TException
    {
      send_getHiddenContactMids();
      return recv_getHiddenContactMids();
    }

    public void send_getHiddenContactMids() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getHiddenContactMids", TMessageType.CALL, ++seqid_));
      getHiddenContactMids_args args = new getHiddenContactMids_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getHiddenContactMids() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getHiddenContactMids failed: out of sequence response");
      }
      getHiddenContactMids_result result = new getHiddenContactMids_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getHiddenContactMids failed: unknown result");
    }

    public String getIdentityIdentifier() throws TalkException, TException
    {
      send_getIdentityIdentifier();
      return recv_getIdentityIdentifier();
    }

    public void send_getIdentityIdentifier() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getIdentityIdentifier", TMessageType.CALL, ++seqid_));
      getIdentityIdentifier_args args = new getIdentityIdentifier_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getIdentityIdentifier() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getIdentityIdentifier failed: out of sequence response");
      }
      getIdentityIdentifier_result result = new getIdentityIdentifier_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getIdentityIdentifier failed: unknown result");
    }

    public int getLastAnnouncementIndex() throws TalkException, TException
    {
      send_getLastAnnouncementIndex();
      return recv_getLastAnnouncementIndex();
    }

    public void send_getLastAnnouncementIndex() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getLastAnnouncementIndex", TMessageType.CALL, ++seqid_));
      getLastAnnouncementIndex_args args = new getLastAnnouncementIndex_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_getLastAnnouncementIndex() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getLastAnnouncementIndex failed: out of sequence response");
      }
      getLastAnnouncementIndex_result result = new getLastAnnouncementIndex_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getLastAnnouncementIndex failed: unknown result");
    }

    public long getLastOpRevision() throws TalkException, TException
    {
      send_getLastOpRevision();
      return recv_getLastOpRevision();
    }

    public void send_getLastOpRevision() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getLastOpRevision", TMessageType.CALL, ++seqid_));
      getLastOpRevision_args args = new getLastOpRevision_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public long recv_getLastOpRevision() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getLastOpRevision failed: out of sequence response");
      }
      getLastOpRevision_result result = new getLastOpRevision_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getLastOpRevision failed: unknown result");
    }

    public SuggestDictionaryRevisions getSuggestRevisions() throws TalkException, TException
    {
      send_getSuggestRevisions();
      return recv_getSuggestRevisions();
    }

    public void send_getSuggestRevisions() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getSuggestRevisions", TMessageType.CALL, ++seqid_));
      getSuggestRevisions_args args = new getSuggestRevisions_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public SuggestDictionaryRevisions recv_getSuggestRevisions() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getSuggestRevisions failed: out of sequence response");
      }
      getSuggestRevisions_result result = new getSuggestRevisions_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getSuggestRevisions failed: unknown result");
    }

    public Vector getPreviousMessagesV2WithReadCount(String messageBoxId, MessageBoxV2MessageId endMessageId, int messagesCount) throws TalkException, TException
    {
      send_getPreviousMessagesV2WithReadCount(messageBoxId, endMessageId, messagesCount);
      return recv_getPreviousMessagesV2WithReadCount();
    }

    public void send_getPreviousMessagesV2WithReadCount(String messageBoxId, MessageBoxV2MessageId endMessageId, int messagesCount) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getPreviousMessagesV2WithReadCount", TMessageType.CALL, ++seqid_));
      getPreviousMessagesV2WithReadCount_args args = new getPreviousMessagesV2WithReadCount_args();
      args.setMessageBoxId(messageBoxId);
      args.setEndMessageId(endMessageId);
      args.setMessagesCount(messagesCount);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getPreviousMessagesV2WithReadCount() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getPreviousMessagesV2WithReadCount failed: out of sequence response");
      }
      getPreviousMessagesV2WithReadCount_result result = new getPreviousMessagesV2WithReadCount_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getPreviousMessagesV2WithReadCount failed: unknown result");
    }

    public TMessageBox getMessageBox(String channelId, String messageBoxId, int lastMessagesCount) throws TalkException, TException
    {
      send_getMessageBox(channelId, messageBoxId, lastMessagesCount);
      return recv_getMessageBox();
    }

    public void send_getMessageBox(String channelId, String messageBoxId, int lastMessagesCount) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getMessageBox", TMessageType.CALL, ++seqid_));
      getMessageBox_args args = new getMessageBox_args();
      args.setChannelId(channelId);
      args.setMessageBoxId(messageBoxId);
      args.setLastMessagesCount(lastMessagesCount);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public TMessageBox recv_getMessageBox() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getMessageBox failed: out of sequence response");
      }
      getMessageBox_result result = new getMessageBox_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getMessageBox failed: unknown result");
    }

    public TMessageBoxWrapUp getMessageBoxCompactWrapUp(String mid) throws TalkException, TException
    {
      send_getMessageBoxCompactWrapUp(mid);
      return recv_getMessageBoxCompactWrapUp();
    }

    public void send_getMessageBoxCompactWrapUp(String mid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getMessageBoxCompactWrapUp", TMessageType.CALL, ++seqid_));
      getMessageBoxCompactWrapUp_args args = new getMessageBoxCompactWrapUp_args();
      args.setMid(mid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public TMessageBoxWrapUp recv_getMessageBoxCompactWrapUp() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getMessageBoxCompactWrapUp failed: out of sequence response");
      }
      getMessageBoxCompactWrapUp_result result = new getMessageBoxCompactWrapUp_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getMessageBoxCompactWrapUp failed: unknown result");
    }

    public TMessageBoxWrapUpResponse getMessageBoxCompactWrapUpList(int start, int messageBoxCount) throws TalkException, TException
    {
      send_getMessageBoxCompactWrapUpList(start, messageBoxCount);
      return recv_getMessageBoxCompactWrapUpList();
    }

    public void send_getMessageBoxCompactWrapUpList(int start, int messageBoxCount) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getMessageBoxCompactWrapUpList", TMessageType.CALL, ++seqid_));
      getMessageBoxCompactWrapUpList_args args = new getMessageBoxCompactWrapUpList_args();
      args.setStart(start);
      args.setMessageBoxCount(messageBoxCount);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public TMessageBoxWrapUpResponse recv_getMessageBoxCompactWrapUpList() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getMessageBoxCompactWrapUpList failed: out of sequence response");
      }
      getMessageBoxCompactWrapUpList_result result = new getMessageBoxCompactWrapUpList_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getMessageBoxCompactWrapUpList failed: unknown result");
    }

    public Vector getMessageBoxList(String channelId, int lastMessagesCount) throws TalkException, TException
    {
      send_getMessageBoxList(channelId, lastMessagesCount);
      return recv_getMessageBoxList();
    }

    public void send_getMessageBoxList(String channelId, int lastMessagesCount) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getMessageBoxList", TMessageType.CALL, ++seqid_));
      getMessageBoxList_args args = new getMessageBoxList_args();
      args.setChannelId(channelId);
      args.setLastMessagesCount(lastMessagesCount);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getMessageBoxList() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getMessageBoxList failed: out of sequence response");
      }
      getMessageBoxList_result result = new getMessageBoxList_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getMessageBoxList failed: unknown result");
    }

    public Vector getMessageBoxListByStatus(String channelId, int lastMessagesCount, int status) throws TalkException, TException
    {
      send_getMessageBoxListByStatus(channelId, lastMessagesCount, status);
      return recv_getMessageBoxListByStatus();
    }

    public void send_getMessageBoxListByStatus(String channelId, int lastMessagesCount, int status) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getMessageBoxListByStatus", TMessageType.CALL, ++seqid_));
      getMessageBoxListByStatus_args args = new getMessageBoxListByStatus_args();
      args.setChannelId(channelId);
      args.setLastMessagesCount(lastMessagesCount);
      args.setStatus(status);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getMessageBoxListByStatus() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getMessageBoxListByStatus failed: out of sequence response");
      }
      getMessageBoxListByStatus_result result = new getMessageBoxListByStatus_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getMessageBoxListByStatus failed: unknown result");
    }

    public TMessageBoxWrapUp getMessageBoxWrapUp(String mid) throws TalkException, TException
    {
      send_getMessageBoxWrapUp(mid);
      return recv_getMessageBoxWrapUp();
    }

    public void send_getMessageBoxWrapUp(String mid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getMessageBoxWrapUp", TMessageType.CALL, ++seqid_));
      getMessageBoxWrapUp_args args = new getMessageBoxWrapUp_args();
      args.setMid(mid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public TMessageBoxWrapUp recv_getMessageBoxWrapUp() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getMessageBoxWrapUp failed: out of sequence response");
      }
      getMessageBoxWrapUp_result result = new getMessageBoxWrapUp_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getMessageBoxWrapUp failed: unknown result");
    }

    public TMessageBoxWrapUpResponse getMessageBoxWrapUpList(int start, int messageBoxCount) throws TalkException, TException
    {
      send_getMessageBoxWrapUpList(start, messageBoxCount);
      return recv_getMessageBoxWrapUpList();
    }

    public void send_getMessageBoxWrapUpList(int start, int messageBoxCount) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getMessageBoxWrapUpList", TMessageType.CALL, ++seqid_));
      getMessageBoxWrapUpList_args args = new getMessageBoxWrapUpList_args();
      args.setStart(start);
      args.setMessageBoxCount(messageBoxCount);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public TMessageBoxWrapUpResponse recv_getMessageBoxWrapUpList() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getMessageBoxWrapUpList failed: out of sequence response");
      }
      getMessageBoxWrapUpList_result result = new getMessageBoxWrapUpList_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getMessageBoxWrapUpList failed: unknown result");
    }

    public Vector getMessagesBySequenceNumber(String channelId, String messageBoxId, long startSeq, long endSeq) throws TalkException, TException
    {
      send_getMessagesBySequenceNumber(channelId, messageBoxId, startSeq, endSeq);
      return recv_getMessagesBySequenceNumber();
    }

    public void send_getMessagesBySequenceNumber(String channelId, String messageBoxId, long startSeq, long endSeq) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getMessagesBySequenceNumber", TMessageType.CALL, ++seqid_));
      getMessagesBySequenceNumber_args args = new getMessagesBySequenceNumber_args();
      args.setChannelId(channelId);
      args.setMessageBoxId(messageBoxId);
      args.setStartSeq(startSeq);
      args.setEndSeq(endSeq);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getMessagesBySequenceNumber() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getMessagesBySequenceNumber failed: out of sequence response");
      }
      getMessagesBySequenceNumber_result result = new getMessagesBySequenceNumber_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getMessagesBySequenceNumber failed: unknown result");
    }

    public Vector getNextMessages(String messageBoxId, long startSeq, int messagesCount) throws TalkException, TException
    {
      send_getNextMessages(messageBoxId, startSeq, messagesCount);
      return recv_getNextMessages();
    }

    public void send_getNextMessages(String messageBoxId, long startSeq, int messagesCount) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getNextMessages", TMessageType.CALL, ++seqid_));
      getNextMessages_args args = new getNextMessages_args();
      args.setMessageBoxId(messageBoxId);
      args.setStartSeq(startSeq);
      args.setMessagesCount(messagesCount);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getNextMessages() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getNextMessages failed: out of sequence response");
      }
      getNextMessages_result result = new getNextMessages_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getNextMessages failed: unknown result");
    }

    public Vector getNotificationPolicy(CarrierCode carrier) throws TalkException, TException
    {
      send_getNotificationPolicy(carrier);
      return recv_getNotificationPolicy();
    }

    public void send_getNotificationPolicy(CarrierCode carrier) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getNotificationPolicy", TMessageType.CALL, ++seqid_));
      getNotificationPolicy_args args = new getNotificationPolicy_args();
      args.setCarrier(carrier);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getNotificationPolicy() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getNotificationPolicy failed: out of sequence response");
      }
      getNotificationPolicy_result result = new getNotificationPolicy_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getNotificationPolicy failed: unknown result");
    }

    public Vector getPreviousMessages(String messageBoxId, long endSeq, int messagesCount) throws TalkException, TException
    {
      send_getPreviousMessages(messageBoxId, endSeq, messagesCount);
      return recv_getPreviousMessages();
    }

    public void send_getPreviousMessages(String messageBoxId, long endSeq, int messagesCount) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getPreviousMessages", TMessageType.CALL, ++seqid_));
      getPreviousMessages_args args = new getPreviousMessages_args();
      args.setMessageBoxId(messageBoxId);
      args.setEndSeq(endSeq);
      args.setMessagesCount(messagesCount);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getPreviousMessages() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getPreviousMessages failed: out of sequence response");
      }
      getPreviousMessages_result result = new getPreviousMessages_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getPreviousMessages failed: unknown result");
    }

    public Profile getProfile() throws TalkException, TException
    {
      send_getProfile();
      return recv_getProfile();
    }

    public void send_getProfile() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getProfile", TMessageType.CALL, ++seqid_));
      getProfile_args args = new getProfile_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Profile recv_getProfile() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getProfile failed: out of sequence response");
      }
      getProfile_result result = new getProfile_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getProfile failed: unknown result");
    }

    public ProximityMatchCandidateResult getProximityMatchCandidateList(String sessionId) throws TalkException, TException
    {
      send_getProximityMatchCandidateList(sessionId);
      return recv_getProximityMatchCandidateList();
    }

    public void send_getProximityMatchCandidateList(String sessionId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getProximityMatchCandidateList", TMessageType.CALL, ++seqid_));
      getProximityMatchCandidateList_args args = new getProximityMatchCandidateList_args();
      args.setSessionId(sessionId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ProximityMatchCandidateResult recv_getProximityMatchCandidateList() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getProximityMatchCandidateList failed: out of sequence response");
      }
      getProximityMatchCandidateList_result result = new getProximityMatchCandidateList_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getProximityMatchCandidateList failed: unknown result");
    }

    public Hashtable getProximityMatchCandidates(String sessionId) throws TalkException, TException
    {
      send_getProximityMatchCandidates(sessionId);
      return recv_getProximityMatchCandidates();
    }

    public void send_getProximityMatchCandidates(String sessionId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getProximityMatchCandidates", TMessageType.CALL, ++seqid_));
      getProximityMatchCandidates_args args = new getProximityMatchCandidates_args();
      args.setSessionId(sessionId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Hashtable recv_getProximityMatchCandidates() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getProximityMatchCandidates failed: out of sequence response");
      }
      getProximityMatchCandidates_result result = new getProximityMatchCandidates_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getProximityMatchCandidates failed: unknown result");
    }

    public Vector getRecentMessages(String messageBoxId, int messagesCount) throws TalkException, TException
    {
      send_getRecentMessages(messageBoxId, messagesCount);
      return recv_getRecentMessages();
    }

    public void send_getRecentMessages(String messageBoxId, int messagesCount) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getRecentMessages", TMessageType.CALL, ++seqid_));
      getRecentMessages_args args = new getRecentMessages_args();
      args.setMessageBoxId(messageBoxId);
      args.setMessagesCount(messagesCount);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getRecentMessages() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getRecentMessages failed: out of sequence response");
      }
      getRecentMessages_result result = new getRecentMessages_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getRecentMessages failed: unknown result");
    }

    public Vector getRecommendationIds() throws TalkException, TException
    {
      send_getRecommendationIds();
      return recv_getRecommendationIds();
    }

    public void send_getRecommendationIds() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getRecommendationIds", TMessageType.CALL, ++seqid_));
      getRecommendationIds_args args = new getRecommendationIds_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getRecommendationIds() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getRecommendationIds failed: out of sequence response");
      }
      getRecommendationIds_result result = new getRecommendationIds_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getRecommendationIds failed: unknown result");
    }

    public Room getRoom(String roomId) throws TalkException, TException
    {
      send_getRoom(roomId);
      return recv_getRoom();
    }

    public void send_getRoom(String roomId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getRoom", TMessageType.CALL, ++seqid_));
      getRoom_args args = new getRoom_args();
      args.setRoomId(roomId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Room recv_getRoom() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getRoom failed: out of sequence response");
      }
      getRoom_result result = new getRoom_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getRoom failed: unknown result");
    }

    public RSAKey getRSAKeyInfo(IdentityProvider provider) throws TalkException, TException
    {
      send_getRSAKeyInfo(provider);
      return recv_getRSAKeyInfo();
    }

    public void send_getRSAKeyInfo(IdentityProvider provider) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getRSAKeyInfo", TMessageType.CALL, ++seqid_));
      getRSAKeyInfo_args args = new getRSAKeyInfo_args();
      args.setProvider(provider);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public RSAKey recv_getRSAKeyInfo() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getRSAKeyInfo failed: out of sequence response");
      }
      getRSAKeyInfo_result result = new getRSAKeyInfo_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getRSAKeyInfo failed: unknown result");
    }

    public long getServerTime() throws TalkException, TException
    {
      send_getServerTime();
      return recv_getServerTime();
    }

    public void send_getServerTime() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getServerTime", TMessageType.CALL, ++seqid_));
      getServerTime_args args = new getServerTime_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public long recv_getServerTime() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getServerTime failed: out of sequence response");
      }
      getServerTime_result result = new getServerTime_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getServerTime failed: unknown result");
    }

    public Vector getSessions() throws TalkException, TException
    {
      send_getSessions();
      return recv_getSessions();
    }

    public void send_getSessions() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getSessions", TMessageType.CALL, ++seqid_));
      getSessions_args args = new getSessions_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getSessions() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getSessions failed: out of sequence response");
      }
      getSessions_result result = new getSessions_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getSessions failed: unknown result");
    }

    public Settings getSettings() throws TalkException, TException
    {
      send_getSettings();
      return recv_getSettings();
    }

    public void send_getSettings() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getSettings", TMessageType.CALL, ++seqid_));
      getSettings_args args = new getSettings_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Settings recv_getSettings() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getSettings failed: out of sequence response");
      }
      getSettings_result result = new getSettings_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getSettings failed: unknown result");
    }

    public Vector getGroupsV2(Vector groupIds) throws TalkException, TException
    {
      send_getGroupsV2(groupIds);
      return recv_getGroupsV2();
    }

    public void send_getGroupsV2(Vector groupIds) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getGroupsV2", TMessageType.CALL, ++seqid_));
      getGroupsV2_args args = new getGroupsV2_args();
      args.setGroupIds(groupIds);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getGroupsV2() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getGroupsV2 failed: out of sequence response");
      }
      getGroupsV2_result result = new getGroupsV2_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getGroupsV2 failed: unknown result");
    }

    public Settings getSettingsAttributes(int attrBitset) throws TalkException, TException
    {
      send_getSettingsAttributes(attrBitset);
      return recv_getSettingsAttributes();
    }

    public void send_getSettingsAttributes(int attrBitset) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getSettingsAttributes", TMessageType.CALL, ++seqid_));
      getSettingsAttributes_args args = new getSettingsAttributes_args();
      args.setAttrBitset(attrBitset);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Settings recv_getSettingsAttributes() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getSettingsAttributes failed: out of sequence response");
      }
      getSettingsAttributes_result result = new getSettingsAttributes_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getSettingsAttributes failed: unknown result");
    }

    public SystemConfiguration getSystemConfiguration() throws TalkException, TException
    {
      send_getSystemConfiguration();
      return recv_getSystemConfiguration();
    }

    public void send_getSystemConfiguration() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getSystemConfiguration", TMessageType.CALL, ++seqid_));
      getSystemConfiguration_args args = new getSystemConfiguration_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public SystemConfiguration recv_getSystemConfiguration() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getSystemConfiguration failed: out of sequence response");
      }
      getSystemConfiguration_result result = new getSystemConfiguration_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getSystemConfiguration failed: unknown result");
    }

    public Ticket getUserTicket() throws TalkException, TException
    {
      send_getUserTicket();
      return recv_getUserTicket();
    }

    public void send_getUserTicket() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getUserTicket", TMessageType.CALL, ++seqid_));
      getUserTicket_args args = new getUserTicket_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Ticket recv_getUserTicket() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getUserTicket failed: out of sequence response");
      }
      getUserTicket_result result = new getUserTicket_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getUserTicket failed: unknown result");
    }

    public WapInvitation getWapInvitation(String invitationHash) throws TalkException, TException
    {
      send_getWapInvitation(invitationHash);
      return recv_getWapInvitation();
    }

    public void send_getWapInvitation(String invitationHash) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getWapInvitation", TMessageType.CALL, ++seqid_));
      getWapInvitation_args args = new getWapInvitation_args();
      args.setInvitationHash(invitationHash);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public WapInvitation recv_getWapInvitation() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getWapInvitation failed: out of sequence response");
      }
      getWapInvitation_result result = new getWapInvitation_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getWapInvitation failed: unknown result");
    }

    public void invalidateUserTicket() throws TalkException, TException
    {
      send_invalidateUserTicket();
      recv_invalidateUserTicket();
    }

    public void send_invalidateUserTicket() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("invalidateUserTicket", TMessageType.CALL, ++seqid_));
      invalidateUserTicket_args args = new invalidateUserTicket_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_invalidateUserTicket() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "invalidateUserTicket failed: out of sequence response");
      }
      invalidateUserTicket_result result = new invalidateUserTicket_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void inviteFriendsBySms(Vector phoneNumberList) throws TalkException, TException
    {
      send_inviteFriendsBySms(phoneNumberList);
      recv_inviteFriendsBySms();
    }

    public void send_inviteFriendsBySms(Vector phoneNumberList) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("inviteFriendsBySms", TMessageType.CALL, ++seqid_));
      inviteFriendsBySms_args args = new inviteFriendsBySms_args();
      args.setPhoneNumberList(phoneNumberList);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_inviteFriendsBySms() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "inviteFriendsBySms failed: out of sequence response");
      }
      inviteFriendsBySms_result result = new inviteFriendsBySms_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void inviteIntoGroup(int reqSeq, String groupId, Vector contactIds) throws TalkException, TException
    {
      send_inviteIntoGroup(reqSeq, groupId, contactIds);
      recv_inviteIntoGroup();
    }

    public void send_inviteIntoGroup(int reqSeq, String groupId, Vector contactIds) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("inviteIntoGroup", TMessageType.CALL, ++seqid_));
      inviteIntoGroup_args args = new inviteIntoGroup_args();
      args.setReqSeq(reqSeq);
      args.setGroupId(groupId);
      args.setContactIds(contactIds);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_inviteIntoGroup() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "inviteIntoGroup failed: out of sequence response");
      }
      inviteIntoGroup_result result = new inviteIntoGroup_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void inviteIntoRoom(int reqSeq, String roomId, Vector contactIds) throws TalkException, TException
    {
      send_inviteIntoRoom(reqSeq, roomId, contactIds);
      recv_inviteIntoRoom();
    }

    public void send_inviteIntoRoom(int reqSeq, String roomId, Vector contactIds) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("inviteIntoRoom", TMessageType.CALL, ++seqid_));
      inviteIntoRoom_args args = new inviteIntoRoom_args();
      args.setReqSeq(reqSeq);
      args.setRoomId(roomId);
      args.setContactIds(contactIds);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_inviteIntoRoom() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "inviteIntoRoom failed: out of sequence response");
      }
      inviteIntoRoom_result result = new inviteIntoRoom_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void inviteViaEmail(int reqSeq, String email, String name) throws TalkException, TException
    {
      send_inviteViaEmail(reqSeq, email, name);
      recv_inviteViaEmail();
    }

    public void send_inviteViaEmail(int reqSeq, String email, String name) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("inviteViaEmail", TMessageType.CALL, ++seqid_));
      inviteViaEmail_args args = new inviteViaEmail_args();
      args.setReqSeq(reqSeq);
      args.setEmail(email);
      args.setName(name);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_inviteViaEmail() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "inviteViaEmail failed: out of sequence response");
      }
      inviteViaEmail_result result = new inviteViaEmail_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public boolean isIdentityIdentifierAvailable(IdentityProvider provider, String identifier) throws TalkException, TException
    {
      send_isIdentityIdentifierAvailable(provider, identifier);
      return recv_isIdentityIdentifierAvailable();
    }

    public void send_isIdentityIdentifierAvailable(IdentityProvider provider, String identifier) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("isIdentityIdentifierAvailable", TMessageType.CALL, ++seqid_));
      isIdentityIdentifierAvailable_args args = new isIdentityIdentifierAvailable_args();
      args.setProvider(provider);
      args.setIdentifier(identifier);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_isIdentityIdentifierAvailable() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "isIdentityIdentifierAvailable failed: out of sequence response");
      }
      isIdentityIdentifierAvailable_result result = new isIdentityIdentifierAvailable_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "isIdentityIdentifierAvailable failed: unknown result");
    }

    public boolean isUseridAvailable(String userid) throws TalkException, TException
    {
      send_isUseridAvailable(userid);
      return recv_isUseridAvailable();
    }

    public void send_isUseridAvailable(String userid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("isUseridAvailable", TMessageType.CALL, ++seqid_));
      isUseridAvailable_args args = new isUseridAvailable_args();
      args.setUserid(userid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_isUseridAvailable() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "isUseridAvailable failed: out of sequence response");
      }
      isUseridAvailable_result result = new isUseridAvailable_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "isUseridAvailable failed: unknown result");
    }

    public void kickoutFromGroup(int reqSeq, String groupId, Vector contactIds) throws TalkException, TException
    {
      send_kickoutFromGroup(reqSeq, groupId, contactIds);
      recv_kickoutFromGroup();
    }

    public void send_kickoutFromGroup(int reqSeq, String groupId, Vector contactIds) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("kickoutFromGroup", TMessageType.CALL, ++seqid_));
      kickoutFromGroup_args args = new kickoutFromGroup_args();
      args.setReqSeq(reqSeq);
      args.setGroupId(groupId);
      args.setContactIds(contactIds);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_kickoutFromGroup() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "kickoutFromGroup failed: out of sequence response");
      }
      kickoutFromGroup_result result = new kickoutFromGroup_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public String reissueGroupTicket(String groupMid) throws TalkException, TException
    {
      send_reissueGroupTicket(groupMid);
      return recv_reissueGroupTicket();
    }

    public void send_reissueGroupTicket(String groupMid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("reissueGroupTicket", TMessageType.CALL, ++seqid_));
      reissueGroupTicket_args args = new reissueGroupTicket_args();
      args.setGroupMid(groupMid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_reissueGroupTicket() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "reissueGroupTicket failed: out of sequence response");
      }
      reissueGroupTicket_result result = new reissueGroupTicket_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "reissueGroupTicket failed: unknown result");
    }

    public Group findGroupByTicket(String ticketId) throws TalkException, TException
    {
      send_findGroupByTicket(ticketId);
      return recv_findGroupByTicket();
    }

    public void send_findGroupByTicket(String ticketId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("findGroupByTicket", TMessageType.CALL, ++seqid_));
      findGroupByTicket_args args = new findGroupByTicket_args();
      args.setTicketId(ticketId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Group recv_findGroupByTicket() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "findGroupByTicket failed: out of sequence response");
      }
      findGroupByTicket_result result = new findGroupByTicket_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "findGroupByTicket failed: unknown result");
    }

    public void leaveGroup(int reqSeq, String groupId) throws TalkException, TException
    {
      send_leaveGroup(reqSeq, groupId);
      recv_leaveGroup();
    }

    public void send_leaveGroup(int reqSeq, String groupId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("leaveGroup", TMessageType.CALL, ++seqid_));
      leaveGroup_args args = new leaveGroup_args();
      args.setReqSeq(reqSeq);
      args.setGroupId(groupId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_leaveGroup() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "leaveGroup failed: out of sequence response");
      }
      leaveGroup_result result = new leaveGroup_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void leaveRoom(int reqSeq, String roomId) throws TalkException, TException
    {
      send_leaveRoom(reqSeq, roomId);
      recv_leaveRoom();
    }

    public void send_leaveRoom(int reqSeq, String roomId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("leaveRoom", TMessageType.CALL, ++seqid_));
      leaveRoom_args args = new leaveRoom_args();
      args.setReqSeq(reqSeq);
      args.setRoomId(roomId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_leaveRoom() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "leaveRoom failed: out of sequence response");
      }
      leaveRoom_result result = new leaveRoom_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public String loginWithIdentityCredential(IdentityProvider identityProvider, String identifier, String password, boolean keepLoggedIn, String accessLocation, String systemName, String certificate) throws TalkException, TException
    {
      send_loginWithIdentityCredential(identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate);
      return recv_loginWithIdentityCredential();
    }

    public void send_loginWithIdentityCredential(IdentityProvider identityProvider, String identifier, String password, boolean keepLoggedIn, String accessLocation, String systemName, String certificate) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("loginWithIdentityCredential", TMessageType.CALL, ++seqid_));
      loginWithIdentityCredential_args args = new loginWithIdentityCredential_args();
      args.setIdentityProvider(identityProvider);
      args.setIdentifier(identifier);
      args.setPassword(password);
      args.setKeepLoggedIn(keepLoggedIn);
      args.setAccessLocation(accessLocation);
      args.setSystemName(systemName);
      args.setCertificate(certificate);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_loginWithIdentityCredential() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "loginWithIdentityCredential failed: out of sequence response");
      }
      loginWithIdentityCredential_result result = new loginWithIdentityCredential_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "loginWithIdentityCredential failed: unknown result");
    }

    public LoginResult loginWithIdentityCredentialForCertificate(IdentityProvider identityProvider, String identifier, String password, boolean keepLoggedIn, String accessLocation, String systemName, String certificate) throws TalkException, TException
    {
      send_loginWithIdentityCredentialForCertificate(identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate);
      return recv_loginWithIdentityCredentialForCertificate();
    }

    public void send_loginWithIdentityCredentialForCertificate(IdentityProvider identityProvider, String identifier, String password, boolean keepLoggedIn, String accessLocation, String systemName, String certificate) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("loginWithIdentityCredentialForCertificate", TMessageType.CALL, ++seqid_));
      loginWithIdentityCredentialForCertificate_args args = new loginWithIdentityCredentialForCertificate_args();
      args.setIdentityProvider(identityProvider);
      args.setIdentifier(identifier);
      args.setPassword(password);
      args.setKeepLoggedIn(keepLoggedIn);
      args.setAccessLocation(accessLocation);
      args.setSystemName(systemName);
      args.setCertificate(certificate);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public LoginResult recv_loginWithIdentityCredentialForCertificate() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "loginWithIdentityCredentialForCertificate failed: out of sequence response");
      }
      loginWithIdentityCredentialForCertificate_result result = new loginWithIdentityCredentialForCertificate_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "loginWithIdentityCredentialForCertificate failed: unknown result");
    }

    public String loginWithVerifier(String verifier) throws TalkException, TException
    {
      send_loginWithVerifier(verifier);
      return recv_loginWithVerifier();
    }

    public void send_loginWithVerifier(String verifier) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("loginWithVerifier", TMessageType.CALL, ++seqid_));
      loginWithVerifier_args args = new loginWithVerifier_args();
      args.setVerifier(verifier);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_loginWithVerifier() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "loginWithVerifier failed: out of sequence response");
      }
      loginWithVerifier_result result = new loginWithVerifier_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "loginWithVerifier failed: unknown result");
    }

    public LoginResult loginWithVerifierForCerificate(String verifier) throws TalkException, TException
    {
      send_loginWithVerifierForCerificate(verifier);
      return recv_loginWithVerifierForCerificate();
    }

    public void send_loginWithVerifierForCerificate(String verifier) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("loginWithVerifierForCerificate", TMessageType.CALL, ++seqid_));
      loginWithVerifierForCerificate_args args = new loginWithVerifierForCerificate_args();
      args.setVerifier(verifier);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public LoginResult recv_loginWithVerifierForCerificate() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "loginWithVerifierForCerificate failed: out of sequence response");
      }
      loginWithVerifierForCerificate_result result = new loginWithVerifierForCerificate_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "loginWithVerifierForCerificate failed: unknown result");
    }

    public LoginResult loginWithVerifierForCertificate(String verifier) throws TalkException, TException
    {
      send_loginWithVerifierForCertificate(verifier);
      return recv_loginWithVerifierForCertificate();
    }

    public void send_loginWithVerifierForCertificate(String verifier) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("loginWithVerifierForCertificate", TMessageType.CALL, ++seqid_));
      loginWithVerifierForCertificate_args args = new loginWithVerifierForCertificate_args();
      args.setVerifier(verifier);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public LoginResult recv_loginWithVerifierForCertificate() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "loginWithVerifierForCertificate failed: out of sequence response");
      }
      loginWithVerifierForCertificate_result result = new loginWithVerifierForCertificate_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "loginWithVerifierForCertificate failed: unknown result");
    }

    public void logout() throws TalkException, TException
    {
      send_logout();
      recv_logout();
    }

    public void send_logout() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("logout", TMessageType.CALL, ++seqid_));
      logout_args args = new logout_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_logout() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "logout failed: out of sequence response");
      }
      logout_result result = new logout_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void logoutSession(String tokenKey) throws TalkException, TException
    {
      send_logoutSession(tokenKey);
      recv_logoutSession();
    }

    public void send_logoutSession(String tokenKey) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("logoutSession", TMessageType.CALL, ++seqid_));
      logoutSession_args args = new logoutSession_args();
      args.setTokenKey(tokenKey);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_logoutSession() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "logoutSession failed: out of sequence response");
      }
      logoutSession_result result = new logoutSession_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void noop() throws TalkException, TException
    {
      send_noop();
      recv_noop();
    }

    public void send_noop() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("noop", TMessageType.CALL, ++seqid_));
      noop_args args = new noop_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_noop() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "noop failed: out of sequence response");
      }
      noop_result result = new noop_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void notifiedRedirect(Hashtable paramMap) throws TalkException, TException
    {
      send_notifiedRedirect(paramMap);
      recv_notifiedRedirect();
    }

    public void send_notifiedRedirect(Hashtable paramMap) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("notifiedRedirect", TMessageType.CALL, ++seqid_));
      notifiedRedirect_args args = new notifiedRedirect_args();
      args.setParamMap(paramMap);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_notifiedRedirect() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "notifiedRedirect failed: out of sequence response");
      }
      notifiedRedirect_result result = new notifiedRedirect_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public Hashtable notifyBuddyOnAir(int seq, Vector receiverMids) throws TalkException, TException
    {
      send_notifyBuddyOnAir(seq, receiverMids);
      return recv_notifyBuddyOnAir();
    }

    public void send_notifyBuddyOnAir(int seq, Vector receiverMids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("notifyBuddyOnAir", TMessageType.CALL, ++seqid_));
      notifyBuddyOnAir_args args = new notifyBuddyOnAir_args();
      args.setSeq(seq);
      args.setReceiverMids(receiverMids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Hashtable recv_notifyBuddyOnAir() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "notifyBuddyOnAir failed: out of sequence response");
      }
      notifyBuddyOnAir_result result = new notifyBuddyOnAir_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "notifyBuddyOnAir failed: unknown result");
    }

    public void notifyIndividualEvent(NotificationStatus notificationStatus, Vector receiverMids) throws TalkException, TException
    {
      send_notifyIndividualEvent(notificationStatus, receiverMids);
      recv_notifyIndividualEvent();
    }

    public void send_notifyIndividualEvent(NotificationStatus notificationStatus, Vector receiverMids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("notifyIndividualEvent", TMessageType.CALL, ++seqid_));
      notifyIndividualEvent_args args = new notifyIndividualEvent_args();
      args.setNotificationStatus(notificationStatus);
      args.setReceiverMids(receiverMids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_notifyIndividualEvent() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "notifyIndividualEvent failed: out of sequence response");
      }
      notifyIndividualEvent_result result = new notifyIndividualEvent_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void notifyInstalled(String udidHash, String applicationTypeWithExtensions) throws TalkException, TException
    {
      send_notifyInstalled(udidHash, applicationTypeWithExtensions);
      recv_notifyInstalled();
    }

    public void send_notifyInstalled(String udidHash, String applicationTypeWithExtensions) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("notifyInstalled", TMessageType.CALL, ++seqid_));
      notifyInstalled_args args = new notifyInstalled_args();
      args.setUdidHash(udidHash);
      args.setApplicationTypeWithExtensions(applicationTypeWithExtensions);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_notifyInstalled() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "notifyInstalled failed: out of sequence response");
      }
      notifyInstalled_result result = new notifyInstalled_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void notifyRegistrationComplete(String udidHash, String applicationTypeWithExtensions) throws TalkException, TException
    {
      send_notifyRegistrationComplete(udidHash, applicationTypeWithExtensions);
      recv_notifyRegistrationComplete();
    }

    public void send_notifyRegistrationComplete(String udidHash, String applicationTypeWithExtensions) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("notifyRegistrationComplete", TMessageType.CALL, ++seqid_));
      notifyRegistrationComplete_args args = new notifyRegistrationComplete_args();
      args.setUdidHash(udidHash);
      args.setApplicationTypeWithExtensions(applicationTypeWithExtensions);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_notifyRegistrationComplete() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "notifyRegistrationComplete failed: out of sequence response");
      }
      notifyRegistrationComplete_result result = new notifyRegistrationComplete_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void notifySleep(long lastRev, int badge) throws TalkException, TException
    {
      send_notifySleep(lastRev, badge);
      recv_notifySleep();
    }

    public void send_notifySleep(long lastRev, int badge) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("notifySleep", TMessageType.CALL, ++seqid_));
      notifySleep_args args = new notifySleep_args();
      args.setLastRev(lastRev);
      args.setBadge(badge);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_notifySleep() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "notifySleep failed: out of sequence response");
      }
      notifySleep_result result = new notifySleep_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void notifyUpdated(long lastRev, DeviceInfo deviceInfo) throws TalkException, TException
    {
      send_notifyUpdated(lastRev, deviceInfo);
      recv_notifyUpdated();
    }

    public void send_notifyUpdated(long lastRev, DeviceInfo deviceInfo) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("notifyUpdated", TMessageType.CALL, ++seqid_));
      notifyUpdated_args args = new notifyUpdated_args();
      args.setLastRev(lastRev);
      args.setDeviceInfo(deviceInfo);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_notifyUpdated() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "notifyUpdated failed: out of sequence response");
      }
      notifyUpdated_result result = new notifyUpdated_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public String openProximityMatch(Location location) throws TalkException, TException
    {
      send_openProximityMatch(location);
      return recv_openProximityMatch();
    }

    public void send_openProximityMatch(Location location) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("openProximityMatch", TMessageType.CALL, ++seqid_));
      openProximityMatch_args args = new openProximityMatch_args();
      args.setLocation(location);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_openProximityMatch() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "openProximityMatch failed: out of sequence response");
      }
      openProximityMatch_result result = new openProximityMatch_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "openProximityMatch failed: unknown result");
    }

    public String registerBuddyUser(String buddyId, String registrarPassword) throws TalkException, TException
    {
      send_registerBuddyUser(buddyId, registrarPassword);
      return recv_registerBuddyUser();
    }

    public void send_registerBuddyUser(String buddyId, String registrarPassword) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("registerBuddyUser", TMessageType.CALL, ++seqid_));
      registerBuddyUser_args args = new registerBuddyUser_args();
      args.setBuddyId(buddyId);
      args.setRegistrarPassword(registrarPassword);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_registerBuddyUser() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "registerBuddyUser failed: out of sequence response");
      }
      registerBuddyUser_result result = new registerBuddyUser_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "registerBuddyUser failed: unknown result");
    }

    public void registerBuddyUserid(int seq, String userid) throws TalkException, TException
    {
      send_registerBuddyUserid(seq, userid);
      recv_registerBuddyUserid();
    }

    public void send_registerBuddyUserid(int seq, String userid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("registerBuddyUserid", TMessageType.CALL, ++seqid_));
      registerBuddyUserid_args args = new registerBuddyUserid_args();
      args.setSeq(seq);
      args.setUserid(userid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_registerBuddyUserid() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "registerBuddyUserid failed: out of sequence response");
      }
      registerBuddyUserid_result result = new registerBuddyUserid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public String registerDevice(String sessionId) throws TalkException, TException
    {
      send_registerDevice(sessionId);
      return recv_registerDevice();
    }

    public void send_registerDevice(String sessionId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("registerDevice", TMessageType.CALL, ++seqid_));
      registerDevice_args args = new registerDevice_args();
      args.setSessionId(sessionId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_registerDevice() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "registerDevice failed: out of sequence response");
      }
      registerDevice_result result = new registerDevice_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "registerDevice failed: unknown result");
    }

    public String registerDeviceWithIdentityCredential(String sessionId, IdentityProvider provider, String identifier, String verifier) throws TalkException, TException
    {
      send_registerDeviceWithIdentityCredential(sessionId, provider, identifier, verifier);
      return recv_registerDeviceWithIdentityCredential();
    }

    public void send_registerDeviceWithIdentityCredential(String sessionId, IdentityProvider provider, String identifier, String verifier) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("registerDeviceWithIdentityCredential", TMessageType.CALL, ++seqid_));
      registerDeviceWithIdentityCredential_args args = new registerDeviceWithIdentityCredential_args();
      args.setSessionId(sessionId);
      args.setProvider(provider);
      args.setIdentifier(identifier);
      args.setVerifier(verifier);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_registerDeviceWithIdentityCredential() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "registerDeviceWithIdentityCredential failed: out of sequence response");
      }
      registerDeviceWithIdentityCredential_result result = new registerDeviceWithIdentityCredential_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "registerDeviceWithIdentityCredential failed: unknown result");
    }

    public String registerDeviceWithoutPhoneNumber(String region, String udidHash, DeviceInfo deviceInfo) throws TalkException, TException
    {
      send_registerDeviceWithoutPhoneNumber(region, udidHash, deviceInfo);
      return recv_registerDeviceWithoutPhoneNumber();
    }

    public void send_registerDeviceWithoutPhoneNumber(String region, String udidHash, DeviceInfo deviceInfo) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("registerDeviceWithoutPhoneNumber", TMessageType.CALL, ++seqid_));
      registerDeviceWithoutPhoneNumber_args args = new registerDeviceWithoutPhoneNumber_args();
      args.setRegion(region);
      args.setUdidHash(udidHash);
      args.setDeviceInfo(deviceInfo);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_registerDeviceWithoutPhoneNumber() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "registerDeviceWithoutPhoneNumber failed: out of sequence response");
      }
      registerDeviceWithoutPhoneNumber_result result = new registerDeviceWithoutPhoneNumber_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "registerDeviceWithoutPhoneNumber failed: unknown result");
    }

    public String registerDeviceWithoutPhoneNumberWithIdentityCredential(String region, String udidHash, DeviceInfo deviceInfo, IdentityProvider provider, String identifier, String verifier, String mid, String migrationPincodeSessionId) throws TalkException, TException
    {
      send_registerDeviceWithoutPhoneNumberWithIdentityCredential(region, udidHash, deviceInfo, provider, identifier, verifier, mid, migrationPincodeSessionId);
      return recv_registerDeviceWithoutPhoneNumberWithIdentityCredential();
    }

    public void send_registerDeviceWithoutPhoneNumberWithIdentityCredential(String region, String udidHash, DeviceInfo deviceInfo, IdentityProvider provider, String identifier, String verifier, String mid, String migrationPincodeSessionId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("registerDeviceWithoutPhoneNumberWithIdentityCredential", TMessageType.CALL, ++seqid_));
      registerDeviceWithoutPhoneNumberWithIdentityCredential_args args = new registerDeviceWithoutPhoneNumberWithIdentityCredential_args();
      args.setRegion(region);
      args.setUdidHash(udidHash);
      args.setDeviceInfo(deviceInfo);
      args.setProvider(provider);
      args.setIdentifier(identifier);
      args.setVerifier(verifier);
      args.setMid(mid);
      args.setMigrationPincodeSessionId(migrationPincodeSessionId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_registerDeviceWithoutPhoneNumberWithIdentityCredential() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "registerDeviceWithoutPhoneNumberWithIdentityCredential failed: out of sequence response");
      }
      registerDeviceWithoutPhoneNumberWithIdentityCredential_result result = new registerDeviceWithoutPhoneNumberWithIdentityCredential_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "registerDeviceWithoutPhoneNumberWithIdentityCredential failed: unknown result");
    }

    public boolean registerUserid(int reqSeq, String userid) throws TalkException, TException
    {
      send_registerUserid(reqSeq, userid);
      return recv_registerUserid();
    }

    public void send_registerUserid(int reqSeq, String userid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("registerUserid", TMessageType.CALL, ++seqid_));
      registerUserid_args args = new registerUserid_args();
      args.setReqSeq(reqSeq);
      args.setUserid(userid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_registerUserid() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "registerUserid failed: out of sequence response");
      }
      registerUserid_result result = new registerUserid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "registerUserid failed: unknown result");
    }

    public String registerWapDevice(String invitationHash, String guidHash, String email, DeviceInfo deviceInfo) throws TalkException, TException
    {
      send_registerWapDevice(invitationHash, guidHash, email, deviceInfo);
      return recv_registerWapDevice();
    }

    public void send_registerWapDevice(String invitationHash, String guidHash, String email, DeviceInfo deviceInfo) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("registerWapDevice", TMessageType.CALL, ++seqid_));
      registerWapDevice_args args = new registerWapDevice_args();
      args.setInvitationHash(invitationHash);
      args.setGuidHash(guidHash);
      args.setEmail(email);
      args.setDeviceInfo(deviceInfo);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_registerWapDevice() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "registerWapDevice failed: out of sequence response");
      }
      registerWapDevice_result result = new registerWapDevice_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "registerWapDevice failed: unknown result");
    }

    public String registerWithExistingSnsIdAndIdentityCredential(IdentityCredential identityCredential, String region, String udidHash, DeviceInfo deviceInfo) throws TalkException, TException
    {
      send_registerWithExistingSnsIdAndIdentityCredential(identityCredential, region, udidHash, deviceInfo);
      return recv_registerWithExistingSnsIdAndIdentityCredential();
    }

    public void send_registerWithExistingSnsIdAndIdentityCredential(IdentityCredential identityCredential, String region, String udidHash, DeviceInfo deviceInfo) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("registerWithExistingSnsIdAndIdentityCredential", TMessageType.CALL, ++seqid_));
      registerWithExistingSnsIdAndIdentityCredential_args args = new registerWithExistingSnsIdAndIdentityCredential_args();
      args.setIdentityCredential(identityCredential);
      args.setRegion(region);
      args.setUdidHash(udidHash);
      args.setDeviceInfo(deviceInfo);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_registerWithExistingSnsIdAndIdentityCredential() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "registerWithExistingSnsIdAndIdentityCredential failed: out of sequence response");
      }
      registerWithExistingSnsIdAndIdentityCredential_result result = new registerWithExistingSnsIdAndIdentityCredential_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "registerWithExistingSnsIdAndIdentityCredential failed: unknown result");
    }

    public RegisterWithSnsIdResult registerWithSnsId(SnsIdType snsIdType, String snsAccessToken, String region, String udidHash, DeviceInfo deviceInfo, String mid) throws TalkException, TException
    {
      send_registerWithSnsId(snsIdType, snsAccessToken, region, udidHash, deviceInfo, mid);
      return recv_registerWithSnsId();
    }

    public void send_registerWithSnsId(SnsIdType snsIdType, String snsAccessToken, String region, String udidHash, DeviceInfo deviceInfo, String mid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("registerWithSnsId", TMessageType.CALL, ++seqid_));
      registerWithSnsId_args args = new registerWithSnsId_args();
      args.setSnsIdType(snsIdType);
      args.setSnsAccessToken(snsAccessToken);
      args.setRegion(region);
      args.setUdidHash(udidHash);
      args.setDeviceInfo(deviceInfo);
      args.setMid(mid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public RegisterWithSnsIdResult recv_registerWithSnsId() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "registerWithSnsId failed: out of sequence response");
      }
      registerWithSnsId_result result = new registerWithSnsId_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "registerWithSnsId failed: unknown result");
    }

    public String registerWithSnsIdAndIdentityCredential(SnsIdType snsIdType, String snsAccessToken, IdentityCredential identityCredential, String region, String udidHash, DeviceInfo deviceInfo) throws TalkException, TException
    {
      send_registerWithSnsIdAndIdentityCredential(snsIdType, snsAccessToken, identityCredential, region, udidHash, deviceInfo);
      return recv_registerWithSnsIdAndIdentityCredential();
    }

    public void send_registerWithSnsIdAndIdentityCredential(SnsIdType snsIdType, String snsAccessToken, IdentityCredential identityCredential, String region, String udidHash, DeviceInfo deviceInfo) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("registerWithSnsIdAndIdentityCredential", TMessageType.CALL, ++seqid_));
      registerWithSnsIdAndIdentityCredential_args args = new registerWithSnsIdAndIdentityCredential_args();
      args.setSnsIdType(snsIdType);
      args.setSnsAccessToken(snsAccessToken);
      args.setIdentityCredential(identityCredential);
      args.setRegion(region);
      args.setUdidHash(udidHash);
      args.setDeviceInfo(deviceInfo);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_registerWithSnsIdAndIdentityCredential() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "registerWithSnsIdAndIdentityCredential failed: out of sequence response");
      }
      registerWithSnsIdAndIdentityCredential_result result = new registerWithSnsIdAndIdentityCredential_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "registerWithSnsIdAndIdentityCredential failed: unknown result");
    }

    public String reissueDeviceCredential() throws TalkException, TException
    {
      send_reissueDeviceCredential();
      return recv_reissueDeviceCredential();
    }

    public void send_reissueDeviceCredential() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("reissueDeviceCredential", TMessageType.CALL, ++seqid_));
      reissueDeviceCredential_args args = new reissueDeviceCredential_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_reissueDeviceCredential() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "reissueDeviceCredential failed: out of sequence response");
      }
      reissueDeviceCredential_result result = new reissueDeviceCredential_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "reissueDeviceCredential failed: unknown result");
    }

    public String reissueUserTicket(long expirationTime, int maxUseCount) throws TalkException, TException
    {
      send_reissueUserTicket(expirationTime, maxUseCount);
      return recv_reissueUserTicket();
    }

    public void send_reissueUserTicket(long expirationTime, int maxUseCount) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("reissueUserTicket", TMessageType.CALL, ++seqid_));
      reissueUserTicket_args args = new reissueUserTicket_args();
      args.setExpirationTime(expirationTime);
      args.setMaxUseCount(maxUseCount);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_reissueUserTicket() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "reissueUserTicket failed: out of sequence response");
      }
      reissueUserTicket_result result = new reissueUserTicket_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "reissueUserTicket failed: unknown result");
    }

    public Vector getMessageReadRange(Vector chatIds) throws TalkException, TException
    {
      send_getMessageReadRange(chatIds);
      return recv_getMessageReadRange();
    }

    public void send_getMessageReadRange(Vector chatIds) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getMessageReadRange", TMessageType.CALL, ++seqid_));
      getMessageReadRange_args args = new getMessageReadRange_args();
      args.setChatIds(chatIds);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getMessageReadRange() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getMessageReadRange failed: out of sequence response");
      }
      getMessageReadRange_result result = new getMessageReadRange_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getMessageReadRange failed: unknown result");
    }

    public void rejectGroupInvitation(int reqSeq, String groupId) throws TalkException, TException
    {
      send_rejectGroupInvitation(reqSeq, groupId);
      recv_rejectGroupInvitation();
    }

    public void send_rejectGroupInvitation(int reqSeq, String groupId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("rejectGroupInvitation", TMessageType.CALL, ++seqid_));
      rejectGroupInvitation_args args = new rejectGroupInvitation_args();
      args.setReqSeq(reqSeq);
      args.setGroupId(groupId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_rejectGroupInvitation() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "rejectGroupInvitation failed: out of sequence response");
      }
      rejectGroupInvitation_result result = new rejectGroupInvitation_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void releaseSession() throws TalkException, TException
    {
      send_releaseSession();
      recv_releaseSession();
    }

    public void send_releaseSession() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("releaseSession", TMessageType.CALL, ++seqid_));
      releaseSession_args args = new releaseSession_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_releaseSession() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "releaseSession failed: out of sequence response");
      }
      releaseSession_result result = new releaseSession_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void removeAllMessages(int seq, String lastMessageId) throws TalkException, TException
    {
      send_removeAllMessages(seq, lastMessageId);
      recv_removeAllMessages();
    }

    public void send_removeAllMessages(int seq, String lastMessageId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("removeAllMessages", TMessageType.CALL, ++seqid_));
      removeAllMessages_args args = new removeAllMessages_args();
      args.setSeq(seq);
      args.setLastMessageId(lastMessageId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_removeAllMessages() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "removeAllMessages failed: out of sequence response");
      }
      removeAllMessages_result result = new removeAllMessages_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void removeBuddyLocation(String mid, int index) throws TalkException, TException
    {
      send_removeBuddyLocation(mid, index);
      recv_removeBuddyLocation();
    }

    public void send_removeBuddyLocation(String mid, int index) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("removeBuddyLocation", TMessageType.CALL, ++seqid_));
      removeBuddyLocation_args args = new removeBuddyLocation_args();
      args.setMid(mid);
      args.setIndex(index);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_removeBuddyLocation() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "removeBuddyLocation failed: out of sequence response");
      }
      removeBuddyLocation_result result = new removeBuddyLocation_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public boolean removeMessage(String messageId) throws TalkException, TException
    {
      send_removeMessage(messageId);
      return recv_removeMessage();
    }

    public void send_removeMessage(String messageId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("removeMessage", TMessageType.CALL, ++seqid_));
      removeMessage_args args = new removeMessage_args();
      args.setMessageId(messageId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_removeMessage() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "removeMessage failed: out of sequence response");
      }
      removeMessage_result result = new removeMessage_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "removeMessage failed: unknown result");
    }

    public ContactTransition makeUserAddMyselfAsContact(String contactOwnerMid) throws TalkException, TException
    {
      send_makeUserAddMyselfAsContact(contactOwnerMid);
      return recv_makeUserAddMyselfAsContact();
    }

    public void send_makeUserAddMyselfAsContact(String contactOwnerMid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("makeUserAddMyselfAsContact", TMessageType.CALL, ++seqid_));
      makeUserAddMyselfAsContact_args args = new makeUserAddMyselfAsContact_args();
      args.setContactOwnerMid(contactOwnerMid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ContactTransition recv_makeUserAddMyselfAsContact() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "makeUserAddMyselfAsContact failed: out of sequence response");
      }
      makeUserAddMyselfAsContact_result result = new makeUserAddMyselfAsContact_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "makeUserAddMyselfAsContact failed: unknown result");
    }

    public boolean removeMessageFromMyHome(String messageId) throws TalkException, TException
    {
      send_removeMessageFromMyHome(messageId);
      return recv_removeMessageFromMyHome();
    }

    public void send_removeMessageFromMyHome(String messageId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("removeMessageFromMyHome", TMessageType.CALL, ++seqid_));
      removeMessageFromMyHome_args args = new removeMessageFromMyHome_args();
      args.setMessageId(messageId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_removeMessageFromMyHome() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "removeMessageFromMyHome failed: out of sequence response");
      }
      removeMessageFromMyHome_result result = new removeMessageFromMyHome_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "removeMessageFromMyHome failed: unknown result");
    }

    public String removeSnsId(SnsIdType snsIdType) throws TalkException, TException
    {
      send_removeSnsId(snsIdType);
      return recv_removeSnsId();
    }

    public void send_removeSnsId(SnsIdType snsIdType) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("removeSnsId", TMessageType.CALL, ++seqid_));
      removeSnsId_args args = new removeSnsId_args();
      args.setSnsIdType(snsIdType);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_removeSnsId() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "removeSnsId failed: out of sequence response");
      }
      removeSnsId_result result = new removeSnsId_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "removeSnsId failed: unknown result");
    }

    public void report(long syncOpRevision, SyncCategory category, String report) throws TalkException, TException
    {
      send_report(syncOpRevision, category, report);
      recv_report();
    }

    public void send_report(long syncOpRevision, SyncCategory category, String report) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("report", TMessageType.CALL, ++seqid_));
      report_args args = new report_args();
      args.setSyncOpRevision(syncOpRevision);
      args.setCategory(category);
      args.setReport(report);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_report() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "report failed: out of sequence response");
      }
      report_result result = new report_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public Vector reportContacts(long syncOpRevision, SyncCategory category, Vector contactReports, SyncActionType actionType) throws TalkException, TException
    {
      send_reportContacts(syncOpRevision, category, contactReports, actionType);
      return recv_reportContacts();
    }

    public void send_reportContacts(long syncOpRevision, SyncCategory category, Vector contactReports, SyncActionType actionType) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("reportContacts", TMessageType.CALL, ++seqid_));
      reportContacts_args args = new reportContacts_args();
      args.setSyncOpRevision(syncOpRevision);
      args.setCategory(category);
      args.setContactReports(contactReports);
      args.setActionType(actionType);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_reportContacts() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "reportContacts failed: out of sequence response");
      }
      reportContacts_result result = new reportContacts_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "reportContacts failed: unknown result");
    }

    public void reportGroups(long syncOpRevision, Vector groups) throws TalkException, TException
    {
      send_reportGroups(syncOpRevision, groups);
      recv_reportGroups();
    }

    public void send_reportGroups(long syncOpRevision, Vector groups) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("reportGroups", TMessageType.CALL, ++seqid_));
      reportGroups_args args = new reportGroups_args();
      args.setSyncOpRevision(syncOpRevision);
      args.setGroups(groups);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_reportGroups() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "reportGroups failed: out of sequence response");
      }
      reportGroups_result result = new reportGroups_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void reportProfile(long syncOpRevision, Profile profile) throws TalkException, TException
    {
      send_reportProfile(syncOpRevision, profile);
      recv_reportProfile();
    }

    public void send_reportProfile(long syncOpRevision, Profile profile) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("reportProfile", TMessageType.CALL, ++seqid_));
      reportProfile_args args = new reportProfile_args();
      args.setSyncOpRevision(syncOpRevision);
      args.setProfile(profile);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_reportProfile() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "reportProfile failed: out of sequence response");
      }
      reportProfile_result result = new reportProfile_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void reportRooms(long syncOpRevision, Vector rooms) throws TalkException, TException
    {
      send_reportRooms(syncOpRevision, rooms);
      recv_reportRooms();
    }

    public void send_reportRooms(long syncOpRevision, Vector rooms) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("reportRooms", TMessageType.CALL, ++seqid_));
      reportRooms_args args = new reportRooms_args();
      args.setSyncOpRevision(syncOpRevision);
      args.setRooms(rooms);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_reportRooms() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "reportRooms failed: out of sequence response");
      }
      reportRooms_result result = new reportRooms_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public Contact findAndAddContactByMetaTag(int reqSeq, String userid, String reference) throws TalkException, TException
    {
      send_findAndAddContactByMetaTag(reqSeq, userid, reference);
      return recv_findAndAddContactByMetaTag();
    }

    public void send_findAndAddContactByMetaTag(int reqSeq, String userid, String reference) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("findAndAddContactByMetaTag", TMessageType.CALL, ++seqid_));
      findAndAddContactByMetaTag_args args = new findAndAddContactByMetaTag_args();
      args.setReqSeq(reqSeq);
      args.setUserid(userid);
      args.setReference(reference);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Contact recv_findAndAddContactByMetaTag() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "findAndAddContactByMetaTag failed: out of sequence response");
      }
      findAndAddContactByMetaTag_result result = new findAndAddContactByMetaTag_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "findAndAddContactByMetaTag failed: unknown result");
    }

    public void reportSettings(long syncOpRevision, Settings settings) throws TalkException, TException
    {
      send_reportSettings(syncOpRevision, settings);
      recv_reportSettings();
    }

    public void send_reportSettings(long syncOpRevision, Settings settings) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("reportSettings", TMessageType.CALL, ++seqid_));
      reportSettings_args args = new reportSettings_args();
      args.setSyncOpRevision(syncOpRevision);
      args.setSettings(settings);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_reportSettings() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "reportSettings failed: out of sequence response");
      }
      reportSettings_result result = new reportSettings_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void reportSpam(String chatMid, Vector memberMids, Vector spammerReasons, Vector senderMids, Vector spamMessageIds, Vector spamMessages) throws TalkException, TException
    {
      send_reportSpam(chatMid, memberMids, spammerReasons, senderMids, spamMessageIds, spamMessages);
      recv_reportSpam();
    }

    public void send_reportSpam(String chatMid, Vector memberMids, Vector spammerReasons, Vector senderMids, Vector spamMessageIds, Vector spamMessages) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("reportSpam", TMessageType.CALL, ++seqid_));
      reportSpam_args args = new reportSpam_args();
      args.setChatMid(chatMid);
      args.setMemberMids(memberMids);
      args.setSpammerReasons(spammerReasons);
      args.setSenderMids(senderMids);
      args.setSpamMessageIds(spamMessageIds);
      args.setSpamMessages(spamMessages);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_reportSpam() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "reportSpam failed: out of sequence response");
      }
      reportSpam_result result = new reportSpam_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void reportSpammer(String spammerMid, Vector spammerReasons, Vector spamMessageIds) throws TalkException, TException
    {
      send_reportSpammer(spammerMid, spammerReasons, spamMessageIds);
      recv_reportSpammer();
    }

    public void send_reportSpammer(String spammerMid, Vector spammerReasons, Vector spamMessageIds) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("reportSpammer", TMessageType.CALL, ++seqid_));
      reportSpammer_args args = new reportSpammer_args();
      args.setSpammerMid(spammerMid);
      args.setSpammerReasons(spammerReasons);
      args.setSpamMessageIds(spamMessageIds);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_reportSpammer() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "reportSpammer failed: out of sequence response");
      }
      reportSpammer_result result = new reportSpammer_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void requestAccountPasswordReset(IdentityProvider provider, String identifier, String locale) throws TalkException, TException
    {
      send_requestAccountPasswordReset(provider, identifier, locale);
      recv_requestAccountPasswordReset();
    }

    public void send_requestAccountPasswordReset(IdentityProvider provider, String identifier, String locale) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("requestAccountPasswordReset", TMessageType.CALL, ++seqid_));
      requestAccountPasswordReset_args args = new requestAccountPasswordReset_args();
      args.setProvider(provider);
      args.setIdentifier(identifier);
      args.setLocale(locale);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_requestAccountPasswordReset() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "requestAccountPasswordReset failed: out of sequence response");
      }
      requestAccountPasswordReset_result result = new requestAccountPasswordReset_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public EmailConfirmationSession requestEmailConfirmation(EmailConfirmation emailConfirmation) throws TalkException, TException
    {
      send_requestEmailConfirmation(emailConfirmation);
      return recv_requestEmailConfirmation();
    }

    public void send_requestEmailConfirmation(EmailConfirmation emailConfirmation) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("requestEmailConfirmation", TMessageType.CALL, ++seqid_));
      requestEmailConfirmation_args args = new requestEmailConfirmation_args();
      args.setEmailConfirmation(emailConfirmation);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public EmailConfirmationSession recv_requestEmailConfirmation() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "requestEmailConfirmation failed: out of sequence response");
      }
      requestEmailConfirmation_result result = new requestEmailConfirmation_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "requestEmailConfirmation failed: unknown result");
    }

    public void requestIdentityUnbind(IdentityProvider provider, String identifier) throws TalkException, TException
    {
      send_requestIdentityUnbind(provider, identifier);
      recv_requestIdentityUnbind();
    }

    public void send_requestIdentityUnbind(IdentityProvider provider, String identifier) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("requestIdentityUnbind", TMessageType.CALL, ++seqid_));
      requestIdentityUnbind_args args = new requestIdentityUnbind_args();
      args.setProvider(provider);
      args.setIdentifier(identifier);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_requestIdentityUnbind() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "requestIdentityUnbind failed: out of sequence response");
      }
      requestIdentityUnbind_result result = new requestIdentityUnbind_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public EmailConfirmationSession resendEmailConfirmation(String verifier) throws TalkException, TException
    {
      send_resendEmailConfirmation(verifier);
      return recv_resendEmailConfirmation();
    }

    public void send_resendEmailConfirmation(String verifier) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("resendEmailConfirmation", TMessageType.CALL, ++seqid_));
      resendEmailConfirmation_args args = new resendEmailConfirmation_args();
      args.setVerifier(verifier);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public EmailConfirmationSession recv_resendEmailConfirmation() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "resendEmailConfirmation failed: out of sequence response");
      }
      resendEmailConfirmation_result result = new resendEmailConfirmation_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "resendEmailConfirmation failed: unknown result");
    }

    public void resendPinCode(String sessionId) throws TalkException, TException
    {
      send_resendPinCode(sessionId);
      recv_resendPinCode();
    }

    public void send_resendPinCode(String sessionId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("resendPinCode", TMessageType.CALL, ++seqid_));
      resendPinCode_args args = new resendPinCode_args();
      args.setSessionId(sessionId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_resendPinCode() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "resendPinCode failed: out of sequence response");
      }
      resendPinCode_result result = new resendPinCode_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void resendPinCodeBySMS(String sessionId) throws TalkException, TException
    {
      send_resendPinCodeBySMS(sessionId);
      recv_resendPinCodeBySMS();
    }

    public void send_resendPinCodeBySMS(String sessionId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("resendPinCodeBySMS", TMessageType.CALL, ++seqid_));
      resendPinCodeBySMS_args args = new resendPinCodeBySMS_args();
      args.setSessionId(sessionId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_resendPinCodeBySMS() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "resendPinCodeBySMS failed: out of sequence response");
      }
      resendPinCodeBySMS_result result = new resendPinCodeBySMS_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void sendChatChecked(int seq, String consumer, String lastMessageId) throws TalkException, TException
    {
      send_sendChatChecked(seq, consumer, lastMessageId);
      recv_sendChatChecked();
    }

    public void send_sendChatChecked(int seq, String consumer, String lastMessageId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("sendChatChecked", TMessageType.CALL, ++seqid_));
      sendChatChecked_args args = new sendChatChecked_args();
      args.setSeq(seq);
      args.setConsumer(consumer);
      args.setLastMessageId(lastMessageId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_sendChatChecked() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "sendChatChecked failed: out of sequence response");
      }
      sendChatChecked_result result = new sendChatChecked_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public CommitMessageResult sendMessageAwaitCommit(int seq, Message message) throws TalkException, TException
    {
      send_sendMessageAwaitCommit(seq, message);
      return recv_sendMessageAwaitCommit();
    }

    public void send_sendMessageAwaitCommit(int seq, Message message) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("sendMessageAwaitCommit", TMessageType.CALL, ++seqid_));
      sendMessageAwaitCommit_args args = new sendMessageAwaitCommit_args();
      args.setSeq(seq);
      args.setMessage(message);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public CommitMessageResult recv_sendMessageAwaitCommit() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "sendMessageAwaitCommit failed: out of sequence response");
      }
      sendMessageAwaitCommit_result result = new sendMessageAwaitCommit_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "sendMessageAwaitCommit failed: unknown result");
    }

    public void sendChatRemoved(int seq, String consumer, String lastMessageId) throws TalkException, TException
    {
      send_sendChatRemoved(seq, consumer, lastMessageId);
      recv_sendChatRemoved();
    }

    public void send_sendChatRemoved(int seq, String consumer, String lastMessageId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("sendChatRemoved", TMessageType.CALL, ++seqid_));
      sendChatRemoved_args args = new sendChatRemoved_args();
      args.setSeq(seq);
      args.setConsumer(consumer);
      args.setLastMessageId(lastMessageId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_sendChatRemoved() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "sendChatRemoved failed: out of sequence response");
      }
      sendChatRemoved_result result = new sendChatRemoved_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public Hashtable sendContentPreviewUpdated(int esq, String messageId, Vector receiverMids) throws TalkException, TException
    {
      send_sendContentPreviewUpdated(esq, messageId, receiverMids);
      return recv_sendContentPreviewUpdated();
    }

    public void send_sendContentPreviewUpdated(int esq, String messageId, Vector receiverMids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("sendContentPreviewUpdated", TMessageType.CALL, ++seqid_));
      sendContentPreviewUpdated_args args = new sendContentPreviewUpdated_args();
      args.setEsq(esq);
      args.setMessageId(messageId);
      args.setReceiverMids(receiverMids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Hashtable recv_sendContentPreviewUpdated() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "sendContentPreviewUpdated failed: out of sequence response");
      }
      sendContentPreviewUpdated_result result = new sendContentPreviewUpdated_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "sendContentPreviewUpdated failed: unknown result");
    }

    public void sendContentReceipt(int seq, String consumer, String messageId) throws TalkException, TException
    {
      send_sendContentReceipt(seq, consumer, messageId);
      recv_sendContentReceipt();
    }

    public void send_sendContentReceipt(int seq, String consumer, String messageId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("sendContentReceipt", TMessageType.CALL, ++seqid_));
      sendContentReceipt_args args = new sendContentReceipt_args();
      args.setSeq(seq);
      args.setConsumer(consumer);
      args.setMessageId(messageId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_sendContentReceipt() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "sendContentReceipt failed: out of sequence response");
      }
      sendContentReceipt_result result = new sendContentReceipt_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void sendDummyPush() throws TalkException, TException
    {
      send_sendDummyPush();
      recv_sendDummyPush();
    }

    public void send_sendDummyPush() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("sendDummyPush", TMessageType.CALL, ++seqid_));
      sendDummyPush_args args = new sendDummyPush_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_sendDummyPush() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "sendDummyPush failed: out of sequence response");
      }
      sendDummyPush_result result = new sendDummyPush_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void removeE2EEPublicKey(E2EEPublicKey publicKey) throws TalkException, TException
    {
      send_removeE2EEPublicKey(publicKey);
      recv_removeE2EEPublicKey();
    }

    public void send_removeE2EEPublicKey(E2EEPublicKey publicKey) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("removeE2EEPublicKey", TMessageType.CALL, ++seqid_));
      removeE2EEPublicKey_args args = new removeE2EEPublicKey_args();
      args.setPublicKey(publicKey);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_removeE2EEPublicKey() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "removeE2EEPublicKey failed: out of sequence response");
      }
      removeE2EEPublicKey_result result = new removeE2EEPublicKey_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public E2EENegotiationResult negotiateE2EEPublicKey(String mid) throws TalkException, TException
    {
      send_negotiateE2EEPublicKey(mid);
      return recv_negotiateE2EEPublicKey();
    }

    public void send_negotiateE2EEPublicKey(String mid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("negotiateE2EEPublicKey", TMessageType.CALL, ++seqid_));
      negotiateE2EEPublicKey_args args = new negotiateE2EEPublicKey_args();
      args.setMid(mid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public E2EENegotiationResult recv_negotiateE2EEPublicKey() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "negotiateE2EEPublicKey failed: out of sequence response");
      }
      negotiateE2EEPublicKey_result result = new negotiateE2EEPublicKey_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "negotiateE2EEPublicKey failed: unknown result");
    }

    public E2EEPublicKey getE2EEPublicKey(String mid, int version, int keyId) throws TalkException, TException
    {
      send_getE2EEPublicKey(mid, version, keyId);
      return recv_getE2EEPublicKey();
    }

    public void send_getE2EEPublicKey(String mid, int version, int keyId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getE2EEPublicKey", TMessageType.CALL, ++seqid_));
      getE2EEPublicKey_args args = new getE2EEPublicKey_args();
      args.setMid(mid);
      args.setVersion(version);
      args.setKeyId(keyId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public E2EEPublicKey recv_getE2EEPublicKey() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getE2EEPublicKey failed: out of sequence response");
      }
      getE2EEPublicKey_result result = new getE2EEPublicKey_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getE2EEPublicKey failed: unknown result");
    }

    public void requestE2EEKeyExchange(int reqSeq, byte[] temporalPublicKey, E2EEPublicKey publicKey, byte[] verifier) throws TalkException, TException
    {
      send_requestE2EEKeyExchange(reqSeq, temporalPublicKey, publicKey, verifier);
      recv_requestE2EEKeyExchange();
    }

    public void send_requestE2EEKeyExchange(int reqSeq, byte[] temporalPublicKey, E2EEPublicKey publicKey, byte[] verifier) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("requestE2EEKeyExchange", TMessageType.CALL, ++seqid_));
      requestE2EEKeyExchange_args args = new requestE2EEKeyExchange_args();
      args.setReqSeq(reqSeq);
      args.setTemporalPublicKey(temporalPublicKey);
      args.setPublicKey(publicKey);
      args.setVerifier(verifier);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_requestE2EEKeyExchange() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "requestE2EEKeyExchange failed: out of sequence response");
      }
      requestE2EEKeyExchange_result result = new requestE2EEKeyExchange_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public Hashtable getLastE2EEPublicKeys(String chatMid) throws TalkException, TException
    {
      send_getLastE2EEPublicKeys(chatMid);
      return recv_getLastE2EEPublicKeys();
    }

    public void send_getLastE2EEPublicKeys(String chatMid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getLastE2EEPublicKeys", TMessageType.CALL, ++seqid_));
      getLastE2EEPublicKeys_args args = new getLastE2EEPublicKeys_args();
      args.setChatMid(chatMid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Hashtable recv_getLastE2EEPublicKeys() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getLastE2EEPublicKeys failed: out of sequence response");
      }
      getLastE2EEPublicKeys_result result = new getLastE2EEPublicKeys_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getLastE2EEPublicKeys failed: unknown result");
    }

    public E2EEPublicKey registerE2EEPublicKey(int reqSeq, E2EEPublicKey publicKey) throws TalkException, TException
    {
      send_registerE2EEPublicKey(reqSeq, publicKey);
      return recv_registerE2EEPublicKey();
    }

    public void send_registerE2EEPublicKey(int reqSeq, E2EEPublicKey publicKey) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("registerE2EEPublicKey", TMessageType.CALL, ++seqid_));
      registerE2EEPublicKey_args args = new registerE2EEPublicKey_args();
      args.setReqSeq(reqSeq);
      args.setPublicKey(publicKey);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public E2EEPublicKey recv_registerE2EEPublicKey() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "registerE2EEPublicKey failed: out of sequence response");
      }
      registerE2EEPublicKey_result result = new registerE2EEPublicKey_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "registerE2EEPublicKey failed: unknown result");
    }

    public Vector getE2EEPublicKeys() throws TalkException, TException
    {
      send_getE2EEPublicKeys();
      return recv_getE2EEPublicKeys();
    }

    public void send_getE2EEPublicKeys() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getE2EEPublicKeys", TMessageType.CALL, ++seqid_));
      getE2EEPublicKeys_args args = new getE2EEPublicKeys_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getE2EEPublicKeys() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getE2EEPublicKeys failed: out of sequence response");
      }
      getE2EEPublicKeys_result result = new getE2EEPublicKeys_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getE2EEPublicKeys failed: unknown result");
    }

    public Vector getE2EEPublicKeysEx(boolean ignoreE2EEStatus) throws TalkException, TException
    {
      send_getE2EEPublicKeysEx(ignoreE2EEStatus);
      return recv_getE2EEPublicKeysEx();
    }

    public void send_getE2EEPublicKeysEx(boolean ignoreE2EEStatus) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getE2EEPublicKeysEx", TMessageType.CALL, ++seqid_));
      getE2EEPublicKeysEx_args args = new getE2EEPublicKeysEx_args();
      args.setIgnoreE2EEStatus(ignoreE2EEStatus);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getE2EEPublicKeysEx() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getE2EEPublicKeysEx failed: out of sequence response");
      }
      getE2EEPublicKeysEx_result result = new getE2EEPublicKeysEx_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getE2EEPublicKeysEx failed: unknown result");
    }

    public Vector getReadMessageOpsInBulk(Vector chatIds) throws TalkException, TException
    {
      send_getReadMessageOpsInBulk(chatIds);
      return recv_getReadMessageOpsInBulk();
    }

    public void send_getReadMessageOpsInBulk(Vector chatIds) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getReadMessageOpsInBulk", TMessageType.CALL, ++seqid_));
      getReadMessageOpsInBulk_args args = new getReadMessageOpsInBulk_args();
      args.setChatIds(chatIds);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getReadMessageOpsInBulk() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getReadMessageOpsInBulk failed: out of sequence response");
      }
      getReadMessageOpsInBulk_result result = new getReadMessageOpsInBulk_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getReadMessageOpsInBulk failed: unknown result");
    }

    public Message sendEvent(int seq, Message message) throws TalkException, TException
    {
      send_sendEvent(seq, message);
      return recv_sendEvent();
    }

    public void send_sendEvent(int seq, Message message) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("sendEvent", TMessageType.CALL, ++seqid_));
      sendEvent_args args = new sendEvent_args();
      args.setSeq(seq);
      args.setMessage(message);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Message recv_sendEvent() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "sendEvent failed: out of sequence response");
      }
      sendEvent_result result = new sendEvent_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "sendEvent failed: unknown result");
    }

    public Message sendMessage(int seq, Message message) throws TalkException, TException
    {
      send_sendMessage(seq, message);
      return recv_sendMessage();
    }

    public void send_sendMessage(int seq, Message message) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("sendMessage", TMessageType.CALL, ++seqid_));
      sendMessage_args args = new sendMessage_args();
      args.setSeq(seq);
      args.setMessage(message);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Message recv_sendMessage() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "sendMessage failed: out of sequence response");
      }
      sendMessage_result result = new sendMessage_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "sendMessage failed: unknown result");
    }

    public void sendMessageIgnored(int seq, String consumer, Vector messageIds) throws TalkException, TException
    {
      send_sendMessageIgnored(seq, consumer, messageIds);
      recv_sendMessageIgnored();
    }

    public void send_sendMessageIgnored(int seq, String consumer, Vector messageIds) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("sendMessageIgnored", TMessageType.CALL, ++seqid_));
      sendMessageIgnored_args args = new sendMessageIgnored_args();
      args.setSeq(seq);
      args.setConsumer(consumer);
      args.setMessageIds(messageIds);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_sendMessageIgnored() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "sendMessageIgnored failed: out of sequence response");
      }
      sendMessageIgnored_result result = new sendMessageIgnored_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void sendMessageReceipt(int seq, String consumer, Vector messageIds) throws TalkException, TException
    {
      send_sendMessageReceipt(seq, consumer, messageIds);
      recv_sendMessageReceipt();
    }

    public void send_sendMessageReceipt(int seq, String consumer, Vector messageIds) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("sendMessageReceipt", TMessageType.CALL, ++seqid_));
      sendMessageReceipt_args args = new sendMessageReceipt_args();
      args.setSeq(seq);
      args.setConsumer(consumer);
      args.setMessageIds(messageIds);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_sendMessageReceipt() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "sendMessageReceipt failed: out of sequence response");
      }
      sendMessageReceipt_result result = new sendMessageReceipt_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public Contact findContactByMetaTag(String userid, String reference) throws TalkException, TException
    {
      send_findContactByMetaTag(userid, reference);
      return recv_findContactByMetaTag();
    }

    public void send_findContactByMetaTag(String userid, String reference) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("findContactByMetaTag", TMessageType.CALL, ++seqid_));
      findContactByMetaTag_args args = new findContactByMetaTag_args();
      args.setUserid(userid);
      args.setReference(reference);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Contact recv_findContactByMetaTag() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "findContactByMetaTag failed: out of sequence response");
      }
      findContactByMetaTag_result result = new findContactByMetaTag_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "findContactByMetaTag failed: unknown result");
    }

    public Message sendMessageToMyHome(int seq, Message message) throws TalkException, TException
    {
      send_sendMessageToMyHome(seq, message);
      return recv_sendMessageToMyHome();
    }

    public void send_sendMessageToMyHome(int seq, Message message) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("sendMessageToMyHome", TMessageType.CALL, ++seqid_));
      sendMessageToMyHome_args args = new sendMessageToMyHome_args();
      args.setSeq(seq);
      args.setMessage(message);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Message recv_sendMessageToMyHome() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "sendMessageToMyHome failed: out of sequence response");
      }
      sendMessageToMyHome_result result = new sendMessageToMyHome_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "sendMessageToMyHome failed: unknown result");
    }

    public void setBuddyLocation(String mid, int index, Geolocation location) throws TalkException, TException
    {
      send_setBuddyLocation(mid, index, location);
      recv_setBuddyLocation();
    }

    public void send_setBuddyLocation(String mid, int index, Geolocation location) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("setBuddyLocation", TMessageType.CALL, ++seqid_));
      setBuddyLocation_args args = new setBuddyLocation_args();
      args.setMid(mid);
      args.setIndex(index);
      args.setLocation(location);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_setBuddyLocation() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "setBuddyLocation failed: out of sequence response");
      }
      setBuddyLocation_result result = new setBuddyLocation_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void setIdentityCredential(String identifier, String verifier, IdentityProvider provider) throws TalkException, TException
    {
      send_setIdentityCredential(identifier, verifier, provider);
      recv_setIdentityCredential();
    }

    public void send_setIdentityCredential(String identifier, String verifier, IdentityProvider provider) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("setIdentityCredential", TMessageType.CALL, ++seqid_));
      setIdentityCredential_args args = new setIdentityCredential_args();
      args.setIdentifier(identifier);
      args.setVerifier(verifier);
      args.setProvider(provider);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_setIdentityCredential() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "setIdentityCredential failed: out of sequence response");
      }
      setIdentityCredential_result result = new setIdentityCredential_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void setNotificationsEnabled(int reqSeq, MIDType type, String target, boolean enablement) throws TalkException, TException
    {
      send_setNotificationsEnabled(reqSeq, type, target, enablement);
      recv_setNotificationsEnabled();
    }

    public void send_setNotificationsEnabled(int reqSeq, MIDType type, String target, boolean enablement) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("setNotificationsEnabled", TMessageType.CALL, ++seqid_));
      setNotificationsEnabled_args args = new setNotificationsEnabled_args();
      args.setReqSeq(reqSeq);
      args.setType(type);
      args.setTarget(target);
      args.setEnablement(enablement);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_setNotificationsEnabled() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "setNotificationsEnabled failed: out of sequence response");
      }
      setNotificationsEnabled_result result = new setNotificationsEnabled_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public VerificationSessionData startUpdateVerification(String region, CarrierCode carrier, String phone, String udidHash, DeviceInfo deviceInfo, String networkCode, String locale) throws TalkException, TException
    {
      send_startUpdateVerification(region, carrier, phone, udidHash, deviceInfo, networkCode, locale);
      return recv_startUpdateVerification();
    }

    public void send_startUpdateVerification(String region, CarrierCode carrier, String phone, String udidHash, DeviceInfo deviceInfo, String networkCode, String locale) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("startUpdateVerification", TMessageType.CALL, ++seqid_));
      startUpdateVerification_args args = new startUpdateVerification_args();
      args.setRegion(region);
      args.setCarrier(carrier);
      args.setPhone(phone);
      args.setUdidHash(udidHash);
      args.setDeviceInfo(deviceInfo);
      args.setNetworkCode(networkCode);
      args.setLocale(locale);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public VerificationSessionData recv_startUpdateVerification() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "startUpdateVerification failed: out of sequence response");
      }
      startUpdateVerification_result result = new startUpdateVerification_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "startUpdateVerification failed: unknown result");
    }

    public VerificationSessionData startVerification(String region, CarrierCode carrier, String phone, String udidHash, DeviceInfo deviceInfo, String networkCode, String mid, String locale, SIMInfo simInfo, String oldUdidHash) throws TalkException, TException
    {
      send_startVerification(region, carrier, phone, udidHash, deviceInfo, networkCode, mid, locale, simInfo, oldUdidHash);
      return recv_startVerification();
    }

    public void send_startVerification(String region, CarrierCode carrier, String phone, String udidHash, DeviceInfo deviceInfo, String networkCode, String mid, String locale, SIMInfo simInfo, String oldUdidHash) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("startVerification", TMessageType.CALL, ++seqid_));
      startVerification_args args = new startVerification_args();
      args.setRegion(region);
      args.setCarrier(carrier);
      args.setPhone(phone);
      args.setUdidHash(udidHash);
      args.setDeviceInfo(deviceInfo);
      args.setNetworkCode(networkCode);
      args.setMid(mid);
      args.setLocale(locale);
      args.setSimInfo(simInfo);
      args.setOldUdidHash(oldUdidHash);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public VerificationSessionData recv_startVerification() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "startVerification failed: out of sequence response");
      }
      startVerification_result result = new startVerification_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "startVerification failed: unknown result");
    }

    public void updateGroupPreferenceAttribute(int reqSeq, String groupMid, Hashtable updatedAttrs) throws TalkException, TException
    {
      send_updateGroupPreferenceAttribute(reqSeq, groupMid, updatedAttrs);
      recv_updateGroupPreferenceAttribute();
    }

    public void send_updateGroupPreferenceAttribute(int reqSeq, String groupMid, Hashtable updatedAttrs) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateGroupPreferenceAttribute", TMessageType.CALL, ++seqid_));
      updateGroupPreferenceAttribute_args args = new updateGroupPreferenceAttribute_args();
      args.setReqSeq(reqSeq);
      args.setGroupMid(groupMid);
      args.setUpdatedAttrs(updatedAttrs);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_updateGroupPreferenceAttribute() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateGroupPreferenceAttribute failed: out of sequence response");
      }
      updateGroupPreferenceAttribute_result result = new updateGroupPreferenceAttribute_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public Room createRoomV2(int reqSeq, Vector contactIds) throws TalkException, TException
    {
      send_createRoomV2(reqSeq, contactIds);
      return recv_createRoomV2();
    }

    public void send_createRoomV2(int reqSeq, Vector contactIds) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("createRoomV2", TMessageType.CALL, ++seqid_));
      createRoomV2_args args = new createRoomV2_args();
      args.setReqSeq(reqSeq);
      args.setContactIds(contactIds);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Room recv_createRoomV2() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "createRoomV2 failed: out of sequence response");
      }
      createRoomV2_result result = new createRoomV2_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "createRoomV2 failed: unknown result");
    }

    public void storeUpdateProfileAttribute(int seq, ProfileAttribute profileAttribute, String value) throws TalkException, TException
    {
      send_storeUpdateProfileAttribute(seq, profileAttribute, value);
      recv_storeUpdateProfileAttribute();
    }

    public void send_storeUpdateProfileAttribute(int seq, ProfileAttribute profileAttribute, String value) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("storeUpdateProfileAttribute", TMessageType.CALL, ++seqid_));
      storeUpdateProfileAttribute_args args = new storeUpdateProfileAttribute_args();
      args.setSeq(seq);
      args.setProfileAttribute(profileAttribute);
      args.setValue(value);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_storeUpdateProfileAttribute() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "storeUpdateProfileAttribute failed: out of sequence response");
      }
      storeUpdateProfileAttribute_result result = new storeUpdateProfileAttribute_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public Vector syncContactBySnsIds(int reqSeq, Vector modifications) throws TalkException, TException
    {
      send_syncContactBySnsIds(reqSeq, modifications);
      return recv_syncContactBySnsIds();
    }

    public void send_syncContactBySnsIds(int reqSeq, Vector modifications) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("syncContactBySnsIds", TMessageType.CALL, ++seqid_));
      syncContactBySnsIds_args args = new syncContactBySnsIds_args();
      args.setReqSeq(reqSeq);
      args.setModifications(modifications);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_syncContactBySnsIds() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "syncContactBySnsIds failed: out of sequence response");
      }
      syncContactBySnsIds_result result = new syncContactBySnsIds_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "syncContactBySnsIds failed: unknown result");
    }

    public Hashtable syncContacts(int reqSeq, Vector localContacts) throws TalkException, TException
    {
      send_syncContacts(reqSeq, localContacts);
      return recv_syncContacts();
    }

    public void send_syncContacts(int reqSeq, Vector localContacts) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("syncContacts", TMessageType.CALL, ++seqid_));
      syncContacts_args args = new syncContacts_args();
      args.setReqSeq(reqSeq);
      args.setLocalContacts(localContacts);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Hashtable recv_syncContacts() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "syncContacts failed: out of sequence response");
      }
      syncContacts_result result = new syncContacts_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "syncContacts failed: unknown result");
    }

    public Message trySendMessage(int seq, Message message) throws TalkException, TException
    {
      send_trySendMessage(seq, message);
      return recv_trySendMessage();
    }

    public void send_trySendMessage(int seq, Message message) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("trySendMessage", TMessageType.CALL, ++seqid_));
      trySendMessage_args args = new trySendMessage_args();
      args.setSeq(seq);
      args.setMessage(message);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Message recv_trySendMessage() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "trySendMessage failed: out of sequence response");
      }
      trySendMessage_result result = new trySendMessage_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "trySendMessage failed: unknown result");
    }

    public Vector getNextMessagesV2(String messageBoxId, MessageBoxV2MessageId startMessageId, int messagesCount) throws TalkException, TException
    {
      send_getNextMessagesV2(messageBoxId, startMessageId, messagesCount);
      return recv_getNextMessagesV2();
    }

    public void send_getNextMessagesV2(String messageBoxId, MessageBoxV2MessageId startMessageId, int messagesCount) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getNextMessagesV2", TMessageType.CALL, ++seqid_));
      getNextMessagesV2_args args = new getNextMessagesV2_args();
      args.setMessageBoxId(messageBoxId);
      args.setStartMessageId(startMessageId);
      args.setMessagesCount(messagesCount);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getNextMessagesV2() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getNextMessagesV2 failed: out of sequence response");
      }
      getNextMessagesV2_result result = new getNextMessagesV2_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getNextMessagesV2 failed: unknown result");
    }

    public TMessageBoxWrapUp getMessageBoxCompactWrapUpV2(String messageBoxId) throws TalkException, TException
    {
      send_getMessageBoxCompactWrapUpV2(messageBoxId);
      return recv_getMessageBoxCompactWrapUpV2();
    }

    public void send_getMessageBoxCompactWrapUpV2(String messageBoxId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getMessageBoxCompactWrapUpV2", TMessageType.CALL, ++seqid_));
      getMessageBoxCompactWrapUpV2_args args = new getMessageBoxCompactWrapUpV2_args();
      args.setMessageBoxId(messageBoxId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public TMessageBoxWrapUp recv_getMessageBoxCompactWrapUpV2() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getMessageBoxCompactWrapUpV2 failed: out of sequence response");
      }
      getMessageBoxCompactWrapUpV2_result result = new getMessageBoxCompactWrapUpV2_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getMessageBoxCompactWrapUpV2 failed: unknown result");
    }

    public Vector getRecentMessagesV2(String messageBoxId, int messagesCount) throws TalkException, TException
    {
      send_getRecentMessagesV2(messageBoxId, messagesCount);
      return recv_getRecentMessagesV2();
    }

    public void send_getRecentMessagesV2(String messageBoxId, int messagesCount) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getRecentMessagesV2", TMessageType.CALL, ++seqid_));
      getRecentMessagesV2_args args = new getRecentMessagesV2_args();
      args.setMessageBoxId(messageBoxId);
      args.setMessagesCount(messagesCount);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getRecentMessagesV2() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getRecentMessagesV2 failed: out of sequence response");
      }
      getRecentMessagesV2_result result = new getRecentMessagesV2_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getRecentMessagesV2 failed: unknown result");
    }

    public Hashtable validateContactsOnBot(Vector contacts) throws TalkException, TException
    {
      send_validateContactsOnBot(contacts);
      return recv_validateContactsOnBot();
    }

    public void send_validateContactsOnBot(Vector contacts) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("validateContactsOnBot", TMessageType.CALL, ++seqid_));
      validateContactsOnBot_args args = new validateContactsOnBot_args();
      args.setContacts(contacts);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Hashtable recv_validateContactsOnBot() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "validateContactsOnBot failed: out of sequence response");
      }
      validateContactsOnBot_result result = new validateContactsOnBot_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "validateContactsOnBot failed: unknown result");
    }

    public void tryFriendRequest(String midOrEMid, FriendRequestMethod method, String friendRequestParams) throws TalkException, TException
    {
      send_tryFriendRequest(midOrEMid, method, friendRequestParams);
      recv_tryFriendRequest();
    }

    public void send_tryFriendRequest(String midOrEMid, FriendRequestMethod method, String friendRequestParams) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("tryFriendRequest", TMessageType.CALL, ++seqid_));
      tryFriendRequest_args args = new tryFriendRequest_args();
      args.setMidOrEMid(midOrEMid);
      args.setMethod(method);
      args.setFriendRequestParams(friendRequestParams);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_tryFriendRequest() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "tryFriendRequest failed: out of sequence response");
      }
      tryFriendRequest_result result = new tryFriendRequest_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void unblockContact(int reqSeq, String id) throws TalkException, TException
    {
      send_unblockContact(reqSeq, id);
      recv_unblockContact();
    }

    public void send_unblockContact(int reqSeq, String id) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("unblockContact", TMessageType.CALL, ++seqid_));
      unblockContact_args args = new unblockContact_args();
      args.setReqSeq(reqSeq);
      args.setId(id);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_unblockContact() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "unblockContact failed: out of sequence response");
      }
      unblockContact_result result = new unblockContact_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void unblockRecommendation(int reqSeq, String id) throws TalkException, TException
    {
      send_unblockRecommendation(reqSeq, id);
      recv_unblockRecommendation();
    }

    public void send_unblockRecommendation(int reqSeq, String id) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("unblockRecommendation", TMessageType.CALL, ++seqid_));
      unblockRecommendation_args args = new unblockRecommendation_args();
      args.setReqSeq(reqSeq);
      args.setId(id);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_unblockRecommendation() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "unblockRecommendation failed: out of sequence response");
      }
      unblockRecommendation_result result = new unblockRecommendation_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public String unregisterUserAndDevice() throws TalkException, TException
    {
      send_unregisterUserAndDevice();
      return recv_unregisterUserAndDevice();
    }

    public void send_unregisterUserAndDevice() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("unregisterUserAndDevice", TMessageType.CALL, ++seqid_));
      unregisterUserAndDevice_args args = new unregisterUserAndDevice_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_unregisterUserAndDevice() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "unregisterUserAndDevice failed: out of sequence response");
      }
      unregisterUserAndDevice_result result = new unregisterUserAndDevice_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "unregisterUserAndDevice failed: unknown result");
    }

    public void updateApnsDeviceToken(byte[] apnsDeviceToken) throws TalkException, TException
    {
      send_updateApnsDeviceToken(apnsDeviceToken);
      recv_updateApnsDeviceToken();
    }

    public void send_updateApnsDeviceToken(byte[] apnsDeviceToken) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateApnsDeviceToken", TMessageType.CALL, ++seqid_));
      updateApnsDeviceToken_args args = new updateApnsDeviceToken_args();
      args.setApnsDeviceToken(apnsDeviceToken);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_updateApnsDeviceToken() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateApnsDeviceToken failed: out of sequence response");
      }
      updateApnsDeviceToken_result result = new updateApnsDeviceToken_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void updateBuddySetting(String key, String value) throws TalkException, TException
    {
      send_updateBuddySetting(key, value);
      recv_updateBuddySetting();
    }

    public void send_updateBuddySetting(String key, String value) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateBuddySetting", TMessageType.CALL, ++seqid_));
      updateBuddySetting_args args = new updateBuddySetting_args();
      args.setKey(key);
      args.setValue(value);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_updateBuddySetting() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateBuddySetting failed: out of sequence response");
      }
      updateBuddySetting_result result = new updateBuddySetting_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void updateC2DMRegistrationId(String registrationId) throws TalkException, TException
    {
      send_updateC2DMRegistrationId(registrationId);
      recv_updateC2DMRegistrationId();
    }

    public void send_updateC2DMRegistrationId(String registrationId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateC2DMRegistrationId", TMessageType.CALL, ++seqid_));
      updateC2DMRegistrationId_args args = new updateC2DMRegistrationId_args();
      args.setRegistrationId(registrationId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_updateC2DMRegistrationId() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateC2DMRegistrationId failed: out of sequence response");
      }
      updateC2DMRegistrationId_result result = new updateC2DMRegistrationId_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void updateContactSetting(int reqSeq, String mid, ContactSetting flag, String value) throws TalkException, TException
    {
      send_updateContactSetting(reqSeq, mid, flag, value);
      recv_updateContactSetting();
    }

    public void send_updateContactSetting(int reqSeq, String mid, ContactSetting flag, String value) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateContactSetting", TMessageType.CALL, ++seqid_));
      updateContactSetting_args args = new updateContactSetting_args();
      args.setReqSeq(reqSeq);
      args.setMid(mid);
      args.setFlag(flag);
      args.setValue(value);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_updateContactSetting() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateContactSetting failed: out of sequence response");
      }
      updateContactSetting_result result = new updateContactSetting_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void updateCustomModeSettings(CustomMode customMode, Hashtable paramMap) throws TalkException, TException
    {
      send_updateCustomModeSettings(customMode, paramMap);
      recv_updateCustomModeSettings();
    }

    public void send_updateCustomModeSettings(CustomMode customMode, Hashtable paramMap) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateCustomModeSettings", TMessageType.CALL, ++seqid_));
      updateCustomModeSettings_args args = new updateCustomModeSettings_args();
      args.setCustomMode(customMode);
      args.setParamMap(paramMap);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_updateCustomModeSettings() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateCustomModeSettings failed: out of sequence response");
      }
      updateCustomModeSettings_result result = new updateCustomModeSettings_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void updateDeviceInfo(String deviceUid, DeviceInfo deviceInfo) throws TalkException, TException
    {
      send_updateDeviceInfo(deviceUid, deviceInfo);
      recv_updateDeviceInfo();
    }

    public void send_updateDeviceInfo(String deviceUid, DeviceInfo deviceInfo) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateDeviceInfo", TMessageType.CALL, ++seqid_));
      updateDeviceInfo_args args = new updateDeviceInfo_args();
      args.setDeviceUid(deviceUid);
      args.setDeviceInfo(deviceInfo);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_updateDeviceInfo() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateDeviceInfo failed: out of sequence response");
      }
      updateDeviceInfo_result result = new updateDeviceInfo_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void updateGroup(int reqSeq, Group group) throws TalkException, TException
    {
      send_updateGroup(reqSeq, group);
      recv_updateGroup();
    }

    public void send_updateGroup(int reqSeq, Group group) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateGroup", TMessageType.CALL, ++seqid_));
      updateGroup_args args = new updateGroup_args();
      args.setReqSeq(reqSeq);
      args.setGroup(group);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_updateGroup() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateGroup failed: out of sequence response");
      }
      updateGroup_result result = new updateGroup_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void updateNotificationToken(NotificationType type, String token) throws TalkException, TException
    {
      send_updateNotificationToken(type, token);
      recv_updateNotificationToken();
    }

    public void send_updateNotificationToken(NotificationType type, String token) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateNotificationToken", TMessageType.CALL, ++seqid_));
      updateNotificationToken_args args = new updateNotificationToken_args();
      args.setType(type);
      args.setToken(token);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_updateNotificationToken() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateNotificationToken failed: out of sequence response");
      }
      updateNotificationToken_result result = new updateNotificationToken_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void updateNotificationTokenWithBytes(NotificationType type, byte[] token) throws TalkException, TException
    {
      send_updateNotificationTokenWithBytes(type, token);
      recv_updateNotificationTokenWithBytes();
    }

    public void send_updateNotificationTokenWithBytes(NotificationType type, byte[] token) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateNotificationTokenWithBytes", TMessageType.CALL, ++seqid_));
      updateNotificationTokenWithBytes_args args = new updateNotificationTokenWithBytes_args();
      args.setType(type);
      args.setToken(token);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_updateNotificationTokenWithBytes() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateNotificationTokenWithBytes failed: out of sequence response");
      }
      updateNotificationTokenWithBytes_result result = new updateNotificationTokenWithBytes_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void updateProfile(int reqSeq, Profile profile) throws TalkException, TException
    {
      send_updateProfile(reqSeq, profile);
      recv_updateProfile();
    }

    public void send_updateProfile(int reqSeq, Profile profile) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateProfile", TMessageType.CALL, ++seqid_));
      updateProfile_args args = new updateProfile_args();
      args.setReqSeq(reqSeq);
      args.setProfile(profile);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_updateProfile() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateProfile failed: out of sequence response");
      }
      updateProfile_result result = new updateProfile_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void updateProfileAttribute(int reqSeq, ProfileAttribute attr, String value) throws TalkException, TException
    {
      send_updateProfileAttribute(reqSeq, attr, value);
      recv_updateProfileAttribute();
    }

    public void send_updateProfileAttribute(int reqSeq, ProfileAttribute attr, String value) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateProfileAttribute", TMessageType.CALL, ++seqid_));
      updateProfileAttribute_args args = new updateProfileAttribute_args();
      args.setReqSeq(reqSeq);
      args.setAttr(attr);
      args.setValue(value);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_updateProfileAttribute() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateProfileAttribute failed: out of sequence response");
      }
      updateProfileAttribute_result result = new updateProfileAttribute_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void updateRegion(String region) throws TalkException, TException
    {
      send_updateRegion(region);
      recv_updateRegion();
    }

    public void send_updateRegion(String region) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateRegion", TMessageType.CALL, ++seqid_));
      updateRegion_args args = new updateRegion_args();
      args.setRegion(region);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_updateRegion() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateRegion failed: out of sequence response");
      }
      updateRegion_result result = new updateRegion_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void updateSettings(int reqSeq, Settings settings) throws TalkException, TException
    {
      send_updateSettings(reqSeq, settings);
      recv_updateSettings();
    }

    public void send_updateSettings(int reqSeq, Settings settings) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateSettings", TMessageType.CALL, ++seqid_));
      updateSettings_args args = new updateSettings_args();
      args.setReqSeq(reqSeq);
      args.setSettings(settings);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_updateSettings() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateSettings failed: out of sequence response");
      }
      updateSettings_result result = new updateSettings_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public int updateSettings2(int reqSeq, Settings settings) throws TalkException, TException
    {
      send_updateSettings2(reqSeq, settings);
      return recv_updateSettings2();
    }

    public void send_updateSettings2(int reqSeq, Settings settings) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateSettings2", TMessageType.CALL, ++seqid_));
      updateSettings2_args args = new updateSettings2_args();
      args.setReqSeq(reqSeq);
      args.setSettings(settings);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_updateSettings2() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateSettings2 failed: out of sequence response");
      }
      updateSettings2_result result = new updateSettings2_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "updateSettings2 failed: unknown result");
    }

    public void updateSettingsAttribute(int reqSeq, SettingsAttribute attr, String value) throws TalkException, TException
    {
      send_updateSettingsAttribute(reqSeq, attr, value);
      recv_updateSettingsAttribute();
    }

    public void send_updateSettingsAttribute(int reqSeq, SettingsAttribute attr, String value) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateSettingsAttribute", TMessageType.CALL, ++seqid_));
      updateSettingsAttribute_args args = new updateSettingsAttribute_args();
      args.setReqSeq(reqSeq);
      args.setAttr(attr);
      args.setValue(value);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_updateSettingsAttribute() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateSettingsAttribute failed: out of sequence response");
      }
      updateSettingsAttribute_result result = new updateSettingsAttribute_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public int updateSettingsAttributes(int reqSeq, int attrBitset, Settings settings) throws TalkException, TException
    {
      send_updateSettingsAttributes(reqSeq, attrBitset, settings);
      return recv_updateSettingsAttributes();
    }

    public void send_updateSettingsAttributes(int reqSeq, int attrBitset, Settings settings) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateSettingsAttributes", TMessageType.CALL, ++seqid_));
      updateSettingsAttributes_args args = new updateSettingsAttributes_args();
      args.setReqSeq(reqSeq);
      args.setAttrBitset(attrBitset);
      args.setSettings(settings);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_updateSettingsAttributes() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateSettingsAttributes failed: out of sequence response");
      }
      updateSettingsAttributes_result result = new updateSettingsAttributes_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "updateSettingsAttributes failed: unknown result");
    }

    public void verifyIdentityCredential(IdentityProvider identityProvider, String identifier, String password) throws TalkException, TException
    {
      send_verifyIdentityCredential(identityProvider, identifier, password);
      recv_verifyIdentityCredential();
    }

    public void send_verifyIdentityCredential(IdentityProvider identityProvider, String identifier, String password) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("verifyIdentityCredential", TMessageType.CALL, ++seqid_));
      verifyIdentityCredential_args args = new verifyIdentityCredential_args();
      args.setIdentityProvider(identityProvider);
      args.setIdentifier(identifier);
      args.setPassword(password);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_verifyIdentityCredential() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "verifyIdentityCredential failed: out of sequence response");
      }
      verifyIdentityCredential_result result = new verifyIdentityCredential_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public UserAuthStatus verifyIdentityCredentialWithResult(IdentityCredential identityCredential) throws TalkException, TException
    {
      send_verifyIdentityCredentialWithResult(identityCredential);
      return recv_verifyIdentityCredentialWithResult();
    }

    public void send_verifyIdentityCredentialWithResult(IdentityCredential identityCredential) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("verifyIdentityCredentialWithResult", TMessageType.CALL, ++seqid_));
      verifyIdentityCredentialWithResult_args args = new verifyIdentityCredentialWithResult_args();
      args.setIdentityCredential(identityCredential);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public UserAuthStatus recv_verifyIdentityCredentialWithResult() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "verifyIdentityCredentialWithResult failed: out of sequence response");
      }
      verifyIdentityCredentialWithResult_result result = new verifyIdentityCredentialWithResult_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "verifyIdentityCredentialWithResult failed: unknown result");
    }

    public VerificationResult verifyPhone(String sessionId, String pinCode, String udidHash) throws TalkException, TException
    {
      send_verifyPhone(sessionId, pinCode, udidHash);
      return recv_verifyPhone();
    }

    public void send_verifyPhone(String sessionId, String pinCode, String udidHash) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("verifyPhone", TMessageType.CALL, ++seqid_));
      verifyPhone_args args = new verifyPhone_args();
      args.setSessionId(sessionId);
      args.setPinCode(pinCode);
      args.setUdidHash(udidHash);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public VerificationResult recv_verifyPhone() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "verifyPhone failed: out of sequence response");
      }
      verifyPhone_result result = new verifyPhone_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "verifyPhone failed: unknown result");
    }

    public String verifyQrcode(String verifier, String pinCode) throws TalkException, TException
    {
      send_verifyQrcode(verifier, pinCode);
      return recv_verifyQrcode();
    }

    public void send_verifyQrcode(String verifier, String pinCode) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("verifyQrcode", TMessageType.CALL, ++seqid_));
      verifyQrcode_args args = new verifyQrcode_args();
      args.setVerifier(verifier);
      args.setPinCode(pinCode);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_verifyQrcode() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "verifyQrcode failed: out of sequence response");
      }
      verifyQrcode_result result = new verifyQrcode_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "verifyQrcode failed: unknown result");
    }

  }
  public static class Processor implements TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("getChatRoomAnnouncementsBulk", new getChatRoomAnnouncementsBulk());
      processMap_.put("getChatRoomAnnouncements", new getChatRoomAnnouncements());
      processMap_.put("createChatRoomAnnouncement", new createChatRoomAnnouncement());
      processMap_.put("removeChatRoomAnnouncement", new removeChatRoomAnnouncement());
      processMap_.put("unsendMessage", new unsendMessage());
      processMap_.put("getGroupWithoutMembers", new getGroupWithoutMembers());
      processMap_.put("requestResendMessage", new requestResendMessage());
      processMap_.put("respondResendMessage", new respondResendMessage());
      processMap_.put("acceptGroupInvitation", new acceptGroupInvitation());
      processMap_.put("acceptGroupInvitationByTicket", new acceptGroupInvitationByTicket());
      processMap_.put("acceptProximityMatches", new acceptProximityMatches());
      processMap_.put("acquireCallRoute", new acquireCallRoute());
      processMap_.put("acquireCallTicket", new acquireCallTicket());
      processMap_.put("acquireEncryptedAccessToken", new acquireEncryptedAccessToken());
      processMap_.put("addSnsId", new addSnsId());
      processMap_.put("blockContact", new blockContact());
      processMap_.put("blockRecommendation", new blockRecommendation());
      processMap_.put("cancelGroupInvitation", new cancelGroupInvitation());
      processMap_.put("changeVerificationMethod", new changeVerificationMethod());
      processMap_.put("clearIdentityCredential", new clearIdentityCredential());
      processMap_.put("clearMessageBox", new clearMessageBox());
      processMap_.put("closeProximityMatch", new closeProximityMatch());
      processMap_.put("commitSendMessage", new commitSendMessage());
      processMap_.put("commitSendMessages", new commitSendMessages());
      processMap_.put("commitUpdateProfile", new commitUpdateProfile());
      processMap_.put("confirmEmail", new confirmEmail());
      processMap_.put("createGroup", new createGroup());
      processMap_.put("createQrcodeBase64Image", new createQrcodeBase64Image());
      processMap_.put("createRoom", new createRoom());
      processMap_.put("createSession", new createSession());
      processMap_.put("fetchAnnouncements", new fetchAnnouncements());
      processMap_.put("fetchMessages", new fetchMessages());
      processMap_.put("fetchOperations", new fetchOperations());
      processMap_.put("fetchOps", new fetchOps());
      processMap_.put("findAndAddContactsByEmail", new findAndAddContactsByEmail());
      processMap_.put("findAndAddContactsByMid", new findAndAddContactsByMid());
      processMap_.put("findGroupByTicketV2", new findGroupByTicketV2());
      processMap_.put("findAndAddContactsByPhone", new findAndAddContactsByPhone());
      processMap_.put("getFriendRequests", new getFriendRequests());
      processMap_.put("removeFriendRequest", new removeFriendRequest());
      processMap_.put("findAndAddContactsByUserid", new findAndAddContactsByUserid());
      processMap_.put("findContactByUserid", new findContactByUserid());
      processMap_.put("findContactByUserTicket", new findContactByUserTicket());
      processMap_.put("findContactsByEmail", new findContactsByEmail());
      processMap_.put("findContactsByPhone", new findContactsByPhone());
      processMap_.put("findSnsIdUserStatus", new findSnsIdUserStatus());
      processMap_.put("finishUpdateVerification", new finishUpdateVerification());
      processMap_.put("generateUserTicket", new generateUserTicket());
      processMap_.put("destroyMessage", new destroyMessage());
      processMap_.put("getAcceptedProximityMatches", new getAcceptedProximityMatches());
      processMap_.put("getActiveBuddySubscriberIds", new getActiveBuddySubscriberIds());
      processMap_.put("getAllContactIds", new getAllContactIds());
      processMap_.put("getAuthQrcode", new getAuthQrcode());
      processMap_.put("getBlockedContactIds", new getBlockedContactIds());
      processMap_.put("registerWithPhoneNumber", new registerWithPhoneNumber());
      processMap_.put("registerWithPhoneNumberAndPassword", new registerWithPhoneNumberAndPassword());
      processMap_.put("getAnalyticsInfo", new getAnalyticsInfo());
      processMap_.put("reportClientStatistics", new reportClientStatistics());
      processMap_.put("verifyPhoneNumberForLogin", new verifyPhoneNumberForLogin());
      processMap_.put("verifyPhoneNumber", new verifyPhoneNumber());
      processMap_.put("getBlockedContactIdsByRange", new getBlockedContactIdsByRange());
      processMap_.put("getBlockedRecommendationIds", new getBlockedRecommendationIds());
      processMap_.put("getBuddyBlockerIds", new getBuddyBlockerIds());
      processMap_.put("getBuddyLocation", new getBuddyLocation());
      processMap_.put("getCompactContactsModifiedSince", new getCompactContactsModifiedSince());
      processMap_.put("getCompactGroup", new getCompactGroup());
      processMap_.put("getCompactRoom", new getCompactRoom());
      processMap_.put("getContact", new getContact());
      processMap_.put("getContacts", new getContacts());
      processMap_.put("getContactWithFriendRequestStatus", new getContactWithFriendRequestStatus());
      processMap_.put("getCountryWithRequestIp", new getCountryWithRequestIp());
      processMap_.put("getFavoriteMids", new getFavoriteMids());
      processMap_.put("getGroup", new getGroup());
      processMap_.put("getGroupIdsInvited", new getGroupIdsInvited());
      processMap_.put("getGroupIdsJoined", new getGroupIdsJoined());
      processMap_.put("getGroups", new getGroups());
      processMap_.put("getHiddenContactMids", new getHiddenContactMids());
      processMap_.put("getIdentityIdentifier", new getIdentityIdentifier());
      processMap_.put("getLastAnnouncementIndex", new getLastAnnouncementIndex());
      processMap_.put("getLastOpRevision", new getLastOpRevision());
      processMap_.put("getSuggestRevisions", new getSuggestRevisions());
      processMap_.put("getPreviousMessagesV2WithReadCount", new getPreviousMessagesV2WithReadCount());
      processMap_.put("getMessageBox", new getMessageBox());
      processMap_.put("getMessageBoxCompactWrapUp", new getMessageBoxCompactWrapUp());
      processMap_.put("getMessageBoxCompactWrapUpList", new getMessageBoxCompactWrapUpList());
      processMap_.put("getMessageBoxList", new getMessageBoxList());
      processMap_.put("getMessageBoxListByStatus", new getMessageBoxListByStatus());
      processMap_.put("getMessageBoxWrapUp", new getMessageBoxWrapUp());
      processMap_.put("getMessageBoxWrapUpList", new getMessageBoxWrapUpList());
      processMap_.put("getMessagesBySequenceNumber", new getMessagesBySequenceNumber());
      processMap_.put("getNextMessages", new getNextMessages());
      processMap_.put("getNotificationPolicy", new getNotificationPolicy());
      processMap_.put("getPreviousMessages", new getPreviousMessages());
      processMap_.put("getProfile", new getProfile());
      processMap_.put("getProximityMatchCandidateList", new getProximityMatchCandidateList());
      processMap_.put("getProximityMatchCandidates", new getProximityMatchCandidates());
      processMap_.put("getRecentMessages", new getRecentMessages());
      processMap_.put("getRecommendationIds", new getRecommendationIds());
      processMap_.put("getRoom", new getRoom());
      processMap_.put("getRSAKeyInfo", new getRSAKeyInfo());
      processMap_.put("getServerTime", new getServerTime());
      processMap_.put("getSessions", new getSessions());
      processMap_.put("getSettings", new getSettings());
      processMap_.put("getGroupsV2", new getGroupsV2());
      processMap_.put("getSettingsAttributes", new getSettingsAttributes());
      processMap_.put("getSystemConfiguration", new getSystemConfiguration());
      processMap_.put("getUserTicket", new getUserTicket());
      processMap_.put("getWapInvitation", new getWapInvitation());
      processMap_.put("invalidateUserTicket", new invalidateUserTicket());
      processMap_.put("inviteFriendsBySms", new inviteFriendsBySms());
      processMap_.put("inviteIntoGroup", new inviteIntoGroup());
      processMap_.put("inviteIntoRoom", new inviteIntoRoom());
      processMap_.put("inviteViaEmail", new inviteViaEmail());
      processMap_.put("isIdentityIdentifierAvailable", new isIdentityIdentifierAvailable());
      processMap_.put("isUseridAvailable", new isUseridAvailable());
      processMap_.put("kickoutFromGroup", new kickoutFromGroup());
      processMap_.put("reissueGroupTicket", new reissueGroupTicket());
      processMap_.put("findGroupByTicket", new findGroupByTicket());
      processMap_.put("leaveGroup", new leaveGroup());
      processMap_.put("leaveRoom", new leaveRoom());
      processMap_.put("loginWithIdentityCredential", new loginWithIdentityCredential());
      processMap_.put("loginWithIdentityCredentialForCertificate", new loginWithIdentityCredentialForCertificate());
      processMap_.put("loginWithVerifier", new loginWithVerifier());
      processMap_.put("loginWithVerifierForCerificate", new loginWithVerifierForCerificate());
      processMap_.put("loginWithVerifierForCertificate", new loginWithVerifierForCertificate());
      processMap_.put("logout", new logout());
      processMap_.put("logoutSession", new logoutSession());
      processMap_.put("noop", new noop());
      processMap_.put("notifiedRedirect", new notifiedRedirect());
      processMap_.put("notifyBuddyOnAir", new notifyBuddyOnAir());
      processMap_.put("notifyIndividualEvent", new notifyIndividualEvent());
      processMap_.put("notifyInstalled", new notifyInstalled());
      processMap_.put("notifyRegistrationComplete", new notifyRegistrationComplete());
      processMap_.put("notifySleep", new notifySleep());
      processMap_.put("notifyUpdated", new notifyUpdated());
      processMap_.put("openProximityMatch", new openProximityMatch());
      processMap_.put("registerBuddyUser", new registerBuddyUser());
      processMap_.put("registerBuddyUserid", new registerBuddyUserid());
      processMap_.put("registerDevice", new registerDevice());
      processMap_.put("registerDeviceWithIdentityCredential", new registerDeviceWithIdentityCredential());
      processMap_.put("registerDeviceWithoutPhoneNumber", new registerDeviceWithoutPhoneNumber());
      processMap_.put("registerDeviceWithoutPhoneNumberWithIdentityCredential", new registerDeviceWithoutPhoneNumberWithIdentityCredential());
      processMap_.put("registerUserid", new registerUserid());
      processMap_.put("registerWapDevice", new registerWapDevice());
      processMap_.put("registerWithExistingSnsIdAndIdentityCredential", new registerWithExistingSnsIdAndIdentityCredential());
      processMap_.put("registerWithSnsId", new registerWithSnsId());
      processMap_.put("registerWithSnsIdAndIdentityCredential", new registerWithSnsIdAndIdentityCredential());
      processMap_.put("reissueDeviceCredential", new reissueDeviceCredential());
      processMap_.put("reissueUserTicket", new reissueUserTicket());
      processMap_.put("getMessageReadRange", new getMessageReadRange());
      processMap_.put("rejectGroupInvitation", new rejectGroupInvitation());
      processMap_.put("releaseSession", new releaseSession());
      processMap_.put("removeAllMessages", new removeAllMessages());
      processMap_.put("removeBuddyLocation", new removeBuddyLocation());
      processMap_.put("removeMessage", new removeMessage());
      processMap_.put("makeUserAddMyselfAsContact", new makeUserAddMyselfAsContact());
      processMap_.put("removeMessageFromMyHome", new removeMessageFromMyHome());
      processMap_.put("removeSnsId", new removeSnsId());
      processMap_.put("report", new report());
      processMap_.put("reportContacts", new reportContacts());
      processMap_.put("reportGroups", new reportGroups());
      processMap_.put("reportProfile", new reportProfile());
      processMap_.put("reportRooms", new reportRooms());
      processMap_.put("findAndAddContactByMetaTag", new findAndAddContactByMetaTag());
      processMap_.put("reportSettings", new reportSettings());
      processMap_.put("reportSpam", new reportSpam());
      processMap_.put("reportSpammer", new reportSpammer());
      processMap_.put("requestAccountPasswordReset", new requestAccountPasswordReset());
      processMap_.put("requestEmailConfirmation", new requestEmailConfirmation());
      processMap_.put("requestIdentityUnbind", new requestIdentityUnbind());
      processMap_.put("resendEmailConfirmation", new resendEmailConfirmation());
      processMap_.put("resendPinCode", new resendPinCode());
      processMap_.put("resendPinCodeBySMS", new resendPinCodeBySMS());
      processMap_.put("sendChatChecked", new sendChatChecked());
      processMap_.put("sendMessageAwaitCommit", new sendMessageAwaitCommit());
      processMap_.put("sendChatRemoved", new sendChatRemoved());
      processMap_.put("sendContentPreviewUpdated", new sendContentPreviewUpdated());
      processMap_.put("sendContentReceipt", new sendContentReceipt());
      processMap_.put("sendDummyPush", new sendDummyPush());
      processMap_.put("removeE2EEPublicKey", new removeE2EEPublicKey());
      processMap_.put("negotiateE2EEPublicKey", new negotiateE2EEPublicKey());
      processMap_.put("getE2EEPublicKey", new getE2EEPublicKey());
      processMap_.put("requestE2EEKeyExchange", new requestE2EEKeyExchange());
      processMap_.put("getLastE2EEPublicKeys", new getLastE2EEPublicKeys());
      processMap_.put("registerE2EEPublicKey", new registerE2EEPublicKey());
      processMap_.put("getE2EEPublicKeys", new getE2EEPublicKeys());
      processMap_.put("getE2EEPublicKeysEx", new getE2EEPublicKeysEx());
      processMap_.put("getReadMessageOpsInBulk", new getReadMessageOpsInBulk());
      processMap_.put("sendEvent", new sendEvent());
      processMap_.put("sendMessage", new sendMessage());
      processMap_.put("sendMessageIgnored", new sendMessageIgnored());
      processMap_.put("sendMessageReceipt", new sendMessageReceipt());
      processMap_.put("findContactByMetaTag", new findContactByMetaTag());
      processMap_.put("sendMessageToMyHome", new sendMessageToMyHome());
      processMap_.put("setBuddyLocation", new setBuddyLocation());
      processMap_.put("setIdentityCredential", new setIdentityCredential());
      processMap_.put("setNotificationsEnabled", new setNotificationsEnabled());
      processMap_.put("startUpdateVerification", new startUpdateVerification());
      processMap_.put("startVerification", new startVerification());
      processMap_.put("updateGroupPreferenceAttribute", new updateGroupPreferenceAttribute());
      processMap_.put("createRoomV2", new createRoomV2());
      processMap_.put("storeUpdateProfileAttribute", new storeUpdateProfileAttribute());
      processMap_.put("syncContactBySnsIds", new syncContactBySnsIds());
      processMap_.put("syncContacts", new syncContacts());
      processMap_.put("trySendMessage", new trySendMessage());
      processMap_.put("getNextMessagesV2", new getNextMessagesV2());
      processMap_.put("getMessageBoxCompactWrapUpV2", new getMessageBoxCompactWrapUpV2());
      processMap_.put("getRecentMessagesV2", new getRecentMessagesV2());
      processMap_.put("validateContactsOnBot", new validateContactsOnBot());
      processMap_.put("tryFriendRequest", new tryFriendRequest());
      processMap_.put("unblockContact", new unblockContact());
      processMap_.put("unblockRecommendation", new unblockRecommendation());
      processMap_.put("unregisterUserAndDevice", new unregisterUserAndDevice());
      processMap_.put("updateApnsDeviceToken", new updateApnsDeviceToken());
      processMap_.put("updateBuddySetting", new updateBuddySetting());
      processMap_.put("updateC2DMRegistrationId", new updateC2DMRegistrationId());
      processMap_.put("updateContactSetting", new updateContactSetting());
      processMap_.put("updateCustomModeSettings", new updateCustomModeSettings());
      processMap_.put("updateDeviceInfo", new updateDeviceInfo());
      processMap_.put("updateGroup", new updateGroup());
      processMap_.put("updateNotificationToken", new updateNotificationToken());
      processMap_.put("updateNotificationTokenWithBytes", new updateNotificationTokenWithBytes());
      processMap_.put("updateProfile", new updateProfile());
      processMap_.put("updateProfileAttribute", new updateProfileAttribute());
      processMap_.put("updateRegion", new updateRegion());
      processMap_.put("updateSettings", new updateSettings());
      processMap_.put("updateSettings2", new updateSettings2());
      processMap_.put("updateSettingsAttribute", new updateSettingsAttribute());
      processMap_.put("updateSettingsAttributes", new updateSettingsAttributes());
      processMap_.put("verifyIdentityCredential", new verifyIdentityCredential());
      processMap_.put("verifyIdentityCredentialWithResult", new verifyIdentityCredentialWithResult());
      processMap_.put("verifyPhone", new verifyPhone());
      processMap_.put("verifyQrcode", new verifyQrcode());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final Hashtable processMap_ = new Hashtable();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = (ProcessFunction)processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class getChatRoomAnnouncementsBulk implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getChatRoomAnnouncementsBulk_args args = new getChatRoomAnnouncementsBulk_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getChatRoomAnnouncementsBulk", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getChatRoomAnnouncementsBulk_result result = new getChatRoomAnnouncementsBulk_result();
        try {
          result.success = iface_.getChatRoomAnnouncementsBulk(args.chatRoomMids);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getChatRoomAnnouncementsBulk");
          oprot.writeMessageBegin(new TMessage("getChatRoomAnnouncementsBulk", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getChatRoomAnnouncementsBulk", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getChatRoomAnnouncements implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getChatRoomAnnouncements_args args = new getChatRoomAnnouncements_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getChatRoomAnnouncements", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getChatRoomAnnouncements_result result = new getChatRoomAnnouncements_result();
        try {
          result.success = iface_.getChatRoomAnnouncements(args.chatRoomMid);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getChatRoomAnnouncements");
          oprot.writeMessageBegin(new TMessage("getChatRoomAnnouncements", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getChatRoomAnnouncements", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class createChatRoomAnnouncement implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        createChatRoomAnnouncement_args args = new createChatRoomAnnouncement_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("createChatRoomAnnouncement", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        createChatRoomAnnouncement_result result = new createChatRoomAnnouncement_result();
        try {
          result.success = iface_.createChatRoomAnnouncement(args.reqSeq, args.chatRoomMid, args.type, args.contents);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing createChatRoomAnnouncement");
          oprot.writeMessageBegin(new TMessage("createChatRoomAnnouncement", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("createChatRoomAnnouncement", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class removeChatRoomAnnouncement implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        removeChatRoomAnnouncement_args args = new removeChatRoomAnnouncement_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("removeChatRoomAnnouncement", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        removeChatRoomAnnouncement_result result = new removeChatRoomAnnouncement_result();
        try {
          iface_.removeChatRoomAnnouncement(args.reqSeq, args.chatRoomMid, args.announcementSeq);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing removeChatRoomAnnouncement");
          oprot.writeMessageBegin(new TMessage("removeChatRoomAnnouncement", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("removeChatRoomAnnouncement", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class unsendMessage implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        unsendMessage_args args = new unsendMessage_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("unsendMessage", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        unsendMessage_result result = new unsendMessage_result();
        try {
          iface_.unsendMessage(args.seq, args.messageId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing unsendMessage");
          oprot.writeMessageBegin(new TMessage("unsendMessage", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("unsendMessage", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getGroupWithoutMembers implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getGroupWithoutMembers_args args = new getGroupWithoutMembers_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getGroupWithoutMembers", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getGroupWithoutMembers_result result = new getGroupWithoutMembers_result();
        try {
          result.success = iface_.getGroupWithoutMembers(args.groupId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getGroupWithoutMembers");
          oprot.writeMessageBegin(new TMessage("getGroupWithoutMembers", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getGroupWithoutMembers", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class requestResendMessage implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        requestResendMessage_args args = new requestResendMessage_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("requestResendMessage", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        requestResendMessage_result result = new requestResendMessage_result();
        try {
          iface_.requestResendMessage(args.reqSeq, args.senderMid, args.messageId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing requestResendMessage");
          oprot.writeMessageBegin(new TMessage("requestResendMessage", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("requestResendMessage", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class respondResendMessage implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        respondResendMessage_args args = new respondResendMessage_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("respondResendMessage", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        respondResendMessage_result result = new respondResendMessage_result();
        try {
          iface_.respondResendMessage(args.reqSeq, args.receiverMid, args.originalMessageId, args.resendMessage, args.errorCode);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing respondResendMessage");
          oprot.writeMessageBegin(new TMessage("respondResendMessage", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("respondResendMessage", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class acceptGroupInvitation implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        acceptGroupInvitation_args args = new acceptGroupInvitation_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("acceptGroupInvitation", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        acceptGroupInvitation_result result = new acceptGroupInvitation_result();
        try {
          iface_.acceptGroupInvitation(args.reqSeq, args.groupId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing acceptGroupInvitation");
          oprot.writeMessageBegin(new TMessage("acceptGroupInvitation", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("acceptGroupInvitation", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class acceptGroupInvitationByTicket implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        acceptGroupInvitationByTicket_args args = new acceptGroupInvitationByTicket_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("acceptGroupInvitationByTicket", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        acceptGroupInvitationByTicket_result result = new acceptGroupInvitationByTicket_result();
        try {
          iface_.acceptGroupInvitationByTicket(args.reqSeq, args.GroupMid, args.ticketId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing acceptGroupInvitationByTicket");
          oprot.writeMessageBegin(new TMessage("acceptGroupInvitationByTicket", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("acceptGroupInvitationByTicket", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class acceptProximityMatches implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        acceptProximityMatches_args args = new acceptProximityMatches_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("acceptProximityMatches", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        acceptProximityMatches_result result = new acceptProximityMatches_result();
        try {
          iface_.acceptProximityMatches(args.sessionId, args.ids);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing acceptProximityMatches");
          oprot.writeMessageBegin(new TMessage("acceptProximityMatches", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("acceptProximityMatches", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class acquireCallRoute implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        acquireCallRoute_args args = new acquireCallRoute_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("acquireCallRoute", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        acquireCallRoute_result result = new acquireCallRoute_result();
        try {
          result.success = iface_.acquireCallRoute(args.to);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing acquireCallRoute");
          oprot.writeMessageBegin(new TMessage("acquireCallRoute", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("acquireCallRoute", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class acquireCallTicket implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        acquireCallTicket_args args = new acquireCallTicket_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("acquireCallTicket", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        acquireCallTicket_result result = new acquireCallTicket_result();
        try {
          result.success = iface_.acquireCallTicket(args.to);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing acquireCallTicket");
          oprot.writeMessageBegin(new TMessage("acquireCallTicket", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("acquireCallTicket", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class acquireEncryptedAccessToken implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        acquireEncryptedAccessToken_args args = new acquireEncryptedAccessToken_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("acquireEncryptedAccessToken", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        acquireEncryptedAccessToken_result result = new acquireEncryptedAccessToken_result();
        try {
          result.success = iface_.acquireEncryptedAccessToken(args.featureType);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing acquireEncryptedAccessToken");
          oprot.writeMessageBegin(new TMessage("acquireEncryptedAccessToken", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("acquireEncryptedAccessToken", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class addSnsId implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        addSnsId_args args = new addSnsId_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("addSnsId", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        addSnsId_result result = new addSnsId_result();
        try {
          result.success = iface_.addSnsId(args.snsIdType, args.snsAccessToken);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing addSnsId");
          oprot.writeMessageBegin(new TMessage("addSnsId", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("addSnsId", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class blockContact implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        blockContact_args args = new blockContact_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("blockContact", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        blockContact_result result = new blockContact_result();
        try {
          iface_.blockContact(args.reqSeq, args.id);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing blockContact");
          oprot.writeMessageBegin(new TMessage("blockContact", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("blockContact", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class blockRecommendation implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        blockRecommendation_args args = new blockRecommendation_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("blockRecommendation", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        blockRecommendation_result result = new blockRecommendation_result();
        try {
          iface_.blockRecommendation(args.reqSeq, args.id);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing blockRecommendation");
          oprot.writeMessageBegin(new TMessage("blockRecommendation", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("blockRecommendation", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class cancelGroupInvitation implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        cancelGroupInvitation_args args = new cancelGroupInvitation_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("cancelGroupInvitation", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        cancelGroupInvitation_result result = new cancelGroupInvitation_result();
        try {
          iface_.cancelGroupInvitation(args.reqSeq, args.groupId, args.contactIds);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing cancelGroupInvitation");
          oprot.writeMessageBegin(new TMessage("cancelGroupInvitation", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("cancelGroupInvitation", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class changeVerificationMethod implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        changeVerificationMethod_args args = new changeVerificationMethod_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("changeVerificationMethod", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        changeVerificationMethod_result result = new changeVerificationMethod_result();
        try {
          result.success = iface_.changeVerificationMethod(args.sessionId, args.method);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing changeVerificationMethod");
          oprot.writeMessageBegin(new TMessage("changeVerificationMethod", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("changeVerificationMethod", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class clearIdentityCredential implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        clearIdentityCredential_args args = new clearIdentityCredential_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("clearIdentityCredential", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        clearIdentityCredential_result result = new clearIdentityCredential_result();
        try {
          iface_.clearIdentityCredential();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing clearIdentityCredential");
          oprot.writeMessageBegin(new TMessage("clearIdentityCredential", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("clearIdentityCredential", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class clearMessageBox implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        clearMessageBox_args args = new clearMessageBox_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("clearMessageBox", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        clearMessageBox_result result = new clearMessageBox_result();
        try {
          iface_.clearMessageBox(args.channelId, args.messageBoxId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing clearMessageBox");
          oprot.writeMessageBegin(new TMessage("clearMessageBox", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("clearMessageBox", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class closeProximityMatch implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        closeProximityMatch_args args = new closeProximityMatch_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("closeProximityMatch", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        closeProximityMatch_result result = new closeProximityMatch_result();
        try {
          iface_.closeProximityMatch(args.sessionId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing closeProximityMatch");
          oprot.writeMessageBegin(new TMessage("closeProximityMatch", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("closeProximityMatch", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class commitSendMessage implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        commitSendMessage_args args = new commitSendMessage_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("commitSendMessage", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        commitSendMessage_result result = new commitSendMessage_result();
        try {
          result.success = iface_.commitSendMessage(args.seq, args.messageId, args.receiverMids);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing commitSendMessage");
          oprot.writeMessageBegin(new TMessage("commitSendMessage", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("commitSendMessage", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class commitSendMessages implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        commitSendMessages_args args = new commitSendMessages_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("commitSendMessages", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        commitSendMessages_result result = new commitSendMessages_result();
        try {
          result.success = iface_.commitSendMessages(args.seq, args.messageIds, args.receiverMids);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing commitSendMessages");
          oprot.writeMessageBegin(new TMessage("commitSendMessages", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("commitSendMessages", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class commitUpdateProfile implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        commitUpdateProfile_args args = new commitUpdateProfile_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("commitUpdateProfile", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        commitUpdateProfile_result result = new commitUpdateProfile_result();
        try {
          result.success = iface_.commitUpdateProfile(args.seq, args.attrs, args.receiverMids);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing commitUpdateProfile");
          oprot.writeMessageBegin(new TMessage("commitUpdateProfile", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("commitUpdateProfile", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class confirmEmail implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        confirmEmail_args args = new confirmEmail_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("confirmEmail", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        confirmEmail_result result = new confirmEmail_result();
        try {
          iface_.confirmEmail(args.verifier, args.pinCode);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing confirmEmail");
          oprot.writeMessageBegin(new TMessage("confirmEmail", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("confirmEmail", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class createGroup implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        createGroup_args args = new createGroup_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("createGroup", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        createGroup_result result = new createGroup_result();
        try {
          result.success = iface_.createGroup(args.seq, args.name, args.contactIds);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing createGroup");
          oprot.writeMessageBegin(new TMessage("createGroup", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("createGroup", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class createQrcodeBase64Image implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        createQrcodeBase64Image_args args = new createQrcodeBase64Image_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("createQrcodeBase64Image", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        createQrcodeBase64Image_result result = new createQrcodeBase64Image_result();
        try {
          result.success = iface_.createQrcodeBase64Image(args.url, args.characterSet, args.imageSize, args.x, args.y, args.width, args.height);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing createQrcodeBase64Image");
          oprot.writeMessageBegin(new TMessage("createQrcodeBase64Image", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("createQrcodeBase64Image", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class createRoom implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        createRoom_args args = new createRoom_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("createRoom", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        createRoom_result result = new createRoom_result();
        try {
          result.success = iface_.createRoom(args.reqSeq, args.contactIds);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing createRoom");
          oprot.writeMessageBegin(new TMessage("createRoom", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("createRoom", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class createSession implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        createSession_args args = new createSession_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("createSession", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        createSession_result result = new createSession_result();
        try {
          result.success = iface_.createSession();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing createSession");
          oprot.writeMessageBegin(new TMessage("createSession", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("createSession", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class fetchAnnouncements implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        fetchAnnouncements_args args = new fetchAnnouncements_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("fetchAnnouncements", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        fetchAnnouncements_result result = new fetchAnnouncements_result();
        try {
          result.success = iface_.fetchAnnouncements(args.lastFetchedIndex);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing fetchAnnouncements");
          oprot.writeMessageBegin(new TMessage("fetchAnnouncements", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("fetchAnnouncements", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class fetchMessages implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        fetchMessages_args args = new fetchMessages_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("fetchMessages", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        fetchMessages_result result = new fetchMessages_result();
        try {
          result.success = iface_.fetchMessages(args.localTs, args.count);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing fetchMessages");
          oprot.writeMessageBegin(new TMessage("fetchMessages", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("fetchMessages", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class fetchOperations implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        fetchOperations_args args = new fetchOperations_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("fetchOperations", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        fetchOperations_result result = new fetchOperations_result();
        try {
          result.success = iface_.fetchOperations(args.localRev, args.count);
        } catch (ShouldSyncException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing fetchOperations");
          oprot.writeMessageBegin(new TMessage("fetchOperations", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("fetchOperations", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class fetchOps implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        fetchOps_args args = new fetchOps_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("fetchOps", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        fetchOps_result result = new fetchOps_result();
        try {
          result.success = iface_.fetchOps(args.localRev, args.count, args.globalRev, args.individualRev);
        } catch (ShouldSyncException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing fetchOps");
          oprot.writeMessageBegin(new TMessage("fetchOps", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("fetchOps", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class findAndAddContactsByEmail implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        findAndAddContactsByEmail_args args = new findAndAddContactsByEmail_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("findAndAddContactsByEmail", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        findAndAddContactsByEmail_result result = new findAndAddContactsByEmail_result();
        try {
          result.success = iface_.findAndAddContactsByEmail(args.reqSeq, args.emails);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findAndAddContactsByEmail");
          oprot.writeMessageBegin(new TMessage("findAndAddContactsByEmail", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("findAndAddContactsByEmail", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class findAndAddContactsByMid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        findAndAddContactsByMid_args args = new findAndAddContactsByMid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("findAndAddContactsByMid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        findAndAddContactsByMid_result result = new findAndAddContactsByMid_result();
        try {
          result.success = iface_.findAndAddContactsByMid(args.reqSeq, args.mid, args.type, args.reference);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findAndAddContactsByMid");
          oprot.writeMessageBegin(new TMessage("findAndAddContactsByMid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("findAndAddContactsByMid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class findGroupByTicketV2 implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        findGroupByTicketV2_args args = new findGroupByTicketV2_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("findGroupByTicketV2", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        findGroupByTicketV2_result result = new findGroupByTicketV2_result();
        try {
          result.success = iface_.findGroupByTicketV2(args.ticketId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findGroupByTicketV2");
          oprot.writeMessageBegin(new TMessage("findGroupByTicketV2", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("findGroupByTicketV2", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class findAndAddContactsByPhone implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        findAndAddContactsByPhone_args args = new findAndAddContactsByPhone_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("findAndAddContactsByPhone", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        findAndAddContactsByPhone_result result = new findAndAddContactsByPhone_result();
        try {
          result.success = iface_.findAndAddContactsByPhone(args.reqSeq, args.phones);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findAndAddContactsByPhone");
          oprot.writeMessageBegin(new TMessage("findAndAddContactsByPhone", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("findAndAddContactsByPhone", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getFriendRequests implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getFriendRequests_args args = new getFriendRequests_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getFriendRequests", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getFriendRequests_result result = new getFriendRequests_result();
        try {
          result.success = iface_.getFriendRequests(args.direction, args.lastSeenSeqId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getFriendRequests");
          oprot.writeMessageBegin(new TMessage("getFriendRequests", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getFriendRequests", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class removeFriendRequest implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        removeFriendRequest_args args = new removeFriendRequest_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("removeFriendRequest", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        removeFriendRequest_result result = new removeFriendRequest_result();
        try {
          iface_.removeFriendRequest(args.direction, args.midOrEMid);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing removeFriendRequest");
          oprot.writeMessageBegin(new TMessage("removeFriendRequest", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("removeFriendRequest", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class findAndAddContactsByUserid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        findAndAddContactsByUserid_args args = new findAndAddContactsByUserid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("findAndAddContactsByUserid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        findAndAddContactsByUserid_result result = new findAndAddContactsByUserid_result();
        try {
          result.success = iface_.findAndAddContactsByUserid(args.reqSeq, args.userid);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findAndAddContactsByUserid");
          oprot.writeMessageBegin(new TMessage("findAndAddContactsByUserid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("findAndAddContactsByUserid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class findContactByUserid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        findContactByUserid_args args = new findContactByUserid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("findContactByUserid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        findContactByUserid_result result = new findContactByUserid_result();
        try {
          result.success = iface_.findContactByUserid(args.userid);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findContactByUserid");
          oprot.writeMessageBegin(new TMessage("findContactByUserid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("findContactByUserid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class findContactByUserTicket implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        findContactByUserTicket_args args = new findContactByUserTicket_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("findContactByUserTicket", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        findContactByUserTicket_result result = new findContactByUserTicket_result();
        try {
          result.success = iface_.findContactByUserTicket(args.ticketIdWithTag);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findContactByUserTicket");
          oprot.writeMessageBegin(new TMessage("findContactByUserTicket", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("findContactByUserTicket", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class findContactsByEmail implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        findContactsByEmail_args args = new findContactsByEmail_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("findContactsByEmail", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        findContactsByEmail_result result = new findContactsByEmail_result();
        try {
          result.success = iface_.findContactsByEmail(args.emails);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findContactsByEmail");
          oprot.writeMessageBegin(new TMessage("findContactsByEmail", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("findContactsByEmail", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class findContactsByPhone implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        findContactsByPhone_args args = new findContactsByPhone_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("findContactsByPhone", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        findContactsByPhone_result result = new findContactsByPhone_result();
        try {
          result.success = iface_.findContactsByPhone(args.phones);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findContactsByPhone");
          oprot.writeMessageBegin(new TMessage("findContactsByPhone", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("findContactsByPhone", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class findSnsIdUserStatus implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        findSnsIdUserStatus_args args = new findSnsIdUserStatus_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("findSnsIdUserStatus", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        findSnsIdUserStatus_result result = new findSnsIdUserStatus_result();
        try {
          result.success = iface_.findSnsIdUserStatus(args.snsIdType, args.snsAccessToken, args.udidHash);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findSnsIdUserStatus");
          oprot.writeMessageBegin(new TMessage("findSnsIdUserStatus", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("findSnsIdUserStatus", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class finishUpdateVerification implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        finishUpdateVerification_args args = new finishUpdateVerification_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("finishUpdateVerification", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        finishUpdateVerification_result result = new finishUpdateVerification_result();
        try {
          iface_.finishUpdateVerification(args.sessionId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing finishUpdateVerification");
          oprot.writeMessageBegin(new TMessage("finishUpdateVerification", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("finishUpdateVerification", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class generateUserTicket implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        generateUserTicket_args args = new generateUserTicket_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("generateUserTicket", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        generateUserTicket_result result = new generateUserTicket_result();
        try {
          result.success = iface_.generateUserTicket(args.expirationTime, args.maxUseCount);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing generateUserTicket");
          oprot.writeMessageBegin(new TMessage("generateUserTicket", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("generateUserTicket", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class destroyMessage implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        destroyMessage_args args = new destroyMessage_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("destroyMessage", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        destroyMessage_result result = new destroyMessage_result();
        try {
          iface_.destroyMessage(args.seq, args.chatId, args.messageId, args.sessionId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing destroyMessage");
          oprot.writeMessageBegin(new TMessage("destroyMessage", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("destroyMessage", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getAcceptedProximityMatches implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getAcceptedProximityMatches_args args = new getAcceptedProximityMatches_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getAcceptedProximityMatches", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getAcceptedProximityMatches_result result = new getAcceptedProximityMatches_result();
        try {
          result.success = iface_.getAcceptedProximityMatches(args.sessionId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getAcceptedProximityMatches");
          oprot.writeMessageBegin(new TMessage("getAcceptedProximityMatches", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getAcceptedProximityMatches", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getActiveBuddySubscriberIds implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getActiveBuddySubscriberIds_args args = new getActiveBuddySubscriberIds_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getActiveBuddySubscriberIds", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getActiveBuddySubscriberIds_result result = new getActiveBuddySubscriberIds_result();
        try {
          result.success = iface_.getActiveBuddySubscriberIds();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getActiveBuddySubscriberIds");
          oprot.writeMessageBegin(new TMessage("getActiveBuddySubscriberIds", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getActiveBuddySubscriberIds", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getAllContactIds implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getAllContactIds_args args = new getAllContactIds_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getAllContactIds", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getAllContactIds_result result = new getAllContactIds_result();
        try {
          result.success = iface_.getAllContactIds();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getAllContactIds");
          oprot.writeMessageBegin(new TMessage("getAllContactIds", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getAllContactIds", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getAuthQrcode implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getAuthQrcode_args args = new getAuthQrcode_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getAuthQrcode", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getAuthQrcode_result result = new getAuthQrcode_result();
        try {
          result.success = iface_.getAuthQrcode(args.keepLoggedIn, args.systemName);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getAuthQrcode");
          oprot.writeMessageBegin(new TMessage("getAuthQrcode", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getAuthQrcode", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getBlockedContactIds implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getBlockedContactIds_args args = new getBlockedContactIds_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getBlockedContactIds", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getBlockedContactIds_result result = new getBlockedContactIds_result();
        try {
          result.success = iface_.getBlockedContactIds();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getBlockedContactIds");
          oprot.writeMessageBegin(new TMessage("getBlockedContactIds", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getBlockedContactIds", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class registerWithPhoneNumber implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        registerWithPhoneNumber_args args = new registerWithPhoneNumber_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("registerWithPhoneNumber", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        registerWithPhoneNumber_result result = new registerWithPhoneNumber_result();
        try {
          result.success = iface_.registerWithPhoneNumber(args.sessionId, args.migrationPincodeSessionId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerWithPhoneNumber");
          oprot.writeMessageBegin(new TMessage("registerWithPhoneNumber", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("registerWithPhoneNumber", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class registerWithPhoneNumberAndPassword implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        registerWithPhoneNumberAndPassword_args args = new registerWithPhoneNumberAndPassword_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("registerWithPhoneNumberAndPassword", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        registerWithPhoneNumberAndPassword_result result = new registerWithPhoneNumberAndPassword_result();
        try {
          result.success = iface_.registerWithPhoneNumberAndPassword(args.sessionId, args.keynm, args.encrypted);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerWithPhoneNumberAndPassword");
          oprot.writeMessageBegin(new TMessage("registerWithPhoneNumberAndPassword", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("registerWithPhoneNumberAndPassword", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getAnalyticsInfo implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getAnalyticsInfo_args args = new getAnalyticsInfo_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getAnalyticsInfo", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getAnalyticsInfo_result result = new getAnalyticsInfo_result();
        try {
          result.success = iface_.getAnalyticsInfo();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getAnalyticsInfo");
          oprot.writeMessageBegin(new TMessage("getAnalyticsInfo", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getAnalyticsInfo", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class reportClientStatistics implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        reportClientStatistics_args args = new reportClientStatistics_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("reportClientStatistics", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        reportClientStatistics_result result = new reportClientStatistics_result();
        try {
          iface_.reportClientStatistics(args.reqSeq, args.category, args.count);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing reportClientStatistics");
          oprot.writeMessageBegin(new TMessage("reportClientStatistics", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("reportClientStatistics", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class verifyPhoneNumberForLogin implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        verifyPhoneNumberForLogin_args args = new verifyPhoneNumberForLogin_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("verifyPhoneNumberForLogin", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        verifyPhoneNumberForLogin_result result = new verifyPhoneNumberForLogin_result();
        try {
          result.success = iface_.verifyPhoneNumberForLogin(args.verifierFromPhone, args.pinCodeForPhone, args.verifierFromLogin);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing verifyPhoneNumberForLogin");
          oprot.writeMessageBegin(new TMessage("verifyPhoneNumberForLogin", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("verifyPhoneNumberForLogin", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class verifyPhoneNumber implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        verifyPhoneNumber_args args = new verifyPhoneNumber_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("verifyPhoneNumber", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        verifyPhoneNumber_result result = new verifyPhoneNumber_result();
        try {
          result.success = iface_.verifyPhoneNumber(args.sessionId, args.pinCode, args.udidHash, args.migrationPincodeSessionId, args.oldUdidHash);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing verifyPhoneNumber");
          oprot.writeMessageBegin(new TMessage("verifyPhoneNumber", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("verifyPhoneNumber", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getBlockedContactIdsByRange implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getBlockedContactIdsByRange_args args = new getBlockedContactIdsByRange_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getBlockedContactIdsByRange", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getBlockedContactIdsByRange_result result = new getBlockedContactIdsByRange_result();
        try {
          result.success = iface_.getBlockedContactIdsByRange(args.start, args.count);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getBlockedContactIdsByRange");
          oprot.writeMessageBegin(new TMessage("getBlockedContactIdsByRange", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getBlockedContactIdsByRange", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getBlockedRecommendationIds implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getBlockedRecommendationIds_args args = new getBlockedRecommendationIds_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getBlockedRecommendationIds", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getBlockedRecommendationIds_result result = new getBlockedRecommendationIds_result();
        try {
          result.success = iface_.getBlockedRecommendationIds();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getBlockedRecommendationIds");
          oprot.writeMessageBegin(new TMessage("getBlockedRecommendationIds", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getBlockedRecommendationIds", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getBuddyBlockerIds implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getBuddyBlockerIds_args args = new getBuddyBlockerIds_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getBuddyBlockerIds", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getBuddyBlockerIds_result result = new getBuddyBlockerIds_result();
        try {
          result.success = iface_.getBuddyBlockerIds();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getBuddyBlockerIds");
          oprot.writeMessageBegin(new TMessage("getBuddyBlockerIds", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getBuddyBlockerIds", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getBuddyLocation implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getBuddyLocation_args args = new getBuddyLocation_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getBuddyLocation", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getBuddyLocation_result result = new getBuddyLocation_result();
        try {
          result.success = iface_.getBuddyLocation(args.mid, args.index);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getBuddyLocation");
          oprot.writeMessageBegin(new TMessage("getBuddyLocation", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getBuddyLocation", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getCompactContactsModifiedSince implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getCompactContactsModifiedSince_args args = new getCompactContactsModifiedSince_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getCompactContactsModifiedSince", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getCompactContactsModifiedSince_result result = new getCompactContactsModifiedSince_result();
        try {
          result.success = iface_.getCompactContactsModifiedSince(args.timestamp);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getCompactContactsModifiedSince");
          oprot.writeMessageBegin(new TMessage("getCompactContactsModifiedSince", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getCompactContactsModifiedSince", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getCompactGroup implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getCompactGroup_args args = new getCompactGroup_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getCompactGroup", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getCompactGroup_result result = new getCompactGroup_result();
        try {
          result.success = iface_.getCompactGroup(args.groupId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getCompactGroup");
          oprot.writeMessageBegin(new TMessage("getCompactGroup", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getCompactGroup", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getCompactRoom implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getCompactRoom_args args = new getCompactRoom_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getCompactRoom", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getCompactRoom_result result = new getCompactRoom_result();
        try {
          result.success = iface_.getCompactRoom(args.roomId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getCompactRoom");
          oprot.writeMessageBegin(new TMessage("getCompactRoom", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getCompactRoom", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getContact implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getContact_args args = new getContact_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getContact", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getContact_result result = new getContact_result();
        try {
          result.success = iface_.getContact(args.id);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getContact");
          oprot.writeMessageBegin(new TMessage("getContact", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getContact", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getContacts implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getContacts_args args = new getContacts_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getContacts", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getContacts_result result = new getContacts_result();
        try {
          result.success = iface_.getContacts(args.ids);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getContacts");
          oprot.writeMessageBegin(new TMessage("getContacts", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getContacts", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getContactWithFriendRequestStatus implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getContactWithFriendRequestStatus_args args = new getContactWithFriendRequestStatus_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getContactWithFriendRequestStatus", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getContactWithFriendRequestStatus_result result = new getContactWithFriendRequestStatus_result();
        try {
          result.success = iface_.getContactWithFriendRequestStatus(args.id);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getContactWithFriendRequestStatus");
          oprot.writeMessageBegin(new TMessage("getContactWithFriendRequestStatus", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getContactWithFriendRequestStatus", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getCountryWithRequestIp implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getCountryWithRequestIp_args args = new getCountryWithRequestIp_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getCountryWithRequestIp", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getCountryWithRequestIp_result result = new getCountryWithRequestIp_result();
        try {
          result.success = iface_.getCountryWithRequestIp();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getCountryWithRequestIp");
          oprot.writeMessageBegin(new TMessage("getCountryWithRequestIp", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getCountryWithRequestIp", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getFavoriteMids implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getFavoriteMids_args args = new getFavoriteMids_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getFavoriteMids", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getFavoriteMids_result result = new getFavoriteMids_result();
        try {
          result.success = iface_.getFavoriteMids();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getFavoriteMids");
          oprot.writeMessageBegin(new TMessage("getFavoriteMids", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getFavoriteMids", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getGroup implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getGroup_args args = new getGroup_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getGroup", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getGroup_result result = new getGroup_result();
        try {
          result.success = iface_.getGroup(args.groupId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getGroup");
          oprot.writeMessageBegin(new TMessage("getGroup", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getGroup", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getGroupIdsInvited implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getGroupIdsInvited_args args = new getGroupIdsInvited_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getGroupIdsInvited", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getGroupIdsInvited_result result = new getGroupIdsInvited_result();
        try {
          result.success = iface_.getGroupIdsInvited();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getGroupIdsInvited");
          oprot.writeMessageBegin(new TMessage("getGroupIdsInvited", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getGroupIdsInvited", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getGroupIdsJoined implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getGroupIdsJoined_args args = new getGroupIdsJoined_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getGroupIdsJoined", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getGroupIdsJoined_result result = new getGroupIdsJoined_result();
        try {
          result.success = iface_.getGroupIdsJoined();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getGroupIdsJoined");
          oprot.writeMessageBegin(new TMessage("getGroupIdsJoined", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getGroupIdsJoined", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getGroups implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getGroups_args args = new getGroups_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getGroups", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getGroups_result result = new getGroups_result();
        try {
          result.success = iface_.getGroups(args.groupIds);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getGroups");
          oprot.writeMessageBegin(new TMessage("getGroups", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getGroups", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getHiddenContactMids implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getHiddenContactMids_args args = new getHiddenContactMids_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getHiddenContactMids", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getHiddenContactMids_result result = new getHiddenContactMids_result();
        try {
          result.success = iface_.getHiddenContactMids();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getHiddenContactMids");
          oprot.writeMessageBegin(new TMessage("getHiddenContactMids", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getHiddenContactMids", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getIdentityIdentifier implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getIdentityIdentifier_args args = new getIdentityIdentifier_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getIdentityIdentifier", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getIdentityIdentifier_result result = new getIdentityIdentifier_result();
        try {
          result.success = iface_.getIdentityIdentifier();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getIdentityIdentifier");
          oprot.writeMessageBegin(new TMessage("getIdentityIdentifier", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getIdentityIdentifier", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getLastAnnouncementIndex implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getLastAnnouncementIndex_args args = new getLastAnnouncementIndex_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getLastAnnouncementIndex", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getLastAnnouncementIndex_result result = new getLastAnnouncementIndex_result();
        try {
          result.success = iface_.getLastAnnouncementIndex();
          result.setSuccessIsSet(true);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getLastAnnouncementIndex");
          oprot.writeMessageBegin(new TMessage("getLastAnnouncementIndex", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getLastAnnouncementIndex", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getLastOpRevision implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getLastOpRevision_args args = new getLastOpRevision_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getLastOpRevision", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getLastOpRevision_result result = new getLastOpRevision_result();
        try {
          result.success = iface_.getLastOpRevision();
          result.setSuccessIsSet(true);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getLastOpRevision");
          oprot.writeMessageBegin(new TMessage("getLastOpRevision", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getLastOpRevision", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getSuggestRevisions implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getSuggestRevisions_args args = new getSuggestRevisions_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getSuggestRevisions", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getSuggestRevisions_result result = new getSuggestRevisions_result();
        try {
          result.success = iface_.getSuggestRevisions();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getSuggestRevisions");
          oprot.writeMessageBegin(new TMessage("getSuggestRevisions", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getSuggestRevisions", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getPreviousMessagesV2WithReadCount implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getPreviousMessagesV2WithReadCount_args args = new getPreviousMessagesV2WithReadCount_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getPreviousMessagesV2WithReadCount", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getPreviousMessagesV2WithReadCount_result result = new getPreviousMessagesV2WithReadCount_result();
        try {
          result.success = iface_.getPreviousMessagesV2WithReadCount(args.messageBoxId, args.endMessageId, args.messagesCount);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getPreviousMessagesV2WithReadCount");
          oprot.writeMessageBegin(new TMessage("getPreviousMessagesV2WithReadCount", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getPreviousMessagesV2WithReadCount", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getMessageBox implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getMessageBox_args args = new getMessageBox_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getMessageBox", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getMessageBox_result result = new getMessageBox_result();
        try {
          result.success = iface_.getMessageBox(args.channelId, args.messageBoxId, args.lastMessagesCount);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getMessageBox");
          oprot.writeMessageBegin(new TMessage("getMessageBox", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getMessageBox", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getMessageBoxCompactWrapUp implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getMessageBoxCompactWrapUp_args args = new getMessageBoxCompactWrapUp_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getMessageBoxCompactWrapUp", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getMessageBoxCompactWrapUp_result result = new getMessageBoxCompactWrapUp_result();
        try {
          result.success = iface_.getMessageBoxCompactWrapUp(args.mid);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getMessageBoxCompactWrapUp");
          oprot.writeMessageBegin(new TMessage("getMessageBoxCompactWrapUp", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getMessageBoxCompactWrapUp", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getMessageBoxCompactWrapUpList implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getMessageBoxCompactWrapUpList_args args = new getMessageBoxCompactWrapUpList_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getMessageBoxCompactWrapUpList", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getMessageBoxCompactWrapUpList_result result = new getMessageBoxCompactWrapUpList_result();
        try {
          result.success = iface_.getMessageBoxCompactWrapUpList(args.start, args.messageBoxCount);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getMessageBoxCompactWrapUpList");
          oprot.writeMessageBegin(new TMessage("getMessageBoxCompactWrapUpList", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getMessageBoxCompactWrapUpList", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getMessageBoxList implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getMessageBoxList_args args = new getMessageBoxList_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getMessageBoxList", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getMessageBoxList_result result = new getMessageBoxList_result();
        try {
          result.success = iface_.getMessageBoxList(args.channelId, args.lastMessagesCount);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getMessageBoxList");
          oprot.writeMessageBegin(new TMessage("getMessageBoxList", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getMessageBoxList", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getMessageBoxListByStatus implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getMessageBoxListByStatus_args args = new getMessageBoxListByStatus_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getMessageBoxListByStatus", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getMessageBoxListByStatus_result result = new getMessageBoxListByStatus_result();
        try {
          result.success = iface_.getMessageBoxListByStatus(args.channelId, args.lastMessagesCount, args.status);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getMessageBoxListByStatus");
          oprot.writeMessageBegin(new TMessage("getMessageBoxListByStatus", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getMessageBoxListByStatus", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getMessageBoxWrapUp implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getMessageBoxWrapUp_args args = new getMessageBoxWrapUp_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getMessageBoxWrapUp", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getMessageBoxWrapUp_result result = new getMessageBoxWrapUp_result();
        try {
          result.success = iface_.getMessageBoxWrapUp(args.mid);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getMessageBoxWrapUp");
          oprot.writeMessageBegin(new TMessage("getMessageBoxWrapUp", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getMessageBoxWrapUp", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getMessageBoxWrapUpList implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getMessageBoxWrapUpList_args args = new getMessageBoxWrapUpList_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getMessageBoxWrapUpList", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getMessageBoxWrapUpList_result result = new getMessageBoxWrapUpList_result();
        try {
          result.success = iface_.getMessageBoxWrapUpList(args.start, args.messageBoxCount);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getMessageBoxWrapUpList");
          oprot.writeMessageBegin(new TMessage("getMessageBoxWrapUpList", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getMessageBoxWrapUpList", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getMessagesBySequenceNumber implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getMessagesBySequenceNumber_args args = new getMessagesBySequenceNumber_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getMessagesBySequenceNumber", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getMessagesBySequenceNumber_result result = new getMessagesBySequenceNumber_result();
        try {
          result.success = iface_.getMessagesBySequenceNumber(args.channelId, args.messageBoxId, args.startSeq, args.endSeq);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getMessagesBySequenceNumber");
          oprot.writeMessageBegin(new TMessage("getMessagesBySequenceNumber", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getMessagesBySequenceNumber", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getNextMessages implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getNextMessages_args args = new getNextMessages_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getNextMessages", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getNextMessages_result result = new getNextMessages_result();
        try {
          result.success = iface_.getNextMessages(args.messageBoxId, args.startSeq, args.messagesCount);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getNextMessages");
          oprot.writeMessageBegin(new TMessage("getNextMessages", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getNextMessages", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getNotificationPolicy implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getNotificationPolicy_args args = new getNotificationPolicy_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getNotificationPolicy", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getNotificationPolicy_result result = new getNotificationPolicy_result();
        try {
          result.success = iface_.getNotificationPolicy(args.carrier);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getNotificationPolicy");
          oprot.writeMessageBegin(new TMessage("getNotificationPolicy", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getNotificationPolicy", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getPreviousMessages implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getPreviousMessages_args args = new getPreviousMessages_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getPreviousMessages", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getPreviousMessages_result result = new getPreviousMessages_result();
        try {
          result.success = iface_.getPreviousMessages(args.messageBoxId, args.endSeq, args.messagesCount);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getPreviousMessages");
          oprot.writeMessageBegin(new TMessage("getPreviousMessages", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getPreviousMessages", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getProfile implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getProfile_args args = new getProfile_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getProfile", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getProfile_result result = new getProfile_result();
        try {
          result.success = iface_.getProfile();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getProfile");
          oprot.writeMessageBegin(new TMessage("getProfile", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getProfile", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getProximityMatchCandidateList implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getProximityMatchCandidateList_args args = new getProximityMatchCandidateList_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getProximityMatchCandidateList", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getProximityMatchCandidateList_result result = new getProximityMatchCandidateList_result();
        try {
          result.success = iface_.getProximityMatchCandidateList(args.sessionId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getProximityMatchCandidateList");
          oprot.writeMessageBegin(new TMessage("getProximityMatchCandidateList", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getProximityMatchCandidateList", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getProximityMatchCandidates implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getProximityMatchCandidates_args args = new getProximityMatchCandidates_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getProximityMatchCandidates", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getProximityMatchCandidates_result result = new getProximityMatchCandidates_result();
        try {
          result.success = iface_.getProximityMatchCandidates(args.sessionId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getProximityMatchCandidates");
          oprot.writeMessageBegin(new TMessage("getProximityMatchCandidates", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getProximityMatchCandidates", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getRecentMessages implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getRecentMessages_args args = new getRecentMessages_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getRecentMessages", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getRecentMessages_result result = new getRecentMessages_result();
        try {
          result.success = iface_.getRecentMessages(args.messageBoxId, args.messagesCount);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getRecentMessages");
          oprot.writeMessageBegin(new TMessage("getRecentMessages", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getRecentMessages", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getRecommendationIds implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getRecommendationIds_args args = new getRecommendationIds_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getRecommendationIds", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getRecommendationIds_result result = new getRecommendationIds_result();
        try {
          result.success = iface_.getRecommendationIds();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getRecommendationIds");
          oprot.writeMessageBegin(new TMessage("getRecommendationIds", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getRecommendationIds", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getRoom implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getRoom_args args = new getRoom_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getRoom", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getRoom_result result = new getRoom_result();
        try {
          result.success = iface_.getRoom(args.roomId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getRoom");
          oprot.writeMessageBegin(new TMessage("getRoom", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getRoom", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getRSAKeyInfo implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getRSAKeyInfo_args args = new getRSAKeyInfo_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getRSAKeyInfo", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getRSAKeyInfo_result result = new getRSAKeyInfo_result();
        try {
          result.success = iface_.getRSAKeyInfo(args.provider);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getRSAKeyInfo");
          oprot.writeMessageBegin(new TMessage("getRSAKeyInfo", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getRSAKeyInfo", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getServerTime implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getServerTime_args args = new getServerTime_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getServerTime", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getServerTime_result result = new getServerTime_result();
        try {
          result.success = iface_.getServerTime();
          result.setSuccessIsSet(true);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getServerTime");
          oprot.writeMessageBegin(new TMessage("getServerTime", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getServerTime", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getSessions implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getSessions_args args = new getSessions_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getSessions", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getSessions_result result = new getSessions_result();
        try {
          result.success = iface_.getSessions();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getSessions");
          oprot.writeMessageBegin(new TMessage("getSessions", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getSessions", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getSettings implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getSettings_args args = new getSettings_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getSettings", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getSettings_result result = new getSettings_result();
        try {
          result.success = iface_.getSettings();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getSettings");
          oprot.writeMessageBegin(new TMessage("getSettings", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getSettings", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getGroupsV2 implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getGroupsV2_args args = new getGroupsV2_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getGroupsV2", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getGroupsV2_result result = new getGroupsV2_result();
        try {
          result.success = iface_.getGroupsV2(args.groupIds);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getGroupsV2");
          oprot.writeMessageBegin(new TMessage("getGroupsV2", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getGroupsV2", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getSettingsAttributes implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getSettingsAttributes_args args = new getSettingsAttributes_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getSettingsAttributes", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getSettingsAttributes_result result = new getSettingsAttributes_result();
        try {
          result.success = iface_.getSettingsAttributes(args.attrBitset);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getSettingsAttributes");
          oprot.writeMessageBegin(new TMessage("getSettingsAttributes", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getSettingsAttributes", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getSystemConfiguration implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getSystemConfiguration_args args = new getSystemConfiguration_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getSystemConfiguration", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getSystemConfiguration_result result = new getSystemConfiguration_result();
        try {
          result.success = iface_.getSystemConfiguration();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getSystemConfiguration");
          oprot.writeMessageBegin(new TMessage("getSystemConfiguration", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getSystemConfiguration", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getUserTicket implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getUserTicket_args args = new getUserTicket_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getUserTicket", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getUserTicket_result result = new getUserTicket_result();
        try {
          result.success = iface_.getUserTicket();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getUserTicket");
          oprot.writeMessageBegin(new TMessage("getUserTicket", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getUserTicket", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getWapInvitation implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getWapInvitation_args args = new getWapInvitation_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getWapInvitation", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getWapInvitation_result result = new getWapInvitation_result();
        try {
          result.success = iface_.getWapInvitation(args.invitationHash);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getWapInvitation");
          oprot.writeMessageBegin(new TMessage("getWapInvitation", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getWapInvitation", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class invalidateUserTicket implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        invalidateUserTicket_args args = new invalidateUserTicket_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("invalidateUserTicket", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        invalidateUserTicket_result result = new invalidateUserTicket_result();
        try {
          iface_.invalidateUserTicket();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing invalidateUserTicket");
          oprot.writeMessageBegin(new TMessage("invalidateUserTicket", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("invalidateUserTicket", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class inviteFriendsBySms implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        inviteFriendsBySms_args args = new inviteFriendsBySms_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("inviteFriendsBySms", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        inviteFriendsBySms_result result = new inviteFriendsBySms_result();
        try {
          iface_.inviteFriendsBySms(args.phoneNumberList);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing inviteFriendsBySms");
          oprot.writeMessageBegin(new TMessage("inviteFriendsBySms", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("inviteFriendsBySms", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class inviteIntoGroup implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        inviteIntoGroup_args args = new inviteIntoGroup_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("inviteIntoGroup", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        inviteIntoGroup_result result = new inviteIntoGroup_result();
        try {
          iface_.inviteIntoGroup(args.reqSeq, args.groupId, args.contactIds);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing inviteIntoGroup");
          oprot.writeMessageBegin(new TMessage("inviteIntoGroup", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("inviteIntoGroup", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class inviteIntoRoom implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        inviteIntoRoom_args args = new inviteIntoRoom_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("inviteIntoRoom", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        inviteIntoRoom_result result = new inviteIntoRoom_result();
        try {
          iface_.inviteIntoRoom(args.reqSeq, args.roomId, args.contactIds);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing inviteIntoRoom");
          oprot.writeMessageBegin(new TMessage("inviteIntoRoom", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("inviteIntoRoom", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class inviteViaEmail implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        inviteViaEmail_args args = new inviteViaEmail_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("inviteViaEmail", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        inviteViaEmail_result result = new inviteViaEmail_result();
        try {
          iface_.inviteViaEmail(args.reqSeq, args.email, args.name);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing inviteViaEmail");
          oprot.writeMessageBegin(new TMessage("inviteViaEmail", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("inviteViaEmail", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class isIdentityIdentifierAvailable implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        isIdentityIdentifierAvailable_args args = new isIdentityIdentifierAvailable_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("isIdentityIdentifierAvailable", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        isIdentityIdentifierAvailable_result result = new isIdentityIdentifierAvailable_result();
        try {
          result.success = iface_.isIdentityIdentifierAvailable(args.provider, args.identifier);
          result.setSuccessIsSet(true);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing isIdentityIdentifierAvailable");
          oprot.writeMessageBegin(new TMessage("isIdentityIdentifierAvailable", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("isIdentityIdentifierAvailable", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class isUseridAvailable implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        isUseridAvailable_args args = new isUseridAvailable_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("isUseridAvailable", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        isUseridAvailable_result result = new isUseridAvailable_result();
        try {
          result.success = iface_.isUseridAvailable(args.userid);
          result.setSuccessIsSet(true);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing isUseridAvailable");
          oprot.writeMessageBegin(new TMessage("isUseridAvailable", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("isUseridAvailable", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class kickoutFromGroup implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        kickoutFromGroup_args args = new kickoutFromGroup_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("kickoutFromGroup", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        kickoutFromGroup_result result = new kickoutFromGroup_result();
        try {
          iface_.kickoutFromGroup(args.reqSeq, args.groupId, args.contactIds);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing kickoutFromGroup");
          oprot.writeMessageBegin(new TMessage("kickoutFromGroup", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("kickoutFromGroup", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class reissueGroupTicket implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        reissueGroupTicket_args args = new reissueGroupTicket_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("reissueGroupTicket", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        reissueGroupTicket_result result = new reissueGroupTicket_result();
        try {
          result.success = iface_.reissueGroupTicket(args.groupMid);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing reissueGroupTicket");
          oprot.writeMessageBegin(new TMessage("reissueGroupTicket", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("reissueGroupTicket", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class findGroupByTicket implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        findGroupByTicket_args args = new findGroupByTicket_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("findGroupByTicket", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        findGroupByTicket_result result = new findGroupByTicket_result();
        try {
          result.success = iface_.findGroupByTicket(args.ticketId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findGroupByTicket");
          oprot.writeMessageBegin(new TMessage("findGroupByTicket", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("findGroupByTicket", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class leaveGroup implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        leaveGroup_args args = new leaveGroup_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("leaveGroup", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        leaveGroup_result result = new leaveGroup_result();
        try {
          iface_.leaveGroup(args.reqSeq, args.groupId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing leaveGroup");
          oprot.writeMessageBegin(new TMessage("leaveGroup", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("leaveGroup", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class leaveRoom implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        leaveRoom_args args = new leaveRoom_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("leaveRoom", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        leaveRoom_result result = new leaveRoom_result();
        try {
          iface_.leaveRoom(args.reqSeq, args.roomId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing leaveRoom");
          oprot.writeMessageBegin(new TMessage("leaveRoom", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("leaveRoom", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class loginWithIdentityCredential implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        loginWithIdentityCredential_args args = new loginWithIdentityCredential_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("loginWithIdentityCredential", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        loginWithIdentityCredential_result result = new loginWithIdentityCredential_result();
        try {
          result.success = iface_.loginWithIdentityCredential(args.identityProvider, args.identifier, args.password, args.keepLoggedIn, args.accessLocation, args.systemName, args.certificate);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing loginWithIdentityCredential");
          oprot.writeMessageBegin(new TMessage("loginWithIdentityCredential", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("loginWithIdentityCredential", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class loginWithIdentityCredentialForCertificate implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        loginWithIdentityCredentialForCertificate_args args = new loginWithIdentityCredentialForCertificate_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("loginWithIdentityCredentialForCertificate", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        loginWithIdentityCredentialForCertificate_result result = new loginWithIdentityCredentialForCertificate_result();
        try {
          result.success = iface_.loginWithIdentityCredentialForCertificate(args.identityProvider, args.identifier, args.password, args.keepLoggedIn, args.accessLocation, args.systemName, args.certificate);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing loginWithIdentityCredentialForCertificate");
          oprot.writeMessageBegin(new TMessage("loginWithIdentityCredentialForCertificate", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("loginWithIdentityCredentialForCertificate", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class loginWithVerifier implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        loginWithVerifier_args args = new loginWithVerifier_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("loginWithVerifier", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        loginWithVerifier_result result = new loginWithVerifier_result();
        try {
          result.success = iface_.loginWithVerifier(args.verifier);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing loginWithVerifier");
          oprot.writeMessageBegin(new TMessage("loginWithVerifier", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("loginWithVerifier", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class loginWithVerifierForCerificate implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        loginWithVerifierForCerificate_args args = new loginWithVerifierForCerificate_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("loginWithVerifierForCerificate", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        loginWithVerifierForCerificate_result result = new loginWithVerifierForCerificate_result();
        try {
          result.success = iface_.loginWithVerifierForCerificate(args.verifier);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing loginWithVerifierForCerificate");
          oprot.writeMessageBegin(new TMessage("loginWithVerifierForCerificate", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("loginWithVerifierForCerificate", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class loginWithVerifierForCertificate implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        loginWithVerifierForCertificate_args args = new loginWithVerifierForCertificate_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("loginWithVerifierForCertificate", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        loginWithVerifierForCertificate_result result = new loginWithVerifierForCertificate_result();
        try {
          result.success = iface_.loginWithVerifierForCertificate(args.verifier);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing loginWithVerifierForCertificate");
          oprot.writeMessageBegin(new TMessage("loginWithVerifierForCertificate", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("loginWithVerifierForCertificate", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class logout implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        logout_args args = new logout_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("logout", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        logout_result result = new logout_result();
        try {
          iface_.logout();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing logout");
          oprot.writeMessageBegin(new TMessage("logout", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("logout", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class logoutSession implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        logoutSession_args args = new logoutSession_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("logoutSession", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        logoutSession_result result = new logoutSession_result();
        try {
          iface_.logoutSession(args.tokenKey);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing logoutSession");
          oprot.writeMessageBegin(new TMessage("logoutSession", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("logoutSession", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class noop implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        noop_args args = new noop_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("noop", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        noop_result result = new noop_result();
        try {
          iface_.noop();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing noop");
          oprot.writeMessageBegin(new TMessage("noop", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("noop", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class notifiedRedirect implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        notifiedRedirect_args args = new notifiedRedirect_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("notifiedRedirect", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        notifiedRedirect_result result = new notifiedRedirect_result();
        try {
          iface_.notifiedRedirect(args.paramMap);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing notifiedRedirect");
          oprot.writeMessageBegin(new TMessage("notifiedRedirect", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("notifiedRedirect", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class notifyBuddyOnAir implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        notifyBuddyOnAir_args args = new notifyBuddyOnAir_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("notifyBuddyOnAir", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        notifyBuddyOnAir_result result = new notifyBuddyOnAir_result();
        try {
          result.success = iface_.notifyBuddyOnAir(args.seq, args.receiverMids);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing notifyBuddyOnAir");
          oprot.writeMessageBegin(new TMessage("notifyBuddyOnAir", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("notifyBuddyOnAir", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class notifyIndividualEvent implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        notifyIndividualEvent_args args = new notifyIndividualEvent_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("notifyIndividualEvent", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        notifyIndividualEvent_result result = new notifyIndividualEvent_result();
        try {
          iface_.notifyIndividualEvent(args.notificationStatus, args.receiverMids);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing notifyIndividualEvent");
          oprot.writeMessageBegin(new TMessage("notifyIndividualEvent", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("notifyIndividualEvent", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class notifyInstalled implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        notifyInstalled_args args = new notifyInstalled_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("notifyInstalled", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        notifyInstalled_result result = new notifyInstalled_result();
        try {
          iface_.notifyInstalled(args.udidHash, args.applicationTypeWithExtensions);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing notifyInstalled");
          oprot.writeMessageBegin(new TMessage("notifyInstalled", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("notifyInstalled", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class notifyRegistrationComplete implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        notifyRegistrationComplete_args args = new notifyRegistrationComplete_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("notifyRegistrationComplete", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        notifyRegistrationComplete_result result = new notifyRegistrationComplete_result();
        try {
          iface_.notifyRegistrationComplete(args.udidHash, args.applicationTypeWithExtensions);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing notifyRegistrationComplete");
          oprot.writeMessageBegin(new TMessage("notifyRegistrationComplete", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("notifyRegistrationComplete", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class notifySleep implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        notifySleep_args args = new notifySleep_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("notifySleep", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        notifySleep_result result = new notifySleep_result();
        try {
          iface_.notifySleep(args.lastRev, args.badge);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing notifySleep");
          oprot.writeMessageBegin(new TMessage("notifySleep", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("notifySleep", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class notifyUpdated implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        notifyUpdated_args args = new notifyUpdated_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("notifyUpdated", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        notifyUpdated_result result = new notifyUpdated_result();
        try {
          iface_.notifyUpdated(args.lastRev, args.deviceInfo);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing notifyUpdated");
          oprot.writeMessageBegin(new TMessage("notifyUpdated", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("notifyUpdated", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class openProximityMatch implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        openProximityMatch_args args = new openProximityMatch_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("openProximityMatch", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        openProximityMatch_result result = new openProximityMatch_result();
        try {
          result.success = iface_.openProximityMatch(args.location);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing openProximityMatch");
          oprot.writeMessageBegin(new TMessage("openProximityMatch", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("openProximityMatch", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class registerBuddyUser implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        registerBuddyUser_args args = new registerBuddyUser_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("registerBuddyUser", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        registerBuddyUser_result result = new registerBuddyUser_result();
        try {
          result.success = iface_.registerBuddyUser(args.buddyId, args.registrarPassword);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerBuddyUser");
          oprot.writeMessageBegin(new TMessage("registerBuddyUser", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("registerBuddyUser", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class registerBuddyUserid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        registerBuddyUserid_args args = new registerBuddyUserid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("registerBuddyUserid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        registerBuddyUserid_result result = new registerBuddyUserid_result();
        try {
          iface_.registerBuddyUserid(args.seq, args.userid);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerBuddyUserid");
          oprot.writeMessageBegin(new TMessage("registerBuddyUserid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("registerBuddyUserid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class registerDevice implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        registerDevice_args args = new registerDevice_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("registerDevice", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        registerDevice_result result = new registerDevice_result();
        try {
          result.success = iface_.registerDevice(args.sessionId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerDevice");
          oprot.writeMessageBegin(new TMessage("registerDevice", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("registerDevice", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class registerDeviceWithIdentityCredential implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        registerDeviceWithIdentityCredential_args args = new registerDeviceWithIdentityCredential_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("registerDeviceWithIdentityCredential", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        registerDeviceWithIdentityCredential_result result = new registerDeviceWithIdentityCredential_result();
        try {
          result.success = iface_.registerDeviceWithIdentityCredential(args.sessionId, args.provider, args.identifier, args.verifier);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerDeviceWithIdentityCredential");
          oprot.writeMessageBegin(new TMessage("registerDeviceWithIdentityCredential", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("registerDeviceWithIdentityCredential", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class registerDeviceWithoutPhoneNumber implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        registerDeviceWithoutPhoneNumber_args args = new registerDeviceWithoutPhoneNumber_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("registerDeviceWithoutPhoneNumber", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        registerDeviceWithoutPhoneNumber_result result = new registerDeviceWithoutPhoneNumber_result();
        try {
          result.success = iface_.registerDeviceWithoutPhoneNumber(args.region, args.udidHash, args.deviceInfo);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerDeviceWithoutPhoneNumber");
          oprot.writeMessageBegin(new TMessage("registerDeviceWithoutPhoneNumber", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("registerDeviceWithoutPhoneNumber", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class registerDeviceWithoutPhoneNumberWithIdentityCredential implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        registerDeviceWithoutPhoneNumberWithIdentityCredential_args args = new registerDeviceWithoutPhoneNumberWithIdentityCredential_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("registerDeviceWithoutPhoneNumberWithIdentityCredential", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        registerDeviceWithoutPhoneNumberWithIdentityCredential_result result = new registerDeviceWithoutPhoneNumberWithIdentityCredential_result();
        try {
          result.success = iface_.registerDeviceWithoutPhoneNumberWithIdentityCredential(args.region, args.udidHash, args.deviceInfo, args.provider, args.identifier, args.verifier, args.mid, args.migrationPincodeSessionId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerDeviceWithoutPhoneNumberWithIdentityCredential");
          oprot.writeMessageBegin(new TMessage("registerDeviceWithoutPhoneNumberWithIdentityCredential", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("registerDeviceWithoutPhoneNumberWithIdentityCredential", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class registerUserid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        registerUserid_args args = new registerUserid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("registerUserid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        registerUserid_result result = new registerUserid_result();
        try {
          result.success = iface_.registerUserid(args.reqSeq, args.userid);
          result.setSuccessIsSet(true);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerUserid");
          oprot.writeMessageBegin(new TMessage("registerUserid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("registerUserid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class registerWapDevice implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        registerWapDevice_args args = new registerWapDevice_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("registerWapDevice", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        registerWapDevice_result result = new registerWapDevice_result();
        try {
          result.success = iface_.registerWapDevice(args.invitationHash, args.guidHash, args.email, args.deviceInfo);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerWapDevice");
          oprot.writeMessageBegin(new TMessage("registerWapDevice", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("registerWapDevice", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class registerWithExistingSnsIdAndIdentityCredential implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        registerWithExistingSnsIdAndIdentityCredential_args args = new registerWithExistingSnsIdAndIdentityCredential_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("registerWithExistingSnsIdAndIdentityCredential", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        registerWithExistingSnsIdAndIdentityCredential_result result = new registerWithExistingSnsIdAndIdentityCredential_result();
        try {
          result.success = iface_.registerWithExistingSnsIdAndIdentityCredential(args.identityCredential, args.region, args.udidHash, args.deviceInfo);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerWithExistingSnsIdAndIdentityCredential");
          oprot.writeMessageBegin(new TMessage("registerWithExistingSnsIdAndIdentityCredential", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("registerWithExistingSnsIdAndIdentityCredential", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class registerWithSnsId implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        registerWithSnsId_args args = new registerWithSnsId_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("registerWithSnsId", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        registerWithSnsId_result result = new registerWithSnsId_result();
        try {
          result.success = iface_.registerWithSnsId(args.snsIdType, args.snsAccessToken, args.region, args.udidHash, args.deviceInfo, args.mid);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerWithSnsId");
          oprot.writeMessageBegin(new TMessage("registerWithSnsId", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("registerWithSnsId", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class registerWithSnsIdAndIdentityCredential implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        registerWithSnsIdAndIdentityCredential_args args = new registerWithSnsIdAndIdentityCredential_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("registerWithSnsIdAndIdentityCredential", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        registerWithSnsIdAndIdentityCredential_result result = new registerWithSnsIdAndIdentityCredential_result();
        try {
          result.success = iface_.registerWithSnsIdAndIdentityCredential(args.snsIdType, args.snsAccessToken, args.identityCredential, args.region, args.udidHash, args.deviceInfo);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerWithSnsIdAndIdentityCredential");
          oprot.writeMessageBegin(new TMessage("registerWithSnsIdAndIdentityCredential", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("registerWithSnsIdAndIdentityCredential", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class reissueDeviceCredential implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        reissueDeviceCredential_args args = new reissueDeviceCredential_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("reissueDeviceCredential", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        reissueDeviceCredential_result result = new reissueDeviceCredential_result();
        try {
          result.success = iface_.reissueDeviceCredential();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing reissueDeviceCredential");
          oprot.writeMessageBegin(new TMessage("reissueDeviceCredential", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("reissueDeviceCredential", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class reissueUserTicket implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        reissueUserTicket_args args = new reissueUserTicket_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("reissueUserTicket", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        reissueUserTicket_result result = new reissueUserTicket_result();
        try {
          result.success = iface_.reissueUserTicket(args.expirationTime, args.maxUseCount);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing reissueUserTicket");
          oprot.writeMessageBegin(new TMessage("reissueUserTicket", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("reissueUserTicket", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getMessageReadRange implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getMessageReadRange_args args = new getMessageReadRange_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getMessageReadRange", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getMessageReadRange_result result = new getMessageReadRange_result();
        try {
          result.success = iface_.getMessageReadRange(args.chatIds);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getMessageReadRange");
          oprot.writeMessageBegin(new TMessage("getMessageReadRange", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getMessageReadRange", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class rejectGroupInvitation implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        rejectGroupInvitation_args args = new rejectGroupInvitation_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("rejectGroupInvitation", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        rejectGroupInvitation_result result = new rejectGroupInvitation_result();
        try {
          iface_.rejectGroupInvitation(args.reqSeq, args.groupId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing rejectGroupInvitation");
          oprot.writeMessageBegin(new TMessage("rejectGroupInvitation", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("rejectGroupInvitation", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class releaseSession implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        releaseSession_args args = new releaseSession_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("releaseSession", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        releaseSession_result result = new releaseSession_result();
        try {
          iface_.releaseSession();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing releaseSession");
          oprot.writeMessageBegin(new TMessage("releaseSession", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("releaseSession", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class removeAllMessages implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        removeAllMessages_args args = new removeAllMessages_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("removeAllMessages", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        removeAllMessages_result result = new removeAllMessages_result();
        try {
          iface_.removeAllMessages(args.seq, args.lastMessageId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing removeAllMessages");
          oprot.writeMessageBegin(new TMessage("removeAllMessages", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("removeAllMessages", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class removeBuddyLocation implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        removeBuddyLocation_args args = new removeBuddyLocation_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("removeBuddyLocation", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        removeBuddyLocation_result result = new removeBuddyLocation_result();
        try {
          iface_.removeBuddyLocation(args.mid, args.index);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing removeBuddyLocation");
          oprot.writeMessageBegin(new TMessage("removeBuddyLocation", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("removeBuddyLocation", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class removeMessage implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        removeMessage_args args = new removeMessage_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("removeMessage", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        removeMessage_result result = new removeMessage_result();
        try {
          result.success = iface_.removeMessage(args.messageId);
          result.setSuccessIsSet(true);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing removeMessage");
          oprot.writeMessageBegin(new TMessage("removeMessage", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("removeMessage", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class makeUserAddMyselfAsContact implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        makeUserAddMyselfAsContact_args args = new makeUserAddMyselfAsContact_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("makeUserAddMyselfAsContact", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        makeUserAddMyselfAsContact_result result = new makeUserAddMyselfAsContact_result();
        try {
          result.success = iface_.makeUserAddMyselfAsContact(args.contactOwnerMid);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing makeUserAddMyselfAsContact");
          oprot.writeMessageBegin(new TMessage("makeUserAddMyselfAsContact", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("makeUserAddMyselfAsContact", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class removeMessageFromMyHome implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        removeMessageFromMyHome_args args = new removeMessageFromMyHome_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("removeMessageFromMyHome", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        removeMessageFromMyHome_result result = new removeMessageFromMyHome_result();
        try {
          result.success = iface_.removeMessageFromMyHome(args.messageId);
          result.setSuccessIsSet(true);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing removeMessageFromMyHome");
          oprot.writeMessageBegin(new TMessage("removeMessageFromMyHome", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("removeMessageFromMyHome", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class removeSnsId implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        removeSnsId_args args = new removeSnsId_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("removeSnsId", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        removeSnsId_result result = new removeSnsId_result();
        try {
          result.success = iface_.removeSnsId(args.snsIdType);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing removeSnsId");
          oprot.writeMessageBegin(new TMessage("removeSnsId", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("removeSnsId", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class report implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        report_args args = new report_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("report", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        report_result result = new report_result();
        try {
          iface_.report(args.syncOpRevision, args.category, args.report);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing report");
          oprot.writeMessageBegin(new TMessage("report", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("report", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class reportContacts implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        reportContacts_args args = new reportContacts_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("reportContacts", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        reportContacts_result result = new reportContacts_result();
        try {
          result.success = iface_.reportContacts(args.syncOpRevision, args.category, args.contactReports, args.actionType);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing reportContacts");
          oprot.writeMessageBegin(new TMessage("reportContacts", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("reportContacts", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class reportGroups implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        reportGroups_args args = new reportGroups_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("reportGroups", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        reportGroups_result result = new reportGroups_result();
        try {
          iface_.reportGroups(args.syncOpRevision, args.groups);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing reportGroups");
          oprot.writeMessageBegin(new TMessage("reportGroups", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("reportGroups", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class reportProfile implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        reportProfile_args args = new reportProfile_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("reportProfile", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        reportProfile_result result = new reportProfile_result();
        try {
          iface_.reportProfile(args.syncOpRevision, args.profile);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing reportProfile");
          oprot.writeMessageBegin(new TMessage("reportProfile", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("reportProfile", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class reportRooms implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        reportRooms_args args = new reportRooms_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("reportRooms", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        reportRooms_result result = new reportRooms_result();
        try {
          iface_.reportRooms(args.syncOpRevision, args.rooms);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing reportRooms");
          oprot.writeMessageBegin(new TMessage("reportRooms", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("reportRooms", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class findAndAddContactByMetaTag implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        findAndAddContactByMetaTag_args args = new findAndAddContactByMetaTag_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("findAndAddContactByMetaTag", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        findAndAddContactByMetaTag_result result = new findAndAddContactByMetaTag_result();
        try {
          result.success = iface_.findAndAddContactByMetaTag(args.reqSeq, args.userid, args.reference);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findAndAddContactByMetaTag");
          oprot.writeMessageBegin(new TMessage("findAndAddContactByMetaTag", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("findAndAddContactByMetaTag", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class reportSettings implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        reportSettings_args args = new reportSettings_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("reportSettings", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        reportSettings_result result = new reportSettings_result();
        try {
          iface_.reportSettings(args.syncOpRevision, args.settings);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing reportSettings");
          oprot.writeMessageBegin(new TMessage("reportSettings", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("reportSettings", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class reportSpam implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        reportSpam_args args = new reportSpam_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("reportSpam", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        reportSpam_result result = new reportSpam_result();
        try {
          iface_.reportSpam(args.chatMid, args.memberMids, args.spammerReasons, args.senderMids, args.spamMessageIds, args.spamMessages);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing reportSpam");
          oprot.writeMessageBegin(new TMessage("reportSpam", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("reportSpam", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class reportSpammer implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        reportSpammer_args args = new reportSpammer_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("reportSpammer", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        reportSpammer_result result = new reportSpammer_result();
        try {
          iface_.reportSpammer(args.spammerMid, args.spammerReasons, args.spamMessageIds);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing reportSpammer");
          oprot.writeMessageBegin(new TMessage("reportSpammer", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("reportSpammer", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class requestAccountPasswordReset implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        requestAccountPasswordReset_args args = new requestAccountPasswordReset_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("requestAccountPasswordReset", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        requestAccountPasswordReset_result result = new requestAccountPasswordReset_result();
        try {
          iface_.requestAccountPasswordReset(args.provider, args.identifier, args.locale);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing requestAccountPasswordReset");
          oprot.writeMessageBegin(new TMessage("requestAccountPasswordReset", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("requestAccountPasswordReset", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class requestEmailConfirmation implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        requestEmailConfirmation_args args = new requestEmailConfirmation_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("requestEmailConfirmation", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        requestEmailConfirmation_result result = new requestEmailConfirmation_result();
        try {
          result.success = iface_.requestEmailConfirmation(args.emailConfirmation);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing requestEmailConfirmation");
          oprot.writeMessageBegin(new TMessage("requestEmailConfirmation", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("requestEmailConfirmation", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class requestIdentityUnbind implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        requestIdentityUnbind_args args = new requestIdentityUnbind_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("requestIdentityUnbind", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        requestIdentityUnbind_result result = new requestIdentityUnbind_result();
        try {
          iface_.requestIdentityUnbind(args.provider, args.identifier);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing requestIdentityUnbind");
          oprot.writeMessageBegin(new TMessage("requestIdentityUnbind", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("requestIdentityUnbind", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class resendEmailConfirmation implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        resendEmailConfirmation_args args = new resendEmailConfirmation_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("resendEmailConfirmation", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        resendEmailConfirmation_result result = new resendEmailConfirmation_result();
        try {
          result.success = iface_.resendEmailConfirmation(args.verifier);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing resendEmailConfirmation");
          oprot.writeMessageBegin(new TMessage("resendEmailConfirmation", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("resendEmailConfirmation", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class resendPinCode implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        resendPinCode_args args = new resendPinCode_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("resendPinCode", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        resendPinCode_result result = new resendPinCode_result();
        try {
          iface_.resendPinCode(args.sessionId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing resendPinCode");
          oprot.writeMessageBegin(new TMessage("resendPinCode", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("resendPinCode", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class resendPinCodeBySMS implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        resendPinCodeBySMS_args args = new resendPinCodeBySMS_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("resendPinCodeBySMS", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        resendPinCodeBySMS_result result = new resendPinCodeBySMS_result();
        try {
          iface_.resendPinCodeBySMS(args.sessionId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing resendPinCodeBySMS");
          oprot.writeMessageBegin(new TMessage("resendPinCodeBySMS", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("resendPinCodeBySMS", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class sendChatChecked implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        sendChatChecked_args args = new sendChatChecked_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("sendChatChecked", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        sendChatChecked_result result = new sendChatChecked_result();
        try {
          iface_.sendChatChecked(args.seq, args.consumer, args.lastMessageId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendChatChecked");
          oprot.writeMessageBegin(new TMessage("sendChatChecked", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("sendChatChecked", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class sendMessageAwaitCommit implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        sendMessageAwaitCommit_args args = new sendMessageAwaitCommit_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("sendMessageAwaitCommit", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        sendMessageAwaitCommit_result result = new sendMessageAwaitCommit_result();
        try {
          result.success = iface_.sendMessageAwaitCommit(args.seq, args.message);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendMessageAwaitCommit");
          oprot.writeMessageBegin(new TMessage("sendMessageAwaitCommit", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("sendMessageAwaitCommit", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class sendChatRemoved implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        sendChatRemoved_args args = new sendChatRemoved_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("sendChatRemoved", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        sendChatRemoved_result result = new sendChatRemoved_result();
        try {
          iface_.sendChatRemoved(args.seq, args.consumer, args.lastMessageId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendChatRemoved");
          oprot.writeMessageBegin(new TMessage("sendChatRemoved", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("sendChatRemoved", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class sendContentPreviewUpdated implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        sendContentPreviewUpdated_args args = new sendContentPreviewUpdated_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("sendContentPreviewUpdated", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        sendContentPreviewUpdated_result result = new sendContentPreviewUpdated_result();
        try {
          result.success = iface_.sendContentPreviewUpdated(args.esq, args.messageId, args.receiverMids);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendContentPreviewUpdated");
          oprot.writeMessageBegin(new TMessage("sendContentPreviewUpdated", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("sendContentPreviewUpdated", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class sendContentReceipt implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        sendContentReceipt_args args = new sendContentReceipt_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("sendContentReceipt", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        sendContentReceipt_result result = new sendContentReceipt_result();
        try {
          iface_.sendContentReceipt(args.seq, args.consumer, args.messageId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendContentReceipt");
          oprot.writeMessageBegin(new TMessage("sendContentReceipt", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("sendContentReceipt", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class sendDummyPush implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        sendDummyPush_args args = new sendDummyPush_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("sendDummyPush", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        sendDummyPush_result result = new sendDummyPush_result();
        try {
          iface_.sendDummyPush();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendDummyPush");
          oprot.writeMessageBegin(new TMessage("sendDummyPush", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("sendDummyPush", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class removeE2EEPublicKey implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        removeE2EEPublicKey_args args = new removeE2EEPublicKey_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("removeE2EEPublicKey", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        removeE2EEPublicKey_result result = new removeE2EEPublicKey_result();
        try {
          iface_.removeE2EEPublicKey(args.publicKey);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing removeE2EEPublicKey");
          oprot.writeMessageBegin(new TMessage("removeE2EEPublicKey", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("removeE2EEPublicKey", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class negotiateE2EEPublicKey implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        negotiateE2EEPublicKey_args args = new negotiateE2EEPublicKey_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("negotiateE2EEPublicKey", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        negotiateE2EEPublicKey_result result = new negotiateE2EEPublicKey_result();
        try {
          result.success = iface_.negotiateE2EEPublicKey(args.mid);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing negotiateE2EEPublicKey");
          oprot.writeMessageBegin(new TMessage("negotiateE2EEPublicKey", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("negotiateE2EEPublicKey", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getE2EEPublicKey implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getE2EEPublicKey_args args = new getE2EEPublicKey_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getE2EEPublicKey", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getE2EEPublicKey_result result = new getE2EEPublicKey_result();
        try {
          result.success = iface_.getE2EEPublicKey(args.mid, args.version, args.keyId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getE2EEPublicKey");
          oprot.writeMessageBegin(new TMessage("getE2EEPublicKey", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getE2EEPublicKey", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class requestE2EEKeyExchange implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        requestE2EEKeyExchange_args args = new requestE2EEKeyExchange_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("requestE2EEKeyExchange", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        requestE2EEKeyExchange_result result = new requestE2EEKeyExchange_result();
        try {
          iface_.requestE2EEKeyExchange(args.reqSeq, args.temporalPublicKey, args.publicKey, args.verifier);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing requestE2EEKeyExchange");
          oprot.writeMessageBegin(new TMessage("requestE2EEKeyExchange", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("requestE2EEKeyExchange", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getLastE2EEPublicKeys implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getLastE2EEPublicKeys_args args = new getLastE2EEPublicKeys_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getLastE2EEPublicKeys", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getLastE2EEPublicKeys_result result = new getLastE2EEPublicKeys_result();
        try {
          result.success = iface_.getLastE2EEPublicKeys(args.chatMid);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getLastE2EEPublicKeys");
          oprot.writeMessageBegin(new TMessage("getLastE2EEPublicKeys", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getLastE2EEPublicKeys", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class registerE2EEPublicKey implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        registerE2EEPublicKey_args args = new registerE2EEPublicKey_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("registerE2EEPublicKey", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        registerE2EEPublicKey_result result = new registerE2EEPublicKey_result();
        try {
          result.success = iface_.registerE2EEPublicKey(args.reqSeq, args.publicKey);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerE2EEPublicKey");
          oprot.writeMessageBegin(new TMessage("registerE2EEPublicKey", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("registerE2EEPublicKey", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getE2EEPublicKeys implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getE2EEPublicKeys_args args = new getE2EEPublicKeys_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getE2EEPublicKeys", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getE2EEPublicKeys_result result = new getE2EEPublicKeys_result();
        try {
          result.success = iface_.getE2EEPublicKeys();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getE2EEPublicKeys");
          oprot.writeMessageBegin(new TMessage("getE2EEPublicKeys", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getE2EEPublicKeys", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getE2EEPublicKeysEx implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getE2EEPublicKeysEx_args args = new getE2EEPublicKeysEx_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getE2EEPublicKeysEx", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getE2EEPublicKeysEx_result result = new getE2EEPublicKeysEx_result();
        try {
          result.success = iface_.getE2EEPublicKeysEx(args.ignoreE2EEStatus);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getE2EEPublicKeysEx");
          oprot.writeMessageBegin(new TMessage("getE2EEPublicKeysEx", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getE2EEPublicKeysEx", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getReadMessageOpsInBulk implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getReadMessageOpsInBulk_args args = new getReadMessageOpsInBulk_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getReadMessageOpsInBulk", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getReadMessageOpsInBulk_result result = new getReadMessageOpsInBulk_result();
        try {
          result.success = iface_.getReadMessageOpsInBulk(args.chatIds);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getReadMessageOpsInBulk");
          oprot.writeMessageBegin(new TMessage("getReadMessageOpsInBulk", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getReadMessageOpsInBulk", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class sendEvent implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        sendEvent_args args = new sendEvent_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("sendEvent", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        sendEvent_result result = new sendEvent_result();
        try {
          result.success = iface_.sendEvent(args.seq, args.message);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendEvent");
          oprot.writeMessageBegin(new TMessage("sendEvent", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("sendEvent", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class sendMessage implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        sendMessage_args args = new sendMessage_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("sendMessage", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        sendMessage_result result = new sendMessage_result();
        try {
          result.success = iface_.sendMessage(args.seq, args.message);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendMessage");
          oprot.writeMessageBegin(new TMessage("sendMessage", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("sendMessage", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class sendMessageIgnored implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        sendMessageIgnored_args args = new sendMessageIgnored_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("sendMessageIgnored", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        sendMessageIgnored_result result = new sendMessageIgnored_result();
        try {
          iface_.sendMessageIgnored(args.seq, args.consumer, args.messageIds);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendMessageIgnored");
          oprot.writeMessageBegin(new TMessage("sendMessageIgnored", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("sendMessageIgnored", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class sendMessageReceipt implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        sendMessageReceipt_args args = new sendMessageReceipt_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("sendMessageReceipt", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        sendMessageReceipt_result result = new sendMessageReceipt_result();
        try {
          iface_.sendMessageReceipt(args.seq, args.consumer, args.messageIds);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendMessageReceipt");
          oprot.writeMessageBegin(new TMessage("sendMessageReceipt", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("sendMessageReceipt", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class findContactByMetaTag implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        findContactByMetaTag_args args = new findContactByMetaTag_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("findContactByMetaTag", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        findContactByMetaTag_result result = new findContactByMetaTag_result();
        try {
          result.success = iface_.findContactByMetaTag(args.userid, args.reference);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findContactByMetaTag");
          oprot.writeMessageBegin(new TMessage("findContactByMetaTag", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("findContactByMetaTag", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class sendMessageToMyHome implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        sendMessageToMyHome_args args = new sendMessageToMyHome_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("sendMessageToMyHome", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        sendMessageToMyHome_result result = new sendMessageToMyHome_result();
        try {
          result.success = iface_.sendMessageToMyHome(args.seq, args.message);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendMessageToMyHome");
          oprot.writeMessageBegin(new TMessage("sendMessageToMyHome", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("sendMessageToMyHome", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class setBuddyLocation implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        setBuddyLocation_args args = new setBuddyLocation_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("setBuddyLocation", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        setBuddyLocation_result result = new setBuddyLocation_result();
        try {
          iface_.setBuddyLocation(args.mid, args.index, args.location);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing setBuddyLocation");
          oprot.writeMessageBegin(new TMessage("setBuddyLocation", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("setBuddyLocation", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class setIdentityCredential implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        setIdentityCredential_args args = new setIdentityCredential_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("setIdentityCredential", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        setIdentityCredential_result result = new setIdentityCredential_result();
        try {
          iface_.setIdentityCredential(args.identifier, args.verifier, args.provider);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing setIdentityCredential");
          oprot.writeMessageBegin(new TMessage("setIdentityCredential", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("setIdentityCredential", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class setNotificationsEnabled implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        setNotificationsEnabled_args args = new setNotificationsEnabled_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("setNotificationsEnabled", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        setNotificationsEnabled_result result = new setNotificationsEnabled_result();
        try {
          iface_.setNotificationsEnabled(args.reqSeq, args.type, args.target, args.enablement);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing setNotificationsEnabled");
          oprot.writeMessageBegin(new TMessage("setNotificationsEnabled", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("setNotificationsEnabled", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class startUpdateVerification implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        startUpdateVerification_args args = new startUpdateVerification_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("startUpdateVerification", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        startUpdateVerification_result result = new startUpdateVerification_result();
        try {
          result.success = iface_.startUpdateVerification(args.region, args.carrier, args.phone, args.udidHash, args.deviceInfo, args.networkCode, args.locale);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing startUpdateVerification");
          oprot.writeMessageBegin(new TMessage("startUpdateVerification", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("startUpdateVerification", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class startVerification implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        startVerification_args args = new startVerification_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("startVerification", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        startVerification_result result = new startVerification_result();
        try {
          result.success = iface_.startVerification(args.region, args.carrier, args.phone, args.udidHash, args.deviceInfo, args.networkCode, args.mid, args.locale, args.simInfo, args.oldUdidHash);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing startVerification");
          oprot.writeMessageBegin(new TMessage("startVerification", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("startVerification", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateGroupPreferenceAttribute implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateGroupPreferenceAttribute_args args = new updateGroupPreferenceAttribute_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateGroupPreferenceAttribute", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateGroupPreferenceAttribute_result result = new updateGroupPreferenceAttribute_result();
        try {
          iface_.updateGroupPreferenceAttribute(args.reqSeq, args.groupMid, args.updatedAttrs);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateGroupPreferenceAttribute");
          oprot.writeMessageBegin(new TMessage("updateGroupPreferenceAttribute", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateGroupPreferenceAttribute", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class createRoomV2 implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        createRoomV2_args args = new createRoomV2_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("createRoomV2", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        createRoomV2_result result = new createRoomV2_result();
        try {
          result.success = iface_.createRoomV2(args.reqSeq, args.contactIds);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing createRoomV2");
          oprot.writeMessageBegin(new TMessage("createRoomV2", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("createRoomV2", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class storeUpdateProfileAttribute implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        storeUpdateProfileAttribute_args args = new storeUpdateProfileAttribute_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("storeUpdateProfileAttribute", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        storeUpdateProfileAttribute_result result = new storeUpdateProfileAttribute_result();
        try {
          iface_.storeUpdateProfileAttribute(args.seq, args.profileAttribute, args.value);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing storeUpdateProfileAttribute");
          oprot.writeMessageBegin(new TMessage("storeUpdateProfileAttribute", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("storeUpdateProfileAttribute", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class syncContactBySnsIds implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        syncContactBySnsIds_args args = new syncContactBySnsIds_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("syncContactBySnsIds", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        syncContactBySnsIds_result result = new syncContactBySnsIds_result();
        try {
          result.success = iface_.syncContactBySnsIds(args.reqSeq, args.modifications);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing syncContactBySnsIds");
          oprot.writeMessageBegin(new TMessage("syncContactBySnsIds", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("syncContactBySnsIds", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class syncContacts implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        syncContacts_args args = new syncContacts_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("syncContacts", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        syncContacts_result result = new syncContacts_result();
        try {
          result.success = iface_.syncContacts(args.reqSeq, args.localContacts);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing syncContacts");
          oprot.writeMessageBegin(new TMessage("syncContacts", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("syncContacts", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class trySendMessage implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        trySendMessage_args args = new trySendMessage_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("trySendMessage", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        trySendMessage_result result = new trySendMessage_result();
        try {
          result.success = iface_.trySendMessage(args.seq, args.message);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing trySendMessage");
          oprot.writeMessageBegin(new TMessage("trySendMessage", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("trySendMessage", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getNextMessagesV2 implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getNextMessagesV2_args args = new getNextMessagesV2_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getNextMessagesV2", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getNextMessagesV2_result result = new getNextMessagesV2_result();
        try {
          result.success = iface_.getNextMessagesV2(args.messageBoxId, args.startMessageId, args.messagesCount);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getNextMessagesV2");
          oprot.writeMessageBegin(new TMessage("getNextMessagesV2", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getNextMessagesV2", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getMessageBoxCompactWrapUpV2 implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getMessageBoxCompactWrapUpV2_args args = new getMessageBoxCompactWrapUpV2_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getMessageBoxCompactWrapUpV2", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getMessageBoxCompactWrapUpV2_result result = new getMessageBoxCompactWrapUpV2_result();
        try {
          result.success = iface_.getMessageBoxCompactWrapUpV2(args.messageBoxId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getMessageBoxCompactWrapUpV2");
          oprot.writeMessageBegin(new TMessage("getMessageBoxCompactWrapUpV2", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getMessageBoxCompactWrapUpV2", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getRecentMessagesV2 implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getRecentMessagesV2_args args = new getRecentMessagesV2_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getRecentMessagesV2", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getRecentMessagesV2_result result = new getRecentMessagesV2_result();
        try {
          result.success = iface_.getRecentMessagesV2(args.messageBoxId, args.messagesCount);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getRecentMessagesV2");
          oprot.writeMessageBegin(new TMessage("getRecentMessagesV2", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getRecentMessagesV2", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class validateContactsOnBot implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        validateContactsOnBot_args args = new validateContactsOnBot_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("validateContactsOnBot", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        validateContactsOnBot_result result = new validateContactsOnBot_result();
        try {
          result.success = iface_.validateContactsOnBot(args.contacts);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing validateContactsOnBot");
          oprot.writeMessageBegin(new TMessage("validateContactsOnBot", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("validateContactsOnBot", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class tryFriendRequest implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        tryFriendRequest_args args = new tryFriendRequest_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("tryFriendRequest", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        tryFriendRequest_result result = new tryFriendRequest_result();
        try {
          iface_.tryFriendRequest(args.midOrEMid, args.method, args.friendRequestParams);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing tryFriendRequest");
          oprot.writeMessageBegin(new TMessage("tryFriendRequest", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("tryFriendRequest", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class unblockContact implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        unblockContact_args args = new unblockContact_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("unblockContact", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        unblockContact_result result = new unblockContact_result();
        try {
          iface_.unblockContact(args.reqSeq, args.id);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing unblockContact");
          oprot.writeMessageBegin(new TMessage("unblockContact", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("unblockContact", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class unblockRecommendation implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        unblockRecommendation_args args = new unblockRecommendation_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("unblockRecommendation", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        unblockRecommendation_result result = new unblockRecommendation_result();
        try {
          iface_.unblockRecommendation(args.reqSeq, args.id);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing unblockRecommendation");
          oprot.writeMessageBegin(new TMessage("unblockRecommendation", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("unblockRecommendation", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class unregisterUserAndDevice implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        unregisterUserAndDevice_args args = new unregisterUserAndDevice_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("unregisterUserAndDevice", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        unregisterUserAndDevice_result result = new unregisterUserAndDevice_result();
        try {
          result.success = iface_.unregisterUserAndDevice();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing unregisterUserAndDevice");
          oprot.writeMessageBegin(new TMessage("unregisterUserAndDevice", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("unregisterUserAndDevice", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateApnsDeviceToken implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateApnsDeviceToken_args args = new updateApnsDeviceToken_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateApnsDeviceToken", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateApnsDeviceToken_result result = new updateApnsDeviceToken_result();
        try {
          iface_.updateApnsDeviceToken(args.apnsDeviceToken);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateApnsDeviceToken");
          oprot.writeMessageBegin(new TMessage("updateApnsDeviceToken", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateApnsDeviceToken", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateBuddySetting implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateBuddySetting_args args = new updateBuddySetting_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateBuddySetting", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateBuddySetting_result result = new updateBuddySetting_result();
        try {
          iface_.updateBuddySetting(args.key, args.value);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateBuddySetting");
          oprot.writeMessageBegin(new TMessage("updateBuddySetting", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateBuddySetting", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateC2DMRegistrationId implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateC2DMRegistrationId_args args = new updateC2DMRegistrationId_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateC2DMRegistrationId", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateC2DMRegistrationId_result result = new updateC2DMRegistrationId_result();
        try {
          iface_.updateC2DMRegistrationId(args.registrationId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateC2DMRegistrationId");
          oprot.writeMessageBegin(new TMessage("updateC2DMRegistrationId", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateC2DMRegistrationId", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateContactSetting implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateContactSetting_args args = new updateContactSetting_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateContactSetting", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateContactSetting_result result = new updateContactSetting_result();
        try {
          iface_.updateContactSetting(args.reqSeq, args.mid, args.flag, args.value);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateContactSetting");
          oprot.writeMessageBegin(new TMessage("updateContactSetting", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateContactSetting", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateCustomModeSettings implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateCustomModeSettings_args args = new updateCustomModeSettings_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateCustomModeSettings", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateCustomModeSettings_result result = new updateCustomModeSettings_result();
        try {
          iface_.updateCustomModeSettings(args.customMode, args.paramMap);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateCustomModeSettings");
          oprot.writeMessageBegin(new TMessage("updateCustomModeSettings", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateCustomModeSettings", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateDeviceInfo implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateDeviceInfo_args args = new updateDeviceInfo_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateDeviceInfo", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateDeviceInfo_result result = new updateDeviceInfo_result();
        try {
          iface_.updateDeviceInfo(args.deviceUid, args.deviceInfo);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateDeviceInfo");
          oprot.writeMessageBegin(new TMessage("updateDeviceInfo", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateDeviceInfo", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateGroup implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateGroup_args args = new updateGroup_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateGroup", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateGroup_result result = new updateGroup_result();
        try {
          iface_.updateGroup(args.reqSeq, args.group);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateGroup");
          oprot.writeMessageBegin(new TMessage("updateGroup", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateGroup", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateNotificationToken implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateNotificationToken_args args = new updateNotificationToken_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateNotificationToken", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateNotificationToken_result result = new updateNotificationToken_result();
        try {
          iface_.updateNotificationToken(args.type, args.token);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateNotificationToken");
          oprot.writeMessageBegin(new TMessage("updateNotificationToken", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateNotificationToken", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateNotificationTokenWithBytes implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateNotificationTokenWithBytes_args args = new updateNotificationTokenWithBytes_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateNotificationTokenWithBytes", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateNotificationTokenWithBytes_result result = new updateNotificationTokenWithBytes_result();
        try {
          iface_.updateNotificationTokenWithBytes(args.type, args.token);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateNotificationTokenWithBytes");
          oprot.writeMessageBegin(new TMessage("updateNotificationTokenWithBytes", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateNotificationTokenWithBytes", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateProfile implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateProfile_args args = new updateProfile_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateProfile", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateProfile_result result = new updateProfile_result();
        try {
          iface_.updateProfile(args.reqSeq, args.profile);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateProfile");
          oprot.writeMessageBegin(new TMessage("updateProfile", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateProfile", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateProfileAttribute implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateProfileAttribute_args args = new updateProfileAttribute_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateProfileAttribute", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateProfileAttribute_result result = new updateProfileAttribute_result();
        try {
          iface_.updateProfileAttribute(args.reqSeq, args.attr, args.value);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateProfileAttribute");
          oprot.writeMessageBegin(new TMessage("updateProfileAttribute", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateProfileAttribute", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateRegion implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateRegion_args args = new updateRegion_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateRegion", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateRegion_result result = new updateRegion_result();
        try {
          iface_.updateRegion(args.region);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateRegion");
          oprot.writeMessageBegin(new TMessage("updateRegion", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateRegion", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateSettings implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateSettings_args args = new updateSettings_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateSettings", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateSettings_result result = new updateSettings_result();
        try {
          iface_.updateSettings(args.reqSeq, args.settings);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateSettings");
          oprot.writeMessageBegin(new TMessage("updateSettings", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateSettings", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateSettings2 implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateSettings2_args args = new updateSettings2_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateSettings2", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateSettings2_result result = new updateSettings2_result();
        try {
          result.success = iface_.updateSettings2(args.reqSeq, args.settings);
          result.setSuccessIsSet(true);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateSettings2");
          oprot.writeMessageBegin(new TMessage("updateSettings2", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateSettings2", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateSettingsAttribute implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateSettingsAttribute_args args = new updateSettingsAttribute_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateSettingsAttribute", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateSettingsAttribute_result result = new updateSettingsAttribute_result();
        try {
          iface_.updateSettingsAttribute(args.reqSeq, args.attr, args.value);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateSettingsAttribute");
          oprot.writeMessageBegin(new TMessage("updateSettingsAttribute", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateSettingsAttribute", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateSettingsAttributes implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateSettingsAttributes_args args = new updateSettingsAttributes_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateSettingsAttributes", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateSettingsAttributes_result result = new updateSettingsAttributes_result();
        try {
          result.success = iface_.updateSettingsAttributes(args.reqSeq, args.attrBitset, args.settings);
          result.setSuccessIsSet(true);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateSettingsAttributes");
          oprot.writeMessageBegin(new TMessage("updateSettingsAttributes", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateSettingsAttributes", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class verifyIdentityCredential implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        verifyIdentityCredential_args args = new verifyIdentityCredential_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("verifyIdentityCredential", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        verifyIdentityCredential_result result = new verifyIdentityCredential_result();
        try {
          iface_.verifyIdentityCredential(args.identityProvider, args.identifier, args.password);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing verifyIdentityCredential");
          oprot.writeMessageBegin(new TMessage("verifyIdentityCredential", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("verifyIdentityCredential", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class verifyIdentityCredentialWithResult implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        verifyIdentityCredentialWithResult_args args = new verifyIdentityCredentialWithResult_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("verifyIdentityCredentialWithResult", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        verifyIdentityCredentialWithResult_result result = new verifyIdentityCredentialWithResult_result();
        try {
          result.success = iface_.verifyIdentityCredentialWithResult(args.identityCredential);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing verifyIdentityCredentialWithResult");
          oprot.writeMessageBegin(new TMessage("verifyIdentityCredentialWithResult", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("verifyIdentityCredentialWithResult", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class verifyPhone implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        verifyPhone_args args = new verifyPhone_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("verifyPhone", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        verifyPhone_result result = new verifyPhone_result();
        try {
          result.success = iface_.verifyPhone(args.sessionId, args.pinCode, args.udidHash);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing verifyPhone");
          oprot.writeMessageBegin(new TMessage("verifyPhone", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("verifyPhone", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class verifyQrcode implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        verifyQrcode_args args = new verifyQrcode_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("verifyQrcode", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        verifyQrcode_result result = new verifyQrcode_result();
        try {
          result.success = iface_.verifyQrcode(args.verifier, args.pinCode);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing verifyQrcode");
          oprot.writeMessageBegin(new TMessage("verifyQrcode", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("verifyQrcode", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class getChatRoomAnnouncementsBulk_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getChatRoomAnnouncementsBulk_args");

    private static final TField CHAT_ROOM_MIDS_FIELD_DESC = new TField("chatRoomMids", TType.LIST, (short)2);

    private Vector chatRoomMids;

    // isset id assignments

    public getChatRoomAnnouncementsBulk_args() {
    }

    public getChatRoomAnnouncementsBulk_args(
      Vector chatRoomMids)
    {
      this();
      this.chatRoomMids = chatRoomMids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getChatRoomAnnouncementsBulk_args(getChatRoomAnnouncementsBulk_args other) {
      if (other.isSetChatRoomMids()) {
        Vector __this__chatRoomMids = new Vector();
        for (Enumeration other_enum = other.chatRoomMids.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__chatRoomMids.addElement(other_element);
        }
        this.chatRoomMids = __this__chatRoomMids;
      }
    }

    public getChatRoomAnnouncementsBulk_args deepCopy() {
      return new getChatRoomAnnouncementsBulk_args(this);
    }

    public void clear() {
      this.chatRoomMids = null;
    }

    public int getChatRoomMidsSize() {
      return (this.chatRoomMids == null) ? 0 : this.chatRoomMids.size();
    }

    public Enumeration getChatRoomMidsEnumeration() {
      return (this.chatRoomMids == null) ? null : this.chatRoomMids.elements();
    }

    public void addToChatRoomMids(String elem) {
      if (this.chatRoomMids == null) {
        this.chatRoomMids = new Vector();
      }
      this.chatRoomMids.addElement(elem);
    }

    public Vector getChatRoomMids() {
      return this.chatRoomMids;
    }

    public void setChatRoomMids(Vector chatRoomMids) {
      this.chatRoomMids = chatRoomMids;
    }

    public void unsetChatRoomMids() {
      this.chatRoomMids = null;
    }

    /** Returns true if field chatRoomMids is set (has been assigned a value) and false otherwise */
    public boolean isSetChatRoomMids() {
      return this.chatRoomMids != null;
    }

    public void setChatRoomMidsIsSet(boolean value) {
      if (!value) {
        this.chatRoomMids = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getChatRoomAnnouncementsBulk_args)
        return this.equals((getChatRoomAnnouncementsBulk_args)that);
      return false;
    }

    public boolean equals(getChatRoomAnnouncementsBulk_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_chatRoomMids = true && this.isSetChatRoomMids();
      boolean that_present_chatRoomMids = true && that.isSetChatRoomMids();
      if (this_present_chatRoomMids || that_present_chatRoomMids) {
        if (!(this_present_chatRoomMids && that_present_chatRoomMids))
          return false;
        if (!this.chatRoomMids.equals(that.chatRoomMids))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getChatRoomAnnouncementsBulk_args other = (getChatRoomAnnouncementsBulk_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetChatRoomMids(), other.isSetChatRoomMids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChatRoomMids()) {
        lastComparison = TBaseHelper.compareTo(this.chatRoomMids, other.chatRoomMids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // CHAT_ROOM_MIDS
            if (field.type == TType.LIST) {
              {
                TList _list765 = iprot.readListBegin();
                this.chatRoomMids = new Vector(_list765.size);
                for (int _i766 = 0; _i766 < _list765.size; ++_i766)
                {
                  String _elem767;
                  _elem767 = iprot.readString();
                  this.chatRoomMids.addElement(_elem767);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.chatRoomMids != null) {
        oprot.writeFieldBegin(CHAT_ROOM_MIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.chatRoomMids.size()));
          for (Enumeration _iter768_enum = this.chatRoomMids.elements(); _iter768_enum.hasMoreElements(); )           {
            String _iter768 = (String)_iter768_enum.nextElement();
            oprot.writeString(_iter768);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getChatRoomAnnouncementsBulk_args(");
      boolean first = true;

      sb.append("chatRoomMids:");
      if (this.chatRoomMids == null) {
        sb.append("null");
      } else {
        sb.append(this.chatRoomMids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getChatRoomAnnouncementsBulk_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getChatRoomAnnouncementsBulk_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.MAP, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Hashtable success;
    private TalkException e;

    // isset id assignments

    public getChatRoomAnnouncementsBulk_result() {
    }

    public getChatRoomAnnouncementsBulk_result(
      Hashtable success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getChatRoomAnnouncementsBulk_result(getChatRoomAnnouncementsBulk_result other) {
      if (other.isSetSuccess()) {
        Hashtable __this__success = new Hashtable();
        for (Enumeration other_enum = other.success.keys(); other_enum.hasMoreElements(); ) {

          String other_element_key = (String)other_enum.nextElement();
          Vector other_element_value = (Vector)other.success.get(other_element_key);

          String __this__success_copy_key = other_element_key;

          Vector __this__success_copy_value = new Vector();
          for (Enumeration other_element_value_enum = other_element_value.elements(); other_element_value_enum.hasMoreElements(); ) {
            ChatRoomAnnouncement other_element_value_element = (ChatRoomAnnouncement)other_element_value_enum.nextElement();
            __this__success_copy_value.addElement(new ChatRoomAnnouncement(other_element_value_element));
          }

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getChatRoomAnnouncementsBulk_result deepCopy() {
      return new getChatRoomAnnouncementsBulk_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Vector val) {
      if (this.success == null) {
        this.success = new Hashtable();
      }
      this.success.put(key, val);
    }

    public Hashtable getSuccess() {
      return this.success;
    }

    public void setSuccess(Hashtable success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getChatRoomAnnouncementsBulk_result)
        return this.equals((getChatRoomAnnouncementsBulk_result)that);
      return false;
    }

    public boolean equals(getChatRoomAnnouncementsBulk_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getChatRoomAnnouncementsBulk_result other = (getChatRoomAnnouncementsBulk_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.MAP) {
              {
                TMap _map769 = iprot.readMapBegin();
                this.success = new Hashtable(2*_map769.size);
                for (int _i770 = 0; _i770 < _map769.size; ++_i770)
                {
                  String _key771;
                  Vector _val772;
                  _key771 = iprot.readString();
                  {
                    TList _list773 = iprot.readListBegin();
                    _val772 = new Vector(_list773.size);
                    for (int _i774 = 0; _i774 < _list773.size; ++_i774)
                    {
                      ChatRoomAnnouncement _elem775;
                      _elem775 = new ChatRoomAnnouncement();
                      _elem775.read(iprot);
                      _val772.addElement(_elem775);
                    }
                    iprot.readListEnd();
                  }
                  this.success.put(_key771, _val772);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.LIST, this.success.size()));
          for (Enumeration _iter776_enum = this.success.keys(); _iter776_enum.hasMoreElements(); )           {
            String _iter776 = (String)_iter776_enum.nextElement();
            oprot.writeString(_iter776);
            {
              oprot.writeListBegin(new TList(TType.STRUCT, ((Vector)this.success.get(_iter776)).size()));
              for (Enumeration _iter777_enum = ((Vector)this.success.get(_iter776)).elements(); _iter777_enum.hasMoreElements(); )               {
                ChatRoomAnnouncement _iter777 = (ChatRoomAnnouncement)_iter777_enum.nextElement();
                _iter777.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getChatRoomAnnouncementsBulk_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getChatRoomAnnouncements_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getChatRoomAnnouncements_args");

    private static final TField CHAT_ROOM_MID_FIELD_DESC = new TField("chatRoomMid", TType.STRING, (short)2);

    private String chatRoomMid;

    // isset id assignments

    public getChatRoomAnnouncements_args() {
    }

    public getChatRoomAnnouncements_args(
      String chatRoomMid)
    {
      this();
      this.chatRoomMid = chatRoomMid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getChatRoomAnnouncements_args(getChatRoomAnnouncements_args other) {
      if (other.isSetChatRoomMid()) {
        this.chatRoomMid = other.chatRoomMid;
      }
    }

    public getChatRoomAnnouncements_args deepCopy() {
      return new getChatRoomAnnouncements_args(this);
    }

    public void clear() {
      this.chatRoomMid = null;
    }

    public String getChatRoomMid() {
      return this.chatRoomMid;
    }

    public void setChatRoomMid(String chatRoomMid) {
      this.chatRoomMid = chatRoomMid;
    }

    public void unsetChatRoomMid() {
      this.chatRoomMid = null;
    }

    /** Returns true if field chatRoomMid is set (has been assigned a value) and false otherwise */
    public boolean isSetChatRoomMid() {
      return this.chatRoomMid != null;
    }

    public void setChatRoomMidIsSet(boolean value) {
      if (!value) {
        this.chatRoomMid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getChatRoomAnnouncements_args)
        return this.equals((getChatRoomAnnouncements_args)that);
      return false;
    }

    public boolean equals(getChatRoomAnnouncements_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_chatRoomMid = true && this.isSetChatRoomMid();
      boolean that_present_chatRoomMid = true && that.isSetChatRoomMid();
      if (this_present_chatRoomMid || that_present_chatRoomMid) {
        if (!(this_present_chatRoomMid && that_present_chatRoomMid))
          return false;
        if (!this.chatRoomMid.equals(that.chatRoomMid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getChatRoomAnnouncements_args other = (getChatRoomAnnouncements_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetChatRoomMid(), other.isSetChatRoomMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChatRoomMid()) {
        lastComparison = TBaseHelper.compareTo(this.chatRoomMid, other.chatRoomMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // CHAT_ROOM_MID
            if (field.type == TType.STRING) {
              this.chatRoomMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.chatRoomMid != null) {
        oprot.writeFieldBegin(CHAT_ROOM_MID_FIELD_DESC);
        oprot.writeString(this.chatRoomMid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getChatRoomAnnouncements_args(");
      boolean first = true;

      sb.append("chatRoomMid:");
      if (this.chatRoomMid == null) {
        sb.append("null");
      } else {
        sb.append(this.chatRoomMid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getChatRoomAnnouncements_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getChatRoomAnnouncements_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getChatRoomAnnouncements_result() {
    }

    public getChatRoomAnnouncements_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getChatRoomAnnouncements_result(getChatRoomAnnouncements_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          ChatRoomAnnouncement other_element = (ChatRoomAnnouncement)other_enum.nextElement();
          __this__success.addElement(new ChatRoomAnnouncement(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getChatRoomAnnouncements_result deepCopy() {
      return new getChatRoomAnnouncements_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(ChatRoomAnnouncement elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getChatRoomAnnouncements_result)
        return this.equals((getChatRoomAnnouncements_result)that);
      return false;
    }

    public boolean equals(getChatRoomAnnouncements_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getChatRoomAnnouncements_result other = (getChatRoomAnnouncements_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list778 = iprot.readListBegin();
                this.success = new Vector(_list778.size);
                for (int _i779 = 0; _i779 < _list778.size; ++_i779)
                {
                  ChatRoomAnnouncement _elem780;
                  _elem780 = new ChatRoomAnnouncement();
                  _elem780.read(iprot);
                  this.success.addElement(_elem780);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter781_enum = this.success.elements(); _iter781_enum.hasMoreElements(); )           {
            ChatRoomAnnouncement _iter781 = (ChatRoomAnnouncement)_iter781_enum.nextElement();
            _iter781.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getChatRoomAnnouncements_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createChatRoomAnnouncement_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("createChatRoomAnnouncement_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField CHAT_ROOM_MID_FIELD_DESC = new TField("chatRoomMid", TType.STRING, (short)2);
    private static final TField TYPE_FIELD_DESC = new TField("type", TType.I32, (short)3);
    private static final TField CONTENTS_FIELD_DESC = new TField("contents", TType.STRUCT, (short)4);

    private int reqSeq;
    private String chatRoomMid;
    private ChatRoomAnnouncementType type;
    private ChatRoomAnnouncementContents contents;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public createChatRoomAnnouncement_args() {
    }

    public createChatRoomAnnouncement_args(
      int reqSeq,
      String chatRoomMid,
      ChatRoomAnnouncementType type,
      ChatRoomAnnouncementContents contents)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.chatRoomMid = chatRoomMid;
      this.type = type;
      this.contents = contents;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createChatRoomAnnouncement_args(createChatRoomAnnouncement_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetChatRoomMid()) {
        this.chatRoomMid = other.chatRoomMid;
      }
      if (other.isSetType()) {
        this.type = other.type;
      }
      if (other.isSetContents()) {
        this.contents = new ChatRoomAnnouncementContents(other.contents);
      }
    }

    public createChatRoomAnnouncement_args deepCopy() {
      return new createChatRoomAnnouncement_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.chatRoomMid = null;
      this.type = null;
      this.contents = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public String getChatRoomMid() {
      return this.chatRoomMid;
    }

    public void setChatRoomMid(String chatRoomMid) {
      this.chatRoomMid = chatRoomMid;
    }

    public void unsetChatRoomMid() {
      this.chatRoomMid = null;
    }

    /** Returns true if field chatRoomMid is set (has been assigned a value) and false otherwise */
    public boolean isSetChatRoomMid() {
      return this.chatRoomMid != null;
    }

    public void setChatRoomMidIsSet(boolean value) {
      if (!value) {
        this.chatRoomMid = null;
      }
    }

    /**
     * 
     * @see ChatRoomAnnouncementType
     */
    public ChatRoomAnnouncementType getType() {
      return this.type;
    }

    /**
     * 
     * @see ChatRoomAnnouncementType
     */
    public void setType(ChatRoomAnnouncementType type) {
      this.type = type;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public ChatRoomAnnouncementContents getContents() {
      return this.contents;
    }

    public void setContents(ChatRoomAnnouncementContents contents) {
      this.contents = contents;
    }

    public void unsetContents() {
      this.contents = null;
    }

    /** Returns true if field contents is set (has been assigned a value) and false otherwise */
    public boolean isSetContents() {
      return this.contents != null;
    }

    public void setContentsIsSet(boolean value) {
      if (!value) {
        this.contents = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createChatRoomAnnouncement_args)
        return this.equals((createChatRoomAnnouncement_args)that);
      return false;
    }

    public boolean equals(createChatRoomAnnouncement_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_chatRoomMid = true && this.isSetChatRoomMid();
      boolean that_present_chatRoomMid = true && that.isSetChatRoomMid();
      if (this_present_chatRoomMid || that_present_chatRoomMid) {
        if (!(this_present_chatRoomMid && that_present_chatRoomMid))
          return false;
        if (!this.chatRoomMid.equals(that.chatRoomMid))
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      boolean this_present_contents = true && this.isSetContents();
      boolean that_present_contents = true && that.isSetContents();
      if (this_present_contents || that_present_contents) {
        if (!(this_present_contents && that_present_contents))
          return false;
        if (!this.contents.equals(that.contents))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      createChatRoomAnnouncement_args other = (createChatRoomAnnouncement_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetChatRoomMid(), other.isSetChatRoomMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChatRoomMid()) {
        lastComparison = TBaseHelper.compareTo(this.chatRoomMid, other.chatRoomMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetType(), other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetContents(), other.isSetContents());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContents()) {
        lastComparison = this.contents.compareTo(other.contents);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CHAT_ROOM_MID
            if (field.type == TType.STRING) {
              this.chatRoomMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TYPE
            if (field.type == TType.I32) {
              this.type = ChatRoomAnnouncementType.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // CONTENTS
            if (field.type == TType.STRUCT) {
              this.contents = new ChatRoomAnnouncementContents();
              this.contents.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.chatRoomMid != null) {
        oprot.writeFieldBegin(CHAT_ROOM_MID_FIELD_DESC);
        oprot.writeString(this.chatRoomMid);
        oprot.writeFieldEnd();
      }
      if (this.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(this.type.getValue());
        oprot.writeFieldEnd();
      }
      if (this.contents != null) {
        oprot.writeFieldBegin(CONTENTS_FIELD_DESC);
        this.contents.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("createChatRoomAnnouncement_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("chatRoomMid:");
      if (this.chatRoomMid == null) {
        sb.append("null");
      } else {
        sb.append(this.chatRoomMid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contents:");
      if (this.contents == null) {
        sb.append("null");
      } else {
        sb.append(this.contents);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createChatRoomAnnouncement_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("createChatRoomAnnouncement_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private ChatRoomAnnouncement success;
    private TalkException e;

    // isset id assignments

    public createChatRoomAnnouncement_result() {
    }

    public createChatRoomAnnouncement_result(
      ChatRoomAnnouncement success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createChatRoomAnnouncement_result(createChatRoomAnnouncement_result other) {
      if (other.isSetSuccess()) {
        this.success = new ChatRoomAnnouncement(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public createChatRoomAnnouncement_result deepCopy() {
      return new createChatRoomAnnouncement_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ChatRoomAnnouncement getSuccess() {
      return this.success;
    }

    public void setSuccess(ChatRoomAnnouncement success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createChatRoomAnnouncement_result)
        return this.equals((createChatRoomAnnouncement_result)that);
      return false;
    }

    public boolean equals(createChatRoomAnnouncement_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      createChatRoomAnnouncement_result other = (createChatRoomAnnouncement_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new ChatRoomAnnouncement();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("createChatRoomAnnouncement_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class removeChatRoomAnnouncement_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("removeChatRoomAnnouncement_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField CHAT_ROOM_MID_FIELD_DESC = new TField("chatRoomMid", TType.STRING, (short)2);
    private static final TField ANNOUNCEMENT_SEQ_FIELD_DESC = new TField("announcementSeq", TType.I64, (short)3);

    private int reqSeq;
    private String chatRoomMid;
    private long announcementSeq;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private static final int __ANNOUNCEMENTSEQ_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public removeChatRoomAnnouncement_args() {
    }

    public removeChatRoomAnnouncement_args(
      int reqSeq,
      String chatRoomMid,
      long announcementSeq)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.chatRoomMid = chatRoomMid;
      this.announcementSeq = announcementSeq;
      setAnnouncementSeqIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeChatRoomAnnouncement_args(removeChatRoomAnnouncement_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetChatRoomMid()) {
        this.chatRoomMid = other.chatRoomMid;
      }
      this.announcementSeq = other.announcementSeq;
    }

    public removeChatRoomAnnouncement_args deepCopy() {
      return new removeChatRoomAnnouncement_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.chatRoomMid = null;
      setAnnouncementSeqIsSet(false);
      this.announcementSeq = 0;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public String getChatRoomMid() {
      return this.chatRoomMid;
    }

    public void setChatRoomMid(String chatRoomMid) {
      this.chatRoomMid = chatRoomMid;
    }

    public void unsetChatRoomMid() {
      this.chatRoomMid = null;
    }

    /** Returns true if field chatRoomMid is set (has been assigned a value) and false otherwise */
    public boolean isSetChatRoomMid() {
      return this.chatRoomMid != null;
    }

    public void setChatRoomMidIsSet(boolean value) {
      if (!value) {
        this.chatRoomMid = null;
      }
    }

    public long getAnnouncementSeq() {
      return this.announcementSeq;
    }

    public void setAnnouncementSeq(long announcementSeq) {
      this.announcementSeq = announcementSeq;
      setAnnouncementSeqIsSet(true);
    }

    public void unsetAnnouncementSeq() {
      __isset_vector[__ANNOUNCEMENTSEQ_ISSET_ID] = false;
    }

    /** Returns true if field announcementSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetAnnouncementSeq() {
      return __isset_vector[__ANNOUNCEMENTSEQ_ISSET_ID];
    }

    public void setAnnouncementSeqIsSet(boolean value) {
      __isset_vector[__ANNOUNCEMENTSEQ_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeChatRoomAnnouncement_args)
        return this.equals((removeChatRoomAnnouncement_args)that);
      return false;
    }

    public boolean equals(removeChatRoomAnnouncement_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_chatRoomMid = true && this.isSetChatRoomMid();
      boolean that_present_chatRoomMid = true && that.isSetChatRoomMid();
      if (this_present_chatRoomMid || that_present_chatRoomMid) {
        if (!(this_present_chatRoomMid && that_present_chatRoomMid))
          return false;
        if (!this.chatRoomMid.equals(that.chatRoomMid))
          return false;
      }

      boolean this_present_announcementSeq = true;
      boolean that_present_announcementSeq = true;
      if (this_present_announcementSeq || that_present_announcementSeq) {
        if (!(this_present_announcementSeq && that_present_announcementSeq))
          return false;
        if (this.announcementSeq != that.announcementSeq)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      removeChatRoomAnnouncement_args other = (removeChatRoomAnnouncement_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetChatRoomMid(), other.isSetChatRoomMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChatRoomMid()) {
        lastComparison = TBaseHelper.compareTo(this.chatRoomMid, other.chatRoomMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetAnnouncementSeq(), other.isSetAnnouncementSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAnnouncementSeq()) {
        lastComparison = TBaseHelper.compareTo(this.announcementSeq, other.announcementSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CHAT_ROOM_MID
            if (field.type == TType.STRING) {
              this.chatRoomMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ANNOUNCEMENT_SEQ
            if (field.type == TType.I64) {
              this.announcementSeq = iprot.readI64();
              setAnnouncementSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.chatRoomMid != null) {
        oprot.writeFieldBegin(CHAT_ROOM_MID_FIELD_DESC);
        oprot.writeString(this.chatRoomMid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ANNOUNCEMENT_SEQ_FIELD_DESC);
      oprot.writeI64(this.announcementSeq);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("removeChatRoomAnnouncement_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("chatRoomMid:");
      if (this.chatRoomMid == null) {
        sb.append("null");
      } else {
        sb.append(this.chatRoomMid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("announcementSeq:");
      sb.append(this.announcementSeq);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class removeChatRoomAnnouncement_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("removeChatRoomAnnouncement_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public removeChatRoomAnnouncement_result() {
    }

    public removeChatRoomAnnouncement_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeChatRoomAnnouncement_result(removeChatRoomAnnouncement_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public removeChatRoomAnnouncement_result deepCopy() {
      return new removeChatRoomAnnouncement_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeChatRoomAnnouncement_result)
        return this.equals((removeChatRoomAnnouncement_result)that);
      return false;
    }

    public boolean equals(removeChatRoomAnnouncement_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      removeChatRoomAnnouncement_result other = (removeChatRoomAnnouncement_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("removeChatRoomAnnouncement_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class unsendMessage_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("unsendMessage_args");

    private static final TField SEQ_FIELD_DESC = new TField("seq", TType.I32, (short)1);
    private static final TField MESSAGE_ID_FIELD_DESC = new TField("messageId", TType.STRING, (short)2);

    private int seq;
    private String messageId;

    // isset id assignments
    private static final int __SEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public unsendMessage_args() {
    }

    public unsendMessage_args(
      int seq,
      String messageId)
    {
      this();
      this.seq = seq;
      setSeqIsSet(true);
      this.messageId = messageId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unsendMessage_args(unsendMessage_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.seq = other.seq;
      if (other.isSetMessageId()) {
        this.messageId = other.messageId;
      }
    }

    public unsendMessage_args deepCopy() {
      return new unsendMessage_args(this);
    }

    public void clear() {
      setSeqIsSet(false);
      this.seq = 0;
      this.messageId = null;
    }

    public int getSeq() {
      return this.seq;
    }

    public void setSeq(int seq) {
      this.seq = seq;
      setSeqIsSet(true);
    }

    public void unsetSeq() {
      __isset_vector[__SEQ_ISSET_ID] = false;
    }

    /** Returns true if field seq is set (has been assigned a value) and false otherwise */
    public boolean isSetSeq() {
      return __isset_vector[__SEQ_ISSET_ID];
    }

    public void setSeqIsSet(boolean value) {
      __isset_vector[__SEQ_ISSET_ID] = value;
    }

    public String getMessageId() {
      return this.messageId;
    }

    public void setMessageId(String messageId) {
      this.messageId = messageId;
    }

    public void unsetMessageId() {
      this.messageId = null;
    }

    /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageId() {
      return this.messageId != null;
    }

    public void setMessageIdIsSet(boolean value) {
      if (!value) {
        this.messageId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unsendMessage_args)
        return this.equals((unsendMessage_args)that);
      return false;
    }

    public boolean equals(unsendMessage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_seq = true;
      boolean that_present_seq = true;
      if (this_present_seq || that_present_seq) {
        if (!(this_present_seq && that_present_seq))
          return false;
        if (this.seq != that.seq)
          return false;
      }

      boolean this_present_messageId = true && this.isSetMessageId();
      boolean that_present_messageId = true && that.isSetMessageId();
      if (this_present_messageId || that_present_messageId) {
        if (!(this_present_messageId && that_present_messageId))
          return false;
        if (!this.messageId.equals(that.messageId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      unsendMessage_args other = (unsendMessage_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSeq(), other.isSetSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeq()) {
        lastComparison = TBaseHelper.compareTo(this.seq, other.seq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMessageId(), other.isSetMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageId()) {
        lastComparison = TBaseHelper.compareTo(this.messageId, other.messageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SEQ
            if (field.type == TType.I32) {
              this.seq = iprot.readI32();
              setSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MESSAGE_ID
            if (field.type == TType.STRING) {
              this.messageId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQ_FIELD_DESC);
      oprot.writeI32(this.seq);
      oprot.writeFieldEnd();
      if (this.messageId != null) {
        oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
        oprot.writeString(this.messageId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("unsendMessage_args(");
      boolean first = true;

      sb.append("seq:");
      sb.append(this.seq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("messageId:");
      if (this.messageId == null) {
        sb.append("null");
      } else {
        sb.append(this.messageId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class unsendMessage_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("unsendMessage_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public unsendMessage_result() {
    }

    public unsendMessage_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unsendMessage_result(unsendMessage_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public unsendMessage_result deepCopy() {
      return new unsendMessage_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unsendMessage_result)
        return this.equals((unsendMessage_result)that);
      return false;
    }

    public boolean equals(unsendMessage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      unsendMessage_result other = (unsendMessage_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("unsendMessage_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getGroupWithoutMembers_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getGroupWithoutMembers_args");

    private static final TField GROUP_ID_FIELD_DESC = new TField("groupId", TType.STRING, (short)2);

    private String groupId;

    // isset id assignments

    public getGroupWithoutMembers_args() {
    }

    public getGroupWithoutMembers_args(
      String groupId)
    {
      this();
      this.groupId = groupId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroupWithoutMembers_args(getGroupWithoutMembers_args other) {
      if (other.isSetGroupId()) {
        this.groupId = other.groupId;
      }
    }

    public getGroupWithoutMembers_args deepCopy() {
      return new getGroupWithoutMembers_args(this);
    }

    public void clear() {
      this.groupId = null;
    }

    public String getGroupId() {
      return this.groupId;
    }

    public void setGroupId(String groupId) {
      this.groupId = groupId;
    }

    public void unsetGroupId() {
      this.groupId = null;
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return this.groupId != null;
    }

    public void setGroupIdIsSet(boolean value) {
      if (!value) {
        this.groupId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroupWithoutMembers_args)
        return this.equals((getGroupWithoutMembers_args)that);
      return false;
    }

    public boolean equals(getGroupWithoutMembers_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_groupId = true && this.isSetGroupId();
      boolean that_present_groupId = true && that.isSetGroupId();
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (!this.groupId.equals(that.groupId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getGroupWithoutMembers_args other = (getGroupWithoutMembers_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetGroupId(), other.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = TBaseHelper.compareTo(this.groupId, other.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // GROUP_ID
            if (field.type == TType.STRING) {
              this.groupId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.groupId != null) {
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeString(this.groupId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getGroupWithoutMembers_args(");
      boolean first = true;

      sb.append("groupId:");
      if (this.groupId == null) {
        sb.append("null");
      } else {
        sb.append(this.groupId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getGroupWithoutMembers_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getGroupWithoutMembers_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Group success;
    private TalkException e;

    // isset id assignments

    public getGroupWithoutMembers_result() {
    }

    public getGroupWithoutMembers_result(
      Group success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroupWithoutMembers_result(getGroupWithoutMembers_result other) {
      if (other.isSetSuccess()) {
        this.success = new Group(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getGroupWithoutMembers_result deepCopy() {
      return new getGroupWithoutMembers_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Group getSuccess() {
      return this.success;
    }

    public void setSuccess(Group success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroupWithoutMembers_result)
        return this.equals((getGroupWithoutMembers_result)that);
      return false;
    }

    public boolean equals(getGroupWithoutMembers_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getGroupWithoutMembers_result other = (getGroupWithoutMembers_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Group();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getGroupWithoutMembers_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class requestResendMessage_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("requestResendMessage_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField SENDER_MID_FIELD_DESC = new TField("senderMid", TType.STRING, (short)2);
    private static final TField MESSAGE_ID_FIELD_DESC = new TField("messageId", TType.STRING, (short)3);

    private int reqSeq;
    private String senderMid;
    private String messageId;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public requestResendMessage_args() {
    }

    public requestResendMessage_args(
      int reqSeq,
      String senderMid,
      String messageId)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.senderMid = senderMid;
      this.messageId = messageId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestResendMessage_args(requestResendMessage_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetSenderMid()) {
        this.senderMid = other.senderMid;
      }
      if (other.isSetMessageId()) {
        this.messageId = other.messageId;
      }
    }

    public requestResendMessage_args deepCopy() {
      return new requestResendMessage_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.senderMid = null;
      this.messageId = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public String getSenderMid() {
      return this.senderMid;
    }

    public void setSenderMid(String senderMid) {
      this.senderMid = senderMid;
    }

    public void unsetSenderMid() {
      this.senderMid = null;
    }

    /** Returns true if field senderMid is set (has been assigned a value) and false otherwise */
    public boolean isSetSenderMid() {
      return this.senderMid != null;
    }

    public void setSenderMidIsSet(boolean value) {
      if (!value) {
        this.senderMid = null;
      }
    }

    public String getMessageId() {
      return this.messageId;
    }

    public void setMessageId(String messageId) {
      this.messageId = messageId;
    }

    public void unsetMessageId() {
      this.messageId = null;
    }

    /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageId() {
      return this.messageId != null;
    }

    public void setMessageIdIsSet(boolean value) {
      if (!value) {
        this.messageId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestResendMessage_args)
        return this.equals((requestResendMessage_args)that);
      return false;
    }

    public boolean equals(requestResendMessage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_senderMid = true && this.isSetSenderMid();
      boolean that_present_senderMid = true && that.isSetSenderMid();
      if (this_present_senderMid || that_present_senderMid) {
        if (!(this_present_senderMid && that_present_senderMid))
          return false;
        if (!this.senderMid.equals(that.senderMid))
          return false;
      }

      boolean this_present_messageId = true && this.isSetMessageId();
      boolean that_present_messageId = true && that.isSetMessageId();
      if (this_present_messageId || that_present_messageId) {
        if (!(this_present_messageId && that_present_messageId))
          return false;
        if (!this.messageId.equals(that.messageId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      requestResendMessage_args other = (requestResendMessage_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSenderMid(), other.isSetSenderMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSenderMid()) {
        lastComparison = TBaseHelper.compareTo(this.senderMid, other.senderMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMessageId(), other.isSetMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageId()) {
        lastComparison = TBaseHelper.compareTo(this.messageId, other.messageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SENDER_MID
            if (field.type == TType.STRING) {
              this.senderMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // MESSAGE_ID
            if (field.type == TType.STRING) {
              this.messageId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.senderMid != null) {
        oprot.writeFieldBegin(SENDER_MID_FIELD_DESC);
        oprot.writeString(this.senderMid);
        oprot.writeFieldEnd();
      }
      if (this.messageId != null) {
        oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
        oprot.writeString(this.messageId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("requestResendMessage_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("senderMid:");
      if (this.senderMid == null) {
        sb.append("null");
      } else {
        sb.append(this.senderMid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("messageId:");
      if (this.messageId == null) {
        sb.append("null");
      } else {
        sb.append(this.messageId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class requestResendMessage_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("requestResendMessage_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public requestResendMessage_result() {
    }

    public requestResendMessage_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestResendMessage_result(requestResendMessage_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public requestResendMessage_result deepCopy() {
      return new requestResendMessage_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestResendMessage_result)
        return this.equals((requestResendMessage_result)that);
      return false;
    }

    public boolean equals(requestResendMessage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      requestResendMessage_result other = (requestResendMessage_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("requestResendMessage_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class respondResendMessage_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("respondResendMessage_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField RECEIVER_MID_FIELD_DESC = new TField("receiverMid", TType.STRING, (short)2);
    private static final TField ORIGINAL_MESSAGE_ID_FIELD_DESC = new TField("originalMessageId", TType.STRING, (short)3);
    private static final TField RESEND_MESSAGE_FIELD_DESC = new TField("resendMessage", TType.STRUCT, (short)4);
    private static final TField ERROR_CODE_FIELD_DESC = new TField("errorCode", TType.I32, (short)5);

    private int reqSeq;
    private String receiverMid;
    private String originalMessageId;
    private Message resendMessage;
    private ErrorCode errorCode;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public respondResendMessage_args() {
    }

    public respondResendMessage_args(
      int reqSeq,
      String receiverMid,
      String originalMessageId,
      Message resendMessage,
      ErrorCode errorCode)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.receiverMid = receiverMid;
      this.originalMessageId = originalMessageId;
      this.resendMessage = resendMessage;
      this.errorCode = errorCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public respondResendMessage_args(respondResendMessage_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetReceiverMid()) {
        this.receiverMid = other.receiverMid;
      }
      if (other.isSetOriginalMessageId()) {
        this.originalMessageId = other.originalMessageId;
      }
      if (other.isSetResendMessage()) {
        this.resendMessage = new Message(other.resendMessage);
      }
      if (other.isSetErrorCode()) {
        this.errorCode = other.errorCode;
      }
    }

    public respondResendMessage_args deepCopy() {
      return new respondResendMessage_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.receiverMid = null;
      this.originalMessageId = null;
      this.resendMessage = null;
      this.errorCode = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public String getReceiverMid() {
      return this.receiverMid;
    }

    public void setReceiverMid(String receiverMid) {
      this.receiverMid = receiverMid;
    }

    public void unsetReceiverMid() {
      this.receiverMid = null;
    }

    /** Returns true if field receiverMid is set (has been assigned a value) and false otherwise */
    public boolean isSetReceiverMid() {
      return this.receiverMid != null;
    }

    public void setReceiverMidIsSet(boolean value) {
      if (!value) {
        this.receiverMid = null;
      }
    }

    public String getOriginalMessageId() {
      return this.originalMessageId;
    }

    public void setOriginalMessageId(String originalMessageId) {
      this.originalMessageId = originalMessageId;
    }

    public void unsetOriginalMessageId() {
      this.originalMessageId = null;
    }

    /** Returns true if field originalMessageId is set (has been assigned a value) and false otherwise */
    public boolean isSetOriginalMessageId() {
      return this.originalMessageId != null;
    }

    public void setOriginalMessageIdIsSet(boolean value) {
      if (!value) {
        this.originalMessageId = null;
      }
    }

    public Message getResendMessage() {
      return this.resendMessage;
    }

    public void setResendMessage(Message resendMessage) {
      this.resendMessage = resendMessage;
    }

    public void unsetResendMessage() {
      this.resendMessage = null;
    }

    /** Returns true if field resendMessage is set (has been assigned a value) and false otherwise */
    public boolean isSetResendMessage() {
      return this.resendMessage != null;
    }

    public void setResendMessageIsSet(boolean value) {
      if (!value) {
        this.resendMessage = null;
      }
    }

    /**
     * 
     * @see ErrorCode
     */
    public ErrorCode getErrorCode() {
      return this.errorCode;
    }

    /**
     * 
     * @see ErrorCode
     */
    public void setErrorCode(ErrorCode errorCode) {
      this.errorCode = errorCode;
    }

    public void unsetErrorCode() {
      this.errorCode = null;
    }

    /** Returns true if field errorCode is set (has been assigned a value) and false otherwise */
    public boolean isSetErrorCode() {
      return this.errorCode != null;
    }

    public void setErrorCodeIsSet(boolean value) {
      if (!value) {
        this.errorCode = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof respondResendMessage_args)
        return this.equals((respondResendMessage_args)that);
      return false;
    }

    public boolean equals(respondResendMessage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_receiverMid = true && this.isSetReceiverMid();
      boolean that_present_receiverMid = true && that.isSetReceiverMid();
      if (this_present_receiverMid || that_present_receiverMid) {
        if (!(this_present_receiverMid && that_present_receiverMid))
          return false;
        if (!this.receiverMid.equals(that.receiverMid))
          return false;
      }

      boolean this_present_originalMessageId = true && this.isSetOriginalMessageId();
      boolean that_present_originalMessageId = true && that.isSetOriginalMessageId();
      if (this_present_originalMessageId || that_present_originalMessageId) {
        if (!(this_present_originalMessageId && that_present_originalMessageId))
          return false;
        if (!this.originalMessageId.equals(that.originalMessageId))
          return false;
      }

      boolean this_present_resendMessage = true && this.isSetResendMessage();
      boolean that_present_resendMessage = true && that.isSetResendMessage();
      if (this_present_resendMessage || that_present_resendMessage) {
        if (!(this_present_resendMessage && that_present_resendMessage))
          return false;
        if (!this.resendMessage.equals(that.resendMessage))
          return false;
      }

      boolean this_present_errorCode = true && this.isSetErrorCode();
      boolean that_present_errorCode = true && that.isSetErrorCode();
      if (this_present_errorCode || that_present_errorCode) {
        if (!(this_present_errorCode && that_present_errorCode))
          return false;
        if (!this.errorCode.equals(that.errorCode))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      respondResendMessage_args other = (respondResendMessage_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetReceiverMid(), other.isSetReceiverMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReceiverMid()) {
        lastComparison = TBaseHelper.compareTo(this.receiverMid, other.receiverMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetOriginalMessageId(), other.isSetOriginalMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOriginalMessageId()) {
        lastComparison = TBaseHelper.compareTo(this.originalMessageId, other.originalMessageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetResendMessage(), other.isSetResendMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetResendMessage()) {
        lastComparison = this.resendMessage.compareTo(other.resendMessage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetErrorCode(), other.isSetErrorCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErrorCode()) {
        lastComparison = TBaseHelper.compareTo(this.errorCode, other.errorCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // RECEIVER_MID
            if (field.type == TType.STRING) {
              this.receiverMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ORIGINAL_MESSAGE_ID
            if (field.type == TType.STRING) {
              this.originalMessageId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // RESEND_MESSAGE
            if (field.type == TType.STRUCT) {
              this.resendMessage = new Message();
              this.resendMessage.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ERROR_CODE
            if (field.type == TType.I32) {
              this.errorCode = ErrorCode.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.receiverMid != null) {
        oprot.writeFieldBegin(RECEIVER_MID_FIELD_DESC);
        oprot.writeString(this.receiverMid);
        oprot.writeFieldEnd();
      }
      if (this.originalMessageId != null) {
        oprot.writeFieldBegin(ORIGINAL_MESSAGE_ID_FIELD_DESC);
        oprot.writeString(this.originalMessageId);
        oprot.writeFieldEnd();
      }
      if (this.resendMessage != null) {
        oprot.writeFieldBegin(RESEND_MESSAGE_FIELD_DESC);
        this.resendMessage.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.errorCode != null) {
        oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
        oprot.writeI32(this.errorCode.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("respondResendMessage_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("receiverMid:");
      if (this.receiverMid == null) {
        sb.append("null");
      } else {
        sb.append(this.receiverMid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("originalMessageId:");
      if (this.originalMessageId == null) {
        sb.append("null");
      } else {
        sb.append(this.originalMessageId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("resendMessage:");
      if (this.resendMessage == null) {
        sb.append("null");
      } else {
        sb.append(this.resendMessage);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("errorCode:");
      if (this.errorCode == null) {
        sb.append("null");
      } else {
        sb.append(this.errorCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class respondResendMessage_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("respondResendMessage_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public respondResendMessage_result() {
    }

    public respondResendMessage_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public respondResendMessage_result(respondResendMessage_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public respondResendMessage_result deepCopy() {
      return new respondResendMessage_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof respondResendMessage_result)
        return this.equals((respondResendMessage_result)that);
      return false;
    }

    public boolean equals(respondResendMessage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      respondResendMessage_result other = (respondResendMessage_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("respondResendMessage_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class acceptGroupInvitation_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("acceptGroupInvitation_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField GROUP_ID_FIELD_DESC = new TField("groupId", TType.STRING, (short)2);

    private int reqSeq;
    private String groupId;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public acceptGroupInvitation_args() {
    }

    public acceptGroupInvitation_args(
      int reqSeq,
      String groupId)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.groupId = groupId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public acceptGroupInvitation_args(acceptGroupInvitation_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetGroupId()) {
        this.groupId = other.groupId;
      }
    }

    public acceptGroupInvitation_args deepCopy() {
      return new acceptGroupInvitation_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.groupId = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public String getGroupId() {
      return this.groupId;
    }

    public void setGroupId(String groupId) {
      this.groupId = groupId;
    }

    public void unsetGroupId() {
      this.groupId = null;
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return this.groupId != null;
    }

    public void setGroupIdIsSet(boolean value) {
      if (!value) {
        this.groupId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof acceptGroupInvitation_args)
        return this.equals((acceptGroupInvitation_args)that);
      return false;
    }

    public boolean equals(acceptGroupInvitation_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_groupId = true && this.isSetGroupId();
      boolean that_present_groupId = true && that.isSetGroupId();
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (!this.groupId.equals(that.groupId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      acceptGroupInvitation_args other = (acceptGroupInvitation_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGroupId(), other.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = TBaseHelper.compareTo(this.groupId, other.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GROUP_ID
            if (field.type == TType.STRING) {
              this.groupId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.groupId != null) {
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeString(this.groupId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("acceptGroupInvitation_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("groupId:");
      if (this.groupId == null) {
        sb.append("null");
      } else {
        sb.append(this.groupId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class acceptGroupInvitation_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("acceptGroupInvitation_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public acceptGroupInvitation_result() {
    }

    public acceptGroupInvitation_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public acceptGroupInvitation_result(acceptGroupInvitation_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public acceptGroupInvitation_result deepCopy() {
      return new acceptGroupInvitation_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof acceptGroupInvitation_result)
        return this.equals((acceptGroupInvitation_result)that);
      return false;
    }

    public boolean equals(acceptGroupInvitation_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      acceptGroupInvitation_result other = (acceptGroupInvitation_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("acceptGroupInvitation_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class acceptGroupInvitationByTicket_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("acceptGroupInvitationByTicket_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField GROUP_MID_FIELD_DESC = new TField("GroupMid", TType.STRING, (short)2);
    private static final TField TICKET_ID_FIELD_DESC = new TField("ticketId", TType.STRING, (short)3);

    private int reqSeq;
    private String GroupMid;
    private String ticketId;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public acceptGroupInvitationByTicket_args() {
    }

    public acceptGroupInvitationByTicket_args(
      int reqSeq,
      String GroupMid,
      String ticketId)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.GroupMid = GroupMid;
      this.ticketId = ticketId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public acceptGroupInvitationByTicket_args(acceptGroupInvitationByTicket_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetGroupMid()) {
        this.GroupMid = other.GroupMid;
      }
      if (other.isSetTicketId()) {
        this.ticketId = other.ticketId;
      }
    }

    public acceptGroupInvitationByTicket_args deepCopy() {
      return new acceptGroupInvitationByTicket_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.GroupMid = null;
      this.ticketId = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public String getGroupMid() {
      return this.GroupMid;
    }

    public void setGroupMid(String GroupMid) {
      this.GroupMid = GroupMid;
    }

    public void unsetGroupMid() {
      this.GroupMid = null;
    }

    /** Returns true if field GroupMid is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupMid() {
      return this.GroupMid != null;
    }

    public void setGroupMidIsSet(boolean value) {
      if (!value) {
        this.GroupMid = null;
      }
    }

    public String getTicketId() {
      return this.ticketId;
    }

    public void setTicketId(String ticketId) {
      this.ticketId = ticketId;
    }

    public void unsetTicketId() {
      this.ticketId = null;
    }

    /** Returns true if field ticketId is set (has been assigned a value) and false otherwise */
    public boolean isSetTicketId() {
      return this.ticketId != null;
    }

    public void setTicketIdIsSet(boolean value) {
      if (!value) {
        this.ticketId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof acceptGroupInvitationByTicket_args)
        return this.equals((acceptGroupInvitationByTicket_args)that);
      return false;
    }

    public boolean equals(acceptGroupInvitationByTicket_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_GroupMid = true && this.isSetGroupMid();
      boolean that_present_GroupMid = true && that.isSetGroupMid();
      if (this_present_GroupMid || that_present_GroupMid) {
        if (!(this_present_GroupMid && that_present_GroupMid))
          return false;
        if (!this.GroupMid.equals(that.GroupMid))
          return false;
      }

      boolean this_present_ticketId = true && this.isSetTicketId();
      boolean that_present_ticketId = true && that.isSetTicketId();
      if (this_present_ticketId || that_present_ticketId) {
        if (!(this_present_ticketId && that_present_ticketId))
          return false;
        if (!this.ticketId.equals(that.ticketId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      acceptGroupInvitationByTicket_args other = (acceptGroupInvitationByTicket_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGroupMid(), other.isSetGroupMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupMid()) {
        lastComparison = TBaseHelper.compareTo(this.GroupMid, other.GroupMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetTicketId(), other.isSetTicketId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTicketId()) {
        lastComparison = TBaseHelper.compareTo(this.ticketId, other.ticketId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GROUP_MID
            if (field.type == TType.STRING) {
              this.GroupMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TICKET_ID
            if (field.type == TType.STRING) {
              this.ticketId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.GroupMid != null) {
        oprot.writeFieldBegin(GROUP_MID_FIELD_DESC);
        oprot.writeString(this.GroupMid);
        oprot.writeFieldEnd();
      }
      if (this.ticketId != null) {
        oprot.writeFieldBegin(TICKET_ID_FIELD_DESC);
        oprot.writeString(this.ticketId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("acceptGroupInvitationByTicket_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("GroupMid:");
      if (this.GroupMid == null) {
        sb.append("null");
      } else {
        sb.append(this.GroupMid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ticketId:");
      if (this.ticketId == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class acceptGroupInvitationByTicket_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("acceptGroupInvitationByTicket_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public acceptGroupInvitationByTicket_result() {
    }

    public acceptGroupInvitationByTicket_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public acceptGroupInvitationByTicket_result(acceptGroupInvitationByTicket_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public acceptGroupInvitationByTicket_result deepCopy() {
      return new acceptGroupInvitationByTicket_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof acceptGroupInvitationByTicket_result)
        return this.equals((acceptGroupInvitationByTicket_result)that);
      return false;
    }

    public boolean equals(acceptGroupInvitationByTicket_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      acceptGroupInvitationByTicket_result other = (acceptGroupInvitationByTicket_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("acceptGroupInvitationByTicket_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class acceptProximityMatches_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("acceptProximityMatches_args");

    private static final TField SESSION_ID_FIELD_DESC = new TField("sessionId", TType.STRING, (short)2);
    private static final TField IDS_FIELD_DESC = new TField("ids", TType.SET, (short)3);

    private String sessionId;
    private Hashtable ids;

    // isset id assignments

    public acceptProximityMatches_args() {
    }

    public acceptProximityMatches_args(
      String sessionId,
      Hashtable ids)
    {
      this();
      this.sessionId = sessionId;
      this.ids = ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public acceptProximityMatches_args(acceptProximityMatches_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
      if (other.isSetIds()) {
        Hashtable __this__ids = new Hashtable();
        for (Enumeration other_enum = other.ids.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__ids.addElement(other_element);
        }
        this.ids = __this__ids;
      }
    }

    public acceptProximityMatches_args deepCopy() {
      return new acceptProximityMatches_args(this);
    }

    public void clear() {
      this.sessionId = null;
      this.ids = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public void setSessionId(String sessionId) {
      this.sessionId = sessionId;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public Enumeration getIdsEnumeration() {
      return (this.ids == null) ? null : this.ids.elements();
    }

    public void addToIds(String elem) {
      if (this.ids == null) {
        this.ids = new Hashtable();
      }
      this.ids.put(elem, elem);
    }

    public Hashtable getIds() {
      return this.ids;
    }

    public void setIds(Hashtable ids) {
      this.ids = ids;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof acceptProximityMatches_args)
        return this.equals((acceptProximityMatches_args)that);
      return false;
    }

    public boolean equals(acceptProximityMatches_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      acceptProximityMatches_args other = (acceptProximityMatches_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSessionId(), other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetIds(), other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // SESSION_ID
            if (field.type == TType.STRING) {
              this.sessionId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // IDS
            if (field.type == TType.SET) {
              {
                TSet _set782 = iprot.readSetBegin();
                this.ids = new Hashtable(2*_set782.size);
                for (int _i783 = 0; _i783 < _set782.size; ++_i783)
                {
                  String _elem784;
                  _elem784 = iprot.readString();
                  this.ids.put(_elem784, _elem784);
                }
                iprot.readSetEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.sessionId != null) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeString(this.sessionId);
        oprot.writeFieldEnd();
      }
      if (this.ids != null) {
        oprot.writeFieldBegin(IDS_FIELD_DESC);
        {
          oprot.writeSetBegin(new TSet(TType.STRING, this.ids.size()));
          for (Enumeration _iter785_enum = this.ids.keys(); _iter785_enum.hasMoreElements(); )           {
            String _iter785 = (String)_iter785_enum.nextElement();
            oprot.writeString(_iter785);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("acceptProximityMatches_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class acceptProximityMatches_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("acceptProximityMatches_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public acceptProximityMatches_result() {
    }

    public acceptProximityMatches_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public acceptProximityMatches_result(acceptProximityMatches_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public acceptProximityMatches_result deepCopy() {
      return new acceptProximityMatches_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof acceptProximityMatches_result)
        return this.equals((acceptProximityMatches_result)that);
      return false;
    }

    public boolean equals(acceptProximityMatches_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      acceptProximityMatches_result other = (acceptProximityMatches_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("acceptProximityMatches_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class acquireCallRoute_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("acquireCallRoute_args");

    private static final TField TO_FIELD_DESC = new TField("to", TType.STRING, (short)2);

    private String to;

    // isset id assignments

    public acquireCallRoute_args() {
    }

    public acquireCallRoute_args(
      String to)
    {
      this();
      this.to = to;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public acquireCallRoute_args(acquireCallRoute_args other) {
      if (other.isSetTo()) {
        this.to = other.to;
      }
    }

    public acquireCallRoute_args deepCopy() {
      return new acquireCallRoute_args(this);
    }

    public void clear() {
      this.to = null;
    }

    public String getTo() {
      return this.to;
    }

    public void setTo(String to) {
      this.to = to;
    }

    public void unsetTo() {
      this.to = null;
    }

    /** Returns true if field to is set (has been assigned a value) and false otherwise */
    public boolean isSetTo() {
      return this.to != null;
    }

    public void setToIsSet(boolean value) {
      if (!value) {
        this.to = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof acquireCallRoute_args)
        return this.equals((acquireCallRoute_args)that);
      return false;
    }

    public boolean equals(acquireCallRoute_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_to = true && this.isSetTo();
      boolean that_present_to = true && that.isSetTo();
      if (this_present_to || that_present_to) {
        if (!(this_present_to && that_present_to))
          return false;
        if (!this.to.equals(that.to))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      acquireCallRoute_args other = (acquireCallRoute_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetTo(), other.isSetTo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTo()) {
        lastComparison = TBaseHelper.compareTo(this.to, other.to);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // TO
            if (field.type == TType.STRING) {
              this.to = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.to != null) {
        oprot.writeFieldBegin(TO_FIELD_DESC);
        oprot.writeString(this.to);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("acquireCallRoute_args(");
      boolean first = true;

      sb.append("to:");
      if (this.to == null) {
        sb.append("null");
      } else {
        sb.append(this.to);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class acquireCallRoute_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("acquireCallRoute_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public acquireCallRoute_result() {
    }

    public acquireCallRoute_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public acquireCallRoute_result(acquireCallRoute_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public acquireCallRoute_result deepCopy() {
      return new acquireCallRoute_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof acquireCallRoute_result)
        return this.equals((acquireCallRoute_result)that);
      return false;
    }

    public boolean equals(acquireCallRoute_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      acquireCallRoute_result other = (acquireCallRoute_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list786 = iprot.readListBegin();
                this.success = new Vector(_list786.size);
                for (int _i787 = 0; _i787 < _list786.size; ++_i787)
                {
                  String _elem788;
                  _elem788 = iprot.readString();
                  this.success.addElement(_elem788);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter789_enum = this.success.elements(); _iter789_enum.hasMoreElements(); )           {
            String _iter789 = (String)_iter789_enum.nextElement();
            oprot.writeString(_iter789);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("acquireCallRoute_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class acquireCallTicket_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("acquireCallTicket_args");

    private static final TField TO_FIELD_DESC = new TField("to", TType.STRING, (short)2);

    private String to;

    // isset id assignments

    public acquireCallTicket_args() {
    }

    public acquireCallTicket_args(
      String to)
    {
      this();
      this.to = to;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public acquireCallTicket_args(acquireCallTicket_args other) {
      if (other.isSetTo()) {
        this.to = other.to;
      }
    }

    public acquireCallTicket_args deepCopy() {
      return new acquireCallTicket_args(this);
    }

    public void clear() {
      this.to = null;
    }

    public String getTo() {
      return this.to;
    }

    public void setTo(String to) {
      this.to = to;
    }

    public void unsetTo() {
      this.to = null;
    }

    /** Returns true if field to is set (has been assigned a value) and false otherwise */
    public boolean isSetTo() {
      return this.to != null;
    }

    public void setToIsSet(boolean value) {
      if (!value) {
        this.to = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof acquireCallTicket_args)
        return this.equals((acquireCallTicket_args)that);
      return false;
    }

    public boolean equals(acquireCallTicket_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_to = true && this.isSetTo();
      boolean that_present_to = true && that.isSetTo();
      if (this_present_to || that_present_to) {
        if (!(this_present_to && that_present_to))
          return false;
        if (!this.to.equals(that.to))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      acquireCallTicket_args other = (acquireCallTicket_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetTo(), other.isSetTo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTo()) {
        lastComparison = TBaseHelper.compareTo(this.to, other.to);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // TO
            if (field.type == TType.STRING) {
              this.to = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.to != null) {
        oprot.writeFieldBegin(TO_FIELD_DESC);
        oprot.writeString(this.to);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("acquireCallTicket_args(");
      boolean first = true;

      sb.append("to:");
      if (this.to == null) {
        sb.append("null");
      } else {
        sb.append(this.to);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class acquireCallTicket_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("acquireCallTicket_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public acquireCallTicket_result() {
    }

    public acquireCallTicket_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public acquireCallTicket_result(acquireCallTicket_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public acquireCallTicket_result deepCopy() {
      return new acquireCallTicket_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof acquireCallTicket_result)
        return this.equals((acquireCallTicket_result)that);
      return false;
    }

    public boolean equals(acquireCallTicket_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      acquireCallTicket_result other = (acquireCallTicket_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("acquireCallTicket_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class acquireEncryptedAccessToken_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("acquireEncryptedAccessToken_args");

    private static final TField FEATURE_TYPE_FIELD_DESC = new TField("featureType", TType.I32, (short)2);

    private FeatureType featureType;

    // isset id assignments

    public acquireEncryptedAccessToken_args() {
    }

    public acquireEncryptedAccessToken_args(
      FeatureType featureType)
    {
      this();
      this.featureType = featureType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public acquireEncryptedAccessToken_args(acquireEncryptedAccessToken_args other) {
      if (other.isSetFeatureType()) {
        this.featureType = other.featureType;
      }
    }

    public acquireEncryptedAccessToken_args deepCopy() {
      return new acquireEncryptedAccessToken_args(this);
    }

    public void clear() {
      this.featureType = null;
    }

    /**
     * 
     * @see FeatureType
     */
    public FeatureType getFeatureType() {
      return this.featureType;
    }

    /**
     * 
     * @see FeatureType
     */
    public void setFeatureType(FeatureType featureType) {
      this.featureType = featureType;
    }

    public void unsetFeatureType() {
      this.featureType = null;
    }

    /** Returns true if field featureType is set (has been assigned a value) and false otherwise */
    public boolean isSetFeatureType() {
      return this.featureType != null;
    }

    public void setFeatureTypeIsSet(boolean value) {
      if (!value) {
        this.featureType = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof acquireEncryptedAccessToken_args)
        return this.equals((acquireEncryptedAccessToken_args)that);
      return false;
    }

    public boolean equals(acquireEncryptedAccessToken_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_featureType = true && this.isSetFeatureType();
      boolean that_present_featureType = true && that.isSetFeatureType();
      if (this_present_featureType || that_present_featureType) {
        if (!(this_present_featureType && that_present_featureType))
          return false;
        if (!this.featureType.equals(that.featureType))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      acquireEncryptedAccessToken_args other = (acquireEncryptedAccessToken_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetFeatureType(), other.isSetFeatureType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFeatureType()) {
        lastComparison = TBaseHelper.compareTo(this.featureType, other.featureType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // FEATURE_TYPE
            if (field.type == TType.I32) {
              this.featureType = FeatureType.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.featureType != null) {
        oprot.writeFieldBegin(FEATURE_TYPE_FIELD_DESC);
        oprot.writeI32(this.featureType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("acquireEncryptedAccessToken_args(");
      boolean first = true;

      sb.append("featureType:");
      if (this.featureType == null) {
        sb.append("null");
      } else {
        sb.append(this.featureType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class acquireEncryptedAccessToken_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("acquireEncryptedAccessToken_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public acquireEncryptedAccessToken_result() {
    }

    public acquireEncryptedAccessToken_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public acquireEncryptedAccessToken_result(acquireEncryptedAccessToken_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public acquireEncryptedAccessToken_result deepCopy() {
      return new acquireEncryptedAccessToken_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof acquireEncryptedAccessToken_result)
        return this.equals((acquireEncryptedAccessToken_result)that);
      return false;
    }

    public boolean equals(acquireEncryptedAccessToken_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      acquireEncryptedAccessToken_result other = (acquireEncryptedAccessToken_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("acquireEncryptedAccessToken_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class addSnsId_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("addSnsId_args");

    private static final TField SNS_ID_TYPE_FIELD_DESC = new TField("snsIdType", TType.I32, (short)2);
    private static final TField SNS_ACCESS_TOKEN_FIELD_DESC = new TField("snsAccessToken", TType.STRING, (short)3);

    private SnsIdType snsIdType;
    private String snsAccessToken;

    // isset id assignments

    public addSnsId_args() {
    }

    public addSnsId_args(
      SnsIdType snsIdType,
      String snsAccessToken)
    {
      this();
      this.snsIdType = snsIdType;
      this.snsAccessToken = snsAccessToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSnsId_args(addSnsId_args other) {
      if (other.isSetSnsIdType()) {
        this.snsIdType = other.snsIdType;
      }
      if (other.isSetSnsAccessToken()) {
        this.snsAccessToken = other.snsAccessToken;
      }
    }

    public addSnsId_args deepCopy() {
      return new addSnsId_args(this);
    }

    public void clear() {
      this.snsIdType = null;
      this.snsAccessToken = null;
    }

    /**
     * 
     * @see SnsIdType
     */
    public SnsIdType getSnsIdType() {
      return this.snsIdType;
    }

    /**
     * 
     * @see SnsIdType
     */
    public void setSnsIdType(SnsIdType snsIdType) {
      this.snsIdType = snsIdType;
    }

    public void unsetSnsIdType() {
      this.snsIdType = null;
    }

    /** Returns true if field snsIdType is set (has been assigned a value) and false otherwise */
    public boolean isSetSnsIdType() {
      return this.snsIdType != null;
    }

    public void setSnsIdTypeIsSet(boolean value) {
      if (!value) {
        this.snsIdType = null;
      }
    }

    public String getSnsAccessToken() {
      return this.snsAccessToken;
    }

    public void setSnsAccessToken(String snsAccessToken) {
      this.snsAccessToken = snsAccessToken;
    }

    public void unsetSnsAccessToken() {
      this.snsAccessToken = null;
    }

    /** Returns true if field snsAccessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSnsAccessToken() {
      return this.snsAccessToken != null;
    }

    public void setSnsAccessTokenIsSet(boolean value) {
      if (!value) {
        this.snsAccessToken = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSnsId_args)
        return this.equals((addSnsId_args)that);
      return false;
    }

    public boolean equals(addSnsId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_snsIdType = true && this.isSetSnsIdType();
      boolean that_present_snsIdType = true && that.isSetSnsIdType();
      if (this_present_snsIdType || that_present_snsIdType) {
        if (!(this_present_snsIdType && that_present_snsIdType))
          return false;
        if (!this.snsIdType.equals(that.snsIdType))
          return false;
      }

      boolean this_present_snsAccessToken = true && this.isSetSnsAccessToken();
      boolean that_present_snsAccessToken = true && that.isSetSnsAccessToken();
      if (this_present_snsAccessToken || that_present_snsAccessToken) {
        if (!(this_present_snsAccessToken && that_present_snsAccessToken))
          return false;
        if (!this.snsAccessToken.equals(that.snsAccessToken))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      addSnsId_args other = (addSnsId_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSnsIdType(), other.isSetSnsIdType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSnsIdType()) {
        lastComparison = TBaseHelper.compareTo(this.snsIdType, other.snsIdType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSnsAccessToken(), other.isSetSnsAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSnsAccessToken()) {
        lastComparison = TBaseHelper.compareTo(this.snsAccessToken, other.snsAccessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // SNS_ID_TYPE
            if (field.type == TType.I32) {
              this.snsIdType = SnsIdType.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SNS_ACCESS_TOKEN
            if (field.type == TType.STRING) {
              this.snsAccessToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.snsIdType != null) {
        oprot.writeFieldBegin(SNS_ID_TYPE_FIELD_DESC);
        oprot.writeI32(this.snsIdType.getValue());
        oprot.writeFieldEnd();
      }
      if (this.snsAccessToken != null) {
        oprot.writeFieldBegin(SNS_ACCESS_TOKEN_FIELD_DESC);
        oprot.writeString(this.snsAccessToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("addSnsId_args(");
      boolean first = true;

      sb.append("snsIdType:");
      if (this.snsIdType == null) {
        sb.append("null");
      } else {
        sb.append(this.snsIdType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("snsAccessToken:");
      if (this.snsAccessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.snsAccessToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class addSnsId_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("addSnsId_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public addSnsId_result() {
    }

    public addSnsId_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSnsId_result(addSnsId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public addSnsId_result deepCopy() {
      return new addSnsId_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addSnsId_result)
        return this.equals((addSnsId_result)that);
      return false;
    }

    public boolean equals(addSnsId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      addSnsId_result other = (addSnsId_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("addSnsId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class blockContact_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("blockContact_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField ID_FIELD_DESC = new TField("id", TType.STRING, (short)2);

    private int reqSeq;
    private String id;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public blockContact_args() {
    }

    public blockContact_args(
      int reqSeq,
      String id)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public blockContact_args(blockContact_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public blockContact_args deepCopy() {
      return new blockContact_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.id = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public String getId() {
      return this.id;
    }

    public void setId(String id) {
      this.id = id;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof blockContact_args)
        return this.equals((blockContact_args)that);
      return false;
    }

    public boolean equals(blockContact_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      blockContact_args other = (blockContact_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetId(), other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ID
            if (field.type == TType.STRING) {
              this.id = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(this.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("blockContact_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class blockContact_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("blockContact_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public blockContact_result() {
    }

    public blockContact_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public blockContact_result(blockContact_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public blockContact_result deepCopy() {
      return new blockContact_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof blockContact_result)
        return this.equals((blockContact_result)that);
      return false;
    }

    public boolean equals(blockContact_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      blockContact_result other = (blockContact_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("blockContact_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class blockRecommendation_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("blockRecommendation_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField ID_FIELD_DESC = new TField("id", TType.STRING, (short)2);

    private int reqSeq;
    private String id;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public blockRecommendation_args() {
    }

    public blockRecommendation_args(
      int reqSeq,
      String id)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public blockRecommendation_args(blockRecommendation_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public blockRecommendation_args deepCopy() {
      return new blockRecommendation_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.id = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public String getId() {
      return this.id;
    }

    public void setId(String id) {
      this.id = id;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof blockRecommendation_args)
        return this.equals((blockRecommendation_args)that);
      return false;
    }

    public boolean equals(blockRecommendation_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      blockRecommendation_args other = (blockRecommendation_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetId(), other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ID
            if (field.type == TType.STRING) {
              this.id = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(this.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("blockRecommendation_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class blockRecommendation_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("blockRecommendation_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public blockRecommendation_result() {
    }

    public blockRecommendation_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public blockRecommendation_result(blockRecommendation_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public blockRecommendation_result deepCopy() {
      return new blockRecommendation_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof blockRecommendation_result)
        return this.equals((blockRecommendation_result)that);
      return false;
    }

    public boolean equals(blockRecommendation_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      blockRecommendation_result other = (blockRecommendation_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("blockRecommendation_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class cancelGroupInvitation_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("cancelGroupInvitation_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField GROUP_ID_FIELD_DESC = new TField("groupId", TType.STRING, (short)2);
    private static final TField CONTACT_IDS_FIELD_DESC = new TField("contactIds", TType.LIST, (short)3);

    private int reqSeq;
    private String groupId;
    private Vector contactIds;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public cancelGroupInvitation_args() {
    }

    public cancelGroupInvitation_args(
      int reqSeq,
      String groupId,
      Vector contactIds)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.groupId = groupId;
      this.contactIds = contactIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelGroupInvitation_args(cancelGroupInvitation_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetGroupId()) {
        this.groupId = other.groupId;
      }
      if (other.isSetContactIds()) {
        Vector __this__contactIds = new Vector();
        for (Enumeration other_enum = other.contactIds.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__contactIds.addElement(other_element);
        }
        this.contactIds = __this__contactIds;
      }
    }

    public cancelGroupInvitation_args deepCopy() {
      return new cancelGroupInvitation_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.groupId = null;
      this.contactIds = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public String getGroupId() {
      return this.groupId;
    }

    public void setGroupId(String groupId) {
      this.groupId = groupId;
    }

    public void unsetGroupId() {
      this.groupId = null;
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return this.groupId != null;
    }

    public void setGroupIdIsSet(boolean value) {
      if (!value) {
        this.groupId = null;
      }
    }

    public int getContactIdsSize() {
      return (this.contactIds == null) ? 0 : this.contactIds.size();
    }

    public Enumeration getContactIdsEnumeration() {
      return (this.contactIds == null) ? null : this.contactIds.elements();
    }

    public void addToContactIds(String elem) {
      if (this.contactIds == null) {
        this.contactIds = new Vector();
      }
      this.contactIds.addElement(elem);
    }

    public Vector getContactIds() {
      return this.contactIds;
    }

    public void setContactIds(Vector contactIds) {
      this.contactIds = contactIds;
    }

    public void unsetContactIds() {
      this.contactIds = null;
    }

    /** Returns true if field contactIds is set (has been assigned a value) and false otherwise */
    public boolean isSetContactIds() {
      return this.contactIds != null;
    }

    public void setContactIdsIsSet(boolean value) {
      if (!value) {
        this.contactIds = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelGroupInvitation_args)
        return this.equals((cancelGroupInvitation_args)that);
      return false;
    }

    public boolean equals(cancelGroupInvitation_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_groupId = true && this.isSetGroupId();
      boolean that_present_groupId = true && that.isSetGroupId();
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (!this.groupId.equals(that.groupId))
          return false;
      }

      boolean this_present_contactIds = true && this.isSetContactIds();
      boolean that_present_contactIds = true && that.isSetContactIds();
      if (this_present_contactIds || that_present_contactIds) {
        if (!(this_present_contactIds && that_present_contactIds))
          return false;
        if (!this.contactIds.equals(that.contactIds))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      cancelGroupInvitation_args other = (cancelGroupInvitation_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGroupId(), other.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = TBaseHelper.compareTo(this.groupId, other.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetContactIds(), other.isSetContactIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContactIds()) {
        lastComparison = TBaseHelper.compareTo(this.contactIds, other.contactIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GROUP_ID
            if (field.type == TType.STRING) {
              this.groupId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // CONTACT_IDS
            if (field.type == TType.LIST) {
              {
                TList _list790 = iprot.readListBegin();
                this.contactIds = new Vector(_list790.size);
                for (int _i791 = 0; _i791 < _list790.size; ++_i791)
                {
                  String _elem792;
                  _elem792 = iprot.readString();
                  this.contactIds.addElement(_elem792);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.groupId != null) {
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeString(this.groupId);
        oprot.writeFieldEnd();
      }
      if (this.contactIds != null) {
        oprot.writeFieldBegin(CONTACT_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.contactIds.size()));
          for (Enumeration _iter793_enum = this.contactIds.elements(); _iter793_enum.hasMoreElements(); )           {
            String _iter793 = (String)_iter793_enum.nextElement();
            oprot.writeString(_iter793);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("cancelGroupInvitation_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("groupId:");
      if (this.groupId == null) {
        sb.append("null");
      } else {
        sb.append(this.groupId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contactIds:");
      if (this.contactIds == null) {
        sb.append("null");
      } else {
        sb.append(this.contactIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class cancelGroupInvitation_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("cancelGroupInvitation_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public cancelGroupInvitation_result() {
    }

    public cancelGroupInvitation_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelGroupInvitation_result(cancelGroupInvitation_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public cancelGroupInvitation_result deepCopy() {
      return new cancelGroupInvitation_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelGroupInvitation_result)
        return this.equals((cancelGroupInvitation_result)that);
      return false;
    }

    public boolean equals(cancelGroupInvitation_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      cancelGroupInvitation_result other = (cancelGroupInvitation_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("cancelGroupInvitation_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class changeVerificationMethod_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("changeVerificationMethod_args");

    private static final TField SESSION_ID_FIELD_DESC = new TField("sessionId", TType.STRING, (short)2);
    private static final TField METHOD_FIELD_DESC = new TField("method", TType.I32, (short)3);

    private String sessionId;
    private VerificationMethod method;

    // isset id assignments

    public changeVerificationMethod_args() {
    }

    public changeVerificationMethod_args(
      String sessionId,
      VerificationMethod method)
    {
      this();
      this.sessionId = sessionId;
      this.method = method;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeVerificationMethod_args(changeVerificationMethod_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
      if (other.isSetMethod()) {
        this.method = other.method;
      }
    }

    public changeVerificationMethod_args deepCopy() {
      return new changeVerificationMethod_args(this);
    }

    public void clear() {
      this.sessionId = null;
      this.method = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public void setSessionId(String sessionId) {
      this.sessionId = sessionId;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    /**
     * 
     * @see VerificationMethod
     */
    public VerificationMethod getMethod() {
      return this.method;
    }

    /**
     * 
     * @see VerificationMethod
     */
    public void setMethod(VerificationMethod method) {
      this.method = method;
    }

    public void unsetMethod() {
      this.method = null;
    }

    /** Returns true if field method is set (has been assigned a value) and false otherwise */
    public boolean isSetMethod() {
      return this.method != null;
    }

    public void setMethodIsSet(boolean value) {
      if (!value) {
        this.method = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeVerificationMethod_args)
        return this.equals((changeVerificationMethod_args)that);
      return false;
    }

    public boolean equals(changeVerificationMethod_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      boolean this_present_method = true && this.isSetMethod();
      boolean that_present_method = true && that.isSetMethod();
      if (this_present_method || that_present_method) {
        if (!(this_present_method && that_present_method))
          return false;
        if (!this.method.equals(that.method))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      changeVerificationMethod_args other = (changeVerificationMethod_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSessionId(), other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMethod(), other.isSetMethod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMethod()) {
        lastComparison = TBaseHelper.compareTo(this.method, other.method);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // SESSION_ID
            if (field.type == TType.STRING) {
              this.sessionId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // METHOD
            if (field.type == TType.I32) {
              this.method = VerificationMethod.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.sessionId != null) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeString(this.sessionId);
        oprot.writeFieldEnd();
      }
      if (this.method != null) {
        oprot.writeFieldBegin(METHOD_FIELD_DESC);
        oprot.writeI32(this.method.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("changeVerificationMethod_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("method:");
      if (this.method == null) {
        sb.append("null");
      } else {
        sb.append(this.method);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class changeVerificationMethod_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("changeVerificationMethod_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private VerificationSessionData success;
    private TalkException e;

    // isset id assignments

    public changeVerificationMethod_result() {
    }

    public changeVerificationMethod_result(
      VerificationSessionData success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeVerificationMethod_result(changeVerificationMethod_result other) {
      if (other.isSetSuccess()) {
        this.success = new VerificationSessionData(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public changeVerificationMethod_result deepCopy() {
      return new changeVerificationMethod_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public VerificationSessionData getSuccess() {
      return this.success;
    }

    public void setSuccess(VerificationSessionData success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof changeVerificationMethod_result)
        return this.equals((changeVerificationMethod_result)that);
      return false;
    }

    public boolean equals(changeVerificationMethod_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      changeVerificationMethod_result other = (changeVerificationMethod_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new VerificationSessionData();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("changeVerificationMethod_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class clearIdentityCredential_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("clearIdentityCredential_args");


    public clearIdentityCredential_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clearIdentityCredential_args(clearIdentityCredential_args other) {
    }

    public clearIdentityCredential_args deepCopy() {
      return new clearIdentityCredential_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clearIdentityCredential_args)
        return this.equals((clearIdentityCredential_args)that);
      return false;
    }

    public boolean equals(clearIdentityCredential_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      clearIdentityCredential_args other = (clearIdentityCredential_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("clearIdentityCredential_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class clearIdentityCredential_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("clearIdentityCredential_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public clearIdentityCredential_result() {
    }

    public clearIdentityCredential_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clearIdentityCredential_result(clearIdentityCredential_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public clearIdentityCredential_result deepCopy() {
      return new clearIdentityCredential_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clearIdentityCredential_result)
        return this.equals((clearIdentityCredential_result)that);
      return false;
    }

    public boolean equals(clearIdentityCredential_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      clearIdentityCredential_result other = (clearIdentityCredential_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("clearIdentityCredential_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class clearMessageBox_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("clearMessageBox_args");

    private static final TField CHANNEL_ID_FIELD_DESC = new TField("channelId", TType.STRING, (short)2);
    private static final TField MESSAGE_BOX_ID_FIELD_DESC = new TField("messageBoxId", TType.STRING, (short)3);

    private String channelId;
    private String messageBoxId;

    // isset id assignments

    public clearMessageBox_args() {
    }

    public clearMessageBox_args(
      String channelId,
      String messageBoxId)
    {
      this();
      this.channelId = channelId;
      this.messageBoxId = messageBoxId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clearMessageBox_args(clearMessageBox_args other) {
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
      if (other.isSetMessageBoxId()) {
        this.messageBoxId = other.messageBoxId;
      }
    }

    public clearMessageBox_args deepCopy() {
      return new clearMessageBox_args(this);
    }

    public void clear() {
      this.channelId = null;
      this.messageBoxId = null;
    }

    public String getChannelId() {
      return this.channelId;
    }

    public void setChannelId(String channelId) {
      this.channelId = channelId;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public String getMessageBoxId() {
      return this.messageBoxId;
    }

    public void setMessageBoxId(String messageBoxId) {
      this.messageBoxId = messageBoxId;
    }

    public void unsetMessageBoxId() {
      this.messageBoxId = null;
    }

    /** Returns true if field messageBoxId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageBoxId() {
      return this.messageBoxId != null;
    }

    public void setMessageBoxIdIsSet(boolean value) {
      if (!value) {
        this.messageBoxId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clearMessageBox_args)
        return this.equals((clearMessageBox_args)that);
      return false;
    }

    public boolean equals(clearMessageBox_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      boolean this_present_messageBoxId = true && this.isSetMessageBoxId();
      boolean that_present_messageBoxId = true && that.isSetMessageBoxId();
      if (this_present_messageBoxId || that_present_messageBoxId) {
        if (!(this_present_messageBoxId && that_present_messageBoxId))
          return false;
        if (!this.messageBoxId.equals(that.messageBoxId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      clearMessageBox_args other = (clearMessageBox_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetChannelId(), other.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = TBaseHelper.compareTo(this.channelId, other.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMessageBoxId(), other.isSetMessageBoxId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageBoxId()) {
        lastComparison = TBaseHelper.compareTo(this.messageBoxId, other.messageBoxId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // CHANNEL_ID
            if (field.type == TType.STRING) {
              this.channelId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // MESSAGE_BOX_ID
            if (field.type == TType.STRING) {
              this.messageBoxId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.channelId != null) {
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeString(this.channelId);
        oprot.writeFieldEnd();
      }
      if (this.messageBoxId != null) {
        oprot.writeFieldBegin(MESSAGE_BOX_ID_FIELD_DESC);
        oprot.writeString(this.messageBoxId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("clearMessageBox_args(");
      boolean first = true;

      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("messageBoxId:");
      if (this.messageBoxId == null) {
        sb.append("null");
      } else {
        sb.append(this.messageBoxId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class clearMessageBox_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("clearMessageBox_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public clearMessageBox_result() {
    }

    public clearMessageBox_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clearMessageBox_result(clearMessageBox_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public clearMessageBox_result deepCopy() {
      return new clearMessageBox_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof clearMessageBox_result)
        return this.equals((clearMessageBox_result)that);
      return false;
    }

    public boolean equals(clearMessageBox_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      clearMessageBox_result other = (clearMessageBox_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("clearMessageBox_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class closeProximityMatch_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("closeProximityMatch_args");

    private static final TField SESSION_ID_FIELD_DESC = new TField("sessionId", TType.STRING, (short)2);

    private String sessionId;

    // isset id assignments

    public closeProximityMatch_args() {
    }

    public closeProximityMatch_args(
      String sessionId)
    {
      this();
      this.sessionId = sessionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeProximityMatch_args(closeProximityMatch_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
    }

    public closeProximityMatch_args deepCopy() {
      return new closeProximityMatch_args(this);
    }

    public void clear() {
      this.sessionId = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public void setSessionId(String sessionId) {
      this.sessionId = sessionId;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeProximityMatch_args)
        return this.equals((closeProximityMatch_args)that);
      return false;
    }

    public boolean equals(closeProximityMatch_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      closeProximityMatch_args other = (closeProximityMatch_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSessionId(), other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // SESSION_ID
            if (field.type == TType.STRING) {
              this.sessionId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.sessionId != null) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeString(this.sessionId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("closeProximityMatch_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class closeProximityMatch_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("closeProximityMatch_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public closeProximityMatch_result() {
    }

    public closeProximityMatch_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public closeProximityMatch_result(closeProximityMatch_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public closeProximityMatch_result deepCopy() {
      return new closeProximityMatch_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof closeProximityMatch_result)
        return this.equals((closeProximityMatch_result)that);
      return false;
    }

    public boolean equals(closeProximityMatch_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      closeProximityMatch_result other = (closeProximityMatch_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("closeProximityMatch_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class commitSendMessage_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("commitSendMessage_args");

    private static final TField SEQ_FIELD_DESC = new TField("seq", TType.I32, (short)1);
    private static final TField MESSAGE_ID_FIELD_DESC = new TField("messageId", TType.STRING, (short)2);
    private static final TField RECEIVER_MIDS_FIELD_DESC = new TField("receiverMids", TType.LIST, (short)3);

    private int seq;
    private String messageId;
    private Vector receiverMids;

    // isset id assignments
    private static final int __SEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public commitSendMessage_args() {
    }

    public commitSendMessage_args(
      int seq,
      String messageId,
      Vector receiverMids)
    {
      this();
      this.seq = seq;
      setSeqIsSet(true);
      this.messageId = messageId;
      this.receiverMids = receiverMids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public commitSendMessage_args(commitSendMessage_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.seq = other.seq;
      if (other.isSetMessageId()) {
        this.messageId = other.messageId;
      }
      if (other.isSetReceiverMids()) {
        Vector __this__receiverMids = new Vector();
        for (Enumeration other_enum = other.receiverMids.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__receiverMids.addElement(other_element);
        }
        this.receiverMids = __this__receiverMids;
      }
    }

    public commitSendMessage_args deepCopy() {
      return new commitSendMessage_args(this);
    }

    public void clear() {
      setSeqIsSet(false);
      this.seq = 0;
      this.messageId = null;
      this.receiverMids = null;
    }

    public int getSeq() {
      return this.seq;
    }

    public void setSeq(int seq) {
      this.seq = seq;
      setSeqIsSet(true);
    }

    public void unsetSeq() {
      __isset_vector[__SEQ_ISSET_ID] = false;
    }

    /** Returns true if field seq is set (has been assigned a value) and false otherwise */
    public boolean isSetSeq() {
      return __isset_vector[__SEQ_ISSET_ID];
    }

    public void setSeqIsSet(boolean value) {
      __isset_vector[__SEQ_ISSET_ID] = value;
    }

    public String getMessageId() {
      return this.messageId;
    }

    public void setMessageId(String messageId) {
      this.messageId = messageId;
    }

    public void unsetMessageId() {
      this.messageId = null;
    }

    /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageId() {
      return this.messageId != null;
    }

    public void setMessageIdIsSet(boolean value) {
      if (!value) {
        this.messageId = null;
      }
    }

    public int getReceiverMidsSize() {
      return (this.receiverMids == null) ? 0 : this.receiverMids.size();
    }

    public Enumeration getReceiverMidsEnumeration() {
      return (this.receiverMids == null) ? null : this.receiverMids.elements();
    }

    public void addToReceiverMids(String elem) {
      if (this.receiverMids == null) {
        this.receiverMids = new Vector();
      }
      this.receiverMids.addElement(elem);
    }

    public Vector getReceiverMids() {
      return this.receiverMids;
    }

    public void setReceiverMids(Vector receiverMids) {
      this.receiverMids = receiverMids;
    }

    public void unsetReceiverMids() {
      this.receiverMids = null;
    }

    /** Returns true if field receiverMids is set (has been assigned a value) and false otherwise */
    public boolean isSetReceiverMids() {
      return this.receiverMids != null;
    }

    public void setReceiverMidsIsSet(boolean value) {
      if (!value) {
        this.receiverMids = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof commitSendMessage_args)
        return this.equals((commitSendMessage_args)that);
      return false;
    }

    public boolean equals(commitSendMessage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_seq = true;
      boolean that_present_seq = true;
      if (this_present_seq || that_present_seq) {
        if (!(this_present_seq && that_present_seq))
          return false;
        if (this.seq != that.seq)
          return false;
      }

      boolean this_present_messageId = true && this.isSetMessageId();
      boolean that_present_messageId = true && that.isSetMessageId();
      if (this_present_messageId || that_present_messageId) {
        if (!(this_present_messageId && that_present_messageId))
          return false;
        if (!this.messageId.equals(that.messageId))
          return false;
      }

      boolean this_present_receiverMids = true && this.isSetReceiverMids();
      boolean that_present_receiverMids = true && that.isSetReceiverMids();
      if (this_present_receiverMids || that_present_receiverMids) {
        if (!(this_present_receiverMids && that_present_receiverMids))
          return false;
        if (!this.receiverMids.equals(that.receiverMids))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      commitSendMessage_args other = (commitSendMessage_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSeq(), other.isSetSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeq()) {
        lastComparison = TBaseHelper.compareTo(this.seq, other.seq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMessageId(), other.isSetMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageId()) {
        lastComparison = TBaseHelper.compareTo(this.messageId, other.messageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetReceiverMids(), other.isSetReceiverMids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReceiverMids()) {
        lastComparison = TBaseHelper.compareTo(this.receiverMids, other.receiverMids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SEQ
            if (field.type == TType.I32) {
              this.seq = iprot.readI32();
              setSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MESSAGE_ID
            if (field.type == TType.STRING) {
              this.messageId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // RECEIVER_MIDS
            if (field.type == TType.LIST) {
              {
                TList _list794 = iprot.readListBegin();
                this.receiverMids = new Vector(_list794.size);
                for (int _i795 = 0; _i795 < _list794.size; ++_i795)
                {
                  String _elem796;
                  _elem796 = iprot.readString();
                  this.receiverMids.addElement(_elem796);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQ_FIELD_DESC);
      oprot.writeI32(this.seq);
      oprot.writeFieldEnd();
      if (this.messageId != null) {
        oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
        oprot.writeString(this.messageId);
        oprot.writeFieldEnd();
      }
      if (this.receiverMids != null) {
        oprot.writeFieldBegin(RECEIVER_MIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.receiverMids.size()));
          for (Enumeration _iter797_enum = this.receiverMids.elements(); _iter797_enum.hasMoreElements(); )           {
            String _iter797 = (String)_iter797_enum.nextElement();
            oprot.writeString(_iter797);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("commitSendMessage_args(");
      boolean first = true;

      sb.append("seq:");
      sb.append(this.seq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("messageId:");
      if (this.messageId == null) {
        sb.append("null");
      } else {
        sb.append(this.messageId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("receiverMids:");
      if (this.receiverMids == null) {
        sb.append("null");
      } else {
        sb.append(this.receiverMids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class commitSendMessage_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("commitSendMessage_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.MAP, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Hashtable success;
    private TalkException e;

    // isset id assignments

    public commitSendMessage_result() {
    }

    public commitSendMessage_result(
      Hashtable success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public commitSendMessage_result(commitSendMessage_result other) {
      if (other.isSetSuccess()) {
        Hashtable __this__success = new Hashtable();
        for (Enumeration other_enum = other.success.keys(); other_enum.hasMoreElements(); ) {

          String other_element_key = (String)other_enum.nextElement();
          String other_element_value = (String)other.success.get(other_element_key);

          String __this__success_copy_key = other_element_key;

          String __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public commitSendMessage_result deepCopy() {
      return new commitSendMessage_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new Hashtable();
      }
      this.success.put(key, val);
    }

    public Hashtable getSuccess() {
      return this.success;
    }

    public void setSuccess(Hashtable success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof commitSendMessage_result)
        return this.equals((commitSendMessage_result)that);
      return false;
    }

    public boolean equals(commitSendMessage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      commitSendMessage_result other = (commitSendMessage_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.MAP) {
              {
                TMap _map798 = iprot.readMapBegin();
                this.success = new Hashtable(2*_map798.size);
                for (int _i799 = 0; _i799 < _map798.size; ++_i799)
                {
                  String _key800;
                  String _val801;
                  _key800 = iprot.readString();
                  _val801 = iprot.readString();
                  this.success.put(_key800, _val801);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.success.size()));
          for (Enumeration _iter802_enum = this.success.keys(); _iter802_enum.hasMoreElements(); )           {
            String _iter802 = (String)_iter802_enum.nextElement();
            oprot.writeString(_iter802);
            oprot.writeString(((String)this.success.get(_iter802)));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("commitSendMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class commitSendMessages_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("commitSendMessages_args");

    private static final TField SEQ_FIELD_DESC = new TField("seq", TType.I32, (short)1);
    private static final TField MESSAGE_IDS_FIELD_DESC = new TField("messageIds", TType.LIST, (short)2);
    private static final TField RECEIVER_MIDS_FIELD_DESC = new TField("receiverMids", TType.LIST, (short)3);

    private int seq;
    private Vector messageIds;
    private Vector receiverMids;

    // isset id assignments
    private static final int __SEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public commitSendMessages_args() {
    }

    public commitSendMessages_args(
      int seq,
      Vector messageIds,
      Vector receiverMids)
    {
      this();
      this.seq = seq;
      setSeqIsSet(true);
      this.messageIds = messageIds;
      this.receiverMids = receiverMids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public commitSendMessages_args(commitSendMessages_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.seq = other.seq;
      if (other.isSetMessageIds()) {
        Vector __this__messageIds = new Vector();
        for (Enumeration other_enum = other.messageIds.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__messageIds.addElement(other_element);
        }
        this.messageIds = __this__messageIds;
      }
      if (other.isSetReceiverMids()) {
        Vector __this__receiverMids = new Vector();
        for (Enumeration other_enum = other.receiverMids.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__receiverMids.addElement(other_element);
        }
        this.receiverMids = __this__receiverMids;
      }
    }

    public commitSendMessages_args deepCopy() {
      return new commitSendMessages_args(this);
    }

    public void clear() {
      setSeqIsSet(false);
      this.seq = 0;
      this.messageIds = null;
      this.receiverMids = null;
    }

    public int getSeq() {
      return this.seq;
    }

    public void setSeq(int seq) {
      this.seq = seq;
      setSeqIsSet(true);
    }

    public void unsetSeq() {
      __isset_vector[__SEQ_ISSET_ID] = false;
    }

    /** Returns true if field seq is set (has been assigned a value) and false otherwise */
    public boolean isSetSeq() {
      return __isset_vector[__SEQ_ISSET_ID];
    }

    public void setSeqIsSet(boolean value) {
      __isset_vector[__SEQ_ISSET_ID] = value;
    }

    public int getMessageIdsSize() {
      return (this.messageIds == null) ? 0 : this.messageIds.size();
    }

    public Enumeration getMessageIdsEnumeration() {
      return (this.messageIds == null) ? null : this.messageIds.elements();
    }

    public void addToMessageIds(String elem) {
      if (this.messageIds == null) {
        this.messageIds = new Vector();
      }
      this.messageIds.addElement(elem);
    }

    public Vector getMessageIds() {
      return this.messageIds;
    }

    public void setMessageIds(Vector messageIds) {
      this.messageIds = messageIds;
    }

    public void unsetMessageIds() {
      this.messageIds = null;
    }

    /** Returns true if field messageIds is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageIds() {
      return this.messageIds != null;
    }

    public void setMessageIdsIsSet(boolean value) {
      if (!value) {
        this.messageIds = null;
      }
    }

    public int getReceiverMidsSize() {
      return (this.receiverMids == null) ? 0 : this.receiverMids.size();
    }

    public Enumeration getReceiverMidsEnumeration() {
      return (this.receiverMids == null) ? null : this.receiverMids.elements();
    }

    public void addToReceiverMids(String elem) {
      if (this.receiverMids == null) {
        this.receiverMids = new Vector();
      }
      this.receiverMids.addElement(elem);
    }

    public Vector getReceiverMids() {
      return this.receiverMids;
    }

    public void setReceiverMids(Vector receiverMids) {
      this.receiverMids = receiverMids;
    }

    public void unsetReceiverMids() {
      this.receiverMids = null;
    }

    /** Returns true if field receiverMids is set (has been assigned a value) and false otherwise */
    public boolean isSetReceiverMids() {
      return this.receiverMids != null;
    }

    public void setReceiverMidsIsSet(boolean value) {
      if (!value) {
        this.receiverMids = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof commitSendMessages_args)
        return this.equals((commitSendMessages_args)that);
      return false;
    }

    public boolean equals(commitSendMessages_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_seq = true;
      boolean that_present_seq = true;
      if (this_present_seq || that_present_seq) {
        if (!(this_present_seq && that_present_seq))
          return false;
        if (this.seq != that.seq)
          return false;
      }

      boolean this_present_messageIds = true && this.isSetMessageIds();
      boolean that_present_messageIds = true && that.isSetMessageIds();
      if (this_present_messageIds || that_present_messageIds) {
        if (!(this_present_messageIds && that_present_messageIds))
          return false;
        if (!this.messageIds.equals(that.messageIds))
          return false;
      }

      boolean this_present_receiverMids = true && this.isSetReceiverMids();
      boolean that_present_receiverMids = true && that.isSetReceiverMids();
      if (this_present_receiverMids || that_present_receiverMids) {
        if (!(this_present_receiverMids && that_present_receiverMids))
          return false;
        if (!this.receiverMids.equals(that.receiverMids))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      commitSendMessages_args other = (commitSendMessages_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSeq(), other.isSetSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeq()) {
        lastComparison = TBaseHelper.compareTo(this.seq, other.seq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMessageIds(), other.isSetMessageIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageIds()) {
        lastComparison = TBaseHelper.compareTo(this.messageIds, other.messageIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetReceiverMids(), other.isSetReceiverMids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReceiverMids()) {
        lastComparison = TBaseHelper.compareTo(this.receiverMids, other.receiverMids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SEQ
            if (field.type == TType.I32) {
              this.seq = iprot.readI32();
              setSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MESSAGE_IDS
            if (field.type == TType.LIST) {
              {
                TList _list803 = iprot.readListBegin();
                this.messageIds = new Vector(_list803.size);
                for (int _i804 = 0; _i804 < _list803.size; ++_i804)
                {
                  String _elem805;
                  _elem805 = iprot.readString();
                  this.messageIds.addElement(_elem805);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // RECEIVER_MIDS
            if (field.type == TType.LIST) {
              {
                TList _list806 = iprot.readListBegin();
                this.receiverMids = new Vector(_list806.size);
                for (int _i807 = 0; _i807 < _list806.size; ++_i807)
                {
                  String _elem808;
                  _elem808 = iprot.readString();
                  this.receiverMids.addElement(_elem808);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQ_FIELD_DESC);
      oprot.writeI32(this.seq);
      oprot.writeFieldEnd();
      if (this.messageIds != null) {
        oprot.writeFieldBegin(MESSAGE_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.messageIds.size()));
          for (Enumeration _iter809_enum = this.messageIds.elements(); _iter809_enum.hasMoreElements(); )           {
            String _iter809 = (String)_iter809_enum.nextElement();
            oprot.writeString(_iter809);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.receiverMids != null) {
        oprot.writeFieldBegin(RECEIVER_MIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.receiverMids.size()));
          for (Enumeration _iter810_enum = this.receiverMids.elements(); _iter810_enum.hasMoreElements(); )           {
            String _iter810 = (String)_iter810_enum.nextElement();
            oprot.writeString(_iter810);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("commitSendMessages_args(");
      boolean first = true;

      sb.append("seq:");
      sb.append(this.seq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("messageIds:");
      if (this.messageIds == null) {
        sb.append("null");
      } else {
        sb.append(this.messageIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("receiverMids:");
      if (this.receiverMids == null) {
        sb.append("null");
      } else {
        sb.append(this.receiverMids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class commitSendMessages_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("commitSendMessages_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.MAP, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Hashtable success;
    private TalkException e;

    // isset id assignments

    public commitSendMessages_result() {
    }

    public commitSendMessages_result(
      Hashtable success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public commitSendMessages_result(commitSendMessages_result other) {
      if (other.isSetSuccess()) {
        Hashtable __this__success = new Hashtable();
        for (Enumeration other_enum = other.success.keys(); other_enum.hasMoreElements(); ) {

          String other_element_key = (String)other_enum.nextElement();
          String other_element_value = (String)other.success.get(other_element_key);

          String __this__success_copy_key = other_element_key;

          String __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public commitSendMessages_result deepCopy() {
      return new commitSendMessages_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new Hashtable();
      }
      this.success.put(key, val);
    }

    public Hashtable getSuccess() {
      return this.success;
    }

    public void setSuccess(Hashtable success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof commitSendMessages_result)
        return this.equals((commitSendMessages_result)that);
      return false;
    }

    public boolean equals(commitSendMessages_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      commitSendMessages_result other = (commitSendMessages_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.MAP) {
              {
                TMap _map811 = iprot.readMapBegin();
                this.success = new Hashtable(2*_map811.size);
                for (int _i812 = 0; _i812 < _map811.size; ++_i812)
                {
                  String _key813;
                  String _val814;
                  _key813 = iprot.readString();
                  _val814 = iprot.readString();
                  this.success.put(_key813, _val814);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.success.size()));
          for (Enumeration _iter815_enum = this.success.keys(); _iter815_enum.hasMoreElements(); )           {
            String _iter815 = (String)_iter815_enum.nextElement();
            oprot.writeString(_iter815);
            oprot.writeString(((String)this.success.get(_iter815)));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("commitSendMessages_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class commitUpdateProfile_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("commitUpdateProfile_args");

    private static final TField SEQ_FIELD_DESC = new TField("seq", TType.I32, (short)1);
    private static final TField ATTRS_FIELD_DESC = new TField("attrs", TType.LIST, (short)2);
    private static final TField RECEIVER_MIDS_FIELD_DESC = new TField("receiverMids", TType.LIST, (short)3);

    private int seq;
    private Vector attrs;
    private Vector receiverMids;

    // isset id assignments
    private static final int __SEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public commitUpdateProfile_args() {
    }

    public commitUpdateProfile_args(
      int seq,
      Vector attrs,
      Vector receiverMids)
    {
      this();
      this.seq = seq;
      setSeqIsSet(true);
      this.attrs = attrs;
      this.receiverMids = receiverMids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public commitUpdateProfile_args(commitUpdateProfile_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.seq = other.seq;
      if (other.isSetAttrs()) {
        Vector __this__attrs = new Vector();
        for (Enumeration other_enum = other.attrs.elements(); other_enum.hasMoreElements(); ) {
          ProfileAttribute other_element = (ProfileAttribute)other_enum.nextElement();
          __this__attrs.addElement(other_element);
        }
        this.attrs = __this__attrs;
      }
      if (other.isSetReceiverMids()) {
        Vector __this__receiverMids = new Vector();
        for (Enumeration other_enum = other.receiverMids.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__receiverMids.addElement(other_element);
        }
        this.receiverMids = __this__receiverMids;
      }
    }

    public commitUpdateProfile_args deepCopy() {
      return new commitUpdateProfile_args(this);
    }

    public void clear() {
      setSeqIsSet(false);
      this.seq = 0;
      this.attrs = null;
      this.receiverMids = null;
    }

    public int getSeq() {
      return this.seq;
    }

    public void setSeq(int seq) {
      this.seq = seq;
      setSeqIsSet(true);
    }

    public void unsetSeq() {
      __isset_vector[__SEQ_ISSET_ID] = false;
    }

    /** Returns true if field seq is set (has been assigned a value) and false otherwise */
    public boolean isSetSeq() {
      return __isset_vector[__SEQ_ISSET_ID];
    }

    public void setSeqIsSet(boolean value) {
      __isset_vector[__SEQ_ISSET_ID] = value;
    }

    public int getAttrsSize() {
      return (this.attrs == null) ? 0 : this.attrs.size();
    }

    public Enumeration getAttrsEnumeration() {
      return (this.attrs == null) ? null : this.attrs.elements();
    }

    public void addToAttrs(ProfileAttribute elem) {
      if (this.attrs == null) {
        this.attrs = new Vector();
      }
      this.attrs.addElement(elem);
    }

    public Vector getAttrs() {
      return this.attrs;
    }

    public void setAttrs(Vector attrs) {
      this.attrs = attrs;
    }

    public void unsetAttrs() {
      this.attrs = null;
    }

    /** Returns true if field attrs is set (has been assigned a value) and false otherwise */
    public boolean isSetAttrs() {
      return this.attrs != null;
    }

    public void setAttrsIsSet(boolean value) {
      if (!value) {
        this.attrs = null;
      }
    }

    public int getReceiverMidsSize() {
      return (this.receiverMids == null) ? 0 : this.receiverMids.size();
    }

    public Enumeration getReceiverMidsEnumeration() {
      return (this.receiverMids == null) ? null : this.receiverMids.elements();
    }

    public void addToReceiverMids(String elem) {
      if (this.receiverMids == null) {
        this.receiverMids = new Vector();
      }
      this.receiverMids.addElement(elem);
    }

    public Vector getReceiverMids() {
      return this.receiverMids;
    }

    public void setReceiverMids(Vector receiverMids) {
      this.receiverMids = receiverMids;
    }

    public void unsetReceiverMids() {
      this.receiverMids = null;
    }

    /** Returns true if field receiverMids is set (has been assigned a value) and false otherwise */
    public boolean isSetReceiverMids() {
      return this.receiverMids != null;
    }

    public void setReceiverMidsIsSet(boolean value) {
      if (!value) {
        this.receiverMids = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof commitUpdateProfile_args)
        return this.equals((commitUpdateProfile_args)that);
      return false;
    }

    public boolean equals(commitUpdateProfile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_seq = true;
      boolean that_present_seq = true;
      if (this_present_seq || that_present_seq) {
        if (!(this_present_seq && that_present_seq))
          return false;
        if (this.seq != that.seq)
          return false;
      }

      boolean this_present_attrs = true && this.isSetAttrs();
      boolean that_present_attrs = true && that.isSetAttrs();
      if (this_present_attrs || that_present_attrs) {
        if (!(this_present_attrs && that_present_attrs))
          return false;
        if (!this.attrs.equals(that.attrs))
          return false;
      }

      boolean this_present_receiverMids = true && this.isSetReceiverMids();
      boolean that_present_receiverMids = true && that.isSetReceiverMids();
      if (this_present_receiverMids || that_present_receiverMids) {
        if (!(this_present_receiverMids && that_present_receiverMids))
          return false;
        if (!this.receiverMids.equals(that.receiverMids))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      commitUpdateProfile_args other = (commitUpdateProfile_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSeq(), other.isSetSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeq()) {
        lastComparison = TBaseHelper.compareTo(this.seq, other.seq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetAttrs(), other.isSetAttrs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttrs()) {
        lastComparison = TBaseHelper.compareTo(this.attrs, other.attrs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetReceiverMids(), other.isSetReceiverMids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReceiverMids()) {
        lastComparison = TBaseHelper.compareTo(this.receiverMids, other.receiverMids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SEQ
            if (field.type == TType.I32) {
              this.seq = iprot.readI32();
              setSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ATTRS
            if (field.type == TType.LIST) {
              {
                TList _list816 = iprot.readListBegin();
                this.attrs = new Vector(_list816.size);
                for (int _i817 = 0; _i817 < _list816.size; ++_i817)
                {
                  ProfileAttribute _elem818;
                  _elem818 = ProfileAttribute.findByValue(iprot.readI32());
                  this.attrs.addElement(_elem818);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // RECEIVER_MIDS
            if (field.type == TType.LIST) {
              {
                TList _list819 = iprot.readListBegin();
                this.receiverMids = new Vector(_list819.size);
                for (int _i820 = 0; _i820 < _list819.size; ++_i820)
                {
                  String _elem821;
                  _elem821 = iprot.readString();
                  this.receiverMids.addElement(_elem821);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQ_FIELD_DESC);
      oprot.writeI32(this.seq);
      oprot.writeFieldEnd();
      if (this.attrs != null) {
        oprot.writeFieldBegin(ATTRS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I32, this.attrs.size()));
          for (Enumeration _iter822_enum = this.attrs.elements(); _iter822_enum.hasMoreElements(); )           {
            ProfileAttribute _iter822 = (ProfileAttribute)_iter822_enum.nextElement();
            oprot.writeI32(_iter822.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.receiverMids != null) {
        oprot.writeFieldBegin(RECEIVER_MIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.receiverMids.size()));
          for (Enumeration _iter823_enum = this.receiverMids.elements(); _iter823_enum.hasMoreElements(); )           {
            String _iter823 = (String)_iter823_enum.nextElement();
            oprot.writeString(_iter823);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("commitUpdateProfile_args(");
      boolean first = true;

      sb.append("seq:");
      sb.append(this.seq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("attrs:");
      if (this.attrs == null) {
        sb.append("null");
      } else {
        sb.append(this.attrs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("receiverMids:");
      if (this.receiverMids == null) {
        sb.append("null");
      } else {
        sb.append(this.receiverMids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class commitUpdateProfile_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("commitUpdateProfile_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.MAP, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Hashtable success;
    private TalkException e;

    // isset id assignments

    public commitUpdateProfile_result() {
    }

    public commitUpdateProfile_result(
      Hashtable success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public commitUpdateProfile_result(commitUpdateProfile_result other) {
      if (other.isSetSuccess()) {
        Hashtable __this__success = new Hashtable();
        for (Enumeration other_enum = other.success.keys(); other_enum.hasMoreElements(); ) {

          String other_element_key = (String)other_enum.nextElement();
          String other_element_value = (String)other.success.get(other_element_key);

          String __this__success_copy_key = other_element_key;

          String __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public commitUpdateProfile_result deepCopy() {
      return new commitUpdateProfile_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new Hashtable();
      }
      this.success.put(key, val);
    }

    public Hashtable getSuccess() {
      return this.success;
    }

    public void setSuccess(Hashtable success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof commitUpdateProfile_result)
        return this.equals((commitUpdateProfile_result)that);
      return false;
    }

    public boolean equals(commitUpdateProfile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      commitUpdateProfile_result other = (commitUpdateProfile_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.MAP) {
              {
                TMap _map824 = iprot.readMapBegin();
                this.success = new Hashtable(2*_map824.size);
                for (int _i825 = 0; _i825 < _map824.size; ++_i825)
                {
                  String _key826;
                  String _val827;
                  _key826 = iprot.readString();
                  _val827 = iprot.readString();
                  this.success.put(_key826, _val827);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.success.size()));
          for (Enumeration _iter828_enum = this.success.keys(); _iter828_enum.hasMoreElements(); )           {
            String _iter828 = (String)_iter828_enum.nextElement();
            oprot.writeString(_iter828);
            oprot.writeString(((String)this.success.get(_iter828)));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("commitUpdateProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class confirmEmail_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("confirmEmail_args");

    private static final TField VERIFIER_FIELD_DESC = new TField("verifier", TType.STRING, (short)2);
    private static final TField PIN_CODE_FIELD_DESC = new TField("pinCode", TType.STRING, (short)3);

    private String verifier;
    private String pinCode;

    // isset id assignments

    public confirmEmail_args() {
    }

    public confirmEmail_args(
      String verifier,
      String pinCode)
    {
      this();
      this.verifier = verifier;
      this.pinCode = pinCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public confirmEmail_args(confirmEmail_args other) {
      if (other.isSetVerifier()) {
        this.verifier = other.verifier;
      }
      if (other.isSetPinCode()) {
        this.pinCode = other.pinCode;
      }
    }

    public confirmEmail_args deepCopy() {
      return new confirmEmail_args(this);
    }

    public void clear() {
      this.verifier = null;
      this.pinCode = null;
    }

    public String getVerifier() {
      return this.verifier;
    }

    public void setVerifier(String verifier) {
      this.verifier = verifier;
    }

    public void unsetVerifier() {
      this.verifier = null;
    }

    /** Returns true if field verifier is set (has been assigned a value) and false otherwise */
    public boolean isSetVerifier() {
      return this.verifier != null;
    }

    public void setVerifierIsSet(boolean value) {
      if (!value) {
        this.verifier = null;
      }
    }

    public String getPinCode() {
      return this.pinCode;
    }

    public void setPinCode(String pinCode) {
      this.pinCode = pinCode;
    }

    public void unsetPinCode() {
      this.pinCode = null;
    }

    /** Returns true if field pinCode is set (has been assigned a value) and false otherwise */
    public boolean isSetPinCode() {
      return this.pinCode != null;
    }

    public void setPinCodeIsSet(boolean value) {
      if (!value) {
        this.pinCode = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof confirmEmail_args)
        return this.equals((confirmEmail_args)that);
      return false;
    }

    public boolean equals(confirmEmail_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_verifier = true && this.isSetVerifier();
      boolean that_present_verifier = true && that.isSetVerifier();
      if (this_present_verifier || that_present_verifier) {
        if (!(this_present_verifier && that_present_verifier))
          return false;
        if (!this.verifier.equals(that.verifier))
          return false;
      }

      boolean this_present_pinCode = true && this.isSetPinCode();
      boolean that_present_pinCode = true && that.isSetPinCode();
      if (this_present_pinCode || that_present_pinCode) {
        if (!(this_present_pinCode && that_present_pinCode))
          return false;
        if (!this.pinCode.equals(that.pinCode))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      confirmEmail_args other = (confirmEmail_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetVerifier(), other.isSetVerifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVerifier()) {
        lastComparison = TBaseHelper.compareTo(this.verifier, other.verifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPinCode(), other.isSetPinCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPinCode()) {
        lastComparison = TBaseHelper.compareTo(this.pinCode, other.pinCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // VERIFIER
            if (field.type == TType.STRING) {
              this.verifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PIN_CODE
            if (field.type == TType.STRING) {
              this.pinCode = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.verifier != null) {
        oprot.writeFieldBegin(VERIFIER_FIELD_DESC);
        oprot.writeString(this.verifier);
        oprot.writeFieldEnd();
      }
      if (this.pinCode != null) {
        oprot.writeFieldBegin(PIN_CODE_FIELD_DESC);
        oprot.writeString(this.pinCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("confirmEmail_args(");
      boolean first = true;

      sb.append("verifier:");
      if (this.verifier == null) {
        sb.append("null");
      } else {
        sb.append(this.verifier);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pinCode:");
      if (this.pinCode == null) {
        sb.append("null");
      } else {
        sb.append(this.pinCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class confirmEmail_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("confirmEmail_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public confirmEmail_result() {
    }

    public confirmEmail_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public confirmEmail_result(confirmEmail_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public confirmEmail_result deepCopy() {
      return new confirmEmail_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof confirmEmail_result)
        return this.equals((confirmEmail_result)that);
      return false;
    }

    public boolean equals(confirmEmail_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      confirmEmail_result other = (confirmEmail_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("confirmEmail_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createGroup_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("createGroup_args");

    private static final TField SEQ_FIELD_DESC = new TField("seq", TType.I32, (short)1);
    private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)2);
    private static final TField CONTACT_IDS_FIELD_DESC = new TField("contactIds", TType.LIST, (short)3);

    private int seq;
    private String name;
    private Vector contactIds;

    // isset id assignments
    private static final int __SEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public createGroup_args() {
    }

    public createGroup_args(
      int seq,
      String name,
      Vector contactIds)
    {
      this();
      this.seq = seq;
      setSeqIsSet(true);
      this.name = name;
      this.contactIds = contactIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createGroup_args(createGroup_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.seq = other.seq;
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetContactIds()) {
        Vector __this__contactIds = new Vector();
        for (Enumeration other_enum = other.contactIds.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__contactIds.addElement(other_element);
        }
        this.contactIds = __this__contactIds;
      }
    }

    public createGroup_args deepCopy() {
      return new createGroup_args(this);
    }

    public void clear() {
      setSeqIsSet(false);
      this.seq = 0;
      this.name = null;
      this.contactIds = null;
    }

    public int getSeq() {
      return this.seq;
    }

    public void setSeq(int seq) {
      this.seq = seq;
      setSeqIsSet(true);
    }

    public void unsetSeq() {
      __isset_vector[__SEQ_ISSET_ID] = false;
    }

    /** Returns true if field seq is set (has been assigned a value) and false otherwise */
    public boolean isSetSeq() {
      return __isset_vector[__SEQ_ISSET_ID];
    }

    public void setSeqIsSet(boolean value) {
      __isset_vector[__SEQ_ISSET_ID] = value;
    }

    public String getName() {
      return this.name;
    }

    public void setName(String name) {
      this.name = name;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public int getContactIdsSize() {
      return (this.contactIds == null) ? 0 : this.contactIds.size();
    }

    public Enumeration getContactIdsEnumeration() {
      return (this.contactIds == null) ? null : this.contactIds.elements();
    }

    public void addToContactIds(String elem) {
      if (this.contactIds == null) {
        this.contactIds = new Vector();
      }
      this.contactIds.addElement(elem);
    }

    public Vector getContactIds() {
      return this.contactIds;
    }

    public void setContactIds(Vector contactIds) {
      this.contactIds = contactIds;
    }

    public void unsetContactIds() {
      this.contactIds = null;
    }

    /** Returns true if field contactIds is set (has been assigned a value) and false otherwise */
    public boolean isSetContactIds() {
      return this.contactIds != null;
    }

    public void setContactIdsIsSet(boolean value) {
      if (!value) {
        this.contactIds = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createGroup_args)
        return this.equals((createGroup_args)that);
      return false;
    }

    public boolean equals(createGroup_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_seq = true;
      boolean that_present_seq = true;
      if (this_present_seq || that_present_seq) {
        if (!(this_present_seq && that_present_seq))
          return false;
        if (this.seq != that.seq)
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_contactIds = true && this.isSetContactIds();
      boolean that_present_contactIds = true && that.isSetContactIds();
      if (this_present_contactIds || that_present_contactIds) {
        if (!(this_present_contactIds && that_present_contactIds))
          return false;
        if (!this.contactIds.equals(that.contactIds))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      createGroup_args other = (createGroup_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSeq(), other.isSetSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeq()) {
        lastComparison = TBaseHelper.compareTo(this.seq, other.seq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetName(), other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetContactIds(), other.isSetContactIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContactIds()) {
        lastComparison = TBaseHelper.compareTo(this.contactIds, other.contactIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SEQ
            if (field.type == TType.I32) {
              this.seq = iprot.readI32();
              setSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // NAME
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // CONTACT_IDS
            if (field.type == TType.LIST) {
              {
                TList _list829 = iprot.readListBegin();
                this.contactIds = new Vector(_list829.size);
                for (int _i830 = 0; _i830 < _list829.size; ++_i830)
                {
                  String _elem831;
                  _elem831 = iprot.readString();
                  this.contactIds.addElement(_elem831);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQ_FIELD_DESC);
      oprot.writeI32(this.seq);
      oprot.writeFieldEnd();
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      if (this.contactIds != null) {
        oprot.writeFieldBegin(CONTACT_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.contactIds.size()));
          for (Enumeration _iter832_enum = this.contactIds.elements(); _iter832_enum.hasMoreElements(); )           {
            String _iter832 = (String)_iter832_enum.nextElement();
            oprot.writeString(_iter832);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("createGroup_args(");
      boolean first = true;

      sb.append("seq:");
      sb.append(this.seq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contactIds:");
      if (this.contactIds == null) {
        sb.append("null");
      } else {
        sb.append(this.contactIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createGroup_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("createGroup_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Group success;
    private TalkException e;

    // isset id assignments

    public createGroup_result() {
    }

    public createGroup_result(
      Group success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createGroup_result(createGroup_result other) {
      if (other.isSetSuccess()) {
        this.success = new Group(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public createGroup_result deepCopy() {
      return new createGroup_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Group getSuccess() {
      return this.success;
    }

    public void setSuccess(Group success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createGroup_result)
        return this.equals((createGroup_result)that);
      return false;
    }

    public boolean equals(createGroup_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      createGroup_result other = (createGroup_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Group();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("createGroup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createQrcodeBase64Image_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("createQrcodeBase64Image_args");

    private static final TField URL_FIELD_DESC = new TField("url", TType.STRING, (short)2);
    private static final TField CHARACTER_SET_FIELD_DESC = new TField("characterSet", TType.STRING, (short)3);
    private static final TField IMAGE_SIZE_FIELD_DESC = new TField("imageSize", TType.I32, (short)4);
    private static final TField X_FIELD_DESC = new TField("x", TType.I32, (short)5);
    private static final TField Y_FIELD_DESC = new TField("y", TType.I32, (short)6);
    private static final TField WIDTH_FIELD_DESC = new TField("width", TType.I32, (short)7);
    private static final TField HEIGHT_FIELD_DESC = new TField("height", TType.I32, (short)8);

    private String url;
    private String characterSet;
    private int imageSize;
    private int x;
    private int y;
    private int width;
    private int height;

    // isset id assignments
    private static final int __IMAGESIZE_ISSET_ID = 0;
    private static final int __X_ISSET_ID = 1;
    private static final int __Y_ISSET_ID = 2;
    private static final int __WIDTH_ISSET_ID = 3;
    private static final int __HEIGHT_ISSET_ID = 4;
    private boolean[] __isset_vector = new boolean[5];

    public createQrcodeBase64Image_args() {
    }

    public createQrcodeBase64Image_args(
      String url,
      String characterSet,
      int imageSize,
      int x,
      int y,
      int width,
      int height)
    {
      this();
      this.url = url;
      this.characterSet = characterSet;
      this.imageSize = imageSize;
      setImageSizeIsSet(true);
      this.x = x;
      setXIsSet(true);
      this.y = y;
      setYIsSet(true);
      this.width = width;
      setWidthIsSet(true);
      this.height = height;
      setHeightIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createQrcodeBase64Image_args(createQrcodeBase64Image_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetUrl()) {
        this.url = other.url;
      }
      if (other.isSetCharacterSet()) {
        this.characterSet = other.characterSet;
      }
      this.imageSize = other.imageSize;
      this.x = other.x;
      this.y = other.y;
      this.width = other.width;
      this.height = other.height;
    }

    public createQrcodeBase64Image_args deepCopy() {
      return new createQrcodeBase64Image_args(this);
    }

    public void clear() {
      this.url = null;
      this.characterSet = null;
      setImageSizeIsSet(false);
      this.imageSize = 0;
      setXIsSet(false);
      this.x = 0;
      setYIsSet(false);
      this.y = 0;
      setWidthIsSet(false);
      this.width = 0;
      setHeightIsSet(false);
      this.height = 0;
    }

    public String getUrl() {
      return this.url;
    }

    public void setUrl(String url) {
      this.url = url;
    }

    public void unsetUrl() {
      this.url = null;
    }

    /** Returns true if field url is set (has been assigned a value) and false otherwise */
    public boolean isSetUrl() {
      return this.url != null;
    }

    public void setUrlIsSet(boolean value) {
      if (!value) {
        this.url = null;
      }
    }

    public String getCharacterSet() {
      return this.characterSet;
    }

    public void setCharacterSet(String characterSet) {
      this.characterSet = characterSet;
    }

    public void unsetCharacterSet() {
      this.characterSet = null;
    }

    /** Returns true if field characterSet is set (has been assigned a value) and false otherwise */
    public boolean isSetCharacterSet() {
      return this.characterSet != null;
    }

    public void setCharacterSetIsSet(boolean value) {
      if (!value) {
        this.characterSet = null;
      }
    }

    public int getImageSize() {
      return this.imageSize;
    }

    public void setImageSize(int imageSize) {
      this.imageSize = imageSize;
      setImageSizeIsSet(true);
    }

    public void unsetImageSize() {
      __isset_vector[__IMAGESIZE_ISSET_ID] = false;
    }

    /** Returns true if field imageSize is set (has been assigned a value) and false otherwise */
    public boolean isSetImageSize() {
      return __isset_vector[__IMAGESIZE_ISSET_ID];
    }

    public void setImageSizeIsSet(boolean value) {
      __isset_vector[__IMAGESIZE_ISSET_ID] = value;
    }

    public int getX() {
      return this.x;
    }

    public void setX(int x) {
      this.x = x;
      setXIsSet(true);
    }

    public void unsetX() {
      __isset_vector[__X_ISSET_ID] = false;
    }

    /** Returns true if field x is set (has been assigned a value) and false otherwise */
    public boolean isSetX() {
      return __isset_vector[__X_ISSET_ID];
    }

    public void setXIsSet(boolean value) {
      __isset_vector[__X_ISSET_ID] = value;
    }

    public int getY() {
      return this.y;
    }

    public void setY(int y) {
      this.y = y;
      setYIsSet(true);
    }

    public void unsetY() {
      __isset_vector[__Y_ISSET_ID] = false;
    }

    /** Returns true if field y is set (has been assigned a value) and false otherwise */
    public boolean isSetY() {
      return __isset_vector[__Y_ISSET_ID];
    }

    public void setYIsSet(boolean value) {
      __isset_vector[__Y_ISSET_ID] = value;
    }

    public int getWidth() {
      return this.width;
    }

    public void setWidth(int width) {
      this.width = width;
      setWidthIsSet(true);
    }

    public void unsetWidth() {
      __isset_vector[__WIDTH_ISSET_ID] = false;
    }

    /** Returns true if field width is set (has been assigned a value) and false otherwise */
    public boolean isSetWidth() {
      return __isset_vector[__WIDTH_ISSET_ID];
    }

    public void setWidthIsSet(boolean value) {
      __isset_vector[__WIDTH_ISSET_ID] = value;
    }

    public int getHeight() {
      return this.height;
    }

    public void setHeight(int height) {
      this.height = height;
      setHeightIsSet(true);
    }

    public void unsetHeight() {
      __isset_vector[__HEIGHT_ISSET_ID] = false;
    }

    /** Returns true if field height is set (has been assigned a value) and false otherwise */
    public boolean isSetHeight() {
      return __isset_vector[__HEIGHT_ISSET_ID];
    }

    public void setHeightIsSet(boolean value) {
      __isset_vector[__HEIGHT_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createQrcodeBase64Image_args)
        return this.equals((createQrcodeBase64Image_args)that);
      return false;
    }

    public boolean equals(createQrcodeBase64Image_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_url = true && this.isSetUrl();
      boolean that_present_url = true && that.isSetUrl();
      if (this_present_url || that_present_url) {
        if (!(this_present_url && that_present_url))
          return false;
        if (!this.url.equals(that.url))
          return false;
      }

      boolean this_present_characterSet = true && this.isSetCharacterSet();
      boolean that_present_characterSet = true && that.isSetCharacterSet();
      if (this_present_characterSet || that_present_characterSet) {
        if (!(this_present_characterSet && that_present_characterSet))
          return false;
        if (!this.characterSet.equals(that.characterSet))
          return false;
      }

      boolean this_present_imageSize = true;
      boolean that_present_imageSize = true;
      if (this_present_imageSize || that_present_imageSize) {
        if (!(this_present_imageSize && that_present_imageSize))
          return false;
        if (this.imageSize != that.imageSize)
          return false;
      }

      boolean this_present_x = true;
      boolean that_present_x = true;
      if (this_present_x || that_present_x) {
        if (!(this_present_x && that_present_x))
          return false;
        if (this.x != that.x)
          return false;
      }

      boolean this_present_y = true;
      boolean that_present_y = true;
      if (this_present_y || that_present_y) {
        if (!(this_present_y && that_present_y))
          return false;
        if (this.y != that.y)
          return false;
      }

      boolean this_present_width = true;
      boolean that_present_width = true;
      if (this_present_width || that_present_width) {
        if (!(this_present_width && that_present_width))
          return false;
        if (this.width != that.width)
          return false;
      }

      boolean this_present_height = true;
      boolean that_present_height = true;
      if (this_present_height || that_present_height) {
        if (!(this_present_height && that_present_height))
          return false;
        if (this.height != that.height)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      createQrcodeBase64Image_args other = (createQrcodeBase64Image_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetUrl(), other.isSetUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUrl()) {
        lastComparison = TBaseHelper.compareTo(this.url, other.url);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCharacterSet(), other.isSetCharacterSet());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCharacterSet()) {
        lastComparison = TBaseHelper.compareTo(this.characterSet, other.characterSet);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetImageSize(), other.isSetImageSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImageSize()) {
        lastComparison = TBaseHelper.compareTo(this.imageSize, other.imageSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetX(), other.isSetX());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetX()) {
        lastComparison = TBaseHelper.compareTo(this.x, other.x);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetY(), other.isSetY());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetY()) {
        lastComparison = TBaseHelper.compareTo(this.y, other.y);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetWidth(), other.isSetWidth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWidth()) {
        lastComparison = TBaseHelper.compareTo(this.width, other.width);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetHeight(), other.isSetHeight());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHeight()) {
        lastComparison = TBaseHelper.compareTo(this.height, other.height);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // URL
            if (field.type == TType.STRING) {
              this.url = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // CHARACTER_SET
            if (field.type == TType.STRING) {
              this.characterSet = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // IMAGE_SIZE
            if (field.type == TType.I32) {
              this.imageSize = iprot.readI32();
              setImageSizeIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // X
            if (field.type == TType.I32) {
              this.x = iprot.readI32();
              setXIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // Y
            if (field.type == TType.I32) {
              this.y = iprot.readI32();
              setYIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // WIDTH
            if (field.type == TType.I32) {
              this.width = iprot.readI32();
              setWidthIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 8: // HEIGHT
            if (field.type == TType.I32) {
              this.height = iprot.readI32();
              setHeightIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(this.url);
        oprot.writeFieldEnd();
      }
      if (this.characterSet != null) {
        oprot.writeFieldBegin(CHARACTER_SET_FIELD_DESC);
        oprot.writeString(this.characterSet);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IMAGE_SIZE_FIELD_DESC);
      oprot.writeI32(this.imageSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(X_FIELD_DESC);
      oprot.writeI32(this.x);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(Y_FIELD_DESC);
      oprot.writeI32(this.y);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WIDTH_FIELD_DESC);
      oprot.writeI32(this.width);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HEIGHT_FIELD_DESC);
      oprot.writeI32(this.height);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("createQrcodeBase64Image_args(");
      boolean first = true;

      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("characterSet:");
      if (this.characterSet == null) {
        sb.append("null");
      } else {
        sb.append(this.characterSet);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("imageSize:");
      sb.append(this.imageSize);
      first = false;
      if (!first) sb.append(", ");
      sb.append("x:");
      sb.append(this.x);
      first = false;
      if (!first) sb.append(", ");
      sb.append("y:");
      sb.append(this.y);
      first = false;
      if (!first) sb.append(", ");
      sb.append("width:");
      sb.append(this.width);
      first = false;
      if (!first) sb.append(", ");
      sb.append("height:");
      sb.append(this.height);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createQrcodeBase64Image_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("createQrcodeBase64Image_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public createQrcodeBase64Image_result() {
    }

    public createQrcodeBase64Image_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createQrcodeBase64Image_result(createQrcodeBase64Image_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public createQrcodeBase64Image_result deepCopy() {
      return new createQrcodeBase64Image_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createQrcodeBase64Image_result)
        return this.equals((createQrcodeBase64Image_result)that);
      return false;
    }

    public boolean equals(createQrcodeBase64Image_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      createQrcodeBase64Image_result other = (createQrcodeBase64Image_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("createQrcodeBase64Image_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createRoom_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("createRoom_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField CONTACT_IDS_FIELD_DESC = new TField("contactIds", TType.LIST, (short)2);

    private int reqSeq;
    private Vector contactIds;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public createRoom_args() {
    }

    public createRoom_args(
      int reqSeq,
      Vector contactIds)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.contactIds = contactIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createRoom_args(createRoom_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetContactIds()) {
        Vector __this__contactIds = new Vector();
        for (Enumeration other_enum = other.contactIds.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__contactIds.addElement(other_element);
        }
        this.contactIds = __this__contactIds;
      }
    }

    public createRoom_args deepCopy() {
      return new createRoom_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.contactIds = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public int getContactIdsSize() {
      return (this.contactIds == null) ? 0 : this.contactIds.size();
    }

    public Enumeration getContactIdsEnumeration() {
      return (this.contactIds == null) ? null : this.contactIds.elements();
    }

    public void addToContactIds(String elem) {
      if (this.contactIds == null) {
        this.contactIds = new Vector();
      }
      this.contactIds.addElement(elem);
    }

    public Vector getContactIds() {
      return this.contactIds;
    }

    public void setContactIds(Vector contactIds) {
      this.contactIds = contactIds;
    }

    public void unsetContactIds() {
      this.contactIds = null;
    }

    /** Returns true if field contactIds is set (has been assigned a value) and false otherwise */
    public boolean isSetContactIds() {
      return this.contactIds != null;
    }

    public void setContactIdsIsSet(boolean value) {
      if (!value) {
        this.contactIds = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createRoom_args)
        return this.equals((createRoom_args)that);
      return false;
    }

    public boolean equals(createRoom_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_contactIds = true && this.isSetContactIds();
      boolean that_present_contactIds = true && that.isSetContactIds();
      if (this_present_contactIds || that_present_contactIds) {
        if (!(this_present_contactIds && that_present_contactIds))
          return false;
        if (!this.contactIds.equals(that.contactIds))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      createRoom_args other = (createRoom_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetContactIds(), other.isSetContactIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContactIds()) {
        lastComparison = TBaseHelper.compareTo(this.contactIds, other.contactIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CONTACT_IDS
            if (field.type == TType.LIST) {
              {
                TList _list833 = iprot.readListBegin();
                this.contactIds = new Vector(_list833.size);
                for (int _i834 = 0; _i834 < _list833.size; ++_i834)
                {
                  String _elem835;
                  _elem835 = iprot.readString();
                  this.contactIds.addElement(_elem835);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.contactIds != null) {
        oprot.writeFieldBegin(CONTACT_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.contactIds.size()));
          for (Enumeration _iter836_enum = this.contactIds.elements(); _iter836_enum.hasMoreElements(); )           {
            String _iter836 = (String)_iter836_enum.nextElement();
            oprot.writeString(_iter836);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("createRoom_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("contactIds:");
      if (this.contactIds == null) {
        sb.append("null");
      } else {
        sb.append(this.contactIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createRoom_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("createRoom_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Room success;
    private TalkException e;

    // isset id assignments

    public createRoom_result() {
    }

    public createRoom_result(
      Room success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createRoom_result(createRoom_result other) {
      if (other.isSetSuccess()) {
        this.success = new Room(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public createRoom_result deepCopy() {
      return new createRoom_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Room getSuccess() {
      return this.success;
    }

    public void setSuccess(Room success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createRoom_result)
        return this.equals((createRoom_result)that);
      return false;
    }

    public boolean equals(createRoom_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      createRoom_result other = (createRoom_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Room();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("createRoom_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createSession_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("createSession_args");


    public createSession_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createSession_args(createSession_args other) {
    }

    public createSession_args deepCopy() {
      return new createSession_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createSession_args)
        return this.equals((createSession_args)that);
      return false;
    }

    public boolean equals(createSession_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      createSession_args other = (createSession_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("createSession_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createSession_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("createSession_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public createSession_result() {
    }

    public createSession_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createSession_result(createSession_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public createSession_result deepCopy() {
      return new createSession_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createSession_result)
        return this.equals((createSession_result)that);
      return false;
    }

    public boolean equals(createSession_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      createSession_result other = (createSession_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("createSession_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class fetchAnnouncements_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("fetchAnnouncements_args");

    private static final TField LAST_FETCHED_INDEX_FIELD_DESC = new TField("lastFetchedIndex", TType.I32, (short)2);

    private int lastFetchedIndex;

    // isset id assignments
    private static final int __LASTFETCHEDINDEX_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public fetchAnnouncements_args() {
    }

    public fetchAnnouncements_args(
      int lastFetchedIndex)
    {
      this();
      this.lastFetchedIndex = lastFetchedIndex;
      setLastFetchedIndexIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchAnnouncements_args(fetchAnnouncements_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.lastFetchedIndex = other.lastFetchedIndex;
    }

    public fetchAnnouncements_args deepCopy() {
      return new fetchAnnouncements_args(this);
    }

    public void clear() {
      setLastFetchedIndexIsSet(false);
      this.lastFetchedIndex = 0;
    }

    public int getLastFetchedIndex() {
      return this.lastFetchedIndex;
    }

    public void setLastFetchedIndex(int lastFetchedIndex) {
      this.lastFetchedIndex = lastFetchedIndex;
      setLastFetchedIndexIsSet(true);
    }

    public void unsetLastFetchedIndex() {
      __isset_vector[__LASTFETCHEDINDEX_ISSET_ID] = false;
    }

    /** Returns true if field lastFetchedIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLastFetchedIndex() {
      return __isset_vector[__LASTFETCHEDINDEX_ISSET_ID];
    }

    public void setLastFetchedIndexIsSet(boolean value) {
      __isset_vector[__LASTFETCHEDINDEX_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchAnnouncements_args)
        return this.equals((fetchAnnouncements_args)that);
      return false;
    }

    public boolean equals(fetchAnnouncements_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_lastFetchedIndex = true;
      boolean that_present_lastFetchedIndex = true;
      if (this_present_lastFetchedIndex || that_present_lastFetchedIndex) {
        if (!(this_present_lastFetchedIndex && that_present_lastFetchedIndex))
          return false;
        if (this.lastFetchedIndex != that.lastFetchedIndex)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      fetchAnnouncements_args other = (fetchAnnouncements_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetLastFetchedIndex(), other.isSetLastFetchedIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastFetchedIndex()) {
        lastComparison = TBaseHelper.compareTo(this.lastFetchedIndex, other.lastFetchedIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // LAST_FETCHED_INDEX
            if (field.type == TType.I32) {
              this.lastFetchedIndex = iprot.readI32();
              setLastFetchedIndexIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LAST_FETCHED_INDEX_FIELD_DESC);
      oprot.writeI32(this.lastFetchedIndex);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("fetchAnnouncements_args(");
      boolean first = true;

      sb.append("lastFetchedIndex:");
      sb.append(this.lastFetchedIndex);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class fetchAnnouncements_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("fetchAnnouncements_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public fetchAnnouncements_result() {
    }

    public fetchAnnouncements_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchAnnouncements_result(fetchAnnouncements_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          Announcement other_element = (Announcement)other_enum.nextElement();
          __this__success.addElement(new Announcement(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public fetchAnnouncements_result deepCopy() {
      return new fetchAnnouncements_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(Announcement elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchAnnouncements_result)
        return this.equals((fetchAnnouncements_result)that);
      return false;
    }

    public boolean equals(fetchAnnouncements_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      fetchAnnouncements_result other = (fetchAnnouncements_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list837 = iprot.readListBegin();
                this.success = new Vector(_list837.size);
                for (int _i838 = 0; _i838 < _list837.size; ++_i838)
                {
                  Announcement _elem839;
                  _elem839 = new Announcement();
                  _elem839.read(iprot);
                  this.success.addElement(_elem839);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter840_enum = this.success.elements(); _iter840_enum.hasMoreElements(); )           {
            Announcement _iter840 = (Announcement)_iter840_enum.nextElement();
            _iter840.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("fetchAnnouncements_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class fetchMessages_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("fetchMessages_args");

    private static final TField LOCAL_TS_FIELD_DESC = new TField("localTs", TType.I64, (short)2);
    private static final TField COUNT_FIELD_DESC = new TField("count", TType.I32, (short)3);

    private long localTs;
    private int count;

    // isset id assignments
    private static final int __LOCALTS_ISSET_ID = 0;
    private static final int __COUNT_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public fetchMessages_args() {
    }

    public fetchMessages_args(
      long localTs,
      int count)
    {
      this();
      this.localTs = localTs;
      setLocalTsIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchMessages_args(fetchMessages_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.localTs = other.localTs;
      this.count = other.count;
    }

    public fetchMessages_args deepCopy() {
      return new fetchMessages_args(this);
    }

    public void clear() {
      setLocalTsIsSet(false);
      this.localTs = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public long getLocalTs() {
      return this.localTs;
    }

    public void setLocalTs(long localTs) {
      this.localTs = localTs;
      setLocalTsIsSet(true);
    }

    public void unsetLocalTs() {
      __isset_vector[__LOCALTS_ISSET_ID] = false;
    }

    /** Returns true if field localTs is set (has been assigned a value) and false otherwise */
    public boolean isSetLocalTs() {
      return __isset_vector[__LOCALTS_ISSET_ID];
    }

    public void setLocalTsIsSet(boolean value) {
      __isset_vector[__LOCALTS_ISSET_ID] = value;
    }

    public int getCount() {
      return this.count;
    }

    public void setCount(int count) {
      this.count = count;
      setCountIsSet(true);
    }

    public void unsetCount() {
      __isset_vector[__COUNT_ISSET_ID] = false;
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return __isset_vector[__COUNT_ISSET_ID];
    }

    public void setCountIsSet(boolean value) {
      __isset_vector[__COUNT_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchMessages_args)
        return this.equals((fetchMessages_args)that);
      return false;
    }

    public boolean equals(fetchMessages_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_localTs = true;
      boolean that_present_localTs = true;
      if (this_present_localTs || that_present_localTs) {
        if (!(this_present_localTs && that_present_localTs))
          return false;
        if (this.localTs != that.localTs)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      fetchMessages_args other = (fetchMessages_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetLocalTs(), other.isSetLocalTs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocalTs()) {
        lastComparison = TBaseHelper.compareTo(this.localTs, other.localTs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCount(), other.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = TBaseHelper.compareTo(this.count, other.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // LOCAL_TS
            if (field.type == TType.I64) {
              this.localTs = iprot.readI64();
              setLocalTsIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // COUNT
            if (field.type == TType.I32) {
              this.count = iprot.readI32();
              setCountIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LOCAL_TS_FIELD_DESC);
      oprot.writeI64(this.localTs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUNT_FIELD_DESC);
      oprot.writeI32(this.count);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("fetchMessages_args(");
      boolean first = true;

      sb.append("localTs:");
      sb.append(this.localTs);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class fetchMessages_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("fetchMessages_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public fetchMessages_result() {
    }

    public fetchMessages_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchMessages_result(fetchMessages_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          Message other_element = (Message)other_enum.nextElement();
          __this__success.addElement(new Message(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public fetchMessages_result deepCopy() {
      return new fetchMessages_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(Message elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchMessages_result)
        return this.equals((fetchMessages_result)that);
      return false;
    }

    public boolean equals(fetchMessages_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      fetchMessages_result other = (fetchMessages_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list841 = iprot.readListBegin();
                this.success = new Vector(_list841.size);
                for (int _i842 = 0; _i842 < _list841.size; ++_i842)
                {
                  Message _elem843;
                  _elem843 = new Message();
                  _elem843.read(iprot);
                  this.success.addElement(_elem843);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter844_enum = this.success.elements(); _iter844_enum.hasMoreElements(); )           {
            Message _iter844 = (Message)_iter844_enum.nextElement();
            _iter844.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("fetchMessages_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class fetchOperations_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("fetchOperations_args");

    private static final TField LOCAL_REV_FIELD_DESC = new TField("localRev", TType.I64, (short)2);
    private static final TField COUNT_FIELD_DESC = new TField("count", TType.I32, (short)3);

    private long localRev;
    private int count;

    // isset id assignments
    private static final int __LOCALREV_ISSET_ID = 0;
    private static final int __COUNT_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public fetchOperations_args() {
    }

    public fetchOperations_args(
      long localRev,
      int count)
    {
      this();
      this.localRev = localRev;
      setLocalRevIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchOperations_args(fetchOperations_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.localRev = other.localRev;
      this.count = other.count;
    }

    public fetchOperations_args deepCopy() {
      return new fetchOperations_args(this);
    }

    public void clear() {
      setLocalRevIsSet(false);
      this.localRev = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public long getLocalRev() {
      return this.localRev;
    }

    public void setLocalRev(long localRev) {
      this.localRev = localRev;
      setLocalRevIsSet(true);
    }

    public void unsetLocalRev() {
      __isset_vector[__LOCALREV_ISSET_ID] = false;
    }

    /** Returns true if field localRev is set (has been assigned a value) and false otherwise */
    public boolean isSetLocalRev() {
      return __isset_vector[__LOCALREV_ISSET_ID];
    }

    public void setLocalRevIsSet(boolean value) {
      __isset_vector[__LOCALREV_ISSET_ID] = value;
    }

    public int getCount() {
      return this.count;
    }

    public void setCount(int count) {
      this.count = count;
      setCountIsSet(true);
    }

    public void unsetCount() {
      __isset_vector[__COUNT_ISSET_ID] = false;
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return __isset_vector[__COUNT_ISSET_ID];
    }

    public void setCountIsSet(boolean value) {
      __isset_vector[__COUNT_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchOperations_args)
        return this.equals((fetchOperations_args)that);
      return false;
    }

    public boolean equals(fetchOperations_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_localRev = true;
      boolean that_present_localRev = true;
      if (this_present_localRev || that_present_localRev) {
        if (!(this_present_localRev && that_present_localRev))
          return false;
        if (this.localRev != that.localRev)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      fetchOperations_args other = (fetchOperations_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetLocalRev(), other.isSetLocalRev());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocalRev()) {
        lastComparison = TBaseHelper.compareTo(this.localRev, other.localRev);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCount(), other.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = TBaseHelper.compareTo(this.count, other.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // LOCAL_REV
            if (field.type == TType.I64) {
              this.localRev = iprot.readI64();
              setLocalRevIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // COUNT
            if (field.type == TType.I32) {
              this.count = iprot.readI32();
              setCountIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LOCAL_REV_FIELD_DESC);
      oprot.writeI64(this.localRev);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUNT_FIELD_DESC);
      oprot.writeI32(this.count);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("fetchOperations_args(");
      boolean first = true;

      sb.append("localRev:");
      sb.append(this.localRev);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class fetchOperations_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("fetchOperations_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private ShouldSyncException e;

    // isset id assignments

    public fetchOperations_result() {
    }

    public fetchOperations_result(
      Vector success,
      ShouldSyncException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchOperations_result(fetchOperations_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          Operation other_element = (Operation)other_enum.nextElement();
          __this__success.addElement(new Operation(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new ShouldSyncException(other.e);
      }
    }

    public fetchOperations_result deepCopy() {
      return new fetchOperations_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(Operation elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ShouldSyncException getE() {
      return this.e;
    }

    public void setE(ShouldSyncException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchOperations_result)
        return this.equals((fetchOperations_result)that);
      return false;
    }

    public boolean equals(fetchOperations_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      fetchOperations_result other = (fetchOperations_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list845 = iprot.readListBegin();
                this.success = new Vector(_list845.size);
                for (int _i846 = 0; _i846 < _list845.size; ++_i846)
                {
                  Operation _elem847;
                  _elem847 = new Operation();
                  _elem847.read(iprot);
                  this.success.addElement(_elem847);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new ShouldSyncException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter848_enum = this.success.elements(); _iter848_enum.hasMoreElements(); )           {
            Operation _iter848 = (Operation)_iter848_enum.nextElement();
            _iter848.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("fetchOperations_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class fetchOps_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("fetchOps_args");

    private static final TField LOCAL_REV_FIELD_DESC = new TField("localRev", TType.I64, (short)2);
    private static final TField COUNT_FIELD_DESC = new TField("count", TType.I32, (short)3);
    private static final TField GLOBAL_REV_FIELD_DESC = new TField("globalRev", TType.I64, (short)4);
    private static final TField INDIVIDUAL_REV_FIELD_DESC = new TField("individualRev", TType.I64, (short)5);

    private long localRev;
    private int count;
    private long globalRev;
    private long individualRev;

    // isset id assignments
    private static final int __LOCALREV_ISSET_ID = 0;
    private static final int __COUNT_ISSET_ID = 1;
    private static final int __GLOBALREV_ISSET_ID = 2;
    private static final int __INDIVIDUALREV_ISSET_ID = 3;
    private boolean[] __isset_vector = new boolean[4];

    public fetchOps_args() {
    }

    public fetchOps_args(
      long localRev,
      int count,
      long globalRev,
      long individualRev)
    {
      this();
      this.localRev = localRev;
      setLocalRevIsSet(true);
      this.count = count;
      setCountIsSet(true);
      this.globalRev = globalRev;
      setGlobalRevIsSet(true);
      this.individualRev = individualRev;
      setIndividualRevIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchOps_args(fetchOps_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.localRev = other.localRev;
      this.count = other.count;
      this.globalRev = other.globalRev;
      this.individualRev = other.individualRev;
    }

    public fetchOps_args deepCopy() {
      return new fetchOps_args(this);
    }

    public void clear() {
      setLocalRevIsSet(false);
      this.localRev = 0;
      setCountIsSet(false);
      this.count = 0;
      setGlobalRevIsSet(false);
      this.globalRev = 0;
      setIndividualRevIsSet(false);
      this.individualRev = 0;
    }

    public long getLocalRev() {
      return this.localRev;
    }

    public void setLocalRev(long localRev) {
      this.localRev = localRev;
      setLocalRevIsSet(true);
    }

    public void unsetLocalRev() {
      __isset_vector[__LOCALREV_ISSET_ID] = false;
    }

    /** Returns true if field localRev is set (has been assigned a value) and false otherwise */
    public boolean isSetLocalRev() {
      return __isset_vector[__LOCALREV_ISSET_ID];
    }

    public void setLocalRevIsSet(boolean value) {
      __isset_vector[__LOCALREV_ISSET_ID] = value;
    }

    public int getCount() {
      return this.count;
    }

    public void setCount(int count) {
      this.count = count;
      setCountIsSet(true);
    }

    public void unsetCount() {
      __isset_vector[__COUNT_ISSET_ID] = false;
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return __isset_vector[__COUNT_ISSET_ID];
    }

    public void setCountIsSet(boolean value) {
      __isset_vector[__COUNT_ISSET_ID] = value;
    }

    public long getGlobalRev() {
      return this.globalRev;
    }

    public void setGlobalRev(long globalRev) {
      this.globalRev = globalRev;
      setGlobalRevIsSet(true);
    }

    public void unsetGlobalRev() {
      __isset_vector[__GLOBALREV_ISSET_ID] = false;
    }

    /** Returns true if field globalRev is set (has been assigned a value) and false otherwise */
    public boolean isSetGlobalRev() {
      return __isset_vector[__GLOBALREV_ISSET_ID];
    }

    public void setGlobalRevIsSet(boolean value) {
      __isset_vector[__GLOBALREV_ISSET_ID] = value;
    }

    public long getIndividualRev() {
      return this.individualRev;
    }

    public void setIndividualRev(long individualRev) {
      this.individualRev = individualRev;
      setIndividualRevIsSet(true);
    }

    public void unsetIndividualRev() {
      __isset_vector[__INDIVIDUALREV_ISSET_ID] = false;
    }

    /** Returns true if field individualRev is set (has been assigned a value) and false otherwise */
    public boolean isSetIndividualRev() {
      return __isset_vector[__INDIVIDUALREV_ISSET_ID];
    }

    public void setIndividualRevIsSet(boolean value) {
      __isset_vector[__INDIVIDUALREV_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchOps_args)
        return this.equals((fetchOps_args)that);
      return false;
    }

    public boolean equals(fetchOps_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_localRev = true;
      boolean that_present_localRev = true;
      if (this_present_localRev || that_present_localRev) {
        if (!(this_present_localRev && that_present_localRev))
          return false;
        if (this.localRev != that.localRev)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      boolean this_present_globalRev = true;
      boolean that_present_globalRev = true;
      if (this_present_globalRev || that_present_globalRev) {
        if (!(this_present_globalRev && that_present_globalRev))
          return false;
        if (this.globalRev != that.globalRev)
          return false;
      }

      boolean this_present_individualRev = true;
      boolean that_present_individualRev = true;
      if (this_present_individualRev || that_present_individualRev) {
        if (!(this_present_individualRev && that_present_individualRev))
          return false;
        if (this.individualRev != that.individualRev)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      fetchOps_args other = (fetchOps_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetLocalRev(), other.isSetLocalRev());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocalRev()) {
        lastComparison = TBaseHelper.compareTo(this.localRev, other.localRev);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCount(), other.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = TBaseHelper.compareTo(this.count, other.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGlobalRev(), other.isSetGlobalRev());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGlobalRev()) {
        lastComparison = TBaseHelper.compareTo(this.globalRev, other.globalRev);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetIndividualRev(), other.isSetIndividualRev());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndividualRev()) {
        lastComparison = TBaseHelper.compareTo(this.individualRev, other.individualRev);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // LOCAL_REV
            if (field.type == TType.I64) {
              this.localRev = iprot.readI64();
              setLocalRevIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // COUNT
            if (field.type == TType.I32) {
              this.count = iprot.readI32();
              setCountIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // GLOBAL_REV
            if (field.type == TType.I64) {
              this.globalRev = iprot.readI64();
              setGlobalRevIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // INDIVIDUAL_REV
            if (field.type == TType.I64) {
              this.individualRev = iprot.readI64();
              setIndividualRevIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LOCAL_REV_FIELD_DESC);
      oprot.writeI64(this.localRev);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUNT_FIELD_DESC);
      oprot.writeI32(this.count);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GLOBAL_REV_FIELD_DESC);
      oprot.writeI64(this.globalRev);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INDIVIDUAL_REV_FIELD_DESC);
      oprot.writeI64(this.individualRev);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("fetchOps_args(");
      boolean first = true;

      sb.append("localRev:");
      sb.append(this.localRev);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      if (!first) sb.append(", ");
      sb.append("globalRev:");
      sb.append(this.globalRev);
      first = false;
      if (!first) sb.append(", ");
      sb.append("individualRev:");
      sb.append(this.individualRev);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class fetchOps_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("fetchOps_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private ShouldSyncException e;

    // isset id assignments

    public fetchOps_result() {
    }

    public fetchOps_result(
      Vector success,
      ShouldSyncException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchOps_result(fetchOps_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          Operation other_element = (Operation)other_enum.nextElement();
          __this__success.addElement(new Operation(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new ShouldSyncException(other.e);
      }
    }

    public fetchOps_result deepCopy() {
      return new fetchOps_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(Operation elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ShouldSyncException getE() {
      return this.e;
    }

    public void setE(ShouldSyncException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchOps_result)
        return this.equals((fetchOps_result)that);
      return false;
    }

    public boolean equals(fetchOps_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      fetchOps_result other = (fetchOps_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list849 = iprot.readListBegin();
                this.success = new Vector(_list849.size);
                for (int _i850 = 0; _i850 < _list849.size; ++_i850)
                {
                  Operation _elem851;
                  _elem851 = new Operation();
                  _elem851.read(iprot);
                  this.success.addElement(_elem851);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new ShouldSyncException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter852_enum = this.success.elements(); _iter852_enum.hasMoreElements(); )           {
            Operation _iter852 = (Operation)_iter852_enum.nextElement();
            _iter852.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("fetchOps_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findAndAddContactsByEmail_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findAndAddContactsByEmail_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField EMAILS_FIELD_DESC = new TField("emails", TType.SET, (short)2);

    private int reqSeq;
    private Hashtable emails;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public findAndAddContactsByEmail_args() {
    }

    public findAndAddContactsByEmail_args(
      int reqSeq,
      Hashtable emails)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.emails = emails;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAndAddContactsByEmail_args(findAndAddContactsByEmail_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetEmails()) {
        Hashtable __this__emails = new Hashtable();
        for (Enumeration other_enum = other.emails.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__emails.addElement(other_element);
        }
        this.emails = __this__emails;
      }
    }

    public findAndAddContactsByEmail_args deepCopy() {
      return new findAndAddContactsByEmail_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.emails = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public int getEmailsSize() {
      return (this.emails == null) ? 0 : this.emails.size();
    }

    public Enumeration getEmailsEnumeration() {
      return (this.emails == null) ? null : this.emails.elements();
    }

    public void addToEmails(String elem) {
      if (this.emails == null) {
        this.emails = new Hashtable();
      }
      this.emails.put(elem, elem);
    }

    public Hashtable getEmails() {
      return this.emails;
    }

    public void setEmails(Hashtable emails) {
      this.emails = emails;
    }

    public void unsetEmails() {
      this.emails = null;
    }

    /** Returns true if field emails is set (has been assigned a value) and false otherwise */
    public boolean isSetEmails() {
      return this.emails != null;
    }

    public void setEmailsIsSet(boolean value) {
      if (!value) {
        this.emails = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAndAddContactsByEmail_args)
        return this.equals((findAndAddContactsByEmail_args)that);
      return false;
    }

    public boolean equals(findAndAddContactsByEmail_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_emails = true && this.isSetEmails();
      boolean that_present_emails = true && that.isSetEmails();
      if (this_present_emails || that_present_emails) {
        if (!(this_present_emails && that_present_emails))
          return false;
        if (!this.emails.equals(that.emails))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findAndAddContactsByEmail_args other = (findAndAddContactsByEmail_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetEmails(), other.isSetEmails());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmails()) {
        lastComparison = TBaseHelper.compareTo(this.emails, other.emails);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // EMAILS
            if (field.type == TType.SET) {
              {
                TSet _set853 = iprot.readSetBegin();
                this.emails = new Hashtable(2*_set853.size);
                for (int _i854 = 0; _i854 < _set853.size; ++_i854)
                {
                  String _elem855;
                  _elem855 = iprot.readString();
                  this.emails.put(_elem855, _elem855);
                }
                iprot.readSetEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.emails != null) {
        oprot.writeFieldBegin(EMAILS_FIELD_DESC);
        {
          oprot.writeSetBegin(new TSet(TType.STRING, this.emails.size()));
          for (Enumeration _iter856_enum = this.emails.keys(); _iter856_enum.hasMoreElements(); )           {
            String _iter856 = (String)_iter856_enum.nextElement();
            oprot.writeString(_iter856);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findAndAddContactsByEmail_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("emails:");
      if (this.emails == null) {
        sb.append("null");
      } else {
        sb.append(this.emails);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findAndAddContactsByEmail_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findAndAddContactsByEmail_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.MAP, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Hashtable success;
    private TalkException e;

    // isset id assignments

    public findAndAddContactsByEmail_result() {
    }

    public findAndAddContactsByEmail_result(
      Hashtable success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAndAddContactsByEmail_result(findAndAddContactsByEmail_result other) {
      if (other.isSetSuccess()) {
        Hashtable __this__success = new Hashtable();
        for (Enumeration other_enum = other.success.keys(); other_enum.hasMoreElements(); ) {

          String other_element_key = (String)other_enum.nextElement();
          Contact other_element_value = (Contact)other.success.get(other_element_key);

          String __this__success_copy_key = other_element_key;

          Contact __this__success_copy_value = new Contact(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public findAndAddContactsByEmail_result deepCopy() {
      return new findAndAddContactsByEmail_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Contact val) {
      if (this.success == null) {
        this.success = new Hashtable();
      }
      this.success.put(key, val);
    }

    public Hashtable getSuccess() {
      return this.success;
    }

    public void setSuccess(Hashtable success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAndAddContactsByEmail_result)
        return this.equals((findAndAddContactsByEmail_result)that);
      return false;
    }

    public boolean equals(findAndAddContactsByEmail_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findAndAddContactsByEmail_result other = (findAndAddContactsByEmail_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.MAP) {
              {
                TMap _map857 = iprot.readMapBegin();
                this.success = new Hashtable(2*_map857.size);
                for (int _i858 = 0; _i858 < _map857.size; ++_i858)
                {
                  String _key859;
                  Contact _val860;
                  _key859 = iprot.readString();
                  _val860 = new Contact();
                  _val860.read(iprot);
                  this.success.put(_key859, _val860);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.success.size()));
          for (Enumeration _iter861_enum = this.success.keys(); _iter861_enum.hasMoreElements(); )           {
            String _iter861 = (String)_iter861_enum.nextElement();
            oprot.writeString(_iter861);
            ((Contact)this.success.get(_iter861)).write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findAndAddContactsByEmail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findAndAddContactsByMid_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findAndAddContactsByMid_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField MID_FIELD_DESC = new TField("mid", TType.STRING, (short)2);
    private static final TField TYPE_FIELD_DESC = new TField("type", TType.I32, (short)3);
    private static final TField REFERENCE_FIELD_DESC = new TField("reference", TType.STRING, (short)4);

    private int reqSeq;
    private String mid;
    private ContactType type;
    private String reference;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public findAndAddContactsByMid_args() {
    }

    public findAndAddContactsByMid_args(
      int reqSeq,
      String mid,
      ContactType type,
      String reference)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.mid = mid;
      this.type = type;
      this.reference = reference;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAndAddContactsByMid_args(findAndAddContactsByMid_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetMid()) {
        this.mid = other.mid;
      }
      if (other.isSetType()) {
        this.type = other.type;
      }
      if (other.isSetReference()) {
        this.reference = other.reference;
      }
    }

    public findAndAddContactsByMid_args deepCopy() {
      return new findAndAddContactsByMid_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.mid = null;
      this.type = null;
      this.reference = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public String getMid() {
      return this.mid;
    }

    public void setMid(String mid) {
      this.mid = mid;
    }

    public void unsetMid() {
      this.mid = null;
    }

    /** Returns true if field mid is set (has been assigned a value) and false otherwise */
    public boolean isSetMid() {
      return this.mid != null;
    }

    public void setMidIsSet(boolean value) {
      if (!value) {
        this.mid = null;
      }
    }

    /**
     * 
     * @see ContactType
     */
    public ContactType getType() {
      return this.type;
    }

    /**
     * 
     * @see ContactType
     */
    public void setType(ContactType type) {
      this.type = type;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public String getReference() {
      return this.reference;
    }

    public void setReference(String reference) {
      this.reference = reference;
    }

    public void unsetReference() {
      this.reference = null;
    }

    /** Returns true if field reference is set (has been assigned a value) and false otherwise */
    public boolean isSetReference() {
      return this.reference != null;
    }

    public void setReferenceIsSet(boolean value) {
      if (!value) {
        this.reference = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAndAddContactsByMid_args)
        return this.equals((findAndAddContactsByMid_args)that);
      return false;
    }

    public boolean equals(findAndAddContactsByMid_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_mid = true && this.isSetMid();
      boolean that_present_mid = true && that.isSetMid();
      if (this_present_mid || that_present_mid) {
        if (!(this_present_mid && that_present_mid))
          return false;
        if (!this.mid.equals(that.mid))
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      boolean this_present_reference = true && this.isSetReference();
      boolean that_present_reference = true && that.isSetReference();
      if (this_present_reference || that_present_reference) {
        if (!(this_present_reference && that_present_reference))
          return false;
        if (!this.reference.equals(that.reference))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findAndAddContactsByMid_args other = (findAndAddContactsByMid_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMid(), other.isSetMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMid()) {
        lastComparison = TBaseHelper.compareTo(this.mid, other.mid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetType(), other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetReference(), other.isSetReference());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference()) {
        lastComparison = TBaseHelper.compareTo(this.reference, other.reference);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MID
            if (field.type == TType.STRING) {
              this.mid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TYPE
            if (field.type == TType.I32) {
              this.type = ContactType.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // REFERENCE
            if (field.type == TType.STRING) {
              this.reference = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.mid != null) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeString(this.mid);
        oprot.writeFieldEnd();
      }
      if (this.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(this.type.getValue());
        oprot.writeFieldEnd();
      }
      if (this.reference != null) {
        oprot.writeFieldBegin(REFERENCE_FIELD_DESC);
        oprot.writeString(this.reference);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findAndAddContactsByMid_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("mid:");
      if (this.mid == null) {
        sb.append("null");
      } else {
        sb.append(this.mid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference:");
      if (this.reference == null) {
        sb.append("null");
      } else {
        sb.append(this.reference);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findAndAddContactsByMid_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findAndAddContactsByMid_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.MAP, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Hashtable success;
    private TalkException e;

    // isset id assignments

    public findAndAddContactsByMid_result() {
    }

    public findAndAddContactsByMid_result(
      Hashtable success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAndAddContactsByMid_result(findAndAddContactsByMid_result other) {
      if (other.isSetSuccess()) {
        Hashtable __this__success = new Hashtable();
        for (Enumeration other_enum = other.success.keys(); other_enum.hasMoreElements(); ) {

          String other_element_key = (String)other_enum.nextElement();
          Contact other_element_value = (Contact)other.success.get(other_element_key);

          String __this__success_copy_key = other_element_key;

          Contact __this__success_copy_value = new Contact(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public findAndAddContactsByMid_result deepCopy() {
      return new findAndAddContactsByMid_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Contact val) {
      if (this.success == null) {
        this.success = new Hashtable();
      }
      this.success.put(key, val);
    }

    public Hashtable getSuccess() {
      return this.success;
    }

    public void setSuccess(Hashtable success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAndAddContactsByMid_result)
        return this.equals((findAndAddContactsByMid_result)that);
      return false;
    }

    public boolean equals(findAndAddContactsByMid_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findAndAddContactsByMid_result other = (findAndAddContactsByMid_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.MAP) {
              {
                TMap _map862 = iprot.readMapBegin();
                this.success = new Hashtable(2*_map862.size);
                for (int _i863 = 0; _i863 < _map862.size; ++_i863)
                {
                  String _key864;
                  Contact _val865;
                  _key864 = iprot.readString();
                  _val865 = new Contact();
                  _val865.read(iprot);
                  this.success.put(_key864, _val865);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.success.size()));
          for (Enumeration _iter866_enum = this.success.keys(); _iter866_enum.hasMoreElements(); )           {
            String _iter866 = (String)_iter866_enum.nextElement();
            oprot.writeString(_iter866);
            ((Contact)this.success.get(_iter866)).write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findAndAddContactsByMid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findGroupByTicketV2_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findGroupByTicketV2_args");

    private static final TField TICKET_ID_FIELD_DESC = new TField("ticketId", TType.STRING, (short)1);

    private String ticketId;

    // isset id assignments

    public findGroupByTicketV2_args() {
    }

    public findGroupByTicketV2_args(
      String ticketId)
    {
      this();
      this.ticketId = ticketId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findGroupByTicketV2_args(findGroupByTicketV2_args other) {
      if (other.isSetTicketId()) {
        this.ticketId = other.ticketId;
      }
    }

    public findGroupByTicketV2_args deepCopy() {
      return new findGroupByTicketV2_args(this);
    }

    public void clear() {
      this.ticketId = null;
    }

    public String getTicketId() {
      return this.ticketId;
    }

    public void setTicketId(String ticketId) {
      this.ticketId = ticketId;
    }

    public void unsetTicketId() {
      this.ticketId = null;
    }

    /** Returns true if field ticketId is set (has been assigned a value) and false otherwise */
    public boolean isSetTicketId() {
      return this.ticketId != null;
    }

    public void setTicketIdIsSet(boolean value) {
      if (!value) {
        this.ticketId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findGroupByTicketV2_args)
        return this.equals((findGroupByTicketV2_args)that);
      return false;
    }

    public boolean equals(findGroupByTicketV2_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ticketId = true && this.isSetTicketId();
      boolean that_present_ticketId = true && that.isSetTicketId();
      if (this_present_ticketId || that_present_ticketId) {
        if (!(this_present_ticketId && that_present_ticketId))
          return false;
        if (!this.ticketId.equals(that.ticketId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findGroupByTicketV2_args other = (findGroupByTicketV2_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetTicketId(), other.isSetTicketId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTicketId()) {
        lastComparison = TBaseHelper.compareTo(this.ticketId, other.ticketId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TICKET_ID
            if (field.type == TType.STRING) {
              this.ticketId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.ticketId != null) {
        oprot.writeFieldBegin(TICKET_ID_FIELD_DESC);
        oprot.writeString(this.ticketId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findGroupByTicketV2_args(");
      boolean first = true;

      sb.append("ticketId:");
      if (this.ticketId == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findGroupByTicketV2_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findGroupByTicketV2_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Group success;
    private TalkException e;

    // isset id assignments

    public findGroupByTicketV2_result() {
    }

    public findGroupByTicketV2_result(
      Group success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findGroupByTicketV2_result(findGroupByTicketV2_result other) {
      if (other.isSetSuccess()) {
        this.success = new Group(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public findGroupByTicketV2_result deepCopy() {
      return new findGroupByTicketV2_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Group getSuccess() {
      return this.success;
    }

    public void setSuccess(Group success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findGroupByTicketV2_result)
        return this.equals((findGroupByTicketV2_result)that);
      return false;
    }

    public boolean equals(findGroupByTicketV2_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findGroupByTicketV2_result other = (findGroupByTicketV2_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Group();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findGroupByTicketV2_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findAndAddContactsByPhone_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findAndAddContactsByPhone_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField PHONES_FIELD_DESC = new TField("phones", TType.SET, (short)2);

    private int reqSeq;
    private Hashtable phones;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public findAndAddContactsByPhone_args() {
    }

    public findAndAddContactsByPhone_args(
      int reqSeq,
      Hashtable phones)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.phones = phones;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAndAddContactsByPhone_args(findAndAddContactsByPhone_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetPhones()) {
        Hashtable __this__phones = new Hashtable();
        for (Enumeration other_enum = other.phones.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__phones.addElement(other_element);
        }
        this.phones = __this__phones;
      }
    }

    public findAndAddContactsByPhone_args deepCopy() {
      return new findAndAddContactsByPhone_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.phones = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public int getPhonesSize() {
      return (this.phones == null) ? 0 : this.phones.size();
    }

    public Enumeration getPhonesEnumeration() {
      return (this.phones == null) ? null : this.phones.elements();
    }

    public void addToPhones(String elem) {
      if (this.phones == null) {
        this.phones = new Hashtable();
      }
      this.phones.put(elem, elem);
    }

    public Hashtable getPhones() {
      return this.phones;
    }

    public void setPhones(Hashtable phones) {
      this.phones = phones;
    }

    public void unsetPhones() {
      this.phones = null;
    }

    /** Returns true if field phones is set (has been assigned a value) and false otherwise */
    public boolean isSetPhones() {
      return this.phones != null;
    }

    public void setPhonesIsSet(boolean value) {
      if (!value) {
        this.phones = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAndAddContactsByPhone_args)
        return this.equals((findAndAddContactsByPhone_args)that);
      return false;
    }

    public boolean equals(findAndAddContactsByPhone_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_phones = true && this.isSetPhones();
      boolean that_present_phones = true && that.isSetPhones();
      if (this_present_phones || that_present_phones) {
        if (!(this_present_phones && that_present_phones))
          return false;
        if (!this.phones.equals(that.phones))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findAndAddContactsByPhone_args other = (findAndAddContactsByPhone_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPhones(), other.isSetPhones());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPhones()) {
        lastComparison = TBaseHelper.compareTo(this.phones, other.phones);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // PHONES
            if (field.type == TType.SET) {
              {
                TSet _set867 = iprot.readSetBegin();
                this.phones = new Hashtable(2*_set867.size);
                for (int _i868 = 0; _i868 < _set867.size; ++_i868)
                {
                  String _elem869;
                  _elem869 = iprot.readString();
                  this.phones.put(_elem869, _elem869);
                }
                iprot.readSetEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.phones != null) {
        oprot.writeFieldBegin(PHONES_FIELD_DESC);
        {
          oprot.writeSetBegin(new TSet(TType.STRING, this.phones.size()));
          for (Enumeration _iter870_enum = this.phones.keys(); _iter870_enum.hasMoreElements(); )           {
            String _iter870 = (String)_iter870_enum.nextElement();
            oprot.writeString(_iter870);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findAndAddContactsByPhone_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("phones:");
      if (this.phones == null) {
        sb.append("null");
      } else {
        sb.append(this.phones);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findAndAddContactsByPhone_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findAndAddContactsByPhone_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.MAP, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Hashtable success;
    private TalkException e;

    // isset id assignments

    public findAndAddContactsByPhone_result() {
    }

    public findAndAddContactsByPhone_result(
      Hashtable success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAndAddContactsByPhone_result(findAndAddContactsByPhone_result other) {
      if (other.isSetSuccess()) {
        Hashtable __this__success = new Hashtable();
        for (Enumeration other_enum = other.success.keys(); other_enum.hasMoreElements(); ) {

          String other_element_key = (String)other_enum.nextElement();
          Contact other_element_value = (Contact)other.success.get(other_element_key);

          String __this__success_copy_key = other_element_key;

          Contact __this__success_copy_value = new Contact(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public findAndAddContactsByPhone_result deepCopy() {
      return new findAndAddContactsByPhone_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Contact val) {
      if (this.success == null) {
        this.success = new Hashtable();
      }
      this.success.put(key, val);
    }

    public Hashtable getSuccess() {
      return this.success;
    }

    public void setSuccess(Hashtable success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAndAddContactsByPhone_result)
        return this.equals((findAndAddContactsByPhone_result)that);
      return false;
    }

    public boolean equals(findAndAddContactsByPhone_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findAndAddContactsByPhone_result other = (findAndAddContactsByPhone_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.MAP) {
              {
                TMap _map871 = iprot.readMapBegin();
                this.success = new Hashtable(2*_map871.size);
                for (int _i872 = 0; _i872 < _map871.size; ++_i872)
                {
                  String _key873;
                  Contact _val874;
                  _key873 = iprot.readString();
                  _val874 = new Contact();
                  _val874.read(iprot);
                  this.success.put(_key873, _val874);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.success.size()));
          for (Enumeration _iter875_enum = this.success.keys(); _iter875_enum.hasMoreElements(); )           {
            String _iter875 = (String)_iter875_enum.nextElement();
            oprot.writeString(_iter875);
            ((Contact)this.success.get(_iter875)).write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findAndAddContactsByPhone_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getFriendRequests_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getFriendRequests_args");

    private static final TField DIRECTION_FIELD_DESC = new TField("direction", TType.I32, (short)1);
    private static final TField LAST_SEEN_SEQ_ID_FIELD_DESC = new TField("lastSeenSeqId", TType.I64, (short)2);

    private FriendRequestDirection direction;
    private long lastSeenSeqId;

    // isset id assignments
    private static final int __LASTSEENSEQID_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getFriendRequests_args() {
    }

    public getFriendRequests_args(
      FriendRequestDirection direction,
      long lastSeenSeqId)
    {
      this();
      this.direction = direction;
      this.lastSeenSeqId = lastSeenSeqId;
      setLastSeenSeqIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFriendRequests_args(getFriendRequests_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetDirection()) {
        this.direction = other.direction;
      }
      this.lastSeenSeqId = other.lastSeenSeqId;
    }

    public getFriendRequests_args deepCopy() {
      return new getFriendRequests_args(this);
    }

    public void clear() {
      this.direction = null;
      setLastSeenSeqIdIsSet(false);
      this.lastSeenSeqId = 0;
    }

    /**
     * 
     * @see FriendRequestDirection
     */
    public FriendRequestDirection getDirection() {
      return this.direction;
    }

    /**
     * 
     * @see FriendRequestDirection
     */
    public void setDirection(FriendRequestDirection direction) {
      this.direction = direction;
    }

    public void unsetDirection() {
      this.direction = null;
    }

    /** Returns true if field direction is set (has been assigned a value) and false otherwise */
    public boolean isSetDirection() {
      return this.direction != null;
    }

    public void setDirectionIsSet(boolean value) {
      if (!value) {
        this.direction = null;
      }
    }

    public long getLastSeenSeqId() {
      return this.lastSeenSeqId;
    }

    public void setLastSeenSeqId(long lastSeenSeqId) {
      this.lastSeenSeqId = lastSeenSeqId;
      setLastSeenSeqIdIsSet(true);
    }

    public void unsetLastSeenSeqId() {
      __isset_vector[__LASTSEENSEQID_ISSET_ID] = false;
    }

    /** Returns true if field lastSeenSeqId is set (has been assigned a value) and false otherwise */
    public boolean isSetLastSeenSeqId() {
      return __isset_vector[__LASTSEENSEQID_ISSET_ID];
    }

    public void setLastSeenSeqIdIsSet(boolean value) {
      __isset_vector[__LASTSEENSEQID_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFriendRequests_args)
        return this.equals((getFriendRequests_args)that);
      return false;
    }

    public boolean equals(getFriendRequests_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_direction = true && this.isSetDirection();
      boolean that_present_direction = true && that.isSetDirection();
      if (this_present_direction || that_present_direction) {
        if (!(this_present_direction && that_present_direction))
          return false;
        if (!this.direction.equals(that.direction))
          return false;
      }

      boolean this_present_lastSeenSeqId = true;
      boolean that_present_lastSeenSeqId = true;
      if (this_present_lastSeenSeqId || that_present_lastSeenSeqId) {
        if (!(this_present_lastSeenSeqId && that_present_lastSeenSeqId))
          return false;
        if (this.lastSeenSeqId != that.lastSeenSeqId)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getFriendRequests_args other = (getFriendRequests_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetDirection(), other.isSetDirection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDirection()) {
        lastComparison = TBaseHelper.compareTo(this.direction, other.direction);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLastSeenSeqId(), other.isSetLastSeenSeqId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastSeenSeqId()) {
        lastComparison = TBaseHelper.compareTo(this.lastSeenSeqId, other.lastSeenSeqId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DIRECTION
            if (field.type == TType.I32) {
              this.direction = FriendRequestDirection.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // LAST_SEEN_SEQ_ID
            if (field.type == TType.I64) {
              this.lastSeenSeqId = iprot.readI64();
              setLastSeenSeqIdIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.direction != null) {
        oprot.writeFieldBegin(DIRECTION_FIELD_DESC);
        oprot.writeI32(this.direction.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LAST_SEEN_SEQ_ID_FIELD_DESC);
      oprot.writeI64(this.lastSeenSeqId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getFriendRequests_args(");
      boolean first = true;

      sb.append("direction:");
      if (this.direction == null) {
        sb.append("null");
      } else {
        sb.append(this.direction);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lastSeenSeqId:");
      sb.append(this.lastSeenSeqId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getFriendRequests_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getFriendRequests_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getFriendRequests_result() {
    }

    public getFriendRequests_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFriendRequests_result(getFriendRequests_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          FriendRequest other_element = (FriendRequest)other_enum.nextElement();
          __this__success.addElement(new FriendRequest(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getFriendRequests_result deepCopy() {
      return new getFriendRequests_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(FriendRequest elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFriendRequests_result)
        return this.equals((getFriendRequests_result)that);
      return false;
    }

    public boolean equals(getFriendRequests_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getFriendRequests_result other = (getFriendRequests_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list876 = iprot.readListBegin();
                this.success = new Vector(_list876.size);
                for (int _i877 = 0; _i877 < _list876.size; ++_i877)
                {
                  FriendRequest _elem878;
                  _elem878 = new FriendRequest();
                  _elem878.read(iprot);
                  this.success.addElement(_elem878);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter879_enum = this.success.elements(); _iter879_enum.hasMoreElements(); )           {
            FriendRequest _iter879 = (FriendRequest)_iter879_enum.nextElement();
            _iter879.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getFriendRequests_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class removeFriendRequest_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("removeFriendRequest_args");

    private static final TField DIRECTION_FIELD_DESC = new TField("direction", TType.I32, (short)1);
    private static final TField MID_OR_EMID_FIELD_DESC = new TField("midOrEMid", TType.STRING, (short)2);

    private FriendRequestDirection direction;
    private String midOrEMid;

    // isset id assignments

    public removeFriendRequest_args() {
    }

    public removeFriendRequest_args(
      FriendRequestDirection direction,
      String midOrEMid)
    {
      this();
      this.direction = direction;
      this.midOrEMid = midOrEMid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeFriendRequest_args(removeFriendRequest_args other) {
      if (other.isSetDirection()) {
        this.direction = other.direction;
      }
      if (other.isSetMidOrEMid()) {
        this.midOrEMid = other.midOrEMid;
      }
    }

    public removeFriendRequest_args deepCopy() {
      return new removeFriendRequest_args(this);
    }

    public void clear() {
      this.direction = null;
      this.midOrEMid = null;
    }

    /**
     * 
     * @see FriendRequestDirection
     */
    public FriendRequestDirection getDirection() {
      return this.direction;
    }

    /**
     * 
     * @see FriendRequestDirection
     */
    public void setDirection(FriendRequestDirection direction) {
      this.direction = direction;
    }

    public void unsetDirection() {
      this.direction = null;
    }

    /** Returns true if field direction is set (has been assigned a value) and false otherwise */
    public boolean isSetDirection() {
      return this.direction != null;
    }

    public void setDirectionIsSet(boolean value) {
      if (!value) {
        this.direction = null;
      }
    }

    public String getMidOrEMid() {
      return this.midOrEMid;
    }

    public void setMidOrEMid(String midOrEMid) {
      this.midOrEMid = midOrEMid;
    }

    public void unsetMidOrEMid() {
      this.midOrEMid = null;
    }

    /** Returns true if field midOrEMid is set (has been assigned a value) and false otherwise */
    public boolean isSetMidOrEMid() {
      return this.midOrEMid != null;
    }

    public void setMidOrEMidIsSet(boolean value) {
      if (!value) {
        this.midOrEMid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeFriendRequest_args)
        return this.equals((removeFriendRequest_args)that);
      return false;
    }

    public boolean equals(removeFriendRequest_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_direction = true && this.isSetDirection();
      boolean that_present_direction = true && that.isSetDirection();
      if (this_present_direction || that_present_direction) {
        if (!(this_present_direction && that_present_direction))
          return false;
        if (!this.direction.equals(that.direction))
          return false;
      }

      boolean this_present_midOrEMid = true && this.isSetMidOrEMid();
      boolean that_present_midOrEMid = true && that.isSetMidOrEMid();
      if (this_present_midOrEMid || that_present_midOrEMid) {
        if (!(this_present_midOrEMid && that_present_midOrEMid))
          return false;
        if (!this.midOrEMid.equals(that.midOrEMid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      removeFriendRequest_args other = (removeFriendRequest_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetDirection(), other.isSetDirection());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDirection()) {
        lastComparison = TBaseHelper.compareTo(this.direction, other.direction);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMidOrEMid(), other.isSetMidOrEMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMidOrEMid()) {
        lastComparison = TBaseHelper.compareTo(this.midOrEMid, other.midOrEMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // DIRECTION
            if (field.type == TType.I32) {
              this.direction = FriendRequestDirection.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MID_OR_EMID
            if (field.type == TType.STRING) {
              this.midOrEMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.direction != null) {
        oprot.writeFieldBegin(DIRECTION_FIELD_DESC);
        oprot.writeI32(this.direction.getValue());
        oprot.writeFieldEnd();
      }
      if (this.midOrEMid != null) {
        oprot.writeFieldBegin(MID_OR_EMID_FIELD_DESC);
        oprot.writeString(this.midOrEMid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("removeFriendRequest_args(");
      boolean first = true;

      sb.append("direction:");
      if (this.direction == null) {
        sb.append("null");
      } else {
        sb.append(this.direction);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("midOrEMid:");
      if (this.midOrEMid == null) {
        sb.append("null");
      } else {
        sb.append(this.midOrEMid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class removeFriendRequest_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("removeFriendRequest_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public removeFriendRequest_result() {
    }

    public removeFriendRequest_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeFriendRequest_result(removeFriendRequest_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public removeFriendRequest_result deepCopy() {
      return new removeFriendRequest_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeFriendRequest_result)
        return this.equals((removeFriendRequest_result)that);
      return false;
    }

    public boolean equals(removeFriendRequest_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      removeFriendRequest_result other = (removeFriendRequest_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("removeFriendRequest_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findAndAddContactsByUserid_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findAndAddContactsByUserid_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField USERID_FIELD_DESC = new TField("userid", TType.STRING, (short)2);

    private int reqSeq;
    private String userid;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public findAndAddContactsByUserid_args() {
    }

    public findAndAddContactsByUserid_args(
      int reqSeq,
      String userid)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.userid = userid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAndAddContactsByUserid_args(findAndAddContactsByUserid_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetUserid()) {
        this.userid = other.userid;
      }
    }

    public findAndAddContactsByUserid_args deepCopy() {
      return new findAndAddContactsByUserid_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.userid = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public String getUserid() {
      return this.userid;
    }

    public void setUserid(String userid) {
      this.userid = userid;
    }

    public void unsetUserid() {
      this.userid = null;
    }

    /** Returns true if field userid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserid() {
      return this.userid != null;
    }

    public void setUseridIsSet(boolean value) {
      if (!value) {
        this.userid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAndAddContactsByUserid_args)
        return this.equals((findAndAddContactsByUserid_args)that);
      return false;
    }

    public boolean equals(findAndAddContactsByUserid_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_userid = true && this.isSetUserid();
      boolean that_present_userid = true && that.isSetUserid();
      if (this_present_userid || that_present_userid) {
        if (!(this_present_userid && that_present_userid))
          return false;
        if (!this.userid.equals(that.userid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findAndAddContactsByUserid_args other = (findAndAddContactsByUserid_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserid(), other.isSetUserid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserid()) {
        lastComparison = TBaseHelper.compareTo(this.userid, other.userid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USERID
            if (field.type == TType.STRING) {
              this.userid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.userid != null) {
        oprot.writeFieldBegin(USERID_FIELD_DESC);
        oprot.writeString(this.userid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findAndAddContactsByUserid_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userid:");
      if (this.userid == null) {
        sb.append("null");
      } else {
        sb.append(this.userid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findAndAddContactsByUserid_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findAndAddContactsByUserid_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.MAP, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Hashtable success;
    private TalkException e;

    // isset id assignments

    public findAndAddContactsByUserid_result() {
    }

    public findAndAddContactsByUserid_result(
      Hashtable success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAndAddContactsByUserid_result(findAndAddContactsByUserid_result other) {
      if (other.isSetSuccess()) {
        Hashtable __this__success = new Hashtable();
        for (Enumeration other_enum = other.success.keys(); other_enum.hasMoreElements(); ) {

          String other_element_key = (String)other_enum.nextElement();
          Contact other_element_value = (Contact)other.success.get(other_element_key);

          String __this__success_copy_key = other_element_key;

          Contact __this__success_copy_value = new Contact(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public findAndAddContactsByUserid_result deepCopy() {
      return new findAndAddContactsByUserid_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Contact val) {
      if (this.success == null) {
        this.success = new Hashtable();
      }
      this.success.put(key, val);
    }

    public Hashtable getSuccess() {
      return this.success;
    }

    public void setSuccess(Hashtable success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAndAddContactsByUserid_result)
        return this.equals((findAndAddContactsByUserid_result)that);
      return false;
    }

    public boolean equals(findAndAddContactsByUserid_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findAndAddContactsByUserid_result other = (findAndAddContactsByUserid_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.MAP) {
              {
                TMap _map880 = iprot.readMapBegin();
                this.success = new Hashtable(2*_map880.size);
                for (int _i881 = 0; _i881 < _map880.size; ++_i881)
                {
                  String _key882;
                  Contact _val883;
                  _key882 = iprot.readString();
                  _val883 = new Contact();
                  _val883.read(iprot);
                  this.success.put(_key882, _val883);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.success.size()));
          for (Enumeration _iter884_enum = this.success.keys(); _iter884_enum.hasMoreElements(); )           {
            String _iter884 = (String)_iter884_enum.nextElement();
            oprot.writeString(_iter884);
            ((Contact)this.success.get(_iter884)).write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findAndAddContactsByUserid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findContactByUserid_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findContactByUserid_args");

    private static final TField USERID_FIELD_DESC = new TField("userid", TType.STRING, (short)2);

    private String userid;

    // isset id assignments

    public findContactByUserid_args() {
    }

    public findContactByUserid_args(
      String userid)
    {
      this();
      this.userid = userid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findContactByUserid_args(findContactByUserid_args other) {
      if (other.isSetUserid()) {
        this.userid = other.userid;
      }
    }

    public findContactByUserid_args deepCopy() {
      return new findContactByUserid_args(this);
    }

    public void clear() {
      this.userid = null;
    }

    public String getUserid() {
      return this.userid;
    }

    public void setUserid(String userid) {
      this.userid = userid;
    }

    public void unsetUserid() {
      this.userid = null;
    }

    /** Returns true if field userid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserid() {
      return this.userid != null;
    }

    public void setUseridIsSet(boolean value) {
      if (!value) {
        this.userid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findContactByUserid_args)
        return this.equals((findContactByUserid_args)that);
      return false;
    }

    public boolean equals(findContactByUserid_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userid = true && this.isSetUserid();
      boolean that_present_userid = true && that.isSetUserid();
      if (this_present_userid || that_present_userid) {
        if (!(this_present_userid && that_present_userid))
          return false;
        if (!this.userid.equals(that.userid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findContactByUserid_args other = (findContactByUserid_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetUserid(), other.isSetUserid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserid()) {
        lastComparison = TBaseHelper.compareTo(this.userid, other.userid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // USERID
            if (field.type == TType.STRING) {
              this.userid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.userid != null) {
        oprot.writeFieldBegin(USERID_FIELD_DESC);
        oprot.writeString(this.userid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findContactByUserid_args(");
      boolean first = true;

      sb.append("userid:");
      if (this.userid == null) {
        sb.append("null");
      } else {
        sb.append(this.userid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findContactByUserid_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findContactByUserid_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Contact success;
    private TalkException e;

    // isset id assignments

    public findContactByUserid_result() {
    }

    public findContactByUserid_result(
      Contact success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findContactByUserid_result(findContactByUserid_result other) {
      if (other.isSetSuccess()) {
        this.success = new Contact(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public findContactByUserid_result deepCopy() {
      return new findContactByUserid_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Contact getSuccess() {
      return this.success;
    }

    public void setSuccess(Contact success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findContactByUserid_result)
        return this.equals((findContactByUserid_result)that);
      return false;
    }

    public boolean equals(findContactByUserid_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findContactByUserid_result other = (findContactByUserid_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Contact();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findContactByUserid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findContactByUserTicket_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findContactByUserTicket_args");

    private static final TField TICKET_ID_WITH_TAG_FIELD_DESC = new TField("ticketIdWithTag", TType.STRING, (short)2);

    private String ticketIdWithTag;

    // isset id assignments

    public findContactByUserTicket_args() {
    }

    public findContactByUserTicket_args(
      String ticketIdWithTag)
    {
      this();
      this.ticketIdWithTag = ticketIdWithTag;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findContactByUserTicket_args(findContactByUserTicket_args other) {
      if (other.isSetTicketIdWithTag()) {
        this.ticketIdWithTag = other.ticketIdWithTag;
      }
    }

    public findContactByUserTicket_args deepCopy() {
      return new findContactByUserTicket_args(this);
    }

    public void clear() {
      this.ticketIdWithTag = null;
    }

    public String getTicketIdWithTag() {
      return this.ticketIdWithTag;
    }

    public void setTicketIdWithTag(String ticketIdWithTag) {
      this.ticketIdWithTag = ticketIdWithTag;
    }

    public void unsetTicketIdWithTag() {
      this.ticketIdWithTag = null;
    }

    /** Returns true if field ticketIdWithTag is set (has been assigned a value) and false otherwise */
    public boolean isSetTicketIdWithTag() {
      return this.ticketIdWithTag != null;
    }

    public void setTicketIdWithTagIsSet(boolean value) {
      if (!value) {
        this.ticketIdWithTag = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findContactByUserTicket_args)
        return this.equals((findContactByUserTicket_args)that);
      return false;
    }

    public boolean equals(findContactByUserTicket_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ticketIdWithTag = true && this.isSetTicketIdWithTag();
      boolean that_present_ticketIdWithTag = true && that.isSetTicketIdWithTag();
      if (this_present_ticketIdWithTag || that_present_ticketIdWithTag) {
        if (!(this_present_ticketIdWithTag && that_present_ticketIdWithTag))
          return false;
        if (!this.ticketIdWithTag.equals(that.ticketIdWithTag))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findContactByUserTicket_args other = (findContactByUserTicket_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetTicketIdWithTag(), other.isSetTicketIdWithTag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTicketIdWithTag()) {
        lastComparison = TBaseHelper.compareTo(this.ticketIdWithTag, other.ticketIdWithTag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // TICKET_ID_WITH_TAG
            if (field.type == TType.STRING) {
              this.ticketIdWithTag = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.ticketIdWithTag != null) {
        oprot.writeFieldBegin(TICKET_ID_WITH_TAG_FIELD_DESC);
        oprot.writeString(this.ticketIdWithTag);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findContactByUserTicket_args(");
      boolean first = true;

      sb.append("ticketIdWithTag:");
      if (this.ticketIdWithTag == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketIdWithTag);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findContactByUserTicket_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findContactByUserTicket_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Contact success;
    private TalkException e;

    // isset id assignments

    public findContactByUserTicket_result() {
    }

    public findContactByUserTicket_result(
      Contact success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findContactByUserTicket_result(findContactByUserTicket_result other) {
      if (other.isSetSuccess()) {
        this.success = new Contact(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public findContactByUserTicket_result deepCopy() {
      return new findContactByUserTicket_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Contact getSuccess() {
      return this.success;
    }

    public void setSuccess(Contact success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findContactByUserTicket_result)
        return this.equals((findContactByUserTicket_result)that);
      return false;
    }

    public boolean equals(findContactByUserTicket_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findContactByUserTicket_result other = (findContactByUserTicket_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Contact();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findContactByUserTicket_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findContactsByEmail_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findContactsByEmail_args");

    private static final TField EMAILS_FIELD_DESC = new TField("emails", TType.SET, (short)2);

    private Hashtable emails;

    // isset id assignments

    public findContactsByEmail_args() {
    }

    public findContactsByEmail_args(
      Hashtable emails)
    {
      this();
      this.emails = emails;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findContactsByEmail_args(findContactsByEmail_args other) {
      if (other.isSetEmails()) {
        Hashtable __this__emails = new Hashtable();
        for (Enumeration other_enum = other.emails.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__emails.addElement(other_element);
        }
        this.emails = __this__emails;
      }
    }

    public findContactsByEmail_args deepCopy() {
      return new findContactsByEmail_args(this);
    }

    public void clear() {
      this.emails = null;
    }

    public int getEmailsSize() {
      return (this.emails == null) ? 0 : this.emails.size();
    }

    public Enumeration getEmailsEnumeration() {
      return (this.emails == null) ? null : this.emails.elements();
    }

    public void addToEmails(String elem) {
      if (this.emails == null) {
        this.emails = new Hashtable();
      }
      this.emails.put(elem, elem);
    }

    public Hashtable getEmails() {
      return this.emails;
    }

    public void setEmails(Hashtable emails) {
      this.emails = emails;
    }

    public void unsetEmails() {
      this.emails = null;
    }

    /** Returns true if field emails is set (has been assigned a value) and false otherwise */
    public boolean isSetEmails() {
      return this.emails != null;
    }

    public void setEmailsIsSet(boolean value) {
      if (!value) {
        this.emails = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findContactsByEmail_args)
        return this.equals((findContactsByEmail_args)that);
      return false;
    }

    public boolean equals(findContactsByEmail_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_emails = true && this.isSetEmails();
      boolean that_present_emails = true && that.isSetEmails();
      if (this_present_emails || that_present_emails) {
        if (!(this_present_emails && that_present_emails))
          return false;
        if (!this.emails.equals(that.emails))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findContactsByEmail_args other = (findContactsByEmail_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetEmails(), other.isSetEmails());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmails()) {
        lastComparison = TBaseHelper.compareTo(this.emails, other.emails);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // EMAILS
            if (field.type == TType.SET) {
              {
                TSet _set885 = iprot.readSetBegin();
                this.emails = new Hashtable(2*_set885.size);
                for (int _i886 = 0; _i886 < _set885.size; ++_i886)
                {
                  String _elem887;
                  _elem887 = iprot.readString();
                  this.emails.put(_elem887, _elem887);
                }
                iprot.readSetEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.emails != null) {
        oprot.writeFieldBegin(EMAILS_FIELD_DESC);
        {
          oprot.writeSetBegin(new TSet(TType.STRING, this.emails.size()));
          for (Enumeration _iter888_enum = this.emails.keys(); _iter888_enum.hasMoreElements(); )           {
            String _iter888 = (String)_iter888_enum.nextElement();
            oprot.writeString(_iter888);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findContactsByEmail_args(");
      boolean first = true;

      sb.append("emails:");
      if (this.emails == null) {
        sb.append("null");
      } else {
        sb.append(this.emails);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findContactsByEmail_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findContactsByEmail_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.MAP, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Hashtable success;
    private TalkException e;

    // isset id assignments

    public findContactsByEmail_result() {
    }

    public findContactsByEmail_result(
      Hashtable success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findContactsByEmail_result(findContactsByEmail_result other) {
      if (other.isSetSuccess()) {
        Hashtable __this__success = new Hashtable();
        for (Enumeration other_enum = other.success.keys(); other_enum.hasMoreElements(); ) {

          String other_element_key = (String)other_enum.nextElement();
          Contact other_element_value = (Contact)other.success.get(other_element_key);

          String __this__success_copy_key = other_element_key;

          Contact __this__success_copy_value = new Contact(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public findContactsByEmail_result deepCopy() {
      return new findContactsByEmail_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Contact val) {
      if (this.success == null) {
        this.success = new Hashtable();
      }
      this.success.put(key, val);
    }

    public Hashtable getSuccess() {
      return this.success;
    }

    public void setSuccess(Hashtable success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findContactsByEmail_result)
        return this.equals((findContactsByEmail_result)that);
      return false;
    }

    public boolean equals(findContactsByEmail_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findContactsByEmail_result other = (findContactsByEmail_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.MAP) {
              {
                TMap _map889 = iprot.readMapBegin();
                this.success = new Hashtable(2*_map889.size);
                for (int _i890 = 0; _i890 < _map889.size; ++_i890)
                {
                  String _key891;
                  Contact _val892;
                  _key891 = iprot.readString();
                  _val892 = new Contact();
                  _val892.read(iprot);
                  this.success.put(_key891, _val892);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.success.size()));
          for (Enumeration _iter893_enum = this.success.keys(); _iter893_enum.hasMoreElements(); )           {
            String _iter893 = (String)_iter893_enum.nextElement();
            oprot.writeString(_iter893);
            ((Contact)this.success.get(_iter893)).write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findContactsByEmail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findContactsByPhone_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findContactsByPhone_args");

    private static final TField PHONES_FIELD_DESC = new TField("phones", TType.SET, (short)2);

    private Hashtable phones;

    // isset id assignments

    public findContactsByPhone_args() {
    }

    public findContactsByPhone_args(
      Hashtable phones)
    {
      this();
      this.phones = phones;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findContactsByPhone_args(findContactsByPhone_args other) {
      if (other.isSetPhones()) {
        Hashtable __this__phones = new Hashtable();
        for (Enumeration other_enum = other.phones.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__phones.addElement(other_element);
        }
        this.phones = __this__phones;
      }
    }

    public findContactsByPhone_args deepCopy() {
      return new findContactsByPhone_args(this);
    }

    public void clear() {
      this.phones = null;
    }

    public int getPhonesSize() {
      return (this.phones == null) ? 0 : this.phones.size();
    }

    public Enumeration getPhonesEnumeration() {
      return (this.phones == null) ? null : this.phones.elements();
    }

    public void addToPhones(String elem) {
      if (this.phones == null) {
        this.phones = new Hashtable();
      }
      this.phones.put(elem, elem);
    }

    public Hashtable getPhones() {
      return this.phones;
    }

    public void setPhones(Hashtable phones) {
      this.phones = phones;
    }

    public void unsetPhones() {
      this.phones = null;
    }

    /** Returns true if field phones is set (has been assigned a value) and false otherwise */
    public boolean isSetPhones() {
      return this.phones != null;
    }

    public void setPhonesIsSet(boolean value) {
      if (!value) {
        this.phones = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findContactsByPhone_args)
        return this.equals((findContactsByPhone_args)that);
      return false;
    }

    public boolean equals(findContactsByPhone_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_phones = true && this.isSetPhones();
      boolean that_present_phones = true && that.isSetPhones();
      if (this_present_phones || that_present_phones) {
        if (!(this_present_phones && that_present_phones))
          return false;
        if (!this.phones.equals(that.phones))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findContactsByPhone_args other = (findContactsByPhone_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetPhones(), other.isSetPhones());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPhones()) {
        lastComparison = TBaseHelper.compareTo(this.phones, other.phones);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // PHONES
            if (field.type == TType.SET) {
              {
                TSet _set894 = iprot.readSetBegin();
                this.phones = new Hashtable(2*_set894.size);
                for (int _i895 = 0; _i895 < _set894.size; ++_i895)
                {
                  String _elem896;
                  _elem896 = iprot.readString();
                  this.phones.put(_elem896, _elem896);
                }
                iprot.readSetEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.phones != null) {
        oprot.writeFieldBegin(PHONES_FIELD_DESC);
        {
          oprot.writeSetBegin(new TSet(TType.STRING, this.phones.size()));
          for (Enumeration _iter897_enum = this.phones.keys(); _iter897_enum.hasMoreElements(); )           {
            String _iter897 = (String)_iter897_enum.nextElement();
            oprot.writeString(_iter897);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findContactsByPhone_args(");
      boolean first = true;

      sb.append("phones:");
      if (this.phones == null) {
        sb.append("null");
      } else {
        sb.append(this.phones);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findContactsByPhone_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findContactsByPhone_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.MAP, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Hashtable success;
    private TalkException e;

    // isset id assignments

    public findContactsByPhone_result() {
    }

    public findContactsByPhone_result(
      Hashtable success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findContactsByPhone_result(findContactsByPhone_result other) {
      if (other.isSetSuccess()) {
        Hashtable __this__success = new Hashtable();
        for (Enumeration other_enum = other.success.keys(); other_enum.hasMoreElements(); ) {

          String other_element_key = (String)other_enum.nextElement();
          Contact other_element_value = (Contact)other.success.get(other_element_key);

          String __this__success_copy_key = other_element_key;

          Contact __this__success_copy_value = new Contact(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public findContactsByPhone_result deepCopy() {
      return new findContactsByPhone_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Contact val) {
      if (this.success == null) {
        this.success = new Hashtable();
      }
      this.success.put(key, val);
    }

    public Hashtable getSuccess() {
      return this.success;
    }

    public void setSuccess(Hashtable success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findContactsByPhone_result)
        return this.equals((findContactsByPhone_result)that);
      return false;
    }

    public boolean equals(findContactsByPhone_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findContactsByPhone_result other = (findContactsByPhone_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.MAP) {
              {
                TMap _map898 = iprot.readMapBegin();
                this.success = new Hashtable(2*_map898.size);
                for (int _i899 = 0; _i899 < _map898.size; ++_i899)
                {
                  String _key900;
                  Contact _val901;
                  _key900 = iprot.readString();
                  _val901 = new Contact();
                  _val901.read(iprot);
                  this.success.put(_key900, _val901);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.success.size()));
          for (Enumeration _iter902_enum = this.success.keys(); _iter902_enum.hasMoreElements(); )           {
            String _iter902 = (String)_iter902_enum.nextElement();
            oprot.writeString(_iter902);
            ((Contact)this.success.get(_iter902)).write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findContactsByPhone_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findSnsIdUserStatus_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findSnsIdUserStatus_args");

    private static final TField SNS_ID_TYPE_FIELD_DESC = new TField("snsIdType", TType.I32, (short)2);
    private static final TField SNS_ACCESS_TOKEN_FIELD_DESC = new TField("snsAccessToken", TType.STRING, (short)3);
    private static final TField UDID_HASH_FIELD_DESC = new TField("udidHash", TType.STRING, (short)4);

    private SnsIdType snsIdType;
    private String snsAccessToken;
    private String udidHash;

    // isset id assignments

    public findSnsIdUserStatus_args() {
    }

    public findSnsIdUserStatus_args(
      SnsIdType snsIdType,
      String snsAccessToken,
      String udidHash)
    {
      this();
      this.snsIdType = snsIdType;
      this.snsAccessToken = snsAccessToken;
      this.udidHash = udidHash;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findSnsIdUserStatus_args(findSnsIdUserStatus_args other) {
      if (other.isSetSnsIdType()) {
        this.snsIdType = other.snsIdType;
      }
      if (other.isSetSnsAccessToken()) {
        this.snsAccessToken = other.snsAccessToken;
      }
      if (other.isSetUdidHash()) {
        this.udidHash = other.udidHash;
      }
    }

    public findSnsIdUserStatus_args deepCopy() {
      return new findSnsIdUserStatus_args(this);
    }

    public void clear() {
      this.snsIdType = null;
      this.snsAccessToken = null;
      this.udidHash = null;
    }

    /**
     * 
     * @see SnsIdType
     */
    public SnsIdType getSnsIdType() {
      return this.snsIdType;
    }

    /**
     * 
     * @see SnsIdType
     */
    public void setSnsIdType(SnsIdType snsIdType) {
      this.snsIdType = snsIdType;
    }

    public void unsetSnsIdType() {
      this.snsIdType = null;
    }

    /** Returns true if field snsIdType is set (has been assigned a value) and false otherwise */
    public boolean isSetSnsIdType() {
      return this.snsIdType != null;
    }

    public void setSnsIdTypeIsSet(boolean value) {
      if (!value) {
        this.snsIdType = null;
      }
    }

    public String getSnsAccessToken() {
      return this.snsAccessToken;
    }

    public void setSnsAccessToken(String snsAccessToken) {
      this.snsAccessToken = snsAccessToken;
    }

    public void unsetSnsAccessToken() {
      this.snsAccessToken = null;
    }

    /** Returns true if field snsAccessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSnsAccessToken() {
      return this.snsAccessToken != null;
    }

    public void setSnsAccessTokenIsSet(boolean value) {
      if (!value) {
        this.snsAccessToken = null;
      }
    }

    public String getUdidHash() {
      return this.udidHash;
    }

    public void setUdidHash(String udidHash) {
      this.udidHash = udidHash;
    }

    public void unsetUdidHash() {
      this.udidHash = null;
    }

    /** Returns true if field udidHash is set (has been assigned a value) and false otherwise */
    public boolean isSetUdidHash() {
      return this.udidHash != null;
    }

    public void setUdidHashIsSet(boolean value) {
      if (!value) {
        this.udidHash = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findSnsIdUserStatus_args)
        return this.equals((findSnsIdUserStatus_args)that);
      return false;
    }

    public boolean equals(findSnsIdUserStatus_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_snsIdType = true && this.isSetSnsIdType();
      boolean that_present_snsIdType = true && that.isSetSnsIdType();
      if (this_present_snsIdType || that_present_snsIdType) {
        if (!(this_present_snsIdType && that_present_snsIdType))
          return false;
        if (!this.snsIdType.equals(that.snsIdType))
          return false;
      }

      boolean this_present_snsAccessToken = true && this.isSetSnsAccessToken();
      boolean that_present_snsAccessToken = true && that.isSetSnsAccessToken();
      if (this_present_snsAccessToken || that_present_snsAccessToken) {
        if (!(this_present_snsAccessToken && that_present_snsAccessToken))
          return false;
        if (!this.snsAccessToken.equals(that.snsAccessToken))
          return false;
      }

      boolean this_present_udidHash = true && this.isSetUdidHash();
      boolean that_present_udidHash = true && that.isSetUdidHash();
      if (this_present_udidHash || that_present_udidHash) {
        if (!(this_present_udidHash && that_present_udidHash))
          return false;
        if (!this.udidHash.equals(that.udidHash))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findSnsIdUserStatus_args other = (findSnsIdUserStatus_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSnsIdType(), other.isSetSnsIdType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSnsIdType()) {
        lastComparison = TBaseHelper.compareTo(this.snsIdType, other.snsIdType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSnsAccessToken(), other.isSetSnsAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSnsAccessToken()) {
        lastComparison = TBaseHelper.compareTo(this.snsAccessToken, other.snsAccessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUdidHash(), other.isSetUdidHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUdidHash()) {
        lastComparison = TBaseHelper.compareTo(this.udidHash, other.udidHash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // SNS_ID_TYPE
            if (field.type == TType.I32) {
              this.snsIdType = SnsIdType.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SNS_ACCESS_TOKEN
            if (field.type == TType.STRING) {
              this.snsAccessToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // UDID_HASH
            if (field.type == TType.STRING) {
              this.udidHash = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.snsIdType != null) {
        oprot.writeFieldBegin(SNS_ID_TYPE_FIELD_DESC);
        oprot.writeI32(this.snsIdType.getValue());
        oprot.writeFieldEnd();
      }
      if (this.snsAccessToken != null) {
        oprot.writeFieldBegin(SNS_ACCESS_TOKEN_FIELD_DESC);
        oprot.writeString(this.snsAccessToken);
        oprot.writeFieldEnd();
      }
      if (this.udidHash != null) {
        oprot.writeFieldBegin(UDID_HASH_FIELD_DESC);
        oprot.writeString(this.udidHash);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findSnsIdUserStatus_args(");
      boolean first = true;

      sb.append("snsIdType:");
      if (this.snsIdType == null) {
        sb.append("null");
      } else {
        sb.append(this.snsIdType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("snsAccessToken:");
      if (this.snsAccessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.snsAccessToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("udidHash:");
      if (this.udidHash == null) {
        sb.append("null");
      } else {
        sb.append(this.udidHash);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findSnsIdUserStatus_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findSnsIdUserStatus_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private SnsIdUserStatus success;
    private TalkException e;

    // isset id assignments

    public findSnsIdUserStatus_result() {
    }

    public findSnsIdUserStatus_result(
      SnsIdUserStatus success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findSnsIdUserStatus_result(findSnsIdUserStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new SnsIdUserStatus(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public findSnsIdUserStatus_result deepCopy() {
      return new findSnsIdUserStatus_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public SnsIdUserStatus getSuccess() {
      return this.success;
    }

    public void setSuccess(SnsIdUserStatus success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findSnsIdUserStatus_result)
        return this.equals((findSnsIdUserStatus_result)that);
      return false;
    }

    public boolean equals(findSnsIdUserStatus_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findSnsIdUserStatus_result other = (findSnsIdUserStatus_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new SnsIdUserStatus();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findSnsIdUserStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class finishUpdateVerification_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("finishUpdateVerification_args");

    private static final TField SESSION_ID_FIELD_DESC = new TField("sessionId", TType.STRING, (short)2);

    private String sessionId;

    // isset id assignments

    public finishUpdateVerification_args() {
    }

    public finishUpdateVerification_args(
      String sessionId)
    {
      this();
      this.sessionId = sessionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public finishUpdateVerification_args(finishUpdateVerification_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
    }

    public finishUpdateVerification_args deepCopy() {
      return new finishUpdateVerification_args(this);
    }

    public void clear() {
      this.sessionId = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public void setSessionId(String sessionId) {
      this.sessionId = sessionId;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof finishUpdateVerification_args)
        return this.equals((finishUpdateVerification_args)that);
      return false;
    }

    public boolean equals(finishUpdateVerification_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      finishUpdateVerification_args other = (finishUpdateVerification_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSessionId(), other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // SESSION_ID
            if (field.type == TType.STRING) {
              this.sessionId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.sessionId != null) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeString(this.sessionId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("finishUpdateVerification_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class finishUpdateVerification_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("finishUpdateVerification_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public finishUpdateVerification_result() {
    }

    public finishUpdateVerification_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public finishUpdateVerification_result(finishUpdateVerification_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public finishUpdateVerification_result deepCopy() {
      return new finishUpdateVerification_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof finishUpdateVerification_result)
        return this.equals((finishUpdateVerification_result)that);
      return false;
    }

    public boolean equals(finishUpdateVerification_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      finishUpdateVerification_result other = (finishUpdateVerification_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("finishUpdateVerification_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class generateUserTicket_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("generateUserTicket_args");

    private static final TField EXPIRATION_TIME_FIELD_DESC = new TField("expirationTime", TType.I64, (short)3);
    private static final TField MAX_USE_COUNT_FIELD_DESC = new TField("maxUseCount", TType.I32, (short)4);

    private long expirationTime;
    private int maxUseCount;

    // isset id assignments
    private static final int __EXPIRATIONTIME_ISSET_ID = 0;
    private static final int __MAXUSECOUNT_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public generateUserTicket_args() {
    }

    public generateUserTicket_args(
      long expirationTime,
      int maxUseCount)
    {
      this();
      this.expirationTime = expirationTime;
      setExpirationTimeIsSet(true);
      this.maxUseCount = maxUseCount;
      setMaxUseCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generateUserTicket_args(generateUserTicket_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.expirationTime = other.expirationTime;
      this.maxUseCount = other.maxUseCount;
    }

    public generateUserTicket_args deepCopy() {
      return new generateUserTicket_args(this);
    }

    public void clear() {
      setExpirationTimeIsSet(false);
      this.expirationTime = 0;
      setMaxUseCountIsSet(false);
      this.maxUseCount = 0;
    }

    public long getExpirationTime() {
      return this.expirationTime;
    }

    public void setExpirationTime(long expirationTime) {
      this.expirationTime = expirationTime;
      setExpirationTimeIsSet(true);
    }

    public void unsetExpirationTime() {
      __isset_vector[__EXPIRATIONTIME_ISSET_ID] = false;
    }

    /** Returns true if field expirationTime is set (has been assigned a value) and false otherwise */
    public boolean isSetExpirationTime() {
      return __isset_vector[__EXPIRATIONTIME_ISSET_ID];
    }

    public void setExpirationTimeIsSet(boolean value) {
      __isset_vector[__EXPIRATIONTIME_ISSET_ID] = value;
    }

    public int getMaxUseCount() {
      return this.maxUseCount;
    }

    public void setMaxUseCount(int maxUseCount) {
      this.maxUseCount = maxUseCount;
      setMaxUseCountIsSet(true);
    }

    public void unsetMaxUseCount() {
      __isset_vector[__MAXUSECOUNT_ISSET_ID] = false;
    }

    /** Returns true if field maxUseCount is set (has been assigned a value) and false otherwise */
    public boolean isSetMaxUseCount() {
      return __isset_vector[__MAXUSECOUNT_ISSET_ID];
    }

    public void setMaxUseCountIsSet(boolean value) {
      __isset_vector[__MAXUSECOUNT_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generateUserTicket_args)
        return this.equals((generateUserTicket_args)that);
      return false;
    }

    public boolean equals(generateUserTicket_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_expirationTime = true;
      boolean that_present_expirationTime = true;
      if (this_present_expirationTime || that_present_expirationTime) {
        if (!(this_present_expirationTime && that_present_expirationTime))
          return false;
        if (this.expirationTime != that.expirationTime)
          return false;
      }

      boolean this_present_maxUseCount = true;
      boolean that_present_maxUseCount = true;
      if (this_present_maxUseCount || that_present_maxUseCount) {
        if (!(this_present_maxUseCount && that_present_maxUseCount))
          return false;
        if (this.maxUseCount != that.maxUseCount)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      generateUserTicket_args other = (generateUserTicket_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetExpirationTime(), other.isSetExpirationTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExpirationTime()) {
        lastComparison = TBaseHelper.compareTo(this.expirationTime, other.expirationTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMaxUseCount(), other.isSetMaxUseCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxUseCount()) {
        lastComparison = TBaseHelper.compareTo(this.maxUseCount, other.maxUseCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 3: // EXPIRATION_TIME
            if (field.type == TType.I64) {
              this.expirationTime = iprot.readI64();
              setExpirationTimeIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // MAX_USE_COUNT
            if (field.type == TType.I32) {
              this.maxUseCount = iprot.readI32();
              setMaxUseCountIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(EXPIRATION_TIME_FIELD_DESC);
      oprot.writeI64(this.expirationTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_USE_COUNT_FIELD_DESC);
      oprot.writeI32(this.maxUseCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("generateUserTicket_args(");
      boolean first = true;

      sb.append("expirationTime:");
      sb.append(this.expirationTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxUseCount:");
      sb.append(this.maxUseCount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class generateUserTicket_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("generateUserTicket_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Ticket success;
    private TalkException e;

    // isset id assignments

    public generateUserTicket_result() {
    }

    public generateUserTicket_result(
      Ticket success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public generateUserTicket_result(generateUserTicket_result other) {
      if (other.isSetSuccess()) {
        this.success = new Ticket(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public generateUserTicket_result deepCopy() {
      return new generateUserTicket_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Ticket getSuccess() {
      return this.success;
    }

    public void setSuccess(Ticket success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof generateUserTicket_result)
        return this.equals((generateUserTicket_result)that);
      return false;
    }

    public boolean equals(generateUserTicket_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      generateUserTicket_result other = (generateUserTicket_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Ticket();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("generateUserTicket_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class destroyMessage_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("destroyMessage_args");

    private static final TField SEQ_FIELD_DESC = new TField("seq", TType.I32, (short)1);
    private static final TField CHAT_ID_FIELD_DESC = new TField("chatId", TType.STRING, (short)2);
    private static final TField MESSAGE_ID_FIELD_DESC = new TField("messageId", TType.STRING, (short)3);
    private static final TField SESSION_ID_FIELD_DESC = new TField("sessionId", TType.BYTE, (short)4);

    private int seq;
    private String chatId;
    private String messageId;
    private byte sessionId;

    // isset id assignments
    private static final int __SEQ_ISSET_ID = 0;
    private static final int __SESSIONID_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public destroyMessage_args() {
    }

    public destroyMessage_args(
      int seq,
      String chatId,
      String messageId,
      byte sessionId)
    {
      this();
      this.seq = seq;
      setSeqIsSet(true);
      this.chatId = chatId;
      this.messageId = messageId;
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public destroyMessage_args(destroyMessage_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.seq = other.seq;
      if (other.isSetChatId()) {
        this.chatId = other.chatId;
      }
      if (other.isSetMessageId()) {
        this.messageId = other.messageId;
      }
      this.sessionId = other.sessionId;
    }

    public destroyMessage_args deepCopy() {
      return new destroyMessage_args(this);
    }

    public void clear() {
      setSeqIsSet(false);
      this.seq = 0;
      this.chatId = null;
      this.messageId = null;
      setSessionIdIsSet(false);
      this.sessionId = 0;
    }

    public int getSeq() {
      return this.seq;
    }

    public void setSeq(int seq) {
      this.seq = seq;
      setSeqIsSet(true);
    }

    public void unsetSeq() {
      __isset_vector[__SEQ_ISSET_ID] = false;
    }

    /** Returns true if field seq is set (has been assigned a value) and false otherwise */
    public boolean isSetSeq() {
      return __isset_vector[__SEQ_ISSET_ID];
    }

    public void setSeqIsSet(boolean value) {
      __isset_vector[__SEQ_ISSET_ID] = value;
    }

    public String getChatId() {
      return this.chatId;
    }

    public void setChatId(String chatId) {
      this.chatId = chatId;
    }

    public void unsetChatId() {
      this.chatId = null;
    }

    /** Returns true if field chatId is set (has been assigned a value) and false otherwise */
    public boolean isSetChatId() {
      return this.chatId != null;
    }

    public void setChatIdIsSet(boolean value) {
      if (!value) {
        this.chatId = null;
      }
    }

    public String getMessageId() {
      return this.messageId;
    }

    public void setMessageId(String messageId) {
      this.messageId = messageId;
    }

    public void unsetMessageId() {
      this.messageId = null;
    }

    /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageId() {
      return this.messageId != null;
    }

    public void setMessageIdIsSet(boolean value) {
      if (!value) {
        this.messageId = null;
      }
    }

    public byte getSessionId() {
      return this.sessionId;
    }

    public void setSessionId(byte sessionId) {
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
    }

    public void unsetSessionId() {
      __isset_vector[__SESSIONID_ISSET_ID] = false;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return __isset_vector[__SESSIONID_ISSET_ID];
    }

    public void setSessionIdIsSet(boolean value) {
      __isset_vector[__SESSIONID_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof destroyMessage_args)
        return this.equals((destroyMessage_args)that);
      return false;
    }

    public boolean equals(destroyMessage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_seq = true;
      boolean that_present_seq = true;
      if (this_present_seq || that_present_seq) {
        if (!(this_present_seq && that_present_seq))
          return false;
        if (this.seq != that.seq)
          return false;
      }

      boolean this_present_chatId = true && this.isSetChatId();
      boolean that_present_chatId = true && that.isSetChatId();
      if (this_present_chatId || that_present_chatId) {
        if (!(this_present_chatId && that_present_chatId))
          return false;
        if (!this.chatId.equals(that.chatId))
          return false;
      }

      boolean this_present_messageId = true && this.isSetMessageId();
      boolean that_present_messageId = true && that.isSetMessageId();
      if (this_present_messageId || that_present_messageId) {
        if (!(this_present_messageId && that_present_messageId))
          return false;
        if (!this.messageId.equals(that.messageId))
          return false;
      }

      boolean this_present_sessionId = true;
      boolean that_present_sessionId = true;
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (this.sessionId != that.sessionId)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      destroyMessage_args other = (destroyMessage_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSeq(), other.isSetSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeq()) {
        lastComparison = TBaseHelper.compareTo(this.seq, other.seq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetChatId(), other.isSetChatId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChatId()) {
        lastComparison = TBaseHelper.compareTo(this.chatId, other.chatId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMessageId(), other.isSetMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageId()) {
        lastComparison = TBaseHelper.compareTo(this.messageId, other.messageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSessionId(), other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SEQ
            if (field.type == TType.I32) {
              this.seq = iprot.readI32();
              setSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CHAT_ID
            if (field.type == TType.STRING) {
              this.chatId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // MESSAGE_ID
            if (field.type == TType.STRING) {
              this.messageId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // SESSION_ID
            if (field.type == TType.BYTE) {
              this.sessionId = iprot.readByte();
              setSessionIdIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQ_FIELD_DESC);
      oprot.writeI32(this.seq);
      oprot.writeFieldEnd();
      if (this.chatId != null) {
        oprot.writeFieldBegin(CHAT_ID_FIELD_DESC);
        oprot.writeString(this.chatId);
        oprot.writeFieldEnd();
      }
      if (this.messageId != null) {
        oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
        oprot.writeString(this.messageId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
      oprot.writeByte(this.sessionId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("destroyMessage_args(");
      boolean first = true;

      sb.append("seq:");
      sb.append(this.seq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("chatId:");
      if (this.chatId == null) {
        sb.append("null");
      } else {
        sb.append(this.chatId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("messageId:");
      if (this.messageId == null) {
        sb.append("null");
      } else {
        sb.append(this.messageId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sessionId:");
      sb.append(this.sessionId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class destroyMessage_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("destroyMessage_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public destroyMessage_result() {
    }

    public destroyMessage_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public destroyMessage_result(destroyMessage_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public destroyMessage_result deepCopy() {
      return new destroyMessage_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof destroyMessage_result)
        return this.equals((destroyMessage_result)that);
      return false;
    }

    public boolean equals(destroyMessage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      destroyMessage_result other = (destroyMessage_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("destroyMessage_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getAcceptedProximityMatches_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getAcceptedProximityMatches_args");

    private static final TField SESSION_ID_FIELD_DESC = new TField("sessionId", TType.STRING, (short)2);

    private String sessionId;

    // isset id assignments

    public getAcceptedProximityMatches_args() {
    }

    public getAcceptedProximityMatches_args(
      String sessionId)
    {
      this();
      this.sessionId = sessionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAcceptedProximityMatches_args(getAcceptedProximityMatches_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
    }

    public getAcceptedProximityMatches_args deepCopy() {
      return new getAcceptedProximityMatches_args(this);
    }

    public void clear() {
      this.sessionId = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public void setSessionId(String sessionId) {
      this.sessionId = sessionId;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAcceptedProximityMatches_args)
        return this.equals((getAcceptedProximityMatches_args)that);
      return false;
    }

    public boolean equals(getAcceptedProximityMatches_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getAcceptedProximityMatches_args other = (getAcceptedProximityMatches_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSessionId(), other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // SESSION_ID
            if (field.type == TType.STRING) {
              this.sessionId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.sessionId != null) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeString(this.sessionId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getAcceptedProximityMatches_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getAcceptedProximityMatches_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getAcceptedProximityMatches_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.SET, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Hashtable success;
    private TalkException e;

    // isset id assignments

    public getAcceptedProximityMatches_result() {
    }

    public getAcceptedProximityMatches_result(
      Hashtable success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAcceptedProximityMatches_result(getAcceptedProximityMatches_result other) {
      if (other.isSetSuccess()) {
        Hashtable __this__success = new Hashtable();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getAcceptedProximityMatches_result deepCopy() {
      return new getAcceptedProximityMatches_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Hashtable();
      }
      this.success.put(elem, elem);
    }

    public Hashtable getSuccess() {
      return this.success;
    }

    public void setSuccess(Hashtable success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAcceptedProximityMatches_result)
        return this.equals((getAcceptedProximityMatches_result)that);
      return false;
    }

    public boolean equals(getAcceptedProximityMatches_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getAcceptedProximityMatches_result other = (getAcceptedProximityMatches_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.SET) {
              {
                TSet _set903 = iprot.readSetBegin();
                this.success = new Hashtable(2*_set903.size);
                for (int _i904 = 0; _i904 < _set903.size; ++_i904)
                {
                  String _elem905;
                  _elem905 = iprot.readString();
                  this.success.put(_elem905, _elem905);
                }
                iprot.readSetEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeSetBegin(new TSet(TType.STRING, this.success.size()));
          for (Enumeration _iter906_enum = this.success.keys(); _iter906_enum.hasMoreElements(); )           {
            String _iter906 = (String)_iter906_enum.nextElement();
            oprot.writeString(_iter906);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getAcceptedProximityMatches_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getActiveBuddySubscriberIds_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getActiveBuddySubscriberIds_args");


    public getActiveBuddySubscriberIds_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getActiveBuddySubscriberIds_args(getActiveBuddySubscriberIds_args other) {
    }

    public getActiveBuddySubscriberIds_args deepCopy() {
      return new getActiveBuddySubscriberIds_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getActiveBuddySubscriberIds_args)
        return this.equals((getActiveBuddySubscriberIds_args)that);
      return false;
    }

    public boolean equals(getActiveBuddySubscriberIds_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getActiveBuddySubscriberIds_args other = (getActiveBuddySubscriberIds_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getActiveBuddySubscriberIds_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getActiveBuddySubscriberIds_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getActiveBuddySubscriberIds_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getActiveBuddySubscriberIds_result() {
    }

    public getActiveBuddySubscriberIds_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getActiveBuddySubscriberIds_result(getActiveBuddySubscriberIds_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getActiveBuddySubscriberIds_result deepCopy() {
      return new getActiveBuddySubscriberIds_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getActiveBuddySubscriberIds_result)
        return this.equals((getActiveBuddySubscriberIds_result)that);
      return false;
    }

    public boolean equals(getActiveBuddySubscriberIds_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getActiveBuddySubscriberIds_result other = (getActiveBuddySubscriberIds_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list907 = iprot.readListBegin();
                this.success = new Vector(_list907.size);
                for (int _i908 = 0; _i908 < _list907.size; ++_i908)
                {
                  String _elem909;
                  _elem909 = iprot.readString();
                  this.success.addElement(_elem909);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter910_enum = this.success.elements(); _iter910_enum.hasMoreElements(); )           {
            String _iter910 = (String)_iter910_enum.nextElement();
            oprot.writeString(_iter910);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getActiveBuddySubscriberIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getAllContactIds_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getAllContactIds_args");


    public getAllContactIds_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllContactIds_args(getAllContactIds_args other) {
    }

    public getAllContactIds_args deepCopy() {
      return new getAllContactIds_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllContactIds_args)
        return this.equals((getAllContactIds_args)that);
      return false;
    }

    public boolean equals(getAllContactIds_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getAllContactIds_args other = (getAllContactIds_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getAllContactIds_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getAllContactIds_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getAllContactIds_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getAllContactIds_result() {
    }

    public getAllContactIds_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllContactIds_result(getAllContactIds_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getAllContactIds_result deepCopy() {
      return new getAllContactIds_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllContactIds_result)
        return this.equals((getAllContactIds_result)that);
      return false;
    }

    public boolean equals(getAllContactIds_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getAllContactIds_result other = (getAllContactIds_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list911 = iprot.readListBegin();
                this.success = new Vector(_list911.size);
                for (int _i912 = 0; _i912 < _list911.size; ++_i912)
                {
                  String _elem913;
                  _elem913 = iprot.readString();
                  this.success.addElement(_elem913);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter914_enum = this.success.elements(); _iter914_enum.hasMoreElements(); )           {
            String _iter914 = (String)_iter914_enum.nextElement();
            oprot.writeString(_iter914);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getAllContactIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getAuthQrcode_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getAuthQrcode_args");

    private static final TField KEEP_LOGGED_IN_FIELD_DESC = new TField("keepLoggedIn", TType.BOOL, (short)2);
    private static final TField SYSTEM_NAME_FIELD_DESC = new TField("systemName", TType.STRING, (short)3);

    private boolean keepLoggedIn;
    private String systemName;

    // isset id assignments
    private static final int __KEEPLOGGEDIN_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getAuthQrcode_args() {
    }

    public getAuthQrcode_args(
      boolean keepLoggedIn,
      String systemName)
    {
      this();
      this.keepLoggedIn = keepLoggedIn;
      setKeepLoggedInIsSet(true);
      this.systemName = systemName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAuthQrcode_args(getAuthQrcode_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.keepLoggedIn = other.keepLoggedIn;
      if (other.isSetSystemName()) {
        this.systemName = other.systemName;
      }
    }

    public getAuthQrcode_args deepCopy() {
      return new getAuthQrcode_args(this);
    }

    public void clear() {
      setKeepLoggedInIsSet(false);
      this.keepLoggedIn = false;
      this.systemName = null;
    }

    public boolean isKeepLoggedIn() {
      return this.keepLoggedIn;
    }

    public void setKeepLoggedIn(boolean keepLoggedIn) {
      this.keepLoggedIn = keepLoggedIn;
      setKeepLoggedInIsSet(true);
    }

    public void unsetKeepLoggedIn() {
      __isset_vector[__KEEPLOGGEDIN_ISSET_ID] = false;
    }

    /** Returns true if field keepLoggedIn is set (has been assigned a value) and false otherwise */
    public boolean isSetKeepLoggedIn() {
      return __isset_vector[__KEEPLOGGEDIN_ISSET_ID];
    }

    public void setKeepLoggedInIsSet(boolean value) {
      __isset_vector[__KEEPLOGGEDIN_ISSET_ID] = value;
    }

    public String getSystemName() {
      return this.systemName;
    }

    public void setSystemName(String systemName) {
      this.systemName = systemName;
    }

    public void unsetSystemName() {
      this.systemName = null;
    }

    /** Returns true if field systemName is set (has been assigned a value) and false otherwise */
    public boolean isSetSystemName() {
      return this.systemName != null;
    }

    public void setSystemNameIsSet(boolean value) {
      if (!value) {
        this.systemName = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAuthQrcode_args)
        return this.equals((getAuthQrcode_args)that);
      return false;
    }

    public boolean equals(getAuthQrcode_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_keepLoggedIn = true;
      boolean that_present_keepLoggedIn = true;
      if (this_present_keepLoggedIn || that_present_keepLoggedIn) {
        if (!(this_present_keepLoggedIn && that_present_keepLoggedIn))
          return false;
        if (this.keepLoggedIn != that.keepLoggedIn)
          return false;
      }

      boolean this_present_systemName = true && this.isSetSystemName();
      boolean that_present_systemName = true && that.isSetSystemName();
      if (this_present_systemName || that_present_systemName) {
        if (!(this_present_systemName && that_present_systemName))
          return false;
        if (!this.systemName.equals(that.systemName))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getAuthQrcode_args other = (getAuthQrcode_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetKeepLoggedIn(), other.isSetKeepLoggedIn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeepLoggedIn()) {
        lastComparison = TBaseHelper.compareTo(this.keepLoggedIn, other.keepLoggedIn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemName(), other.isSetSystemName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemName()) {
        lastComparison = TBaseHelper.compareTo(this.systemName, other.systemName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // KEEP_LOGGED_IN
            if (field.type == TType.BOOL) {
              this.keepLoggedIn = iprot.readBool();
              setKeepLoggedInIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SYSTEM_NAME
            if (field.type == TType.STRING) {
              this.systemName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(KEEP_LOGGED_IN_FIELD_DESC);
      oprot.writeBool(this.keepLoggedIn);
      oprot.writeFieldEnd();
      if (this.systemName != null) {
        oprot.writeFieldBegin(SYSTEM_NAME_FIELD_DESC);
        oprot.writeString(this.systemName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getAuthQrcode_args(");
      boolean first = true;

      sb.append("keepLoggedIn:");
      sb.append(this.keepLoggedIn);
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemName:");
      if (this.systemName == null) {
        sb.append("null");
      } else {
        sb.append(this.systemName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getAuthQrcode_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getAuthQrcode_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private AuthQrcode success;
    private TalkException e;

    // isset id assignments

    public getAuthQrcode_result() {
    }

    public getAuthQrcode_result(
      AuthQrcode success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAuthQrcode_result(getAuthQrcode_result other) {
      if (other.isSetSuccess()) {
        this.success = new AuthQrcode(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getAuthQrcode_result deepCopy() {
      return new getAuthQrcode_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public AuthQrcode getSuccess() {
      return this.success;
    }

    public void setSuccess(AuthQrcode success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAuthQrcode_result)
        return this.equals((getAuthQrcode_result)that);
      return false;
    }

    public boolean equals(getAuthQrcode_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getAuthQrcode_result other = (getAuthQrcode_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new AuthQrcode();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getAuthQrcode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getBlockedContactIds_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getBlockedContactIds_args");


    public getBlockedContactIds_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBlockedContactIds_args(getBlockedContactIds_args other) {
    }

    public getBlockedContactIds_args deepCopy() {
      return new getBlockedContactIds_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBlockedContactIds_args)
        return this.equals((getBlockedContactIds_args)that);
      return false;
    }

    public boolean equals(getBlockedContactIds_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getBlockedContactIds_args other = (getBlockedContactIds_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getBlockedContactIds_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getBlockedContactIds_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getBlockedContactIds_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getBlockedContactIds_result() {
    }

    public getBlockedContactIds_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBlockedContactIds_result(getBlockedContactIds_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getBlockedContactIds_result deepCopy() {
      return new getBlockedContactIds_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBlockedContactIds_result)
        return this.equals((getBlockedContactIds_result)that);
      return false;
    }

    public boolean equals(getBlockedContactIds_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getBlockedContactIds_result other = (getBlockedContactIds_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list915 = iprot.readListBegin();
                this.success = new Vector(_list915.size);
                for (int _i916 = 0; _i916 < _list915.size; ++_i916)
                {
                  String _elem917;
                  _elem917 = iprot.readString();
                  this.success.addElement(_elem917);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter918_enum = this.success.elements(); _iter918_enum.hasMoreElements(); )           {
            String _iter918 = (String)_iter918_enum.nextElement();
            oprot.writeString(_iter918);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getBlockedContactIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerWithPhoneNumber_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerWithPhoneNumber_args");

    private static final TField SESSION_ID_FIELD_DESC = new TField("sessionId", TType.STRING, (short)2);
    private static final TField MIGRATION_PINCODE_SESSION_ID_FIELD_DESC = new TField("migrationPincodeSessionId", TType.STRING, (short)3);

    private String sessionId;
    private String migrationPincodeSessionId;

    // isset id assignments

    public registerWithPhoneNumber_args() {
    }

    public registerWithPhoneNumber_args(
      String sessionId,
      String migrationPincodeSessionId)
    {
      this();
      this.sessionId = sessionId;
      this.migrationPincodeSessionId = migrationPincodeSessionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerWithPhoneNumber_args(registerWithPhoneNumber_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
      if (other.isSetMigrationPincodeSessionId()) {
        this.migrationPincodeSessionId = other.migrationPincodeSessionId;
      }
    }

    public registerWithPhoneNumber_args deepCopy() {
      return new registerWithPhoneNumber_args(this);
    }

    public void clear() {
      this.sessionId = null;
      this.migrationPincodeSessionId = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public void setSessionId(String sessionId) {
      this.sessionId = sessionId;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public String getMigrationPincodeSessionId() {
      return this.migrationPincodeSessionId;
    }

    public void setMigrationPincodeSessionId(String migrationPincodeSessionId) {
      this.migrationPincodeSessionId = migrationPincodeSessionId;
    }

    public void unsetMigrationPincodeSessionId() {
      this.migrationPincodeSessionId = null;
    }

    /** Returns true if field migrationPincodeSessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetMigrationPincodeSessionId() {
      return this.migrationPincodeSessionId != null;
    }

    public void setMigrationPincodeSessionIdIsSet(boolean value) {
      if (!value) {
        this.migrationPincodeSessionId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerWithPhoneNumber_args)
        return this.equals((registerWithPhoneNumber_args)that);
      return false;
    }

    public boolean equals(registerWithPhoneNumber_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      boolean this_present_migrationPincodeSessionId = true && this.isSetMigrationPincodeSessionId();
      boolean that_present_migrationPincodeSessionId = true && that.isSetMigrationPincodeSessionId();
      if (this_present_migrationPincodeSessionId || that_present_migrationPincodeSessionId) {
        if (!(this_present_migrationPincodeSessionId && that_present_migrationPincodeSessionId))
          return false;
        if (!this.migrationPincodeSessionId.equals(that.migrationPincodeSessionId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerWithPhoneNumber_args other = (registerWithPhoneNumber_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSessionId(), other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMigrationPincodeSessionId(), other.isSetMigrationPincodeSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMigrationPincodeSessionId()) {
        lastComparison = TBaseHelper.compareTo(this.migrationPincodeSessionId, other.migrationPincodeSessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // SESSION_ID
            if (field.type == TType.STRING) {
              this.sessionId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // MIGRATION_PINCODE_SESSION_ID
            if (field.type == TType.STRING) {
              this.migrationPincodeSessionId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.sessionId != null) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeString(this.sessionId);
        oprot.writeFieldEnd();
      }
      if (this.migrationPincodeSessionId != null) {
        oprot.writeFieldBegin(MIGRATION_PINCODE_SESSION_ID_FIELD_DESC);
        oprot.writeString(this.migrationPincodeSessionId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerWithPhoneNumber_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("migrationPincodeSessionId:");
      if (this.migrationPincodeSessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.migrationPincodeSessionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerWithPhoneNumber_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerWithPhoneNumber_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private RegisterWithPhoneNumberResult success;
    private TalkException e;

    // isset id assignments

    public registerWithPhoneNumber_result() {
    }

    public registerWithPhoneNumber_result(
      RegisterWithPhoneNumberResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerWithPhoneNumber_result(registerWithPhoneNumber_result other) {
      if (other.isSetSuccess()) {
        this.success = new RegisterWithPhoneNumberResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public registerWithPhoneNumber_result deepCopy() {
      return new registerWithPhoneNumber_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public RegisterWithPhoneNumberResult getSuccess() {
      return this.success;
    }

    public void setSuccess(RegisterWithPhoneNumberResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerWithPhoneNumber_result)
        return this.equals((registerWithPhoneNumber_result)that);
      return false;
    }

    public boolean equals(registerWithPhoneNumber_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerWithPhoneNumber_result other = (registerWithPhoneNumber_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new RegisterWithPhoneNumberResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerWithPhoneNumber_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerWithPhoneNumberAndPassword_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerWithPhoneNumberAndPassword_args");

    private static final TField SESSION_ID_FIELD_DESC = new TField("sessionId", TType.STRING, (short)2);
    private static final TField KEYNM_FIELD_DESC = new TField("keynm", TType.STRING, (short)3);
    private static final TField ENCRYPTED_FIELD_DESC = new TField("encrypted", TType.STRING, (short)4);

    private String sessionId;
    private String keynm;
    private String encrypted;

    // isset id assignments

    public registerWithPhoneNumberAndPassword_args() {
    }

    public registerWithPhoneNumberAndPassword_args(
      String sessionId,
      String keynm,
      String encrypted)
    {
      this();
      this.sessionId = sessionId;
      this.keynm = keynm;
      this.encrypted = encrypted;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerWithPhoneNumberAndPassword_args(registerWithPhoneNumberAndPassword_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
      if (other.isSetKeynm()) {
        this.keynm = other.keynm;
      }
      if (other.isSetEncrypted()) {
        this.encrypted = other.encrypted;
      }
    }

    public registerWithPhoneNumberAndPassword_args deepCopy() {
      return new registerWithPhoneNumberAndPassword_args(this);
    }

    public void clear() {
      this.sessionId = null;
      this.keynm = null;
      this.encrypted = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public void setSessionId(String sessionId) {
      this.sessionId = sessionId;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public String getKeynm() {
      return this.keynm;
    }

    public void setKeynm(String keynm) {
      this.keynm = keynm;
    }

    public void unsetKeynm() {
      this.keynm = null;
    }

    /** Returns true if field keynm is set (has been assigned a value) and false otherwise */
    public boolean isSetKeynm() {
      return this.keynm != null;
    }

    public void setKeynmIsSet(boolean value) {
      if (!value) {
        this.keynm = null;
      }
    }

    public String getEncrypted() {
      return this.encrypted;
    }

    public void setEncrypted(String encrypted) {
      this.encrypted = encrypted;
    }

    public void unsetEncrypted() {
      this.encrypted = null;
    }

    /** Returns true if field encrypted is set (has been assigned a value) and false otherwise */
    public boolean isSetEncrypted() {
      return this.encrypted != null;
    }

    public void setEncryptedIsSet(boolean value) {
      if (!value) {
        this.encrypted = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerWithPhoneNumberAndPassword_args)
        return this.equals((registerWithPhoneNumberAndPassword_args)that);
      return false;
    }

    public boolean equals(registerWithPhoneNumberAndPassword_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      boolean this_present_keynm = true && this.isSetKeynm();
      boolean that_present_keynm = true && that.isSetKeynm();
      if (this_present_keynm || that_present_keynm) {
        if (!(this_present_keynm && that_present_keynm))
          return false;
        if (!this.keynm.equals(that.keynm))
          return false;
      }

      boolean this_present_encrypted = true && this.isSetEncrypted();
      boolean that_present_encrypted = true && that.isSetEncrypted();
      if (this_present_encrypted || that_present_encrypted) {
        if (!(this_present_encrypted && that_present_encrypted))
          return false;
        if (!this.encrypted.equals(that.encrypted))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerWithPhoneNumberAndPassword_args other = (registerWithPhoneNumberAndPassword_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSessionId(), other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetKeynm(), other.isSetKeynm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeynm()) {
        lastComparison = TBaseHelper.compareTo(this.keynm, other.keynm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetEncrypted(), other.isSetEncrypted());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEncrypted()) {
        lastComparison = TBaseHelper.compareTo(this.encrypted, other.encrypted);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // SESSION_ID
            if (field.type == TType.STRING) {
              this.sessionId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // KEYNM
            if (field.type == TType.STRING) {
              this.keynm = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ENCRYPTED
            if (field.type == TType.STRING) {
              this.encrypted = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.sessionId != null) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeString(this.sessionId);
        oprot.writeFieldEnd();
      }
      if (this.keynm != null) {
        oprot.writeFieldBegin(KEYNM_FIELD_DESC);
        oprot.writeString(this.keynm);
        oprot.writeFieldEnd();
      }
      if (this.encrypted != null) {
        oprot.writeFieldBegin(ENCRYPTED_FIELD_DESC);
        oprot.writeString(this.encrypted);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerWithPhoneNumberAndPassword_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keynm:");
      if (this.keynm == null) {
        sb.append("null");
      } else {
        sb.append(this.keynm);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("encrypted:");
      if (this.encrypted == null) {
        sb.append("null");
      } else {
        sb.append(this.encrypted);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerWithPhoneNumberAndPassword_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerWithPhoneNumberAndPassword_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private RegisterWithPhoneNumberResult success;
    private TalkException e;

    // isset id assignments

    public registerWithPhoneNumberAndPassword_result() {
    }

    public registerWithPhoneNumberAndPassword_result(
      RegisterWithPhoneNumberResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerWithPhoneNumberAndPassword_result(registerWithPhoneNumberAndPassword_result other) {
      if (other.isSetSuccess()) {
        this.success = new RegisterWithPhoneNumberResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public registerWithPhoneNumberAndPassword_result deepCopy() {
      return new registerWithPhoneNumberAndPassword_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public RegisterWithPhoneNumberResult getSuccess() {
      return this.success;
    }

    public void setSuccess(RegisterWithPhoneNumberResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerWithPhoneNumberAndPassword_result)
        return this.equals((registerWithPhoneNumberAndPassword_result)that);
      return false;
    }

    public boolean equals(registerWithPhoneNumberAndPassword_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerWithPhoneNumberAndPassword_result other = (registerWithPhoneNumberAndPassword_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new RegisterWithPhoneNumberResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerWithPhoneNumberAndPassword_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getAnalyticsInfo_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getAnalyticsInfo_args");


    public getAnalyticsInfo_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAnalyticsInfo_args(getAnalyticsInfo_args other) {
    }

    public getAnalyticsInfo_args deepCopy() {
      return new getAnalyticsInfo_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAnalyticsInfo_args)
        return this.equals((getAnalyticsInfo_args)that);
      return false;
    }

    public boolean equals(getAnalyticsInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getAnalyticsInfo_args other = (getAnalyticsInfo_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getAnalyticsInfo_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getAnalyticsInfo_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getAnalyticsInfo_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private AnalyticsInfo success;
    private TalkException e;

    // isset id assignments

    public getAnalyticsInfo_result() {
    }

    public getAnalyticsInfo_result(
      AnalyticsInfo success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAnalyticsInfo_result(getAnalyticsInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new AnalyticsInfo(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getAnalyticsInfo_result deepCopy() {
      return new getAnalyticsInfo_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public AnalyticsInfo getSuccess() {
      return this.success;
    }

    public void setSuccess(AnalyticsInfo success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAnalyticsInfo_result)
        return this.equals((getAnalyticsInfo_result)that);
      return false;
    }

    public boolean equals(getAnalyticsInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getAnalyticsInfo_result other = (getAnalyticsInfo_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new AnalyticsInfo();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getAnalyticsInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class reportClientStatistics_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("reportClientStatistics_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField CATEGORY_FIELD_DESC = new TField("category", TType.I32, (short)2);
    private static final TField COUNT_FIELD_DESC = new TField("count", TType.I32, (short)3);

    private int reqSeq;
    private ReportCategory category;
    private int count;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private static final int __COUNT_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public reportClientStatistics_args() {
    }

    public reportClientStatistics_args(
      int reqSeq,
      ReportCategory category,
      int count)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.category = category;
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportClientStatistics_args(reportClientStatistics_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetCategory()) {
        this.category = other.category;
      }
      this.count = other.count;
    }

    public reportClientStatistics_args deepCopy() {
      return new reportClientStatistics_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.category = null;
      setCountIsSet(false);
      this.count = 0;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    /**
     * 
     * @see ReportCategory
     */
    public ReportCategory getCategory() {
      return this.category;
    }

    /**
     * 
     * @see ReportCategory
     */
    public void setCategory(ReportCategory category) {
      this.category = category;
    }

    public void unsetCategory() {
      this.category = null;
    }

    /** Returns true if field category is set (has been assigned a value) and false otherwise */
    public boolean isSetCategory() {
      return this.category != null;
    }

    public void setCategoryIsSet(boolean value) {
      if (!value) {
        this.category = null;
      }
    }

    public int getCount() {
      return this.count;
    }

    public void setCount(int count) {
      this.count = count;
      setCountIsSet(true);
    }

    public void unsetCount() {
      __isset_vector[__COUNT_ISSET_ID] = false;
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return __isset_vector[__COUNT_ISSET_ID];
    }

    public void setCountIsSet(boolean value) {
      __isset_vector[__COUNT_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reportClientStatistics_args)
        return this.equals((reportClientStatistics_args)that);
      return false;
    }

    public boolean equals(reportClientStatistics_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_category = true && this.isSetCategory();
      boolean that_present_category = true && that.isSetCategory();
      if (this_present_category || that_present_category) {
        if (!(this_present_category && that_present_category))
          return false;
        if (!this.category.equals(that.category))
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      reportClientStatistics_args other = (reportClientStatistics_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCategory(), other.isSetCategory());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategory()) {
        lastComparison = TBaseHelper.compareTo(this.category, other.category);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCount(), other.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = TBaseHelper.compareTo(this.count, other.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CATEGORY
            if (field.type == TType.I32) {
              this.category = ReportCategory.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // COUNT
            if (field.type == TType.I32) {
              this.count = iprot.readI32();
              setCountIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.category != null) {
        oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
        oprot.writeI32(this.category.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COUNT_FIELD_DESC);
      oprot.writeI32(this.count);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("reportClientStatistics_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("category:");
      if (this.category == null) {
        sb.append("null");
      } else {
        sb.append(this.category);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class reportClientStatistics_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("reportClientStatistics_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public reportClientStatistics_result() {
    }

    public reportClientStatistics_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportClientStatistics_result(reportClientStatistics_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public reportClientStatistics_result deepCopy() {
      return new reportClientStatistics_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reportClientStatistics_result)
        return this.equals((reportClientStatistics_result)that);
      return false;
    }

    public boolean equals(reportClientStatistics_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      reportClientStatistics_result other = (reportClientStatistics_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("reportClientStatistics_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class verifyPhoneNumberForLogin_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("verifyPhoneNumberForLogin_args");

    private static final TField VERIFIER_FROM_PHONE_FIELD_DESC = new TField("verifierFromPhone", TType.STRING, (short)2);
    private static final TField PIN_CODE_FOR_PHONE_FIELD_DESC = new TField("pinCodeForPhone", TType.STRING, (short)3);
    private static final TField VERIFIER_FROM_LOGIN_FIELD_DESC = new TField("verifierFromLogin", TType.STRING, (short)4);

    private String verifierFromPhone;
    private String pinCodeForPhone;
    private String verifierFromLogin;

    // isset id assignments

    public verifyPhoneNumberForLogin_args() {
    }

    public verifyPhoneNumberForLogin_args(
      String verifierFromPhone,
      String pinCodeForPhone,
      String verifierFromLogin)
    {
      this();
      this.verifierFromPhone = verifierFromPhone;
      this.pinCodeForPhone = pinCodeForPhone;
      this.verifierFromLogin = verifierFromLogin;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyPhoneNumberForLogin_args(verifyPhoneNumberForLogin_args other) {
      if (other.isSetVerifierFromPhone()) {
        this.verifierFromPhone = other.verifierFromPhone;
      }
      if (other.isSetPinCodeForPhone()) {
        this.pinCodeForPhone = other.pinCodeForPhone;
      }
      if (other.isSetVerifierFromLogin()) {
        this.verifierFromLogin = other.verifierFromLogin;
      }
    }

    public verifyPhoneNumberForLogin_args deepCopy() {
      return new verifyPhoneNumberForLogin_args(this);
    }

    public void clear() {
      this.verifierFromPhone = null;
      this.pinCodeForPhone = null;
      this.verifierFromLogin = null;
    }

    public String getVerifierFromPhone() {
      return this.verifierFromPhone;
    }

    public void setVerifierFromPhone(String verifierFromPhone) {
      this.verifierFromPhone = verifierFromPhone;
    }

    public void unsetVerifierFromPhone() {
      this.verifierFromPhone = null;
    }

    /** Returns true if field verifierFromPhone is set (has been assigned a value) and false otherwise */
    public boolean isSetVerifierFromPhone() {
      return this.verifierFromPhone != null;
    }

    public void setVerifierFromPhoneIsSet(boolean value) {
      if (!value) {
        this.verifierFromPhone = null;
      }
    }

    public String getPinCodeForPhone() {
      return this.pinCodeForPhone;
    }

    public void setPinCodeForPhone(String pinCodeForPhone) {
      this.pinCodeForPhone = pinCodeForPhone;
    }

    public void unsetPinCodeForPhone() {
      this.pinCodeForPhone = null;
    }

    /** Returns true if field pinCodeForPhone is set (has been assigned a value) and false otherwise */
    public boolean isSetPinCodeForPhone() {
      return this.pinCodeForPhone != null;
    }

    public void setPinCodeForPhoneIsSet(boolean value) {
      if (!value) {
        this.pinCodeForPhone = null;
      }
    }

    public String getVerifierFromLogin() {
      return this.verifierFromLogin;
    }

    public void setVerifierFromLogin(String verifierFromLogin) {
      this.verifierFromLogin = verifierFromLogin;
    }

    public void unsetVerifierFromLogin() {
      this.verifierFromLogin = null;
    }

    /** Returns true if field verifierFromLogin is set (has been assigned a value) and false otherwise */
    public boolean isSetVerifierFromLogin() {
      return this.verifierFromLogin != null;
    }

    public void setVerifierFromLoginIsSet(boolean value) {
      if (!value) {
        this.verifierFromLogin = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyPhoneNumberForLogin_args)
        return this.equals((verifyPhoneNumberForLogin_args)that);
      return false;
    }

    public boolean equals(verifyPhoneNumberForLogin_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_verifierFromPhone = true && this.isSetVerifierFromPhone();
      boolean that_present_verifierFromPhone = true && that.isSetVerifierFromPhone();
      if (this_present_verifierFromPhone || that_present_verifierFromPhone) {
        if (!(this_present_verifierFromPhone && that_present_verifierFromPhone))
          return false;
        if (!this.verifierFromPhone.equals(that.verifierFromPhone))
          return false;
      }

      boolean this_present_pinCodeForPhone = true && this.isSetPinCodeForPhone();
      boolean that_present_pinCodeForPhone = true && that.isSetPinCodeForPhone();
      if (this_present_pinCodeForPhone || that_present_pinCodeForPhone) {
        if (!(this_present_pinCodeForPhone && that_present_pinCodeForPhone))
          return false;
        if (!this.pinCodeForPhone.equals(that.pinCodeForPhone))
          return false;
      }

      boolean this_present_verifierFromLogin = true && this.isSetVerifierFromLogin();
      boolean that_present_verifierFromLogin = true && that.isSetVerifierFromLogin();
      if (this_present_verifierFromLogin || that_present_verifierFromLogin) {
        if (!(this_present_verifierFromLogin && that_present_verifierFromLogin))
          return false;
        if (!this.verifierFromLogin.equals(that.verifierFromLogin))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      verifyPhoneNumberForLogin_args other = (verifyPhoneNumberForLogin_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetVerifierFromPhone(), other.isSetVerifierFromPhone());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVerifierFromPhone()) {
        lastComparison = TBaseHelper.compareTo(this.verifierFromPhone, other.verifierFromPhone);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPinCodeForPhone(), other.isSetPinCodeForPhone());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPinCodeForPhone()) {
        lastComparison = TBaseHelper.compareTo(this.pinCodeForPhone, other.pinCodeForPhone);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetVerifierFromLogin(), other.isSetVerifierFromLogin());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVerifierFromLogin()) {
        lastComparison = TBaseHelper.compareTo(this.verifierFromLogin, other.verifierFromLogin);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // VERIFIER_FROM_PHONE
            if (field.type == TType.STRING) {
              this.verifierFromPhone = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PIN_CODE_FOR_PHONE
            if (field.type == TType.STRING) {
              this.pinCodeForPhone = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // VERIFIER_FROM_LOGIN
            if (field.type == TType.STRING) {
              this.verifierFromLogin = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.verifierFromPhone != null) {
        oprot.writeFieldBegin(VERIFIER_FROM_PHONE_FIELD_DESC);
        oprot.writeString(this.verifierFromPhone);
        oprot.writeFieldEnd();
      }
      if (this.pinCodeForPhone != null) {
        oprot.writeFieldBegin(PIN_CODE_FOR_PHONE_FIELD_DESC);
        oprot.writeString(this.pinCodeForPhone);
        oprot.writeFieldEnd();
      }
      if (this.verifierFromLogin != null) {
        oprot.writeFieldBegin(VERIFIER_FROM_LOGIN_FIELD_DESC);
        oprot.writeString(this.verifierFromLogin);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("verifyPhoneNumberForLogin_args(");
      boolean first = true;

      sb.append("verifierFromPhone:");
      if (this.verifierFromPhone == null) {
        sb.append("null");
      } else {
        sb.append(this.verifierFromPhone);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pinCodeForPhone:");
      if (this.pinCodeForPhone == null) {
        sb.append("null");
      } else {
        sb.append(this.pinCodeForPhone);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("verifierFromLogin:");
      if (this.verifierFromLogin == null) {
        sb.append("null");
      } else {
        sb.append(this.verifierFromLogin);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class verifyPhoneNumberForLogin_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("verifyPhoneNumberForLogin_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public verifyPhoneNumberForLogin_result() {
    }

    public verifyPhoneNumberForLogin_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyPhoneNumberForLogin_result(verifyPhoneNumberForLogin_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public verifyPhoneNumberForLogin_result deepCopy() {
      return new verifyPhoneNumberForLogin_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyPhoneNumberForLogin_result)
        return this.equals((verifyPhoneNumberForLogin_result)that);
      return false;
    }

    public boolean equals(verifyPhoneNumberForLogin_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      verifyPhoneNumberForLogin_result other = (verifyPhoneNumberForLogin_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("verifyPhoneNumberForLogin_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class verifyPhoneNumber_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("verifyPhoneNumber_args");

    private static final TField SESSION_ID_FIELD_DESC = new TField("sessionId", TType.STRING, (short)2);
    private static final TField PIN_CODE_FIELD_DESC = new TField("pinCode", TType.STRING, (short)3);
    private static final TField UDID_HASH_FIELD_DESC = new TField("udidHash", TType.STRING, (short)4);
    private static final TField MIGRATION_PINCODE_SESSION_ID_FIELD_DESC = new TField("migrationPincodeSessionId", TType.STRING, (short)5);
    private static final TField OLD_UDID_HASH_FIELD_DESC = new TField("oldUdidHash", TType.STRING, (short)6);

    private String sessionId;
    private String pinCode;
    private String udidHash;
    private String migrationPincodeSessionId;
    private String oldUdidHash;

    // isset id assignments

    public verifyPhoneNumber_args() {
    }

    public verifyPhoneNumber_args(
      String sessionId,
      String pinCode,
      String udidHash,
      String migrationPincodeSessionId,
      String oldUdidHash)
    {
      this();
      this.sessionId = sessionId;
      this.pinCode = pinCode;
      this.udidHash = udidHash;
      this.migrationPincodeSessionId = migrationPincodeSessionId;
      this.oldUdidHash = oldUdidHash;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyPhoneNumber_args(verifyPhoneNumber_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
      if (other.isSetPinCode()) {
        this.pinCode = other.pinCode;
      }
      if (other.isSetUdidHash()) {
        this.udidHash = other.udidHash;
      }
      if (other.isSetMigrationPincodeSessionId()) {
        this.migrationPincodeSessionId = other.migrationPincodeSessionId;
      }
      if (other.isSetOldUdidHash()) {
        this.oldUdidHash = other.oldUdidHash;
      }
    }

    public verifyPhoneNumber_args deepCopy() {
      return new verifyPhoneNumber_args(this);
    }

    public void clear() {
      this.sessionId = null;
      this.pinCode = null;
      this.udidHash = null;
      this.migrationPincodeSessionId = null;
      this.oldUdidHash = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public void setSessionId(String sessionId) {
      this.sessionId = sessionId;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public String getPinCode() {
      return this.pinCode;
    }

    public void setPinCode(String pinCode) {
      this.pinCode = pinCode;
    }

    public void unsetPinCode() {
      this.pinCode = null;
    }

    /** Returns true if field pinCode is set (has been assigned a value) and false otherwise */
    public boolean isSetPinCode() {
      return this.pinCode != null;
    }

    public void setPinCodeIsSet(boolean value) {
      if (!value) {
        this.pinCode = null;
      }
    }

    public String getUdidHash() {
      return this.udidHash;
    }

    public void setUdidHash(String udidHash) {
      this.udidHash = udidHash;
    }

    public void unsetUdidHash() {
      this.udidHash = null;
    }

    /** Returns true if field udidHash is set (has been assigned a value) and false otherwise */
    public boolean isSetUdidHash() {
      return this.udidHash != null;
    }

    public void setUdidHashIsSet(boolean value) {
      if (!value) {
        this.udidHash = null;
      }
    }

    public String getMigrationPincodeSessionId() {
      return this.migrationPincodeSessionId;
    }

    public void setMigrationPincodeSessionId(String migrationPincodeSessionId) {
      this.migrationPincodeSessionId = migrationPincodeSessionId;
    }

    public void unsetMigrationPincodeSessionId() {
      this.migrationPincodeSessionId = null;
    }

    /** Returns true if field migrationPincodeSessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetMigrationPincodeSessionId() {
      return this.migrationPincodeSessionId != null;
    }

    public void setMigrationPincodeSessionIdIsSet(boolean value) {
      if (!value) {
        this.migrationPincodeSessionId = null;
      }
    }

    public String getOldUdidHash() {
      return this.oldUdidHash;
    }

    public void setOldUdidHash(String oldUdidHash) {
      this.oldUdidHash = oldUdidHash;
    }

    public void unsetOldUdidHash() {
      this.oldUdidHash = null;
    }

    /** Returns true if field oldUdidHash is set (has been assigned a value) and false otherwise */
    public boolean isSetOldUdidHash() {
      return this.oldUdidHash != null;
    }

    public void setOldUdidHashIsSet(boolean value) {
      if (!value) {
        this.oldUdidHash = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyPhoneNumber_args)
        return this.equals((verifyPhoneNumber_args)that);
      return false;
    }

    public boolean equals(verifyPhoneNumber_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      boolean this_present_pinCode = true && this.isSetPinCode();
      boolean that_present_pinCode = true && that.isSetPinCode();
      if (this_present_pinCode || that_present_pinCode) {
        if (!(this_present_pinCode && that_present_pinCode))
          return false;
        if (!this.pinCode.equals(that.pinCode))
          return false;
      }

      boolean this_present_udidHash = true && this.isSetUdidHash();
      boolean that_present_udidHash = true && that.isSetUdidHash();
      if (this_present_udidHash || that_present_udidHash) {
        if (!(this_present_udidHash && that_present_udidHash))
          return false;
        if (!this.udidHash.equals(that.udidHash))
          return false;
      }

      boolean this_present_migrationPincodeSessionId = true && this.isSetMigrationPincodeSessionId();
      boolean that_present_migrationPincodeSessionId = true && that.isSetMigrationPincodeSessionId();
      if (this_present_migrationPincodeSessionId || that_present_migrationPincodeSessionId) {
        if (!(this_present_migrationPincodeSessionId && that_present_migrationPincodeSessionId))
          return false;
        if (!this.migrationPincodeSessionId.equals(that.migrationPincodeSessionId))
          return false;
      }

      boolean this_present_oldUdidHash = true && this.isSetOldUdidHash();
      boolean that_present_oldUdidHash = true && that.isSetOldUdidHash();
      if (this_present_oldUdidHash || that_present_oldUdidHash) {
        if (!(this_present_oldUdidHash && that_present_oldUdidHash))
          return false;
        if (!this.oldUdidHash.equals(that.oldUdidHash))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      verifyPhoneNumber_args other = (verifyPhoneNumber_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSessionId(), other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPinCode(), other.isSetPinCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPinCode()) {
        lastComparison = TBaseHelper.compareTo(this.pinCode, other.pinCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUdidHash(), other.isSetUdidHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUdidHash()) {
        lastComparison = TBaseHelper.compareTo(this.udidHash, other.udidHash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMigrationPincodeSessionId(), other.isSetMigrationPincodeSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMigrationPincodeSessionId()) {
        lastComparison = TBaseHelper.compareTo(this.migrationPincodeSessionId, other.migrationPincodeSessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetOldUdidHash(), other.isSetOldUdidHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOldUdidHash()) {
        lastComparison = TBaseHelper.compareTo(this.oldUdidHash, other.oldUdidHash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // SESSION_ID
            if (field.type == TType.STRING) {
              this.sessionId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PIN_CODE
            if (field.type == TType.STRING) {
              this.pinCode = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // UDID_HASH
            if (field.type == TType.STRING) {
              this.udidHash = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // MIGRATION_PINCODE_SESSION_ID
            if (field.type == TType.STRING) {
              this.migrationPincodeSessionId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // OLD_UDID_HASH
            if (field.type == TType.STRING) {
              this.oldUdidHash = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.sessionId != null) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeString(this.sessionId);
        oprot.writeFieldEnd();
      }
      if (this.pinCode != null) {
        oprot.writeFieldBegin(PIN_CODE_FIELD_DESC);
        oprot.writeString(this.pinCode);
        oprot.writeFieldEnd();
      }
      if (this.udidHash != null) {
        oprot.writeFieldBegin(UDID_HASH_FIELD_DESC);
        oprot.writeString(this.udidHash);
        oprot.writeFieldEnd();
      }
      if (this.migrationPincodeSessionId != null) {
        oprot.writeFieldBegin(MIGRATION_PINCODE_SESSION_ID_FIELD_DESC);
        oprot.writeString(this.migrationPincodeSessionId);
        oprot.writeFieldEnd();
      }
      if (this.oldUdidHash != null) {
        oprot.writeFieldBegin(OLD_UDID_HASH_FIELD_DESC);
        oprot.writeString(this.oldUdidHash);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("verifyPhoneNumber_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pinCode:");
      if (this.pinCode == null) {
        sb.append("null");
      } else {
        sb.append(this.pinCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("udidHash:");
      if (this.udidHash == null) {
        sb.append("null");
      } else {
        sb.append(this.udidHash);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("migrationPincodeSessionId:");
      if (this.migrationPincodeSessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.migrationPincodeSessionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oldUdidHash:");
      if (this.oldUdidHash == null) {
        sb.append("null");
      } else {
        sb.append(this.oldUdidHash);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class verifyPhoneNumber_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("verifyPhoneNumber_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private PhoneVerificationResult success;
    private TalkException e;

    // isset id assignments

    public verifyPhoneNumber_result() {
    }

    public verifyPhoneNumber_result(
      PhoneVerificationResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyPhoneNumber_result(verifyPhoneNumber_result other) {
      if (other.isSetSuccess()) {
        this.success = new PhoneVerificationResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public verifyPhoneNumber_result deepCopy() {
      return new verifyPhoneNumber_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public PhoneVerificationResult getSuccess() {
      return this.success;
    }

    public void setSuccess(PhoneVerificationResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyPhoneNumber_result)
        return this.equals((verifyPhoneNumber_result)that);
      return false;
    }

    public boolean equals(verifyPhoneNumber_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      verifyPhoneNumber_result other = (verifyPhoneNumber_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new PhoneVerificationResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("verifyPhoneNumber_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getBlockedContactIdsByRange_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getBlockedContactIdsByRange_args");

    private static final TField START_FIELD_DESC = new TField("start", TType.I32, (short)2);
    private static final TField COUNT_FIELD_DESC = new TField("count", TType.I32, (short)3);

    private int start;
    private int count;

    // isset id assignments
    private static final int __START_ISSET_ID = 0;
    private static final int __COUNT_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public getBlockedContactIdsByRange_args() {
    }

    public getBlockedContactIdsByRange_args(
      int start,
      int count)
    {
      this();
      this.start = start;
      setStartIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBlockedContactIdsByRange_args(getBlockedContactIdsByRange_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.start = other.start;
      this.count = other.count;
    }

    public getBlockedContactIdsByRange_args deepCopy() {
      return new getBlockedContactIdsByRange_args(this);
    }

    public void clear() {
      setStartIsSet(false);
      this.start = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public int getStart() {
      return this.start;
    }

    public void setStart(int start) {
      this.start = start;
      setStartIsSet(true);
    }

    public void unsetStart() {
      __isset_vector[__START_ISSET_ID] = false;
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return __isset_vector[__START_ISSET_ID];
    }

    public void setStartIsSet(boolean value) {
      __isset_vector[__START_ISSET_ID] = value;
    }

    public int getCount() {
      return this.count;
    }

    public void setCount(int count) {
      this.count = count;
      setCountIsSet(true);
    }

    public void unsetCount() {
      __isset_vector[__COUNT_ISSET_ID] = false;
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return __isset_vector[__COUNT_ISSET_ID];
    }

    public void setCountIsSet(boolean value) {
      __isset_vector[__COUNT_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBlockedContactIdsByRange_args)
        return this.equals((getBlockedContactIdsByRange_args)that);
      return false;
    }

    public boolean equals(getBlockedContactIdsByRange_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getBlockedContactIdsByRange_args other = (getBlockedContactIdsByRange_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetStart(), other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCount(), other.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = TBaseHelper.compareTo(this.count, other.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // START
            if (field.type == TType.I32) {
              this.start = iprot.readI32();
              setStartIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // COUNT
            if (field.type == TType.I32) {
              this.count = iprot.readI32();
              setCountIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(START_FIELD_DESC);
      oprot.writeI32(this.start);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUNT_FIELD_DESC);
      oprot.writeI32(this.count);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getBlockedContactIdsByRange_args(");
      boolean first = true;

      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getBlockedContactIdsByRange_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getBlockedContactIdsByRange_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getBlockedContactIdsByRange_result() {
    }

    public getBlockedContactIdsByRange_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBlockedContactIdsByRange_result(getBlockedContactIdsByRange_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getBlockedContactIdsByRange_result deepCopy() {
      return new getBlockedContactIdsByRange_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBlockedContactIdsByRange_result)
        return this.equals((getBlockedContactIdsByRange_result)that);
      return false;
    }

    public boolean equals(getBlockedContactIdsByRange_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getBlockedContactIdsByRange_result other = (getBlockedContactIdsByRange_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list919 = iprot.readListBegin();
                this.success = new Vector(_list919.size);
                for (int _i920 = 0; _i920 < _list919.size; ++_i920)
                {
                  String _elem921;
                  _elem921 = iprot.readString();
                  this.success.addElement(_elem921);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter922_enum = this.success.elements(); _iter922_enum.hasMoreElements(); )           {
            String _iter922 = (String)_iter922_enum.nextElement();
            oprot.writeString(_iter922);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getBlockedContactIdsByRange_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getBlockedRecommendationIds_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getBlockedRecommendationIds_args");


    public getBlockedRecommendationIds_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBlockedRecommendationIds_args(getBlockedRecommendationIds_args other) {
    }

    public getBlockedRecommendationIds_args deepCopy() {
      return new getBlockedRecommendationIds_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBlockedRecommendationIds_args)
        return this.equals((getBlockedRecommendationIds_args)that);
      return false;
    }

    public boolean equals(getBlockedRecommendationIds_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getBlockedRecommendationIds_args other = (getBlockedRecommendationIds_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getBlockedRecommendationIds_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getBlockedRecommendationIds_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getBlockedRecommendationIds_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getBlockedRecommendationIds_result() {
    }

    public getBlockedRecommendationIds_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBlockedRecommendationIds_result(getBlockedRecommendationIds_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getBlockedRecommendationIds_result deepCopy() {
      return new getBlockedRecommendationIds_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBlockedRecommendationIds_result)
        return this.equals((getBlockedRecommendationIds_result)that);
      return false;
    }

    public boolean equals(getBlockedRecommendationIds_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getBlockedRecommendationIds_result other = (getBlockedRecommendationIds_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list923 = iprot.readListBegin();
                this.success = new Vector(_list923.size);
                for (int _i924 = 0; _i924 < _list923.size; ++_i924)
                {
                  String _elem925;
                  _elem925 = iprot.readString();
                  this.success.addElement(_elem925);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter926_enum = this.success.elements(); _iter926_enum.hasMoreElements(); )           {
            String _iter926 = (String)_iter926_enum.nextElement();
            oprot.writeString(_iter926);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getBlockedRecommendationIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getBuddyBlockerIds_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getBuddyBlockerIds_args");


    public getBuddyBlockerIds_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBuddyBlockerIds_args(getBuddyBlockerIds_args other) {
    }

    public getBuddyBlockerIds_args deepCopy() {
      return new getBuddyBlockerIds_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBuddyBlockerIds_args)
        return this.equals((getBuddyBlockerIds_args)that);
      return false;
    }

    public boolean equals(getBuddyBlockerIds_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getBuddyBlockerIds_args other = (getBuddyBlockerIds_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getBuddyBlockerIds_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getBuddyBlockerIds_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getBuddyBlockerIds_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getBuddyBlockerIds_result() {
    }

    public getBuddyBlockerIds_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBuddyBlockerIds_result(getBuddyBlockerIds_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getBuddyBlockerIds_result deepCopy() {
      return new getBuddyBlockerIds_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBuddyBlockerIds_result)
        return this.equals((getBuddyBlockerIds_result)that);
      return false;
    }

    public boolean equals(getBuddyBlockerIds_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getBuddyBlockerIds_result other = (getBuddyBlockerIds_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list927 = iprot.readListBegin();
                this.success = new Vector(_list927.size);
                for (int _i928 = 0; _i928 < _list927.size; ++_i928)
                {
                  String _elem929;
                  _elem929 = iprot.readString();
                  this.success.addElement(_elem929);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter930_enum = this.success.elements(); _iter930_enum.hasMoreElements(); )           {
            String _iter930 = (String)_iter930_enum.nextElement();
            oprot.writeString(_iter930);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getBuddyBlockerIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getBuddyLocation_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getBuddyLocation_args");

    private static final TField MID_FIELD_DESC = new TField("mid", TType.STRING, (short)2);
    private static final TField INDEX_FIELD_DESC = new TField("index", TType.I32, (short)3);

    private String mid;
    private int index;

    // isset id assignments
    private static final int __INDEX_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getBuddyLocation_args() {
    }

    public getBuddyLocation_args(
      String mid,
      int index)
    {
      this();
      this.mid = mid;
      this.index = index;
      setIndexIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBuddyLocation_args(getBuddyLocation_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetMid()) {
        this.mid = other.mid;
      }
      this.index = other.index;
    }

    public getBuddyLocation_args deepCopy() {
      return new getBuddyLocation_args(this);
    }

    public void clear() {
      this.mid = null;
      setIndexIsSet(false);
      this.index = 0;
    }

    public String getMid() {
      return this.mid;
    }

    public void setMid(String mid) {
      this.mid = mid;
    }

    public void unsetMid() {
      this.mid = null;
    }

    /** Returns true if field mid is set (has been assigned a value) and false otherwise */
    public boolean isSetMid() {
      return this.mid != null;
    }

    public void setMidIsSet(boolean value) {
      if (!value) {
        this.mid = null;
      }
    }

    public int getIndex() {
      return this.index;
    }

    public void setIndex(int index) {
      this.index = index;
      setIndexIsSet(true);
    }

    public void unsetIndex() {
      __isset_vector[__INDEX_ISSET_ID] = false;
    }

    /** Returns true if field index is set (has been assigned a value) and false otherwise */
    public boolean isSetIndex() {
      return __isset_vector[__INDEX_ISSET_ID];
    }

    public void setIndexIsSet(boolean value) {
      __isset_vector[__INDEX_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBuddyLocation_args)
        return this.equals((getBuddyLocation_args)that);
      return false;
    }

    public boolean equals(getBuddyLocation_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mid = true && this.isSetMid();
      boolean that_present_mid = true && that.isSetMid();
      if (this_present_mid || that_present_mid) {
        if (!(this_present_mid && that_present_mid))
          return false;
        if (!this.mid.equals(that.mid))
          return false;
      }

      boolean this_present_index = true;
      boolean that_present_index = true;
      if (this_present_index || that_present_index) {
        if (!(this_present_index && that_present_index))
          return false;
        if (this.index != that.index)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getBuddyLocation_args other = (getBuddyLocation_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetMid(), other.isSetMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMid()) {
        lastComparison = TBaseHelper.compareTo(this.mid, other.mid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetIndex(), other.isSetIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndex()) {
        lastComparison = TBaseHelper.compareTo(this.index, other.index);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // MID
            if (field.type == TType.STRING) {
              this.mid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // INDEX
            if (field.type == TType.I32) {
              this.index = iprot.readI32();
              setIndexIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.mid != null) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeString(this.mid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INDEX_FIELD_DESC);
      oprot.writeI32(this.index);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getBuddyLocation_args(");
      boolean first = true;

      sb.append("mid:");
      if (this.mid == null) {
        sb.append("null");
      } else {
        sb.append(this.mid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("index:");
      sb.append(this.index);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getBuddyLocation_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getBuddyLocation_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Geolocation success;
    private TalkException e;

    // isset id assignments

    public getBuddyLocation_result() {
    }

    public getBuddyLocation_result(
      Geolocation success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBuddyLocation_result(getBuddyLocation_result other) {
      if (other.isSetSuccess()) {
        this.success = new Geolocation(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getBuddyLocation_result deepCopy() {
      return new getBuddyLocation_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Geolocation getSuccess() {
      return this.success;
    }

    public void setSuccess(Geolocation success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBuddyLocation_result)
        return this.equals((getBuddyLocation_result)that);
      return false;
    }

    public boolean equals(getBuddyLocation_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getBuddyLocation_result other = (getBuddyLocation_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Geolocation();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getBuddyLocation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getCompactContactsModifiedSince_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getCompactContactsModifiedSince_args");

    private static final TField TIMESTAMP_FIELD_DESC = new TField("timestamp", TType.I64, (short)2);

    private long timestamp;

    // isset id assignments
    private static final int __TIMESTAMP_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getCompactContactsModifiedSince_args() {
    }

    public getCompactContactsModifiedSince_args(
      long timestamp)
    {
      this();
      this.timestamp = timestamp;
      setTimestampIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCompactContactsModifiedSince_args(getCompactContactsModifiedSince_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.timestamp = other.timestamp;
    }

    public getCompactContactsModifiedSince_args deepCopy() {
      return new getCompactContactsModifiedSince_args(this);
    }

    public void clear() {
      setTimestampIsSet(false);
      this.timestamp = 0;
    }

    public long getTimestamp() {
      return this.timestamp;
    }

    public void setTimestamp(long timestamp) {
      this.timestamp = timestamp;
      setTimestampIsSet(true);
    }

    public void unsetTimestamp() {
      __isset_vector[__TIMESTAMP_ISSET_ID] = false;
    }

    /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetTimestamp() {
      return __isset_vector[__TIMESTAMP_ISSET_ID];
    }

    public void setTimestampIsSet(boolean value) {
      __isset_vector[__TIMESTAMP_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCompactContactsModifiedSince_args)
        return this.equals((getCompactContactsModifiedSince_args)that);
      return false;
    }

    public boolean equals(getCompactContactsModifiedSince_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_timestamp = true;
      boolean that_present_timestamp = true;
      if (this_present_timestamp || that_present_timestamp) {
        if (!(this_present_timestamp && that_present_timestamp))
          return false;
        if (this.timestamp != that.timestamp)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getCompactContactsModifiedSince_args other = (getCompactContactsModifiedSince_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetTimestamp(), other.isSetTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimestamp()) {
        lastComparison = TBaseHelper.compareTo(this.timestamp, other.timestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // TIMESTAMP
            if (field.type == TType.I64) {
              this.timestamp = iprot.readI64();
              setTimestampIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(this.timestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getCompactContactsModifiedSince_args(");
      boolean first = true;

      sb.append("timestamp:");
      sb.append(this.timestamp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getCompactContactsModifiedSince_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getCompactContactsModifiedSince_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getCompactContactsModifiedSince_result() {
    }

    public getCompactContactsModifiedSince_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCompactContactsModifiedSince_result(getCompactContactsModifiedSince_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          CompactContact other_element = (CompactContact)other_enum.nextElement();
          __this__success.addElement(new CompactContact(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getCompactContactsModifiedSince_result deepCopy() {
      return new getCompactContactsModifiedSince_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(CompactContact elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCompactContactsModifiedSince_result)
        return this.equals((getCompactContactsModifiedSince_result)that);
      return false;
    }

    public boolean equals(getCompactContactsModifiedSince_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getCompactContactsModifiedSince_result other = (getCompactContactsModifiedSince_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list931 = iprot.readListBegin();
                this.success = new Vector(_list931.size);
                for (int _i932 = 0; _i932 < _list931.size; ++_i932)
                {
                  CompactContact _elem933;
                  _elem933 = new CompactContact();
                  _elem933.read(iprot);
                  this.success.addElement(_elem933);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter934_enum = this.success.elements(); _iter934_enum.hasMoreElements(); )           {
            CompactContact _iter934 = (CompactContact)_iter934_enum.nextElement();
            _iter934.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getCompactContactsModifiedSince_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getCompactGroup_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getCompactGroup_args");

    private static final TField GROUP_ID_FIELD_DESC = new TField("groupId", TType.STRING, (short)2);

    private String groupId;

    // isset id assignments

    public getCompactGroup_args() {
    }

    public getCompactGroup_args(
      String groupId)
    {
      this();
      this.groupId = groupId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCompactGroup_args(getCompactGroup_args other) {
      if (other.isSetGroupId()) {
        this.groupId = other.groupId;
      }
    }

    public getCompactGroup_args deepCopy() {
      return new getCompactGroup_args(this);
    }

    public void clear() {
      this.groupId = null;
    }

    public String getGroupId() {
      return this.groupId;
    }

    public void setGroupId(String groupId) {
      this.groupId = groupId;
    }

    public void unsetGroupId() {
      this.groupId = null;
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return this.groupId != null;
    }

    public void setGroupIdIsSet(boolean value) {
      if (!value) {
        this.groupId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCompactGroup_args)
        return this.equals((getCompactGroup_args)that);
      return false;
    }

    public boolean equals(getCompactGroup_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_groupId = true && this.isSetGroupId();
      boolean that_present_groupId = true && that.isSetGroupId();
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (!this.groupId.equals(that.groupId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getCompactGroup_args other = (getCompactGroup_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetGroupId(), other.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = TBaseHelper.compareTo(this.groupId, other.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // GROUP_ID
            if (field.type == TType.STRING) {
              this.groupId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.groupId != null) {
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeString(this.groupId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getCompactGroup_args(");
      boolean first = true;

      sb.append("groupId:");
      if (this.groupId == null) {
        sb.append("null");
      } else {
        sb.append(this.groupId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getCompactGroup_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getCompactGroup_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Group success;
    private TalkException e;

    // isset id assignments

    public getCompactGroup_result() {
    }

    public getCompactGroup_result(
      Group success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCompactGroup_result(getCompactGroup_result other) {
      if (other.isSetSuccess()) {
        this.success = new Group(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getCompactGroup_result deepCopy() {
      return new getCompactGroup_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Group getSuccess() {
      return this.success;
    }

    public void setSuccess(Group success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCompactGroup_result)
        return this.equals((getCompactGroup_result)that);
      return false;
    }

    public boolean equals(getCompactGroup_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getCompactGroup_result other = (getCompactGroup_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Group();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getCompactGroup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getCompactRoom_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getCompactRoom_args");

    private static final TField ROOM_ID_FIELD_DESC = new TField("roomId", TType.STRING, (short)2);

    private String roomId;

    // isset id assignments

    public getCompactRoom_args() {
    }

    public getCompactRoom_args(
      String roomId)
    {
      this();
      this.roomId = roomId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCompactRoom_args(getCompactRoom_args other) {
      if (other.isSetRoomId()) {
        this.roomId = other.roomId;
      }
    }

    public getCompactRoom_args deepCopy() {
      return new getCompactRoom_args(this);
    }

    public void clear() {
      this.roomId = null;
    }

    public String getRoomId() {
      return this.roomId;
    }

    public void setRoomId(String roomId) {
      this.roomId = roomId;
    }

    public void unsetRoomId() {
      this.roomId = null;
    }

    /** Returns true if field roomId is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomId() {
      return this.roomId != null;
    }

    public void setRoomIdIsSet(boolean value) {
      if (!value) {
        this.roomId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCompactRoom_args)
        return this.equals((getCompactRoom_args)that);
      return false;
    }

    public boolean equals(getCompactRoom_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_roomId = true && this.isSetRoomId();
      boolean that_present_roomId = true && that.isSetRoomId();
      if (this_present_roomId || that_present_roomId) {
        if (!(this_present_roomId && that_present_roomId))
          return false;
        if (!this.roomId.equals(that.roomId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getCompactRoom_args other = (getCompactRoom_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRoomId(), other.isSetRoomId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomId()) {
        lastComparison = TBaseHelper.compareTo(this.roomId, other.roomId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // ROOM_ID
            if (field.type == TType.STRING) {
              this.roomId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.roomId != null) {
        oprot.writeFieldBegin(ROOM_ID_FIELD_DESC);
        oprot.writeString(this.roomId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getCompactRoom_args(");
      boolean first = true;

      sb.append("roomId:");
      if (this.roomId == null) {
        sb.append("null");
      } else {
        sb.append(this.roomId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getCompactRoom_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getCompactRoom_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Room success;
    private TalkException e;

    // isset id assignments

    public getCompactRoom_result() {
    }

    public getCompactRoom_result(
      Room success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCompactRoom_result(getCompactRoom_result other) {
      if (other.isSetSuccess()) {
        this.success = new Room(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getCompactRoom_result deepCopy() {
      return new getCompactRoom_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Room getSuccess() {
      return this.success;
    }

    public void setSuccess(Room success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCompactRoom_result)
        return this.equals((getCompactRoom_result)that);
      return false;
    }

    public boolean equals(getCompactRoom_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getCompactRoom_result other = (getCompactRoom_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Room();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getCompactRoom_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getContact_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getContact_args");

    private static final TField ID_FIELD_DESC = new TField("id", TType.STRING, (short)2);

    private String id;

    // isset id assignments

    public getContact_args() {
    }

    public getContact_args(
      String id)
    {
      this();
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getContact_args(getContact_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public getContact_args deepCopy() {
      return new getContact_args(this);
    }

    public void clear() {
      this.id = null;
    }

    public String getId() {
      return this.id;
    }

    public void setId(String id) {
      this.id = id;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getContact_args)
        return this.equals((getContact_args)that);
      return false;
    }

    public boolean equals(getContact_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getContact_args other = (getContact_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetId(), other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // ID
            if (field.type == TType.STRING) {
              this.id = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(this.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getContact_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getContact_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getContact_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Contact success;
    private TalkException e;

    // isset id assignments

    public getContact_result() {
    }

    public getContact_result(
      Contact success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getContact_result(getContact_result other) {
      if (other.isSetSuccess()) {
        this.success = new Contact(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getContact_result deepCopy() {
      return new getContact_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Contact getSuccess() {
      return this.success;
    }

    public void setSuccess(Contact success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getContact_result)
        return this.equals((getContact_result)that);
      return false;
    }

    public boolean equals(getContact_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getContact_result other = (getContact_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Contact();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getContact_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getContacts_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getContacts_args");

    private static final TField IDS_FIELD_DESC = new TField("ids", TType.LIST, (short)2);

    private Vector ids;

    // isset id assignments

    public getContacts_args() {
    }

    public getContacts_args(
      Vector ids)
    {
      this();
      this.ids = ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getContacts_args(getContacts_args other) {
      if (other.isSetIds()) {
        Vector __this__ids = new Vector();
        for (Enumeration other_enum = other.ids.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__ids.addElement(other_element);
        }
        this.ids = __this__ids;
      }
    }

    public getContacts_args deepCopy() {
      return new getContacts_args(this);
    }

    public void clear() {
      this.ids = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public Enumeration getIdsEnumeration() {
      return (this.ids == null) ? null : this.ids.elements();
    }

    public void addToIds(String elem) {
      if (this.ids == null) {
        this.ids = new Vector();
      }
      this.ids.addElement(elem);
    }

    public Vector getIds() {
      return this.ids;
    }

    public void setIds(Vector ids) {
      this.ids = ids;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getContacts_args)
        return this.equals((getContacts_args)that);
      return false;
    }

    public boolean equals(getContacts_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getContacts_args other = (getContacts_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetIds(), other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // IDS
            if (field.type == TType.LIST) {
              {
                TList _list935 = iprot.readListBegin();
                this.ids = new Vector(_list935.size);
                for (int _i936 = 0; _i936 < _list935.size; ++_i936)
                {
                  String _elem937;
                  _elem937 = iprot.readString();
                  this.ids.addElement(_elem937);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.ids != null) {
        oprot.writeFieldBegin(IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.ids.size()));
          for (Enumeration _iter938_enum = this.ids.elements(); _iter938_enum.hasMoreElements(); )           {
            String _iter938 = (String)_iter938_enum.nextElement();
            oprot.writeString(_iter938);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getContacts_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getContacts_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getContacts_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getContacts_result() {
    }

    public getContacts_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getContacts_result(getContacts_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          Contact other_element = (Contact)other_enum.nextElement();
          __this__success.addElement(new Contact(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getContacts_result deepCopy() {
      return new getContacts_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(Contact elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getContacts_result)
        return this.equals((getContacts_result)that);
      return false;
    }

    public boolean equals(getContacts_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getContacts_result other = (getContacts_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list939 = iprot.readListBegin();
                this.success = new Vector(_list939.size);
                for (int _i940 = 0; _i940 < _list939.size; ++_i940)
                {
                  Contact _elem941;
                  _elem941 = new Contact();
                  _elem941.read(iprot);
                  this.success.addElement(_elem941);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter942_enum = this.success.elements(); _iter942_enum.hasMoreElements(); )           {
            Contact _iter942 = (Contact)_iter942_enum.nextElement();
            _iter942.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getContacts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getContactWithFriendRequestStatus_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getContactWithFriendRequestStatus_args");

    private static final TField ID_FIELD_DESC = new TField("id", TType.STRING, (short)2);

    private String id;

    // isset id assignments

    public getContactWithFriendRequestStatus_args() {
    }

    public getContactWithFriendRequestStatus_args(
      String id)
    {
      this();
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getContactWithFriendRequestStatus_args(getContactWithFriendRequestStatus_args other) {
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public getContactWithFriendRequestStatus_args deepCopy() {
      return new getContactWithFriendRequestStatus_args(this);
    }

    public void clear() {
      this.id = null;
    }

    public String getId() {
      return this.id;
    }

    public void setId(String id) {
      this.id = id;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getContactWithFriendRequestStatus_args)
        return this.equals((getContactWithFriendRequestStatus_args)that);
      return false;
    }

    public boolean equals(getContactWithFriendRequestStatus_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getContactWithFriendRequestStatus_args other = (getContactWithFriendRequestStatus_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetId(), other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // ID
            if (field.type == TType.STRING) {
              this.id = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(this.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getContactWithFriendRequestStatus_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getContactWithFriendRequestStatus_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getContactWithFriendRequestStatus_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Contact success;
    private TalkException e;

    // isset id assignments

    public getContactWithFriendRequestStatus_result() {
    }

    public getContactWithFriendRequestStatus_result(
      Contact success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getContactWithFriendRequestStatus_result(getContactWithFriendRequestStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new Contact(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getContactWithFriendRequestStatus_result deepCopy() {
      return new getContactWithFriendRequestStatus_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Contact getSuccess() {
      return this.success;
    }

    public void setSuccess(Contact success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getContactWithFriendRequestStatus_result)
        return this.equals((getContactWithFriendRequestStatus_result)that);
      return false;
    }

    public boolean equals(getContactWithFriendRequestStatus_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getContactWithFriendRequestStatus_result other = (getContactWithFriendRequestStatus_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Contact();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getContactWithFriendRequestStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getCountryWithRequestIp_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getCountryWithRequestIp_args");


    public getCountryWithRequestIp_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCountryWithRequestIp_args(getCountryWithRequestIp_args other) {
    }

    public getCountryWithRequestIp_args deepCopy() {
      return new getCountryWithRequestIp_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCountryWithRequestIp_args)
        return this.equals((getCountryWithRequestIp_args)that);
      return false;
    }

    public boolean equals(getCountryWithRequestIp_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getCountryWithRequestIp_args other = (getCountryWithRequestIp_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getCountryWithRequestIp_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getCountryWithRequestIp_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getCountryWithRequestIp_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public getCountryWithRequestIp_result() {
    }

    public getCountryWithRequestIp_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCountryWithRequestIp_result(getCountryWithRequestIp_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getCountryWithRequestIp_result deepCopy() {
      return new getCountryWithRequestIp_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCountryWithRequestIp_result)
        return this.equals((getCountryWithRequestIp_result)that);
      return false;
    }

    public boolean equals(getCountryWithRequestIp_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getCountryWithRequestIp_result other = (getCountryWithRequestIp_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getCountryWithRequestIp_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getFavoriteMids_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getFavoriteMids_args");


    public getFavoriteMids_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFavoriteMids_args(getFavoriteMids_args other) {
    }

    public getFavoriteMids_args deepCopy() {
      return new getFavoriteMids_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFavoriteMids_args)
        return this.equals((getFavoriteMids_args)that);
      return false;
    }

    public boolean equals(getFavoriteMids_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getFavoriteMids_args other = (getFavoriteMids_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getFavoriteMids_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getFavoriteMids_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getFavoriteMids_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getFavoriteMids_result() {
    }

    public getFavoriteMids_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFavoriteMids_result(getFavoriteMids_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getFavoriteMids_result deepCopy() {
      return new getFavoriteMids_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFavoriteMids_result)
        return this.equals((getFavoriteMids_result)that);
      return false;
    }

    public boolean equals(getFavoriteMids_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getFavoriteMids_result other = (getFavoriteMids_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list943 = iprot.readListBegin();
                this.success = new Vector(_list943.size);
                for (int _i944 = 0; _i944 < _list943.size; ++_i944)
                {
                  String _elem945;
                  _elem945 = iprot.readString();
                  this.success.addElement(_elem945);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter946_enum = this.success.elements(); _iter946_enum.hasMoreElements(); )           {
            String _iter946 = (String)_iter946_enum.nextElement();
            oprot.writeString(_iter946);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getFavoriteMids_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getGroup_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getGroup_args");

    private static final TField GROUP_ID_FIELD_DESC = new TField("groupId", TType.STRING, (short)2);

    private String groupId;

    // isset id assignments

    public getGroup_args() {
    }

    public getGroup_args(
      String groupId)
    {
      this();
      this.groupId = groupId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroup_args(getGroup_args other) {
      if (other.isSetGroupId()) {
        this.groupId = other.groupId;
      }
    }

    public getGroup_args deepCopy() {
      return new getGroup_args(this);
    }

    public void clear() {
      this.groupId = null;
    }

    public String getGroupId() {
      return this.groupId;
    }

    public void setGroupId(String groupId) {
      this.groupId = groupId;
    }

    public void unsetGroupId() {
      this.groupId = null;
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return this.groupId != null;
    }

    public void setGroupIdIsSet(boolean value) {
      if (!value) {
        this.groupId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroup_args)
        return this.equals((getGroup_args)that);
      return false;
    }

    public boolean equals(getGroup_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_groupId = true && this.isSetGroupId();
      boolean that_present_groupId = true && that.isSetGroupId();
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (!this.groupId.equals(that.groupId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getGroup_args other = (getGroup_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetGroupId(), other.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = TBaseHelper.compareTo(this.groupId, other.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // GROUP_ID
            if (field.type == TType.STRING) {
              this.groupId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.groupId != null) {
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeString(this.groupId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getGroup_args(");
      boolean first = true;

      sb.append("groupId:");
      if (this.groupId == null) {
        sb.append("null");
      } else {
        sb.append(this.groupId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getGroup_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getGroup_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Group success;
    private TalkException e;

    // isset id assignments

    public getGroup_result() {
    }

    public getGroup_result(
      Group success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroup_result(getGroup_result other) {
      if (other.isSetSuccess()) {
        this.success = new Group(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getGroup_result deepCopy() {
      return new getGroup_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Group getSuccess() {
      return this.success;
    }

    public void setSuccess(Group success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroup_result)
        return this.equals((getGroup_result)that);
      return false;
    }

    public boolean equals(getGroup_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getGroup_result other = (getGroup_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Group();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getGroup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getGroupIdsInvited_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getGroupIdsInvited_args");


    public getGroupIdsInvited_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroupIdsInvited_args(getGroupIdsInvited_args other) {
    }

    public getGroupIdsInvited_args deepCopy() {
      return new getGroupIdsInvited_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroupIdsInvited_args)
        return this.equals((getGroupIdsInvited_args)that);
      return false;
    }

    public boolean equals(getGroupIdsInvited_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getGroupIdsInvited_args other = (getGroupIdsInvited_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getGroupIdsInvited_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getGroupIdsInvited_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getGroupIdsInvited_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getGroupIdsInvited_result() {
    }

    public getGroupIdsInvited_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroupIdsInvited_result(getGroupIdsInvited_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getGroupIdsInvited_result deepCopy() {
      return new getGroupIdsInvited_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroupIdsInvited_result)
        return this.equals((getGroupIdsInvited_result)that);
      return false;
    }

    public boolean equals(getGroupIdsInvited_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getGroupIdsInvited_result other = (getGroupIdsInvited_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list947 = iprot.readListBegin();
                this.success = new Vector(_list947.size);
                for (int _i948 = 0; _i948 < _list947.size; ++_i948)
                {
                  String _elem949;
                  _elem949 = iprot.readString();
                  this.success.addElement(_elem949);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter950_enum = this.success.elements(); _iter950_enum.hasMoreElements(); )           {
            String _iter950 = (String)_iter950_enum.nextElement();
            oprot.writeString(_iter950);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getGroupIdsInvited_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getGroupIdsJoined_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getGroupIdsJoined_args");


    public getGroupIdsJoined_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroupIdsJoined_args(getGroupIdsJoined_args other) {
    }

    public getGroupIdsJoined_args deepCopy() {
      return new getGroupIdsJoined_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroupIdsJoined_args)
        return this.equals((getGroupIdsJoined_args)that);
      return false;
    }

    public boolean equals(getGroupIdsJoined_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getGroupIdsJoined_args other = (getGroupIdsJoined_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getGroupIdsJoined_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getGroupIdsJoined_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getGroupIdsJoined_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getGroupIdsJoined_result() {
    }

    public getGroupIdsJoined_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroupIdsJoined_result(getGroupIdsJoined_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getGroupIdsJoined_result deepCopy() {
      return new getGroupIdsJoined_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroupIdsJoined_result)
        return this.equals((getGroupIdsJoined_result)that);
      return false;
    }

    public boolean equals(getGroupIdsJoined_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getGroupIdsJoined_result other = (getGroupIdsJoined_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list951 = iprot.readListBegin();
                this.success = new Vector(_list951.size);
                for (int _i952 = 0; _i952 < _list951.size; ++_i952)
                {
                  String _elem953;
                  _elem953 = iprot.readString();
                  this.success.addElement(_elem953);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter954_enum = this.success.elements(); _iter954_enum.hasMoreElements(); )           {
            String _iter954 = (String)_iter954_enum.nextElement();
            oprot.writeString(_iter954);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getGroupIdsJoined_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getGroups_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getGroups_args");

    private static final TField GROUP_IDS_FIELD_DESC = new TField("groupIds", TType.LIST, (short)2);

    private Vector groupIds;

    // isset id assignments

    public getGroups_args() {
    }

    public getGroups_args(
      Vector groupIds)
    {
      this();
      this.groupIds = groupIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroups_args(getGroups_args other) {
      if (other.isSetGroupIds()) {
        Vector __this__groupIds = new Vector();
        for (Enumeration other_enum = other.groupIds.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__groupIds.addElement(other_element);
        }
        this.groupIds = __this__groupIds;
      }
    }

    public getGroups_args deepCopy() {
      return new getGroups_args(this);
    }

    public void clear() {
      this.groupIds = null;
    }

    public int getGroupIdsSize() {
      return (this.groupIds == null) ? 0 : this.groupIds.size();
    }

    public Enumeration getGroupIdsEnumeration() {
      return (this.groupIds == null) ? null : this.groupIds.elements();
    }

    public void addToGroupIds(String elem) {
      if (this.groupIds == null) {
        this.groupIds = new Vector();
      }
      this.groupIds.addElement(elem);
    }

    public Vector getGroupIds() {
      return this.groupIds;
    }

    public void setGroupIds(Vector groupIds) {
      this.groupIds = groupIds;
    }

    public void unsetGroupIds() {
      this.groupIds = null;
    }

    /** Returns true if field groupIds is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupIds() {
      return this.groupIds != null;
    }

    public void setGroupIdsIsSet(boolean value) {
      if (!value) {
        this.groupIds = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroups_args)
        return this.equals((getGroups_args)that);
      return false;
    }

    public boolean equals(getGroups_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_groupIds = true && this.isSetGroupIds();
      boolean that_present_groupIds = true && that.isSetGroupIds();
      if (this_present_groupIds || that_present_groupIds) {
        if (!(this_present_groupIds && that_present_groupIds))
          return false;
        if (!this.groupIds.equals(that.groupIds))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getGroups_args other = (getGroups_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetGroupIds(), other.isSetGroupIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupIds()) {
        lastComparison = TBaseHelper.compareTo(this.groupIds, other.groupIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // GROUP_IDS
            if (field.type == TType.LIST) {
              {
                TList _list955 = iprot.readListBegin();
                this.groupIds = new Vector(_list955.size);
                for (int _i956 = 0; _i956 < _list955.size; ++_i956)
                {
                  String _elem957;
                  _elem957 = iprot.readString();
                  this.groupIds.addElement(_elem957);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.groupIds != null) {
        oprot.writeFieldBegin(GROUP_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.groupIds.size()));
          for (Enumeration _iter958_enum = this.groupIds.elements(); _iter958_enum.hasMoreElements(); )           {
            String _iter958 = (String)_iter958_enum.nextElement();
            oprot.writeString(_iter958);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getGroups_args(");
      boolean first = true;

      sb.append("groupIds:");
      if (this.groupIds == null) {
        sb.append("null");
      } else {
        sb.append(this.groupIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getGroups_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getGroups_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getGroups_result() {
    }

    public getGroups_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroups_result(getGroups_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          Group other_element = (Group)other_enum.nextElement();
          __this__success.addElement(new Group(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getGroups_result deepCopy() {
      return new getGroups_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(Group elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroups_result)
        return this.equals((getGroups_result)that);
      return false;
    }

    public boolean equals(getGroups_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getGroups_result other = (getGroups_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list959 = iprot.readListBegin();
                this.success = new Vector(_list959.size);
                for (int _i960 = 0; _i960 < _list959.size; ++_i960)
                {
                  Group _elem961;
                  _elem961 = new Group();
                  _elem961.read(iprot);
                  this.success.addElement(_elem961);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter962_enum = this.success.elements(); _iter962_enum.hasMoreElements(); )           {
            Group _iter962 = (Group)_iter962_enum.nextElement();
            _iter962.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getGroups_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getHiddenContactMids_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getHiddenContactMids_args");


    public getHiddenContactMids_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHiddenContactMids_args(getHiddenContactMids_args other) {
    }

    public getHiddenContactMids_args deepCopy() {
      return new getHiddenContactMids_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHiddenContactMids_args)
        return this.equals((getHiddenContactMids_args)that);
      return false;
    }

    public boolean equals(getHiddenContactMids_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getHiddenContactMids_args other = (getHiddenContactMids_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getHiddenContactMids_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getHiddenContactMids_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getHiddenContactMids_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getHiddenContactMids_result() {
    }

    public getHiddenContactMids_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getHiddenContactMids_result(getHiddenContactMids_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getHiddenContactMids_result deepCopy() {
      return new getHiddenContactMids_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getHiddenContactMids_result)
        return this.equals((getHiddenContactMids_result)that);
      return false;
    }

    public boolean equals(getHiddenContactMids_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getHiddenContactMids_result other = (getHiddenContactMids_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list963 = iprot.readListBegin();
                this.success = new Vector(_list963.size);
                for (int _i964 = 0; _i964 < _list963.size; ++_i964)
                {
                  String _elem965;
                  _elem965 = iprot.readString();
                  this.success.addElement(_elem965);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter966_enum = this.success.elements(); _iter966_enum.hasMoreElements(); )           {
            String _iter966 = (String)_iter966_enum.nextElement();
            oprot.writeString(_iter966);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getHiddenContactMids_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getIdentityIdentifier_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getIdentityIdentifier_args");


    public getIdentityIdentifier_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getIdentityIdentifier_args(getIdentityIdentifier_args other) {
    }

    public getIdentityIdentifier_args deepCopy() {
      return new getIdentityIdentifier_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getIdentityIdentifier_args)
        return this.equals((getIdentityIdentifier_args)that);
      return false;
    }

    public boolean equals(getIdentityIdentifier_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getIdentityIdentifier_args other = (getIdentityIdentifier_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getIdentityIdentifier_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getIdentityIdentifier_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getIdentityIdentifier_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public getIdentityIdentifier_result() {
    }

    public getIdentityIdentifier_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getIdentityIdentifier_result(getIdentityIdentifier_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getIdentityIdentifier_result deepCopy() {
      return new getIdentityIdentifier_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getIdentityIdentifier_result)
        return this.equals((getIdentityIdentifier_result)that);
      return false;
    }

    public boolean equals(getIdentityIdentifier_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getIdentityIdentifier_result other = (getIdentityIdentifier_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getIdentityIdentifier_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getLastAnnouncementIndex_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getLastAnnouncementIndex_args");


    public getLastAnnouncementIndex_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLastAnnouncementIndex_args(getLastAnnouncementIndex_args other) {
    }

    public getLastAnnouncementIndex_args deepCopy() {
      return new getLastAnnouncementIndex_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLastAnnouncementIndex_args)
        return this.equals((getLastAnnouncementIndex_args)that);
      return false;
    }

    public boolean equals(getLastAnnouncementIndex_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getLastAnnouncementIndex_args other = (getLastAnnouncementIndex_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getLastAnnouncementIndex_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getLastAnnouncementIndex_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getLastAnnouncementIndex_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private int success;
    private TalkException e;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getLastAnnouncementIndex_result() {
    }

    public getLastAnnouncementIndex_result(
      int success,
      TalkException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLastAnnouncementIndex_result(getLastAnnouncementIndex_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getLastAnnouncementIndex_result deepCopy() {
      return new getLastAnnouncementIndex_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLastAnnouncementIndex_result)
        return this.equals((getLastAnnouncementIndex_result)that);
      return false;
    }

    public boolean equals(getLastAnnouncementIndex_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getLastAnnouncementIndex_result other = (getLastAnnouncementIndex_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getLastAnnouncementIndex_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getLastOpRevision_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getLastOpRevision_args");


    public getLastOpRevision_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLastOpRevision_args(getLastOpRevision_args other) {
    }

    public getLastOpRevision_args deepCopy() {
      return new getLastOpRevision_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLastOpRevision_args)
        return this.equals((getLastOpRevision_args)that);
      return false;
    }

    public boolean equals(getLastOpRevision_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getLastOpRevision_args other = (getLastOpRevision_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getLastOpRevision_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getLastOpRevision_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getLastOpRevision_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I64, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private long success;
    private TalkException e;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getLastOpRevision_result() {
    }

    public getLastOpRevision_result(
      long success,
      TalkException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLastOpRevision_result(getLastOpRevision_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getLastOpRevision_result deepCopy() {
      return new getLastOpRevision_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public void setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLastOpRevision_result)
        return this.equals((getLastOpRevision_result)that);
      return false;
    }

    public boolean equals(getLastOpRevision_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getLastOpRevision_result other = (getLastOpRevision_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getLastOpRevision_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSuggestRevisions_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getSuggestRevisions_args");


    public getSuggestRevisions_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSuggestRevisions_args(getSuggestRevisions_args other) {
    }

    public getSuggestRevisions_args deepCopy() {
      return new getSuggestRevisions_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSuggestRevisions_args)
        return this.equals((getSuggestRevisions_args)that);
      return false;
    }

    public boolean equals(getSuggestRevisions_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getSuggestRevisions_args other = (getSuggestRevisions_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getSuggestRevisions_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSuggestRevisions_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getSuggestRevisions_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private SuggestDictionaryRevisions success;
    private TalkException e;

    // isset id assignments

    public getSuggestRevisions_result() {
    }

    public getSuggestRevisions_result(
      SuggestDictionaryRevisions success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSuggestRevisions_result(getSuggestRevisions_result other) {
      if (other.isSetSuccess()) {
        this.success = new SuggestDictionaryRevisions(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getSuggestRevisions_result deepCopy() {
      return new getSuggestRevisions_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public SuggestDictionaryRevisions getSuccess() {
      return this.success;
    }

    public void setSuccess(SuggestDictionaryRevisions success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSuggestRevisions_result)
        return this.equals((getSuggestRevisions_result)that);
      return false;
    }

    public boolean equals(getSuggestRevisions_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getSuggestRevisions_result other = (getSuggestRevisions_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new SuggestDictionaryRevisions();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getSuggestRevisions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPreviousMessagesV2WithReadCount_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPreviousMessagesV2WithReadCount_args");

    private static final TField MESSAGE_BOX_ID_FIELD_DESC = new TField("messageBoxId", TType.STRING, (short)2);
    private static final TField END_MESSAGE_ID_FIELD_DESC = new TField("endMessageId", TType.STRUCT, (short)3);
    private static final TField MESSAGES_COUNT_FIELD_DESC = new TField("messagesCount", TType.I32, (short)4);

    private String messageBoxId;
    private MessageBoxV2MessageId endMessageId;
    private int messagesCount;

    // isset id assignments
    private static final int __MESSAGESCOUNT_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getPreviousMessagesV2WithReadCount_args() {
    }

    public getPreviousMessagesV2WithReadCount_args(
      String messageBoxId,
      MessageBoxV2MessageId endMessageId,
      int messagesCount)
    {
      this();
      this.messageBoxId = messageBoxId;
      this.endMessageId = endMessageId;
      this.messagesCount = messagesCount;
      setMessagesCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPreviousMessagesV2WithReadCount_args(getPreviousMessagesV2WithReadCount_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetMessageBoxId()) {
        this.messageBoxId = other.messageBoxId;
      }
      if (other.isSetEndMessageId()) {
        this.endMessageId = new MessageBoxV2MessageId(other.endMessageId);
      }
      this.messagesCount = other.messagesCount;
    }

    public getPreviousMessagesV2WithReadCount_args deepCopy() {
      return new getPreviousMessagesV2WithReadCount_args(this);
    }

    public void clear() {
      this.messageBoxId = null;
      this.endMessageId = null;
      setMessagesCountIsSet(false);
      this.messagesCount = 0;
    }

    public String getMessageBoxId() {
      return this.messageBoxId;
    }

    public void setMessageBoxId(String messageBoxId) {
      this.messageBoxId = messageBoxId;
    }

    public void unsetMessageBoxId() {
      this.messageBoxId = null;
    }

    /** Returns true if field messageBoxId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageBoxId() {
      return this.messageBoxId != null;
    }

    public void setMessageBoxIdIsSet(boolean value) {
      if (!value) {
        this.messageBoxId = null;
      }
    }

    public MessageBoxV2MessageId getEndMessageId() {
      return this.endMessageId;
    }

    public void setEndMessageId(MessageBoxV2MessageId endMessageId) {
      this.endMessageId = endMessageId;
    }

    public void unsetEndMessageId() {
      this.endMessageId = null;
    }

    /** Returns true if field endMessageId is set (has been assigned a value) and false otherwise */
    public boolean isSetEndMessageId() {
      return this.endMessageId != null;
    }

    public void setEndMessageIdIsSet(boolean value) {
      if (!value) {
        this.endMessageId = null;
      }
    }

    public int getMessagesCount() {
      return this.messagesCount;
    }

    public void setMessagesCount(int messagesCount) {
      this.messagesCount = messagesCount;
      setMessagesCountIsSet(true);
    }

    public void unsetMessagesCount() {
      __isset_vector[__MESSAGESCOUNT_ISSET_ID] = false;
    }

    /** Returns true if field messagesCount is set (has been assigned a value) and false otherwise */
    public boolean isSetMessagesCount() {
      return __isset_vector[__MESSAGESCOUNT_ISSET_ID];
    }

    public void setMessagesCountIsSet(boolean value) {
      __isset_vector[__MESSAGESCOUNT_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPreviousMessagesV2WithReadCount_args)
        return this.equals((getPreviousMessagesV2WithReadCount_args)that);
      return false;
    }

    public boolean equals(getPreviousMessagesV2WithReadCount_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_messageBoxId = true && this.isSetMessageBoxId();
      boolean that_present_messageBoxId = true && that.isSetMessageBoxId();
      if (this_present_messageBoxId || that_present_messageBoxId) {
        if (!(this_present_messageBoxId && that_present_messageBoxId))
          return false;
        if (!this.messageBoxId.equals(that.messageBoxId))
          return false;
      }

      boolean this_present_endMessageId = true && this.isSetEndMessageId();
      boolean that_present_endMessageId = true && that.isSetEndMessageId();
      if (this_present_endMessageId || that_present_endMessageId) {
        if (!(this_present_endMessageId && that_present_endMessageId))
          return false;
        if (!this.endMessageId.equals(that.endMessageId))
          return false;
      }

      boolean this_present_messagesCount = true;
      boolean that_present_messagesCount = true;
      if (this_present_messagesCount || that_present_messagesCount) {
        if (!(this_present_messagesCount && that_present_messagesCount))
          return false;
        if (this.messagesCount != that.messagesCount)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPreviousMessagesV2WithReadCount_args other = (getPreviousMessagesV2WithReadCount_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetMessageBoxId(), other.isSetMessageBoxId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageBoxId()) {
        lastComparison = TBaseHelper.compareTo(this.messageBoxId, other.messageBoxId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetEndMessageId(), other.isSetEndMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndMessageId()) {
        lastComparison = this.endMessageId.compareTo(other.endMessageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMessagesCount(), other.isSetMessagesCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessagesCount()) {
        lastComparison = TBaseHelper.compareTo(this.messagesCount, other.messagesCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // MESSAGE_BOX_ID
            if (field.type == TType.STRING) {
              this.messageBoxId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // END_MESSAGE_ID
            if (field.type == TType.STRUCT) {
              this.endMessageId = new MessageBoxV2MessageId();
              this.endMessageId.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // MESSAGES_COUNT
            if (field.type == TType.I32) {
              this.messagesCount = iprot.readI32();
              setMessagesCountIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.messageBoxId != null) {
        oprot.writeFieldBegin(MESSAGE_BOX_ID_FIELD_DESC);
        oprot.writeString(this.messageBoxId);
        oprot.writeFieldEnd();
      }
      if (this.endMessageId != null) {
        oprot.writeFieldBegin(END_MESSAGE_ID_FIELD_DESC);
        this.endMessageId.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MESSAGES_COUNT_FIELD_DESC);
      oprot.writeI32(this.messagesCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPreviousMessagesV2WithReadCount_args(");
      boolean first = true;

      sb.append("messageBoxId:");
      if (this.messageBoxId == null) {
        sb.append("null");
      } else {
        sb.append(this.messageBoxId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endMessageId:");
      if (this.endMessageId == null) {
        sb.append("null");
      } else {
        sb.append(this.endMessageId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("messagesCount:");
      sb.append(this.messagesCount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPreviousMessagesV2WithReadCount_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPreviousMessagesV2WithReadCount_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getPreviousMessagesV2WithReadCount_result() {
    }

    public getPreviousMessagesV2WithReadCount_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPreviousMessagesV2WithReadCount_result(getPreviousMessagesV2WithReadCount_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          Message other_element = (Message)other_enum.nextElement();
          __this__success.addElement(new Message(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getPreviousMessagesV2WithReadCount_result deepCopy() {
      return new getPreviousMessagesV2WithReadCount_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(Message elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPreviousMessagesV2WithReadCount_result)
        return this.equals((getPreviousMessagesV2WithReadCount_result)that);
      return false;
    }

    public boolean equals(getPreviousMessagesV2WithReadCount_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPreviousMessagesV2WithReadCount_result other = (getPreviousMessagesV2WithReadCount_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list967 = iprot.readListBegin();
                this.success = new Vector(_list967.size);
                for (int _i968 = 0; _i968 < _list967.size; ++_i968)
                {
                  Message _elem969;
                  _elem969 = new Message();
                  _elem969.read(iprot);
                  this.success.addElement(_elem969);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter970_enum = this.success.elements(); _iter970_enum.hasMoreElements(); )           {
            Message _iter970 = (Message)_iter970_enum.nextElement();
            _iter970.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPreviousMessagesV2WithReadCount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getMessageBox_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getMessageBox_args");

    private static final TField CHANNEL_ID_FIELD_DESC = new TField("channelId", TType.STRING, (short)2);
    private static final TField MESSAGE_BOX_ID_FIELD_DESC = new TField("messageBoxId", TType.STRING, (short)3);
    private static final TField LAST_MESSAGES_COUNT_FIELD_DESC = new TField("lastMessagesCount", TType.I32, (short)4);

    private String channelId;
    private String messageBoxId;
    private int lastMessagesCount;

    // isset id assignments
    private static final int __LASTMESSAGESCOUNT_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getMessageBox_args() {
    }

    public getMessageBox_args(
      String channelId,
      String messageBoxId,
      int lastMessagesCount)
    {
      this();
      this.channelId = channelId;
      this.messageBoxId = messageBoxId;
      this.lastMessagesCount = lastMessagesCount;
      setLastMessagesCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessageBox_args(getMessageBox_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
      if (other.isSetMessageBoxId()) {
        this.messageBoxId = other.messageBoxId;
      }
      this.lastMessagesCount = other.lastMessagesCount;
    }

    public getMessageBox_args deepCopy() {
      return new getMessageBox_args(this);
    }

    public void clear() {
      this.channelId = null;
      this.messageBoxId = null;
      setLastMessagesCountIsSet(false);
      this.lastMessagesCount = 0;
    }

    public String getChannelId() {
      return this.channelId;
    }

    public void setChannelId(String channelId) {
      this.channelId = channelId;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public String getMessageBoxId() {
      return this.messageBoxId;
    }

    public void setMessageBoxId(String messageBoxId) {
      this.messageBoxId = messageBoxId;
    }

    public void unsetMessageBoxId() {
      this.messageBoxId = null;
    }

    /** Returns true if field messageBoxId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageBoxId() {
      return this.messageBoxId != null;
    }

    public void setMessageBoxIdIsSet(boolean value) {
      if (!value) {
        this.messageBoxId = null;
      }
    }

    public int getLastMessagesCount() {
      return this.lastMessagesCount;
    }

    public void setLastMessagesCount(int lastMessagesCount) {
      this.lastMessagesCount = lastMessagesCount;
      setLastMessagesCountIsSet(true);
    }

    public void unsetLastMessagesCount() {
      __isset_vector[__LASTMESSAGESCOUNT_ISSET_ID] = false;
    }

    /** Returns true if field lastMessagesCount is set (has been assigned a value) and false otherwise */
    public boolean isSetLastMessagesCount() {
      return __isset_vector[__LASTMESSAGESCOUNT_ISSET_ID];
    }

    public void setLastMessagesCountIsSet(boolean value) {
      __isset_vector[__LASTMESSAGESCOUNT_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessageBox_args)
        return this.equals((getMessageBox_args)that);
      return false;
    }

    public boolean equals(getMessageBox_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      boolean this_present_messageBoxId = true && this.isSetMessageBoxId();
      boolean that_present_messageBoxId = true && that.isSetMessageBoxId();
      if (this_present_messageBoxId || that_present_messageBoxId) {
        if (!(this_present_messageBoxId && that_present_messageBoxId))
          return false;
        if (!this.messageBoxId.equals(that.messageBoxId))
          return false;
      }

      boolean this_present_lastMessagesCount = true;
      boolean that_present_lastMessagesCount = true;
      if (this_present_lastMessagesCount || that_present_lastMessagesCount) {
        if (!(this_present_lastMessagesCount && that_present_lastMessagesCount))
          return false;
        if (this.lastMessagesCount != that.lastMessagesCount)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getMessageBox_args other = (getMessageBox_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetChannelId(), other.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = TBaseHelper.compareTo(this.channelId, other.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMessageBoxId(), other.isSetMessageBoxId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageBoxId()) {
        lastComparison = TBaseHelper.compareTo(this.messageBoxId, other.messageBoxId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLastMessagesCount(), other.isSetLastMessagesCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastMessagesCount()) {
        lastComparison = TBaseHelper.compareTo(this.lastMessagesCount, other.lastMessagesCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // CHANNEL_ID
            if (field.type == TType.STRING) {
              this.channelId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // MESSAGE_BOX_ID
            if (field.type == TType.STRING) {
              this.messageBoxId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // LAST_MESSAGES_COUNT
            if (field.type == TType.I32) {
              this.lastMessagesCount = iprot.readI32();
              setLastMessagesCountIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.channelId != null) {
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeString(this.channelId);
        oprot.writeFieldEnd();
      }
      if (this.messageBoxId != null) {
        oprot.writeFieldBegin(MESSAGE_BOX_ID_FIELD_DESC);
        oprot.writeString(this.messageBoxId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LAST_MESSAGES_COUNT_FIELD_DESC);
      oprot.writeI32(this.lastMessagesCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getMessageBox_args(");
      boolean first = true;

      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("messageBoxId:");
      if (this.messageBoxId == null) {
        sb.append("null");
      } else {
        sb.append(this.messageBoxId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lastMessagesCount:");
      sb.append(this.lastMessagesCount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getMessageBox_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getMessageBox_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TMessageBox success;
    private TalkException e;

    // isset id assignments

    public getMessageBox_result() {
    }

    public getMessageBox_result(
      TMessageBox success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessageBox_result(getMessageBox_result other) {
      if (other.isSetSuccess()) {
        this.success = new TMessageBox(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getMessageBox_result deepCopy() {
      return new getMessageBox_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public TMessageBox getSuccess() {
      return this.success;
    }

    public void setSuccess(TMessageBox success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessageBox_result)
        return this.equals((getMessageBox_result)that);
      return false;
    }

    public boolean equals(getMessageBox_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getMessageBox_result other = (getMessageBox_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new TMessageBox();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getMessageBox_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getMessageBoxCompactWrapUp_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getMessageBoxCompactWrapUp_args");

    private static final TField MID_FIELD_DESC = new TField("mid", TType.STRING, (short)2);

    private String mid;

    // isset id assignments

    public getMessageBoxCompactWrapUp_args() {
    }

    public getMessageBoxCompactWrapUp_args(
      String mid)
    {
      this();
      this.mid = mid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessageBoxCompactWrapUp_args(getMessageBoxCompactWrapUp_args other) {
      if (other.isSetMid()) {
        this.mid = other.mid;
      }
    }

    public getMessageBoxCompactWrapUp_args deepCopy() {
      return new getMessageBoxCompactWrapUp_args(this);
    }

    public void clear() {
      this.mid = null;
    }

    public String getMid() {
      return this.mid;
    }

    public void setMid(String mid) {
      this.mid = mid;
    }

    public void unsetMid() {
      this.mid = null;
    }

    /** Returns true if field mid is set (has been assigned a value) and false otherwise */
    public boolean isSetMid() {
      return this.mid != null;
    }

    public void setMidIsSet(boolean value) {
      if (!value) {
        this.mid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessageBoxCompactWrapUp_args)
        return this.equals((getMessageBoxCompactWrapUp_args)that);
      return false;
    }

    public boolean equals(getMessageBoxCompactWrapUp_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mid = true && this.isSetMid();
      boolean that_present_mid = true && that.isSetMid();
      if (this_present_mid || that_present_mid) {
        if (!(this_present_mid && that_present_mid))
          return false;
        if (!this.mid.equals(that.mid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getMessageBoxCompactWrapUp_args other = (getMessageBoxCompactWrapUp_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetMid(), other.isSetMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMid()) {
        lastComparison = TBaseHelper.compareTo(this.mid, other.mid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // MID
            if (field.type == TType.STRING) {
              this.mid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.mid != null) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeString(this.mid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getMessageBoxCompactWrapUp_args(");
      boolean first = true;

      sb.append("mid:");
      if (this.mid == null) {
        sb.append("null");
      } else {
        sb.append(this.mid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getMessageBoxCompactWrapUp_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getMessageBoxCompactWrapUp_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TMessageBoxWrapUp success;
    private TalkException e;

    // isset id assignments

    public getMessageBoxCompactWrapUp_result() {
    }

    public getMessageBoxCompactWrapUp_result(
      TMessageBoxWrapUp success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessageBoxCompactWrapUp_result(getMessageBoxCompactWrapUp_result other) {
      if (other.isSetSuccess()) {
        this.success = new TMessageBoxWrapUp(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getMessageBoxCompactWrapUp_result deepCopy() {
      return new getMessageBoxCompactWrapUp_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public TMessageBoxWrapUp getSuccess() {
      return this.success;
    }

    public void setSuccess(TMessageBoxWrapUp success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessageBoxCompactWrapUp_result)
        return this.equals((getMessageBoxCompactWrapUp_result)that);
      return false;
    }

    public boolean equals(getMessageBoxCompactWrapUp_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getMessageBoxCompactWrapUp_result other = (getMessageBoxCompactWrapUp_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new TMessageBoxWrapUp();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getMessageBoxCompactWrapUp_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getMessageBoxCompactWrapUpList_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getMessageBoxCompactWrapUpList_args");

    private static final TField START_FIELD_DESC = new TField("start", TType.I32, (short)2);
    private static final TField MESSAGE_BOX_COUNT_FIELD_DESC = new TField("messageBoxCount", TType.I32, (short)3);

    private int start;
    private int messageBoxCount;

    // isset id assignments
    private static final int __START_ISSET_ID = 0;
    private static final int __MESSAGEBOXCOUNT_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public getMessageBoxCompactWrapUpList_args() {
    }

    public getMessageBoxCompactWrapUpList_args(
      int start,
      int messageBoxCount)
    {
      this();
      this.start = start;
      setStartIsSet(true);
      this.messageBoxCount = messageBoxCount;
      setMessageBoxCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessageBoxCompactWrapUpList_args(getMessageBoxCompactWrapUpList_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.start = other.start;
      this.messageBoxCount = other.messageBoxCount;
    }

    public getMessageBoxCompactWrapUpList_args deepCopy() {
      return new getMessageBoxCompactWrapUpList_args(this);
    }

    public void clear() {
      setStartIsSet(false);
      this.start = 0;
      setMessageBoxCountIsSet(false);
      this.messageBoxCount = 0;
    }

    public int getStart() {
      return this.start;
    }

    public void setStart(int start) {
      this.start = start;
      setStartIsSet(true);
    }

    public void unsetStart() {
      __isset_vector[__START_ISSET_ID] = false;
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return __isset_vector[__START_ISSET_ID];
    }

    public void setStartIsSet(boolean value) {
      __isset_vector[__START_ISSET_ID] = value;
    }

    public int getMessageBoxCount() {
      return this.messageBoxCount;
    }

    public void setMessageBoxCount(int messageBoxCount) {
      this.messageBoxCount = messageBoxCount;
      setMessageBoxCountIsSet(true);
    }

    public void unsetMessageBoxCount() {
      __isset_vector[__MESSAGEBOXCOUNT_ISSET_ID] = false;
    }

    /** Returns true if field messageBoxCount is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageBoxCount() {
      return __isset_vector[__MESSAGEBOXCOUNT_ISSET_ID];
    }

    public void setMessageBoxCountIsSet(boolean value) {
      __isset_vector[__MESSAGEBOXCOUNT_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessageBoxCompactWrapUpList_args)
        return this.equals((getMessageBoxCompactWrapUpList_args)that);
      return false;
    }

    public boolean equals(getMessageBoxCompactWrapUpList_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_messageBoxCount = true;
      boolean that_present_messageBoxCount = true;
      if (this_present_messageBoxCount || that_present_messageBoxCount) {
        if (!(this_present_messageBoxCount && that_present_messageBoxCount))
          return false;
        if (this.messageBoxCount != that.messageBoxCount)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getMessageBoxCompactWrapUpList_args other = (getMessageBoxCompactWrapUpList_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetStart(), other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMessageBoxCount(), other.isSetMessageBoxCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageBoxCount()) {
        lastComparison = TBaseHelper.compareTo(this.messageBoxCount, other.messageBoxCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // START
            if (field.type == TType.I32) {
              this.start = iprot.readI32();
              setStartIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // MESSAGE_BOX_COUNT
            if (field.type == TType.I32) {
              this.messageBoxCount = iprot.readI32();
              setMessageBoxCountIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(START_FIELD_DESC);
      oprot.writeI32(this.start);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MESSAGE_BOX_COUNT_FIELD_DESC);
      oprot.writeI32(this.messageBoxCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getMessageBoxCompactWrapUpList_args(");
      boolean first = true;

      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("messageBoxCount:");
      sb.append(this.messageBoxCount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getMessageBoxCompactWrapUpList_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getMessageBoxCompactWrapUpList_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TMessageBoxWrapUpResponse success;
    private TalkException e;

    // isset id assignments

    public getMessageBoxCompactWrapUpList_result() {
    }

    public getMessageBoxCompactWrapUpList_result(
      TMessageBoxWrapUpResponse success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessageBoxCompactWrapUpList_result(getMessageBoxCompactWrapUpList_result other) {
      if (other.isSetSuccess()) {
        this.success = new TMessageBoxWrapUpResponse(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getMessageBoxCompactWrapUpList_result deepCopy() {
      return new getMessageBoxCompactWrapUpList_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public TMessageBoxWrapUpResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TMessageBoxWrapUpResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessageBoxCompactWrapUpList_result)
        return this.equals((getMessageBoxCompactWrapUpList_result)that);
      return false;
    }

    public boolean equals(getMessageBoxCompactWrapUpList_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getMessageBoxCompactWrapUpList_result other = (getMessageBoxCompactWrapUpList_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new TMessageBoxWrapUpResponse();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getMessageBoxCompactWrapUpList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getMessageBoxList_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getMessageBoxList_args");

    private static final TField CHANNEL_ID_FIELD_DESC = new TField("channelId", TType.STRING, (short)2);
    private static final TField LAST_MESSAGES_COUNT_FIELD_DESC = new TField("lastMessagesCount", TType.I32, (short)3);

    private String channelId;
    private int lastMessagesCount;

    // isset id assignments
    private static final int __LASTMESSAGESCOUNT_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getMessageBoxList_args() {
    }

    public getMessageBoxList_args(
      String channelId,
      int lastMessagesCount)
    {
      this();
      this.channelId = channelId;
      this.lastMessagesCount = lastMessagesCount;
      setLastMessagesCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessageBoxList_args(getMessageBoxList_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
      this.lastMessagesCount = other.lastMessagesCount;
    }

    public getMessageBoxList_args deepCopy() {
      return new getMessageBoxList_args(this);
    }

    public void clear() {
      this.channelId = null;
      setLastMessagesCountIsSet(false);
      this.lastMessagesCount = 0;
    }

    public String getChannelId() {
      return this.channelId;
    }

    public void setChannelId(String channelId) {
      this.channelId = channelId;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public int getLastMessagesCount() {
      return this.lastMessagesCount;
    }

    public void setLastMessagesCount(int lastMessagesCount) {
      this.lastMessagesCount = lastMessagesCount;
      setLastMessagesCountIsSet(true);
    }

    public void unsetLastMessagesCount() {
      __isset_vector[__LASTMESSAGESCOUNT_ISSET_ID] = false;
    }

    /** Returns true if field lastMessagesCount is set (has been assigned a value) and false otherwise */
    public boolean isSetLastMessagesCount() {
      return __isset_vector[__LASTMESSAGESCOUNT_ISSET_ID];
    }

    public void setLastMessagesCountIsSet(boolean value) {
      __isset_vector[__LASTMESSAGESCOUNT_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessageBoxList_args)
        return this.equals((getMessageBoxList_args)that);
      return false;
    }

    public boolean equals(getMessageBoxList_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      boolean this_present_lastMessagesCount = true;
      boolean that_present_lastMessagesCount = true;
      if (this_present_lastMessagesCount || that_present_lastMessagesCount) {
        if (!(this_present_lastMessagesCount && that_present_lastMessagesCount))
          return false;
        if (this.lastMessagesCount != that.lastMessagesCount)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getMessageBoxList_args other = (getMessageBoxList_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetChannelId(), other.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = TBaseHelper.compareTo(this.channelId, other.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLastMessagesCount(), other.isSetLastMessagesCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastMessagesCount()) {
        lastComparison = TBaseHelper.compareTo(this.lastMessagesCount, other.lastMessagesCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // CHANNEL_ID
            if (field.type == TType.STRING) {
              this.channelId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // LAST_MESSAGES_COUNT
            if (field.type == TType.I32) {
              this.lastMessagesCount = iprot.readI32();
              setLastMessagesCountIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.channelId != null) {
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeString(this.channelId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LAST_MESSAGES_COUNT_FIELD_DESC);
      oprot.writeI32(this.lastMessagesCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getMessageBoxList_args(");
      boolean first = true;

      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lastMessagesCount:");
      sb.append(this.lastMessagesCount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getMessageBoxList_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getMessageBoxList_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getMessageBoxList_result() {
    }

    public getMessageBoxList_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessageBoxList_result(getMessageBoxList_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          TMessageBox other_element = (TMessageBox)other_enum.nextElement();
          __this__success.addElement(new TMessageBox(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getMessageBoxList_result deepCopy() {
      return new getMessageBoxList_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(TMessageBox elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessageBoxList_result)
        return this.equals((getMessageBoxList_result)that);
      return false;
    }

    public boolean equals(getMessageBoxList_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getMessageBoxList_result other = (getMessageBoxList_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list971 = iprot.readListBegin();
                this.success = new Vector(_list971.size);
                for (int _i972 = 0; _i972 < _list971.size; ++_i972)
                {
                  TMessageBox _elem973;
                  _elem973 = new TMessageBox();
                  _elem973.read(iprot);
                  this.success.addElement(_elem973);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter974_enum = this.success.elements(); _iter974_enum.hasMoreElements(); )           {
            TMessageBox _iter974 = (TMessageBox)_iter974_enum.nextElement();
            _iter974.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getMessageBoxList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getMessageBoxListByStatus_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getMessageBoxListByStatus_args");

    private static final TField CHANNEL_ID_FIELD_DESC = new TField("channelId", TType.STRING, (short)2);
    private static final TField LAST_MESSAGES_COUNT_FIELD_DESC = new TField("lastMessagesCount", TType.I32, (short)3);
    private static final TField STATUS_FIELD_DESC = new TField("status", TType.I32, (short)4);

    private String channelId;
    private int lastMessagesCount;
    private int status;

    // isset id assignments
    private static final int __LASTMESSAGESCOUNT_ISSET_ID = 0;
    private static final int __STATUS_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public getMessageBoxListByStatus_args() {
    }

    public getMessageBoxListByStatus_args(
      String channelId,
      int lastMessagesCount,
      int status)
    {
      this();
      this.channelId = channelId;
      this.lastMessagesCount = lastMessagesCount;
      setLastMessagesCountIsSet(true);
      this.status = status;
      setStatusIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessageBoxListByStatus_args(getMessageBoxListByStatus_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
      this.lastMessagesCount = other.lastMessagesCount;
      this.status = other.status;
    }

    public getMessageBoxListByStatus_args deepCopy() {
      return new getMessageBoxListByStatus_args(this);
    }

    public void clear() {
      this.channelId = null;
      setLastMessagesCountIsSet(false);
      this.lastMessagesCount = 0;
      setStatusIsSet(false);
      this.status = 0;
    }

    public String getChannelId() {
      return this.channelId;
    }

    public void setChannelId(String channelId) {
      this.channelId = channelId;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public int getLastMessagesCount() {
      return this.lastMessagesCount;
    }

    public void setLastMessagesCount(int lastMessagesCount) {
      this.lastMessagesCount = lastMessagesCount;
      setLastMessagesCountIsSet(true);
    }

    public void unsetLastMessagesCount() {
      __isset_vector[__LASTMESSAGESCOUNT_ISSET_ID] = false;
    }

    /** Returns true if field lastMessagesCount is set (has been assigned a value) and false otherwise */
    public boolean isSetLastMessagesCount() {
      return __isset_vector[__LASTMESSAGESCOUNT_ISSET_ID];
    }

    public void setLastMessagesCountIsSet(boolean value) {
      __isset_vector[__LASTMESSAGESCOUNT_ISSET_ID] = value;
    }

    public int getStatus() {
      return this.status;
    }

    public void setStatus(int status) {
      this.status = status;
      setStatusIsSet(true);
    }

    public void unsetStatus() {
      __isset_vector[__STATUS_ISSET_ID] = false;
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return __isset_vector[__STATUS_ISSET_ID];
    }

    public void setStatusIsSet(boolean value) {
      __isset_vector[__STATUS_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessageBoxListByStatus_args)
        return this.equals((getMessageBoxListByStatus_args)that);
      return false;
    }

    public boolean equals(getMessageBoxListByStatus_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      boolean this_present_lastMessagesCount = true;
      boolean that_present_lastMessagesCount = true;
      if (this_present_lastMessagesCount || that_present_lastMessagesCount) {
        if (!(this_present_lastMessagesCount && that_present_lastMessagesCount))
          return false;
        if (this.lastMessagesCount != that.lastMessagesCount)
          return false;
      }

      boolean this_present_status = true;
      boolean that_present_status = true;
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (this.status != that.status)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getMessageBoxListByStatus_args other = (getMessageBoxListByStatus_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetChannelId(), other.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = TBaseHelper.compareTo(this.channelId, other.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLastMessagesCount(), other.isSetLastMessagesCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastMessagesCount()) {
        lastComparison = TBaseHelper.compareTo(this.lastMessagesCount, other.lastMessagesCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetStatus(), other.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = TBaseHelper.compareTo(this.status, other.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // CHANNEL_ID
            if (field.type == TType.STRING) {
              this.channelId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // LAST_MESSAGES_COUNT
            if (field.type == TType.I32) {
              this.lastMessagesCount = iprot.readI32();
              setLastMessagesCountIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // STATUS
            if (field.type == TType.I32) {
              this.status = iprot.readI32();
              setStatusIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.channelId != null) {
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeString(this.channelId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LAST_MESSAGES_COUNT_FIELD_DESC);
      oprot.writeI32(this.lastMessagesCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(this.status);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getMessageBoxListByStatus_args(");
      boolean first = true;

      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lastMessagesCount:");
      sb.append(this.lastMessagesCount);
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      sb.append(this.status);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getMessageBoxListByStatus_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getMessageBoxListByStatus_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getMessageBoxListByStatus_result() {
    }

    public getMessageBoxListByStatus_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessageBoxListByStatus_result(getMessageBoxListByStatus_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          TMessageBox other_element = (TMessageBox)other_enum.nextElement();
          __this__success.addElement(new TMessageBox(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getMessageBoxListByStatus_result deepCopy() {
      return new getMessageBoxListByStatus_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(TMessageBox elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessageBoxListByStatus_result)
        return this.equals((getMessageBoxListByStatus_result)that);
      return false;
    }

    public boolean equals(getMessageBoxListByStatus_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getMessageBoxListByStatus_result other = (getMessageBoxListByStatus_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list975 = iprot.readListBegin();
                this.success = new Vector(_list975.size);
                for (int _i976 = 0; _i976 < _list975.size; ++_i976)
                {
                  TMessageBox _elem977;
                  _elem977 = new TMessageBox();
                  _elem977.read(iprot);
                  this.success.addElement(_elem977);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter978_enum = this.success.elements(); _iter978_enum.hasMoreElements(); )           {
            TMessageBox _iter978 = (TMessageBox)_iter978_enum.nextElement();
            _iter978.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getMessageBoxListByStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getMessageBoxWrapUp_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getMessageBoxWrapUp_args");

    private static final TField MID_FIELD_DESC = new TField("mid", TType.STRING, (short)2);

    private String mid;

    // isset id assignments

    public getMessageBoxWrapUp_args() {
    }

    public getMessageBoxWrapUp_args(
      String mid)
    {
      this();
      this.mid = mid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessageBoxWrapUp_args(getMessageBoxWrapUp_args other) {
      if (other.isSetMid()) {
        this.mid = other.mid;
      }
    }

    public getMessageBoxWrapUp_args deepCopy() {
      return new getMessageBoxWrapUp_args(this);
    }

    public void clear() {
      this.mid = null;
    }

    public String getMid() {
      return this.mid;
    }

    public void setMid(String mid) {
      this.mid = mid;
    }

    public void unsetMid() {
      this.mid = null;
    }

    /** Returns true if field mid is set (has been assigned a value) and false otherwise */
    public boolean isSetMid() {
      return this.mid != null;
    }

    public void setMidIsSet(boolean value) {
      if (!value) {
        this.mid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessageBoxWrapUp_args)
        return this.equals((getMessageBoxWrapUp_args)that);
      return false;
    }

    public boolean equals(getMessageBoxWrapUp_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mid = true && this.isSetMid();
      boolean that_present_mid = true && that.isSetMid();
      if (this_present_mid || that_present_mid) {
        if (!(this_present_mid && that_present_mid))
          return false;
        if (!this.mid.equals(that.mid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getMessageBoxWrapUp_args other = (getMessageBoxWrapUp_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetMid(), other.isSetMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMid()) {
        lastComparison = TBaseHelper.compareTo(this.mid, other.mid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // MID
            if (field.type == TType.STRING) {
              this.mid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.mid != null) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeString(this.mid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getMessageBoxWrapUp_args(");
      boolean first = true;

      sb.append("mid:");
      if (this.mid == null) {
        sb.append("null");
      } else {
        sb.append(this.mid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getMessageBoxWrapUp_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getMessageBoxWrapUp_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TMessageBoxWrapUp success;
    private TalkException e;

    // isset id assignments

    public getMessageBoxWrapUp_result() {
    }

    public getMessageBoxWrapUp_result(
      TMessageBoxWrapUp success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessageBoxWrapUp_result(getMessageBoxWrapUp_result other) {
      if (other.isSetSuccess()) {
        this.success = new TMessageBoxWrapUp(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getMessageBoxWrapUp_result deepCopy() {
      return new getMessageBoxWrapUp_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public TMessageBoxWrapUp getSuccess() {
      return this.success;
    }

    public void setSuccess(TMessageBoxWrapUp success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessageBoxWrapUp_result)
        return this.equals((getMessageBoxWrapUp_result)that);
      return false;
    }

    public boolean equals(getMessageBoxWrapUp_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getMessageBoxWrapUp_result other = (getMessageBoxWrapUp_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new TMessageBoxWrapUp();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getMessageBoxWrapUp_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getMessageBoxWrapUpList_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getMessageBoxWrapUpList_args");

    private static final TField START_FIELD_DESC = new TField("start", TType.I32, (short)2);
    private static final TField MESSAGE_BOX_COUNT_FIELD_DESC = new TField("messageBoxCount", TType.I32, (short)3);

    private int start;
    private int messageBoxCount;

    // isset id assignments
    private static final int __START_ISSET_ID = 0;
    private static final int __MESSAGEBOXCOUNT_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public getMessageBoxWrapUpList_args() {
    }

    public getMessageBoxWrapUpList_args(
      int start,
      int messageBoxCount)
    {
      this();
      this.start = start;
      setStartIsSet(true);
      this.messageBoxCount = messageBoxCount;
      setMessageBoxCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessageBoxWrapUpList_args(getMessageBoxWrapUpList_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.start = other.start;
      this.messageBoxCount = other.messageBoxCount;
    }

    public getMessageBoxWrapUpList_args deepCopy() {
      return new getMessageBoxWrapUpList_args(this);
    }

    public void clear() {
      setStartIsSet(false);
      this.start = 0;
      setMessageBoxCountIsSet(false);
      this.messageBoxCount = 0;
    }

    public int getStart() {
      return this.start;
    }

    public void setStart(int start) {
      this.start = start;
      setStartIsSet(true);
    }

    public void unsetStart() {
      __isset_vector[__START_ISSET_ID] = false;
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return __isset_vector[__START_ISSET_ID];
    }

    public void setStartIsSet(boolean value) {
      __isset_vector[__START_ISSET_ID] = value;
    }

    public int getMessageBoxCount() {
      return this.messageBoxCount;
    }

    public void setMessageBoxCount(int messageBoxCount) {
      this.messageBoxCount = messageBoxCount;
      setMessageBoxCountIsSet(true);
    }

    public void unsetMessageBoxCount() {
      __isset_vector[__MESSAGEBOXCOUNT_ISSET_ID] = false;
    }

    /** Returns true if field messageBoxCount is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageBoxCount() {
      return __isset_vector[__MESSAGEBOXCOUNT_ISSET_ID];
    }

    public void setMessageBoxCountIsSet(boolean value) {
      __isset_vector[__MESSAGEBOXCOUNT_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessageBoxWrapUpList_args)
        return this.equals((getMessageBoxWrapUpList_args)that);
      return false;
    }

    public boolean equals(getMessageBoxWrapUpList_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_messageBoxCount = true;
      boolean that_present_messageBoxCount = true;
      if (this_present_messageBoxCount || that_present_messageBoxCount) {
        if (!(this_present_messageBoxCount && that_present_messageBoxCount))
          return false;
        if (this.messageBoxCount != that.messageBoxCount)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getMessageBoxWrapUpList_args other = (getMessageBoxWrapUpList_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetStart(), other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMessageBoxCount(), other.isSetMessageBoxCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageBoxCount()) {
        lastComparison = TBaseHelper.compareTo(this.messageBoxCount, other.messageBoxCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // START
            if (field.type == TType.I32) {
              this.start = iprot.readI32();
              setStartIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // MESSAGE_BOX_COUNT
            if (field.type == TType.I32) {
              this.messageBoxCount = iprot.readI32();
              setMessageBoxCountIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(START_FIELD_DESC);
      oprot.writeI32(this.start);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MESSAGE_BOX_COUNT_FIELD_DESC);
      oprot.writeI32(this.messageBoxCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getMessageBoxWrapUpList_args(");
      boolean first = true;

      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("messageBoxCount:");
      sb.append(this.messageBoxCount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getMessageBoxWrapUpList_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getMessageBoxWrapUpList_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TMessageBoxWrapUpResponse success;
    private TalkException e;

    // isset id assignments

    public getMessageBoxWrapUpList_result() {
    }

    public getMessageBoxWrapUpList_result(
      TMessageBoxWrapUpResponse success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessageBoxWrapUpList_result(getMessageBoxWrapUpList_result other) {
      if (other.isSetSuccess()) {
        this.success = new TMessageBoxWrapUpResponse(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getMessageBoxWrapUpList_result deepCopy() {
      return new getMessageBoxWrapUpList_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public TMessageBoxWrapUpResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(TMessageBoxWrapUpResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessageBoxWrapUpList_result)
        return this.equals((getMessageBoxWrapUpList_result)that);
      return false;
    }

    public boolean equals(getMessageBoxWrapUpList_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getMessageBoxWrapUpList_result other = (getMessageBoxWrapUpList_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new TMessageBoxWrapUpResponse();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getMessageBoxWrapUpList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getMessagesBySequenceNumber_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getMessagesBySequenceNumber_args");

    private static final TField CHANNEL_ID_FIELD_DESC = new TField("channelId", TType.STRING, (short)2);
    private static final TField MESSAGE_BOX_ID_FIELD_DESC = new TField("messageBoxId", TType.STRING, (short)3);
    private static final TField START_SEQ_FIELD_DESC = new TField("startSeq", TType.I64, (short)4);
    private static final TField END_SEQ_FIELD_DESC = new TField("endSeq", TType.I64, (short)5);

    private String channelId;
    private String messageBoxId;
    private long startSeq;
    private long endSeq;

    // isset id assignments
    private static final int __STARTSEQ_ISSET_ID = 0;
    private static final int __ENDSEQ_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public getMessagesBySequenceNumber_args() {
    }

    public getMessagesBySequenceNumber_args(
      String channelId,
      String messageBoxId,
      long startSeq,
      long endSeq)
    {
      this();
      this.channelId = channelId;
      this.messageBoxId = messageBoxId;
      this.startSeq = startSeq;
      setStartSeqIsSet(true);
      this.endSeq = endSeq;
      setEndSeqIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessagesBySequenceNumber_args(getMessagesBySequenceNumber_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
      if (other.isSetMessageBoxId()) {
        this.messageBoxId = other.messageBoxId;
      }
      this.startSeq = other.startSeq;
      this.endSeq = other.endSeq;
    }

    public getMessagesBySequenceNumber_args deepCopy() {
      return new getMessagesBySequenceNumber_args(this);
    }

    public void clear() {
      this.channelId = null;
      this.messageBoxId = null;
      setStartSeqIsSet(false);
      this.startSeq = 0;
      setEndSeqIsSet(false);
      this.endSeq = 0;
    }

    public String getChannelId() {
      return this.channelId;
    }

    public void setChannelId(String channelId) {
      this.channelId = channelId;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public String getMessageBoxId() {
      return this.messageBoxId;
    }

    public void setMessageBoxId(String messageBoxId) {
      this.messageBoxId = messageBoxId;
    }

    public void unsetMessageBoxId() {
      this.messageBoxId = null;
    }

    /** Returns true if field messageBoxId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageBoxId() {
      return this.messageBoxId != null;
    }

    public void setMessageBoxIdIsSet(boolean value) {
      if (!value) {
        this.messageBoxId = null;
      }
    }

    public long getStartSeq() {
      return this.startSeq;
    }

    public void setStartSeq(long startSeq) {
      this.startSeq = startSeq;
      setStartSeqIsSet(true);
    }

    public void unsetStartSeq() {
      __isset_vector[__STARTSEQ_ISSET_ID] = false;
    }

    /** Returns true if field startSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetStartSeq() {
      return __isset_vector[__STARTSEQ_ISSET_ID];
    }

    public void setStartSeqIsSet(boolean value) {
      __isset_vector[__STARTSEQ_ISSET_ID] = value;
    }

    public long getEndSeq() {
      return this.endSeq;
    }

    public void setEndSeq(long endSeq) {
      this.endSeq = endSeq;
      setEndSeqIsSet(true);
    }

    public void unsetEndSeq() {
      __isset_vector[__ENDSEQ_ISSET_ID] = false;
    }

    /** Returns true if field endSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetEndSeq() {
      return __isset_vector[__ENDSEQ_ISSET_ID];
    }

    public void setEndSeqIsSet(boolean value) {
      __isset_vector[__ENDSEQ_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessagesBySequenceNumber_args)
        return this.equals((getMessagesBySequenceNumber_args)that);
      return false;
    }

    public boolean equals(getMessagesBySequenceNumber_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      boolean this_present_messageBoxId = true && this.isSetMessageBoxId();
      boolean that_present_messageBoxId = true && that.isSetMessageBoxId();
      if (this_present_messageBoxId || that_present_messageBoxId) {
        if (!(this_present_messageBoxId && that_present_messageBoxId))
          return false;
        if (!this.messageBoxId.equals(that.messageBoxId))
          return false;
      }

      boolean this_present_startSeq = true;
      boolean that_present_startSeq = true;
      if (this_present_startSeq || that_present_startSeq) {
        if (!(this_present_startSeq && that_present_startSeq))
          return false;
        if (this.startSeq != that.startSeq)
          return false;
      }

      boolean this_present_endSeq = true;
      boolean that_present_endSeq = true;
      if (this_present_endSeq || that_present_endSeq) {
        if (!(this_present_endSeq && that_present_endSeq))
          return false;
        if (this.endSeq != that.endSeq)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getMessagesBySequenceNumber_args other = (getMessagesBySequenceNumber_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetChannelId(), other.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = TBaseHelper.compareTo(this.channelId, other.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMessageBoxId(), other.isSetMessageBoxId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageBoxId()) {
        lastComparison = TBaseHelper.compareTo(this.messageBoxId, other.messageBoxId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetStartSeq(), other.isSetStartSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartSeq()) {
        lastComparison = TBaseHelper.compareTo(this.startSeq, other.startSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetEndSeq(), other.isSetEndSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndSeq()) {
        lastComparison = TBaseHelper.compareTo(this.endSeq, other.endSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // CHANNEL_ID
            if (field.type == TType.STRING) {
              this.channelId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // MESSAGE_BOX_ID
            if (field.type == TType.STRING) {
              this.messageBoxId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // START_SEQ
            if (field.type == TType.I64) {
              this.startSeq = iprot.readI64();
              setStartSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // END_SEQ
            if (field.type == TType.I64) {
              this.endSeq = iprot.readI64();
              setEndSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.channelId != null) {
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeString(this.channelId);
        oprot.writeFieldEnd();
      }
      if (this.messageBoxId != null) {
        oprot.writeFieldBegin(MESSAGE_BOX_ID_FIELD_DESC);
        oprot.writeString(this.messageBoxId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_SEQ_FIELD_DESC);
      oprot.writeI64(this.startSeq);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_SEQ_FIELD_DESC);
      oprot.writeI64(this.endSeq);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getMessagesBySequenceNumber_args(");
      boolean first = true;

      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("messageBoxId:");
      if (this.messageBoxId == null) {
        sb.append("null");
      } else {
        sb.append(this.messageBoxId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startSeq:");
      sb.append(this.startSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endSeq:");
      sb.append(this.endSeq);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getMessagesBySequenceNumber_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getMessagesBySequenceNumber_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getMessagesBySequenceNumber_result() {
    }

    public getMessagesBySequenceNumber_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessagesBySequenceNumber_result(getMessagesBySequenceNumber_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          Message other_element = (Message)other_enum.nextElement();
          __this__success.addElement(new Message(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getMessagesBySequenceNumber_result deepCopy() {
      return new getMessagesBySequenceNumber_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(Message elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessagesBySequenceNumber_result)
        return this.equals((getMessagesBySequenceNumber_result)that);
      return false;
    }

    public boolean equals(getMessagesBySequenceNumber_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getMessagesBySequenceNumber_result other = (getMessagesBySequenceNumber_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list979 = iprot.readListBegin();
                this.success = new Vector(_list979.size);
                for (int _i980 = 0; _i980 < _list979.size; ++_i980)
                {
                  Message _elem981;
                  _elem981 = new Message();
                  _elem981.read(iprot);
                  this.success.addElement(_elem981);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter982_enum = this.success.elements(); _iter982_enum.hasMoreElements(); )           {
            Message _iter982 = (Message)_iter982_enum.nextElement();
            _iter982.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getMessagesBySequenceNumber_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNextMessages_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getNextMessages_args");

    private static final TField MESSAGE_BOX_ID_FIELD_DESC = new TField("messageBoxId", TType.STRING, (short)2);
    private static final TField START_SEQ_FIELD_DESC = new TField("startSeq", TType.I64, (short)3);
    private static final TField MESSAGES_COUNT_FIELD_DESC = new TField("messagesCount", TType.I32, (short)4);

    private String messageBoxId;
    private long startSeq;
    private int messagesCount;

    // isset id assignments
    private static final int __STARTSEQ_ISSET_ID = 0;
    private static final int __MESSAGESCOUNT_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public getNextMessages_args() {
    }

    public getNextMessages_args(
      String messageBoxId,
      long startSeq,
      int messagesCount)
    {
      this();
      this.messageBoxId = messageBoxId;
      this.startSeq = startSeq;
      setStartSeqIsSet(true);
      this.messagesCount = messagesCount;
      setMessagesCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNextMessages_args(getNextMessages_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetMessageBoxId()) {
        this.messageBoxId = other.messageBoxId;
      }
      this.startSeq = other.startSeq;
      this.messagesCount = other.messagesCount;
    }

    public getNextMessages_args deepCopy() {
      return new getNextMessages_args(this);
    }

    public void clear() {
      this.messageBoxId = null;
      setStartSeqIsSet(false);
      this.startSeq = 0;
      setMessagesCountIsSet(false);
      this.messagesCount = 0;
    }

    public String getMessageBoxId() {
      return this.messageBoxId;
    }

    public void setMessageBoxId(String messageBoxId) {
      this.messageBoxId = messageBoxId;
    }

    public void unsetMessageBoxId() {
      this.messageBoxId = null;
    }

    /** Returns true if field messageBoxId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageBoxId() {
      return this.messageBoxId != null;
    }

    public void setMessageBoxIdIsSet(boolean value) {
      if (!value) {
        this.messageBoxId = null;
      }
    }

    public long getStartSeq() {
      return this.startSeq;
    }

    public void setStartSeq(long startSeq) {
      this.startSeq = startSeq;
      setStartSeqIsSet(true);
    }

    public void unsetStartSeq() {
      __isset_vector[__STARTSEQ_ISSET_ID] = false;
    }

    /** Returns true if field startSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetStartSeq() {
      return __isset_vector[__STARTSEQ_ISSET_ID];
    }

    public void setStartSeqIsSet(boolean value) {
      __isset_vector[__STARTSEQ_ISSET_ID] = value;
    }

    public int getMessagesCount() {
      return this.messagesCount;
    }

    public void setMessagesCount(int messagesCount) {
      this.messagesCount = messagesCount;
      setMessagesCountIsSet(true);
    }

    public void unsetMessagesCount() {
      __isset_vector[__MESSAGESCOUNT_ISSET_ID] = false;
    }

    /** Returns true if field messagesCount is set (has been assigned a value) and false otherwise */
    public boolean isSetMessagesCount() {
      return __isset_vector[__MESSAGESCOUNT_ISSET_ID];
    }

    public void setMessagesCountIsSet(boolean value) {
      __isset_vector[__MESSAGESCOUNT_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNextMessages_args)
        return this.equals((getNextMessages_args)that);
      return false;
    }

    public boolean equals(getNextMessages_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_messageBoxId = true && this.isSetMessageBoxId();
      boolean that_present_messageBoxId = true && that.isSetMessageBoxId();
      if (this_present_messageBoxId || that_present_messageBoxId) {
        if (!(this_present_messageBoxId && that_present_messageBoxId))
          return false;
        if (!this.messageBoxId.equals(that.messageBoxId))
          return false;
      }

      boolean this_present_startSeq = true;
      boolean that_present_startSeq = true;
      if (this_present_startSeq || that_present_startSeq) {
        if (!(this_present_startSeq && that_present_startSeq))
          return false;
        if (this.startSeq != that.startSeq)
          return false;
      }

      boolean this_present_messagesCount = true;
      boolean that_present_messagesCount = true;
      if (this_present_messagesCount || that_present_messagesCount) {
        if (!(this_present_messagesCount && that_present_messagesCount))
          return false;
        if (this.messagesCount != that.messagesCount)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getNextMessages_args other = (getNextMessages_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetMessageBoxId(), other.isSetMessageBoxId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageBoxId()) {
        lastComparison = TBaseHelper.compareTo(this.messageBoxId, other.messageBoxId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetStartSeq(), other.isSetStartSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartSeq()) {
        lastComparison = TBaseHelper.compareTo(this.startSeq, other.startSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMessagesCount(), other.isSetMessagesCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessagesCount()) {
        lastComparison = TBaseHelper.compareTo(this.messagesCount, other.messagesCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // MESSAGE_BOX_ID
            if (field.type == TType.STRING) {
              this.messageBoxId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // START_SEQ
            if (field.type == TType.I64) {
              this.startSeq = iprot.readI64();
              setStartSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // MESSAGES_COUNT
            if (field.type == TType.I32) {
              this.messagesCount = iprot.readI32();
              setMessagesCountIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.messageBoxId != null) {
        oprot.writeFieldBegin(MESSAGE_BOX_ID_FIELD_DESC);
        oprot.writeString(this.messageBoxId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_SEQ_FIELD_DESC);
      oprot.writeI64(this.startSeq);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MESSAGES_COUNT_FIELD_DESC);
      oprot.writeI32(this.messagesCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getNextMessages_args(");
      boolean first = true;

      sb.append("messageBoxId:");
      if (this.messageBoxId == null) {
        sb.append("null");
      } else {
        sb.append(this.messageBoxId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startSeq:");
      sb.append(this.startSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("messagesCount:");
      sb.append(this.messagesCount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNextMessages_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getNextMessages_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getNextMessages_result() {
    }

    public getNextMessages_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNextMessages_result(getNextMessages_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          Message other_element = (Message)other_enum.nextElement();
          __this__success.addElement(new Message(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getNextMessages_result deepCopy() {
      return new getNextMessages_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(Message elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNextMessages_result)
        return this.equals((getNextMessages_result)that);
      return false;
    }

    public boolean equals(getNextMessages_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getNextMessages_result other = (getNextMessages_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list983 = iprot.readListBegin();
                this.success = new Vector(_list983.size);
                for (int _i984 = 0; _i984 < _list983.size; ++_i984)
                {
                  Message _elem985;
                  _elem985 = new Message();
                  _elem985.read(iprot);
                  this.success.addElement(_elem985);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter986_enum = this.success.elements(); _iter986_enum.hasMoreElements(); )           {
            Message _iter986 = (Message)_iter986_enum.nextElement();
            _iter986.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getNextMessages_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNotificationPolicy_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getNotificationPolicy_args");

    private static final TField CARRIER_FIELD_DESC = new TField("carrier", TType.I32, (short)2);

    private CarrierCode carrier;

    // isset id assignments

    public getNotificationPolicy_args() {
    }

    public getNotificationPolicy_args(
      CarrierCode carrier)
    {
      this();
      this.carrier = carrier;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNotificationPolicy_args(getNotificationPolicy_args other) {
      if (other.isSetCarrier()) {
        this.carrier = other.carrier;
      }
    }

    public getNotificationPolicy_args deepCopy() {
      return new getNotificationPolicy_args(this);
    }

    public void clear() {
      this.carrier = null;
    }

    /**
     * 
     * @see CarrierCode
     */
    public CarrierCode getCarrier() {
      return this.carrier;
    }

    /**
     * 
     * @see CarrierCode
     */
    public void setCarrier(CarrierCode carrier) {
      this.carrier = carrier;
    }

    public void unsetCarrier() {
      this.carrier = null;
    }

    /** Returns true if field carrier is set (has been assigned a value) and false otherwise */
    public boolean isSetCarrier() {
      return this.carrier != null;
    }

    public void setCarrierIsSet(boolean value) {
      if (!value) {
        this.carrier = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNotificationPolicy_args)
        return this.equals((getNotificationPolicy_args)that);
      return false;
    }

    public boolean equals(getNotificationPolicy_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_carrier = true && this.isSetCarrier();
      boolean that_present_carrier = true && that.isSetCarrier();
      if (this_present_carrier || that_present_carrier) {
        if (!(this_present_carrier && that_present_carrier))
          return false;
        if (!this.carrier.equals(that.carrier))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getNotificationPolicy_args other = (getNotificationPolicy_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetCarrier(), other.isSetCarrier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCarrier()) {
        lastComparison = TBaseHelper.compareTo(this.carrier, other.carrier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // CARRIER
            if (field.type == TType.I32) {
              this.carrier = CarrierCode.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.carrier != null) {
        oprot.writeFieldBegin(CARRIER_FIELD_DESC);
        oprot.writeI32(this.carrier.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getNotificationPolicy_args(");
      boolean first = true;

      sb.append("carrier:");
      if (this.carrier == null) {
        sb.append("null");
      } else {
        sb.append(this.carrier);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNotificationPolicy_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getNotificationPolicy_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getNotificationPolicy_result() {
    }

    public getNotificationPolicy_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNotificationPolicy_result(getNotificationPolicy_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          NotificationType other_element = (NotificationType)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getNotificationPolicy_result deepCopy() {
      return new getNotificationPolicy_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(NotificationType elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNotificationPolicy_result)
        return this.equals((getNotificationPolicy_result)that);
      return false;
    }

    public boolean equals(getNotificationPolicy_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getNotificationPolicy_result other = (getNotificationPolicy_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list987 = iprot.readListBegin();
                this.success = new Vector(_list987.size);
                for (int _i988 = 0; _i988 < _list987.size; ++_i988)
                {
                  NotificationType _elem989;
                  _elem989 = NotificationType.findByValue(iprot.readI32());
                  this.success.addElement(_elem989);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I32, this.success.size()));
          for (Enumeration _iter990_enum = this.success.elements(); _iter990_enum.hasMoreElements(); )           {
            NotificationType _iter990 = (NotificationType)_iter990_enum.nextElement();
            oprot.writeI32(_iter990.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getNotificationPolicy_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPreviousMessages_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPreviousMessages_args");

    private static final TField MESSAGE_BOX_ID_FIELD_DESC = new TField("messageBoxId", TType.STRING, (short)2);
    private static final TField END_SEQ_FIELD_DESC = new TField("endSeq", TType.I64, (short)3);
    private static final TField MESSAGES_COUNT_FIELD_DESC = new TField("messagesCount", TType.I32, (short)4);

    private String messageBoxId;
    private long endSeq;
    private int messagesCount;

    // isset id assignments
    private static final int __ENDSEQ_ISSET_ID = 0;
    private static final int __MESSAGESCOUNT_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public getPreviousMessages_args() {
    }

    public getPreviousMessages_args(
      String messageBoxId,
      long endSeq,
      int messagesCount)
    {
      this();
      this.messageBoxId = messageBoxId;
      this.endSeq = endSeq;
      setEndSeqIsSet(true);
      this.messagesCount = messagesCount;
      setMessagesCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPreviousMessages_args(getPreviousMessages_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetMessageBoxId()) {
        this.messageBoxId = other.messageBoxId;
      }
      this.endSeq = other.endSeq;
      this.messagesCount = other.messagesCount;
    }

    public getPreviousMessages_args deepCopy() {
      return new getPreviousMessages_args(this);
    }

    public void clear() {
      this.messageBoxId = null;
      setEndSeqIsSet(false);
      this.endSeq = 0;
      setMessagesCountIsSet(false);
      this.messagesCount = 0;
    }

    public String getMessageBoxId() {
      return this.messageBoxId;
    }

    public void setMessageBoxId(String messageBoxId) {
      this.messageBoxId = messageBoxId;
    }

    public void unsetMessageBoxId() {
      this.messageBoxId = null;
    }

    /** Returns true if field messageBoxId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageBoxId() {
      return this.messageBoxId != null;
    }

    public void setMessageBoxIdIsSet(boolean value) {
      if (!value) {
        this.messageBoxId = null;
      }
    }

    public long getEndSeq() {
      return this.endSeq;
    }

    public void setEndSeq(long endSeq) {
      this.endSeq = endSeq;
      setEndSeqIsSet(true);
    }

    public void unsetEndSeq() {
      __isset_vector[__ENDSEQ_ISSET_ID] = false;
    }

    /** Returns true if field endSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetEndSeq() {
      return __isset_vector[__ENDSEQ_ISSET_ID];
    }

    public void setEndSeqIsSet(boolean value) {
      __isset_vector[__ENDSEQ_ISSET_ID] = value;
    }

    public int getMessagesCount() {
      return this.messagesCount;
    }

    public void setMessagesCount(int messagesCount) {
      this.messagesCount = messagesCount;
      setMessagesCountIsSet(true);
    }

    public void unsetMessagesCount() {
      __isset_vector[__MESSAGESCOUNT_ISSET_ID] = false;
    }

    /** Returns true if field messagesCount is set (has been assigned a value) and false otherwise */
    public boolean isSetMessagesCount() {
      return __isset_vector[__MESSAGESCOUNT_ISSET_ID];
    }

    public void setMessagesCountIsSet(boolean value) {
      __isset_vector[__MESSAGESCOUNT_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPreviousMessages_args)
        return this.equals((getPreviousMessages_args)that);
      return false;
    }

    public boolean equals(getPreviousMessages_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_messageBoxId = true && this.isSetMessageBoxId();
      boolean that_present_messageBoxId = true && that.isSetMessageBoxId();
      if (this_present_messageBoxId || that_present_messageBoxId) {
        if (!(this_present_messageBoxId && that_present_messageBoxId))
          return false;
        if (!this.messageBoxId.equals(that.messageBoxId))
          return false;
      }

      boolean this_present_endSeq = true;
      boolean that_present_endSeq = true;
      if (this_present_endSeq || that_present_endSeq) {
        if (!(this_present_endSeq && that_present_endSeq))
          return false;
        if (this.endSeq != that.endSeq)
          return false;
      }

      boolean this_present_messagesCount = true;
      boolean that_present_messagesCount = true;
      if (this_present_messagesCount || that_present_messagesCount) {
        if (!(this_present_messagesCount && that_present_messagesCount))
          return false;
        if (this.messagesCount != that.messagesCount)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPreviousMessages_args other = (getPreviousMessages_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetMessageBoxId(), other.isSetMessageBoxId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageBoxId()) {
        lastComparison = TBaseHelper.compareTo(this.messageBoxId, other.messageBoxId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetEndSeq(), other.isSetEndSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndSeq()) {
        lastComparison = TBaseHelper.compareTo(this.endSeq, other.endSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMessagesCount(), other.isSetMessagesCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessagesCount()) {
        lastComparison = TBaseHelper.compareTo(this.messagesCount, other.messagesCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // MESSAGE_BOX_ID
            if (field.type == TType.STRING) {
              this.messageBoxId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // END_SEQ
            if (field.type == TType.I64) {
              this.endSeq = iprot.readI64();
              setEndSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // MESSAGES_COUNT
            if (field.type == TType.I32) {
              this.messagesCount = iprot.readI32();
              setMessagesCountIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.messageBoxId != null) {
        oprot.writeFieldBegin(MESSAGE_BOX_ID_FIELD_DESC);
        oprot.writeString(this.messageBoxId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(END_SEQ_FIELD_DESC);
      oprot.writeI64(this.endSeq);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MESSAGES_COUNT_FIELD_DESC);
      oprot.writeI32(this.messagesCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPreviousMessages_args(");
      boolean first = true;

      sb.append("messageBoxId:");
      if (this.messageBoxId == null) {
        sb.append("null");
      } else {
        sb.append(this.messageBoxId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("endSeq:");
      sb.append(this.endSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("messagesCount:");
      sb.append(this.messagesCount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPreviousMessages_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPreviousMessages_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getPreviousMessages_result() {
    }

    public getPreviousMessages_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPreviousMessages_result(getPreviousMessages_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          Message other_element = (Message)other_enum.nextElement();
          __this__success.addElement(new Message(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getPreviousMessages_result deepCopy() {
      return new getPreviousMessages_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(Message elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPreviousMessages_result)
        return this.equals((getPreviousMessages_result)that);
      return false;
    }

    public boolean equals(getPreviousMessages_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPreviousMessages_result other = (getPreviousMessages_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list991 = iprot.readListBegin();
                this.success = new Vector(_list991.size);
                for (int _i992 = 0; _i992 < _list991.size; ++_i992)
                {
                  Message _elem993;
                  _elem993 = new Message();
                  _elem993.read(iprot);
                  this.success.addElement(_elem993);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter994_enum = this.success.elements(); _iter994_enum.hasMoreElements(); )           {
            Message _iter994 = (Message)_iter994_enum.nextElement();
            _iter994.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPreviousMessages_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getProfile_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getProfile_args");


    public getProfile_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfile_args(getProfile_args other) {
    }

    public getProfile_args deepCopy() {
      return new getProfile_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfile_args)
        return this.equals((getProfile_args)that);
      return false;
    }

    public boolean equals(getProfile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getProfile_args other = (getProfile_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getProfile_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getProfile_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getProfile_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Profile success;
    private TalkException e;

    // isset id assignments

    public getProfile_result() {
    }

    public getProfile_result(
      Profile success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfile_result(getProfile_result other) {
      if (other.isSetSuccess()) {
        this.success = new Profile(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getProfile_result deepCopy() {
      return new getProfile_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Profile getSuccess() {
      return this.success;
    }

    public void setSuccess(Profile success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfile_result)
        return this.equals((getProfile_result)that);
      return false;
    }

    public boolean equals(getProfile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getProfile_result other = (getProfile_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Profile();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getProximityMatchCandidateList_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getProximityMatchCandidateList_args");

    private static final TField SESSION_ID_FIELD_DESC = new TField("sessionId", TType.STRING, (short)2);

    private String sessionId;

    // isset id assignments

    public getProximityMatchCandidateList_args() {
    }

    public getProximityMatchCandidateList_args(
      String sessionId)
    {
      this();
      this.sessionId = sessionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProximityMatchCandidateList_args(getProximityMatchCandidateList_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
    }

    public getProximityMatchCandidateList_args deepCopy() {
      return new getProximityMatchCandidateList_args(this);
    }

    public void clear() {
      this.sessionId = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public void setSessionId(String sessionId) {
      this.sessionId = sessionId;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProximityMatchCandidateList_args)
        return this.equals((getProximityMatchCandidateList_args)that);
      return false;
    }

    public boolean equals(getProximityMatchCandidateList_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getProximityMatchCandidateList_args other = (getProximityMatchCandidateList_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSessionId(), other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // SESSION_ID
            if (field.type == TType.STRING) {
              this.sessionId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.sessionId != null) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeString(this.sessionId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getProximityMatchCandidateList_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getProximityMatchCandidateList_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getProximityMatchCandidateList_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private ProximityMatchCandidateResult success;
    private TalkException e;

    // isset id assignments

    public getProximityMatchCandidateList_result() {
    }

    public getProximityMatchCandidateList_result(
      ProximityMatchCandidateResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProximityMatchCandidateList_result(getProximityMatchCandidateList_result other) {
      if (other.isSetSuccess()) {
        this.success = new ProximityMatchCandidateResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getProximityMatchCandidateList_result deepCopy() {
      return new getProximityMatchCandidateList_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ProximityMatchCandidateResult getSuccess() {
      return this.success;
    }

    public void setSuccess(ProximityMatchCandidateResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProximityMatchCandidateList_result)
        return this.equals((getProximityMatchCandidateList_result)that);
      return false;
    }

    public boolean equals(getProximityMatchCandidateList_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getProximityMatchCandidateList_result other = (getProximityMatchCandidateList_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new ProximityMatchCandidateResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getProximityMatchCandidateList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getProximityMatchCandidates_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getProximityMatchCandidates_args");

    private static final TField SESSION_ID_FIELD_DESC = new TField("sessionId", TType.STRING, (short)2);

    private String sessionId;

    // isset id assignments

    public getProximityMatchCandidates_args() {
    }

    public getProximityMatchCandidates_args(
      String sessionId)
    {
      this();
      this.sessionId = sessionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProximityMatchCandidates_args(getProximityMatchCandidates_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
    }

    public getProximityMatchCandidates_args deepCopy() {
      return new getProximityMatchCandidates_args(this);
    }

    public void clear() {
      this.sessionId = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public void setSessionId(String sessionId) {
      this.sessionId = sessionId;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProximityMatchCandidates_args)
        return this.equals((getProximityMatchCandidates_args)that);
      return false;
    }

    public boolean equals(getProximityMatchCandidates_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getProximityMatchCandidates_args other = (getProximityMatchCandidates_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSessionId(), other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // SESSION_ID
            if (field.type == TType.STRING) {
              this.sessionId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.sessionId != null) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeString(this.sessionId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getProximityMatchCandidates_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getProximityMatchCandidates_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getProximityMatchCandidates_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.SET, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Hashtable success;
    private TalkException e;

    // isset id assignments

    public getProximityMatchCandidates_result() {
    }

    public getProximityMatchCandidates_result(
      Hashtable success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProximityMatchCandidates_result(getProximityMatchCandidates_result other) {
      if (other.isSetSuccess()) {
        Hashtable __this__success = new Hashtable();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          Contact other_element = (Contact)other_enum.nextElement();
          __this__success.addElement(new Contact(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getProximityMatchCandidates_result deepCopy() {
      return new getProximityMatchCandidates_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(Contact elem) {
      if (this.success == null) {
        this.success = new Hashtable();
      }
      this.success.put(elem, elem);
    }

    public Hashtable getSuccess() {
      return this.success;
    }

    public void setSuccess(Hashtable success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProximityMatchCandidates_result)
        return this.equals((getProximityMatchCandidates_result)that);
      return false;
    }

    public boolean equals(getProximityMatchCandidates_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getProximityMatchCandidates_result other = (getProximityMatchCandidates_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.SET) {
              {
                TSet _set995 = iprot.readSetBegin();
                this.success = new Hashtable(2*_set995.size);
                for (int _i996 = 0; _i996 < _set995.size; ++_i996)
                {
                  Contact _elem997;
                  _elem997 = new Contact();
                  _elem997.read(iprot);
                  this.success.put(_elem997, _elem997);
                }
                iprot.readSetEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeSetBegin(new TSet(TType.STRUCT, this.success.size()));
          for (Enumeration _iter998_enum = this.success.keys(); _iter998_enum.hasMoreElements(); )           {
            Contact _iter998 = (Contact)_iter998_enum.nextElement();
            _iter998.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getProximityMatchCandidates_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getRecentMessages_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getRecentMessages_args");

    private static final TField MESSAGE_BOX_ID_FIELD_DESC = new TField("messageBoxId", TType.STRING, (short)2);
    private static final TField MESSAGES_COUNT_FIELD_DESC = new TField("messagesCount", TType.I32, (short)3);

    private String messageBoxId;
    private int messagesCount;

    // isset id assignments
    private static final int __MESSAGESCOUNT_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getRecentMessages_args() {
    }

    public getRecentMessages_args(
      String messageBoxId,
      int messagesCount)
    {
      this();
      this.messageBoxId = messageBoxId;
      this.messagesCount = messagesCount;
      setMessagesCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecentMessages_args(getRecentMessages_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetMessageBoxId()) {
        this.messageBoxId = other.messageBoxId;
      }
      this.messagesCount = other.messagesCount;
    }

    public getRecentMessages_args deepCopy() {
      return new getRecentMessages_args(this);
    }

    public void clear() {
      this.messageBoxId = null;
      setMessagesCountIsSet(false);
      this.messagesCount = 0;
    }

    public String getMessageBoxId() {
      return this.messageBoxId;
    }

    public void setMessageBoxId(String messageBoxId) {
      this.messageBoxId = messageBoxId;
    }

    public void unsetMessageBoxId() {
      this.messageBoxId = null;
    }

    /** Returns true if field messageBoxId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageBoxId() {
      return this.messageBoxId != null;
    }

    public void setMessageBoxIdIsSet(boolean value) {
      if (!value) {
        this.messageBoxId = null;
      }
    }

    public int getMessagesCount() {
      return this.messagesCount;
    }

    public void setMessagesCount(int messagesCount) {
      this.messagesCount = messagesCount;
      setMessagesCountIsSet(true);
    }

    public void unsetMessagesCount() {
      __isset_vector[__MESSAGESCOUNT_ISSET_ID] = false;
    }

    /** Returns true if field messagesCount is set (has been assigned a value) and false otherwise */
    public boolean isSetMessagesCount() {
      return __isset_vector[__MESSAGESCOUNT_ISSET_ID];
    }

    public void setMessagesCountIsSet(boolean value) {
      __isset_vector[__MESSAGESCOUNT_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecentMessages_args)
        return this.equals((getRecentMessages_args)that);
      return false;
    }

    public boolean equals(getRecentMessages_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_messageBoxId = true && this.isSetMessageBoxId();
      boolean that_present_messageBoxId = true && that.isSetMessageBoxId();
      if (this_present_messageBoxId || that_present_messageBoxId) {
        if (!(this_present_messageBoxId && that_present_messageBoxId))
          return false;
        if (!this.messageBoxId.equals(that.messageBoxId))
          return false;
      }

      boolean this_present_messagesCount = true;
      boolean that_present_messagesCount = true;
      if (this_present_messagesCount || that_present_messagesCount) {
        if (!(this_present_messagesCount && that_present_messagesCount))
          return false;
        if (this.messagesCount != that.messagesCount)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getRecentMessages_args other = (getRecentMessages_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetMessageBoxId(), other.isSetMessageBoxId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageBoxId()) {
        lastComparison = TBaseHelper.compareTo(this.messageBoxId, other.messageBoxId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMessagesCount(), other.isSetMessagesCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessagesCount()) {
        lastComparison = TBaseHelper.compareTo(this.messagesCount, other.messagesCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // MESSAGE_BOX_ID
            if (field.type == TType.STRING) {
              this.messageBoxId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // MESSAGES_COUNT
            if (field.type == TType.I32) {
              this.messagesCount = iprot.readI32();
              setMessagesCountIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.messageBoxId != null) {
        oprot.writeFieldBegin(MESSAGE_BOX_ID_FIELD_DESC);
        oprot.writeString(this.messageBoxId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MESSAGES_COUNT_FIELD_DESC);
      oprot.writeI32(this.messagesCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getRecentMessages_args(");
      boolean first = true;

      sb.append("messageBoxId:");
      if (this.messageBoxId == null) {
        sb.append("null");
      } else {
        sb.append(this.messageBoxId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("messagesCount:");
      sb.append(this.messagesCount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getRecentMessages_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getRecentMessages_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getRecentMessages_result() {
    }

    public getRecentMessages_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecentMessages_result(getRecentMessages_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          Message other_element = (Message)other_enum.nextElement();
          __this__success.addElement(new Message(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getRecentMessages_result deepCopy() {
      return new getRecentMessages_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(Message elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecentMessages_result)
        return this.equals((getRecentMessages_result)that);
      return false;
    }

    public boolean equals(getRecentMessages_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getRecentMessages_result other = (getRecentMessages_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list999 = iprot.readListBegin();
                this.success = new Vector(_list999.size);
                for (int _i1000 = 0; _i1000 < _list999.size; ++_i1000)
                {
                  Message _elem1001;
                  _elem1001 = new Message();
                  _elem1001.read(iprot);
                  this.success.addElement(_elem1001);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter1002_enum = this.success.elements(); _iter1002_enum.hasMoreElements(); )           {
            Message _iter1002 = (Message)_iter1002_enum.nextElement();
            _iter1002.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getRecentMessages_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getRecommendationIds_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getRecommendationIds_args");


    public getRecommendationIds_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecommendationIds_args(getRecommendationIds_args other) {
    }

    public getRecommendationIds_args deepCopy() {
      return new getRecommendationIds_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecommendationIds_args)
        return this.equals((getRecommendationIds_args)that);
      return false;
    }

    public boolean equals(getRecommendationIds_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getRecommendationIds_args other = (getRecommendationIds_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getRecommendationIds_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getRecommendationIds_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getRecommendationIds_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getRecommendationIds_result() {
    }

    public getRecommendationIds_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecommendationIds_result(getRecommendationIds_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getRecommendationIds_result deepCopy() {
      return new getRecommendationIds_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecommendationIds_result)
        return this.equals((getRecommendationIds_result)that);
      return false;
    }

    public boolean equals(getRecommendationIds_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getRecommendationIds_result other = (getRecommendationIds_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list1003 = iprot.readListBegin();
                this.success = new Vector(_list1003.size);
                for (int _i1004 = 0; _i1004 < _list1003.size; ++_i1004)
                {
                  String _elem1005;
                  _elem1005 = iprot.readString();
                  this.success.addElement(_elem1005);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter1006_enum = this.success.elements(); _iter1006_enum.hasMoreElements(); )           {
            String _iter1006 = (String)_iter1006_enum.nextElement();
            oprot.writeString(_iter1006);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getRecommendationIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getRoom_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getRoom_args");

    private static final TField ROOM_ID_FIELD_DESC = new TField("roomId", TType.STRING, (short)2);

    private String roomId;

    // isset id assignments

    public getRoom_args() {
    }

    public getRoom_args(
      String roomId)
    {
      this();
      this.roomId = roomId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRoom_args(getRoom_args other) {
      if (other.isSetRoomId()) {
        this.roomId = other.roomId;
      }
    }

    public getRoom_args deepCopy() {
      return new getRoom_args(this);
    }

    public void clear() {
      this.roomId = null;
    }

    public String getRoomId() {
      return this.roomId;
    }

    public void setRoomId(String roomId) {
      this.roomId = roomId;
    }

    public void unsetRoomId() {
      this.roomId = null;
    }

    /** Returns true if field roomId is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomId() {
      return this.roomId != null;
    }

    public void setRoomIdIsSet(boolean value) {
      if (!value) {
        this.roomId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRoom_args)
        return this.equals((getRoom_args)that);
      return false;
    }

    public boolean equals(getRoom_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_roomId = true && this.isSetRoomId();
      boolean that_present_roomId = true && that.isSetRoomId();
      if (this_present_roomId || that_present_roomId) {
        if (!(this_present_roomId && that_present_roomId))
          return false;
        if (!this.roomId.equals(that.roomId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getRoom_args other = (getRoom_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRoomId(), other.isSetRoomId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomId()) {
        lastComparison = TBaseHelper.compareTo(this.roomId, other.roomId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // ROOM_ID
            if (field.type == TType.STRING) {
              this.roomId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.roomId != null) {
        oprot.writeFieldBegin(ROOM_ID_FIELD_DESC);
        oprot.writeString(this.roomId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getRoom_args(");
      boolean first = true;

      sb.append("roomId:");
      if (this.roomId == null) {
        sb.append("null");
      } else {
        sb.append(this.roomId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getRoom_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getRoom_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Room success;
    private TalkException e;

    // isset id assignments

    public getRoom_result() {
    }

    public getRoom_result(
      Room success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRoom_result(getRoom_result other) {
      if (other.isSetSuccess()) {
        this.success = new Room(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getRoom_result deepCopy() {
      return new getRoom_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Room getSuccess() {
      return this.success;
    }

    public void setSuccess(Room success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRoom_result)
        return this.equals((getRoom_result)that);
      return false;
    }

    public boolean equals(getRoom_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getRoom_result other = (getRoom_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Room();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getRoom_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getRSAKeyInfo_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getRSAKeyInfo_args");

    private static final TField PROVIDER_FIELD_DESC = new TField("provider", TType.I32, (short)2);

    private IdentityProvider provider;

    // isset id assignments

    public getRSAKeyInfo_args() {
    }

    public getRSAKeyInfo_args(
      IdentityProvider provider)
    {
      this();
      this.provider = provider;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRSAKeyInfo_args(getRSAKeyInfo_args other) {
      if (other.isSetProvider()) {
        this.provider = other.provider;
      }
    }

    public getRSAKeyInfo_args deepCopy() {
      return new getRSAKeyInfo_args(this);
    }

    public void clear() {
      this.provider = null;
    }

    /**
     * 
     * @see IdentityProvider
     */
    public IdentityProvider getProvider() {
      return this.provider;
    }

    /**
     * 
     * @see IdentityProvider
     */
    public void setProvider(IdentityProvider provider) {
      this.provider = provider;
    }

    public void unsetProvider() {
      this.provider = null;
    }

    /** Returns true if field provider is set (has been assigned a value) and false otherwise */
    public boolean isSetProvider() {
      return this.provider != null;
    }

    public void setProviderIsSet(boolean value) {
      if (!value) {
        this.provider = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRSAKeyInfo_args)
        return this.equals((getRSAKeyInfo_args)that);
      return false;
    }

    public boolean equals(getRSAKeyInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_provider = true && this.isSetProvider();
      boolean that_present_provider = true && that.isSetProvider();
      if (this_present_provider || that_present_provider) {
        if (!(this_present_provider && that_present_provider))
          return false;
        if (!this.provider.equals(that.provider))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getRSAKeyInfo_args other = (getRSAKeyInfo_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetProvider(), other.isSetProvider());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProvider()) {
        lastComparison = TBaseHelper.compareTo(this.provider, other.provider);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // PROVIDER
            if (field.type == TType.I32) {
              this.provider = IdentityProvider.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.provider != null) {
        oprot.writeFieldBegin(PROVIDER_FIELD_DESC);
        oprot.writeI32(this.provider.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getRSAKeyInfo_args(");
      boolean first = true;

      sb.append("provider:");
      if (this.provider == null) {
        sb.append("null");
      } else {
        sb.append(this.provider);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getRSAKeyInfo_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getRSAKeyInfo_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private RSAKey success;
    private TalkException e;

    // isset id assignments

    public getRSAKeyInfo_result() {
    }

    public getRSAKeyInfo_result(
      RSAKey success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRSAKeyInfo_result(getRSAKeyInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new RSAKey(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getRSAKeyInfo_result deepCopy() {
      return new getRSAKeyInfo_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public RSAKey getSuccess() {
      return this.success;
    }

    public void setSuccess(RSAKey success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRSAKeyInfo_result)
        return this.equals((getRSAKeyInfo_result)that);
      return false;
    }

    public boolean equals(getRSAKeyInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getRSAKeyInfo_result other = (getRSAKeyInfo_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new RSAKey();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getRSAKeyInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getServerTime_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getServerTime_args");


    public getServerTime_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getServerTime_args(getServerTime_args other) {
    }

    public getServerTime_args deepCopy() {
      return new getServerTime_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getServerTime_args)
        return this.equals((getServerTime_args)that);
      return false;
    }

    public boolean equals(getServerTime_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getServerTime_args other = (getServerTime_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getServerTime_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getServerTime_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getServerTime_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I64, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private long success;
    private TalkException e;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getServerTime_result() {
    }

    public getServerTime_result(
      long success,
      TalkException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getServerTime_result(getServerTime_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getServerTime_result deepCopy() {
      return new getServerTime_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public void setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getServerTime_result)
        return this.equals((getServerTime_result)that);
      return false;
    }

    public boolean equals(getServerTime_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getServerTime_result other = (getServerTime_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getServerTime_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSessions_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getSessions_args");


    public getSessions_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSessions_args(getSessions_args other) {
    }

    public getSessions_args deepCopy() {
      return new getSessions_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSessions_args)
        return this.equals((getSessions_args)that);
      return false;
    }

    public boolean equals(getSessions_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getSessions_args other = (getSessions_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getSessions_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSessions_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getSessions_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getSessions_result() {
    }

    public getSessions_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSessions_result(getSessions_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          LoginSession other_element = (LoginSession)other_enum.nextElement();
          __this__success.addElement(new LoginSession(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getSessions_result deepCopy() {
      return new getSessions_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(LoginSession elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSessions_result)
        return this.equals((getSessions_result)that);
      return false;
    }

    public boolean equals(getSessions_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getSessions_result other = (getSessions_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list1007 = iprot.readListBegin();
                this.success = new Vector(_list1007.size);
                for (int _i1008 = 0; _i1008 < _list1007.size; ++_i1008)
                {
                  LoginSession _elem1009;
                  _elem1009 = new LoginSession();
                  _elem1009.read(iprot);
                  this.success.addElement(_elem1009);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter1010_enum = this.success.elements(); _iter1010_enum.hasMoreElements(); )           {
            LoginSession _iter1010 = (LoginSession)_iter1010_enum.nextElement();
            _iter1010.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getSessions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSettings_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getSettings_args");


    public getSettings_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSettings_args(getSettings_args other) {
    }

    public getSettings_args deepCopy() {
      return new getSettings_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSettings_args)
        return this.equals((getSettings_args)that);
      return false;
    }

    public boolean equals(getSettings_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getSettings_args other = (getSettings_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getSettings_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSettings_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getSettings_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Settings success;
    private TalkException e;

    // isset id assignments

    public getSettings_result() {
    }

    public getSettings_result(
      Settings success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSettings_result(getSettings_result other) {
      if (other.isSetSuccess()) {
        this.success = new Settings(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getSettings_result deepCopy() {
      return new getSettings_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Settings getSuccess() {
      return this.success;
    }

    public void setSuccess(Settings success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSettings_result)
        return this.equals((getSettings_result)that);
      return false;
    }

    public boolean equals(getSettings_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getSettings_result other = (getSettings_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Settings();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getSettings_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getGroupsV2_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getGroupsV2_args");

    private static final TField GROUP_IDS_FIELD_DESC = new TField("groupIds", TType.LIST, (short)2);

    private Vector groupIds;

    // isset id assignments

    public getGroupsV2_args() {
    }

    public getGroupsV2_args(
      Vector groupIds)
    {
      this();
      this.groupIds = groupIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroupsV2_args(getGroupsV2_args other) {
      if (other.isSetGroupIds()) {
        Vector __this__groupIds = new Vector();
        for (Enumeration other_enum = other.groupIds.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__groupIds.addElement(other_element);
        }
        this.groupIds = __this__groupIds;
      }
    }

    public getGroupsV2_args deepCopy() {
      return new getGroupsV2_args(this);
    }

    public void clear() {
      this.groupIds = null;
    }

    public int getGroupIdsSize() {
      return (this.groupIds == null) ? 0 : this.groupIds.size();
    }

    public Enumeration getGroupIdsEnumeration() {
      return (this.groupIds == null) ? null : this.groupIds.elements();
    }

    public void addToGroupIds(String elem) {
      if (this.groupIds == null) {
        this.groupIds = new Vector();
      }
      this.groupIds.addElement(elem);
    }

    public Vector getGroupIds() {
      return this.groupIds;
    }

    public void setGroupIds(Vector groupIds) {
      this.groupIds = groupIds;
    }

    public void unsetGroupIds() {
      this.groupIds = null;
    }

    /** Returns true if field groupIds is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupIds() {
      return this.groupIds != null;
    }

    public void setGroupIdsIsSet(boolean value) {
      if (!value) {
        this.groupIds = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroupsV2_args)
        return this.equals((getGroupsV2_args)that);
      return false;
    }

    public boolean equals(getGroupsV2_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_groupIds = true && this.isSetGroupIds();
      boolean that_present_groupIds = true && that.isSetGroupIds();
      if (this_present_groupIds || that_present_groupIds) {
        if (!(this_present_groupIds && that_present_groupIds))
          return false;
        if (!this.groupIds.equals(that.groupIds))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getGroupsV2_args other = (getGroupsV2_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetGroupIds(), other.isSetGroupIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupIds()) {
        lastComparison = TBaseHelper.compareTo(this.groupIds, other.groupIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // GROUP_IDS
            if (field.type == TType.LIST) {
              {
                TList _list1011 = iprot.readListBegin();
                this.groupIds = new Vector(_list1011.size);
                for (int _i1012 = 0; _i1012 < _list1011.size; ++_i1012)
                {
                  String _elem1013;
                  _elem1013 = iprot.readString();
                  this.groupIds.addElement(_elem1013);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.groupIds != null) {
        oprot.writeFieldBegin(GROUP_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.groupIds.size()));
          for (Enumeration _iter1014_enum = this.groupIds.elements(); _iter1014_enum.hasMoreElements(); )           {
            String _iter1014 = (String)_iter1014_enum.nextElement();
            oprot.writeString(_iter1014);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getGroupsV2_args(");
      boolean first = true;

      sb.append("groupIds:");
      if (this.groupIds == null) {
        sb.append("null");
      } else {
        sb.append(this.groupIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getGroupsV2_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getGroupsV2_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getGroupsV2_result() {
    }

    public getGroupsV2_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroupsV2_result(getGroupsV2_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          Group other_element = (Group)other_enum.nextElement();
          __this__success.addElement(new Group(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getGroupsV2_result deepCopy() {
      return new getGroupsV2_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(Group elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroupsV2_result)
        return this.equals((getGroupsV2_result)that);
      return false;
    }

    public boolean equals(getGroupsV2_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getGroupsV2_result other = (getGroupsV2_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list1015 = iprot.readListBegin();
                this.success = new Vector(_list1015.size);
                for (int _i1016 = 0; _i1016 < _list1015.size; ++_i1016)
                {
                  Group _elem1017;
                  _elem1017 = new Group();
                  _elem1017.read(iprot);
                  this.success.addElement(_elem1017);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter1018_enum = this.success.elements(); _iter1018_enum.hasMoreElements(); )           {
            Group _iter1018 = (Group)_iter1018_enum.nextElement();
            _iter1018.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getGroupsV2_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSettingsAttributes_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getSettingsAttributes_args");

    private static final TField ATTR_BITSET_FIELD_DESC = new TField("attrBitset", TType.I32, (short)2);

    private int attrBitset;

    // isset id assignments
    private static final int __ATTRBITSET_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getSettingsAttributes_args() {
    }

    public getSettingsAttributes_args(
      int attrBitset)
    {
      this();
      this.attrBitset = attrBitset;
      setAttrBitsetIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSettingsAttributes_args(getSettingsAttributes_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.attrBitset = other.attrBitset;
    }

    public getSettingsAttributes_args deepCopy() {
      return new getSettingsAttributes_args(this);
    }

    public void clear() {
      setAttrBitsetIsSet(false);
      this.attrBitset = 0;
    }

    public int getAttrBitset() {
      return this.attrBitset;
    }

    public void setAttrBitset(int attrBitset) {
      this.attrBitset = attrBitset;
      setAttrBitsetIsSet(true);
    }

    public void unsetAttrBitset() {
      __isset_vector[__ATTRBITSET_ISSET_ID] = false;
    }

    /** Returns true if field attrBitset is set (has been assigned a value) and false otherwise */
    public boolean isSetAttrBitset() {
      return __isset_vector[__ATTRBITSET_ISSET_ID];
    }

    public void setAttrBitsetIsSet(boolean value) {
      __isset_vector[__ATTRBITSET_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSettingsAttributes_args)
        return this.equals((getSettingsAttributes_args)that);
      return false;
    }

    public boolean equals(getSettingsAttributes_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_attrBitset = true;
      boolean that_present_attrBitset = true;
      if (this_present_attrBitset || that_present_attrBitset) {
        if (!(this_present_attrBitset && that_present_attrBitset))
          return false;
        if (this.attrBitset != that.attrBitset)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getSettingsAttributes_args other = (getSettingsAttributes_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAttrBitset(), other.isSetAttrBitset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttrBitset()) {
        lastComparison = TBaseHelper.compareTo(this.attrBitset, other.attrBitset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // ATTR_BITSET
            if (field.type == TType.I32) {
              this.attrBitset = iprot.readI32();
              setAttrBitsetIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ATTR_BITSET_FIELD_DESC);
      oprot.writeI32(this.attrBitset);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getSettingsAttributes_args(");
      boolean first = true;

      sb.append("attrBitset:");
      sb.append(this.attrBitset);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSettingsAttributes_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getSettingsAttributes_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Settings success;
    private TalkException e;

    // isset id assignments

    public getSettingsAttributes_result() {
    }

    public getSettingsAttributes_result(
      Settings success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSettingsAttributes_result(getSettingsAttributes_result other) {
      if (other.isSetSuccess()) {
        this.success = new Settings(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getSettingsAttributes_result deepCopy() {
      return new getSettingsAttributes_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Settings getSuccess() {
      return this.success;
    }

    public void setSuccess(Settings success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSettingsAttributes_result)
        return this.equals((getSettingsAttributes_result)that);
      return false;
    }

    public boolean equals(getSettingsAttributes_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getSettingsAttributes_result other = (getSettingsAttributes_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Settings();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getSettingsAttributes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSystemConfiguration_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getSystemConfiguration_args");


    public getSystemConfiguration_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSystemConfiguration_args(getSystemConfiguration_args other) {
    }

    public getSystemConfiguration_args deepCopy() {
      return new getSystemConfiguration_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSystemConfiguration_args)
        return this.equals((getSystemConfiguration_args)that);
      return false;
    }

    public boolean equals(getSystemConfiguration_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getSystemConfiguration_args other = (getSystemConfiguration_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getSystemConfiguration_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSystemConfiguration_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getSystemConfiguration_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private SystemConfiguration success;
    private TalkException e;

    // isset id assignments

    public getSystemConfiguration_result() {
    }

    public getSystemConfiguration_result(
      SystemConfiguration success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSystemConfiguration_result(getSystemConfiguration_result other) {
      if (other.isSetSuccess()) {
        this.success = new SystemConfiguration(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getSystemConfiguration_result deepCopy() {
      return new getSystemConfiguration_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public SystemConfiguration getSuccess() {
      return this.success;
    }

    public void setSuccess(SystemConfiguration success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSystemConfiguration_result)
        return this.equals((getSystemConfiguration_result)that);
      return false;
    }

    public boolean equals(getSystemConfiguration_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getSystemConfiguration_result other = (getSystemConfiguration_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new SystemConfiguration();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getSystemConfiguration_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUserTicket_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUserTicket_args");


    public getUserTicket_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserTicket_args(getUserTicket_args other) {
    }

    public getUserTicket_args deepCopy() {
      return new getUserTicket_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserTicket_args)
        return this.equals((getUserTicket_args)that);
      return false;
    }

    public boolean equals(getUserTicket_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUserTicket_args other = (getUserTicket_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUserTicket_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUserTicket_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUserTicket_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Ticket success;
    private TalkException e;

    // isset id assignments

    public getUserTicket_result() {
    }

    public getUserTicket_result(
      Ticket success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserTicket_result(getUserTicket_result other) {
      if (other.isSetSuccess()) {
        this.success = new Ticket(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getUserTicket_result deepCopy() {
      return new getUserTicket_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Ticket getSuccess() {
      return this.success;
    }

    public void setSuccess(Ticket success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserTicket_result)
        return this.equals((getUserTicket_result)that);
      return false;
    }

    public boolean equals(getUserTicket_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUserTicket_result other = (getUserTicket_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Ticket();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUserTicket_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getWapInvitation_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getWapInvitation_args");

    private static final TField INVITATION_HASH_FIELD_DESC = new TField("invitationHash", TType.STRING, (short)2);

    private String invitationHash;

    // isset id assignments

    public getWapInvitation_args() {
    }

    public getWapInvitation_args(
      String invitationHash)
    {
      this();
      this.invitationHash = invitationHash;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWapInvitation_args(getWapInvitation_args other) {
      if (other.isSetInvitationHash()) {
        this.invitationHash = other.invitationHash;
      }
    }

    public getWapInvitation_args deepCopy() {
      return new getWapInvitation_args(this);
    }

    public void clear() {
      this.invitationHash = null;
    }

    public String getInvitationHash() {
      return this.invitationHash;
    }

    public void setInvitationHash(String invitationHash) {
      this.invitationHash = invitationHash;
    }

    public void unsetInvitationHash() {
      this.invitationHash = null;
    }

    /** Returns true if field invitationHash is set (has been assigned a value) and false otherwise */
    public boolean isSetInvitationHash() {
      return this.invitationHash != null;
    }

    public void setInvitationHashIsSet(boolean value) {
      if (!value) {
        this.invitationHash = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWapInvitation_args)
        return this.equals((getWapInvitation_args)that);
      return false;
    }

    public boolean equals(getWapInvitation_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_invitationHash = true && this.isSetInvitationHash();
      boolean that_present_invitationHash = true && that.isSetInvitationHash();
      if (this_present_invitationHash || that_present_invitationHash) {
        if (!(this_present_invitationHash && that_present_invitationHash))
          return false;
        if (!this.invitationHash.equals(that.invitationHash))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getWapInvitation_args other = (getWapInvitation_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetInvitationHash(), other.isSetInvitationHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvitationHash()) {
        lastComparison = TBaseHelper.compareTo(this.invitationHash, other.invitationHash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // INVITATION_HASH
            if (field.type == TType.STRING) {
              this.invitationHash = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.invitationHash != null) {
        oprot.writeFieldBegin(INVITATION_HASH_FIELD_DESC);
        oprot.writeString(this.invitationHash);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getWapInvitation_args(");
      boolean first = true;

      sb.append("invitationHash:");
      if (this.invitationHash == null) {
        sb.append("null");
      } else {
        sb.append(this.invitationHash);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getWapInvitation_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getWapInvitation_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private WapInvitation success;
    private TalkException e;

    // isset id assignments

    public getWapInvitation_result() {
    }

    public getWapInvitation_result(
      WapInvitation success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWapInvitation_result(getWapInvitation_result other) {
      if (other.isSetSuccess()) {
        this.success = new WapInvitation(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getWapInvitation_result deepCopy() {
      return new getWapInvitation_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public WapInvitation getSuccess() {
      return this.success;
    }

    public void setSuccess(WapInvitation success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWapInvitation_result)
        return this.equals((getWapInvitation_result)that);
      return false;
    }

    public boolean equals(getWapInvitation_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getWapInvitation_result other = (getWapInvitation_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new WapInvitation();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getWapInvitation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class invalidateUserTicket_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("invalidateUserTicket_args");


    public invalidateUserTicket_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public invalidateUserTicket_args(invalidateUserTicket_args other) {
    }

    public invalidateUserTicket_args deepCopy() {
      return new invalidateUserTicket_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof invalidateUserTicket_args)
        return this.equals((invalidateUserTicket_args)that);
      return false;
    }

    public boolean equals(invalidateUserTicket_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      invalidateUserTicket_args other = (invalidateUserTicket_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("invalidateUserTicket_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class invalidateUserTicket_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("invalidateUserTicket_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public invalidateUserTicket_result() {
    }

    public invalidateUserTicket_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public invalidateUserTicket_result(invalidateUserTicket_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public invalidateUserTicket_result deepCopy() {
      return new invalidateUserTicket_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof invalidateUserTicket_result)
        return this.equals((invalidateUserTicket_result)that);
      return false;
    }

    public boolean equals(invalidateUserTicket_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      invalidateUserTicket_result other = (invalidateUserTicket_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("invalidateUserTicket_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class inviteFriendsBySms_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("inviteFriendsBySms_args");

    private static final TField PHONE_NUMBER_LIST_FIELD_DESC = new TField("phoneNumberList", TType.LIST, (short)2);

    private Vector phoneNumberList;

    // isset id assignments

    public inviteFriendsBySms_args() {
    }

    public inviteFriendsBySms_args(
      Vector phoneNumberList)
    {
      this();
      this.phoneNumberList = phoneNumberList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public inviteFriendsBySms_args(inviteFriendsBySms_args other) {
      if (other.isSetPhoneNumberList()) {
        Vector __this__phoneNumberList = new Vector();
        for (Enumeration other_enum = other.phoneNumberList.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__phoneNumberList.addElement(other_element);
        }
        this.phoneNumberList = __this__phoneNumberList;
      }
    }

    public inviteFriendsBySms_args deepCopy() {
      return new inviteFriendsBySms_args(this);
    }

    public void clear() {
      this.phoneNumberList = null;
    }

    public int getPhoneNumberListSize() {
      return (this.phoneNumberList == null) ? 0 : this.phoneNumberList.size();
    }

    public Enumeration getPhoneNumberListEnumeration() {
      return (this.phoneNumberList == null) ? null : this.phoneNumberList.elements();
    }

    public void addToPhoneNumberList(String elem) {
      if (this.phoneNumberList == null) {
        this.phoneNumberList = new Vector();
      }
      this.phoneNumberList.addElement(elem);
    }

    public Vector getPhoneNumberList() {
      return this.phoneNumberList;
    }

    public void setPhoneNumberList(Vector phoneNumberList) {
      this.phoneNumberList = phoneNumberList;
    }

    public void unsetPhoneNumberList() {
      this.phoneNumberList = null;
    }

    /** Returns true if field phoneNumberList is set (has been assigned a value) and false otherwise */
    public boolean isSetPhoneNumberList() {
      return this.phoneNumberList != null;
    }

    public void setPhoneNumberListIsSet(boolean value) {
      if (!value) {
        this.phoneNumberList = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof inviteFriendsBySms_args)
        return this.equals((inviteFriendsBySms_args)that);
      return false;
    }

    public boolean equals(inviteFriendsBySms_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_phoneNumberList = true && this.isSetPhoneNumberList();
      boolean that_present_phoneNumberList = true && that.isSetPhoneNumberList();
      if (this_present_phoneNumberList || that_present_phoneNumberList) {
        if (!(this_present_phoneNumberList && that_present_phoneNumberList))
          return false;
        if (!this.phoneNumberList.equals(that.phoneNumberList))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      inviteFriendsBySms_args other = (inviteFriendsBySms_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetPhoneNumberList(), other.isSetPhoneNumberList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPhoneNumberList()) {
        lastComparison = TBaseHelper.compareTo(this.phoneNumberList, other.phoneNumberList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // PHONE_NUMBER_LIST
            if (field.type == TType.LIST) {
              {
                TList _list1019 = iprot.readListBegin();
                this.phoneNumberList = new Vector(_list1019.size);
                for (int _i1020 = 0; _i1020 < _list1019.size; ++_i1020)
                {
                  String _elem1021;
                  _elem1021 = iprot.readString();
                  this.phoneNumberList.addElement(_elem1021);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.phoneNumberList != null) {
        oprot.writeFieldBegin(PHONE_NUMBER_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.phoneNumberList.size()));
          for (Enumeration _iter1022_enum = this.phoneNumberList.elements(); _iter1022_enum.hasMoreElements(); )           {
            String _iter1022 = (String)_iter1022_enum.nextElement();
            oprot.writeString(_iter1022);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("inviteFriendsBySms_args(");
      boolean first = true;

      sb.append("phoneNumberList:");
      if (this.phoneNumberList == null) {
        sb.append("null");
      } else {
        sb.append(this.phoneNumberList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class inviteFriendsBySms_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("inviteFriendsBySms_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public inviteFriendsBySms_result() {
    }

    public inviteFriendsBySms_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public inviteFriendsBySms_result(inviteFriendsBySms_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public inviteFriendsBySms_result deepCopy() {
      return new inviteFriendsBySms_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof inviteFriendsBySms_result)
        return this.equals((inviteFriendsBySms_result)that);
      return false;
    }

    public boolean equals(inviteFriendsBySms_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      inviteFriendsBySms_result other = (inviteFriendsBySms_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("inviteFriendsBySms_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class inviteIntoGroup_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("inviteIntoGroup_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField GROUP_ID_FIELD_DESC = new TField("groupId", TType.STRING, (short)2);
    private static final TField CONTACT_IDS_FIELD_DESC = new TField("contactIds", TType.LIST, (short)3);

    private int reqSeq;
    private String groupId;
    private Vector contactIds;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public inviteIntoGroup_args() {
    }

    public inviteIntoGroup_args(
      int reqSeq,
      String groupId,
      Vector contactIds)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.groupId = groupId;
      this.contactIds = contactIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public inviteIntoGroup_args(inviteIntoGroup_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetGroupId()) {
        this.groupId = other.groupId;
      }
      if (other.isSetContactIds()) {
        Vector __this__contactIds = new Vector();
        for (Enumeration other_enum = other.contactIds.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__contactIds.addElement(other_element);
        }
        this.contactIds = __this__contactIds;
      }
    }

    public inviteIntoGroup_args deepCopy() {
      return new inviteIntoGroup_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.groupId = null;
      this.contactIds = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public String getGroupId() {
      return this.groupId;
    }

    public void setGroupId(String groupId) {
      this.groupId = groupId;
    }

    public void unsetGroupId() {
      this.groupId = null;
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return this.groupId != null;
    }

    public void setGroupIdIsSet(boolean value) {
      if (!value) {
        this.groupId = null;
      }
    }

    public int getContactIdsSize() {
      return (this.contactIds == null) ? 0 : this.contactIds.size();
    }

    public Enumeration getContactIdsEnumeration() {
      return (this.contactIds == null) ? null : this.contactIds.elements();
    }

    public void addToContactIds(String elem) {
      if (this.contactIds == null) {
        this.contactIds = new Vector();
      }
      this.contactIds.addElement(elem);
    }

    public Vector getContactIds() {
      return this.contactIds;
    }

    public void setContactIds(Vector contactIds) {
      this.contactIds = contactIds;
    }

    public void unsetContactIds() {
      this.contactIds = null;
    }

    /** Returns true if field contactIds is set (has been assigned a value) and false otherwise */
    public boolean isSetContactIds() {
      return this.contactIds != null;
    }

    public void setContactIdsIsSet(boolean value) {
      if (!value) {
        this.contactIds = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof inviteIntoGroup_args)
        return this.equals((inviteIntoGroup_args)that);
      return false;
    }

    public boolean equals(inviteIntoGroup_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_groupId = true && this.isSetGroupId();
      boolean that_present_groupId = true && that.isSetGroupId();
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (!this.groupId.equals(that.groupId))
          return false;
      }

      boolean this_present_contactIds = true && this.isSetContactIds();
      boolean that_present_contactIds = true && that.isSetContactIds();
      if (this_present_contactIds || that_present_contactIds) {
        if (!(this_present_contactIds && that_present_contactIds))
          return false;
        if (!this.contactIds.equals(that.contactIds))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      inviteIntoGroup_args other = (inviteIntoGroup_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGroupId(), other.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = TBaseHelper.compareTo(this.groupId, other.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetContactIds(), other.isSetContactIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContactIds()) {
        lastComparison = TBaseHelper.compareTo(this.contactIds, other.contactIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GROUP_ID
            if (field.type == TType.STRING) {
              this.groupId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // CONTACT_IDS
            if (field.type == TType.LIST) {
              {
                TList _list1023 = iprot.readListBegin();
                this.contactIds = new Vector(_list1023.size);
                for (int _i1024 = 0; _i1024 < _list1023.size; ++_i1024)
                {
                  String _elem1025;
                  _elem1025 = iprot.readString();
                  this.contactIds.addElement(_elem1025);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.groupId != null) {
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeString(this.groupId);
        oprot.writeFieldEnd();
      }
      if (this.contactIds != null) {
        oprot.writeFieldBegin(CONTACT_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.contactIds.size()));
          for (Enumeration _iter1026_enum = this.contactIds.elements(); _iter1026_enum.hasMoreElements(); )           {
            String _iter1026 = (String)_iter1026_enum.nextElement();
            oprot.writeString(_iter1026);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("inviteIntoGroup_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("groupId:");
      if (this.groupId == null) {
        sb.append("null");
      } else {
        sb.append(this.groupId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contactIds:");
      if (this.contactIds == null) {
        sb.append("null");
      } else {
        sb.append(this.contactIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class inviteIntoGroup_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("inviteIntoGroup_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public inviteIntoGroup_result() {
    }

    public inviteIntoGroup_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public inviteIntoGroup_result(inviteIntoGroup_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public inviteIntoGroup_result deepCopy() {
      return new inviteIntoGroup_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof inviteIntoGroup_result)
        return this.equals((inviteIntoGroup_result)that);
      return false;
    }

    public boolean equals(inviteIntoGroup_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      inviteIntoGroup_result other = (inviteIntoGroup_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("inviteIntoGroup_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class inviteIntoRoom_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("inviteIntoRoom_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField ROOM_ID_FIELD_DESC = new TField("roomId", TType.STRING, (short)2);
    private static final TField CONTACT_IDS_FIELD_DESC = new TField("contactIds", TType.LIST, (short)3);

    private int reqSeq;
    private String roomId;
    private Vector contactIds;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public inviteIntoRoom_args() {
    }

    public inviteIntoRoom_args(
      int reqSeq,
      String roomId,
      Vector contactIds)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.roomId = roomId;
      this.contactIds = contactIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public inviteIntoRoom_args(inviteIntoRoom_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetRoomId()) {
        this.roomId = other.roomId;
      }
      if (other.isSetContactIds()) {
        Vector __this__contactIds = new Vector();
        for (Enumeration other_enum = other.contactIds.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__contactIds.addElement(other_element);
        }
        this.contactIds = __this__contactIds;
      }
    }

    public inviteIntoRoom_args deepCopy() {
      return new inviteIntoRoom_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.roomId = null;
      this.contactIds = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public String getRoomId() {
      return this.roomId;
    }

    public void setRoomId(String roomId) {
      this.roomId = roomId;
    }

    public void unsetRoomId() {
      this.roomId = null;
    }

    /** Returns true if field roomId is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomId() {
      return this.roomId != null;
    }

    public void setRoomIdIsSet(boolean value) {
      if (!value) {
        this.roomId = null;
      }
    }

    public int getContactIdsSize() {
      return (this.contactIds == null) ? 0 : this.contactIds.size();
    }

    public Enumeration getContactIdsEnumeration() {
      return (this.contactIds == null) ? null : this.contactIds.elements();
    }

    public void addToContactIds(String elem) {
      if (this.contactIds == null) {
        this.contactIds = new Vector();
      }
      this.contactIds.addElement(elem);
    }

    public Vector getContactIds() {
      return this.contactIds;
    }

    public void setContactIds(Vector contactIds) {
      this.contactIds = contactIds;
    }

    public void unsetContactIds() {
      this.contactIds = null;
    }

    /** Returns true if field contactIds is set (has been assigned a value) and false otherwise */
    public boolean isSetContactIds() {
      return this.contactIds != null;
    }

    public void setContactIdsIsSet(boolean value) {
      if (!value) {
        this.contactIds = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof inviteIntoRoom_args)
        return this.equals((inviteIntoRoom_args)that);
      return false;
    }

    public boolean equals(inviteIntoRoom_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_roomId = true && this.isSetRoomId();
      boolean that_present_roomId = true && that.isSetRoomId();
      if (this_present_roomId || that_present_roomId) {
        if (!(this_present_roomId && that_present_roomId))
          return false;
        if (!this.roomId.equals(that.roomId))
          return false;
      }

      boolean this_present_contactIds = true && this.isSetContactIds();
      boolean that_present_contactIds = true && that.isSetContactIds();
      if (this_present_contactIds || that_present_contactIds) {
        if (!(this_present_contactIds && that_present_contactIds))
          return false;
        if (!this.contactIds.equals(that.contactIds))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      inviteIntoRoom_args other = (inviteIntoRoom_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetRoomId(), other.isSetRoomId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomId()) {
        lastComparison = TBaseHelper.compareTo(this.roomId, other.roomId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetContactIds(), other.isSetContactIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContactIds()) {
        lastComparison = TBaseHelper.compareTo(this.contactIds, other.contactIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ROOM_ID
            if (field.type == TType.STRING) {
              this.roomId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // CONTACT_IDS
            if (field.type == TType.LIST) {
              {
                TList _list1027 = iprot.readListBegin();
                this.contactIds = new Vector(_list1027.size);
                for (int _i1028 = 0; _i1028 < _list1027.size; ++_i1028)
                {
                  String _elem1029;
                  _elem1029 = iprot.readString();
                  this.contactIds.addElement(_elem1029);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.roomId != null) {
        oprot.writeFieldBegin(ROOM_ID_FIELD_DESC);
        oprot.writeString(this.roomId);
        oprot.writeFieldEnd();
      }
      if (this.contactIds != null) {
        oprot.writeFieldBegin(CONTACT_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.contactIds.size()));
          for (Enumeration _iter1030_enum = this.contactIds.elements(); _iter1030_enum.hasMoreElements(); )           {
            String _iter1030 = (String)_iter1030_enum.nextElement();
            oprot.writeString(_iter1030);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("inviteIntoRoom_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("roomId:");
      if (this.roomId == null) {
        sb.append("null");
      } else {
        sb.append(this.roomId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contactIds:");
      if (this.contactIds == null) {
        sb.append("null");
      } else {
        sb.append(this.contactIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class inviteIntoRoom_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("inviteIntoRoom_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public inviteIntoRoom_result() {
    }

    public inviteIntoRoom_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public inviteIntoRoom_result(inviteIntoRoom_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public inviteIntoRoom_result deepCopy() {
      return new inviteIntoRoom_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof inviteIntoRoom_result)
        return this.equals((inviteIntoRoom_result)that);
      return false;
    }

    public boolean equals(inviteIntoRoom_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      inviteIntoRoom_result other = (inviteIntoRoom_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("inviteIntoRoom_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class inviteViaEmail_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("inviteViaEmail_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField EMAIL_FIELD_DESC = new TField("email", TType.STRING, (short)2);
    private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)3);

    private int reqSeq;
    private String email;
    private String name;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public inviteViaEmail_args() {
    }

    public inviteViaEmail_args(
      int reqSeq,
      String email,
      String name)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.email = email;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public inviteViaEmail_args(inviteViaEmail_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetEmail()) {
        this.email = other.email;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public inviteViaEmail_args deepCopy() {
      return new inviteViaEmail_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.email = null;
      this.name = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public String getEmail() {
      return this.email;
    }

    public void setEmail(String email) {
      this.email = email;
    }

    public void unsetEmail() {
      this.email = null;
    }

    /** Returns true if field email is set (has been assigned a value) and false otherwise */
    public boolean isSetEmail() {
      return this.email != null;
    }

    public void setEmailIsSet(boolean value) {
      if (!value) {
        this.email = null;
      }
    }

    public String getName() {
      return this.name;
    }

    public void setName(String name) {
      this.name = name;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof inviteViaEmail_args)
        return this.equals((inviteViaEmail_args)that);
      return false;
    }

    public boolean equals(inviteViaEmail_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_email = true && this.isSetEmail();
      boolean that_present_email = true && that.isSetEmail();
      if (this_present_email || that_present_email) {
        if (!(this_present_email && that_present_email))
          return false;
        if (!this.email.equals(that.email))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      inviteViaEmail_args other = (inviteViaEmail_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetEmail(), other.isSetEmail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmail()) {
        lastComparison = TBaseHelper.compareTo(this.email, other.email);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetName(), other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // EMAIL
            if (field.type == TType.STRING) {
              this.email = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NAME
            if (field.type == TType.STRING) {
              this.name = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(this.email);
        oprot.writeFieldEnd();
      }
      if (this.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(this.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("inviteViaEmail_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class inviteViaEmail_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("inviteViaEmail_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public inviteViaEmail_result() {
    }

    public inviteViaEmail_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public inviteViaEmail_result(inviteViaEmail_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public inviteViaEmail_result deepCopy() {
      return new inviteViaEmail_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof inviteViaEmail_result)
        return this.equals((inviteViaEmail_result)that);
      return false;
    }

    public boolean equals(inviteViaEmail_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      inviteViaEmail_result other = (inviteViaEmail_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("inviteViaEmail_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class isIdentityIdentifierAvailable_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("isIdentityIdentifierAvailable_args");

    private static final TField PROVIDER_FIELD_DESC = new TField("provider", TType.I32, (short)3);
    private static final TField IDENTIFIER_FIELD_DESC = new TField("identifier", TType.STRING, (short)2);

    private IdentityProvider provider;
    private String identifier;

    // isset id assignments

    public isIdentityIdentifierAvailable_args() {
    }

    public isIdentityIdentifierAvailable_args(
      IdentityProvider provider,
      String identifier)
    {
      this();
      this.provider = provider;
      this.identifier = identifier;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isIdentityIdentifierAvailable_args(isIdentityIdentifierAvailable_args other) {
      if (other.isSetProvider()) {
        this.provider = other.provider;
      }
      if (other.isSetIdentifier()) {
        this.identifier = other.identifier;
      }
    }

    public isIdentityIdentifierAvailable_args deepCopy() {
      return new isIdentityIdentifierAvailable_args(this);
    }

    public void clear() {
      this.provider = null;
      this.identifier = null;
    }

    /**
     * 
     * @see IdentityProvider
     */
    public IdentityProvider getProvider() {
      return this.provider;
    }

    /**
     * 
     * @see IdentityProvider
     */
    public void setProvider(IdentityProvider provider) {
      this.provider = provider;
    }

    public void unsetProvider() {
      this.provider = null;
    }

    /** Returns true if field provider is set (has been assigned a value) and false otherwise */
    public boolean isSetProvider() {
      return this.provider != null;
    }

    public void setProviderIsSet(boolean value) {
      if (!value) {
        this.provider = null;
      }
    }

    public String getIdentifier() {
      return this.identifier;
    }

    public void setIdentifier(String identifier) {
      this.identifier = identifier;
    }

    public void unsetIdentifier() {
      this.identifier = null;
    }

    /** Returns true if field identifier is set (has been assigned a value) and false otherwise */
    public boolean isSetIdentifier() {
      return this.identifier != null;
    }

    public void setIdentifierIsSet(boolean value) {
      if (!value) {
        this.identifier = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isIdentityIdentifierAvailable_args)
        return this.equals((isIdentityIdentifierAvailable_args)that);
      return false;
    }

    public boolean equals(isIdentityIdentifierAvailable_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_provider = true && this.isSetProvider();
      boolean that_present_provider = true && that.isSetProvider();
      if (this_present_provider || that_present_provider) {
        if (!(this_present_provider && that_present_provider))
          return false;
        if (!this.provider.equals(that.provider))
          return false;
      }

      boolean this_present_identifier = true && this.isSetIdentifier();
      boolean that_present_identifier = true && that.isSetIdentifier();
      if (this_present_identifier || that_present_identifier) {
        if (!(this_present_identifier && that_present_identifier))
          return false;
        if (!this.identifier.equals(that.identifier))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      isIdentityIdentifierAvailable_args other = (isIdentityIdentifierAvailable_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetProvider(), other.isSetProvider());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProvider()) {
        lastComparison = TBaseHelper.compareTo(this.provider, other.provider);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetIdentifier(), other.isSetIdentifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdentifier()) {
        lastComparison = TBaseHelper.compareTo(this.identifier, other.identifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 3: // PROVIDER
            if (field.type == TType.I32) {
              this.provider = IdentityProvider.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // IDENTIFIER
            if (field.type == TType.STRING) {
              this.identifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.identifier != null) {
        oprot.writeFieldBegin(IDENTIFIER_FIELD_DESC);
        oprot.writeString(this.identifier);
        oprot.writeFieldEnd();
      }
      if (this.provider != null) {
        oprot.writeFieldBegin(PROVIDER_FIELD_DESC);
        oprot.writeI32(this.provider.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("isIdentityIdentifierAvailable_args(");
      boolean first = true;

      sb.append("provider:");
      if (this.provider == null) {
        sb.append("null");
      } else {
        sb.append(this.provider);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("identifier:");
      if (this.identifier == null) {
        sb.append("null");
      } else {
        sb.append(this.identifier);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class isIdentityIdentifierAvailable_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("isIdentityIdentifierAvailable_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private boolean success;
    private TalkException e;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public isIdentityIdentifierAvailable_result() {
    }

    public isIdentityIdentifierAvailable_result(
      boolean success,
      TalkException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isIdentityIdentifierAvailable_result(isIdentityIdentifierAvailable_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public isIdentityIdentifierAvailable_result deepCopy() {
      return new isIdentityIdentifierAvailable_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isIdentityIdentifierAvailable_result)
        return this.equals((isIdentityIdentifierAvailable_result)that);
      return false;
    }

    public boolean equals(isIdentityIdentifierAvailable_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      isIdentityIdentifierAvailable_result other = (isIdentityIdentifierAvailable_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("isIdentityIdentifierAvailable_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class isUseridAvailable_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("isUseridAvailable_args");

    private static final TField USERID_FIELD_DESC = new TField("userid", TType.STRING, (short)2);

    private String userid;

    // isset id assignments

    public isUseridAvailable_args() {
    }

    public isUseridAvailable_args(
      String userid)
    {
      this();
      this.userid = userid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isUseridAvailable_args(isUseridAvailable_args other) {
      if (other.isSetUserid()) {
        this.userid = other.userid;
      }
    }

    public isUseridAvailable_args deepCopy() {
      return new isUseridAvailable_args(this);
    }

    public void clear() {
      this.userid = null;
    }

    public String getUserid() {
      return this.userid;
    }

    public void setUserid(String userid) {
      this.userid = userid;
    }

    public void unsetUserid() {
      this.userid = null;
    }

    /** Returns true if field userid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserid() {
      return this.userid != null;
    }

    public void setUseridIsSet(boolean value) {
      if (!value) {
        this.userid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isUseridAvailable_args)
        return this.equals((isUseridAvailable_args)that);
      return false;
    }

    public boolean equals(isUseridAvailable_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userid = true && this.isSetUserid();
      boolean that_present_userid = true && that.isSetUserid();
      if (this_present_userid || that_present_userid) {
        if (!(this_present_userid && that_present_userid))
          return false;
        if (!this.userid.equals(that.userid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      isUseridAvailable_args other = (isUseridAvailable_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetUserid(), other.isSetUserid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserid()) {
        lastComparison = TBaseHelper.compareTo(this.userid, other.userid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // USERID
            if (field.type == TType.STRING) {
              this.userid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.userid != null) {
        oprot.writeFieldBegin(USERID_FIELD_DESC);
        oprot.writeString(this.userid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("isUseridAvailable_args(");
      boolean first = true;

      sb.append("userid:");
      if (this.userid == null) {
        sb.append("null");
      } else {
        sb.append(this.userid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class isUseridAvailable_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("isUseridAvailable_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private boolean success;
    private TalkException e;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public isUseridAvailable_result() {
    }

    public isUseridAvailable_result(
      boolean success,
      TalkException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isUseridAvailable_result(isUseridAvailable_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public isUseridAvailable_result deepCopy() {
      return new isUseridAvailable_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isUseridAvailable_result)
        return this.equals((isUseridAvailable_result)that);
      return false;
    }

    public boolean equals(isUseridAvailable_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      isUseridAvailable_result other = (isUseridAvailable_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("isUseridAvailable_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class kickoutFromGroup_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("kickoutFromGroup_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField GROUP_ID_FIELD_DESC = new TField("groupId", TType.STRING, (short)2);
    private static final TField CONTACT_IDS_FIELD_DESC = new TField("contactIds", TType.LIST, (short)3);

    private int reqSeq;
    private String groupId;
    private Vector contactIds;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public kickoutFromGroup_args() {
    }

    public kickoutFromGroup_args(
      int reqSeq,
      String groupId,
      Vector contactIds)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.groupId = groupId;
      this.contactIds = contactIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public kickoutFromGroup_args(kickoutFromGroup_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetGroupId()) {
        this.groupId = other.groupId;
      }
      if (other.isSetContactIds()) {
        Vector __this__contactIds = new Vector();
        for (Enumeration other_enum = other.contactIds.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__contactIds.addElement(other_element);
        }
        this.contactIds = __this__contactIds;
      }
    }

    public kickoutFromGroup_args deepCopy() {
      return new kickoutFromGroup_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.groupId = null;
      this.contactIds = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public String getGroupId() {
      return this.groupId;
    }

    public void setGroupId(String groupId) {
      this.groupId = groupId;
    }

    public void unsetGroupId() {
      this.groupId = null;
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return this.groupId != null;
    }

    public void setGroupIdIsSet(boolean value) {
      if (!value) {
        this.groupId = null;
      }
    }

    public int getContactIdsSize() {
      return (this.contactIds == null) ? 0 : this.contactIds.size();
    }

    public Enumeration getContactIdsEnumeration() {
      return (this.contactIds == null) ? null : this.contactIds.elements();
    }

    public void addToContactIds(String elem) {
      if (this.contactIds == null) {
        this.contactIds = new Vector();
      }
      this.contactIds.addElement(elem);
    }

    public Vector getContactIds() {
      return this.contactIds;
    }

    public void setContactIds(Vector contactIds) {
      this.contactIds = contactIds;
    }

    public void unsetContactIds() {
      this.contactIds = null;
    }

    /** Returns true if field contactIds is set (has been assigned a value) and false otherwise */
    public boolean isSetContactIds() {
      return this.contactIds != null;
    }

    public void setContactIdsIsSet(boolean value) {
      if (!value) {
        this.contactIds = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof kickoutFromGroup_args)
        return this.equals((kickoutFromGroup_args)that);
      return false;
    }

    public boolean equals(kickoutFromGroup_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_groupId = true && this.isSetGroupId();
      boolean that_present_groupId = true && that.isSetGroupId();
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (!this.groupId.equals(that.groupId))
          return false;
      }

      boolean this_present_contactIds = true && this.isSetContactIds();
      boolean that_present_contactIds = true && that.isSetContactIds();
      if (this_present_contactIds || that_present_contactIds) {
        if (!(this_present_contactIds && that_present_contactIds))
          return false;
        if (!this.contactIds.equals(that.contactIds))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      kickoutFromGroup_args other = (kickoutFromGroup_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGroupId(), other.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = TBaseHelper.compareTo(this.groupId, other.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetContactIds(), other.isSetContactIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContactIds()) {
        lastComparison = TBaseHelper.compareTo(this.contactIds, other.contactIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GROUP_ID
            if (field.type == TType.STRING) {
              this.groupId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // CONTACT_IDS
            if (field.type == TType.LIST) {
              {
                TList _list1031 = iprot.readListBegin();
                this.contactIds = new Vector(_list1031.size);
                for (int _i1032 = 0; _i1032 < _list1031.size; ++_i1032)
                {
                  String _elem1033;
                  _elem1033 = iprot.readString();
                  this.contactIds.addElement(_elem1033);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.groupId != null) {
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeString(this.groupId);
        oprot.writeFieldEnd();
      }
      if (this.contactIds != null) {
        oprot.writeFieldBegin(CONTACT_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.contactIds.size()));
          for (Enumeration _iter1034_enum = this.contactIds.elements(); _iter1034_enum.hasMoreElements(); )           {
            String _iter1034 = (String)_iter1034_enum.nextElement();
            oprot.writeString(_iter1034);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("kickoutFromGroup_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("groupId:");
      if (this.groupId == null) {
        sb.append("null");
      } else {
        sb.append(this.groupId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contactIds:");
      if (this.contactIds == null) {
        sb.append("null");
      } else {
        sb.append(this.contactIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class kickoutFromGroup_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("kickoutFromGroup_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public kickoutFromGroup_result() {
    }

    public kickoutFromGroup_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public kickoutFromGroup_result(kickoutFromGroup_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public kickoutFromGroup_result deepCopy() {
      return new kickoutFromGroup_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof kickoutFromGroup_result)
        return this.equals((kickoutFromGroup_result)that);
      return false;
    }

    public boolean equals(kickoutFromGroup_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      kickoutFromGroup_result other = (kickoutFromGroup_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("kickoutFromGroup_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class reissueGroupTicket_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("reissueGroupTicket_args");

    private static final TField GROUP_MID_FIELD_DESC = new TField("groupMid", TType.STRING, (short)1);

    private String groupMid;

    // isset id assignments

    public reissueGroupTicket_args() {
    }

    public reissueGroupTicket_args(
      String groupMid)
    {
      this();
      this.groupMid = groupMid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reissueGroupTicket_args(reissueGroupTicket_args other) {
      if (other.isSetGroupMid()) {
        this.groupMid = other.groupMid;
      }
    }

    public reissueGroupTicket_args deepCopy() {
      return new reissueGroupTicket_args(this);
    }

    public void clear() {
      this.groupMid = null;
    }

    public String getGroupMid() {
      return this.groupMid;
    }

    public void setGroupMid(String groupMid) {
      this.groupMid = groupMid;
    }

    public void unsetGroupMid() {
      this.groupMid = null;
    }

    /** Returns true if field groupMid is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupMid() {
      return this.groupMid != null;
    }

    public void setGroupMidIsSet(boolean value) {
      if (!value) {
        this.groupMid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reissueGroupTicket_args)
        return this.equals((reissueGroupTicket_args)that);
      return false;
    }

    public boolean equals(reissueGroupTicket_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_groupMid = true && this.isSetGroupMid();
      boolean that_present_groupMid = true && that.isSetGroupMid();
      if (this_present_groupMid || that_present_groupMid) {
        if (!(this_present_groupMid && that_present_groupMid))
          return false;
        if (!this.groupMid.equals(that.groupMid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      reissueGroupTicket_args other = (reissueGroupTicket_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetGroupMid(), other.isSetGroupMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupMid()) {
        lastComparison = TBaseHelper.compareTo(this.groupMid, other.groupMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // GROUP_MID
            if (field.type == TType.STRING) {
              this.groupMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.groupMid != null) {
        oprot.writeFieldBegin(GROUP_MID_FIELD_DESC);
        oprot.writeString(this.groupMid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("reissueGroupTicket_args(");
      boolean first = true;

      sb.append("groupMid:");
      if (this.groupMid == null) {
        sb.append("null");
      } else {
        sb.append(this.groupMid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class reissueGroupTicket_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("reissueGroupTicket_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public reissueGroupTicket_result() {
    }

    public reissueGroupTicket_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reissueGroupTicket_result(reissueGroupTicket_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public reissueGroupTicket_result deepCopy() {
      return new reissueGroupTicket_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reissueGroupTicket_result)
        return this.equals((reissueGroupTicket_result)that);
      return false;
    }

    public boolean equals(reissueGroupTicket_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      reissueGroupTicket_result other = (reissueGroupTicket_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("reissueGroupTicket_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findGroupByTicket_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findGroupByTicket_args");

    private static final TField TICKET_ID_FIELD_DESC = new TField("ticketId", TType.STRING, (short)1);

    private String ticketId;

    // isset id assignments

    public findGroupByTicket_args() {
    }

    public findGroupByTicket_args(
      String ticketId)
    {
      this();
      this.ticketId = ticketId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findGroupByTicket_args(findGroupByTicket_args other) {
      if (other.isSetTicketId()) {
        this.ticketId = other.ticketId;
      }
    }

    public findGroupByTicket_args deepCopy() {
      return new findGroupByTicket_args(this);
    }

    public void clear() {
      this.ticketId = null;
    }

    public String getTicketId() {
      return this.ticketId;
    }

    public void setTicketId(String ticketId) {
      this.ticketId = ticketId;
    }

    public void unsetTicketId() {
      this.ticketId = null;
    }

    /** Returns true if field ticketId is set (has been assigned a value) and false otherwise */
    public boolean isSetTicketId() {
      return this.ticketId != null;
    }

    public void setTicketIdIsSet(boolean value) {
      if (!value) {
        this.ticketId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findGroupByTicket_args)
        return this.equals((findGroupByTicket_args)that);
      return false;
    }

    public boolean equals(findGroupByTicket_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ticketId = true && this.isSetTicketId();
      boolean that_present_ticketId = true && that.isSetTicketId();
      if (this_present_ticketId || that_present_ticketId) {
        if (!(this_present_ticketId && that_present_ticketId))
          return false;
        if (!this.ticketId.equals(that.ticketId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findGroupByTicket_args other = (findGroupByTicket_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetTicketId(), other.isSetTicketId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTicketId()) {
        lastComparison = TBaseHelper.compareTo(this.ticketId, other.ticketId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // TICKET_ID
            if (field.type == TType.STRING) {
              this.ticketId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.ticketId != null) {
        oprot.writeFieldBegin(TICKET_ID_FIELD_DESC);
        oprot.writeString(this.ticketId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findGroupByTicket_args(");
      boolean first = true;

      sb.append("ticketId:");
      if (this.ticketId == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findGroupByTicket_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findGroupByTicket_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Group success;
    private TalkException e;

    // isset id assignments

    public findGroupByTicket_result() {
    }

    public findGroupByTicket_result(
      Group success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findGroupByTicket_result(findGroupByTicket_result other) {
      if (other.isSetSuccess()) {
        this.success = new Group(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public findGroupByTicket_result deepCopy() {
      return new findGroupByTicket_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Group getSuccess() {
      return this.success;
    }

    public void setSuccess(Group success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findGroupByTicket_result)
        return this.equals((findGroupByTicket_result)that);
      return false;
    }

    public boolean equals(findGroupByTicket_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findGroupByTicket_result other = (findGroupByTicket_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Group();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findGroupByTicket_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class leaveGroup_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("leaveGroup_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField GROUP_ID_FIELD_DESC = new TField("groupId", TType.STRING, (short)2);

    private int reqSeq;
    private String groupId;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public leaveGroup_args() {
    }

    public leaveGroup_args(
      int reqSeq,
      String groupId)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.groupId = groupId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public leaveGroup_args(leaveGroup_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetGroupId()) {
        this.groupId = other.groupId;
      }
    }

    public leaveGroup_args deepCopy() {
      return new leaveGroup_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.groupId = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public String getGroupId() {
      return this.groupId;
    }

    public void setGroupId(String groupId) {
      this.groupId = groupId;
    }

    public void unsetGroupId() {
      this.groupId = null;
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return this.groupId != null;
    }

    public void setGroupIdIsSet(boolean value) {
      if (!value) {
        this.groupId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof leaveGroup_args)
        return this.equals((leaveGroup_args)that);
      return false;
    }

    public boolean equals(leaveGroup_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_groupId = true && this.isSetGroupId();
      boolean that_present_groupId = true && that.isSetGroupId();
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (!this.groupId.equals(that.groupId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      leaveGroup_args other = (leaveGroup_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGroupId(), other.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = TBaseHelper.compareTo(this.groupId, other.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GROUP_ID
            if (field.type == TType.STRING) {
              this.groupId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.groupId != null) {
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeString(this.groupId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("leaveGroup_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("groupId:");
      if (this.groupId == null) {
        sb.append("null");
      } else {
        sb.append(this.groupId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class leaveGroup_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("leaveGroup_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public leaveGroup_result() {
    }

    public leaveGroup_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public leaveGroup_result(leaveGroup_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public leaveGroup_result deepCopy() {
      return new leaveGroup_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof leaveGroup_result)
        return this.equals((leaveGroup_result)that);
      return false;
    }

    public boolean equals(leaveGroup_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      leaveGroup_result other = (leaveGroup_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("leaveGroup_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class leaveRoom_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("leaveRoom_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField ROOM_ID_FIELD_DESC = new TField("roomId", TType.STRING, (short)2);

    private int reqSeq;
    private String roomId;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public leaveRoom_args() {
    }

    public leaveRoom_args(
      int reqSeq,
      String roomId)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.roomId = roomId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public leaveRoom_args(leaveRoom_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetRoomId()) {
        this.roomId = other.roomId;
      }
    }

    public leaveRoom_args deepCopy() {
      return new leaveRoom_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.roomId = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public String getRoomId() {
      return this.roomId;
    }

    public void setRoomId(String roomId) {
      this.roomId = roomId;
    }

    public void unsetRoomId() {
      this.roomId = null;
    }

    /** Returns true if field roomId is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomId() {
      return this.roomId != null;
    }

    public void setRoomIdIsSet(boolean value) {
      if (!value) {
        this.roomId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof leaveRoom_args)
        return this.equals((leaveRoom_args)that);
      return false;
    }

    public boolean equals(leaveRoom_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_roomId = true && this.isSetRoomId();
      boolean that_present_roomId = true && that.isSetRoomId();
      if (this_present_roomId || that_present_roomId) {
        if (!(this_present_roomId && that_present_roomId))
          return false;
        if (!this.roomId.equals(that.roomId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      leaveRoom_args other = (leaveRoom_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetRoomId(), other.isSetRoomId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomId()) {
        lastComparison = TBaseHelper.compareTo(this.roomId, other.roomId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ROOM_ID
            if (field.type == TType.STRING) {
              this.roomId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.roomId != null) {
        oprot.writeFieldBegin(ROOM_ID_FIELD_DESC);
        oprot.writeString(this.roomId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("leaveRoom_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("roomId:");
      if (this.roomId == null) {
        sb.append("null");
      } else {
        sb.append(this.roomId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class leaveRoom_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("leaveRoom_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public leaveRoom_result() {
    }

    public leaveRoom_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public leaveRoom_result(leaveRoom_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public leaveRoom_result deepCopy() {
      return new leaveRoom_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof leaveRoom_result)
        return this.equals((leaveRoom_result)that);
      return false;
    }

    public boolean equals(leaveRoom_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      leaveRoom_result other = (leaveRoom_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("leaveRoom_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class loginWithIdentityCredential_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("loginWithIdentityCredential_args");

    private static final TField IDENTITY_PROVIDER_FIELD_DESC = new TField("identityProvider", TType.I32, (short)8);
    private static final TField IDENTIFIER_FIELD_DESC = new TField("identifier", TType.STRING, (short)3);
    private static final TField PASSWORD_FIELD_DESC = new TField("password", TType.STRING, (short)4);
    private static final TField KEEP_LOGGED_IN_FIELD_DESC = new TField("keepLoggedIn", TType.BOOL, (short)5);
    private static final TField ACCESS_LOCATION_FIELD_DESC = new TField("accessLocation", TType.STRING, (short)6);
    private static final TField SYSTEM_NAME_FIELD_DESC = new TField("systemName", TType.STRING, (short)7);
    private static final TField CERTIFICATE_FIELD_DESC = new TField("certificate", TType.STRING, (short)9);

    private IdentityProvider identityProvider;
    private String identifier;
    private String password;
    private boolean keepLoggedIn;
    private String accessLocation;
    private String systemName;
    private String certificate;

    // isset id assignments
    private static final int __KEEPLOGGEDIN_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public loginWithIdentityCredential_args() {
    }

    public loginWithIdentityCredential_args(
      IdentityProvider identityProvider,
      String identifier,
      String password,
      boolean keepLoggedIn,
      String accessLocation,
      String systemName,
      String certificate)
    {
      this();
      this.identityProvider = identityProvider;
      this.identifier = identifier;
      this.password = password;
      this.keepLoggedIn = keepLoggedIn;
      setKeepLoggedInIsSet(true);
      this.accessLocation = accessLocation;
      this.systemName = systemName;
      this.certificate = certificate;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginWithIdentityCredential_args(loginWithIdentityCredential_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetIdentityProvider()) {
        this.identityProvider = other.identityProvider;
      }
      if (other.isSetIdentifier()) {
        this.identifier = other.identifier;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      this.keepLoggedIn = other.keepLoggedIn;
      if (other.isSetAccessLocation()) {
        this.accessLocation = other.accessLocation;
      }
      if (other.isSetSystemName()) {
        this.systemName = other.systemName;
      }
      if (other.isSetCertificate()) {
        this.certificate = other.certificate;
      }
    }

    public loginWithIdentityCredential_args deepCopy() {
      return new loginWithIdentityCredential_args(this);
    }

    public void clear() {
      this.identityProvider = null;
      this.identifier = null;
      this.password = null;
      setKeepLoggedInIsSet(false);
      this.keepLoggedIn = false;
      this.accessLocation = null;
      this.systemName = null;
      this.certificate = null;
    }

    /**
     * 
     * @see IdentityProvider
     */
    public IdentityProvider getIdentityProvider() {
      return this.identityProvider;
    }

    /**
     * 
     * @see IdentityProvider
     */
    public void setIdentityProvider(IdentityProvider identityProvider) {
      this.identityProvider = identityProvider;
    }

    public void unsetIdentityProvider() {
      this.identityProvider = null;
    }

    /** Returns true if field identityProvider is set (has been assigned a value) and false otherwise */
    public boolean isSetIdentityProvider() {
      return this.identityProvider != null;
    }

    public void setIdentityProviderIsSet(boolean value) {
      if (!value) {
        this.identityProvider = null;
      }
    }

    public String getIdentifier() {
      return this.identifier;
    }

    public void setIdentifier(String identifier) {
      this.identifier = identifier;
    }

    public void unsetIdentifier() {
      this.identifier = null;
    }

    /** Returns true if field identifier is set (has been assigned a value) and false otherwise */
    public boolean isSetIdentifier() {
      return this.identifier != null;
    }

    public void setIdentifierIsSet(boolean value) {
      if (!value) {
        this.identifier = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public void setPassword(String password) {
      this.password = password;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public boolean isKeepLoggedIn() {
      return this.keepLoggedIn;
    }

    public void setKeepLoggedIn(boolean keepLoggedIn) {
      this.keepLoggedIn = keepLoggedIn;
      setKeepLoggedInIsSet(true);
    }

    public void unsetKeepLoggedIn() {
      __isset_vector[__KEEPLOGGEDIN_ISSET_ID] = false;
    }

    /** Returns true if field keepLoggedIn is set (has been assigned a value) and false otherwise */
    public boolean isSetKeepLoggedIn() {
      return __isset_vector[__KEEPLOGGEDIN_ISSET_ID];
    }

    public void setKeepLoggedInIsSet(boolean value) {
      __isset_vector[__KEEPLOGGEDIN_ISSET_ID] = value;
    }

    public String getAccessLocation() {
      return this.accessLocation;
    }

    public void setAccessLocation(String accessLocation) {
      this.accessLocation = accessLocation;
    }

    public void unsetAccessLocation() {
      this.accessLocation = null;
    }

    /** Returns true if field accessLocation is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessLocation() {
      return this.accessLocation != null;
    }

    public void setAccessLocationIsSet(boolean value) {
      if (!value) {
        this.accessLocation = null;
      }
    }

    public String getSystemName() {
      return this.systemName;
    }

    public void setSystemName(String systemName) {
      this.systemName = systemName;
    }

    public void unsetSystemName() {
      this.systemName = null;
    }

    /** Returns true if field systemName is set (has been assigned a value) and false otherwise */
    public boolean isSetSystemName() {
      return this.systemName != null;
    }

    public void setSystemNameIsSet(boolean value) {
      if (!value) {
        this.systemName = null;
      }
    }

    public String getCertificate() {
      return this.certificate;
    }

    public void setCertificate(String certificate) {
      this.certificate = certificate;
    }

    public void unsetCertificate() {
      this.certificate = null;
    }

    /** Returns true if field certificate is set (has been assigned a value) and false otherwise */
    public boolean isSetCertificate() {
      return this.certificate != null;
    }

    public void setCertificateIsSet(boolean value) {
      if (!value) {
        this.certificate = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loginWithIdentityCredential_args)
        return this.equals((loginWithIdentityCredential_args)that);
      return false;
    }

    public boolean equals(loginWithIdentityCredential_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_identityProvider = true && this.isSetIdentityProvider();
      boolean that_present_identityProvider = true && that.isSetIdentityProvider();
      if (this_present_identityProvider || that_present_identityProvider) {
        if (!(this_present_identityProvider && that_present_identityProvider))
          return false;
        if (!this.identityProvider.equals(that.identityProvider))
          return false;
      }

      boolean this_present_identifier = true && this.isSetIdentifier();
      boolean that_present_identifier = true && that.isSetIdentifier();
      if (this_present_identifier || that_present_identifier) {
        if (!(this_present_identifier && that_present_identifier))
          return false;
        if (!this.identifier.equals(that.identifier))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_keepLoggedIn = true;
      boolean that_present_keepLoggedIn = true;
      if (this_present_keepLoggedIn || that_present_keepLoggedIn) {
        if (!(this_present_keepLoggedIn && that_present_keepLoggedIn))
          return false;
        if (this.keepLoggedIn != that.keepLoggedIn)
          return false;
      }

      boolean this_present_accessLocation = true && this.isSetAccessLocation();
      boolean that_present_accessLocation = true && that.isSetAccessLocation();
      if (this_present_accessLocation || that_present_accessLocation) {
        if (!(this_present_accessLocation && that_present_accessLocation))
          return false;
        if (!this.accessLocation.equals(that.accessLocation))
          return false;
      }

      boolean this_present_systemName = true && this.isSetSystemName();
      boolean that_present_systemName = true && that.isSetSystemName();
      if (this_present_systemName || that_present_systemName) {
        if (!(this_present_systemName && that_present_systemName))
          return false;
        if (!this.systemName.equals(that.systemName))
          return false;
      }

      boolean this_present_certificate = true && this.isSetCertificate();
      boolean that_present_certificate = true && that.isSetCertificate();
      if (this_present_certificate || that_present_certificate) {
        if (!(this_present_certificate && that_present_certificate))
          return false;
        if (!this.certificate.equals(that.certificate))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      loginWithIdentityCredential_args other = (loginWithIdentityCredential_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetIdentityProvider(), other.isSetIdentityProvider());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdentityProvider()) {
        lastComparison = TBaseHelper.compareTo(this.identityProvider, other.identityProvider);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetIdentifier(), other.isSetIdentifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdentifier()) {
        lastComparison = TBaseHelper.compareTo(this.identifier, other.identifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPassword(), other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetKeepLoggedIn(), other.isSetKeepLoggedIn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeepLoggedIn()) {
        lastComparison = TBaseHelper.compareTo(this.keepLoggedIn, other.keepLoggedIn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetAccessLocation(), other.isSetAccessLocation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessLocation()) {
        lastComparison = TBaseHelper.compareTo(this.accessLocation, other.accessLocation);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemName(), other.isSetSystemName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemName()) {
        lastComparison = TBaseHelper.compareTo(this.systemName, other.systemName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCertificate(), other.isSetCertificate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCertificate()) {
        lastComparison = TBaseHelper.compareTo(this.certificate, other.certificate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 8: // IDENTITY_PROVIDER
            if (field.type == TType.I32) {
              this.identityProvider = IdentityProvider.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // IDENTIFIER
            if (field.type == TType.STRING) {
              this.identifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // PASSWORD
            if (field.type == TType.STRING) {
              this.password = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // KEEP_LOGGED_IN
            if (field.type == TType.BOOL) {
              this.keepLoggedIn = iprot.readBool();
              setKeepLoggedInIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // ACCESS_LOCATION
            if (field.type == TType.STRING) {
              this.accessLocation = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // SYSTEM_NAME
            if (field.type == TType.STRING) {
              this.systemName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 9: // CERTIFICATE
            if (field.type == TType.STRING) {
              this.certificate = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.identifier != null) {
        oprot.writeFieldBegin(IDENTIFIER_FIELD_DESC);
        oprot.writeString(this.identifier);
        oprot.writeFieldEnd();
      }
      if (this.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(this.password);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(KEEP_LOGGED_IN_FIELD_DESC);
      oprot.writeBool(this.keepLoggedIn);
      oprot.writeFieldEnd();
      if (this.accessLocation != null) {
        oprot.writeFieldBegin(ACCESS_LOCATION_FIELD_DESC);
        oprot.writeString(this.accessLocation);
        oprot.writeFieldEnd();
      }
      if (this.systemName != null) {
        oprot.writeFieldBegin(SYSTEM_NAME_FIELD_DESC);
        oprot.writeString(this.systemName);
        oprot.writeFieldEnd();
      }
      if (this.identityProvider != null) {
        oprot.writeFieldBegin(IDENTITY_PROVIDER_FIELD_DESC);
        oprot.writeI32(this.identityProvider.getValue());
        oprot.writeFieldEnd();
      }
      if (this.certificate != null) {
        oprot.writeFieldBegin(CERTIFICATE_FIELD_DESC);
        oprot.writeString(this.certificate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("loginWithIdentityCredential_args(");
      boolean first = true;

      sb.append("identityProvider:");
      if (this.identityProvider == null) {
        sb.append("null");
      } else {
        sb.append(this.identityProvider);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("identifier:");
      if (this.identifier == null) {
        sb.append("null");
      } else {
        sb.append(this.identifier);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keepLoggedIn:");
      sb.append(this.keepLoggedIn);
      first = false;
      if (!first) sb.append(", ");
      sb.append("accessLocation:");
      if (this.accessLocation == null) {
        sb.append("null");
      } else {
        sb.append(this.accessLocation);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemName:");
      if (this.systemName == null) {
        sb.append("null");
      } else {
        sb.append(this.systemName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("certificate:");
      if (this.certificate == null) {
        sb.append("null");
      } else {
        sb.append(this.certificate);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class loginWithIdentityCredential_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("loginWithIdentityCredential_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public loginWithIdentityCredential_result() {
    }

    public loginWithIdentityCredential_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginWithIdentityCredential_result(loginWithIdentityCredential_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public loginWithIdentityCredential_result deepCopy() {
      return new loginWithIdentityCredential_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loginWithIdentityCredential_result)
        return this.equals((loginWithIdentityCredential_result)that);
      return false;
    }

    public boolean equals(loginWithIdentityCredential_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      loginWithIdentityCredential_result other = (loginWithIdentityCredential_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("loginWithIdentityCredential_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class loginWithIdentityCredentialForCertificate_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("loginWithIdentityCredentialForCertificate_args");

    private static final TField IDENTITY_PROVIDER_FIELD_DESC = new TField("identityProvider", TType.I32, (short)8);
    private static final TField IDENTIFIER_FIELD_DESC = new TField("identifier", TType.STRING, (short)3);
    private static final TField PASSWORD_FIELD_DESC = new TField("password", TType.STRING, (short)4);
    private static final TField KEEP_LOGGED_IN_FIELD_DESC = new TField("keepLoggedIn", TType.BOOL, (short)5);
    private static final TField ACCESS_LOCATION_FIELD_DESC = new TField("accessLocation", TType.STRING, (short)6);
    private static final TField SYSTEM_NAME_FIELD_DESC = new TField("systemName", TType.STRING, (short)7);
    private static final TField CERTIFICATE_FIELD_DESC = new TField("certificate", TType.STRING, (short)9);

    private IdentityProvider identityProvider;
    private String identifier;
    private String password;
    private boolean keepLoggedIn;
    private String accessLocation;
    private String systemName;
    private String certificate;

    // isset id assignments
    private static final int __KEEPLOGGEDIN_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public loginWithIdentityCredentialForCertificate_args() {
    }

    public loginWithIdentityCredentialForCertificate_args(
      IdentityProvider identityProvider,
      String identifier,
      String password,
      boolean keepLoggedIn,
      String accessLocation,
      String systemName,
      String certificate)
    {
      this();
      this.identityProvider = identityProvider;
      this.identifier = identifier;
      this.password = password;
      this.keepLoggedIn = keepLoggedIn;
      setKeepLoggedInIsSet(true);
      this.accessLocation = accessLocation;
      this.systemName = systemName;
      this.certificate = certificate;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginWithIdentityCredentialForCertificate_args(loginWithIdentityCredentialForCertificate_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetIdentityProvider()) {
        this.identityProvider = other.identityProvider;
      }
      if (other.isSetIdentifier()) {
        this.identifier = other.identifier;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      this.keepLoggedIn = other.keepLoggedIn;
      if (other.isSetAccessLocation()) {
        this.accessLocation = other.accessLocation;
      }
      if (other.isSetSystemName()) {
        this.systemName = other.systemName;
      }
      if (other.isSetCertificate()) {
        this.certificate = other.certificate;
      }
    }

    public loginWithIdentityCredentialForCertificate_args deepCopy() {
      return new loginWithIdentityCredentialForCertificate_args(this);
    }

    public void clear() {
      this.identityProvider = null;
      this.identifier = null;
      this.password = null;
      setKeepLoggedInIsSet(false);
      this.keepLoggedIn = false;
      this.accessLocation = null;
      this.systemName = null;
      this.certificate = null;
    }

    /**
     * 
     * @see IdentityProvider
     */
    public IdentityProvider getIdentityProvider() {
      return this.identityProvider;
    }

    /**
     * 
     * @see IdentityProvider
     */
    public void setIdentityProvider(IdentityProvider identityProvider) {
      this.identityProvider = identityProvider;
    }

    public void unsetIdentityProvider() {
      this.identityProvider = null;
    }

    /** Returns true if field identityProvider is set (has been assigned a value) and false otherwise */
    public boolean isSetIdentityProvider() {
      return this.identityProvider != null;
    }

    public void setIdentityProviderIsSet(boolean value) {
      if (!value) {
        this.identityProvider = null;
      }
    }

    public String getIdentifier() {
      return this.identifier;
    }

    public void setIdentifier(String identifier) {
      this.identifier = identifier;
    }

    public void unsetIdentifier() {
      this.identifier = null;
    }

    /** Returns true if field identifier is set (has been assigned a value) and false otherwise */
    public boolean isSetIdentifier() {
      return this.identifier != null;
    }

    public void setIdentifierIsSet(boolean value) {
      if (!value) {
        this.identifier = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public void setPassword(String password) {
      this.password = password;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public boolean isKeepLoggedIn() {
      return this.keepLoggedIn;
    }

    public void setKeepLoggedIn(boolean keepLoggedIn) {
      this.keepLoggedIn = keepLoggedIn;
      setKeepLoggedInIsSet(true);
    }

    public void unsetKeepLoggedIn() {
      __isset_vector[__KEEPLOGGEDIN_ISSET_ID] = false;
    }

    /** Returns true if field keepLoggedIn is set (has been assigned a value) and false otherwise */
    public boolean isSetKeepLoggedIn() {
      return __isset_vector[__KEEPLOGGEDIN_ISSET_ID];
    }

    public void setKeepLoggedInIsSet(boolean value) {
      __isset_vector[__KEEPLOGGEDIN_ISSET_ID] = value;
    }

    public String getAccessLocation() {
      return this.accessLocation;
    }

    public void setAccessLocation(String accessLocation) {
      this.accessLocation = accessLocation;
    }

    public void unsetAccessLocation() {
      this.accessLocation = null;
    }

    /** Returns true if field accessLocation is set (has been assigned a value) and false otherwise */
    public boolean isSetAccessLocation() {
      return this.accessLocation != null;
    }

    public void setAccessLocationIsSet(boolean value) {
      if (!value) {
        this.accessLocation = null;
      }
    }

    public String getSystemName() {
      return this.systemName;
    }

    public void setSystemName(String systemName) {
      this.systemName = systemName;
    }

    public void unsetSystemName() {
      this.systemName = null;
    }

    /** Returns true if field systemName is set (has been assigned a value) and false otherwise */
    public boolean isSetSystemName() {
      return this.systemName != null;
    }

    public void setSystemNameIsSet(boolean value) {
      if (!value) {
        this.systemName = null;
      }
    }

    public String getCertificate() {
      return this.certificate;
    }

    public void setCertificate(String certificate) {
      this.certificate = certificate;
    }

    public void unsetCertificate() {
      this.certificate = null;
    }

    /** Returns true if field certificate is set (has been assigned a value) and false otherwise */
    public boolean isSetCertificate() {
      return this.certificate != null;
    }

    public void setCertificateIsSet(boolean value) {
      if (!value) {
        this.certificate = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loginWithIdentityCredentialForCertificate_args)
        return this.equals((loginWithIdentityCredentialForCertificate_args)that);
      return false;
    }

    public boolean equals(loginWithIdentityCredentialForCertificate_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_identityProvider = true && this.isSetIdentityProvider();
      boolean that_present_identityProvider = true && that.isSetIdentityProvider();
      if (this_present_identityProvider || that_present_identityProvider) {
        if (!(this_present_identityProvider && that_present_identityProvider))
          return false;
        if (!this.identityProvider.equals(that.identityProvider))
          return false;
      }

      boolean this_present_identifier = true && this.isSetIdentifier();
      boolean that_present_identifier = true && that.isSetIdentifier();
      if (this_present_identifier || that_present_identifier) {
        if (!(this_present_identifier && that_present_identifier))
          return false;
        if (!this.identifier.equals(that.identifier))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_keepLoggedIn = true;
      boolean that_present_keepLoggedIn = true;
      if (this_present_keepLoggedIn || that_present_keepLoggedIn) {
        if (!(this_present_keepLoggedIn && that_present_keepLoggedIn))
          return false;
        if (this.keepLoggedIn != that.keepLoggedIn)
          return false;
      }

      boolean this_present_accessLocation = true && this.isSetAccessLocation();
      boolean that_present_accessLocation = true && that.isSetAccessLocation();
      if (this_present_accessLocation || that_present_accessLocation) {
        if (!(this_present_accessLocation && that_present_accessLocation))
          return false;
        if (!this.accessLocation.equals(that.accessLocation))
          return false;
      }

      boolean this_present_systemName = true && this.isSetSystemName();
      boolean that_present_systemName = true && that.isSetSystemName();
      if (this_present_systemName || that_present_systemName) {
        if (!(this_present_systemName && that_present_systemName))
          return false;
        if (!this.systemName.equals(that.systemName))
          return false;
      }

      boolean this_present_certificate = true && this.isSetCertificate();
      boolean that_present_certificate = true && that.isSetCertificate();
      if (this_present_certificate || that_present_certificate) {
        if (!(this_present_certificate && that_present_certificate))
          return false;
        if (!this.certificate.equals(that.certificate))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      loginWithIdentityCredentialForCertificate_args other = (loginWithIdentityCredentialForCertificate_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetIdentityProvider(), other.isSetIdentityProvider());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdentityProvider()) {
        lastComparison = TBaseHelper.compareTo(this.identityProvider, other.identityProvider);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetIdentifier(), other.isSetIdentifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdentifier()) {
        lastComparison = TBaseHelper.compareTo(this.identifier, other.identifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPassword(), other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetKeepLoggedIn(), other.isSetKeepLoggedIn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeepLoggedIn()) {
        lastComparison = TBaseHelper.compareTo(this.keepLoggedIn, other.keepLoggedIn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetAccessLocation(), other.isSetAccessLocation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAccessLocation()) {
        lastComparison = TBaseHelper.compareTo(this.accessLocation, other.accessLocation);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSystemName(), other.isSetSystemName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemName()) {
        lastComparison = TBaseHelper.compareTo(this.systemName, other.systemName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCertificate(), other.isSetCertificate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCertificate()) {
        lastComparison = TBaseHelper.compareTo(this.certificate, other.certificate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 8: // IDENTITY_PROVIDER
            if (field.type == TType.I32) {
              this.identityProvider = IdentityProvider.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // IDENTIFIER
            if (field.type == TType.STRING) {
              this.identifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // PASSWORD
            if (field.type == TType.STRING) {
              this.password = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // KEEP_LOGGED_IN
            if (field.type == TType.BOOL) {
              this.keepLoggedIn = iprot.readBool();
              setKeepLoggedInIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // ACCESS_LOCATION
            if (field.type == TType.STRING) {
              this.accessLocation = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // SYSTEM_NAME
            if (field.type == TType.STRING) {
              this.systemName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 9: // CERTIFICATE
            if (field.type == TType.STRING) {
              this.certificate = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.identifier != null) {
        oprot.writeFieldBegin(IDENTIFIER_FIELD_DESC);
        oprot.writeString(this.identifier);
        oprot.writeFieldEnd();
      }
      if (this.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(this.password);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(KEEP_LOGGED_IN_FIELD_DESC);
      oprot.writeBool(this.keepLoggedIn);
      oprot.writeFieldEnd();
      if (this.accessLocation != null) {
        oprot.writeFieldBegin(ACCESS_LOCATION_FIELD_DESC);
        oprot.writeString(this.accessLocation);
        oprot.writeFieldEnd();
      }
      if (this.systemName != null) {
        oprot.writeFieldBegin(SYSTEM_NAME_FIELD_DESC);
        oprot.writeString(this.systemName);
        oprot.writeFieldEnd();
      }
      if (this.identityProvider != null) {
        oprot.writeFieldBegin(IDENTITY_PROVIDER_FIELD_DESC);
        oprot.writeI32(this.identityProvider.getValue());
        oprot.writeFieldEnd();
      }
      if (this.certificate != null) {
        oprot.writeFieldBegin(CERTIFICATE_FIELD_DESC);
        oprot.writeString(this.certificate);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("loginWithIdentityCredentialForCertificate_args(");
      boolean first = true;

      sb.append("identityProvider:");
      if (this.identityProvider == null) {
        sb.append("null");
      } else {
        sb.append(this.identityProvider);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("identifier:");
      if (this.identifier == null) {
        sb.append("null");
      } else {
        sb.append(this.identifier);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keepLoggedIn:");
      sb.append(this.keepLoggedIn);
      first = false;
      if (!first) sb.append(", ");
      sb.append("accessLocation:");
      if (this.accessLocation == null) {
        sb.append("null");
      } else {
        sb.append(this.accessLocation);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemName:");
      if (this.systemName == null) {
        sb.append("null");
      } else {
        sb.append(this.systemName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("certificate:");
      if (this.certificate == null) {
        sb.append("null");
      } else {
        sb.append(this.certificate);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class loginWithIdentityCredentialForCertificate_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("loginWithIdentityCredentialForCertificate_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private LoginResult success;
    private TalkException e;

    // isset id assignments

    public loginWithIdentityCredentialForCertificate_result() {
    }

    public loginWithIdentityCredentialForCertificate_result(
      LoginResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginWithIdentityCredentialForCertificate_result(loginWithIdentityCredentialForCertificate_result other) {
      if (other.isSetSuccess()) {
        this.success = new LoginResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public loginWithIdentityCredentialForCertificate_result deepCopy() {
      return new loginWithIdentityCredentialForCertificate_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public LoginResult getSuccess() {
      return this.success;
    }

    public void setSuccess(LoginResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loginWithIdentityCredentialForCertificate_result)
        return this.equals((loginWithIdentityCredentialForCertificate_result)that);
      return false;
    }

    public boolean equals(loginWithIdentityCredentialForCertificate_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      loginWithIdentityCredentialForCertificate_result other = (loginWithIdentityCredentialForCertificate_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new LoginResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("loginWithIdentityCredentialForCertificate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class loginWithVerifier_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("loginWithVerifier_args");

    private static final TField VERIFIER_FIELD_DESC = new TField("verifier", TType.STRING, (short)3);

    private String verifier;

    // isset id assignments

    public loginWithVerifier_args() {
    }

    public loginWithVerifier_args(
      String verifier)
    {
      this();
      this.verifier = verifier;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginWithVerifier_args(loginWithVerifier_args other) {
      if (other.isSetVerifier()) {
        this.verifier = other.verifier;
      }
    }

    public loginWithVerifier_args deepCopy() {
      return new loginWithVerifier_args(this);
    }

    public void clear() {
      this.verifier = null;
    }

    public String getVerifier() {
      return this.verifier;
    }

    public void setVerifier(String verifier) {
      this.verifier = verifier;
    }

    public void unsetVerifier() {
      this.verifier = null;
    }

    /** Returns true if field verifier is set (has been assigned a value) and false otherwise */
    public boolean isSetVerifier() {
      return this.verifier != null;
    }

    public void setVerifierIsSet(boolean value) {
      if (!value) {
        this.verifier = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loginWithVerifier_args)
        return this.equals((loginWithVerifier_args)that);
      return false;
    }

    public boolean equals(loginWithVerifier_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_verifier = true && this.isSetVerifier();
      boolean that_present_verifier = true && that.isSetVerifier();
      if (this_present_verifier || that_present_verifier) {
        if (!(this_present_verifier && that_present_verifier))
          return false;
        if (!this.verifier.equals(that.verifier))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      loginWithVerifier_args other = (loginWithVerifier_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetVerifier(), other.isSetVerifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVerifier()) {
        lastComparison = TBaseHelper.compareTo(this.verifier, other.verifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 3: // VERIFIER
            if (field.type == TType.STRING) {
              this.verifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.verifier != null) {
        oprot.writeFieldBegin(VERIFIER_FIELD_DESC);
        oprot.writeString(this.verifier);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("loginWithVerifier_args(");
      boolean first = true;

      sb.append("verifier:");
      if (this.verifier == null) {
        sb.append("null");
      } else {
        sb.append(this.verifier);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class loginWithVerifier_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("loginWithVerifier_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public loginWithVerifier_result() {
    }

    public loginWithVerifier_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginWithVerifier_result(loginWithVerifier_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public loginWithVerifier_result deepCopy() {
      return new loginWithVerifier_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loginWithVerifier_result)
        return this.equals((loginWithVerifier_result)that);
      return false;
    }

    public boolean equals(loginWithVerifier_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      loginWithVerifier_result other = (loginWithVerifier_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("loginWithVerifier_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class loginWithVerifierForCerificate_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("loginWithVerifierForCerificate_args");

    private static final TField VERIFIER_FIELD_DESC = new TField("verifier", TType.STRING, (short)3);

    private String verifier;

    // isset id assignments

    public loginWithVerifierForCerificate_args() {
    }

    public loginWithVerifierForCerificate_args(
      String verifier)
    {
      this();
      this.verifier = verifier;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginWithVerifierForCerificate_args(loginWithVerifierForCerificate_args other) {
      if (other.isSetVerifier()) {
        this.verifier = other.verifier;
      }
    }

    public loginWithVerifierForCerificate_args deepCopy() {
      return new loginWithVerifierForCerificate_args(this);
    }

    public void clear() {
      this.verifier = null;
    }

    public String getVerifier() {
      return this.verifier;
    }

    public void setVerifier(String verifier) {
      this.verifier = verifier;
    }

    public void unsetVerifier() {
      this.verifier = null;
    }

    /** Returns true if field verifier is set (has been assigned a value) and false otherwise */
    public boolean isSetVerifier() {
      return this.verifier != null;
    }

    public void setVerifierIsSet(boolean value) {
      if (!value) {
        this.verifier = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loginWithVerifierForCerificate_args)
        return this.equals((loginWithVerifierForCerificate_args)that);
      return false;
    }

    public boolean equals(loginWithVerifierForCerificate_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_verifier = true && this.isSetVerifier();
      boolean that_present_verifier = true && that.isSetVerifier();
      if (this_present_verifier || that_present_verifier) {
        if (!(this_present_verifier && that_present_verifier))
          return false;
        if (!this.verifier.equals(that.verifier))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      loginWithVerifierForCerificate_args other = (loginWithVerifierForCerificate_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetVerifier(), other.isSetVerifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVerifier()) {
        lastComparison = TBaseHelper.compareTo(this.verifier, other.verifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 3: // VERIFIER
            if (field.type == TType.STRING) {
              this.verifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.verifier != null) {
        oprot.writeFieldBegin(VERIFIER_FIELD_DESC);
        oprot.writeString(this.verifier);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("loginWithVerifierForCerificate_args(");
      boolean first = true;

      sb.append("verifier:");
      if (this.verifier == null) {
        sb.append("null");
      } else {
        sb.append(this.verifier);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class loginWithVerifierForCerificate_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("loginWithVerifierForCerificate_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private LoginResult success;
    private TalkException e;

    // isset id assignments

    public loginWithVerifierForCerificate_result() {
    }

    public loginWithVerifierForCerificate_result(
      LoginResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginWithVerifierForCerificate_result(loginWithVerifierForCerificate_result other) {
      if (other.isSetSuccess()) {
        this.success = new LoginResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public loginWithVerifierForCerificate_result deepCopy() {
      return new loginWithVerifierForCerificate_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public LoginResult getSuccess() {
      return this.success;
    }

    public void setSuccess(LoginResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loginWithVerifierForCerificate_result)
        return this.equals((loginWithVerifierForCerificate_result)that);
      return false;
    }

    public boolean equals(loginWithVerifierForCerificate_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      loginWithVerifierForCerificate_result other = (loginWithVerifierForCerificate_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new LoginResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("loginWithVerifierForCerificate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class loginWithVerifierForCertificate_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("loginWithVerifierForCertificate_args");

    private static final TField VERIFIER_FIELD_DESC = new TField("verifier", TType.STRING, (short)3);

    private String verifier;

    // isset id assignments

    public loginWithVerifierForCertificate_args() {
    }

    public loginWithVerifierForCertificate_args(
      String verifier)
    {
      this();
      this.verifier = verifier;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginWithVerifierForCertificate_args(loginWithVerifierForCertificate_args other) {
      if (other.isSetVerifier()) {
        this.verifier = other.verifier;
      }
    }

    public loginWithVerifierForCertificate_args deepCopy() {
      return new loginWithVerifierForCertificate_args(this);
    }

    public void clear() {
      this.verifier = null;
    }

    public String getVerifier() {
      return this.verifier;
    }

    public void setVerifier(String verifier) {
      this.verifier = verifier;
    }

    public void unsetVerifier() {
      this.verifier = null;
    }

    /** Returns true if field verifier is set (has been assigned a value) and false otherwise */
    public boolean isSetVerifier() {
      return this.verifier != null;
    }

    public void setVerifierIsSet(boolean value) {
      if (!value) {
        this.verifier = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loginWithVerifierForCertificate_args)
        return this.equals((loginWithVerifierForCertificate_args)that);
      return false;
    }

    public boolean equals(loginWithVerifierForCertificate_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_verifier = true && this.isSetVerifier();
      boolean that_present_verifier = true && that.isSetVerifier();
      if (this_present_verifier || that_present_verifier) {
        if (!(this_present_verifier && that_present_verifier))
          return false;
        if (!this.verifier.equals(that.verifier))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      loginWithVerifierForCertificate_args other = (loginWithVerifierForCertificate_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetVerifier(), other.isSetVerifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVerifier()) {
        lastComparison = TBaseHelper.compareTo(this.verifier, other.verifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 3: // VERIFIER
            if (field.type == TType.STRING) {
              this.verifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.verifier != null) {
        oprot.writeFieldBegin(VERIFIER_FIELD_DESC);
        oprot.writeString(this.verifier);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("loginWithVerifierForCertificate_args(");
      boolean first = true;

      sb.append("verifier:");
      if (this.verifier == null) {
        sb.append("null");
      } else {
        sb.append(this.verifier);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class loginWithVerifierForCertificate_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("loginWithVerifierForCertificate_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private LoginResult success;
    private TalkException e;

    // isset id assignments

    public loginWithVerifierForCertificate_result() {
    }

    public loginWithVerifierForCertificate_result(
      LoginResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginWithVerifierForCertificate_result(loginWithVerifierForCertificate_result other) {
      if (other.isSetSuccess()) {
        this.success = new LoginResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public loginWithVerifierForCertificate_result deepCopy() {
      return new loginWithVerifierForCertificate_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public LoginResult getSuccess() {
      return this.success;
    }

    public void setSuccess(LoginResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loginWithVerifierForCertificate_result)
        return this.equals((loginWithVerifierForCertificate_result)that);
      return false;
    }

    public boolean equals(loginWithVerifierForCertificate_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      loginWithVerifierForCertificate_result other = (loginWithVerifierForCertificate_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new LoginResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("loginWithVerifierForCertificate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class logout_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("logout_args");


    public logout_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logout_args(logout_args other) {
    }

    public logout_args deepCopy() {
      return new logout_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof logout_args)
        return this.equals((logout_args)that);
      return false;
    }

    public boolean equals(logout_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      logout_args other = (logout_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("logout_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class logout_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("logout_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public logout_result() {
    }

    public logout_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logout_result(logout_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public logout_result deepCopy() {
      return new logout_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof logout_result)
        return this.equals((logout_result)that);
      return false;
    }

    public boolean equals(logout_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      logout_result other = (logout_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("logout_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class logoutSession_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("logoutSession_args");

    private static final TField TOKEN_KEY_FIELD_DESC = new TField("tokenKey", TType.STRING, (short)2);

    private String tokenKey;

    // isset id assignments

    public logoutSession_args() {
    }

    public logoutSession_args(
      String tokenKey)
    {
      this();
      this.tokenKey = tokenKey;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logoutSession_args(logoutSession_args other) {
      if (other.isSetTokenKey()) {
        this.tokenKey = other.tokenKey;
      }
    }

    public logoutSession_args deepCopy() {
      return new logoutSession_args(this);
    }

    public void clear() {
      this.tokenKey = null;
    }

    public String getTokenKey() {
      return this.tokenKey;
    }

    public void setTokenKey(String tokenKey) {
      this.tokenKey = tokenKey;
    }

    public void unsetTokenKey() {
      this.tokenKey = null;
    }

    /** Returns true if field tokenKey is set (has been assigned a value) and false otherwise */
    public boolean isSetTokenKey() {
      return this.tokenKey != null;
    }

    public void setTokenKeyIsSet(boolean value) {
      if (!value) {
        this.tokenKey = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof logoutSession_args)
        return this.equals((logoutSession_args)that);
      return false;
    }

    public boolean equals(logoutSession_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_tokenKey = true && this.isSetTokenKey();
      boolean that_present_tokenKey = true && that.isSetTokenKey();
      if (this_present_tokenKey || that_present_tokenKey) {
        if (!(this_present_tokenKey && that_present_tokenKey))
          return false;
        if (!this.tokenKey.equals(that.tokenKey))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      logoutSession_args other = (logoutSession_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetTokenKey(), other.isSetTokenKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTokenKey()) {
        lastComparison = TBaseHelper.compareTo(this.tokenKey, other.tokenKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // TOKEN_KEY
            if (field.type == TType.STRING) {
              this.tokenKey = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.tokenKey != null) {
        oprot.writeFieldBegin(TOKEN_KEY_FIELD_DESC);
        oprot.writeString(this.tokenKey);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("logoutSession_args(");
      boolean first = true;

      sb.append("tokenKey:");
      if (this.tokenKey == null) {
        sb.append("null");
      } else {
        sb.append(this.tokenKey);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class logoutSession_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("logoutSession_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public logoutSession_result() {
    }

    public logoutSession_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logoutSession_result(logoutSession_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public logoutSession_result deepCopy() {
      return new logoutSession_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof logoutSession_result)
        return this.equals((logoutSession_result)that);
      return false;
    }

    public boolean equals(logoutSession_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      logoutSession_result other = (logoutSession_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("logoutSession_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class noop_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("noop_args");


    public noop_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public noop_args(noop_args other) {
    }

    public noop_args deepCopy() {
      return new noop_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof noop_args)
        return this.equals((noop_args)that);
      return false;
    }

    public boolean equals(noop_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      noop_args other = (noop_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("noop_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class noop_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("noop_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public noop_result() {
    }

    public noop_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public noop_result(noop_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public noop_result deepCopy() {
      return new noop_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof noop_result)
        return this.equals((noop_result)that);
      return false;
    }

    public boolean equals(noop_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      noop_result other = (noop_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("noop_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class notifiedRedirect_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("notifiedRedirect_args");

    private static final TField PARAM_MAP_FIELD_DESC = new TField("paramMap", TType.MAP, (short)2);

    private Hashtable paramMap;

    // isset id assignments

    public notifiedRedirect_args() {
    }

    public notifiedRedirect_args(
      Hashtable paramMap)
    {
      this();
      this.paramMap = paramMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifiedRedirect_args(notifiedRedirect_args other) {
      if (other.isSetParamMap()) {
        Hashtable __this__paramMap = new Hashtable();
        for (Enumeration other_enum = other.paramMap.keys(); other_enum.hasMoreElements(); ) {

          String other_element_key = (String)other_enum.nextElement();
          String other_element_value = (String)other.paramMap.get(other_element_key);

          String __this__paramMap_copy_key = other_element_key;

          String __this__paramMap_copy_value = other_element_value;

          __this__paramMap.put(__this__paramMap_copy_key, __this__paramMap_copy_value);
        }
        this.paramMap = __this__paramMap;
      }
    }

    public notifiedRedirect_args deepCopy() {
      return new notifiedRedirect_args(this);
    }

    public void clear() {
      this.paramMap = null;
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public void putToParamMap(String key, String val) {
      if (this.paramMap == null) {
        this.paramMap = new Hashtable();
      }
      this.paramMap.put(key, val);
    }

    public Hashtable getParamMap() {
      return this.paramMap;
    }

    public void setParamMap(Hashtable paramMap) {
      this.paramMap = paramMap;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifiedRedirect_args)
        return this.equals((notifiedRedirect_args)that);
      return false;
    }

    public boolean equals(notifiedRedirect_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      notifiedRedirect_args other = (notifiedRedirect_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetParamMap(), other.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = TBaseHelper.compareTo(this.paramMap, other.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // PARAM_MAP
            if (field.type == TType.MAP) {
              {
                TMap _map1035 = iprot.readMapBegin();
                this.paramMap = new Hashtable(2*_map1035.size);
                for (int _i1036 = 0; _i1036 < _map1035.size; ++_i1036)
                {
                  String _key1037;
                  String _val1038;
                  _key1037 = iprot.readString();
                  _val1038 = iprot.readString();
                  this.paramMap.put(_key1037, _val1038);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.paramMap != null) {
        oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.paramMap.size()));
          for (Enumeration _iter1039_enum = this.paramMap.keys(); _iter1039_enum.hasMoreElements(); )           {
            String _iter1039 = (String)_iter1039_enum.nextElement();
            oprot.writeString(_iter1039);
            oprot.writeString(((String)this.paramMap.get(_iter1039)));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("notifiedRedirect_args(");
      boolean first = true;

      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class notifiedRedirect_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("notifiedRedirect_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public notifiedRedirect_result() {
    }

    public notifiedRedirect_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifiedRedirect_result(notifiedRedirect_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public notifiedRedirect_result deepCopy() {
      return new notifiedRedirect_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifiedRedirect_result)
        return this.equals((notifiedRedirect_result)that);
      return false;
    }

    public boolean equals(notifiedRedirect_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      notifiedRedirect_result other = (notifiedRedirect_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("notifiedRedirect_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class notifyBuddyOnAir_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("notifyBuddyOnAir_args");

    private static final TField SEQ_FIELD_DESC = new TField("seq", TType.I32, (short)1);
    private static final TField RECEIVER_MIDS_FIELD_DESC = new TField("receiverMids", TType.LIST, (short)2);

    private int seq;
    private Vector receiverMids;

    // isset id assignments
    private static final int __SEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public notifyBuddyOnAir_args() {
    }

    public notifyBuddyOnAir_args(
      int seq,
      Vector receiverMids)
    {
      this();
      this.seq = seq;
      setSeqIsSet(true);
      this.receiverMids = receiverMids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyBuddyOnAir_args(notifyBuddyOnAir_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.seq = other.seq;
      if (other.isSetReceiverMids()) {
        Vector __this__receiverMids = new Vector();
        for (Enumeration other_enum = other.receiverMids.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__receiverMids.addElement(other_element);
        }
        this.receiverMids = __this__receiverMids;
      }
    }

    public notifyBuddyOnAir_args deepCopy() {
      return new notifyBuddyOnAir_args(this);
    }

    public void clear() {
      setSeqIsSet(false);
      this.seq = 0;
      this.receiverMids = null;
    }

    public int getSeq() {
      return this.seq;
    }

    public void setSeq(int seq) {
      this.seq = seq;
      setSeqIsSet(true);
    }

    public void unsetSeq() {
      __isset_vector[__SEQ_ISSET_ID] = false;
    }

    /** Returns true if field seq is set (has been assigned a value) and false otherwise */
    public boolean isSetSeq() {
      return __isset_vector[__SEQ_ISSET_ID];
    }

    public void setSeqIsSet(boolean value) {
      __isset_vector[__SEQ_ISSET_ID] = value;
    }

    public int getReceiverMidsSize() {
      return (this.receiverMids == null) ? 0 : this.receiverMids.size();
    }

    public Enumeration getReceiverMidsEnumeration() {
      return (this.receiverMids == null) ? null : this.receiverMids.elements();
    }

    public void addToReceiverMids(String elem) {
      if (this.receiverMids == null) {
        this.receiverMids = new Vector();
      }
      this.receiverMids.addElement(elem);
    }

    public Vector getReceiverMids() {
      return this.receiverMids;
    }

    public void setReceiverMids(Vector receiverMids) {
      this.receiverMids = receiverMids;
    }

    public void unsetReceiverMids() {
      this.receiverMids = null;
    }

    /** Returns true if field receiverMids is set (has been assigned a value) and false otherwise */
    public boolean isSetReceiverMids() {
      return this.receiverMids != null;
    }

    public void setReceiverMidsIsSet(boolean value) {
      if (!value) {
        this.receiverMids = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyBuddyOnAir_args)
        return this.equals((notifyBuddyOnAir_args)that);
      return false;
    }

    public boolean equals(notifyBuddyOnAir_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_seq = true;
      boolean that_present_seq = true;
      if (this_present_seq || that_present_seq) {
        if (!(this_present_seq && that_present_seq))
          return false;
        if (this.seq != that.seq)
          return false;
      }

      boolean this_present_receiverMids = true && this.isSetReceiverMids();
      boolean that_present_receiverMids = true && that.isSetReceiverMids();
      if (this_present_receiverMids || that_present_receiverMids) {
        if (!(this_present_receiverMids && that_present_receiverMids))
          return false;
        if (!this.receiverMids.equals(that.receiverMids))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      notifyBuddyOnAir_args other = (notifyBuddyOnAir_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSeq(), other.isSetSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeq()) {
        lastComparison = TBaseHelper.compareTo(this.seq, other.seq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetReceiverMids(), other.isSetReceiverMids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReceiverMids()) {
        lastComparison = TBaseHelper.compareTo(this.receiverMids, other.receiverMids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SEQ
            if (field.type == TType.I32) {
              this.seq = iprot.readI32();
              setSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // RECEIVER_MIDS
            if (field.type == TType.LIST) {
              {
                TList _list1040 = iprot.readListBegin();
                this.receiverMids = new Vector(_list1040.size);
                for (int _i1041 = 0; _i1041 < _list1040.size; ++_i1041)
                {
                  String _elem1042;
                  _elem1042 = iprot.readString();
                  this.receiverMids.addElement(_elem1042);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQ_FIELD_DESC);
      oprot.writeI32(this.seq);
      oprot.writeFieldEnd();
      if (this.receiverMids != null) {
        oprot.writeFieldBegin(RECEIVER_MIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.receiverMids.size()));
          for (Enumeration _iter1043_enum = this.receiverMids.elements(); _iter1043_enum.hasMoreElements(); )           {
            String _iter1043 = (String)_iter1043_enum.nextElement();
            oprot.writeString(_iter1043);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("notifyBuddyOnAir_args(");
      boolean first = true;

      sb.append("seq:");
      sb.append(this.seq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("receiverMids:");
      if (this.receiverMids == null) {
        sb.append("null");
      } else {
        sb.append(this.receiverMids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class notifyBuddyOnAir_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("notifyBuddyOnAir_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.MAP, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Hashtable success;
    private TalkException e;

    // isset id assignments

    public notifyBuddyOnAir_result() {
    }

    public notifyBuddyOnAir_result(
      Hashtable success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyBuddyOnAir_result(notifyBuddyOnAir_result other) {
      if (other.isSetSuccess()) {
        Hashtable __this__success = new Hashtable();
        for (Enumeration other_enum = other.success.keys(); other_enum.hasMoreElements(); ) {

          String other_element_key = (String)other_enum.nextElement();
          String other_element_value = (String)other.success.get(other_element_key);

          String __this__success_copy_key = other_element_key;

          String __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public notifyBuddyOnAir_result deepCopy() {
      return new notifyBuddyOnAir_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new Hashtable();
      }
      this.success.put(key, val);
    }

    public Hashtable getSuccess() {
      return this.success;
    }

    public void setSuccess(Hashtable success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyBuddyOnAir_result)
        return this.equals((notifyBuddyOnAir_result)that);
      return false;
    }

    public boolean equals(notifyBuddyOnAir_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      notifyBuddyOnAir_result other = (notifyBuddyOnAir_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.MAP) {
              {
                TMap _map1044 = iprot.readMapBegin();
                this.success = new Hashtable(2*_map1044.size);
                for (int _i1045 = 0; _i1045 < _map1044.size; ++_i1045)
                {
                  String _key1046;
                  String _val1047;
                  _key1046 = iprot.readString();
                  _val1047 = iprot.readString();
                  this.success.put(_key1046, _val1047);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.success.size()));
          for (Enumeration _iter1048_enum = this.success.keys(); _iter1048_enum.hasMoreElements(); )           {
            String _iter1048 = (String)_iter1048_enum.nextElement();
            oprot.writeString(_iter1048);
            oprot.writeString(((String)this.success.get(_iter1048)));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("notifyBuddyOnAir_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class notifyIndividualEvent_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("notifyIndividualEvent_args");

    private static final TField NOTIFICATION_STATUS_FIELD_DESC = new TField("notificationStatus", TType.I32, (short)2);
    private static final TField RECEIVER_MIDS_FIELD_DESC = new TField("receiverMids", TType.LIST, (short)3);

    private NotificationStatus notificationStatus;
    private Vector receiverMids;

    // isset id assignments

    public notifyIndividualEvent_args() {
    }

    public notifyIndividualEvent_args(
      NotificationStatus notificationStatus,
      Vector receiverMids)
    {
      this();
      this.notificationStatus = notificationStatus;
      this.receiverMids = receiverMids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyIndividualEvent_args(notifyIndividualEvent_args other) {
      if (other.isSetNotificationStatus()) {
        this.notificationStatus = other.notificationStatus;
      }
      if (other.isSetReceiverMids()) {
        Vector __this__receiverMids = new Vector();
        for (Enumeration other_enum = other.receiverMids.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__receiverMids.addElement(other_element);
        }
        this.receiverMids = __this__receiverMids;
      }
    }

    public notifyIndividualEvent_args deepCopy() {
      return new notifyIndividualEvent_args(this);
    }

    public void clear() {
      this.notificationStatus = null;
      this.receiverMids = null;
    }

    /**
     * 
     * @see NotificationStatus
     */
    public NotificationStatus getNotificationStatus() {
      return this.notificationStatus;
    }

    /**
     * 
     * @see NotificationStatus
     */
    public void setNotificationStatus(NotificationStatus notificationStatus) {
      this.notificationStatus = notificationStatus;
    }

    public void unsetNotificationStatus() {
      this.notificationStatus = null;
    }

    /** Returns true if field notificationStatus is set (has been assigned a value) and false otherwise */
    public boolean isSetNotificationStatus() {
      return this.notificationStatus != null;
    }

    public void setNotificationStatusIsSet(boolean value) {
      if (!value) {
        this.notificationStatus = null;
      }
    }

    public int getReceiverMidsSize() {
      return (this.receiverMids == null) ? 0 : this.receiverMids.size();
    }

    public Enumeration getReceiverMidsEnumeration() {
      return (this.receiverMids == null) ? null : this.receiverMids.elements();
    }

    public void addToReceiverMids(String elem) {
      if (this.receiverMids == null) {
        this.receiverMids = new Vector();
      }
      this.receiverMids.addElement(elem);
    }

    public Vector getReceiverMids() {
      return this.receiverMids;
    }

    public void setReceiverMids(Vector receiverMids) {
      this.receiverMids = receiverMids;
    }

    public void unsetReceiverMids() {
      this.receiverMids = null;
    }

    /** Returns true if field receiverMids is set (has been assigned a value) and false otherwise */
    public boolean isSetReceiverMids() {
      return this.receiverMids != null;
    }

    public void setReceiverMidsIsSet(boolean value) {
      if (!value) {
        this.receiverMids = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyIndividualEvent_args)
        return this.equals((notifyIndividualEvent_args)that);
      return false;
    }

    public boolean equals(notifyIndividualEvent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_notificationStatus = true && this.isSetNotificationStatus();
      boolean that_present_notificationStatus = true && that.isSetNotificationStatus();
      if (this_present_notificationStatus || that_present_notificationStatus) {
        if (!(this_present_notificationStatus && that_present_notificationStatus))
          return false;
        if (!this.notificationStatus.equals(that.notificationStatus))
          return false;
      }

      boolean this_present_receiverMids = true && this.isSetReceiverMids();
      boolean that_present_receiverMids = true && that.isSetReceiverMids();
      if (this_present_receiverMids || that_present_receiverMids) {
        if (!(this_present_receiverMids && that_present_receiverMids))
          return false;
        if (!this.receiverMids.equals(that.receiverMids))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      notifyIndividualEvent_args other = (notifyIndividualEvent_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetNotificationStatus(), other.isSetNotificationStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotificationStatus()) {
        lastComparison = TBaseHelper.compareTo(this.notificationStatus, other.notificationStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetReceiverMids(), other.isSetReceiverMids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReceiverMids()) {
        lastComparison = TBaseHelper.compareTo(this.receiverMids, other.receiverMids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // NOTIFICATION_STATUS
            if (field.type == TType.I32) {
              this.notificationStatus = NotificationStatus.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // RECEIVER_MIDS
            if (field.type == TType.LIST) {
              {
                TList _list1049 = iprot.readListBegin();
                this.receiverMids = new Vector(_list1049.size);
                for (int _i1050 = 0; _i1050 < _list1049.size; ++_i1050)
                {
                  String _elem1051;
                  _elem1051 = iprot.readString();
                  this.receiverMids.addElement(_elem1051);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.notificationStatus != null) {
        oprot.writeFieldBegin(NOTIFICATION_STATUS_FIELD_DESC);
        oprot.writeI32(this.notificationStatus.getValue());
        oprot.writeFieldEnd();
      }
      if (this.receiverMids != null) {
        oprot.writeFieldBegin(RECEIVER_MIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.receiverMids.size()));
          for (Enumeration _iter1052_enum = this.receiverMids.elements(); _iter1052_enum.hasMoreElements(); )           {
            String _iter1052 = (String)_iter1052_enum.nextElement();
            oprot.writeString(_iter1052);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("notifyIndividualEvent_args(");
      boolean first = true;

      sb.append("notificationStatus:");
      if (this.notificationStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.notificationStatus);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("receiverMids:");
      if (this.receiverMids == null) {
        sb.append("null");
      } else {
        sb.append(this.receiverMids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class notifyIndividualEvent_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("notifyIndividualEvent_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public notifyIndividualEvent_result() {
    }

    public notifyIndividualEvent_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyIndividualEvent_result(notifyIndividualEvent_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public notifyIndividualEvent_result deepCopy() {
      return new notifyIndividualEvent_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyIndividualEvent_result)
        return this.equals((notifyIndividualEvent_result)that);
      return false;
    }

    public boolean equals(notifyIndividualEvent_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      notifyIndividualEvent_result other = (notifyIndividualEvent_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("notifyIndividualEvent_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class notifyInstalled_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("notifyInstalled_args");

    private static final TField UDID_HASH_FIELD_DESC = new TField("udidHash", TType.STRING, (short)2);
    private static final TField APPLICATION_TYPE_WITH_EXTENSIONS_FIELD_DESC = new TField("applicationTypeWithExtensions", TType.STRING, (short)3);

    private String udidHash;
    private String applicationTypeWithExtensions;

    // isset id assignments

    public notifyInstalled_args() {
    }

    public notifyInstalled_args(
      String udidHash,
      String applicationTypeWithExtensions)
    {
      this();
      this.udidHash = udidHash;
      this.applicationTypeWithExtensions = applicationTypeWithExtensions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyInstalled_args(notifyInstalled_args other) {
      if (other.isSetUdidHash()) {
        this.udidHash = other.udidHash;
      }
      if (other.isSetApplicationTypeWithExtensions()) {
        this.applicationTypeWithExtensions = other.applicationTypeWithExtensions;
      }
    }

    public notifyInstalled_args deepCopy() {
      return new notifyInstalled_args(this);
    }

    public void clear() {
      this.udidHash = null;
      this.applicationTypeWithExtensions = null;
    }

    public String getUdidHash() {
      return this.udidHash;
    }

    public void setUdidHash(String udidHash) {
      this.udidHash = udidHash;
    }

    public void unsetUdidHash() {
      this.udidHash = null;
    }

    /** Returns true if field udidHash is set (has been assigned a value) and false otherwise */
    public boolean isSetUdidHash() {
      return this.udidHash != null;
    }

    public void setUdidHashIsSet(boolean value) {
      if (!value) {
        this.udidHash = null;
      }
    }

    public String getApplicationTypeWithExtensions() {
      return this.applicationTypeWithExtensions;
    }

    public void setApplicationTypeWithExtensions(String applicationTypeWithExtensions) {
      this.applicationTypeWithExtensions = applicationTypeWithExtensions;
    }

    public void unsetApplicationTypeWithExtensions() {
      this.applicationTypeWithExtensions = null;
    }

    /** Returns true if field applicationTypeWithExtensions is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationTypeWithExtensions() {
      return this.applicationTypeWithExtensions != null;
    }

    public void setApplicationTypeWithExtensionsIsSet(boolean value) {
      if (!value) {
        this.applicationTypeWithExtensions = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyInstalled_args)
        return this.equals((notifyInstalled_args)that);
      return false;
    }

    public boolean equals(notifyInstalled_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_udidHash = true && this.isSetUdidHash();
      boolean that_present_udidHash = true && that.isSetUdidHash();
      if (this_present_udidHash || that_present_udidHash) {
        if (!(this_present_udidHash && that_present_udidHash))
          return false;
        if (!this.udidHash.equals(that.udidHash))
          return false;
      }

      boolean this_present_applicationTypeWithExtensions = true && this.isSetApplicationTypeWithExtensions();
      boolean that_present_applicationTypeWithExtensions = true && that.isSetApplicationTypeWithExtensions();
      if (this_present_applicationTypeWithExtensions || that_present_applicationTypeWithExtensions) {
        if (!(this_present_applicationTypeWithExtensions && that_present_applicationTypeWithExtensions))
          return false;
        if (!this.applicationTypeWithExtensions.equals(that.applicationTypeWithExtensions))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      notifyInstalled_args other = (notifyInstalled_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetUdidHash(), other.isSetUdidHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUdidHash()) {
        lastComparison = TBaseHelper.compareTo(this.udidHash, other.udidHash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetApplicationTypeWithExtensions(), other.isSetApplicationTypeWithExtensions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationTypeWithExtensions()) {
        lastComparison = TBaseHelper.compareTo(this.applicationTypeWithExtensions, other.applicationTypeWithExtensions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // UDID_HASH
            if (field.type == TType.STRING) {
              this.udidHash = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // APPLICATION_TYPE_WITH_EXTENSIONS
            if (field.type == TType.STRING) {
              this.applicationTypeWithExtensions = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.udidHash != null) {
        oprot.writeFieldBegin(UDID_HASH_FIELD_DESC);
        oprot.writeString(this.udidHash);
        oprot.writeFieldEnd();
      }
      if (this.applicationTypeWithExtensions != null) {
        oprot.writeFieldBegin(APPLICATION_TYPE_WITH_EXTENSIONS_FIELD_DESC);
        oprot.writeString(this.applicationTypeWithExtensions);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("notifyInstalled_args(");
      boolean first = true;

      sb.append("udidHash:");
      if (this.udidHash == null) {
        sb.append("null");
      } else {
        sb.append(this.udidHash);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applicationTypeWithExtensions:");
      if (this.applicationTypeWithExtensions == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationTypeWithExtensions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class notifyInstalled_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("notifyInstalled_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public notifyInstalled_result() {
    }

    public notifyInstalled_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyInstalled_result(notifyInstalled_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public notifyInstalled_result deepCopy() {
      return new notifyInstalled_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyInstalled_result)
        return this.equals((notifyInstalled_result)that);
      return false;
    }

    public boolean equals(notifyInstalled_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      notifyInstalled_result other = (notifyInstalled_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("notifyInstalled_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class notifyRegistrationComplete_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("notifyRegistrationComplete_args");

    private static final TField UDID_HASH_FIELD_DESC = new TField("udidHash", TType.STRING, (short)2);
    private static final TField APPLICATION_TYPE_WITH_EXTENSIONS_FIELD_DESC = new TField("applicationTypeWithExtensions", TType.STRING, (short)3);

    private String udidHash;
    private String applicationTypeWithExtensions;

    // isset id assignments

    public notifyRegistrationComplete_args() {
    }

    public notifyRegistrationComplete_args(
      String udidHash,
      String applicationTypeWithExtensions)
    {
      this();
      this.udidHash = udidHash;
      this.applicationTypeWithExtensions = applicationTypeWithExtensions;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyRegistrationComplete_args(notifyRegistrationComplete_args other) {
      if (other.isSetUdidHash()) {
        this.udidHash = other.udidHash;
      }
      if (other.isSetApplicationTypeWithExtensions()) {
        this.applicationTypeWithExtensions = other.applicationTypeWithExtensions;
      }
    }

    public notifyRegistrationComplete_args deepCopy() {
      return new notifyRegistrationComplete_args(this);
    }

    public void clear() {
      this.udidHash = null;
      this.applicationTypeWithExtensions = null;
    }

    public String getUdidHash() {
      return this.udidHash;
    }

    public void setUdidHash(String udidHash) {
      this.udidHash = udidHash;
    }

    public void unsetUdidHash() {
      this.udidHash = null;
    }

    /** Returns true if field udidHash is set (has been assigned a value) and false otherwise */
    public boolean isSetUdidHash() {
      return this.udidHash != null;
    }

    public void setUdidHashIsSet(boolean value) {
      if (!value) {
        this.udidHash = null;
      }
    }

    public String getApplicationTypeWithExtensions() {
      return this.applicationTypeWithExtensions;
    }

    public void setApplicationTypeWithExtensions(String applicationTypeWithExtensions) {
      this.applicationTypeWithExtensions = applicationTypeWithExtensions;
    }

    public void unsetApplicationTypeWithExtensions() {
      this.applicationTypeWithExtensions = null;
    }

    /** Returns true if field applicationTypeWithExtensions is set (has been assigned a value) and false otherwise */
    public boolean isSetApplicationTypeWithExtensions() {
      return this.applicationTypeWithExtensions != null;
    }

    public void setApplicationTypeWithExtensionsIsSet(boolean value) {
      if (!value) {
        this.applicationTypeWithExtensions = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyRegistrationComplete_args)
        return this.equals((notifyRegistrationComplete_args)that);
      return false;
    }

    public boolean equals(notifyRegistrationComplete_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_udidHash = true && this.isSetUdidHash();
      boolean that_present_udidHash = true && that.isSetUdidHash();
      if (this_present_udidHash || that_present_udidHash) {
        if (!(this_present_udidHash && that_present_udidHash))
          return false;
        if (!this.udidHash.equals(that.udidHash))
          return false;
      }

      boolean this_present_applicationTypeWithExtensions = true && this.isSetApplicationTypeWithExtensions();
      boolean that_present_applicationTypeWithExtensions = true && that.isSetApplicationTypeWithExtensions();
      if (this_present_applicationTypeWithExtensions || that_present_applicationTypeWithExtensions) {
        if (!(this_present_applicationTypeWithExtensions && that_present_applicationTypeWithExtensions))
          return false;
        if (!this.applicationTypeWithExtensions.equals(that.applicationTypeWithExtensions))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      notifyRegistrationComplete_args other = (notifyRegistrationComplete_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetUdidHash(), other.isSetUdidHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUdidHash()) {
        lastComparison = TBaseHelper.compareTo(this.udidHash, other.udidHash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetApplicationTypeWithExtensions(), other.isSetApplicationTypeWithExtensions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplicationTypeWithExtensions()) {
        lastComparison = TBaseHelper.compareTo(this.applicationTypeWithExtensions, other.applicationTypeWithExtensions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // UDID_HASH
            if (field.type == TType.STRING) {
              this.udidHash = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // APPLICATION_TYPE_WITH_EXTENSIONS
            if (field.type == TType.STRING) {
              this.applicationTypeWithExtensions = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.udidHash != null) {
        oprot.writeFieldBegin(UDID_HASH_FIELD_DESC);
        oprot.writeString(this.udidHash);
        oprot.writeFieldEnd();
      }
      if (this.applicationTypeWithExtensions != null) {
        oprot.writeFieldBegin(APPLICATION_TYPE_WITH_EXTENSIONS_FIELD_DESC);
        oprot.writeString(this.applicationTypeWithExtensions);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("notifyRegistrationComplete_args(");
      boolean first = true;

      sb.append("udidHash:");
      if (this.udidHash == null) {
        sb.append("null");
      } else {
        sb.append(this.udidHash);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applicationTypeWithExtensions:");
      if (this.applicationTypeWithExtensions == null) {
        sb.append("null");
      } else {
        sb.append(this.applicationTypeWithExtensions);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class notifyRegistrationComplete_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("notifyRegistrationComplete_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public notifyRegistrationComplete_result() {
    }

    public notifyRegistrationComplete_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyRegistrationComplete_result(notifyRegistrationComplete_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public notifyRegistrationComplete_result deepCopy() {
      return new notifyRegistrationComplete_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyRegistrationComplete_result)
        return this.equals((notifyRegistrationComplete_result)that);
      return false;
    }

    public boolean equals(notifyRegistrationComplete_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      notifyRegistrationComplete_result other = (notifyRegistrationComplete_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("notifyRegistrationComplete_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class notifySleep_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("notifySleep_args");

    private static final TField LAST_REV_FIELD_DESC = new TField("lastRev", TType.I64, (short)2);
    private static final TField BADGE_FIELD_DESC = new TField("badge", TType.I32, (short)3);

    private long lastRev;
    private int badge;

    // isset id assignments
    private static final int __LASTREV_ISSET_ID = 0;
    private static final int __BADGE_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public notifySleep_args() {
    }

    public notifySleep_args(
      long lastRev,
      int badge)
    {
      this();
      this.lastRev = lastRev;
      setLastRevIsSet(true);
      this.badge = badge;
      setBadgeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifySleep_args(notifySleep_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.lastRev = other.lastRev;
      this.badge = other.badge;
    }

    public notifySleep_args deepCopy() {
      return new notifySleep_args(this);
    }

    public void clear() {
      setLastRevIsSet(false);
      this.lastRev = 0;
      setBadgeIsSet(false);
      this.badge = 0;
    }

    public long getLastRev() {
      return this.lastRev;
    }

    public void setLastRev(long lastRev) {
      this.lastRev = lastRev;
      setLastRevIsSet(true);
    }

    public void unsetLastRev() {
      __isset_vector[__LASTREV_ISSET_ID] = false;
    }

    /** Returns true if field lastRev is set (has been assigned a value) and false otherwise */
    public boolean isSetLastRev() {
      return __isset_vector[__LASTREV_ISSET_ID];
    }

    public void setLastRevIsSet(boolean value) {
      __isset_vector[__LASTREV_ISSET_ID] = value;
    }

    public int getBadge() {
      return this.badge;
    }

    public void setBadge(int badge) {
      this.badge = badge;
      setBadgeIsSet(true);
    }

    public void unsetBadge() {
      __isset_vector[__BADGE_ISSET_ID] = false;
    }

    /** Returns true if field badge is set (has been assigned a value) and false otherwise */
    public boolean isSetBadge() {
      return __isset_vector[__BADGE_ISSET_ID];
    }

    public void setBadgeIsSet(boolean value) {
      __isset_vector[__BADGE_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifySleep_args)
        return this.equals((notifySleep_args)that);
      return false;
    }

    public boolean equals(notifySleep_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_lastRev = true;
      boolean that_present_lastRev = true;
      if (this_present_lastRev || that_present_lastRev) {
        if (!(this_present_lastRev && that_present_lastRev))
          return false;
        if (this.lastRev != that.lastRev)
          return false;
      }

      boolean this_present_badge = true;
      boolean that_present_badge = true;
      if (this_present_badge || that_present_badge) {
        if (!(this_present_badge && that_present_badge))
          return false;
        if (this.badge != that.badge)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      notifySleep_args other = (notifySleep_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetLastRev(), other.isSetLastRev());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastRev()) {
        lastComparison = TBaseHelper.compareTo(this.lastRev, other.lastRev);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetBadge(), other.isSetBadge());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBadge()) {
        lastComparison = TBaseHelper.compareTo(this.badge, other.badge);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // LAST_REV
            if (field.type == TType.I64) {
              this.lastRev = iprot.readI64();
              setLastRevIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // BADGE
            if (field.type == TType.I32) {
              this.badge = iprot.readI32();
              setBadgeIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LAST_REV_FIELD_DESC);
      oprot.writeI64(this.lastRev);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BADGE_FIELD_DESC);
      oprot.writeI32(this.badge);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("notifySleep_args(");
      boolean first = true;

      sb.append("lastRev:");
      sb.append(this.lastRev);
      first = false;
      if (!first) sb.append(", ");
      sb.append("badge:");
      sb.append(this.badge);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class notifySleep_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("notifySleep_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public notifySleep_result() {
    }

    public notifySleep_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifySleep_result(notifySleep_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public notifySleep_result deepCopy() {
      return new notifySleep_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifySleep_result)
        return this.equals((notifySleep_result)that);
      return false;
    }

    public boolean equals(notifySleep_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      notifySleep_result other = (notifySleep_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("notifySleep_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class notifyUpdated_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("notifyUpdated_args");

    private static final TField LAST_REV_FIELD_DESC = new TField("lastRev", TType.I64, (short)2);
    private static final TField DEVICE_INFO_FIELD_DESC = new TField("deviceInfo", TType.STRUCT, (short)3);

    private long lastRev;
    private DeviceInfo deviceInfo;

    // isset id assignments
    private static final int __LASTREV_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public notifyUpdated_args() {
    }

    public notifyUpdated_args(
      long lastRev,
      DeviceInfo deviceInfo)
    {
      this();
      this.lastRev = lastRev;
      setLastRevIsSet(true);
      this.deviceInfo = deviceInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyUpdated_args(notifyUpdated_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.lastRev = other.lastRev;
      if (other.isSetDeviceInfo()) {
        this.deviceInfo = new DeviceInfo(other.deviceInfo);
      }
    }

    public notifyUpdated_args deepCopy() {
      return new notifyUpdated_args(this);
    }

    public void clear() {
      setLastRevIsSet(false);
      this.lastRev = 0;
      this.deviceInfo = null;
    }

    public long getLastRev() {
      return this.lastRev;
    }

    public void setLastRev(long lastRev) {
      this.lastRev = lastRev;
      setLastRevIsSet(true);
    }

    public void unsetLastRev() {
      __isset_vector[__LASTREV_ISSET_ID] = false;
    }

    /** Returns true if field lastRev is set (has been assigned a value) and false otherwise */
    public boolean isSetLastRev() {
      return __isset_vector[__LASTREV_ISSET_ID];
    }

    public void setLastRevIsSet(boolean value) {
      __isset_vector[__LASTREV_ISSET_ID] = value;
    }

    public DeviceInfo getDeviceInfo() {
      return this.deviceInfo;
    }

    public void setDeviceInfo(DeviceInfo deviceInfo) {
      this.deviceInfo = deviceInfo;
    }

    public void unsetDeviceInfo() {
      this.deviceInfo = null;
    }

    /** Returns true if field deviceInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceInfo() {
      return this.deviceInfo != null;
    }

    public void setDeviceInfoIsSet(boolean value) {
      if (!value) {
        this.deviceInfo = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyUpdated_args)
        return this.equals((notifyUpdated_args)that);
      return false;
    }

    public boolean equals(notifyUpdated_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_lastRev = true;
      boolean that_present_lastRev = true;
      if (this_present_lastRev || that_present_lastRev) {
        if (!(this_present_lastRev && that_present_lastRev))
          return false;
        if (this.lastRev != that.lastRev)
          return false;
      }

      boolean this_present_deviceInfo = true && this.isSetDeviceInfo();
      boolean that_present_deviceInfo = true && that.isSetDeviceInfo();
      if (this_present_deviceInfo || that_present_deviceInfo) {
        if (!(this_present_deviceInfo && that_present_deviceInfo))
          return false;
        if (!this.deviceInfo.equals(that.deviceInfo))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      notifyUpdated_args other = (notifyUpdated_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetLastRev(), other.isSetLastRev());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastRev()) {
        lastComparison = TBaseHelper.compareTo(this.lastRev, other.lastRev);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetDeviceInfo(), other.isSetDeviceInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceInfo()) {
        lastComparison = this.deviceInfo.compareTo(other.deviceInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // LAST_REV
            if (field.type == TType.I64) {
              this.lastRev = iprot.readI64();
              setLastRevIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // DEVICE_INFO
            if (field.type == TType.STRUCT) {
              this.deviceInfo = new DeviceInfo();
              this.deviceInfo.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LAST_REV_FIELD_DESC);
      oprot.writeI64(this.lastRev);
      oprot.writeFieldEnd();
      if (this.deviceInfo != null) {
        oprot.writeFieldBegin(DEVICE_INFO_FIELD_DESC);
        this.deviceInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("notifyUpdated_args(");
      boolean first = true;

      sb.append("lastRev:");
      sb.append(this.lastRev);
      first = false;
      if (!first) sb.append(", ");
      sb.append("deviceInfo:");
      if (this.deviceInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class notifyUpdated_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("notifyUpdated_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public notifyUpdated_result() {
    }

    public notifyUpdated_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyUpdated_result(notifyUpdated_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public notifyUpdated_result deepCopy() {
      return new notifyUpdated_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyUpdated_result)
        return this.equals((notifyUpdated_result)that);
      return false;
    }

    public boolean equals(notifyUpdated_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      notifyUpdated_result other = (notifyUpdated_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("notifyUpdated_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class openProximityMatch_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("openProximityMatch_args");

    private static final TField LOCATION_FIELD_DESC = new TField("location", TType.STRUCT, (short)2);

    private Location location;

    // isset id assignments

    public openProximityMatch_args() {
    }

    public openProximityMatch_args(
      Location location)
    {
      this();
      this.location = location;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openProximityMatch_args(openProximityMatch_args other) {
      if (other.isSetLocation()) {
        this.location = new Location(other.location);
      }
    }

    public openProximityMatch_args deepCopy() {
      return new openProximityMatch_args(this);
    }

    public void clear() {
      this.location = null;
    }

    public Location getLocation() {
      return this.location;
    }

    public void setLocation(Location location) {
      this.location = location;
    }

    public void unsetLocation() {
      this.location = null;
    }

    /** Returns true if field location is set (has been assigned a value) and false otherwise */
    public boolean isSetLocation() {
      return this.location != null;
    }

    public void setLocationIsSet(boolean value) {
      if (!value) {
        this.location = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openProximityMatch_args)
        return this.equals((openProximityMatch_args)that);
      return false;
    }

    public boolean equals(openProximityMatch_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_location = true && this.isSetLocation();
      boolean that_present_location = true && that.isSetLocation();
      if (this_present_location || that_present_location) {
        if (!(this_present_location && that_present_location))
          return false;
        if (!this.location.equals(that.location))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      openProximityMatch_args other = (openProximityMatch_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetLocation(), other.isSetLocation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocation()) {
        lastComparison = this.location.compareTo(other.location);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // LOCATION
            if (field.type == TType.STRUCT) {
              this.location = new Location();
              this.location.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.location != null) {
        oprot.writeFieldBegin(LOCATION_FIELD_DESC);
        this.location.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("openProximityMatch_args(");
      boolean first = true;

      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class openProximityMatch_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("openProximityMatch_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public openProximityMatch_result() {
    }

    public openProximityMatch_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openProximityMatch_result(openProximityMatch_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public openProximityMatch_result deepCopy() {
      return new openProximityMatch_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openProximityMatch_result)
        return this.equals((openProximityMatch_result)that);
      return false;
    }

    public boolean equals(openProximityMatch_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      openProximityMatch_result other = (openProximityMatch_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("openProximityMatch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerBuddyUser_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerBuddyUser_args");

    private static final TField BUDDY_ID_FIELD_DESC = new TField("buddyId", TType.STRING, (short)2);
    private static final TField REGISTRAR_PASSWORD_FIELD_DESC = new TField("registrarPassword", TType.STRING, (short)3);

    private String buddyId;
    private String registrarPassword;

    // isset id assignments

    public registerBuddyUser_args() {
    }

    public registerBuddyUser_args(
      String buddyId,
      String registrarPassword)
    {
      this();
      this.buddyId = buddyId;
      this.registrarPassword = registrarPassword;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerBuddyUser_args(registerBuddyUser_args other) {
      if (other.isSetBuddyId()) {
        this.buddyId = other.buddyId;
      }
      if (other.isSetRegistrarPassword()) {
        this.registrarPassword = other.registrarPassword;
      }
    }

    public registerBuddyUser_args deepCopy() {
      return new registerBuddyUser_args(this);
    }

    public void clear() {
      this.buddyId = null;
      this.registrarPassword = null;
    }

    public String getBuddyId() {
      return this.buddyId;
    }

    public void setBuddyId(String buddyId) {
      this.buddyId = buddyId;
    }

    public void unsetBuddyId() {
      this.buddyId = null;
    }

    /** Returns true if field buddyId is set (has been assigned a value) and false otherwise */
    public boolean isSetBuddyId() {
      return this.buddyId != null;
    }

    public void setBuddyIdIsSet(boolean value) {
      if (!value) {
        this.buddyId = null;
      }
    }

    public String getRegistrarPassword() {
      return this.registrarPassword;
    }

    public void setRegistrarPassword(String registrarPassword) {
      this.registrarPassword = registrarPassword;
    }

    public void unsetRegistrarPassword() {
      this.registrarPassword = null;
    }

    /** Returns true if field registrarPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetRegistrarPassword() {
      return this.registrarPassword != null;
    }

    public void setRegistrarPasswordIsSet(boolean value) {
      if (!value) {
        this.registrarPassword = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerBuddyUser_args)
        return this.equals((registerBuddyUser_args)that);
      return false;
    }

    public boolean equals(registerBuddyUser_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_buddyId = true && this.isSetBuddyId();
      boolean that_present_buddyId = true && that.isSetBuddyId();
      if (this_present_buddyId || that_present_buddyId) {
        if (!(this_present_buddyId && that_present_buddyId))
          return false;
        if (!this.buddyId.equals(that.buddyId))
          return false;
      }

      boolean this_present_registrarPassword = true && this.isSetRegistrarPassword();
      boolean that_present_registrarPassword = true && that.isSetRegistrarPassword();
      if (this_present_registrarPassword || that_present_registrarPassword) {
        if (!(this_present_registrarPassword && that_present_registrarPassword))
          return false;
        if (!this.registrarPassword.equals(that.registrarPassword))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerBuddyUser_args other = (registerBuddyUser_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetBuddyId(), other.isSetBuddyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBuddyId()) {
        lastComparison = TBaseHelper.compareTo(this.buddyId, other.buddyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetRegistrarPassword(), other.isSetRegistrarPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegistrarPassword()) {
        lastComparison = TBaseHelper.compareTo(this.registrarPassword, other.registrarPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // BUDDY_ID
            if (field.type == TType.STRING) {
              this.buddyId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // REGISTRAR_PASSWORD
            if (field.type == TType.STRING) {
              this.registrarPassword = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.buddyId != null) {
        oprot.writeFieldBegin(BUDDY_ID_FIELD_DESC);
        oprot.writeString(this.buddyId);
        oprot.writeFieldEnd();
      }
      if (this.registrarPassword != null) {
        oprot.writeFieldBegin(REGISTRAR_PASSWORD_FIELD_DESC);
        oprot.writeString(this.registrarPassword);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerBuddyUser_args(");
      boolean first = true;

      sb.append("buddyId:");
      if (this.buddyId == null) {
        sb.append("null");
      } else {
        sb.append(this.buddyId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("registrarPassword:");
      if (this.registrarPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.registrarPassword);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerBuddyUser_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerBuddyUser_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public registerBuddyUser_result() {
    }

    public registerBuddyUser_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerBuddyUser_result(registerBuddyUser_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public registerBuddyUser_result deepCopy() {
      return new registerBuddyUser_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerBuddyUser_result)
        return this.equals((registerBuddyUser_result)that);
      return false;
    }

    public boolean equals(registerBuddyUser_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerBuddyUser_result other = (registerBuddyUser_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerBuddyUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerBuddyUserid_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerBuddyUserid_args");

    private static final TField SEQ_FIELD_DESC = new TField("seq", TType.I32, (short)2);
    private static final TField USERID_FIELD_DESC = new TField("userid", TType.STRING, (short)3);

    private int seq;
    private String userid;

    // isset id assignments
    private static final int __SEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public registerBuddyUserid_args() {
    }

    public registerBuddyUserid_args(
      int seq,
      String userid)
    {
      this();
      this.seq = seq;
      setSeqIsSet(true);
      this.userid = userid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerBuddyUserid_args(registerBuddyUserid_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.seq = other.seq;
      if (other.isSetUserid()) {
        this.userid = other.userid;
      }
    }

    public registerBuddyUserid_args deepCopy() {
      return new registerBuddyUserid_args(this);
    }

    public void clear() {
      setSeqIsSet(false);
      this.seq = 0;
      this.userid = null;
    }

    public int getSeq() {
      return this.seq;
    }

    public void setSeq(int seq) {
      this.seq = seq;
      setSeqIsSet(true);
    }

    public void unsetSeq() {
      __isset_vector[__SEQ_ISSET_ID] = false;
    }

    /** Returns true if field seq is set (has been assigned a value) and false otherwise */
    public boolean isSetSeq() {
      return __isset_vector[__SEQ_ISSET_ID];
    }

    public void setSeqIsSet(boolean value) {
      __isset_vector[__SEQ_ISSET_ID] = value;
    }

    public String getUserid() {
      return this.userid;
    }

    public void setUserid(String userid) {
      this.userid = userid;
    }

    public void unsetUserid() {
      this.userid = null;
    }

    /** Returns true if field userid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserid() {
      return this.userid != null;
    }

    public void setUseridIsSet(boolean value) {
      if (!value) {
        this.userid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerBuddyUserid_args)
        return this.equals((registerBuddyUserid_args)that);
      return false;
    }

    public boolean equals(registerBuddyUserid_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_seq = true;
      boolean that_present_seq = true;
      if (this_present_seq || that_present_seq) {
        if (!(this_present_seq && that_present_seq))
          return false;
        if (this.seq != that.seq)
          return false;
      }

      boolean this_present_userid = true && this.isSetUserid();
      boolean that_present_userid = true && that.isSetUserid();
      if (this_present_userid || that_present_userid) {
        if (!(this_present_userid && that_present_userid))
          return false;
        if (!this.userid.equals(that.userid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerBuddyUserid_args other = (registerBuddyUserid_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSeq(), other.isSetSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeq()) {
        lastComparison = TBaseHelper.compareTo(this.seq, other.seq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserid(), other.isSetUserid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserid()) {
        lastComparison = TBaseHelper.compareTo(this.userid, other.userid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // SEQ
            if (field.type == TType.I32) {
              this.seq = iprot.readI32();
              setSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // USERID
            if (field.type == TType.STRING) {
              this.userid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQ_FIELD_DESC);
      oprot.writeI32(this.seq);
      oprot.writeFieldEnd();
      if (this.userid != null) {
        oprot.writeFieldBegin(USERID_FIELD_DESC);
        oprot.writeString(this.userid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerBuddyUserid_args(");
      boolean first = true;

      sb.append("seq:");
      sb.append(this.seq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userid:");
      if (this.userid == null) {
        sb.append("null");
      } else {
        sb.append(this.userid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerBuddyUserid_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerBuddyUserid_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public registerBuddyUserid_result() {
    }

    public registerBuddyUserid_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerBuddyUserid_result(registerBuddyUserid_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public registerBuddyUserid_result deepCopy() {
      return new registerBuddyUserid_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerBuddyUserid_result)
        return this.equals((registerBuddyUserid_result)that);
      return false;
    }

    public boolean equals(registerBuddyUserid_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerBuddyUserid_result other = (registerBuddyUserid_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerBuddyUserid_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerDevice_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerDevice_args");

    private static final TField SESSION_ID_FIELD_DESC = new TField("sessionId", TType.STRING, (short)2);

    private String sessionId;

    // isset id assignments

    public registerDevice_args() {
    }

    public registerDevice_args(
      String sessionId)
    {
      this();
      this.sessionId = sessionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerDevice_args(registerDevice_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
    }

    public registerDevice_args deepCopy() {
      return new registerDevice_args(this);
    }

    public void clear() {
      this.sessionId = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public void setSessionId(String sessionId) {
      this.sessionId = sessionId;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerDevice_args)
        return this.equals((registerDevice_args)that);
      return false;
    }

    public boolean equals(registerDevice_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerDevice_args other = (registerDevice_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSessionId(), other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // SESSION_ID
            if (field.type == TType.STRING) {
              this.sessionId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.sessionId != null) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeString(this.sessionId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerDevice_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerDevice_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerDevice_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public registerDevice_result() {
    }

    public registerDevice_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerDevice_result(registerDevice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public registerDevice_result deepCopy() {
      return new registerDevice_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerDevice_result)
        return this.equals((registerDevice_result)that);
      return false;
    }

    public boolean equals(registerDevice_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerDevice_result other = (registerDevice_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerDevice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerDeviceWithIdentityCredential_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerDeviceWithIdentityCredential_args");

    private static final TField SESSION_ID_FIELD_DESC = new TField("sessionId", TType.STRING, (short)2);
    private static final TField PROVIDER_FIELD_DESC = new TField("provider", TType.I32, (short)5);
    private static final TField IDENTIFIER_FIELD_DESC = new TField("identifier", TType.STRING, (short)3);
    private static final TField VERIFIER_FIELD_DESC = new TField("verifier", TType.STRING, (short)4);

    private String sessionId;
    private IdentityProvider provider;
    private String identifier;
    private String verifier;

    // isset id assignments

    public registerDeviceWithIdentityCredential_args() {
    }

    public registerDeviceWithIdentityCredential_args(
      String sessionId,
      IdentityProvider provider,
      String identifier,
      String verifier)
    {
      this();
      this.sessionId = sessionId;
      this.provider = provider;
      this.identifier = identifier;
      this.verifier = verifier;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerDeviceWithIdentityCredential_args(registerDeviceWithIdentityCredential_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
      if (other.isSetProvider()) {
        this.provider = other.provider;
      }
      if (other.isSetIdentifier()) {
        this.identifier = other.identifier;
      }
      if (other.isSetVerifier()) {
        this.verifier = other.verifier;
      }
    }

    public registerDeviceWithIdentityCredential_args deepCopy() {
      return new registerDeviceWithIdentityCredential_args(this);
    }

    public void clear() {
      this.sessionId = null;
      this.provider = null;
      this.identifier = null;
      this.verifier = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public void setSessionId(String sessionId) {
      this.sessionId = sessionId;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    /**
     * 
     * @see IdentityProvider
     */
    public IdentityProvider getProvider() {
      return this.provider;
    }

    /**
     * 
     * @see IdentityProvider
     */
    public void setProvider(IdentityProvider provider) {
      this.provider = provider;
    }

    public void unsetProvider() {
      this.provider = null;
    }

    /** Returns true if field provider is set (has been assigned a value) and false otherwise */
    public boolean isSetProvider() {
      return this.provider != null;
    }

    public void setProviderIsSet(boolean value) {
      if (!value) {
        this.provider = null;
      }
    }

    public String getIdentifier() {
      return this.identifier;
    }

    public void setIdentifier(String identifier) {
      this.identifier = identifier;
    }

    public void unsetIdentifier() {
      this.identifier = null;
    }

    /** Returns true if field identifier is set (has been assigned a value) and false otherwise */
    public boolean isSetIdentifier() {
      return this.identifier != null;
    }

    public void setIdentifierIsSet(boolean value) {
      if (!value) {
        this.identifier = null;
      }
    }

    public String getVerifier() {
      return this.verifier;
    }

    public void setVerifier(String verifier) {
      this.verifier = verifier;
    }

    public void unsetVerifier() {
      this.verifier = null;
    }

    /** Returns true if field verifier is set (has been assigned a value) and false otherwise */
    public boolean isSetVerifier() {
      return this.verifier != null;
    }

    public void setVerifierIsSet(boolean value) {
      if (!value) {
        this.verifier = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerDeviceWithIdentityCredential_args)
        return this.equals((registerDeviceWithIdentityCredential_args)that);
      return false;
    }

    public boolean equals(registerDeviceWithIdentityCredential_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      boolean this_present_provider = true && this.isSetProvider();
      boolean that_present_provider = true && that.isSetProvider();
      if (this_present_provider || that_present_provider) {
        if (!(this_present_provider && that_present_provider))
          return false;
        if (!this.provider.equals(that.provider))
          return false;
      }

      boolean this_present_identifier = true && this.isSetIdentifier();
      boolean that_present_identifier = true && that.isSetIdentifier();
      if (this_present_identifier || that_present_identifier) {
        if (!(this_present_identifier && that_present_identifier))
          return false;
        if (!this.identifier.equals(that.identifier))
          return false;
      }

      boolean this_present_verifier = true && this.isSetVerifier();
      boolean that_present_verifier = true && that.isSetVerifier();
      if (this_present_verifier || that_present_verifier) {
        if (!(this_present_verifier && that_present_verifier))
          return false;
        if (!this.verifier.equals(that.verifier))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerDeviceWithIdentityCredential_args other = (registerDeviceWithIdentityCredential_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSessionId(), other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetProvider(), other.isSetProvider());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProvider()) {
        lastComparison = TBaseHelper.compareTo(this.provider, other.provider);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetIdentifier(), other.isSetIdentifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdentifier()) {
        lastComparison = TBaseHelper.compareTo(this.identifier, other.identifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetVerifier(), other.isSetVerifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVerifier()) {
        lastComparison = TBaseHelper.compareTo(this.verifier, other.verifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // SESSION_ID
            if (field.type == TType.STRING) {
              this.sessionId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // PROVIDER
            if (field.type == TType.I32) {
              this.provider = IdentityProvider.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // IDENTIFIER
            if (field.type == TType.STRING) {
              this.identifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // VERIFIER
            if (field.type == TType.STRING) {
              this.verifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.sessionId != null) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeString(this.sessionId);
        oprot.writeFieldEnd();
      }
      if (this.identifier != null) {
        oprot.writeFieldBegin(IDENTIFIER_FIELD_DESC);
        oprot.writeString(this.identifier);
        oprot.writeFieldEnd();
      }
      if (this.verifier != null) {
        oprot.writeFieldBegin(VERIFIER_FIELD_DESC);
        oprot.writeString(this.verifier);
        oprot.writeFieldEnd();
      }
      if (this.provider != null) {
        oprot.writeFieldBegin(PROVIDER_FIELD_DESC);
        oprot.writeI32(this.provider.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerDeviceWithIdentityCredential_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("provider:");
      if (this.provider == null) {
        sb.append("null");
      } else {
        sb.append(this.provider);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("identifier:");
      if (this.identifier == null) {
        sb.append("null");
      } else {
        sb.append(this.identifier);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("verifier:");
      if (this.verifier == null) {
        sb.append("null");
      } else {
        sb.append(this.verifier);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerDeviceWithIdentityCredential_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerDeviceWithIdentityCredential_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public registerDeviceWithIdentityCredential_result() {
    }

    public registerDeviceWithIdentityCredential_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerDeviceWithIdentityCredential_result(registerDeviceWithIdentityCredential_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public registerDeviceWithIdentityCredential_result deepCopy() {
      return new registerDeviceWithIdentityCredential_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerDeviceWithIdentityCredential_result)
        return this.equals((registerDeviceWithIdentityCredential_result)that);
      return false;
    }

    public boolean equals(registerDeviceWithIdentityCredential_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerDeviceWithIdentityCredential_result other = (registerDeviceWithIdentityCredential_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerDeviceWithIdentityCredential_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerDeviceWithoutPhoneNumber_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerDeviceWithoutPhoneNumber_args");

    private static final TField REGION_FIELD_DESC = new TField("region", TType.STRING, (short)2);
    private static final TField UDID_HASH_FIELD_DESC = new TField("udidHash", TType.STRING, (short)3);
    private static final TField DEVICE_INFO_FIELD_DESC = new TField("deviceInfo", TType.STRUCT, (short)4);

    private String region;
    private String udidHash;
    private DeviceInfo deviceInfo;

    // isset id assignments

    public registerDeviceWithoutPhoneNumber_args() {
    }

    public registerDeviceWithoutPhoneNumber_args(
      String region,
      String udidHash,
      DeviceInfo deviceInfo)
    {
      this();
      this.region = region;
      this.udidHash = udidHash;
      this.deviceInfo = deviceInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerDeviceWithoutPhoneNumber_args(registerDeviceWithoutPhoneNumber_args other) {
      if (other.isSetRegion()) {
        this.region = other.region;
      }
      if (other.isSetUdidHash()) {
        this.udidHash = other.udidHash;
      }
      if (other.isSetDeviceInfo()) {
        this.deviceInfo = new DeviceInfo(other.deviceInfo);
      }
    }

    public registerDeviceWithoutPhoneNumber_args deepCopy() {
      return new registerDeviceWithoutPhoneNumber_args(this);
    }

    public void clear() {
      this.region = null;
      this.udidHash = null;
      this.deviceInfo = null;
    }

    public String getRegion() {
      return this.region;
    }

    public void setRegion(String region) {
      this.region = region;
    }

    public void unsetRegion() {
      this.region = null;
    }

    /** Returns true if field region is set (has been assigned a value) and false otherwise */
    public boolean isSetRegion() {
      return this.region != null;
    }

    public void setRegionIsSet(boolean value) {
      if (!value) {
        this.region = null;
      }
    }

    public String getUdidHash() {
      return this.udidHash;
    }

    public void setUdidHash(String udidHash) {
      this.udidHash = udidHash;
    }

    public void unsetUdidHash() {
      this.udidHash = null;
    }

    /** Returns true if field udidHash is set (has been assigned a value) and false otherwise */
    public boolean isSetUdidHash() {
      return this.udidHash != null;
    }

    public void setUdidHashIsSet(boolean value) {
      if (!value) {
        this.udidHash = null;
      }
    }

    public DeviceInfo getDeviceInfo() {
      return this.deviceInfo;
    }

    public void setDeviceInfo(DeviceInfo deviceInfo) {
      this.deviceInfo = deviceInfo;
    }

    public void unsetDeviceInfo() {
      this.deviceInfo = null;
    }

    /** Returns true if field deviceInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceInfo() {
      return this.deviceInfo != null;
    }

    public void setDeviceInfoIsSet(boolean value) {
      if (!value) {
        this.deviceInfo = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerDeviceWithoutPhoneNumber_args)
        return this.equals((registerDeviceWithoutPhoneNumber_args)that);
      return false;
    }

    public boolean equals(registerDeviceWithoutPhoneNumber_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_region = true && this.isSetRegion();
      boolean that_present_region = true && that.isSetRegion();
      if (this_present_region || that_present_region) {
        if (!(this_present_region && that_present_region))
          return false;
        if (!this.region.equals(that.region))
          return false;
      }

      boolean this_present_udidHash = true && this.isSetUdidHash();
      boolean that_present_udidHash = true && that.isSetUdidHash();
      if (this_present_udidHash || that_present_udidHash) {
        if (!(this_present_udidHash && that_present_udidHash))
          return false;
        if (!this.udidHash.equals(that.udidHash))
          return false;
      }

      boolean this_present_deviceInfo = true && this.isSetDeviceInfo();
      boolean that_present_deviceInfo = true && that.isSetDeviceInfo();
      if (this_present_deviceInfo || that_present_deviceInfo) {
        if (!(this_present_deviceInfo && that_present_deviceInfo))
          return false;
        if (!this.deviceInfo.equals(that.deviceInfo))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerDeviceWithoutPhoneNumber_args other = (registerDeviceWithoutPhoneNumber_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRegion(), other.isSetRegion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegion()) {
        lastComparison = TBaseHelper.compareTo(this.region, other.region);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUdidHash(), other.isSetUdidHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUdidHash()) {
        lastComparison = TBaseHelper.compareTo(this.udidHash, other.udidHash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetDeviceInfo(), other.isSetDeviceInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceInfo()) {
        lastComparison = this.deviceInfo.compareTo(other.deviceInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // REGION
            if (field.type == TType.STRING) {
              this.region = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // UDID_HASH
            if (field.type == TType.STRING) {
              this.udidHash = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // DEVICE_INFO
            if (field.type == TType.STRUCT) {
              this.deviceInfo = new DeviceInfo();
              this.deviceInfo.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.region != null) {
        oprot.writeFieldBegin(REGION_FIELD_DESC);
        oprot.writeString(this.region);
        oprot.writeFieldEnd();
      }
      if (this.udidHash != null) {
        oprot.writeFieldBegin(UDID_HASH_FIELD_DESC);
        oprot.writeString(this.udidHash);
        oprot.writeFieldEnd();
      }
      if (this.deviceInfo != null) {
        oprot.writeFieldBegin(DEVICE_INFO_FIELD_DESC);
        this.deviceInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerDeviceWithoutPhoneNumber_args(");
      boolean first = true;

      sb.append("region:");
      if (this.region == null) {
        sb.append("null");
      } else {
        sb.append(this.region);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("udidHash:");
      if (this.udidHash == null) {
        sb.append("null");
      } else {
        sb.append(this.udidHash);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deviceInfo:");
      if (this.deviceInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerDeviceWithoutPhoneNumber_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerDeviceWithoutPhoneNumber_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public registerDeviceWithoutPhoneNumber_result() {
    }

    public registerDeviceWithoutPhoneNumber_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerDeviceWithoutPhoneNumber_result(registerDeviceWithoutPhoneNumber_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public registerDeviceWithoutPhoneNumber_result deepCopy() {
      return new registerDeviceWithoutPhoneNumber_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerDeviceWithoutPhoneNumber_result)
        return this.equals((registerDeviceWithoutPhoneNumber_result)that);
      return false;
    }

    public boolean equals(registerDeviceWithoutPhoneNumber_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerDeviceWithoutPhoneNumber_result other = (registerDeviceWithoutPhoneNumber_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerDeviceWithoutPhoneNumber_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerDeviceWithoutPhoneNumberWithIdentityCredential_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerDeviceWithoutPhoneNumberWithIdentityCredential_args");

    private static final TField REGION_FIELD_DESC = new TField("region", TType.STRING, (short)2);
    private static final TField UDID_HASH_FIELD_DESC = new TField("udidHash", TType.STRING, (short)3);
    private static final TField DEVICE_INFO_FIELD_DESC = new TField("deviceInfo", TType.STRUCT, (short)4);
    private static final TField PROVIDER_FIELD_DESC = new TField("provider", TType.I32, (short)5);
    private static final TField IDENTIFIER_FIELD_DESC = new TField("identifier", TType.STRING, (short)6);
    private static final TField VERIFIER_FIELD_DESC = new TField("verifier", TType.STRING, (short)7);
    private static final TField MID_FIELD_DESC = new TField("mid", TType.STRING, (short)8);
    private static final TField MIGRATION_PINCODE_SESSION_ID_FIELD_DESC = new TField("migrationPincodeSessionId", TType.STRING, (short)9);

    private String region;
    private String udidHash;
    private DeviceInfo deviceInfo;
    private IdentityProvider provider;
    private String identifier;
    private String verifier;
    private String mid;
    private String migrationPincodeSessionId;

    // isset id assignments

    public registerDeviceWithoutPhoneNumberWithIdentityCredential_args() {
    }

    public registerDeviceWithoutPhoneNumberWithIdentityCredential_args(
      String region,
      String udidHash,
      DeviceInfo deviceInfo,
      IdentityProvider provider,
      String identifier,
      String verifier,
      String mid,
      String migrationPincodeSessionId)
    {
      this();
      this.region = region;
      this.udidHash = udidHash;
      this.deviceInfo = deviceInfo;
      this.provider = provider;
      this.identifier = identifier;
      this.verifier = verifier;
      this.mid = mid;
      this.migrationPincodeSessionId = migrationPincodeSessionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerDeviceWithoutPhoneNumberWithIdentityCredential_args(registerDeviceWithoutPhoneNumberWithIdentityCredential_args other) {
      if (other.isSetRegion()) {
        this.region = other.region;
      }
      if (other.isSetUdidHash()) {
        this.udidHash = other.udidHash;
      }
      if (other.isSetDeviceInfo()) {
        this.deviceInfo = new DeviceInfo(other.deviceInfo);
      }
      if (other.isSetProvider()) {
        this.provider = other.provider;
      }
      if (other.isSetIdentifier()) {
        this.identifier = other.identifier;
      }
      if (other.isSetVerifier()) {
        this.verifier = other.verifier;
      }
      if (other.isSetMid()) {
        this.mid = other.mid;
      }
      if (other.isSetMigrationPincodeSessionId()) {
        this.migrationPincodeSessionId = other.migrationPincodeSessionId;
      }
    }

    public registerDeviceWithoutPhoneNumberWithIdentityCredential_args deepCopy() {
      return new registerDeviceWithoutPhoneNumberWithIdentityCredential_args(this);
    }

    public void clear() {
      this.region = null;
      this.udidHash = null;
      this.deviceInfo = null;
      this.provider = null;
      this.identifier = null;
      this.verifier = null;
      this.mid = null;
      this.migrationPincodeSessionId = null;
    }

    public String getRegion() {
      return this.region;
    }

    public void setRegion(String region) {
      this.region = region;
    }

    public void unsetRegion() {
      this.region = null;
    }

    /** Returns true if field region is set (has been assigned a value) and false otherwise */
    public boolean isSetRegion() {
      return this.region != null;
    }

    public void setRegionIsSet(boolean value) {
      if (!value) {
        this.region = null;
      }
    }

    public String getUdidHash() {
      return this.udidHash;
    }

    public void setUdidHash(String udidHash) {
      this.udidHash = udidHash;
    }

    public void unsetUdidHash() {
      this.udidHash = null;
    }

    /** Returns true if field udidHash is set (has been assigned a value) and false otherwise */
    public boolean isSetUdidHash() {
      return this.udidHash != null;
    }

    public void setUdidHashIsSet(boolean value) {
      if (!value) {
        this.udidHash = null;
      }
    }

    public DeviceInfo getDeviceInfo() {
      return this.deviceInfo;
    }

    public void setDeviceInfo(DeviceInfo deviceInfo) {
      this.deviceInfo = deviceInfo;
    }

    public void unsetDeviceInfo() {
      this.deviceInfo = null;
    }

    /** Returns true if field deviceInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceInfo() {
      return this.deviceInfo != null;
    }

    public void setDeviceInfoIsSet(boolean value) {
      if (!value) {
        this.deviceInfo = null;
      }
    }

    /**
     * 
     * @see IdentityProvider
     */
    public IdentityProvider getProvider() {
      return this.provider;
    }

    /**
     * 
     * @see IdentityProvider
     */
    public void setProvider(IdentityProvider provider) {
      this.provider = provider;
    }

    public void unsetProvider() {
      this.provider = null;
    }

    /** Returns true if field provider is set (has been assigned a value) and false otherwise */
    public boolean isSetProvider() {
      return this.provider != null;
    }

    public void setProviderIsSet(boolean value) {
      if (!value) {
        this.provider = null;
      }
    }

    public String getIdentifier() {
      return this.identifier;
    }

    public void setIdentifier(String identifier) {
      this.identifier = identifier;
    }

    public void unsetIdentifier() {
      this.identifier = null;
    }

    /** Returns true if field identifier is set (has been assigned a value) and false otherwise */
    public boolean isSetIdentifier() {
      return this.identifier != null;
    }

    public void setIdentifierIsSet(boolean value) {
      if (!value) {
        this.identifier = null;
      }
    }

    public String getVerifier() {
      return this.verifier;
    }

    public void setVerifier(String verifier) {
      this.verifier = verifier;
    }

    public void unsetVerifier() {
      this.verifier = null;
    }

    /** Returns true if field verifier is set (has been assigned a value) and false otherwise */
    public boolean isSetVerifier() {
      return this.verifier != null;
    }

    public void setVerifierIsSet(boolean value) {
      if (!value) {
        this.verifier = null;
      }
    }

    public String getMid() {
      return this.mid;
    }

    public void setMid(String mid) {
      this.mid = mid;
    }

    public void unsetMid() {
      this.mid = null;
    }

    /** Returns true if field mid is set (has been assigned a value) and false otherwise */
    public boolean isSetMid() {
      return this.mid != null;
    }

    public void setMidIsSet(boolean value) {
      if (!value) {
        this.mid = null;
      }
    }

    public String getMigrationPincodeSessionId() {
      return this.migrationPincodeSessionId;
    }

    public void setMigrationPincodeSessionId(String migrationPincodeSessionId) {
      this.migrationPincodeSessionId = migrationPincodeSessionId;
    }

    public void unsetMigrationPincodeSessionId() {
      this.migrationPincodeSessionId = null;
    }

    /** Returns true if field migrationPincodeSessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetMigrationPincodeSessionId() {
      return this.migrationPincodeSessionId != null;
    }

    public void setMigrationPincodeSessionIdIsSet(boolean value) {
      if (!value) {
        this.migrationPincodeSessionId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerDeviceWithoutPhoneNumberWithIdentityCredential_args)
        return this.equals((registerDeviceWithoutPhoneNumberWithIdentityCredential_args)that);
      return false;
    }

    public boolean equals(registerDeviceWithoutPhoneNumberWithIdentityCredential_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_region = true && this.isSetRegion();
      boolean that_present_region = true && that.isSetRegion();
      if (this_present_region || that_present_region) {
        if (!(this_present_region && that_present_region))
          return false;
        if (!this.region.equals(that.region))
          return false;
      }

      boolean this_present_udidHash = true && this.isSetUdidHash();
      boolean that_present_udidHash = true && that.isSetUdidHash();
      if (this_present_udidHash || that_present_udidHash) {
        if (!(this_present_udidHash && that_present_udidHash))
          return false;
        if (!this.udidHash.equals(that.udidHash))
          return false;
      }

      boolean this_present_deviceInfo = true && this.isSetDeviceInfo();
      boolean that_present_deviceInfo = true && that.isSetDeviceInfo();
      if (this_present_deviceInfo || that_present_deviceInfo) {
        if (!(this_present_deviceInfo && that_present_deviceInfo))
          return false;
        if (!this.deviceInfo.equals(that.deviceInfo))
          return false;
      }

      boolean this_present_provider = true && this.isSetProvider();
      boolean that_present_provider = true && that.isSetProvider();
      if (this_present_provider || that_present_provider) {
        if (!(this_present_provider && that_present_provider))
          return false;
        if (!this.provider.equals(that.provider))
          return false;
      }

      boolean this_present_identifier = true && this.isSetIdentifier();
      boolean that_present_identifier = true && that.isSetIdentifier();
      if (this_present_identifier || that_present_identifier) {
        if (!(this_present_identifier && that_present_identifier))
          return false;
        if (!this.identifier.equals(that.identifier))
          return false;
      }

      boolean this_present_verifier = true && this.isSetVerifier();
      boolean that_present_verifier = true && that.isSetVerifier();
      if (this_present_verifier || that_present_verifier) {
        if (!(this_present_verifier && that_present_verifier))
          return false;
        if (!this.verifier.equals(that.verifier))
          return false;
      }

      boolean this_present_mid = true && this.isSetMid();
      boolean that_present_mid = true && that.isSetMid();
      if (this_present_mid || that_present_mid) {
        if (!(this_present_mid && that_present_mid))
          return false;
        if (!this.mid.equals(that.mid))
          return false;
      }

      boolean this_present_migrationPincodeSessionId = true && this.isSetMigrationPincodeSessionId();
      boolean that_present_migrationPincodeSessionId = true && that.isSetMigrationPincodeSessionId();
      if (this_present_migrationPincodeSessionId || that_present_migrationPincodeSessionId) {
        if (!(this_present_migrationPincodeSessionId && that_present_migrationPincodeSessionId))
          return false;
        if (!this.migrationPincodeSessionId.equals(that.migrationPincodeSessionId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerDeviceWithoutPhoneNumberWithIdentityCredential_args other = (registerDeviceWithoutPhoneNumberWithIdentityCredential_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRegion(), other.isSetRegion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegion()) {
        lastComparison = TBaseHelper.compareTo(this.region, other.region);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUdidHash(), other.isSetUdidHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUdidHash()) {
        lastComparison = TBaseHelper.compareTo(this.udidHash, other.udidHash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetDeviceInfo(), other.isSetDeviceInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceInfo()) {
        lastComparison = this.deviceInfo.compareTo(other.deviceInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetProvider(), other.isSetProvider());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProvider()) {
        lastComparison = TBaseHelper.compareTo(this.provider, other.provider);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetIdentifier(), other.isSetIdentifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdentifier()) {
        lastComparison = TBaseHelper.compareTo(this.identifier, other.identifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetVerifier(), other.isSetVerifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVerifier()) {
        lastComparison = TBaseHelper.compareTo(this.verifier, other.verifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMid(), other.isSetMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMid()) {
        lastComparison = TBaseHelper.compareTo(this.mid, other.mid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMigrationPincodeSessionId(), other.isSetMigrationPincodeSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMigrationPincodeSessionId()) {
        lastComparison = TBaseHelper.compareTo(this.migrationPincodeSessionId, other.migrationPincodeSessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // REGION
            if (field.type == TType.STRING) {
              this.region = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // UDID_HASH
            if (field.type == TType.STRING) {
              this.udidHash = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // DEVICE_INFO
            if (field.type == TType.STRUCT) {
              this.deviceInfo = new DeviceInfo();
              this.deviceInfo.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // PROVIDER
            if (field.type == TType.I32) {
              this.provider = IdentityProvider.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // IDENTIFIER
            if (field.type == TType.STRING) {
              this.identifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // VERIFIER
            if (field.type == TType.STRING) {
              this.verifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 8: // MID
            if (field.type == TType.STRING) {
              this.mid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 9: // MIGRATION_PINCODE_SESSION_ID
            if (field.type == TType.STRING) {
              this.migrationPincodeSessionId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.region != null) {
        oprot.writeFieldBegin(REGION_FIELD_DESC);
        oprot.writeString(this.region);
        oprot.writeFieldEnd();
      }
      if (this.udidHash != null) {
        oprot.writeFieldBegin(UDID_HASH_FIELD_DESC);
        oprot.writeString(this.udidHash);
        oprot.writeFieldEnd();
      }
      if (this.deviceInfo != null) {
        oprot.writeFieldBegin(DEVICE_INFO_FIELD_DESC);
        this.deviceInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.provider != null) {
        oprot.writeFieldBegin(PROVIDER_FIELD_DESC);
        oprot.writeI32(this.provider.getValue());
        oprot.writeFieldEnd();
      }
      if (this.identifier != null) {
        oprot.writeFieldBegin(IDENTIFIER_FIELD_DESC);
        oprot.writeString(this.identifier);
        oprot.writeFieldEnd();
      }
      if (this.verifier != null) {
        oprot.writeFieldBegin(VERIFIER_FIELD_DESC);
        oprot.writeString(this.verifier);
        oprot.writeFieldEnd();
      }
      if (this.mid != null) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeString(this.mid);
        oprot.writeFieldEnd();
      }
      if (this.migrationPincodeSessionId != null) {
        oprot.writeFieldBegin(MIGRATION_PINCODE_SESSION_ID_FIELD_DESC);
        oprot.writeString(this.migrationPincodeSessionId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerDeviceWithoutPhoneNumberWithIdentityCredential_args(");
      boolean first = true;

      sb.append("region:");
      if (this.region == null) {
        sb.append("null");
      } else {
        sb.append(this.region);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("udidHash:");
      if (this.udidHash == null) {
        sb.append("null");
      } else {
        sb.append(this.udidHash);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deviceInfo:");
      if (this.deviceInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("provider:");
      if (this.provider == null) {
        sb.append("null");
      } else {
        sb.append(this.provider);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("identifier:");
      if (this.identifier == null) {
        sb.append("null");
      } else {
        sb.append(this.identifier);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("verifier:");
      if (this.verifier == null) {
        sb.append("null");
      } else {
        sb.append(this.verifier);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mid:");
      if (this.mid == null) {
        sb.append("null");
      } else {
        sb.append(this.mid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("migrationPincodeSessionId:");
      if (this.migrationPincodeSessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.migrationPincodeSessionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerDeviceWithoutPhoneNumberWithIdentityCredential_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerDeviceWithoutPhoneNumberWithIdentityCredential_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public registerDeviceWithoutPhoneNumberWithIdentityCredential_result() {
    }

    public registerDeviceWithoutPhoneNumberWithIdentityCredential_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerDeviceWithoutPhoneNumberWithIdentityCredential_result(registerDeviceWithoutPhoneNumberWithIdentityCredential_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public registerDeviceWithoutPhoneNumberWithIdentityCredential_result deepCopy() {
      return new registerDeviceWithoutPhoneNumberWithIdentityCredential_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerDeviceWithoutPhoneNumberWithIdentityCredential_result)
        return this.equals((registerDeviceWithoutPhoneNumberWithIdentityCredential_result)that);
      return false;
    }

    public boolean equals(registerDeviceWithoutPhoneNumberWithIdentityCredential_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerDeviceWithoutPhoneNumberWithIdentityCredential_result other = (registerDeviceWithoutPhoneNumberWithIdentityCredential_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerDeviceWithoutPhoneNumberWithIdentityCredential_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerUserid_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerUserid_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField USERID_FIELD_DESC = new TField("userid", TType.STRING, (short)2);

    private int reqSeq;
    private String userid;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public registerUserid_args() {
    }

    public registerUserid_args(
      int reqSeq,
      String userid)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.userid = userid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerUserid_args(registerUserid_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetUserid()) {
        this.userid = other.userid;
      }
    }

    public registerUserid_args deepCopy() {
      return new registerUserid_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.userid = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public String getUserid() {
      return this.userid;
    }

    public void setUserid(String userid) {
      this.userid = userid;
    }

    public void unsetUserid() {
      this.userid = null;
    }

    /** Returns true if field userid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserid() {
      return this.userid != null;
    }

    public void setUseridIsSet(boolean value) {
      if (!value) {
        this.userid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerUserid_args)
        return this.equals((registerUserid_args)that);
      return false;
    }

    public boolean equals(registerUserid_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_userid = true && this.isSetUserid();
      boolean that_present_userid = true && that.isSetUserid();
      if (this_present_userid || that_present_userid) {
        if (!(this_present_userid && that_present_userid))
          return false;
        if (!this.userid.equals(that.userid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerUserid_args other = (registerUserid_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserid(), other.isSetUserid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserid()) {
        lastComparison = TBaseHelper.compareTo(this.userid, other.userid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USERID
            if (field.type == TType.STRING) {
              this.userid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.userid != null) {
        oprot.writeFieldBegin(USERID_FIELD_DESC);
        oprot.writeString(this.userid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerUserid_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userid:");
      if (this.userid == null) {
        sb.append("null");
      } else {
        sb.append(this.userid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerUserid_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerUserid_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private boolean success;
    private TalkException e;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public registerUserid_result() {
    }

    public registerUserid_result(
      boolean success,
      TalkException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerUserid_result(registerUserid_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public registerUserid_result deepCopy() {
      return new registerUserid_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerUserid_result)
        return this.equals((registerUserid_result)that);
      return false;
    }

    public boolean equals(registerUserid_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerUserid_result other = (registerUserid_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerUserid_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerWapDevice_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerWapDevice_args");

    private static final TField INVITATION_HASH_FIELD_DESC = new TField("invitationHash", TType.STRING, (short)2);
    private static final TField GUID_HASH_FIELD_DESC = new TField("guidHash", TType.STRING, (short)3);
    private static final TField EMAIL_FIELD_DESC = new TField("email", TType.STRING, (short)4);
    private static final TField DEVICE_INFO_FIELD_DESC = new TField("deviceInfo", TType.STRUCT, (short)5);

    private String invitationHash;
    private String guidHash;
    private String email;
    private DeviceInfo deviceInfo;

    // isset id assignments

    public registerWapDevice_args() {
    }

    public registerWapDevice_args(
      String invitationHash,
      String guidHash,
      String email,
      DeviceInfo deviceInfo)
    {
      this();
      this.invitationHash = invitationHash;
      this.guidHash = guidHash;
      this.email = email;
      this.deviceInfo = deviceInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerWapDevice_args(registerWapDevice_args other) {
      if (other.isSetInvitationHash()) {
        this.invitationHash = other.invitationHash;
      }
      if (other.isSetGuidHash()) {
        this.guidHash = other.guidHash;
      }
      if (other.isSetEmail()) {
        this.email = other.email;
      }
      if (other.isSetDeviceInfo()) {
        this.deviceInfo = new DeviceInfo(other.deviceInfo);
      }
    }

    public registerWapDevice_args deepCopy() {
      return new registerWapDevice_args(this);
    }

    public void clear() {
      this.invitationHash = null;
      this.guidHash = null;
      this.email = null;
      this.deviceInfo = null;
    }

    public String getInvitationHash() {
      return this.invitationHash;
    }

    public void setInvitationHash(String invitationHash) {
      this.invitationHash = invitationHash;
    }

    public void unsetInvitationHash() {
      this.invitationHash = null;
    }

    /** Returns true if field invitationHash is set (has been assigned a value) and false otherwise */
    public boolean isSetInvitationHash() {
      return this.invitationHash != null;
    }

    public void setInvitationHashIsSet(boolean value) {
      if (!value) {
        this.invitationHash = null;
      }
    }

    public String getGuidHash() {
      return this.guidHash;
    }

    public void setGuidHash(String guidHash) {
      this.guidHash = guidHash;
    }

    public void unsetGuidHash() {
      this.guidHash = null;
    }

    /** Returns true if field guidHash is set (has been assigned a value) and false otherwise */
    public boolean isSetGuidHash() {
      return this.guidHash != null;
    }

    public void setGuidHashIsSet(boolean value) {
      if (!value) {
        this.guidHash = null;
      }
    }

    public String getEmail() {
      return this.email;
    }

    public void setEmail(String email) {
      this.email = email;
    }

    public void unsetEmail() {
      this.email = null;
    }

    /** Returns true if field email is set (has been assigned a value) and false otherwise */
    public boolean isSetEmail() {
      return this.email != null;
    }

    public void setEmailIsSet(boolean value) {
      if (!value) {
        this.email = null;
      }
    }

    public DeviceInfo getDeviceInfo() {
      return this.deviceInfo;
    }

    public void setDeviceInfo(DeviceInfo deviceInfo) {
      this.deviceInfo = deviceInfo;
    }

    public void unsetDeviceInfo() {
      this.deviceInfo = null;
    }

    /** Returns true if field deviceInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceInfo() {
      return this.deviceInfo != null;
    }

    public void setDeviceInfoIsSet(boolean value) {
      if (!value) {
        this.deviceInfo = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerWapDevice_args)
        return this.equals((registerWapDevice_args)that);
      return false;
    }

    public boolean equals(registerWapDevice_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_invitationHash = true && this.isSetInvitationHash();
      boolean that_present_invitationHash = true && that.isSetInvitationHash();
      if (this_present_invitationHash || that_present_invitationHash) {
        if (!(this_present_invitationHash && that_present_invitationHash))
          return false;
        if (!this.invitationHash.equals(that.invitationHash))
          return false;
      }

      boolean this_present_guidHash = true && this.isSetGuidHash();
      boolean that_present_guidHash = true && that.isSetGuidHash();
      if (this_present_guidHash || that_present_guidHash) {
        if (!(this_present_guidHash && that_present_guidHash))
          return false;
        if (!this.guidHash.equals(that.guidHash))
          return false;
      }

      boolean this_present_email = true && this.isSetEmail();
      boolean that_present_email = true && that.isSetEmail();
      if (this_present_email || that_present_email) {
        if (!(this_present_email && that_present_email))
          return false;
        if (!this.email.equals(that.email))
          return false;
      }

      boolean this_present_deviceInfo = true && this.isSetDeviceInfo();
      boolean that_present_deviceInfo = true && that.isSetDeviceInfo();
      if (this_present_deviceInfo || that_present_deviceInfo) {
        if (!(this_present_deviceInfo && that_present_deviceInfo))
          return false;
        if (!this.deviceInfo.equals(that.deviceInfo))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerWapDevice_args other = (registerWapDevice_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetInvitationHash(), other.isSetInvitationHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInvitationHash()) {
        lastComparison = TBaseHelper.compareTo(this.invitationHash, other.invitationHash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGuidHash(), other.isSetGuidHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGuidHash()) {
        lastComparison = TBaseHelper.compareTo(this.guidHash, other.guidHash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetEmail(), other.isSetEmail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmail()) {
        lastComparison = TBaseHelper.compareTo(this.email, other.email);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetDeviceInfo(), other.isSetDeviceInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceInfo()) {
        lastComparison = this.deviceInfo.compareTo(other.deviceInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // INVITATION_HASH
            if (field.type == TType.STRING) {
              this.invitationHash = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // GUID_HASH
            if (field.type == TType.STRING) {
              this.guidHash = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // EMAIL
            if (field.type == TType.STRING) {
              this.email = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // DEVICE_INFO
            if (field.type == TType.STRUCT) {
              this.deviceInfo = new DeviceInfo();
              this.deviceInfo.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.invitationHash != null) {
        oprot.writeFieldBegin(INVITATION_HASH_FIELD_DESC);
        oprot.writeString(this.invitationHash);
        oprot.writeFieldEnd();
      }
      if (this.guidHash != null) {
        oprot.writeFieldBegin(GUID_HASH_FIELD_DESC);
        oprot.writeString(this.guidHash);
        oprot.writeFieldEnd();
      }
      if (this.email != null) {
        oprot.writeFieldBegin(EMAIL_FIELD_DESC);
        oprot.writeString(this.email);
        oprot.writeFieldEnd();
      }
      if (this.deviceInfo != null) {
        oprot.writeFieldBegin(DEVICE_INFO_FIELD_DESC);
        this.deviceInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerWapDevice_args(");
      boolean first = true;

      sb.append("invitationHash:");
      if (this.invitationHash == null) {
        sb.append("null");
      } else {
        sb.append(this.invitationHash);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("guidHash:");
      if (this.guidHash == null) {
        sb.append("null");
      } else {
        sb.append(this.guidHash);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("email:");
      if (this.email == null) {
        sb.append("null");
      } else {
        sb.append(this.email);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deviceInfo:");
      if (this.deviceInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerWapDevice_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerWapDevice_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public registerWapDevice_result() {
    }

    public registerWapDevice_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerWapDevice_result(registerWapDevice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public registerWapDevice_result deepCopy() {
      return new registerWapDevice_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerWapDevice_result)
        return this.equals((registerWapDevice_result)that);
      return false;
    }

    public boolean equals(registerWapDevice_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerWapDevice_result other = (registerWapDevice_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerWapDevice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerWithExistingSnsIdAndIdentityCredential_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerWithExistingSnsIdAndIdentityCredential_args");

    private static final TField IDENTITY_CREDENTIAL_FIELD_DESC = new TField("identityCredential", TType.STRUCT, (short)2);
    private static final TField REGION_FIELD_DESC = new TField("region", TType.STRING, (short)3);
    private static final TField UDID_HASH_FIELD_DESC = new TField("udidHash", TType.STRING, (short)4);
    private static final TField DEVICE_INFO_FIELD_DESC = new TField("deviceInfo", TType.STRUCT, (short)5);

    private IdentityCredential identityCredential;
    private String region;
    private String udidHash;
    private DeviceInfo deviceInfo;

    // isset id assignments

    public registerWithExistingSnsIdAndIdentityCredential_args() {
    }

    public registerWithExistingSnsIdAndIdentityCredential_args(
      IdentityCredential identityCredential,
      String region,
      String udidHash,
      DeviceInfo deviceInfo)
    {
      this();
      this.identityCredential = identityCredential;
      this.region = region;
      this.udidHash = udidHash;
      this.deviceInfo = deviceInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerWithExistingSnsIdAndIdentityCredential_args(registerWithExistingSnsIdAndIdentityCredential_args other) {
      if (other.isSetIdentityCredential()) {
        this.identityCredential = new IdentityCredential(other.identityCredential);
      }
      if (other.isSetRegion()) {
        this.region = other.region;
      }
      if (other.isSetUdidHash()) {
        this.udidHash = other.udidHash;
      }
      if (other.isSetDeviceInfo()) {
        this.deviceInfo = new DeviceInfo(other.deviceInfo);
      }
    }

    public registerWithExistingSnsIdAndIdentityCredential_args deepCopy() {
      return new registerWithExistingSnsIdAndIdentityCredential_args(this);
    }

    public void clear() {
      this.identityCredential = null;
      this.region = null;
      this.udidHash = null;
      this.deviceInfo = null;
    }

    public IdentityCredential getIdentityCredential() {
      return this.identityCredential;
    }

    public void setIdentityCredential(IdentityCredential identityCredential) {
      this.identityCredential = identityCredential;
    }

    public void unsetIdentityCredential() {
      this.identityCredential = null;
    }

    /** Returns true if field identityCredential is set (has been assigned a value) and false otherwise */
    public boolean isSetIdentityCredential() {
      return this.identityCredential != null;
    }

    public void setIdentityCredentialIsSet(boolean value) {
      if (!value) {
        this.identityCredential = null;
      }
    }

    public String getRegion() {
      return this.region;
    }

    public void setRegion(String region) {
      this.region = region;
    }

    public void unsetRegion() {
      this.region = null;
    }

    /** Returns true if field region is set (has been assigned a value) and false otherwise */
    public boolean isSetRegion() {
      return this.region != null;
    }

    public void setRegionIsSet(boolean value) {
      if (!value) {
        this.region = null;
      }
    }

    public String getUdidHash() {
      return this.udidHash;
    }

    public void setUdidHash(String udidHash) {
      this.udidHash = udidHash;
    }

    public void unsetUdidHash() {
      this.udidHash = null;
    }

    /** Returns true if field udidHash is set (has been assigned a value) and false otherwise */
    public boolean isSetUdidHash() {
      return this.udidHash != null;
    }

    public void setUdidHashIsSet(boolean value) {
      if (!value) {
        this.udidHash = null;
      }
    }

    public DeviceInfo getDeviceInfo() {
      return this.deviceInfo;
    }

    public void setDeviceInfo(DeviceInfo deviceInfo) {
      this.deviceInfo = deviceInfo;
    }

    public void unsetDeviceInfo() {
      this.deviceInfo = null;
    }

    /** Returns true if field deviceInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceInfo() {
      return this.deviceInfo != null;
    }

    public void setDeviceInfoIsSet(boolean value) {
      if (!value) {
        this.deviceInfo = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerWithExistingSnsIdAndIdentityCredential_args)
        return this.equals((registerWithExistingSnsIdAndIdentityCredential_args)that);
      return false;
    }

    public boolean equals(registerWithExistingSnsIdAndIdentityCredential_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_identityCredential = true && this.isSetIdentityCredential();
      boolean that_present_identityCredential = true && that.isSetIdentityCredential();
      if (this_present_identityCredential || that_present_identityCredential) {
        if (!(this_present_identityCredential && that_present_identityCredential))
          return false;
        if (!this.identityCredential.equals(that.identityCredential))
          return false;
      }

      boolean this_present_region = true && this.isSetRegion();
      boolean that_present_region = true && that.isSetRegion();
      if (this_present_region || that_present_region) {
        if (!(this_present_region && that_present_region))
          return false;
        if (!this.region.equals(that.region))
          return false;
      }

      boolean this_present_udidHash = true && this.isSetUdidHash();
      boolean that_present_udidHash = true && that.isSetUdidHash();
      if (this_present_udidHash || that_present_udidHash) {
        if (!(this_present_udidHash && that_present_udidHash))
          return false;
        if (!this.udidHash.equals(that.udidHash))
          return false;
      }

      boolean this_present_deviceInfo = true && this.isSetDeviceInfo();
      boolean that_present_deviceInfo = true && that.isSetDeviceInfo();
      if (this_present_deviceInfo || that_present_deviceInfo) {
        if (!(this_present_deviceInfo && that_present_deviceInfo))
          return false;
        if (!this.deviceInfo.equals(that.deviceInfo))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerWithExistingSnsIdAndIdentityCredential_args other = (registerWithExistingSnsIdAndIdentityCredential_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetIdentityCredential(), other.isSetIdentityCredential());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdentityCredential()) {
        lastComparison = this.identityCredential.compareTo(other.identityCredential);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetRegion(), other.isSetRegion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegion()) {
        lastComparison = TBaseHelper.compareTo(this.region, other.region);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUdidHash(), other.isSetUdidHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUdidHash()) {
        lastComparison = TBaseHelper.compareTo(this.udidHash, other.udidHash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetDeviceInfo(), other.isSetDeviceInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceInfo()) {
        lastComparison = this.deviceInfo.compareTo(other.deviceInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // IDENTITY_CREDENTIAL
            if (field.type == TType.STRUCT) {
              this.identityCredential = new IdentityCredential();
              this.identityCredential.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // REGION
            if (field.type == TType.STRING) {
              this.region = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // UDID_HASH
            if (field.type == TType.STRING) {
              this.udidHash = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // DEVICE_INFO
            if (field.type == TType.STRUCT) {
              this.deviceInfo = new DeviceInfo();
              this.deviceInfo.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.identityCredential != null) {
        oprot.writeFieldBegin(IDENTITY_CREDENTIAL_FIELD_DESC);
        this.identityCredential.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.region != null) {
        oprot.writeFieldBegin(REGION_FIELD_DESC);
        oprot.writeString(this.region);
        oprot.writeFieldEnd();
      }
      if (this.udidHash != null) {
        oprot.writeFieldBegin(UDID_HASH_FIELD_DESC);
        oprot.writeString(this.udidHash);
        oprot.writeFieldEnd();
      }
      if (this.deviceInfo != null) {
        oprot.writeFieldBegin(DEVICE_INFO_FIELD_DESC);
        this.deviceInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerWithExistingSnsIdAndIdentityCredential_args(");
      boolean first = true;

      sb.append("identityCredential:");
      if (this.identityCredential == null) {
        sb.append("null");
      } else {
        sb.append(this.identityCredential);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("region:");
      if (this.region == null) {
        sb.append("null");
      } else {
        sb.append(this.region);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("udidHash:");
      if (this.udidHash == null) {
        sb.append("null");
      } else {
        sb.append(this.udidHash);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deviceInfo:");
      if (this.deviceInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerWithExistingSnsIdAndIdentityCredential_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerWithExistingSnsIdAndIdentityCredential_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public registerWithExistingSnsIdAndIdentityCredential_result() {
    }

    public registerWithExistingSnsIdAndIdentityCredential_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerWithExistingSnsIdAndIdentityCredential_result(registerWithExistingSnsIdAndIdentityCredential_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public registerWithExistingSnsIdAndIdentityCredential_result deepCopy() {
      return new registerWithExistingSnsIdAndIdentityCredential_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerWithExistingSnsIdAndIdentityCredential_result)
        return this.equals((registerWithExistingSnsIdAndIdentityCredential_result)that);
      return false;
    }

    public boolean equals(registerWithExistingSnsIdAndIdentityCredential_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerWithExistingSnsIdAndIdentityCredential_result other = (registerWithExistingSnsIdAndIdentityCredential_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerWithExistingSnsIdAndIdentityCredential_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerWithSnsId_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerWithSnsId_args");

    private static final TField SNS_ID_TYPE_FIELD_DESC = new TField("snsIdType", TType.I32, (short)2);
    private static final TField SNS_ACCESS_TOKEN_FIELD_DESC = new TField("snsAccessToken", TType.STRING, (short)3);
    private static final TField REGION_FIELD_DESC = new TField("region", TType.STRING, (short)4);
    private static final TField UDID_HASH_FIELD_DESC = new TField("udidHash", TType.STRING, (short)5);
    private static final TField DEVICE_INFO_FIELD_DESC = new TField("deviceInfo", TType.STRUCT, (short)6);
    private static final TField MID_FIELD_DESC = new TField("mid", TType.STRING, (short)7);

    private SnsIdType snsIdType;
    private String snsAccessToken;
    private String region;
    private String udidHash;
    private DeviceInfo deviceInfo;
    private String mid;

    // isset id assignments

    public registerWithSnsId_args() {
    }

    public registerWithSnsId_args(
      SnsIdType snsIdType,
      String snsAccessToken,
      String region,
      String udidHash,
      DeviceInfo deviceInfo,
      String mid)
    {
      this();
      this.snsIdType = snsIdType;
      this.snsAccessToken = snsAccessToken;
      this.region = region;
      this.udidHash = udidHash;
      this.deviceInfo = deviceInfo;
      this.mid = mid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerWithSnsId_args(registerWithSnsId_args other) {
      if (other.isSetSnsIdType()) {
        this.snsIdType = other.snsIdType;
      }
      if (other.isSetSnsAccessToken()) {
        this.snsAccessToken = other.snsAccessToken;
      }
      if (other.isSetRegion()) {
        this.region = other.region;
      }
      if (other.isSetUdidHash()) {
        this.udidHash = other.udidHash;
      }
      if (other.isSetDeviceInfo()) {
        this.deviceInfo = new DeviceInfo(other.deviceInfo);
      }
      if (other.isSetMid()) {
        this.mid = other.mid;
      }
    }

    public registerWithSnsId_args deepCopy() {
      return new registerWithSnsId_args(this);
    }

    public void clear() {
      this.snsIdType = null;
      this.snsAccessToken = null;
      this.region = null;
      this.udidHash = null;
      this.deviceInfo = null;
      this.mid = null;
    }

    /**
     * 
     * @see SnsIdType
     */
    public SnsIdType getSnsIdType() {
      return this.snsIdType;
    }

    /**
     * 
     * @see SnsIdType
     */
    public void setSnsIdType(SnsIdType snsIdType) {
      this.snsIdType = snsIdType;
    }

    public void unsetSnsIdType() {
      this.snsIdType = null;
    }

    /** Returns true if field snsIdType is set (has been assigned a value) and false otherwise */
    public boolean isSetSnsIdType() {
      return this.snsIdType != null;
    }

    public void setSnsIdTypeIsSet(boolean value) {
      if (!value) {
        this.snsIdType = null;
      }
    }

    public String getSnsAccessToken() {
      return this.snsAccessToken;
    }

    public void setSnsAccessToken(String snsAccessToken) {
      this.snsAccessToken = snsAccessToken;
    }

    public void unsetSnsAccessToken() {
      this.snsAccessToken = null;
    }

    /** Returns true if field snsAccessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSnsAccessToken() {
      return this.snsAccessToken != null;
    }

    public void setSnsAccessTokenIsSet(boolean value) {
      if (!value) {
        this.snsAccessToken = null;
      }
    }

    public String getRegion() {
      return this.region;
    }

    public void setRegion(String region) {
      this.region = region;
    }

    public void unsetRegion() {
      this.region = null;
    }

    /** Returns true if field region is set (has been assigned a value) and false otherwise */
    public boolean isSetRegion() {
      return this.region != null;
    }

    public void setRegionIsSet(boolean value) {
      if (!value) {
        this.region = null;
      }
    }

    public String getUdidHash() {
      return this.udidHash;
    }

    public void setUdidHash(String udidHash) {
      this.udidHash = udidHash;
    }

    public void unsetUdidHash() {
      this.udidHash = null;
    }

    /** Returns true if field udidHash is set (has been assigned a value) and false otherwise */
    public boolean isSetUdidHash() {
      return this.udidHash != null;
    }

    public void setUdidHashIsSet(boolean value) {
      if (!value) {
        this.udidHash = null;
      }
    }

    public DeviceInfo getDeviceInfo() {
      return this.deviceInfo;
    }

    public void setDeviceInfo(DeviceInfo deviceInfo) {
      this.deviceInfo = deviceInfo;
    }

    public void unsetDeviceInfo() {
      this.deviceInfo = null;
    }

    /** Returns true if field deviceInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceInfo() {
      return this.deviceInfo != null;
    }

    public void setDeviceInfoIsSet(boolean value) {
      if (!value) {
        this.deviceInfo = null;
      }
    }

    public String getMid() {
      return this.mid;
    }

    public void setMid(String mid) {
      this.mid = mid;
    }

    public void unsetMid() {
      this.mid = null;
    }

    /** Returns true if field mid is set (has been assigned a value) and false otherwise */
    public boolean isSetMid() {
      return this.mid != null;
    }

    public void setMidIsSet(boolean value) {
      if (!value) {
        this.mid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerWithSnsId_args)
        return this.equals((registerWithSnsId_args)that);
      return false;
    }

    public boolean equals(registerWithSnsId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_snsIdType = true && this.isSetSnsIdType();
      boolean that_present_snsIdType = true && that.isSetSnsIdType();
      if (this_present_snsIdType || that_present_snsIdType) {
        if (!(this_present_snsIdType && that_present_snsIdType))
          return false;
        if (!this.snsIdType.equals(that.snsIdType))
          return false;
      }

      boolean this_present_snsAccessToken = true && this.isSetSnsAccessToken();
      boolean that_present_snsAccessToken = true && that.isSetSnsAccessToken();
      if (this_present_snsAccessToken || that_present_snsAccessToken) {
        if (!(this_present_snsAccessToken && that_present_snsAccessToken))
          return false;
        if (!this.snsAccessToken.equals(that.snsAccessToken))
          return false;
      }

      boolean this_present_region = true && this.isSetRegion();
      boolean that_present_region = true && that.isSetRegion();
      if (this_present_region || that_present_region) {
        if (!(this_present_region && that_present_region))
          return false;
        if (!this.region.equals(that.region))
          return false;
      }

      boolean this_present_udidHash = true && this.isSetUdidHash();
      boolean that_present_udidHash = true && that.isSetUdidHash();
      if (this_present_udidHash || that_present_udidHash) {
        if (!(this_present_udidHash && that_present_udidHash))
          return false;
        if (!this.udidHash.equals(that.udidHash))
          return false;
      }

      boolean this_present_deviceInfo = true && this.isSetDeviceInfo();
      boolean that_present_deviceInfo = true && that.isSetDeviceInfo();
      if (this_present_deviceInfo || that_present_deviceInfo) {
        if (!(this_present_deviceInfo && that_present_deviceInfo))
          return false;
        if (!this.deviceInfo.equals(that.deviceInfo))
          return false;
      }

      boolean this_present_mid = true && this.isSetMid();
      boolean that_present_mid = true && that.isSetMid();
      if (this_present_mid || that_present_mid) {
        if (!(this_present_mid && that_present_mid))
          return false;
        if (!this.mid.equals(that.mid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerWithSnsId_args other = (registerWithSnsId_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSnsIdType(), other.isSetSnsIdType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSnsIdType()) {
        lastComparison = TBaseHelper.compareTo(this.snsIdType, other.snsIdType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSnsAccessToken(), other.isSetSnsAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSnsAccessToken()) {
        lastComparison = TBaseHelper.compareTo(this.snsAccessToken, other.snsAccessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetRegion(), other.isSetRegion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegion()) {
        lastComparison = TBaseHelper.compareTo(this.region, other.region);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUdidHash(), other.isSetUdidHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUdidHash()) {
        lastComparison = TBaseHelper.compareTo(this.udidHash, other.udidHash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetDeviceInfo(), other.isSetDeviceInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceInfo()) {
        lastComparison = this.deviceInfo.compareTo(other.deviceInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMid(), other.isSetMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMid()) {
        lastComparison = TBaseHelper.compareTo(this.mid, other.mid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // SNS_ID_TYPE
            if (field.type == TType.I32) {
              this.snsIdType = SnsIdType.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SNS_ACCESS_TOKEN
            if (field.type == TType.STRING) {
              this.snsAccessToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // REGION
            if (field.type == TType.STRING) {
              this.region = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // UDID_HASH
            if (field.type == TType.STRING) {
              this.udidHash = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // DEVICE_INFO
            if (field.type == TType.STRUCT) {
              this.deviceInfo = new DeviceInfo();
              this.deviceInfo.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // MID
            if (field.type == TType.STRING) {
              this.mid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.snsIdType != null) {
        oprot.writeFieldBegin(SNS_ID_TYPE_FIELD_DESC);
        oprot.writeI32(this.snsIdType.getValue());
        oprot.writeFieldEnd();
      }
      if (this.snsAccessToken != null) {
        oprot.writeFieldBegin(SNS_ACCESS_TOKEN_FIELD_DESC);
        oprot.writeString(this.snsAccessToken);
        oprot.writeFieldEnd();
      }
      if (this.region != null) {
        oprot.writeFieldBegin(REGION_FIELD_DESC);
        oprot.writeString(this.region);
        oprot.writeFieldEnd();
      }
      if (this.udidHash != null) {
        oprot.writeFieldBegin(UDID_HASH_FIELD_DESC);
        oprot.writeString(this.udidHash);
        oprot.writeFieldEnd();
      }
      if (this.deviceInfo != null) {
        oprot.writeFieldBegin(DEVICE_INFO_FIELD_DESC);
        this.deviceInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.mid != null) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeString(this.mid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerWithSnsId_args(");
      boolean first = true;

      sb.append("snsIdType:");
      if (this.snsIdType == null) {
        sb.append("null");
      } else {
        sb.append(this.snsIdType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("snsAccessToken:");
      if (this.snsAccessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.snsAccessToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("region:");
      if (this.region == null) {
        sb.append("null");
      } else {
        sb.append(this.region);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("udidHash:");
      if (this.udidHash == null) {
        sb.append("null");
      } else {
        sb.append(this.udidHash);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deviceInfo:");
      if (this.deviceInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mid:");
      if (this.mid == null) {
        sb.append("null");
      } else {
        sb.append(this.mid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerWithSnsId_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerWithSnsId_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private RegisterWithSnsIdResult success;
    private TalkException e;

    // isset id assignments

    public registerWithSnsId_result() {
    }

    public registerWithSnsId_result(
      RegisterWithSnsIdResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerWithSnsId_result(registerWithSnsId_result other) {
      if (other.isSetSuccess()) {
        this.success = new RegisterWithSnsIdResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public registerWithSnsId_result deepCopy() {
      return new registerWithSnsId_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public RegisterWithSnsIdResult getSuccess() {
      return this.success;
    }

    public void setSuccess(RegisterWithSnsIdResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerWithSnsId_result)
        return this.equals((registerWithSnsId_result)that);
      return false;
    }

    public boolean equals(registerWithSnsId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerWithSnsId_result other = (registerWithSnsId_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new RegisterWithSnsIdResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerWithSnsId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerWithSnsIdAndIdentityCredential_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerWithSnsIdAndIdentityCredential_args");

    private static final TField SNS_ID_TYPE_FIELD_DESC = new TField("snsIdType", TType.I32, (short)2);
    private static final TField SNS_ACCESS_TOKEN_FIELD_DESC = new TField("snsAccessToken", TType.STRING, (short)3);
    private static final TField IDENTITY_CREDENTIAL_FIELD_DESC = new TField("identityCredential", TType.STRUCT, (short)4);
    private static final TField REGION_FIELD_DESC = new TField("region", TType.STRING, (short)5);
    private static final TField UDID_HASH_FIELD_DESC = new TField("udidHash", TType.STRING, (short)6);
    private static final TField DEVICE_INFO_FIELD_DESC = new TField("deviceInfo", TType.STRUCT, (short)7);

    private SnsIdType snsIdType;
    private String snsAccessToken;
    private IdentityCredential identityCredential;
    private String region;
    private String udidHash;
    private DeviceInfo deviceInfo;

    // isset id assignments

    public registerWithSnsIdAndIdentityCredential_args() {
    }

    public registerWithSnsIdAndIdentityCredential_args(
      SnsIdType snsIdType,
      String snsAccessToken,
      IdentityCredential identityCredential,
      String region,
      String udidHash,
      DeviceInfo deviceInfo)
    {
      this();
      this.snsIdType = snsIdType;
      this.snsAccessToken = snsAccessToken;
      this.identityCredential = identityCredential;
      this.region = region;
      this.udidHash = udidHash;
      this.deviceInfo = deviceInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerWithSnsIdAndIdentityCredential_args(registerWithSnsIdAndIdentityCredential_args other) {
      if (other.isSetSnsIdType()) {
        this.snsIdType = other.snsIdType;
      }
      if (other.isSetSnsAccessToken()) {
        this.snsAccessToken = other.snsAccessToken;
      }
      if (other.isSetIdentityCredential()) {
        this.identityCredential = new IdentityCredential(other.identityCredential);
      }
      if (other.isSetRegion()) {
        this.region = other.region;
      }
      if (other.isSetUdidHash()) {
        this.udidHash = other.udidHash;
      }
      if (other.isSetDeviceInfo()) {
        this.deviceInfo = new DeviceInfo(other.deviceInfo);
      }
    }

    public registerWithSnsIdAndIdentityCredential_args deepCopy() {
      return new registerWithSnsIdAndIdentityCredential_args(this);
    }

    public void clear() {
      this.snsIdType = null;
      this.snsAccessToken = null;
      this.identityCredential = null;
      this.region = null;
      this.udidHash = null;
      this.deviceInfo = null;
    }

    /**
     * 
     * @see SnsIdType
     */
    public SnsIdType getSnsIdType() {
      return this.snsIdType;
    }

    /**
     * 
     * @see SnsIdType
     */
    public void setSnsIdType(SnsIdType snsIdType) {
      this.snsIdType = snsIdType;
    }

    public void unsetSnsIdType() {
      this.snsIdType = null;
    }

    /** Returns true if field snsIdType is set (has been assigned a value) and false otherwise */
    public boolean isSetSnsIdType() {
      return this.snsIdType != null;
    }

    public void setSnsIdTypeIsSet(boolean value) {
      if (!value) {
        this.snsIdType = null;
      }
    }

    public String getSnsAccessToken() {
      return this.snsAccessToken;
    }

    public void setSnsAccessToken(String snsAccessToken) {
      this.snsAccessToken = snsAccessToken;
    }

    public void unsetSnsAccessToken() {
      this.snsAccessToken = null;
    }

    /** Returns true if field snsAccessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSnsAccessToken() {
      return this.snsAccessToken != null;
    }

    public void setSnsAccessTokenIsSet(boolean value) {
      if (!value) {
        this.snsAccessToken = null;
      }
    }

    public IdentityCredential getIdentityCredential() {
      return this.identityCredential;
    }

    public void setIdentityCredential(IdentityCredential identityCredential) {
      this.identityCredential = identityCredential;
    }

    public void unsetIdentityCredential() {
      this.identityCredential = null;
    }

    /** Returns true if field identityCredential is set (has been assigned a value) and false otherwise */
    public boolean isSetIdentityCredential() {
      return this.identityCredential != null;
    }

    public void setIdentityCredentialIsSet(boolean value) {
      if (!value) {
        this.identityCredential = null;
      }
    }

    public String getRegion() {
      return this.region;
    }

    public void setRegion(String region) {
      this.region = region;
    }

    public void unsetRegion() {
      this.region = null;
    }

    /** Returns true if field region is set (has been assigned a value) and false otherwise */
    public boolean isSetRegion() {
      return this.region != null;
    }

    public void setRegionIsSet(boolean value) {
      if (!value) {
        this.region = null;
      }
    }

    public String getUdidHash() {
      return this.udidHash;
    }

    public void setUdidHash(String udidHash) {
      this.udidHash = udidHash;
    }

    public void unsetUdidHash() {
      this.udidHash = null;
    }

    /** Returns true if field udidHash is set (has been assigned a value) and false otherwise */
    public boolean isSetUdidHash() {
      return this.udidHash != null;
    }

    public void setUdidHashIsSet(boolean value) {
      if (!value) {
        this.udidHash = null;
      }
    }

    public DeviceInfo getDeviceInfo() {
      return this.deviceInfo;
    }

    public void setDeviceInfo(DeviceInfo deviceInfo) {
      this.deviceInfo = deviceInfo;
    }

    public void unsetDeviceInfo() {
      this.deviceInfo = null;
    }

    /** Returns true if field deviceInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceInfo() {
      return this.deviceInfo != null;
    }

    public void setDeviceInfoIsSet(boolean value) {
      if (!value) {
        this.deviceInfo = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerWithSnsIdAndIdentityCredential_args)
        return this.equals((registerWithSnsIdAndIdentityCredential_args)that);
      return false;
    }

    public boolean equals(registerWithSnsIdAndIdentityCredential_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_snsIdType = true && this.isSetSnsIdType();
      boolean that_present_snsIdType = true && that.isSetSnsIdType();
      if (this_present_snsIdType || that_present_snsIdType) {
        if (!(this_present_snsIdType && that_present_snsIdType))
          return false;
        if (!this.snsIdType.equals(that.snsIdType))
          return false;
      }

      boolean this_present_snsAccessToken = true && this.isSetSnsAccessToken();
      boolean that_present_snsAccessToken = true && that.isSetSnsAccessToken();
      if (this_present_snsAccessToken || that_present_snsAccessToken) {
        if (!(this_present_snsAccessToken && that_present_snsAccessToken))
          return false;
        if (!this.snsAccessToken.equals(that.snsAccessToken))
          return false;
      }

      boolean this_present_identityCredential = true && this.isSetIdentityCredential();
      boolean that_present_identityCredential = true && that.isSetIdentityCredential();
      if (this_present_identityCredential || that_present_identityCredential) {
        if (!(this_present_identityCredential && that_present_identityCredential))
          return false;
        if (!this.identityCredential.equals(that.identityCredential))
          return false;
      }

      boolean this_present_region = true && this.isSetRegion();
      boolean that_present_region = true && that.isSetRegion();
      if (this_present_region || that_present_region) {
        if (!(this_present_region && that_present_region))
          return false;
        if (!this.region.equals(that.region))
          return false;
      }

      boolean this_present_udidHash = true && this.isSetUdidHash();
      boolean that_present_udidHash = true && that.isSetUdidHash();
      if (this_present_udidHash || that_present_udidHash) {
        if (!(this_present_udidHash && that_present_udidHash))
          return false;
        if (!this.udidHash.equals(that.udidHash))
          return false;
      }

      boolean this_present_deviceInfo = true && this.isSetDeviceInfo();
      boolean that_present_deviceInfo = true && that.isSetDeviceInfo();
      if (this_present_deviceInfo || that_present_deviceInfo) {
        if (!(this_present_deviceInfo && that_present_deviceInfo))
          return false;
        if (!this.deviceInfo.equals(that.deviceInfo))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerWithSnsIdAndIdentityCredential_args other = (registerWithSnsIdAndIdentityCredential_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSnsIdType(), other.isSetSnsIdType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSnsIdType()) {
        lastComparison = TBaseHelper.compareTo(this.snsIdType, other.snsIdType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSnsAccessToken(), other.isSetSnsAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSnsAccessToken()) {
        lastComparison = TBaseHelper.compareTo(this.snsAccessToken, other.snsAccessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetIdentityCredential(), other.isSetIdentityCredential());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdentityCredential()) {
        lastComparison = this.identityCredential.compareTo(other.identityCredential);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetRegion(), other.isSetRegion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegion()) {
        lastComparison = TBaseHelper.compareTo(this.region, other.region);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUdidHash(), other.isSetUdidHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUdidHash()) {
        lastComparison = TBaseHelper.compareTo(this.udidHash, other.udidHash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetDeviceInfo(), other.isSetDeviceInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceInfo()) {
        lastComparison = this.deviceInfo.compareTo(other.deviceInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // SNS_ID_TYPE
            if (field.type == TType.I32) {
              this.snsIdType = SnsIdType.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SNS_ACCESS_TOKEN
            if (field.type == TType.STRING) {
              this.snsAccessToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // IDENTITY_CREDENTIAL
            if (field.type == TType.STRUCT) {
              this.identityCredential = new IdentityCredential();
              this.identityCredential.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // REGION
            if (field.type == TType.STRING) {
              this.region = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // UDID_HASH
            if (field.type == TType.STRING) {
              this.udidHash = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // DEVICE_INFO
            if (field.type == TType.STRUCT) {
              this.deviceInfo = new DeviceInfo();
              this.deviceInfo.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.snsIdType != null) {
        oprot.writeFieldBegin(SNS_ID_TYPE_FIELD_DESC);
        oprot.writeI32(this.snsIdType.getValue());
        oprot.writeFieldEnd();
      }
      if (this.snsAccessToken != null) {
        oprot.writeFieldBegin(SNS_ACCESS_TOKEN_FIELD_DESC);
        oprot.writeString(this.snsAccessToken);
        oprot.writeFieldEnd();
      }
      if (this.identityCredential != null) {
        oprot.writeFieldBegin(IDENTITY_CREDENTIAL_FIELD_DESC);
        this.identityCredential.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.region != null) {
        oprot.writeFieldBegin(REGION_FIELD_DESC);
        oprot.writeString(this.region);
        oprot.writeFieldEnd();
      }
      if (this.udidHash != null) {
        oprot.writeFieldBegin(UDID_HASH_FIELD_DESC);
        oprot.writeString(this.udidHash);
        oprot.writeFieldEnd();
      }
      if (this.deviceInfo != null) {
        oprot.writeFieldBegin(DEVICE_INFO_FIELD_DESC);
        this.deviceInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerWithSnsIdAndIdentityCredential_args(");
      boolean first = true;

      sb.append("snsIdType:");
      if (this.snsIdType == null) {
        sb.append("null");
      } else {
        sb.append(this.snsIdType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("snsAccessToken:");
      if (this.snsAccessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.snsAccessToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("identityCredential:");
      if (this.identityCredential == null) {
        sb.append("null");
      } else {
        sb.append(this.identityCredential);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("region:");
      if (this.region == null) {
        sb.append("null");
      } else {
        sb.append(this.region);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("udidHash:");
      if (this.udidHash == null) {
        sb.append("null");
      } else {
        sb.append(this.udidHash);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deviceInfo:");
      if (this.deviceInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerWithSnsIdAndIdentityCredential_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerWithSnsIdAndIdentityCredential_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public registerWithSnsIdAndIdentityCredential_result() {
    }

    public registerWithSnsIdAndIdentityCredential_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerWithSnsIdAndIdentityCredential_result(registerWithSnsIdAndIdentityCredential_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public registerWithSnsIdAndIdentityCredential_result deepCopy() {
      return new registerWithSnsIdAndIdentityCredential_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerWithSnsIdAndIdentityCredential_result)
        return this.equals((registerWithSnsIdAndIdentityCredential_result)that);
      return false;
    }

    public boolean equals(registerWithSnsIdAndIdentityCredential_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerWithSnsIdAndIdentityCredential_result other = (registerWithSnsIdAndIdentityCredential_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerWithSnsIdAndIdentityCredential_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class reissueDeviceCredential_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("reissueDeviceCredential_args");


    public reissueDeviceCredential_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reissueDeviceCredential_args(reissueDeviceCredential_args other) {
    }

    public reissueDeviceCredential_args deepCopy() {
      return new reissueDeviceCredential_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reissueDeviceCredential_args)
        return this.equals((reissueDeviceCredential_args)that);
      return false;
    }

    public boolean equals(reissueDeviceCredential_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      reissueDeviceCredential_args other = (reissueDeviceCredential_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("reissueDeviceCredential_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class reissueDeviceCredential_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("reissueDeviceCredential_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public reissueDeviceCredential_result() {
    }

    public reissueDeviceCredential_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reissueDeviceCredential_result(reissueDeviceCredential_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public reissueDeviceCredential_result deepCopy() {
      return new reissueDeviceCredential_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reissueDeviceCredential_result)
        return this.equals((reissueDeviceCredential_result)that);
      return false;
    }

    public boolean equals(reissueDeviceCredential_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      reissueDeviceCredential_result other = (reissueDeviceCredential_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("reissueDeviceCredential_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class reissueUserTicket_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("reissueUserTicket_args");

    private static final TField EXPIRATION_TIME_FIELD_DESC = new TField("expirationTime", TType.I64, (short)3);
    private static final TField MAX_USE_COUNT_FIELD_DESC = new TField("maxUseCount", TType.I32, (short)4);

    private long expirationTime;
    private int maxUseCount;

    // isset id assignments
    private static final int __EXPIRATIONTIME_ISSET_ID = 0;
    private static final int __MAXUSECOUNT_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public reissueUserTicket_args() {
    }

    public reissueUserTicket_args(
      long expirationTime,
      int maxUseCount)
    {
      this();
      this.expirationTime = expirationTime;
      setExpirationTimeIsSet(true);
      this.maxUseCount = maxUseCount;
      setMaxUseCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reissueUserTicket_args(reissueUserTicket_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.expirationTime = other.expirationTime;
      this.maxUseCount = other.maxUseCount;
    }

    public reissueUserTicket_args deepCopy() {
      return new reissueUserTicket_args(this);
    }

    public void clear() {
      setExpirationTimeIsSet(false);
      this.expirationTime = 0;
      setMaxUseCountIsSet(false);
      this.maxUseCount = 0;
    }

    public long getExpirationTime() {
      return this.expirationTime;
    }

    public void setExpirationTime(long expirationTime) {
      this.expirationTime = expirationTime;
      setExpirationTimeIsSet(true);
    }

    public void unsetExpirationTime() {
      __isset_vector[__EXPIRATIONTIME_ISSET_ID] = false;
    }

    /** Returns true if field expirationTime is set (has been assigned a value) and false otherwise */
    public boolean isSetExpirationTime() {
      return __isset_vector[__EXPIRATIONTIME_ISSET_ID];
    }

    public void setExpirationTimeIsSet(boolean value) {
      __isset_vector[__EXPIRATIONTIME_ISSET_ID] = value;
    }

    public int getMaxUseCount() {
      return this.maxUseCount;
    }

    public void setMaxUseCount(int maxUseCount) {
      this.maxUseCount = maxUseCount;
      setMaxUseCountIsSet(true);
    }

    public void unsetMaxUseCount() {
      __isset_vector[__MAXUSECOUNT_ISSET_ID] = false;
    }

    /** Returns true if field maxUseCount is set (has been assigned a value) and false otherwise */
    public boolean isSetMaxUseCount() {
      return __isset_vector[__MAXUSECOUNT_ISSET_ID];
    }

    public void setMaxUseCountIsSet(boolean value) {
      __isset_vector[__MAXUSECOUNT_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reissueUserTicket_args)
        return this.equals((reissueUserTicket_args)that);
      return false;
    }

    public boolean equals(reissueUserTicket_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_expirationTime = true;
      boolean that_present_expirationTime = true;
      if (this_present_expirationTime || that_present_expirationTime) {
        if (!(this_present_expirationTime && that_present_expirationTime))
          return false;
        if (this.expirationTime != that.expirationTime)
          return false;
      }

      boolean this_present_maxUseCount = true;
      boolean that_present_maxUseCount = true;
      if (this_present_maxUseCount || that_present_maxUseCount) {
        if (!(this_present_maxUseCount && that_present_maxUseCount))
          return false;
        if (this.maxUseCount != that.maxUseCount)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      reissueUserTicket_args other = (reissueUserTicket_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetExpirationTime(), other.isSetExpirationTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExpirationTime()) {
        lastComparison = TBaseHelper.compareTo(this.expirationTime, other.expirationTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMaxUseCount(), other.isSetMaxUseCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxUseCount()) {
        lastComparison = TBaseHelper.compareTo(this.maxUseCount, other.maxUseCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 3: // EXPIRATION_TIME
            if (field.type == TType.I64) {
              this.expirationTime = iprot.readI64();
              setExpirationTimeIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // MAX_USE_COUNT
            if (field.type == TType.I32) {
              this.maxUseCount = iprot.readI32();
              setMaxUseCountIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(EXPIRATION_TIME_FIELD_DESC);
      oprot.writeI64(this.expirationTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_USE_COUNT_FIELD_DESC);
      oprot.writeI32(this.maxUseCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("reissueUserTicket_args(");
      boolean first = true;

      sb.append("expirationTime:");
      sb.append(this.expirationTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxUseCount:");
      sb.append(this.maxUseCount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class reissueUserTicket_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("reissueUserTicket_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public reissueUserTicket_result() {
    }

    public reissueUserTicket_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reissueUserTicket_result(reissueUserTicket_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public reissueUserTicket_result deepCopy() {
      return new reissueUserTicket_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reissueUserTicket_result)
        return this.equals((reissueUserTicket_result)that);
      return false;
    }

    public boolean equals(reissueUserTicket_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      reissueUserTicket_result other = (reissueUserTicket_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("reissueUserTicket_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getMessageReadRange_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getMessageReadRange_args");

    private static final TField CHAT_IDS_FIELD_DESC = new TField("chatIds", TType.LIST, (short)2);

    private Vector chatIds;

    // isset id assignments

    public getMessageReadRange_args() {
    }

    public getMessageReadRange_args(
      Vector chatIds)
    {
      this();
      this.chatIds = chatIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessageReadRange_args(getMessageReadRange_args other) {
      if (other.isSetChatIds()) {
        Vector __this__chatIds = new Vector();
        for (Enumeration other_enum = other.chatIds.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__chatIds.addElement(other_element);
        }
        this.chatIds = __this__chatIds;
      }
    }

    public getMessageReadRange_args deepCopy() {
      return new getMessageReadRange_args(this);
    }

    public void clear() {
      this.chatIds = null;
    }

    public int getChatIdsSize() {
      return (this.chatIds == null) ? 0 : this.chatIds.size();
    }

    public Enumeration getChatIdsEnumeration() {
      return (this.chatIds == null) ? null : this.chatIds.elements();
    }

    public void addToChatIds(String elem) {
      if (this.chatIds == null) {
        this.chatIds = new Vector();
      }
      this.chatIds.addElement(elem);
    }

    public Vector getChatIds() {
      return this.chatIds;
    }

    public void setChatIds(Vector chatIds) {
      this.chatIds = chatIds;
    }

    public void unsetChatIds() {
      this.chatIds = null;
    }

    /** Returns true if field chatIds is set (has been assigned a value) and false otherwise */
    public boolean isSetChatIds() {
      return this.chatIds != null;
    }

    public void setChatIdsIsSet(boolean value) {
      if (!value) {
        this.chatIds = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessageReadRange_args)
        return this.equals((getMessageReadRange_args)that);
      return false;
    }

    public boolean equals(getMessageReadRange_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_chatIds = true && this.isSetChatIds();
      boolean that_present_chatIds = true && that.isSetChatIds();
      if (this_present_chatIds || that_present_chatIds) {
        if (!(this_present_chatIds && that_present_chatIds))
          return false;
        if (!this.chatIds.equals(that.chatIds))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getMessageReadRange_args other = (getMessageReadRange_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetChatIds(), other.isSetChatIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChatIds()) {
        lastComparison = TBaseHelper.compareTo(this.chatIds, other.chatIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // CHAT_IDS
            if (field.type == TType.LIST) {
              {
                TList _list1053 = iprot.readListBegin();
                this.chatIds = new Vector(_list1053.size);
                for (int _i1054 = 0; _i1054 < _list1053.size; ++_i1054)
                {
                  String _elem1055;
                  _elem1055 = iprot.readString();
                  this.chatIds.addElement(_elem1055);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.chatIds != null) {
        oprot.writeFieldBegin(CHAT_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.chatIds.size()));
          for (Enumeration _iter1056_enum = this.chatIds.elements(); _iter1056_enum.hasMoreElements(); )           {
            String _iter1056 = (String)_iter1056_enum.nextElement();
            oprot.writeString(_iter1056);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getMessageReadRange_args(");
      boolean first = true;

      sb.append("chatIds:");
      if (this.chatIds == null) {
        sb.append("null");
      } else {
        sb.append(this.chatIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getMessageReadRange_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getMessageReadRange_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getMessageReadRange_result() {
    }

    public getMessageReadRange_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessageReadRange_result(getMessageReadRange_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          TMessageReadRange other_element = (TMessageReadRange)other_enum.nextElement();
          __this__success.addElement(new TMessageReadRange(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getMessageReadRange_result deepCopy() {
      return new getMessageReadRange_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(TMessageReadRange elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessageReadRange_result)
        return this.equals((getMessageReadRange_result)that);
      return false;
    }

    public boolean equals(getMessageReadRange_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getMessageReadRange_result other = (getMessageReadRange_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list1057 = iprot.readListBegin();
                this.success = new Vector(_list1057.size);
                for (int _i1058 = 0; _i1058 < _list1057.size; ++_i1058)
                {
                  TMessageReadRange _elem1059;
                  _elem1059 = new TMessageReadRange();
                  _elem1059.read(iprot);
                  this.success.addElement(_elem1059);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter1060_enum = this.success.elements(); _iter1060_enum.hasMoreElements(); )           {
            TMessageReadRange _iter1060 = (TMessageReadRange)_iter1060_enum.nextElement();
            _iter1060.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getMessageReadRange_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class rejectGroupInvitation_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("rejectGroupInvitation_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField GROUP_ID_FIELD_DESC = new TField("groupId", TType.STRING, (short)2);

    private int reqSeq;
    private String groupId;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public rejectGroupInvitation_args() {
    }

    public rejectGroupInvitation_args(
      int reqSeq,
      String groupId)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.groupId = groupId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rejectGroupInvitation_args(rejectGroupInvitation_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetGroupId()) {
        this.groupId = other.groupId;
      }
    }

    public rejectGroupInvitation_args deepCopy() {
      return new rejectGroupInvitation_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.groupId = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public String getGroupId() {
      return this.groupId;
    }

    public void setGroupId(String groupId) {
      this.groupId = groupId;
    }

    public void unsetGroupId() {
      this.groupId = null;
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return this.groupId != null;
    }

    public void setGroupIdIsSet(boolean value) {
      if (!value) {
        this.groupId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rejectGroupInvitation_args)
        return this.equals((rejectGroupInvitation_args)that);
      return false;
    }

    public boolean equals(rejectGroupInvitation_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_groupId = true && this.isSetGroupId();
      boolean that_present_groupId = true && that.isSetGroupId();
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (!this.groupId.equals(that.groupId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      rejectGroupInvitation_args other = (rejectGroupInvitation_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGroupId(), other.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = TBaseHelper.compareTo(this.groupId, other.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GROUP_ID
            if (field.type == TType.STRING) {
              this.groupId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.groupId != null) {
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeString(this.groupId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("rejectGroupInvitation_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("groupId:");
      if (this.groupId == null) {
        sb.append("null");
      } else {
        sb.append(this.groupId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class rejectGroupInvitation_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("rejectGroupInvitation_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public rejectGroupInvitation_result() {
    }

    public rejectGroupInvitation_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rejectGroupInvitation_result(rejectGroupInvitation_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public rejectGroupInvitation_result deepCopy() {
      return new rejectGroupInvitation_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rejectGroupInvitation_result)
        return this.equals((rejectGroupInvitation_result)that);
      return false;
    }

    public boolean equals(rejectGroupInvitation_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      rejectGroupInvitation_result other = (rejectGroupInvitation_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("rejectGroupInvitation_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class releaseSession_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("releaseSession_args");


    public releaseSession_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public releaseSession_args(releaseSession_args other) {
    }

    public releaseSession_args deepCopy() {
      return new releaseSession_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof releaseSession_args)
        return this.equals((releaseSession_args)that);
      return false;
    }

    public boolean equals(releaseSession_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      releaseSession_args other = (releaseSession_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("releaseSession_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class releaseSession_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("releaseSession_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public releaseSession_result() {
    }

    public releaseSession_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public releaseSession_result(releaseSession_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public releaseSession_result deepCopy() {
      return new releaseSession_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof releaseSession_result)
        return this.equals((releaseSession_result)that);
      return false;
    }

    public boolean equals(releaseSession_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      releaseSession_result other = (releaseSession_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("releaseSession_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class removeAllMessages_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("removeAllMessages_args");

    private static final TField SEQ_FIELD_DESC = new TField("seq", TType.I32, (short)1);
    private static final TField LAST_MESSAGE_ID_FIELD_DESC = new TField("lastMessageId", TType.STRING, (short)2);

    private int seq;
    private String lastMessageId;

    // isset id assignments
    private static final int __SEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public removeAllMessages_args() {
    }

    public removeAllMessages_args(
      int seq,
      String lastMessageId)
    {
      this();
      this.seq = seq;
      setSeqIsSet(true);
      this.lastMessageId = lastMessageId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeAllMessages_args(removeAllMessages_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.seq = other.seq;
      if (other.isSetLastMessageId()) {
        this.lastMessageId = other.lastMessageId;
      }
    }

    public removeAllMessages_args deepCopy() {
      return new removeAllMessages_args(this);
    }

    public void clear() {
      setSeqIsSet(false);
      this.seq = 0;
      this.lastMessageId = null;
    }

    public int getSeq() {
      return this.seq;
    }

    public void setSeq(int seq) {
      this.seq = seq;
      setSeqIsSet(true);
    }

    public void unsetSeq() {
      __isset_vector[__SEQ_ISSET_ID] = false;
    }

    /** Returns true if field seq is set (has been assigned a value) and false otherwise */
    public boolean isSetSeq() {
      return __isset_vector[__SEQ_ISSET_ID];
    }

    public void setSeqIsSet(boolean value) {
      __isset_vector[__SEQ_ISSET_ID] = value;
    }

    public String getLastMessageId() {
      return this.lastMessageId;
    }

    public void setLastMessageId(String lastMessageId) {
      this.lastMessageId = lastMessageId;
    }

    public void unsetLastMessageId() {
      this.lastMessageId = null;
    }

    /** Returns true if field lastMessageId is set (has been assigned a value) and false otherwise */
    public boolean isSetLastMessageId() {
      return this.lastMessageId != null;
    }

    public void setLastMessageIdIsSet(boolean value) {
      if (!value) {
        this.lastMessageId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeAllMessages_args)
        return this.equals((removeAllMessages_args)that);
      return false;
    }

    public boolean equals(removeAllMessages_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_seq = true;
      boolean that_present_seq = true;
      if (this_present_seq || that_present_seq) {
        if (!(this_present_seq && that_present_seq))
          return false;
        if (this.seq != that.seq)
          return false;
      }

      boolean this_present_lastMessageId = true && this.isSetLastMessageId();
      boolean that_present_lastMessageId = true && that.isSetLastMessageId();
      if (this_present_lastMessageId || that_present_lastMessageId) {
        if (!(this_present_lastMessageId && that_present_lastMessageId))
          return false;
        if (!this.lastMessageId.equals(that.lastMessageId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      removeAllMessages_args other = (removeAllMessages_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSeq(), other.isSetSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeq()) {
        lastComparison = TBaseHelper.compareTo(this.seq, other.seq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLastMessageId(), other.isSetLastMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastMessageId()) {
        lastComparison = TBaseHelper.compareTo(this.lastMessageId, other.lastMessageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SEQ
            if (field.type == TType.I32) {
              this.seq = iprot.readI32();
              setSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // LAST_MESSAGE_ID
            if (field.type == TType.STRING) {
              this.lastMessageId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQ_FIELD_DESC);
      oprot.writeI32(this.seq);
      oprot.writeFieldEnd();
      if (this.lastMessageId != null) {
        oprot.writeFieldBegin(LAST_MESSAGE_ID_FIELD_DESC);
        oprot.writeString(this.lastMessageId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("removeAllMessages_args(");
      boolean first = true;

      sb.append("seq:");
      sb.append(this.seq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lastMessageId:");
      if (this.lastMessageId == null) {
        sb.append("null");
      } else {
        sb.append(this.lastMessageId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class removeAllMessages_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("removeAllMessages_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public removeAllMessages_result() {
    }

    public removeAllMessages_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeAllMessages_result(removeAllMessages_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public removeAllMessages_result deepCopy() {
      return new removeAllMessages_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeAllMessages_result)
        return this.equals((removeAllMessages_result)that);
      return false;
    }

    public boolean equals(removeAllMessages_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      removeAllMessages_result other = (removeAllMessages_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("removeAllMessages_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class removeBuddyLocation_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("removeBuddyLocation_args");

    private static final TField MID_FIELD_DESC = new TField("mid", TType.STRING, (short)2);
    private static final TField INDEX_FIELD_DESC = new TField("index", TType.I32, (short)3);

    private String mid;
    private int index;

    // isset id assignments
    private static final int __INDEX_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public removeBuddyLocation_args() {
    }

    public removeBuddyLocation_args(
      String mid,
      int index)
    {
      this();
      this.mid = mid;
      this.index = index;
      setIndexIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeBuddyLocation_args(removeBuddyLocation_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetMid()) {
        this.mid = other.mid;
      }
      this.index = other.index;
    }

    public removeBuddyLocation_args deepCopy() {
      return new removeBuddyLocation_args(this);
    }

    public void clear() {
      this.mid = null;
      setIndexIsSet(false);
      this.index = 0;
    }

    public String getMid() {
      return this.mid;
    }

    public void setMid(String mid) {
      this.mid = mid;
    }

    public void unsetMid() {
      this.mid = null;
    }

    /** Returns true if field mid is set (has been assigned a value) and false otherwise */
    public boolean isSetMid() {
      return this.mid != null;
    }

    public void setMidIsSet(boolean value) {
      if (!value) {
        this.mid = null;
      }
    }

    public int getIndex() {
      return this.index;
    }

    public void setIndex(int index) {
      this.index = index;
      setIndexIsSet(true);
    }

    public void unsetIndex() {
      __isset_vector[__INDEX_ISSET_ID] = false;
    }

    /** Returns true if field index is set (has been assigned a value) and false otherwise */
    public boolean isSetIndex() {
      return __isset_vector[__INDEX_ISSET_ID];
    }

    public void setIndexIsSet(boolean value) {
      __isset_vector[__INDEX_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeBuddyLocation_args)
        return this.equals((removeBuddyLocation_args)that);
      return false;
    }

    public boolean equals(removeBuddyLocation_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mid = true && this.isSetMid();
      boolean that_present_mid = true && that.isSetMid();
      if (this_present_mid || that_present_mid) {
        if (!(this_present_mid && that_present_mid))
          return false;
        if (!this.mid.equals(that.mid))
          return false;
      }

      boolean this_present_index = true;
      boolean that_present_index = true;
      if (this_present_index || that_present_index) {
        if (!(this_present_index && that_present_index))
          return false;
        if (this.index != that.index)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      removeBuddyLocation_args other = (removeBuddyLocation_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetMid(), other.isSetMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMid()) {
        lastComparison = TBaseHelper.compareTo(this.mid, other.mid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetIndex(), other.isSetIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndex()) {
        lastComparison = TBaseHelper.compareTo(this.index, other.index);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // MID
            if (field.type == TType.STRING) {
              this.mid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // INDEX
            if (field.type == TType.I32) {
              this.index = iprot.readI32();
              setIndexIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.mid != null) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeString(this.mid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INDEX_FIELD_DESC);
      oprot.writeI32(this.index);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("removeBuddyLocation_args(");
      boolean first = true;

      sb.append("mid:");
      if (this.mid == null) {
        sb.append("null");
      } else {
        sb.append(this.mid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("index:");
      sb.append(this.index);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class removeBuddyLocation_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("removeBuddyLocation_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public removeBuddyLocation_result() {
    }

    public removeBuddyLocation_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeBuddyLocation_result(removeBuddyLocation_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public removeBuddyLocation_result deepCopy() {
      return new removeBuddyLocation_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeBuddyLocation_result)
        return this.equals((removeBuddyLocation_result)that);
      return false;
    }

    public boolean equals(removeBuddyLocation_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      removeBuddyLocation_result other = (removeBuddyLocation_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("removeBuddyLocation_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class removeMessage_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("removeMessage_args");

    private static final TField MESSAGE_ID_FIELD_DESC = new TField("messageId", TType.STRING, (short)2);

    private String messageId;

    // isset id assignments

    public removeMessage_args() {
    }

    public removeMessage_args(
      String messageId)
    {
      this();
      this.messageId = messageId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeMessage_args(removeMessage_args other) {
      if (other.isSetMessageId()) {
        this.messageId = other.messageId;
      }
    }

    public removeMessage_args deepCopy() {
      return new removeMessage_args(this);
    }

    public void clear() {
      this.messageId = null;
    }

    public String getMessageId() {
      return this.messageId;
    }

    public void setMessageId(String messageId) {
      this.messageId = messageId;
    }

    public void unsetMessageId() {
      this.messageId = null;
    }

    /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageId() {
      return this.messageId != null;
    }

    public void setMessageIdIsSet(boolean value) {
      if (!value) {
        this.messageId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeMessage_args)
        return this.equals((removeMessage_args)that);
      return false;
    }

    public boolean equals(removeMessage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_messageId = true && this.isSetMessageId();
      boolean that_present_messageId = true && that.isSetMessageId();
      if (this_present_messageId || that_present_messageId) {
        if (!(this_present_messageId && that_present_messageId))
          return false;
        if (!this.messageId.equals(that.messageId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      removeMessage_args other = (removeMessage_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetMessageId(), other.isSetMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageId()) {
        lastComparison = TBaseHelper.compareTo(this.messageId, other.messageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // MESSAGE_ID
            if (field.type == TType.STRING) {
              this.messageId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.messageId != null) {
        oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
        oprot.writeString(this.messageId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("removeMessage_args(");
      boolean first = true;

      sb.append("messageId:");
      if (this.messageId == null) {
        sb.append("null");
      } else {
        sb.append(this.messageId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class removeMessage_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("removeMessage_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private boolean success;
    private TalkException e;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public removeMessage_result() {
    }

    public removeMessage_result(
      boolean success,
      TalkException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeMessage_result(removeMessage_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public removeMessage_result deepCopy() {
      return new removeMessage_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeMessage_result)
        return this.equals((removeMessage_result)that);
      return false;
    }

    public boolean equals(removeMessage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      removeMessage_result other = (removeMessage_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("removeMessage_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class makeUserAddMyselfAsContact_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("makeUserAddMyselfAsContact_args");

    private static final TField CONTACT_OWNER_MID_FIELD_DESC = new TField("contactOwnerMid", TType.STRING, (short)1);

    private String contactOwnerMid;

    // isset id assignments

    public makeUserAddMyselfAsContact_args() {
    }

    public makeUserAddMyselfAsContact_args(
      String contactOwnerMid)
    {
      this();
      this.contactOwnerMid = contactOwnerMid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public makeUserAddMyselfAsContact_args(makeUserAddMyselfAsContact_args other) {
      if (other.isSetContactOwnerMid()) {
        this.contactOwnerMid = other.contactOwnerMid;
      }
    }

    public makeUserAddMyselfAsContact_args deepCopy() {
      return new makeUserAddMyselfAsContact_args(this);
    }

    public void clear() {
      this.contactOwnerMid = null;
    }

    public String getContactOwnerMid() {
      return this.contactOwnerMid;
    }

    public void setContactOwnerMid(String contactOwnerMid) {
      this.contactOwnerMid = contactOwnerMid;
    }

    public void unsetContactOwnerMid() {
      this.contactOwnerMid = null;
    }

    /** Returns true if field contactOwnerMid is set (has been assigned a value) and false otherwise */
    public boolean isSetContactOwnerMid() {
      return this.contactOwnerMid != null;
    }

    public void setContactOwnerMidIsSet(boolean value) {
      if (!value) {
        this.contactOwnerMid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof makeUserAddMyselfAsContact_args)
        return this.equals((makeUserAddMyselfAsContact_args)that);
      return false;
    }

    public boolean equals(makeUserAddMyselfAsContact_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_contactOwnerMid = true && this.isSetContactOwnerMid();
      boolean that_present_contactOwnerMid = true && that.isSetContactOwnerMid();
      if (this_present_contactOwnerMid || that_present_contactOwnerMid) {
        if (!(this_present_contactOwnerMid && that_present_contactOwnerMid))
          return false;
        if (!this.contactOwnerMid.equals(that.contactOwnerMid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      makeUserAddMyselfAsContact_args other = (makeUserAddMyselfAsContact_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetContactOwnerMid(), other.isSetContactOwnerMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContactOwnerMid()) {
        lastComparison = TBaseHelper.compareTo(this.contactOwnerMid, other.contactOwnerMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // CONTACT_OWNER_MID
            if (field.type == TType.STRING) {
              this.contactOwnerMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.contactOwnerMid != null) {
        oprot.writeFieldBegin(CONTACT_OWNER_MID_FIELD_DESC);
        oprot.writeString(this.contactOwnerMid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("makeUserAddMyselfAsContact_args(");
      boolean first = true;

      sb.append("contactOwnerMid:");
      if (this.contactOwnerMid == null) {
        sb.append("null");
      } else {
        sb.append(this.contactOwnerMid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class makeUserAddMyselfAsContact_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("makeUserAddMyselfAsContact_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private ContactTransition success;
    private TalkException e;

    // isset id assignments

    public makeUserAddMyselfAsContact_result() {
    }

    public makeUserAddMyselfAsContact_result(
      ContactTransition success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public makeUserAddMyselfAsContact_result(makeUserAddMyselfAsContact_result other) {
      if (other.isSetSuccess()) {
        this.success = new ContactTransition(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public makeUserAddMyselfAsContact_result deepCopy() {
      return new makeUserAddMyselfAsContact_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ContactTransition getSuccess() {
      return this.success;
    }

    public void setSuccess(ContactTransition success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof makeUserAddMyselfAsContact_result)
        return this.equals((makeUserAddMyselfAsContact_result)that);
      return false;
    }

    public boolean equals(makeUserAddMyselfAsContact_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      makeUserAddMyselfAsContact_result other = (makeUserAddMyselfAsContact_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new ContactTransition();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("makeUserAddMyselfAsContact_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class removeMessageFromMyHome_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("removeMessageFromMyHome_args");

    private static final TField MESSAGE_ID_FIELD_DESC = new TField("messageId", TType.STRING, (short)2);

    private String messageId;

    // isset id assignments

    public removeMessageFromMyHome_args() {
    }

    public removeMessageFromMyHome_args(
      String messageId)
    {
      this();
      this.messageId = messageId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeMessageFromMyHome_args(removeMessageFromMyHome_args other) {
      if (other.isSetMessageId()) {
        this.messageId = other.messageId;
      }
    }

    public removeMessageFromMyHome_args deepCopy() {
      return new removeMessageFromMyHome_args(this);
    }

    public void clear() {
      this.messageId = null;
    }

    public String getMessageId() {
      return this.messageId;
    }

    public void setMessageId(String messageId) {
      this.messageId = messageId;
    }

    public void unsetMessageId() {
      this.messageId = null;
    }

    /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageId() {
      return this.messageId != null;
    }

    public void setMessageIdIsSet(boolean value) {
      if (!value) {
        this.messageId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeMessageFromMyHome_args)
        return this.equals((removeMessageFromMyHome_args)that);
      return false;
    }

    public boolean equals(removeMessageFromMyHome_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_messageId = true && this.isSetMessageId();
      boolean that_present_messageId = true && that.isSetMessageId();
      if (this_present_messageId || that_present_messageId) {
        if (!(this_present_messageId && that_present_messageId))
          return false;
        if (!this.messageId.equals(that.messageId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      removeMessageFromMyHome_args other = (removeMessageFromMyHome_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetMessageId(), other.isSetMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageId()) {
        lastComparison = TBaseHelper.compareTo(this.messageId, other.messageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // MESSAGE_ID
            if (field.type == TType.STRING) {
              this.messageId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.messageId != null) {
        oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
        oprot.writeString(this.messageId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("removeMessageFromMyHome_args(");
      boolean first = true;

      sb.append("messageId:");
      if (this.messageId == null) {
        sb.append("null");
      } else {
        sb.append(this.messageId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class removeMessageFromMyHome_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("removeMessageFromMyHome_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private boolean success;
    private TalkException e;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public removeMessageFromMyHome_result() {
    }

    public removeMessageFromMyHome_result(
      boolean success,
      TalkException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeMessageFromMyHome_result(removeMessageFromMyHome_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public removeMessageFromMyHome_result deepCopy() {
      return new removeMessageFromMyHome_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeMessageFromMyHome_result)
        return this.equals((removeMessageFromMyHome_result)that);
      return false;
    }

    public boolean equals(removeMessageFromMyHome_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      removeMessageFromMyHome_result other = (removeMessageFromMyHome_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("removeMessageFromMyHome_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class removeSnsId_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("removeSnsId_args");

    private static final TField SNS_ID_TYPE_FIELD_DESC = new TField("snsIdType", TType.I32, (short)2);

    private SnsIdType snsIdType;

    // isset id assignments

    public removeSnsId_args() {
    }

    public removeSnsId_args(
      SnsIdType snsIdType)
    {
      this();
      this.snsIdType = snsIdType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeSnsId_args(removeSnsId_args other) {
      if (other.isSetSnsIdType()) {
        this.snsIdType = other.snsIdType;
      }
    }

    public removeSnsId_args deepCopy() {
      return new removeSnsId_args(this);
    }

    public void clear() {
      this.snsIdType = null;
    }

    /**
     * 
     * @see SnsIdType
     */
    public SnsIdType getSnsIdType() {
      return this.snsIdType;
    }

    /**
     * 
     * @see SnsIdType
     */
    public void setSnsIdType(SnsIdType snsIdType) {
      this.snsIdType = snsIdType;
    }

    public void unsetSnsIdType() {
      this.snsIdType = null;
    }

    /** Returns true if field snsIdType is set (has been assigned a value) and false otherwise */
    public boolean isSetSnsIdType() {
      return this.snsIdType != null;
    }

    public void setSnsIdTypeIsSet(boolean value) {
      if (!value) {
        this.snsIdType = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeSnsId_args)
        return this.equals((removeSnsId_args)that);
      return false;
    }

    public boolean equals(removeSnsId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_snsIdType = true && this.isSetSnsIdType();
      boolean that_present_snsIdType = true && that.isSetSnsIdType();
      if (this_present_snsIdType || that_present_snsIdType) {
        if (!(this_present_snsIdType && that_present_snsIdType))
          return false;
        if (!this.snsIdType.equals(that.snsIdType))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      removeSnsId_args other = (removeSnsId_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSnsIdType(), other.isSetSnsIdType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSnsIdType()) {
        lastComparison = TBaseHelper.compareTo(this.snsIdType, other.snsIdType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // SNS_ID_TYPE
            if (field.type == TType.I32) {
              this.snsIdType = SnsIdType.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.snsIdType != null) {
        oprot.writeFieldBegin(SNS_ID_TYPE_FIELD_DESC);
        oprot.writeI32(this.snsIdType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("removeSnsId_args(");
      boolean first = true;

      sb.append("snsIdType:");
      if (this.snsIdType == null) {
        sb.append("null");
      } else {
        sb.append(this.snsIdType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class removeSnsId_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("removeSnsId_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public removeSnsId_result() {
    }

    public removeSnsId_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeSnsId_result(removeSnsId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public removeSnsId_result deepCopy() {
      return new removeSnsId_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeSnsId_result)
        return this.equals((removeSnsId_result)that);
      return false;
    }

    public boolean equals(removeSnsId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      removeSnsId_result other = (removeSnsId_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("removeSnsId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class report_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("report_args");

    private static final TField SYNC_OP_REVISION_FIELD_DESC = new TField("syncOpRevision", TType.I64, (short)2);
    private static final TField CATEGORY_FIELD_DESC = new TField("category", TType.I32, (short)3);
    private static final TField REPORT_FIELD_DESC = new TField("report", TType.STRING, (short)4);

    private long syncOpRevision;
    private SyncCategory category;
    private String report;

    // isset id assignments
    private static final int __SYNCOPREVISION_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public report_args() {
    }

    public report_args(
      long syncOpRevision,
      SyncCategory category,
      String report)
    {
      this();
      this.syncOpRevision = syncOpRevision;
      setSyncOpRevisionIsSet(true);
      this.category = category;
      this.report = report;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public report_args(report_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.syncOpRevision = other.syncOpRevision;
      if (other.isSetCategory()) {
        this.category = other.category;
      }
      if (other.isSetReport()) {
        this.report = other.report;
      }
    }

    public report_args deepCopy() {
      return new report_args(this);
    }

    public void clear() {
      setSyncOpRevisionIsSet(false);
      this.syncOpRevision = 0;
      this.category = null;
      this.report = null;
    }

    public long getSyncOpRevision() {
      return this.syncOpRevision;
    }

    public void setSyncOpRevision(long syncOpRevision) {
      this.syncOpRevision = syncOpRevision;
      setSyncOpRevisionIsSet(true);
    }

    public void unsetSyncOpRevision() {
      __isset_vector[__SYNCOPREVISION_ISSET_ID] = false;
    }

    /** Returns true if field syncOpRevision is set (has been assigned a value) and false otherwise */
    public boolean isSetSyncOpRevision() {
      return __isset_vector[__SYNCOPREVISION_ISSET_ID];
    }

    public void setSyncOpRevisionIsSet(boolean value) {
      __isset_vector[__SYNCOPREVISION_ISSET_ID] = value;
    }

    /**
     * 
     * @see SyncCategory
     */
    public SyncCategory getCategory() {
      return this.category;
    }

    /**
     * 
     * @see SyncCategory
     */
    public void setCategory(SyncCategory category) {
      this.category = category;
    }

    public void unsetCategory() {
      this.category = null;
    }

    /** Returns true if field category is set (has been assigned a value) and false otherwise */
    public boolean isSetCategory() {
      return this.category != null;
    }

    public void setCategoryIsSet(boolean value) {
      if (!value) {
        this.category = null;
      }
    }

    public String getReport() {
      return this.report;
    }

    public void setReport(String report) {
      this.report = report;
    }

    public void unsetReport() {
      this.report = null;
    }

    /** Returns true if field report is set (has been assigned a value) and false otherwise */
    public boolean isSetReport() {
      return this.report != null;
    }

    public void setReportIsSet(boolean value) {
      if (!value) {
        this.report = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof report_args)
        return this.equals((report_args)that);
      return false;
    }

    public boolean equals(report_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_syncOpRevision = true;
      boolean that_present_syncOpRevision = true;
      if (this_present_syncOpRevision || that_present_syncOpRevision) {
        if (!(this_present_syncOpRevision && that_present_syncOpRevision))
          return false;
        if (this.syncOpRevision != that.syncOpRevision)
          return false;
      }

      boolean this_present_category = true && this.isSetCategory();
      boolean that_present_category = true && that.isSetCategory();
      if (this_present_category || that_present_category) {
        if (!(this_present_category && that_present_category))
          return false;
        if (!this.category.equals(that.category))
          return false;
      }

      boolean this_present_report = true && this.isSetReport();
      boolean that_present_report = true && that.isSetReport();
      if (this_present_report || that_present_report) {
        if (!(this_present_report && that_present_report))
          return false;
        if (!this.report.equals(that.report))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      report_args other = (report_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSyncOpRevision(), other.isSetSyncOpRevision());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSyncOpRevision()) {
        lastComparison = TBaseHelper.compareTo(this.syncOpRevision, other.syncOpRevision);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCategory(), other.isSetCategory());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategory()) {
        lastComparison = TBaseHelper.compareTo(this.category, other.category);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetReport(), other.isSetReport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReport()) {
        lastComparison = TBaseHelper.compareTo(this.report, other.report);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // SYNC_OP_REVISION
            if (field.type == TType.I64) {
              this.syncOpRevision = iprot.readI64();
              setSyncOpRevisionIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // CATEGORY
            if (field.type == TType.I32) {
              this.category = SyncCategory.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // REPORT
            if (field.type == TType.STRING) {
              this.report = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SYNC_OP_REVISION_FIELD_DESC);
      oprot.writeI64(this.syncOpRevision);
      oprot.writeFieldEnd();
      if (this.category != null) {
        oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
        oprot.writeI32(this.category.getValue());
        oprot.writeFieldEnd();
      }
      if (this.report != null) {
        oprot.writeFieldBegin(REPORT_FIELD_DESC);
        oprot.writeString(this.report);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("report_args(");
      boolean first = true;

      sb.append("syncOpRevision:");
      sb.append(this.syncOpRevision);
      first = false;
      if (!first) sb.append(", ");
      sb.append("category:");
      if (this.category == null) {
        sb.append("null");
      } else {
        sb.append(this.category);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("report:");
      if (this.report == null) {
        sb.append("null");
      } else {
        sb.append(this.report);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class report_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("report_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public report_result() {
    }

    public report_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public report_result(report_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public report_result deepCopy() {
      return new report_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof report_result)
        return this.equals((report_result)that);
      return false;
    }

    public boolean equals(report_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      report_result other = (report_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("report_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class reportContacts_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("reportContacts_args");

    private static final TField SYNC_OP_REVISION_FIELD_DESC = new TField("syncOpRevision", TType.I64, (short)2);
    private static final TField CATEGORY_FIELD_DESC = new TField("category", TType.I32, (short)3);
    private static final TField CONTACT_REPORTS_FIELD_DESC = new TField("contactReports", TType.LIST, (short)4);
    private static final TField ACTION_TYPE_FIELD_DESC = new TField("actionType", TType.I32, (short)5);

    private long syncOpRevision;
    private SyncCategory category;
    private Vector contactReports;
    private SyncActionType actionType;

    // isset id assignments
    private static final int __SYNCOPREVISION_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public reportContacts_args() {
    }

    public reportContacts_args(
      long syncOpRevision,
      SyncCategory category,
      Vector contactReports,
      SyncActionType actionType)
    {
      this();
      this.syncOpRevision = syncOpRevision;
      setSyncOpRevisionIsSet(true);
      this.category = category;
      this.contactReports = contactReports;
      this.actionType = actionType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportContacts_args(reportContacts_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.syncOpRevision = other.syncOpRevision;
      if (other.isSetCategory()) {
        this.category = other.category;
      }
      if (other.isSetContactReports()) {
        Vector __this__contactReports = new Vector();
        for (Enumeration other_enum = other.contactReports.elements(); other_enum.hasMoreElements(); ) {
          ContactReport other_element = (ContactReport)other_enum.nextElement();
          __this__contactReports.addElement(new ContactReport(other_element));
        }
        this.contactReports = __this__contactReports;
      }
      if (other.isSetActionType()) {
        this.actionType = other.actionType;
      }
    }

    public reportContacts_args deepCopy() {
      return new reportContacts_args(this);
    }

    public void clear() {
      setSyncOpRevisionIsSet(false);
      this.syncOpRevision = 0;
      this.category = null;
      this.contactReports = null;
      this.actionType = null;
    }

    public long getSyncOpRevision() {
      return this.syncOpRevision;
    }

    public void setSyncOpRevision(long syncOpRevision) {
      this.syncOpRevision = syncOpRevision;
      setSyncOpRevisionIsSet(true);
    }

    public void unsetSyncOpRevision() {
      __isset_vector[__SYNCOPREVISION_ISSET_ID] = false;
    }

    /** Returns true if field syncOpRevision is set (has been assigned a value) and false otherwise */
    public boolean isSetSyncOpRevision() {
      return __isset_vector[__SYNCOPREVISION_ISSET_ID];
    }

    public void setSyncOpRevisionIsSet(boolean value) {
      __isset_vector[__SYNCOPREVISION_ISSET_ID] = value;
    }

    /**
     * 
     * @see SyncCategory
     */
    public SyncCategory getCategory() {
      return this.category;
    }

    /**
     * 
     * @see SyncCategory
     */
    public void setCategory(SyncCategory category) {
      this.category = category;
    }

    public void unsetCategory() {
      this.category = null;
    }

    /** Returns true if field category is set (has been assigned a value) and false otherwise */
    public boolean isSetCategory() {
      return this.category != null;
    }

    public void setCategoryIsSet(boolean value) {
      if (!value) {
        this.category = null;
      }
    }

    public int getContactReportsSize() {
      return (this.contactReports == null) ? 0 : this.contactReports.size();
    }

    public Enumeration getContactReportsEnumeration() {
      return (this.contactReports == null) ? null : this.contactReports.elements();
    }

    public void addToContactReports(ContactReport elem) {
      if (this.contactReports == null) {
        this.contactReports = new Vector();
      }
      this.contactReports.addElement(elem);
    }

    public Vector getContactReports() {
      return this.contactReports;
    }

    public void setContactReports(Vector contactReports) {
      this.contactReports = contactReports;
    }

    public void unsetContactReports() {
      this.contactReports = null;
    }

    /** Returns true if field contactReports is set (has been assigned a value) and false otherwise */
    public boolean isSetContactReports() {
      return this.contactReports != null;
    }

    public void setContactReportsIsSet(boolean value) {
      if (!value) {
        this.contactReports = null;
      }
    }

    /**
     * 
     * @see SyncActionType
     */
    public SyncActionType getActionType() {
      return this.actionType;
    }

    /**
     * 
     * @see SyncActionType
     */
    public void setActionType(SyncActionType actionType) {
      this.actionType = actionType;
    }

    public void unsetActionType() {
      this.actionType = null;
    }

    /** Returns true if field actionType is set (has been assigned a value) and false otherwise */
    public boolean isSetActionType() {
      return this.actionType != null;
    }

    public void setActionTypeIsSet(boolean value) {
      if (!value) {
        this.actionType = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reportContacts_args)
        return this.equals((reportContacts_args)that);
      return false;
    }

    public boolean equals(reportContacts_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_syncOpRevision = true;
      boolean that_present_syncOpRevision = true;
      if (this_present_syncOpRevision || that_present_syncOpRevision) {
        if (!(this_present_syncOpRevision && that_present_syncOpRevision))
          return false;
        if (this.syncOpRevision != that.syncOpRevision)
          return false;
      }

      boolean this_present_category = true && this.isSetCategory();
      boolean that_present_category = true && that.isSetCategory();
      if (this_present_category || that_present_category) {
        if (!(this_present_category && that_present_category))
          return false;
        if (!this.category.equals(that.category))
          return false;
      }

      boolean this_present_contactReports = true && this.isSetContactReports();
      boolean that_present_contactReports = true && that.isSetContactReports();
      if (this_present_contactReports || that_present_contactReports) {
        if (!(this_present_contactReports && that_present_contactReports))
          return false;
        if (!this.contactReports.equals(that.contactReports))
          return false;
      }

      boolean this_present_actionType = true && this.isSetActionType();
      boolean that_present_actionType = true && that.isSetActionType();
      if (this_present_actionType || that_present_actionType) {
        if (!(this_present_actionType && that_present_actionType))
          return false;
        if (!this.actionType.equals(that.actionType))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      reportContacts_args other = (reportContacts_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSyncOpRevision(), other.isSetSyncOpRevision());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSyncOpRevision()) {
        lastComparison = TBaseHelper.compareTo(this.syncOpRevision, other.syncOpRevision);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCategory(), other.isSetCategory());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategory()) {
        lastComparison = TBaseHelper.compareTo(this.category, other.category);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetContactReports(), other.isSetContactReports());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContactReports()) {
        lastComparison = TBaseHelper.compareTo(this.contactReports, other.contactReports);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetActionType(), other.isSetActionType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActionType()) {
        lastComparison = TBaseHelper.compareTo(this.actionType, other.actionType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // SYNC_OP_REVISION
            if (field.type == TType.I64) {
              this.syncOpRevision = iprot.readI64();
              setSyncOpRevisionIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // CATEGORY
            if (field.type == TType.I32) {
              this.category = SyncCategory.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // CONTACT_REPORTS
            if (field.type == TType.LIST) {
              {
                TList _list1061 = iprot.readListBegin();
                this.contactReports = new Vector(_list1061.size);
                for (int _i1062 = 0; _i1062 < _list1061.size; ++_i1062)
                {
                  ContactReport _elem1063;
                  _elem1063 = new ContactReport();
                  _elem1063.read(iprot);
                  this.contactReports.addElement(_elem1063);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ACTION_TYPE
            if (field.type == TType.I32) {
              this.actionType = SyncActionType.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SYNC_OP_REVISION_FIELD_DESC);
      oprot.writeI64(this.syncOpRevision);
      oprot.writeFieldEnd();
      if (this.category != null) {
        oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
        oprot.writeI32(this.category.getValue());
        oprot.writeFieldEnd();
      }
      if (this.contactReports != null) {
        oprot.writeFieldBegin(CONTACT_REPORTS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.contactReports.size()));
          for (Enumeration _iter1064_enum = this.contactReports.elements(); _iter1064_enum.hasMoreElements(); )           {
            ContactReport _iter1064 = (ContactReport)_iter1064_enum.nextElement();
            _iter1064.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.actionType != null) {
        oprot.writeFieldBegin(ACTION_TYPE_FIELD_DESC);
        oprot.writeI32(this.actionType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("reportContacts_args(");
      boolean first = true;

      sb.append("syncOpRevision:");
      sb.append(this.syncOpRevision);
      first = false;
      if (!first) sb.append(", ");
      sb.append("category:");
      if (this.category == null) {
        sb.append("null");
      } else {
        sb.append(this.category);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contactReports:");
      if (this.contactReports == null) {
        sb.append("null");
      } else {
        sb.append(this.contactReports);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("actionType:");
      if (this.actionType == null) {
        sb.append("null");
      } else {
        sb.append(this.actionType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class reportContacts_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("reportContacts_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public reportContacts_result() {
    }

    public reportContacts_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportContacts_result(reportContacts_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          ContactReportResult other_element = (ContactReportResult)other_enum.nextElement();
          __this__success.addElement(new ContactReportResult(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public reportContacts_result deepCopy() {
      return new reportContacts_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(ContactReportResult elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reportContacts_result)
        return this.equals((reportContacts_result)that);
      return false;
    }

    public boolean equals(reportContacts_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      reportContacts_result other = (reportContacts_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list1065 = iprot.readListBegin();
                this.success = new Vector(_list1065.size);
                for (int _i1066 = 0; _i1066 < _list1065.size; ++_i1066)
                {
                  ContactReportResult _elem1067;
                  _elem1067 = new ContactReportResult();
                  _elem1067.read(iprot);
                  this.success.addElement(_elem1067);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter1068_enum = this.success.elements(); _iter1068_enum.hasMoreElements(); )           {
            ContactReportResult _iter1068 = (ContactReportResult)_iter1068_enum.nextElement();
            _iter1068.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("reportContacts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class reportGroups_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("reportGroups_args");

    private static final TField SYNC_OP_REVISION_FIELD_DESC = new TField("syncOpRevision", TType.I64, (short)2);
    private static final TField GROUPS_FIELD_DESC = new TField("groups", TType.LIST, (short)3);

    private long syncOpRevision;
    private Vector groups;

    // isset id assignments
    private static final int __SYNCOPREVISION_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public reportGroups_args() {
    }

    public reportGroups_args(
      long syncOpRevision,
      Vector groups)
    {
      this();
      this.syncOpRevision = syncOpRevision;
      setSyncOpRevisionIsSet(true);
      this.groups = groups;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportGroups_args(reportGroups_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.syncOpRevision = other.syncOpRevision;
      if (other.isSetGroups()) {
        Vector __this__groups = new Vector();
        for (Enumeration other_enum = other.groups.elements(); other_enum.hasMoreElements(); ) {
          Group other_element = (Group)other_enum.nextElement();
          __this__groups.addElement(new Group(other_element));
        }
        this.groups = __this__groups;
      }
    }

    public reportGroups_args deepCopy() {
      return new reportGroups_args(this);
    }

    public void clear() {
      setSyncOpRevisionIsSet(false);
      this.syncOpRevision = 0;
      this.groups = null;
    }

    public long getSyncOpRevision() {
      return this.syncOpRevision;
    }

    public void setSyncOpRevision(long syncOpRevision) {
      this.syncOpRevision = syncOpRevision;
      setSyncOpRevisionIsSet(true);
    }

    public void unsetSyncOpRevision() {
      __isset_vector[__SYNCOPREVISION_ISSET_ID] = false;
    }

    /** Returns true if field syncOpRevision is set (has been assigned a value) and false otherwise */
    public boolean isSetSyncOpRevision() {
      return __isset_vector[__SYNCOPREVISION_ISSET_ID];
    }

    public void setSyncOpRevisionIsSet(boolean value) {
      __isset_vector[__SYNCOPREVISION_ISSET_ID] = value;
    }

    public int getGroupsSize() {
      return (this.groups == null) ? 0 : this.groups.size();
    }

    public Enumeration getGroupsEnumeration() {
      return (this.groups == null) ? null : this.groups.elements();
    }

    public void addToGroups(Group elem) {
      if (this.groups == null) {
        this.groups = new Vector();
      }
      this.groups.addElement(elem);
    }

    public Vector getGroups() {
      return this.groups;
    }

    public void setGroups(Vector groups) {
      this.groups = groups;
    }

    public void unsetGroups() {
      this.groups = null;
    }

    /** Returns true if field groups is set (has been assigned a value) and false otherwise */
    public boolean isSetGroups() {
      return this.groups != null;
    }

    public void setGroupsIsSet(boolean value) {
      if (!value) {
        this.groups = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reportGroups_args)
        return this.equals((reportGroups_args)that);
      return false;
    }

    public boolean equals(reportGroups_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_syncOpRevision = true;
      boolean that_present_syncOpRevision = true;
      if (this_present_syncOpRevision || that_present_syncOpRevision) {
        if (!(this_present_syncOpRevision && that_present_syncOpRevision))
          return false;
        if (this.syncOpRevision != that.syncOpRevision)
          return false;
      }

      boolean this_present_groups = true && this.isSetGroups();
      boolean that_present_groups = true && that.isSetGroups();
      if (this_present_groups || that_present_groups) {
        if (!(this_present_groups && that_present_groups))
          return false;
        if (!this.groups.equals(that.groups))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      reportGroups_args other = (reportGroups_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSyncOpRevision(), other.isSetSyncOpRevision());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSyncOpRevision()) {
        lastComparison = TBaseHelper.compareTo(this.syncOpRevision, other.syncOpRevision);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGroups(), other.isSetGroups());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroups()) {
        lastComparison = TBaseHelper.compareTo(this.groups, other.groups);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // SYNC_OP_REVISION
            if (field.type == TType.I64) {
              this.syncOpRevision = iprot.readI64();
              setSyncOpRevisionIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // GROUPS
            if (field.type == TType.LIST) {
              {
                TList _list1069 = iprot.readListBegin();
                this.groups = new Vector(_list1069.size);
                for (int _i1070 = 0; _i1070 < _list1069.size; ++_i1070)
                {
                  Group _elem1071;
                  _elem1071 = new Group();
                  _elem1071.read(iprot);
                  this.groups.addElement(_elem1071);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SYNC_OP_REVISION_FIELD_DESC);
      oprot.writeI64(this.syncOpRevision);
      oprot.writeFieldEnd();
      if (this.groups != null) {
        oprot.writeFieldBegin(GROUPS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.groups.size()));
          for (Enumeration _iter1072_enum = this.groups.elements(); _iter1072_enum.hasMoreElements(); )           {
            Group _iter1072 = (Group)_iter1072_enum.nextElement();
            _iter1072.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("reportGroups_args(");
      boolean first = true;

      sb.append("syncOpRevision:");
      sb.append(this.syncOpRevision);
      first = false;
      if (!first) sb.append(", ");
      sb.append("groups:");
      if (this.groups == null) {
        sb.append("null");
      } else {
        sb.append(this.groups);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class reportGroups_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("reportGroups_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public reportGroups_result() {
    }

    public reportGroups_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportGroups_result(reportGroups_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public reportGroups_result deepCopy() {
      return new reportGroups_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reportGroups_result)
        return this.equals((reportGroups_result)that);
      return false;
    }

    public boolean equals(reportGroups_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      reportGroups_result other = (reportGroups_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("reportGroups_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class reportProfile_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("reportProfile_args");

    private static final TField SYNC_OP_REVISION_FIELD_DESC = new TField("syncOpRevision", TType.I64, (short)2);
    private static final TField PROFILE_FIELD_DESC = new TField("profile", TType.STRUCT, (short)3);

    private long syncOpRevision;
    private Profile profile;

    // isset id assignments
    private static final int __SYNCOPREVISION_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public reportProfile_args() {
    }

    public reportProfile_args(
      long syncOpRevision,
      Profile profile)
    {
      this();
      this.syncOpRevision = syncOpRevision;
      setSyncOpRevisionIsSet(true);
      this.profile = profile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportProfile_args(reportProfile_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.syncOpRevision = other.syncOpRevision;
      if (other.isSetProfile()) {
        this.profile = new Profile(other.profile);
      }
    }

    public reportProfile_args deepCopy() {
      return new reportProfile_args(this);
    }

    public void clear() {
      setSyncOpRevisionIsSet(false);
      this.syncOpRevision = 0;
      this.profile = null;
    }

    public long getSyncOpRevision() {
      return this.syncOpRevision;
    }

    public void setSyncOpRevision(long syncOpRevision) {
      this.syncOpRevision = syncOpRevision;
      setSyncOpRevisionIsSet(true);
    }

    public void unsetSyncOpRevision() {
      __isset_vector[__SYNCOPREVISION_ISSET_ID] = false;
    }

    /** Returns true if field syncOpRevision is set (has been assigned a value) and false otherwise */
    public boolean isSetSyncOpRevision() {
      return __isset_vector[__SYNCOPREVISION_ISSET_ID];
    }

    public void setSyncOpRevisionIsSet(boolean value) {
      __isset_vector[__SYNCOPREVISION_ISSET_ID] = value;
    }

    public Profile getProfile() {
      return this.profile;
    }

    public void setProfile(Profile profile) {
      this.profile = profile;
    }

    public void unsetProfile() {
      this.profile = null;
    }

    /** Returns true if field profile is set (has been assigned a value) and false otherwise */
    public boolean isSetProfile() {
      return this.profile != null;
    }

    public void setProfileIsSet(boolean value) {
      if (!value) {
        this.profile = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reportProfile_args)
        return this.equals((reportProfile_args)that);
      return false;
    }

    public boolean equals(reportProfile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_syncOpRevision = true;
      boolean that_present_syncOpRevision = true;
      if (this_present_syncOpRevision || that_present_syncOpRevision) {
        if (!(this_present_syncOpRevision && that_present_syncOpRevision))
          return false;
        if (this.syncOpRevision != that.syncOpRevision)
          return false;
      }

      boolean this_present_profile = true && this.isSetProfile();
      boolean that_present_profile = true && that.isSetProfile();
      if (this_present_profile || that_present_profile) {
        if (!(this_present_profile && that_present_profile))
          return false;
        if (!this.profile.equals(that.profile))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      reportProfile_args other = (reportProfile_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSyncOpRevision(), other.isSetSyncOpRevision());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSyncOpRevision()) {
        lastComparison = TBaseHelper.compareTo(this.syncOpRevision, other.syncOpRevision);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetProfile(), other.isSetProfile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfile()) {
        lastComparison = this.profile.compareTo(other.profile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // SYNC_OP_REVISION
            if (field.type == TType.I64) {
              this.syncOpRevision = iprot.readI64();
              setSyncOpRevisionIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PROFILE
            if (field.type == TType.STRUCT) {
              this.profile = new Profile();
              this.profile.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SYNC_OP_REVISION_FIELD_DESC);
      oprot.writeI64(this.syncOpRevision);
      oprot.writeFieldEnd();
      if (this.profile != null) {
        oprot.writeFieldBegin(PROFILE_FIELD_DESC);
        this.profile.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("reportProfile_args(");
      boolean first = true;

      sb.append("syncOpRevision:");
      sb.append(this.syncOpRevision);
      first = false;
      if (!first) sb.append(", ");
      sb.append("profile:");
      if (this.profile == null) {
        sb.append("null");
      } else {
        sb.append(this.profile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class reportProfile_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("reportProfile_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public reportProfile_result() {
    }

    public reportProfile_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportProfile_result(reportProfile_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public reportProfile_result deepCopy() {
      return new reportProfile_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reportProfile_result)
        return this.equals((reportProfile_result)that);
      return false;
    }

    public boolean equals(reportProfile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      reportProfile_result other = (reportProfile_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("reportProfile_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class reportRooms_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("reportRooms_args");

    private static final TField SYNC_OP_REVISION_FIELD_DESC = new TField("syncOpRevision", TType.I64, (short)2);
    private static final TField ROOMS_FIELD_DESC = new TField("rooms", TType.LIST, (short)3);

    private long syncOpRevision;
    private Vector rooms;

    // isset id assignments
    private static final int __SYNCOPREVISION_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public reportRooms_args() {
    }

    public reportRooms_args(
      long syncOpRevision,
      Vector rooms)
    {
      this();
      this.syncOpRevision = syncOpRevision;
      setSyncOpRevisionIsSet(true);
      this.rooms = rooms;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportRooms_args(reportRooms_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.syncOpRevision = other.syncOpRevision;
      if (other.isSetRooms()) {
        Vector __this__rooms = new Vector();
        for (Enumeration other_enum = other.rooms.elements(); other_enum.hasMoreElements(); ) {
          Room other_element = (Room)other_enum.nextElement();
          __this__rooms.addElement(new Room(other_element));
        }
        this.rooms = __this__rooms;
      }
    }

    public reportRooms_args deepCopy() {
      return new reportRooms_args(this);
    }

    public void clear() {
      setSyncOpRevisionIsSet(false);
      this.syncOpRevision = 0;
      this.rooms = null;
    }

    public long getSyncOpRevision() {
      return this.syncOpRevision;
    }

    public void setSyncOpRevision(long syncOpRevision) {
      this.syncOpRevision = syncOpRevision;
      setSyncOpRevisionIsSet(true);
    }

    public void unsetSyncOpRevision() {
      __isset_vector[__SYNCOPREVISION_ISSET_ID] = false;
    }

    /** Returns true if field syncOpRevision is set (has been assigned a value) and false otherwise */
    public boolean isSetSyncOpRevision() {
      return __isset_vector[__SYNCOPREVISION_ISSET_ID];
    }

    public void setSyncOpRevisionIsSet(boolean value) {
      __isset_vector[__SYNCOPREVISION_ISSET_ID] = value;
    }

    public int getRoomsSize() {
      return (this.rooms == null) ? 0 : this.rooms.size();
    }

    public Enumeration getRoomsEnumeration() {
      return (this.rooms == null) ? null : this.rooms.elements();
    }

    public void addToRooms(Room elem) {
      if (this.rooms == null) {
        this.rooms = new Vector();
      }
      this.rooms.addElement(elem);
    }

    public Vector getRooms() {
      return this.rooms;
    }

    public void setRooms(Vector rooms) {
      this.rooms = rooms;
    }

    public void unsetRooms() {
      this.rooms = null;
    }

    /** Returns true if field rooms is set (has been assigned a value) and false otherwise */
    public boolean isSetRooms() {
      return this.rooms != null;
    }

    public void setRoomsIsSet(boolean value) {
      if (!value) {
        this.rooms = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reportRooms_args)
        return this.equals((reportRooms_args)that);
      return false;
    }

    public boolean equals(reportRooms_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_syncOpRevision = true;
      boolean that_present_syncOpRevision = true;
      if (this_present_syncOpRevision || that_present_syncOpRevision) {
        if (!(this_present_syncOpRevision && that_present_syncOpRevision))
          return false;
        if (this.syncOpRevision != that.syncOpRevision)
          return false;
      }

      boolean this_present_rooms = true && this.isSetRooms();
      boolean that_present_rooms = true && that.isSetRooms();
      if (this_present_rooms || that_present_rooms) {
        if (!(this_present_rooms && that_present_rooms))
          return false;
        if (!this.rooms.equals(that.rooms))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      reportRooms_args other = (reportRooms_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSyncOpRevision(), other.isSetSyncOpRevision());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSyncOpRevision()) {
        lastComparison = TBaseHelper.compareTo(this.syncOpRevision, other.syncOpRevision);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetRooms(), other.isSetRooms());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRooms()) {
        lastComparison = TBaseHelper.compareTo(this.rooms, other.rooms);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // SYNC_OP_REVISION
            if (field.type == TType.I64) {
              this.syncOpRevision = iprot.readI64();
              setSyncOpRevisionIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ROOMS
            if (field.type == TType.LIST) {
              {
                TList _list1073 = iprot.readListBegin();
                this.rooms = new Vector(_list1073.size);
                for (int _i1074 = 0; _i1074 < _list1073.size; ++_i1074)
                {
                  Room _elem1075;
                  _elem1075 = new Room();
                  _elem1075.read(iprot);
                  this.rooms.addElement(_elem1075);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SYNC_OP_REVISION_FIELD_DESC);
      oprot.writeI64(this.syncOpRevision);
      oprot.writeFieldEnd();
      if (this.rooms != null) {
        oprot.writeFieldBegin(ROOMS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.rooms.size()));
          for (Enumeration _iter1076_enum = this.rooms.elements(); _iter1076_enum.hasMoreElements(); )           {
            Room _iter1076 = (Room)_iter1076_enum.nextElement();
            _iter1076.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("reportRooms_args(");
      boolean first = true;

      sb.append("syncOpRevision:");
      sb.append(this.syncOpRevision);
      first = false;
      if (!first) sb.append(", ");
      sb.append("rooms:");
      if (this.rooms == null) {
        sb.append("null");
      } else {
        sb.append(this.rooms);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class reportRooms_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("reportRooms_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public reportRooms_result() {
    }

    public reportRooms_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportRooms_result(reportRooms_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public reportRooms_result deepCopy() {
      return new reportRooms_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reportRooms_result)
        return this.equals((reportRooms_result)that);
      return false;
    }

    public boolean equals(reportRooms_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      reportRooms_result other = (reportRooms_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("reportRooms_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findAndAddContactByMetaTag_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findAndAddContactByMetaTag_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField USERID_FIELD_DESC = new TField("userid", TType.STRING, (short)2);
    private static final TField REFERENCE_FIELD_DESC = new TField("reference", TType.STRING, (short)3);

    private int reqSeq;
    private String userid;
    private String reference;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public findAndAddContactByMetaTag_args() {
    }

    public findAndAddContactByMetaTag_args(
      int reqSeq,
      String userid,
      String reference)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.userid = userid;
      this.reference = reference;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAndAddContactByMetaTag_args(findAndAddContactByMetaTag_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetUserid()) {
        this.userid = other.userid;
      }
      if (other.isSetReference()) {
        this.reference = other.reference;
      }
    }

    public findAndAddContactByMetaTag_args deepCopy() {
      return new findAndAddContactByMetaTag_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.userid = null;
      this.reference = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public String getUserid() {
      return this.userid;
    }

    public void setUserid(String userid) {
      this.userid = userid;
    }

    public void unsetUserid() {
      this.userid = null;
    }

    /** Returns true if field userid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserid() {
      return this.userid != null;
    }

    public void setUseridIsSet(boolean value) {
      if (!value) {
        this.userid = null;
      }
    }

    public String getReference() {
      return this.reference;
    }

    public void setReference(String reference) {
      this.reference = reference;
    }

    public void unsetReference() {
      this.reference = null;
    }

    /** Returns true if field reference is set (has been assigned a value) and false otherwise */
    public boolean isSetReference() {
      return this.reference != null;
    }

    public void setReferenceIsSet(boolean value) {
      if (!value) {
        this.reference = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAndAddContactByMetaTag_args)
        return this.equals((findAndAddContactByMetaTag_args)that);
      return false;
    }

    public boolean equals(findAndAddContactByMetaTag_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_userid = true && this.isSetUserid();
      boolean that_present_userid = true && that.isSetUserid();
      if (this_present_userid || that_present_userid) {
        if (!(this_present_userid && that_present_userid))
          return false;
        if (!this.userid.equals(that.userid))
          return false;
      }

      boolean this_present_reference = true && this.isSetReference();
      boolean that_present_reference = true && that.isSetReference();
      if (this_present_reference || that_present_reference) {
        if (!(this_present_reference && that_present_reference))
          return false;
        if (!this.reference.equals(that.reference))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findAndAddContactByMetaTag_args other = (findAndAddContactByMetaTag_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserid(), other.isSetUserid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserid()) {
        lastComparison = TBaseHelper.compareTo(this.userid, other.userid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetReference(), other.isSetReference());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference()) {
        lastComparison = TBaseHelper.compareTo(this.reference, other.reference);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USERID
            if (field.type == TType.STRING) {
              this.userid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // REFERENCE
            if (field.type == TType.STRING) {
              this.reference = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.userid != null) {
        oprot.writeFieldBegin(USERID_FIELD_DESC);
        oprot.writeString(this.userid);
        oprot.writeFieldEnd();
      }
      if (this.reference != null) {
        oprot.writeFieldBegin(REFERENCE_FIELD_DESC);
        oprot.writeString(this.reference);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findAndAddContactByMetaTag_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userid:");
      if (this.userid == null) {
        sb.append("null");
      } else {
        sb.append(this.userid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference:");
      if (this.reference == null) {
        sb.append("null");
      } else {
        sb.append(this.reference);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findAndAddContactByMetaTag_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findAndAddContactByMetaTag_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Contact success;
    private TalkException e;

    // isset id assignments

    public findAndAddContactByMetaTag_result() {
    }

    public findAndAddContactByMetaTag_result(
      Contact success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAndAddContactByMetaTag_result(findAndAddContactByMetaTag_result other) {
      if (other.isSetSuccess()) {
        this.success = new Contact(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public findAndAddContactByMetaTag_result deepCopy() {
      return new findAndAddContactByMetaTag_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Contact getSuccess() {
      return this.success;
    }

    public void setSuccess(Contact success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAndAddContactByMetaTag_result)
        return this.equals((findAndAddContactByMetaTag_result)that);
      return false;
    }

    public boolean equals(findAndAddContactByMetaTag_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findAndAddContactByMetaTag_result other = (findAndAddContactByMetaTag_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Contact();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findAndAddContactByMetaTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class reportSettings_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("reportSettings_args");

    private static final TField SYNC_OP_REVISION_FIELD_DESC = new TField("syncOpRevision", TType.I64, (short)2);
    private static final TField SETTINGS_FIELD_DESC = new TField("settings", TType.STRUCT, (short)3);

    private long syncOpRevision;
    private Settings settings;

    // isset id assignments
    private static final int __SYNCOPREVISION_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public reportSettings_args() {
    }

    public reportSettings_args(
      long syncOpRevision,
      Settings settings)
    {
      this();
      this.syncOpRevision = syncOpRevision;
      setSyncOpRevisionIsSet(true);
      this.settings = settings;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportSettings_args(reportSettings_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.syncOpRevision = other.syncOpRevision;
      if (other.isSetSettings()) {
        this.settings = new Settings(other.settings);
      }
    }

    public reportSettings_args deepCopy() {
      return new reportSettings_args(this);
    }

    public void clear() {
      setSyncOpRevisionIsSet(false);
      this.syncOpRevision = 0;
      this.settings = null;
    }

    public long getSyncOpRevision() {
      return this.syncOpRevision;
    }

    public void setSyncOpRevision(long syncOpRevision) {
      this.syncOpRevision = syncOpRevision;
      setSyncOpRevisionIsSet(true);
    }

    public void unsetSyncOpRevision() {
      __isset_vector[__SYNCOPREVISION_ISSET_ID] = false;
    }

    /** Returns true if field syncOpRevision is set (has been assigned a value) and false otherwise */
    public boolean isSetSyncOpRevision() {
      return __isset_vector[__SYNCOPREVISION_ISSET_ID];
    }

    public void setSyncOpRevisionIsSet(boolean value) {
      __isset_vector[__SYNCOPREVISION_ISSET_ID] = value;
    }

    public Settings getSettings() {
      return this.settings;
    }

    public void setSettings(Settings settings) {
      this.settings = settings;
    }

    public void unsetSettings() {
      this.settings = null;
    }

    /** Returns true if field settings is set (has been assigned a value) and false otherwise */
    public boolean isSetSettings() {
      return this.settings != null;
    }

    public void setSettingsIsSet(boolean value) {
      if (!value) {
        this.settings = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reportSettings_args)
        return this.equals((reportSettings_args)that);
      return false;
    }

    public boolean equals(reportSettings_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_syncOpRevision = true;
      boolean that_present_syncOpRevision = true;
      if (this_present_syncOpRevision || that_present_syncOpRevision) {
        if (!(this_present_syncOpRevision && that_present_syncOpRevision))
          return false;
        if (this.syncOpRevision != that.syncOpRevision)
          return false;
      }

      boolean this_present_settings = true && this.isSetSettings();
      boolean that_present_settings = true && that.isSetSettings();
      if (this_present_settings || that_present_settings) {
        if (!(this_present_settings && that_present_settings))
          return false;
        if (!this.settings.equals(that.settings))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      reportSettings_args other = (reportSettings_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSyncOpRevision(), other.isSetSyncOpRevision());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSyncOpRevision()) {
        lastComparison = TBaseHelper.compareTo(this.syncOpRevision, other.syncOpRevision);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSettings(), other.isSetSettings());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSettings()) {
        lastComparison = this.settings.compareTo(other.settings);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // SYNC_OP_REVISION
            if (field.type == TType.I64) {
              this.syncOpRevision = iprot.readI64();
              setSyncOpRevisionIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SETTINGS
            if (field.type == TType.STRUCT) {
              this.settings = new Settings();
              this.settings.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SYNC_OP_REVISION_FIELD_DESC);
      oprot.writeI64(this.syncOpRevision);
      oprot.writeFieldEnd();
      if (this.settings != null) {
        oprot.writeFieldBegin(SETTINGS_FIELD_DESC);
        this.settings.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("reportSettings_args(");
      boolean first = true;

      sb.append("syncOpRevision:");
      sb.append(this.syncOpRevision);
      first = false;
      if (!first) sb.append(", ");
      sb.append("settings:");
      if (this.settings == null) {
        sb.append("null");
      } else {
        sb.append(this.settings);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class reportSettings_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("reportSettings_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public reportSettings_result() {
    }

    public reportSettings_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportSettings_result(reportSettings_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public reportSettings_result deepCopy() {
      return new reportSettings_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reportSettings_result)
        return this.equals((reportSettings_result)that);
      return false;
    }

    public boolean equals(reportSettings_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      reportSettings_result other = (reportSettings_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("reportSettings_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class reportSpam_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("reportSpam_args");

    private static final TField CHAT_MID_FIELD_DESC = new TField("chatMid", TType.STRING, (short)2);
    private static final TField MEMBER_MIDS_FIELD_DESC = new TField("memberMids", TType.LIST, (short)3);
    private static final TField SPAMMER_REASONS_FIELD_DESC = new TField("spammerReasons", TType.LIST, (short)4);
    private static final TField SENDER_MIDS_FIELD_DESC = new TField("senderMids", TType.LIST, (short)5);
    private static final TField SPAM_MESSAGE_IDS_FIELD_DESC = new TField("spamMessageIds", TType.LIST, (short)6);
    private static final TField SPAM_MESSAGES_FIELD_DESC = new TField("spamMessages", TType.LIST, (short)7);

    private String chatMid;
    private Vector memberMids;
    private Vector spammerReasons;
    private Vector senderMids;
    private Vector spamMessageIds;
    private Vector spamMessages;

    // isset id assignments

    public reportSpam_args() {
    }

    public reportSpam_args(
      String chatMid,
      Vector memberMids,
      Vector spammerReasons,
      Vector senderMids,
      Vector spamMessageIds,
      Vector spamMessages)
    {
      this();
      this.chatMid = chatMid;
      this.memberMids = memberMids;
      this.spammerReasons = spammerReasons;
      this.senderMids = senderMids;
      this.spamMessageIds = spamMessageIds;
      this.spamMessages = spamMessages;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportSpam_args(reportSpam_args other) {
      if (other.isSetChatMid()) {
        this.chatMid = other.chatMid;
      }
      if (other.isSetMemberMids()) {
        Vector __this__memberMids = new Vector();
        for (Enumeration other_enum = other.memberMids.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__memberMids.addElement(other_element);
        }
        this.memberMids = __this__memberMids;
      }
      if (other.isSetSpammerReasons()) {
        Vector __this__spammerReasons = new Vector();
        for (Enumeration other_enum = other.spammerReasons.elements(); other_enum.hasMoreElements(); ) {
          SpammerReason other_element = (SpammerReason)other_enum.nextElement();
          __this__spammerReasons.addElement(other_element);
        }
        this.spammerReasons = __this__spammerReasons;
      }
      if (other.isSetSenderMids()) {
        Vector __this__senderMids = new Vector();
        for (Enumeration other_enum = other.senderMids.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__senderMids.addElement(other_element);
        }
        this.senderMids = __this__senderMids;
      }
      if (other.isSetSpamMessageIds()) {
        Vector __this__spamMessageIds = new Vector();
        for (Enumeration other_enum = other.spamMessageIds.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__spamMessageIds.addElement(other_element);
        }
        this.spamMessageIds = __this__spamMessageIds;
      }
      if (other.isSetSpamMessages()) {
        Vector __this__spamMessages = new Vector();
        for (Enumeration other_enum = other.spamMessages.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__spamMessages.addElement(other_element);
        }
        this.spamMessages = __this__spamMessages;
      }
    }

    public reportSpam_args deepCopy() {
      return new reportSpam_args(this);
    }

    public void clear() {
      this.chatMid = null;
      this.memberMids = null;
      this.spammerReasons = null;
      this.senderMids = null;
      this.spamMessageIds = null;
      this.spamMessages = null;
    }

    public String getChatMid() {
      return this.chatMid;
    }

    public void setChatMid(String chatMid) {
      this.chatMid = chatMid;
    }

    public void unsetChatMid() {
      this.chatMid = null;
    }

    /** Returns true if field chatMid is set (has been assigned a value) and false otherwise */
    public boolean isSetChatMid() {
      return this.chatMid != null;
    }

    public void setChatMidIsSet(boolean value) {
      if (!value) {
        this.chatMid = null;
      }
    }

    public int getMemberMidsSize() {
      return (this.memberMids == null) ? 0 : this.memberMids.size();
    }

    public Enumeration getMemberMidsEnumeration() {
      return (this.memberMids == null) ? null : this.memberMids.elements();
    }

    public void addToMemberMids(String elem) {
      if (this.memberMids == null) {
        this.memberMids = new Vector();
      }
      this.memberMids.addElement(elem);
    }

    public Vector getMemberMids() {
      return this.memberMids;
    }

    public void setMemberMids(Vector memberMids) {
      this.memberMids = memberMids;
    }

    public void unsetMemberMids() {
      this.memberMids = null;
    }

    /** Returns true if field memberMids is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberMids() {
      return this.memberMids != null;
    }

    public void setMemberMidsIsSet(boolean value) {
      if (!value) {
        this.memberMids = null;
      }
    }

    public int getSpammerReasonsSize() {
      return (this.spammerReasons == null) ? 0 : this.spammerReasons.size();
    }

    public Enumeration getSpammerReasonsEnumeration() {
      return (this.spammerReasons == null) ? null : this.spammerReasons.elements();
    }

    public void addToSpammerReasons(SpammerReason elem) {
      if (this.spammerReasons == null) {
        this.spammerReasons = new Vector();
      }
      this.spammerReasons.addElement(elem);
    }

    public Vector getSpammerReasons() {
      return this.spammerReasons;
    }

    public void setSpammerReasons(Vector spammerReasons) {
      this.spammerReasons = spammerReasons;
    }

    public void unsetSpammerReasons() {
      this.spammerReasons = null;
    }

    /** Returns true if field spammerReasons is set (has been assigned a value) and false otherwise */
    public boolean isSetSpammerReasons() {
      return this.spammerReasons != null;
    }

    public void setSpammerReasonsIsSet(boolean value) {
      if (!value) {
        this.spammerReasons = null;
      }
    }

    public int getSenderMidsSize() {
      return (this.senderMids == null) ? 0 : this.senderMids.size();
    }

    public Enumeration getSenderMidsEnumeration() {
      return (this.senderMids == null) ? null : this.senderMids.elements();
    }

    public void addToSenderMids(String elem) {
      if (this.senderMids == null) {
        this.senderMids = new Vector();
      }
      this.senderMids.addElement(elem);
    }

    public Vector getSenderMids() {
      return this.senderMids;
    }

    public void setSenderMids(Vector senderMids) {
      this.senderMids = senderMids;
    }

    public void unsetSenderMids() {
      this.senderMids = null;
    }

    /** Returns true if field senderMids is set (has been assigned a value) and false otherwise */
    public boolean isSetSenderMids() {
      return this.senderMids != null;
    }

    public void setSenderMidsIsSet(boolean value) {
      if (!value) {
        this.senderMids = null;
      }
    }

    public int getSpamMessageIdsSize() {
      return (this.spamMessageIds == null) ? 0 : this.spamMessageIds.size();
    }

    public Enumeration getSpamMessageIdsEnumeration() {
      return (this.spamMessageIds == null) ? null : this.spamMessageIds.elements();
    }

    public void addToSpamMessageIds(String elem) {
      if (this.spamMessageIds == null) {
        this.spamMessageIds = new Vector();
      }
      this.spamMessageIds.addElement(elem);
    }

    public Vector getSpamMessageIds() {
      return this.spamMessageIds;
    }

    public void setSpamMessageIds(Vector spamMessageIds) {
      this.spamMessageIds = spamMessageIds;
    }

    public void unsetSpamMessageIds() {
      this.spamMessageIds = null;
    }

    /** Returns true if field spamMessageIds is set (has been assigned a value) and false otherwise */
    public boolean isSetSpamMessageIds() {
      return this.spamMessageIds != null;
    }

    public void setSpamMessageIdsIsSet(boolean value) {
      if (!value) {
        this.spamMessageIds = null;
      }
    }

    public int getSpamMessagesSize() {
      return (this.spamMessages == null) ? 0 : this.spamMessages.size();
    }

    public Enumeration getSpamMessagesEnumeration() {
      return (this.spamMessages == null) ? null : this.spamMessages.elements();
    }

    public void addToSpamMessages(String elem) {
      if (this.spamMessages == null) {
        this.spamMessages = new Vector();
      }
      this.spamMessages.addElement(elem);
    }

    public Vector getSpamMessages() {
      return this.spamMessages;
    }

    public void setSpamMessages(Vector spamMessages) {
      this.spamMessages = spamMessages;
    }

    public void unsetSpamMessages() {
      this.spamMessages = null;
    }

    /** Returns true if field spamMessages is set (has been assigned a value) and false otherwise */
    public boolean isSetSpamMessages() {
      return this.spamMessages != null;
    }

    public void setSpamMessagesIsSet(boolean value) {
      if (!value) {
        this.spamMessages = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reportSpam_args)
        return this.equals((reportSpam_args)that);
      return false;
    }

    public boolean equals(reportSpam_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_chatMid = true && this.isSetChatMid();
      boolean that_present_chatMid = true && that.isSetChatMid();
      if (this_present_chatMid || that_present_chatMid) {
        if (!(this_present_chatMid && that_present_chatMid))
          return false;
        if (!this.chatMid.equals(that.chatMid))
          return false;
      }

      boolean this_present_memberMids = true && this.isSetMemberMids();
      boolean that_present_memberMids = true && that.isSetMemberMids();
      if (this_present_memberMids || that_present_memberMids) {
        if (!(this_present_memberMids && that_present_memberMids))
          return false;
        if (!this.memberMids.equals(that.memberMids))
          return false;
      }

      boolean this_present_spammerReasons = true && this.isSetSpammerReasons();
      boolean that_present_spammerReasons = true && that.isSetSpammerReasons();
      if (this_present_spammerReasons || that_present_spammerReasons) {
        if (!(this_present_spammerReasons && that_present_spammerReasons))
          return false;
        if (!this.spammerReasons.equals(that.spammerReasons))
          return false;
      }

      boolean this_present_senderMids = true && this.isSetSenderMids();
      boolean that_present_senderMids = true && that.isSetSenderMids();
      if (this_present_senderMids || that_present_senderMids) {
        if (!(this_present_senderMids && that_present_senderMids))
          return false;
        if (!this.senderMids.equals(that.senderMids))
          return false;
      }

      boolean this_present_spamMessageIds = true && this.isSetSpamMessageIds();
      boolean that_present_spamMessageIds = true && that.isSetSpamMessageIds();
      if (this_present_spamMessageIds || that_present_spamMessageIds) {
        if (!(this_present_spamMessageIds && that_present_spamMessageIds))
          return false;
        if (!this.spamMessageIds.equals(that.spamMessageIds))
          return false;
      }

      boolean this_present_spamMessages = true && this.isSetSpamMessages();
      boolean that_present_spamMessages = true && that.isSetSpamMessages();
      if (this_present_spamMessages || that_present_spamMessages) {
        if (!(this_present_spamMessages && that_present_spamMessages))
          return false;
        if (!this.spamMessages.equals(that.spamMessages))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      reportSpam_args other = (reportSpam_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetChatMid(), other.isSetChatMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChatMid()) {
        lastComparison = TBaseHelper.compareTo(this.chatMid, other.chatMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMemberMids(), other.isSetMemberMids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberMids()) {
        lastComparison = TBaseHelper.compareTo(this.memberMids, other.memberMids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSpammerReasons(), other.isSetSpammerReasons());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpammerReasons()) {
        lastComparison = TBaseHelper.compareTo(this.spammerReasons, other.spammerReasons);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSenderMids(), other.isSetSenderMids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSenderMids()) {
        lastComparison = TBaseHelper.compareTo(this.senderMids, other.senderMids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSpamMessageIds(), other.isSetSpamMessageIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpamMessageIds()) {
        lastComparison = TBaseHelper.compareTo(this.spamMessageIds, other.spamMessageIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSpamMessages(), other.isSetSpamMessages());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpamMessages()) {
        lastComparison = TBaseHelper.compareTo(this.spamMessages, other.spamMessages);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // CHAT_MID
            if (field.type == TType.STRING) {
              this.chatMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // MEMBER_MIDS
            if (field.type == TType.LIST) {
              {
                TList _list1077 = iprot.readListBegin();
                this.memberMids = new Vector(_list1077.size);
                for (int _i1078 = 0; _i1078 < _list1077.size; ++_i1078)
                {
                  String _elem1079;
                  _elem1079 = iprot.readString();
                  this.memberMids.addElement(_elem1079);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // SPAMMER_REASONS
            if (field.type == TType.LIST) {
              {
                TList _list1080 = iprot.readListBegin();
                this.spammerReasons = new Vector(_list1080.size);
                for (int _i1081 = 0; _i1081 < _list1080.size; ++_i1081)
                {
                  SpammerReason _elem1082;
                  _elem1082 = SpammerReason.findByValue(iprot.readI32());
                  this.spammerReasons.addElement(_elem1082);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // SENDER_MIDS
            if (field.type == TType.LIST) {
              {
                TList _list1083 = iprot.readListBegin();
                this.senderMids = new Vector(_list1083.size);
                for (int _i1084 = 0; _i1084 < _list1083.size; ++_i1084)
                {
                  String _elem1085;
                  _elem1085 = iprot.readString();
                  this.senderMids.addElement(_elem1085);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // SPAM_MESSAGE_IDS
            if (field.type == TType.LIST) {
              {
                TList _list1086 = iprot.readListBegin();
                this.spamMessageIds = new Vector(_list1086.size);
                for (int _i1087 = 0; _i1087 < _list1086.size; ++_i1087)
                {
                  String _elem1088;
                  _elem1088 = iprot.readString();
                  this.spamMessageIds.addElement(_elem1088);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // SPAM_MESSAGES
            if (field.type == TType.LIST) {
              {
                TList _list1089 = iprot.readListBegin();
                this.spamMessages = new Vector(_list1089.size);
                for (int _i1090 = 0; _i1090 < _list1089.size; ++_i1090)
                {
                  String _elem1091;
                  _elem1091 = iprot.readString();
                  this.spamMessages.addElement(_elem1091);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.chatMid != null) {
        oprot.writeFieldBegin(CHAT_MID_FIELD_DESC);
        oprot.writeString(this.chatMid);
        oprot.writeFieldEnd();
      }
      if (this.memberMids != null) {
        oprot.writeFieldBegin(MEMBER_MIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.memberMids.size()));
          for (Enumeration _iter1092_enum = this.memberMids.elements(); _iter1092_enum.hasMoreElements(); )           {
            String _iter1092 = (String)_iter1092_enum.nextElement();
            oprot.writeString(_iter1092);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.spammerReasons != null) {
        oprot.writeFieldBegin(SPAMMER_REASONS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I32, this.spammerReasons.size()));
          for (Enumeration _iter1093_enum = this.spammerReasons.elements(); _iter1093_enum.hasMoreElements(); )           {
            SpammerReason _iter1093 = (SpammerReason)_iter1093_enum.nextElement();
            oprot.writeI32(_iter1093.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.senderMids != null) {
        oprot.writeFieldBegin(SENDER_MIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.senderMids.size()));
          for (Enumeration _iter1094_enum = this.senderMids.elements(); _iter1094_enum.hasMoreElements(); )           {
            String _iter1094 = (String)_iter1094_enum.nextElement();
            oprot.writeString(_iter1094);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.spamMessageIds != null) {
        oprot.writeFieldBegin(SPAM_MESSAGE_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.spamMessageIds.size()));
          for (Enumeration _iter1095_enum = this.spamMessageIds.elements(); _iter1095_enum.hasMoreElements(); )           {
            String _iter1095 = (String)_iter1095_enum.nextElement();
            oprot.writeString(_iter1095);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.spamMessages != null) {
        oprot.writeFieldBegin(SPAM_MESSAGES_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.spamMessages.size()));
          for (Enumeration _iter1096_enum = this.spamMessages.elements(); _iter1096_enum.hasMoreElements(); )           {
            String _iter1096 = (String)_iter1096_enum.nextElement();
            oprot.writeString(_iter1096);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("reportSpam_args(");
      boolean first = true;

      sb.append("chatMid:");
      if (this.chatMid == null) {
        sb.append("null");
      } else {
        sb.append(this.chatMid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("memberMids:");
      if (this.memberMids == null) {
        sb.append("null");
      } else {
        sb.append(this.memberMids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("spammerReasons:");
      if (this.spammerReasons == null) {
        sb.append("null");
      } else {
        sb.append(this.spammerReasons);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("senderMids:");
      if (this.senderMids == null) {
        sb.append("null");
      } else {
        sb.append(this.senderMids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("spamMessageIds:");
      if (this.spamMessageIds == null) {
        sb.append("null");
      } else {
        sb.append(this.spamMessageIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("spamMessages:");
      if (this.spamMessages == null) {
        sb.append("null");
      } else {
        sb.append(this.spamMessages);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class reportSpam_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("reportSpam_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public reportSpam_result() {
    }

    public reportSpam_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportSpam_result(reportSpam_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public reportSpam_result deepCopy() {
      return new reportSpam_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reportSpam_result)
        return this.equals((reportSpam_result)that);
      return false;
    }

    public boolean equals(reportSpam_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      reportSpam_result other = (reportSpam_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("reportSpam_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class reportSpammer_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("reportSpammer_args");

    private static final TField SPAMMER_MID_FIELD_DESC = new TField("spammerMid", TType.STRING, (short)2);
    private static final TField SPAMMER_REASONS_FIELD_DESC = new TField("spammerReasons", TType.LIST, (short)3);
    private static final TField SPAM_MESSAGE_IDS_FIELD_DESC = new TField("spamMessageIds", TType.LIST, (short)4);

    private String spammerMid;
    private Vector spammerReasons;
    private Vector spamMessageIds;

    // isset id assignments

    public reportSpammer_args() {
    }

    public reportSpammer_args(
      String spammerMid,
      Vector spammerReasons,
      Vector spamMessageIds)
    {
      this();
      this.spammerMid = spammerMid;
      this.spammerReasons = spammerReasons;
      this.spamMessageIds = spamMessageIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportSpammer_args(reportSpammer_args other) {
      if (other.isSetSpammerMid()) {
        this.spammerMid = other.spammerMid;
      }
      if (other.isSetSpammerReasons()) {
        Vector __this__spammerReasons = new Vector();
        for (Enumeration other_enum = other.spammerReasons.elements(); other_enum.hasMoreElements(); ) {
          SpammerReason other_element = (SpammerReason)other_enum.nextElement();
          __this__spammerReasons.addElement(other_element);
        }
        this.spammerReasons = __this__spammerReasons;
      }
      if (other.isSetSpamMessageIds()) {
        Vector __this__spamMessageIds = new Vector();
        for (Enumeration other_enum = other.spamMessageIds.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__spamMessageIds.addElement(other_element);
        }
        this.spamMessageIds = __this__spamMessageIds;
      }
    }

    public reportSpammer_args deepCopy() {
      return new reportSpammer_args(this);
    }

    public void clear() {
      this.spammerMid = null;
      this.spammerReasons = null;
      this.spamMessageIds = null;
    }

    public String getSpammerMid() {
      return this.spammerMid;
    }

    public void setSpammerMid(String spammerMid) {
      this.spammerMid = spammerMid;
    }

    public void unsetSpammerMid() {
      this.spammerMid = null;
    }

    /** Returns true if field spammerMid is set (has been assigned a value) and false otherwise */
    public boolean isSetSpammerMid() {
      return this.spammerMid != null;
    }

    public void setSpammerMidIsSet(boolean value) {
      if (!value) {
        this.spammerMid = null;
      }
    }

    public int getSpammerReasonsSize() {
      return (this.spammerReasons == null) ? 0 : this.spammerReasons.size();
    }

    public Enumeration getSpammerReasonsEnumeration() {
      return (this.spammerReasons == null) ? null : this.spammerReasons.elements();
    }

    public void addToSpammerReasons(SpammerReason elem) {
      if (this.spammerReasons == null) {
        this.spammerReasons = new Vector();
      }
      this.spammerReasons.addElement(elem);
    }

    public Vector getSpammerReasons() {
      return this.spammerReasons;
    }

    public void setSpammerReasons(Vector spammerReasons) {
      this.spammerReasons = spammerReasons;
    }

    public void unsetSpammerReasons() {
      this.spammerReasons = null;
    }

    /** Returns true if field spammerReasons is set (has been assigned a value) and false otherwise */
    public boolean isSetSpammerReasons() {
      return this.spammerReasons != null;
    }

    public void setSpammerReasonsIsSet(boolean value) {
      if (!value) {
        this.spammerReasons = null;
      }
    }

    public int getSpamMessageIdsSize() {
      return (this.spamMessageIds == null) ? 0 : this.spamMessageIds.size();
    }

    public Enumeration getSpamMessageIdsEnumeration() {
      return (this.spamMessageIds == null) ? null : this.spamMessageIds.elements();
    }

    public void addToSpamMessageIds(String elem) {
      if (this.spamMessageIds == null) {
        this.spamMessageIds = new Vector();
      }
      this.spamMessageIds.addElement(elem);
    }

    public Vector getSpamMessageIds() {
      return this.spamMessageIds;
    }

    public void setSpamMessageIds(Vector spamMessageIds) {
      this.spamMessageIds = spamMessageIds;
    }

    public void unsetSpamMessageIds() {
      this.spamMessageIds = null;
    }

    /** Returns true if field spamMessageIds is set (has been assigned a value) and false otherwise */
    public boolean isSetSpamMessageIds() {
      return this.spamMessageIds != null;
    }

    public void setSpamMessageIdsIsSet(boolean value) {
      if (!value) {
        this.spamMessageIds = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reportSpammer_args)
        return this.equals((reportSpammer_args)that);
      return false;
    }

    public boolean equals(reportSpammer_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_spammerMid = true && this.isSetSpammerMid();
      boolean that_present_spammerMid = true && that.isSetSpammerMid();
      if (this_present_spammerMid || that_present_spammerMid) {
        if (!(this_present_spammerMid && that_present_spammerMid))
          return false;
        if (!this.spammerMid.equals(that.spammerMid))
          return false;
      }

      boolean this_present_spammerReasons = true && this.isSetSpammerReasons();
      boolean that_present_spammerReasons = true && that.isSetSpammerReasons();
      if (this_present_spammerReasons || that_present_spammerReasons) {
        if (!(this_present_spammerReasons && that_present_spammerReasons))
          return false;
        if (!this.spammerReasons.equals(that.spammerReasons))
          return false;
      }

      boolean this_present_spamMessageIds = true && this.isSetSpamMessageIds();
      boolean that_present_spamMessageIds = true && that.isSetSpamMessageIds();
      if (this_present_spamMessageIds || that_present_spamMessageIds) {
        if (!(this_present_spamMessageIds && that_present_spamMessageIds))
          return false;
        if (!this.spamMessageIds.equals(that.spamMessageIds))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      reportSpammer_args other = (reportSpammer_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSpammerMid(), other.isSetSpammerMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpammerMid()) {
        lastComparison = TBaseHelper.compareTo(this.spammerMid, other.spammerMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSpammerReasons(), other.isSetSpammerReasons());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpammerReasons()) {
        lastComparison = TBaseHelper.compareTo(this.spammerReasons, other.spammerReasons);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSpamMessageIds(), other.isSetSpamMessageIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpamMessageIds()) {
        lastComparison = TBaseHelper.compareTo(this.spamMessageIds, other.spamMessageIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // SPAMMER_MID
            if (field.type == TType.STRING) {
              this.spammerMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SPAMMER_REASONS
            if (field.type == TType.LIST) {
              {
                TList _list1097 = iprot.readListBegin();
                this.spammerReasons = new Vector(_list1097.size);
                for (int _i1098 = 0; _i1098 < _list1097.size; ++_i1098)
                {
                  SpammerReason _elem1099;
                  _elem1099 = SpammerReason.findByValue(iprot.readI32());
                  this.spammerReasons.addElement(_elem1099);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // SPAM_MESSAGE_IDS
            if (field.type == TType.LIST) {
              {
                TList _list1100 = iprot.readListBegin();
                this.spamMessageIds = new Vector(_list1100.size);
                for (int _i1101 = 0; _i1101 < _list1100.size; ++_i1101)
                {
                  String _elem1102;
                  _elem1102 = iprot.readString();
                  this.spamMessageIds.addElement(_elem1102);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.spammerMid != null) {
        oprot.writeFieldBegin(SPAMMER_MID_FIELD_DESC);
        oprot.writeString(this.spammerMid);
        oprot.writeFieldEnd();
      }
      if (this.spammerReasons != null) {
        oprot.writeFieldBegin(SPAMMER_REASONS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I32, this.spammerReasons.size()));
          for (Enumeration _iter1103_enum = this.spammerReasons.elements(); _iter1103_enum.hasMoreElements(); )           {
            SpammerReason _iter1103 = (SpammerReason)_iter1103_enum.nextElement();
            oprot.writeI32(_iter1103.getValue());
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.spamMessageIds != null) {
        oprot.writeFieldBegin(SPAM_MESSAGE_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.spamMessageIds.size()));
          for (Enumeration _iter1104_enum = this.spamMessageIds.elements(); _iter1104_enum.hasMoreElements(); )           {
            String _iter1104 = (String)_iter1104_enum.nextElement();
            oprot.writeString(_iter1104);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("reportSpammer_args(");
      boolean first = true;

      sb.append("spammerMid:");
      if (this.spammerMid == null) {
        sb.append("null");
      } else {
        sb.append(this.spammerMid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("spammerReasons:");
      if (this.spammerReasons == null) {
        sb.append("null");
      } else {
        sb.append(this.spammerReasons);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("spamMessageIds:");
      if (this.spamMessageIds == null) {
        sb.append("null");
      } else {
        sb.append(this.spamMessageIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class reportSpammer_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("reportSpammer_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public reportSpammer_result() {
    }

    public reportSpammer_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reportSpammer_result(reportSpammer_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public reportSpammer_result deepCopy() {
      return new reportSpammer_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reportSpammer_result)
        return this.equals((reportSpammer_result)that);
      return false;
    }

    public boolean equals(reportSpammer_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      reportSpammer_result other = (reportSpammer_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("reportSpammer_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class requestAccountPasswordReset_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("requestAccountPasswordReset_args");

    private static final TField PROVIDER_FIELD_DESC = new TField("provider", TType.I32, (short)4);
    private static final TField IDENTIFIER_FIELD_DESC = new TField("identifier", TType.STRING, (short)2);
    private static final TField LOCALE_FIELD_DESC = new TField("locale", TType.STRING, (short)5);

    private IdentityProvider provider;
    private String identifier;
    private String locale;

    // isset id assignments

    public requestAccountPasswordReset_args() {
    }

    public requestAccountPasswordReset_args(
      IdentityProvider provider,
      String identifier,
      String locale)
    {
      this();
      this.provider = provider;
      this.identifier = identifier;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestAccountPasswordReset_args(requestAccountPasswordReset_args other) {
      if (other.isSetProvider()) {
        this.provider = other.provider;
      }
      if (other.isSetIdentifier()) {
        this.identifier = other.identifier;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public requestAccountPasswordReset_args deepCopy() {
      return new requestAccountPasswordReset_args(this);
    }

    public void clear() {
      this.provider = null;
      this.identifier = null;
      this.locale = null;
    }

    /**
     * 
     * @see IdentityProvider
     */
    public IdentityProvider getProvider() {
      return this.provider;
    }

    /**
     * 
     * @see IdentityProvider
     */
    public void setProvider(IdentityProvider provider) {
      this.provider = provider;
    }

    public void unsetProvider() {
      this.provider = null;
    }

    /** Returns true if field provider is set (has been assigned a value) and false otherwise */
    public boolean isSetProvider() {
      return this.provider != null;
    }

    public void setProviderIsSet(boolean value) {
      if (!value) {
        this.provider = null;
      }
    }

    public String getIdentifier() {
      return this.identifier;
    }

    public void setIdentifier(String identifier) {
      this.identifier = identifier;
    }

    public void unsetIdentifier() {
      this.identifier = null;
    }

    /** Returns true if field identifier is set (has been assigned a value) and false otherwise */
    public boolean isSetIdentifier() {
      return this.identifier != null;
    }

    public void setIdentifierIsSet(boolean value) {
      if (!value) {
        this.identifier = null;
      }
    }

    public String getLocale() {
      return this.locale;
    }

    public void setLocale(String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestAccountPasswordReset_args)
        return this.equals((requestAccountPasswordReset_args)that);
      return false;
    }

    public boolean equals(requestAccountPasswordReset_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_provider = true && this.isSetProvider();
      boolean that_present_provider = true && that.isSetProvider();
      if (this_present_provider || that_present_provider) {
        if (!(this_present_provider && that_present_provider))
          return false;
        if (!this.provider.equals(that.provider))
          return false;
      }

      boolean this_present_identifier = true && this.isSetIdentifier();
      boolean that_present_identifier = true && that.isSetIdentifier();
      if (this_present_identifier || that_present_identifier) {
        if (!(this_present_identifier && that_present_identifier))
          return false;
        if (!this.identifier.equals(that.identifier))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      requestAccountPasswordReset_args other = (requestAccountPasswordReset_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetProvider(), other.isSetProvider());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProvider()) {
        lastComparison = TBaseHelper.compareTo(this.provider, other.provider);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetIdentifier(), other.isSetIdentifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdentifier()) {
        lastComparison = TBaseHelper.compareTo(this.identifier, other.identifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLocale(), other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 4: // PROVIDER
            if (field.type == TType.I32) {
              this.provider = IdentityProvider.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // IDENTIFIER
            if (field.type == TType.STRING) {
              this.identifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // LOCALE
            if (field.type == TType.STRING) {
              this.locale = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.identifier != null) {
        oprot.writeFieldBegin(IDENTIFIER_FIELD_DESC);
        oprot.writeString(this.identifier);
        oprot.writeFieldEnd();
      }
      if (this.provider != null) {
        oprot.writeFieldBegin(PROVIDER_FIELD_DESC);
        oprot.writeI32(this.provider.getValue());
        oprot.writeFieldEnd();
      }
      if (this.locale != null) {
        oprot.writeFieldBegin(LOCALE_FIELD_DESC);
        oprot.writeString(this.locale);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("requestAccountPasswordReset_args(");
      boolean first = true;

      sb.append("provider:");
      if (this.provider == null) {
        sb.append("null");
      } else {
        sb.append(this.provider);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("identifier:");
      if (this.identifier == null) {
        sb.append("null");
      } else {
        sb.append(this.identifier);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class requestAccountPasswordReset_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("requestAccountPasswordReset_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public requestAccountPasswordReset_result() {
    }

    public requestAccountPasswordReset_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestAccountPasswordReset_result(requestAccountPasswordReset_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public requestAccountPasswordReset_result deepCopy() {
      return new requestAccountPasswordReset_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestAccountPasswordReset_result)
        return this.equals((requestAccountPasswordReset_result)that);
      return false;
    }

    public boolean equals(requestAccountPasswordReset_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      requestAccountPasswordReset_result other = (requestAccountPasswordReset_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("requestAccountPasswordReset_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class requestEmailConfirmation_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("requestEmailConfirmation_args");

    private static final TField EMAIL_CONFIRMATION_FIELD_DESC = new TField("emailConfirmation", TType.STRUCT, (short)2);

    private EmailConfirmation emailConfirmation;

    // isset id assignments

    public requestEmailConfirmation_args() {
    }

    public requestEmailConfirmation_args(
      EmailConfirmation emailConfirmation)
    {
      this();
      this.emailConfirmation = emailConfirmation;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestEmailConfirmation_args(requestEmailConfirmation_args other) {
      if (other.isSetEmailConfirmation()) {
        this.emailConfirmation = new EmailConfirmation(other.emailConfirmation);
      }
    }

    public requestEmailConfirmation_args deepCopy() {
      return new requestEmailConfirmation_args(this);
    }

    public void clear() {
      this.emailConfirmation = null;
    }

    public EmailConfirmation getEmailConfirmation() {
      return this.emailConfirmation;
    }

    public void setEmailConfirmation(EmailConfirmation emailConfirmation) {
      this.emailConfirmation = emailConfirmation;
    }

    public void unsetEmailConfirmation() {
      this.emailConfirmation = null;
    }

    /** Returns true if field emailConfirmation is set (has been assigned a value) and false otherwise */
    public boolean isSetEmailConfirmation() {
      return this.emailConfirmation != null;
    }

    public void setEmailConfirmationIsSet(boolean value) {
      if (!value) {
        this.emailConfirmation = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestEmailConfirmation_args)
        return this.equals((requestEmailConfirmation_args)that);
      return false;
    }

    public boolean equals(requestEmailConfirmation_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_emailConfirmation = true && this.isSetEmailConfirmation();
      boolean that_present_emailConfirmation = true && that.isSetEmailConfirmation();
      if (this_present_emailConfirmation || that_present_emailConfirmation) {
        if (!(this_present_emailConfirmation && that_present_emailConfirmation))
          return false;
        if (!this.emailConfirmation.equals(that.emailConfirmation))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      requestEmailConfirmation_args other = (requestEmailConfirmation_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetEmailConfirmation(), other.isSetEmailConfirmation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmailConfirmation()) {
        lastComparison = this.emailConfirmation.compareTo(other.emailConfirmation);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // EMAIL_CONFIRMATION
            if (field.type == TType.STRUCT) {
              this.emailConfirmation = new EmailConfirmation();
              this.emailConfirmation.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.emailConfirmation != null) {
        oprot.writeFieldBegin(EMAIL_CONFIRMATION_FIELD_DESC);
        this.emailConfirmation.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("requestEmailConfirmation_args(");
      boolean first = true;

      sb.append("emailConfirmation:");
      if (this.emailConfirmation == null) {
        sb.append("null");
      } else {
        sb.append(this.emailConfirmation);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class requestEmailConfirmation_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("requestEmailConfirmation_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private EmailConfirmationSession success;
    private TalkException e;

    // isset id assignments

    public requestEmailConfirmation_result() {
    }

    public requestEmailConfirmation_result(
      EmailConfirmationSession success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestEmailConfirmation_result(requestEmailConfirmation_result other) {
      if (other.isSetSuccess()) {
        this.success = new EmailConfirmationSession(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public requestEmailConfirmation_result deepCopy() {
      return new requestEmailConfirmation_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public EmailConfirmationSession getSuccess() {
      return this.success;
    }

    public void setSuccess(EmailConfirmationSession success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestEmailConfirmation_result)
        return this.equals((requestEmailConfirmation_result)that);
      return false;
    }

    public boolean equals(requestEmailConfirmation_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      requestEmailConfirmation_result other = (requestEmailConfirmation_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new EmailConfirmationSession();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("requestEmailConfirmation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class requestIdentityUnbind_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("requestIdentityUnbind_args");

    private static final TField PROVIDER_FIELD_DESC = new TField("provider", TType.I32, (short)4);
    private static final TField IDENTIFIER_FIELD_DESC = new TField("identifier", TType.STRING, (short)2);

    private IdentityProvider provider;
    private String identifier;

    // isset id assignments

    public requestIdentityUnbind_args() {
    }

    public requestIdentityUnbind_args(
      IdentityProvider provider,
      String identifier)
    {
      this();
      this.provider = provider;
      this.identifier = identifier;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestIdentityUnbind_args(requestIdentityUnbind_args other) {
      if (other.isSetProvider()) {
        this.provider = other.provider;
      }
      if (other.isSetIdentifier()) {
        this.identifier = other.identifier;
      }
    }

    public requestIdentityUnbind_args deepCopy() {
      return new requestIdentityUnbind_args(this);
    }

    public void clear() {
      this.provider = null;
      this.identifier = null;
    }

    /**
     * 
     * @see IdentityProvider
     */
    public IdentityProvider getProvider() {
      return this.provider;
    }

    /**
     * 
     * @see IdentityProvider
     */
    public void setProvider(IdentityProvider provider) {
      this.provider = provider;
    }

    public void unsetProvider() {
      this.provider = null;
    }

    /** Returns true if field provider is set (has been assigned a value) and false otherwise */
    public boolean isSetProvider() {
      return this.provider != null;
    }

    public void setProviderIsSet(boolean value) {
      if (!value) {
        this.provider = null;
      }
    }

    public String getIdentifier() {
      return this.identifier;
    }

    public void setIdentifier(String identifier) {
      this.identifier = identifier;
    }

    public void unsetIdentifier() {
      this.identifier = null;
    }

    /** Returns true if field identifier is set (has been assigned a value) and false otherwise */
    public boolean isSetIdentifier() {
      return this.identifier != null;
    }

    public void setIdentifierIsSet(boolean value) {
      if (!value) {
        this.identifier = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestIdentityUnbind_args)
        return this.equals((requestIdentityUnbind_args)that);
      return false;
    }

    public boolean equals(requestIdentityUnbind_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_provider = true && this.isSetProvider();
      boolean that_present_provider = true && that.isSetProvider();
      if (this_present_provider || that_present_provider) {
        if (!(this_present_provider && that_present_provider))
          return false;
        if (!this.provider.equals(that.provider))
          return false;
      }

      boolean this_present_identifier = true && this.isSetIdentifier();
      boolean that_present_identifier = true && that.isSetIdentifier();
      if (this_present_identifier || that_present_identifier) {
        if (!(this_present_identifier && that_present_identifier))
          return false;
        if (!this.identifier.equals(that.identifier))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      requestIdentityUnbind_args other = (requestIdentityUnbind_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetProvider(), other.isSetProvider());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProvider()) {
        lastComparison = TBaseHelper.compareTo(this.provider, other.provider);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetIdentifier(), other.isSetIdentifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdentifier()) {
        lastComparison = TBaseHelper.compareTo(this.identifier, other.identifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 4: // PROVIDER
            if (field.type == TType.I32) {
              this.provider = IdentityProvider.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // IDENTIFIER
            if (field.type == TType.STRING) {
              this.identifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.identifier != null) {
        oprot.writeFieldBegin(IDENTIFIER_FIELD_DESC);
        oprot.writeString(this.identifier);
        oprot.writeFieldEnd();
      }
      if (this.provider != null) {
        oprot.writeFieldBegin(PROVIDER_FIELD_DESC);
        oprot.writeI32(this.provider.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("requestIdentityUnbind_args(");
      boolean first = true;

      sb.append("provider:");
      if (this.provider == null) {
        sb.append("null");
      } else {
        sb.append(this.provider);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("identifier:");
      if (this.identifier == null) {
        sb.append("null");
      } else {
        sb.append(this.identifier);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class requestIdentityUnbind_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("requestIdentityUnbind_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public requestIdentityUnbind_result() {
    }

    public requestIdentityUnbind_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestIdentityUnbind_result(requestIdentityUnbind_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public requestIdentityUnbind_result deepCopy() {
      return new requestIdentityUnbind_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestIdentityUnbind_result)
        return this.equals((requestIdentityUnbind_result)that);
      return false;
    }

    public boolean equals(requestIdentityUnbind_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      requestIdentityUnbind_result other = (requestIdentityUnbind_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("requestIdentityUnbind_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class resendEmailConfirmation_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("resendEmailConfirmation_args");

    private static final TField VERIFIER_FIELD_DESC = new TField("verifier", TType.STRING, (short)2);

    private String verifier;

    // isset id assignments

    public resendEmailConfirmation_args() {
    }

    public resendEmailConfirmation_args(
      String verifier)
    {
      this();
      this.verifier = verifier;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resendEmailConfirmation_args(resendEmailConfirmation_args other) {
      if (other.isSetVerifier()) {
        this.verifier = other.verifier;
      }
    }

    public resendEmailConfirmation_args deepCopy() {
      return new resendEmailConfirmation_args(this);
    }

    public void clear() {
      this.verifier = null;
    }

    public String getVerifier() {
      return this.verifier;
    }

    public void setVerifier(String verifier) {
      this.verifier = verifier;
    }

    public void unsetVerifier() {
      this.verifier = null;
    }

    /** Returns true if field verifier is set (has been assigned a value) and false otherwise */
    public boolean isSetVerifier() {
      return this.verifier != null;
    }

    public void setVerifierIsSet(boolean value) {
      if (!value) {
        this.verifier = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resendEmailConfirmation_args)
        return this.equals((resendEmailConfirmation_args)that);
      return false;
    }

    public boolean equals(resendEmailConfirmation_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_verifier = true && this.isSetVerifier();
      boolean that_present_verifier = true && that.isSetVerifier();
      if (this_present_verifier || that_present_verifier) {
        if (!(this_present_verifier && that_present_verifier))
          return false;
        if (!this.verifier.equals(that.verifier))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      resendEmailConfirmation_args other = (resendEmailConfirmation_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetVerifier(), other.isSetVerifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVerifier()) {
        lastComparison = TBaseHelper.compareTo(this.verifier, other.verifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // VERIFIER
            if (field.type == TType.STRING) {
              this.verifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.verifier != null) {
        oprot.writeFieldBegin(VERIFIER_FIELD_DESC);
        oprot.writeString(this.verifier);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("resendEmailConfirmation_args(");
      boolean first = true;

      sb.append("verifier:");
      if (this.verifier == null) {
        sb.append("null");
      } else {
        sb.append(this.verifier);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class resendEmailConfirmation_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("resendEmailConfirmation_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private EmailConfirmationSession success;
    private TalkException e;

    // isset id assignments

    public resendEmailConfirmation_result() {
    }

    public resendEmailConfirmation_result(
      EmailConfirmationSession success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resendEmailConfirmation_result(resendEmailConfirmation_result other) {
      if (other.isSetSuccess()) {
        this.success = new EmailConfirmationSession(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public resendEmailConfirmation_result deepCopy() {
      return new resendEmailConfirmation_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public EmailConfirmationSession getSuccess() {
      return this.success;
    }

    public void setSuccess(EmailConfirmationSession success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resendEmailConfirmation_result)
        return this.equals((resendEmailConfirmation_result)that);
      return false;
    }

    public boolean equals(resendEmailConfirmation_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      resendEmailConfirmation_result other = (resendEmailConfirmation_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new EmailConfirmationSession();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("resendEmailConfirmation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class resendPinCode_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("resendPinCode_args");

    private static final TField SESSION_ID_FIELD_DESC = new TField("sessionId", TType.STRING, (short)2);

    private String sessionId;

    // isset id assignments

    public resendPinCode_args() {
    }

    public resendPinCode_args(
      String sessionId)
    {
      this();
      this.sessionId = sessionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resendPinCode_args(resendPinCode_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
    }

    public resendPinCode_args deepCopy() {
      return new resendPinCode_args(this);
    }

    public void clear() {
      this.sessionId = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public void setSessionId(String sessionId) {
      this.sessionId = sessionId;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resendPinCode_args)
        return this.equals((resendPinCode_args)that);
      return false;
    }

    public boolean equals(resendPinCode_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      resendPinCode_args other = (resendPinCode_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSessionId(), other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // SESSION_ID
            if (field.type == TType.STRING) {
              this.sessionId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.sessionId != null) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeString(this.sessionId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("resendPinCode_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class resendPinCode_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("resendPinCode_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public resendPinCode_result() {
    }

    public resendPinCode_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resendPinCode_result(resendPinCode_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public resendPinCode_result deepCopy() {
      return new resendPinCode_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resendPinCode_result)
        return this.equals((resendPinCode_result)that);
      return false;
    }

    public boolean equals(resendPinCode_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      resendPinCode_result other = (resendPinCode_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("resendPinCode_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class resendPinCodeBySMS_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("resendPinCodeBySMS_args");

    private static final TField SESSION_ID_FIELD_DESC = new TField("sessionId", TType.STRING, (short)2);

    private String sessionId;

    // isset id assignments

    public resendPinCodeBySMS_args() {
    }

    public resendPinCodeBySMS_args(
      String sessionId)
    {
      this();
      this.sessionId = sessionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resendPinCodeBySMS_args(resendPinCodeBySMS_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
    }

    public resendPinCodeBySMS_args deepCopy() {
      return new resendPinCodeBySMS_args(this);
    }

    public void clear() {
      this.sessionId = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public void setSessionId(String sessionId) {
      this.sessionId = sessionId;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resendPinCodeBySMS_args)
        return this.equals((resendPinCodeBySMS_args)that);
      return false;
    }

    public boolean equals(resendPinCodeBySMS_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      resendPinCodeBySMS_args other = (resendPinCodeBySMS_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSessionId(), other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // SESSION_ID
            if (field.type == TType.STRING) {
              this.sessionId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.sessionId != null) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeString(this.sessionId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("resendPinCodeBySMS_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class resendPinCodeBySMS_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("resendPinCodeBySMS_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public resendPinCodeBySMS_result() {
    }

    public resendPinCodeBySMS_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resendPinCodeBySMS_result(resendPinCodeBySMS_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public resendPinCodeBySMS_result deepCopy() {
      return new resendPinCodeBySMS_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof resendPinCodeBySMS_result)
        return this.equals((resendPinCodeBySMS_result)that);
      return false;
    }

    public boolean equals(resendPinCodeBySMS_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      resendPinCodeBySMS_result other = (resendPinCodeBySMS_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("resendPinCodeBySMS_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendChatChecked_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendChatChecked_args");

    private static final TField SEQ_FIELD_DESC = new TField("seq", TType.I32, (short)1);
    private static final TField CONSUMER_FIELD_DESC = new TField("consumer", TType.STRING, (short)2);
    private static final TField LAST_MESSAGE_ID_FIELD_DESC = new TField("lastMessageId", TType.STRING, (short)3);

    private int seq;
    private String consumer;
    private String lastMessageId;

    // isset id assignments
    private static final int __SEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public sendChatChecked_args() {
    }

    public sendChatChecked_args(
      int seq,
      String consumer,
      String lastMessageId)
    {
      this();
      this.seq = seq;
      setSeqIsSet(true);
      this.consumer = consumer;
      this.lastMessageId = lastMessageId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendChatChecked_args(sendChatChecked_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.seq = other.seq;
      if (other.isSetConsumer()) {
        this.consumer = other.consumer;
      }
      if (other.isSetLastMessageId()) {
        this.lastMessageId = other.lastMessageId;
      }
    }

    public sendChatChecked_args deepCopy() {
      return new sendChatChecked_args(this);
    }

    public void clear() {
      setSeqIsSet(false);
      this.seq = 0;
      this.consumer = null;
      this.lastMessageId = null;
    }

    public int getSeq() {
      return this.seq;
    }

    public void setSeq(int seq) {
      this.seq = seq;
      setSeqIsSet(true);
    }

    public void unsetSeq() {
      __isset_vector[__SEQ_ISSET_ID] = false;
    }

    /** Returns true if field seq is set (has been assigned a value) and false otherwise */
    public boolean isSetSeq() {
      return __isset_vector[__SEQ_ISSET_ID];
    }

    public void setSeqIsSet(boolean value) {
      __isset_vector[__SEQ_ISSET_ID] = value;
    }

    public String getConsumer() {
      return this.consumer;
    }

    public void setConsumer(String consumer) {
      this.consumer = consumer;
    }

    public void unsetConsumer() {
      this.consumer = null;
    }

    /** Returns true if field consumer is set (has been assigned a value) and false otherwise */
    public boolean isSetConsumer() {
      return this.consumer != null;
    }

    public void setConsumerIsSet(boolean value) {
      if (!value) {
        this.consumer = null;
      }
    }

    public String getLastMessageId() {
      return this.lastMessageId;
    }

    public void setLastMessageId(String lastMessageId) {
      this.lastMessageId = lastMessageId;
    }

    public void unsetLastMessageId() {
      this.lastMessageId = null;
    }

    /** Returns true if field lastMessageId is set (has been assigned a value) and false otherwise */
    public boolean isSetLastMessageId() {
      return this.lastMessageId != null;
    }

    public void setLastMessageIdIsSet(boolean value) {
      if (!value) {
        this.lastMessageId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendChatChecked_args)
        return this.equals((sendChatChecked_args)that);
      return false;
    }

    public boolean equals(sendChatChecked_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_seq = true;
      boolean that_present_seq = true;
      if (this_present_seq || that_present_seq) {
        if (!(this_present_seq && that_present_seq))
          return false;
        if (this.seq != that.seq)
          return false;
      }

      boolean this_present_consumer = true && this.isSetConsumer();
      boolean that_present_consumer = true && that.isSetConsumer();
      if (this_present_consumer || that_present_consumer) {
        if (!(this_present_consumer && that_present_consumer))
          return false;
        if (!this.consumer.equals(that.consumer))
          return false;
      }

      boolean this_present_lastMessageId = true && this.isSetLastMessageId();
      boolean that_present_lastMessageId = true && that.isSetLastMessageId();
      if (this_present_lastMessageId || that_present_lastMessageId) {
        if (!(this_present_lastMessageId && that_present_lastMessageId))
          return false;
        if (!this.lastMessageId.equals(that.lastMessageId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendChatChecked_args other = (sendChatChecked_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSeq(), other.isSetSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeq()) {
        lastComparison = TBaseHelper.compareTo(this.seq, other.seq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetConsumer(), other.isSetConsumer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConsumer()) {
        lastComparison = TBaseHelper.compareTo(this.consumer, other.consumer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLastMessageId(), other.isSetLastMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastMessageId()) {
        lastComparison = TBaseHelper.compareTo(this.lastMessageId, other.lastMessageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SEQ
            if (field.type == TType.I32) {
              this.seq = iprot.readI32();
              setSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CONSUMER
            if (field.type == TType.STRING) {
              this.consumer = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // LAST_MESSAGE_ID
            if (field.type == TType.STRING) {
              this.lastMessageId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQ_FIELD_DESC);
      oprot.writeI32(this.seq);
      oprot.writeFieldEnd();
      if (this.consumer != null) {
        oprot.writeFieldBegin(CONSUMER_FIELD_DESC);
        oprot.writeString(this.consumer);
        oprot.writeFieldEnd();
      }
      if (this.lastMessageId != null) {
        oprot.writeFieldBegin(LAST_MESSAGE_ID_FIELD_DESC);
        oprot.writeString(this.lastMessageId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendChatChecked_args(");
      boolean first = true;

      sb.append("seq:");
      sb.append(this.seq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("consumer:");
      if (this.consumer == null) {
        sb.append("null");
      } else {
        sb.append(this.consumer);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lastMessageId:");
      if (this.lastMessageId == null) {
        sb.append("null");
      } else {
        sb.append(this.lastMessageId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendChatChecked_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendChatChecked_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public sendChatChecked_result() {
    }

    public sendChatChecked_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendChatChecked_result(sendChatChecked_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public sendChatChecked_result deepCopy() {
      return new sendChatChecked_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendChatChecked_result)
        return this.equals((sendChatChecked_result)that);
      return false;
    }

    public boolean equals(sendChatChecked_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendChatChecked_result other = (sendChatChecked_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendChatChecked_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendMessageAwaitCommit_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendMessageAwaitCommit_args");

    private static final TField SEQ_FIELD_DESC = new TField("seq", TType.I32, (short)1);
    private static final TField MESSAGE_FIELD_DESC = new TField("message", TType.STRUCT, (short)2);

    private int seq;
    private Message message;

    // isset id assignments
    private static final int __SEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public sendMessageAwaitCommit_args() {
    }

    public sendMessageAwaitCommit_args(
      int seq,
      Message message)
    {
      this();
      this.seq = seq;
      setSeqIsSet(true);
      this.message = message;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMessageAwaitCommit_args(sendMessageAwaitCommit_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.seq = other.seq;
      if (other.isSetMessage()) {
        this.message = new Message(other.message);
      }
    }

    public sendMessageAwaitCommit_args deepCopy() {
      return new sendMessageAwaitCommit_args(this);
    }

    public void clear() {
      setSeqIsSet(false);
      this.seq = 0;
      this.message = null;
    }

    public int getSeq() {
      return this.seq;
    }

    public void setSeq(int seq) {
      this.seq = seq;
      setSeqIsSet(true);
    }

    public void unsetSeq() {
      __isset_vector[__SEQ_ISSET_ID] = false;
    }

    /** Returns true if field seq is set (has been assigned a value) and false otherwise */
    public boolean isSetSeq() {
      return __isset_vector[__SEQ_ISSET_ID];
    }

    public void setSeqIsSet(boolean value) {
      __isset_vector[__SEQ_ISSET_ID] = value;
    }

    public Message getMessage() {
      return this.message;
    }

    public void setMessage(Message message) {
      this.message = message;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /** Returns true if field message is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMessageAwaitCommit_args)
        return this.equals((sendMessageAwaitCommit_args)that);
      return false;
    }

    public boolean equals(sendMessageAwaitCommit_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_seq = true;
      boolean that_present_seq = true;
      if (this_present_seq || that_present_seq) {
        if (!(this_present_seq && that_present_seq))
          return false;
        if (this.seq != that.seq)
          return false;
      }

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendMessageAwaitCommit_args other = (sendMessageAwaitCommit_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSeq(), other.isSetSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeq()) {
        lastComparison = TBaseHelper.compareTo(this.seq, other.seq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMessage(), other.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = this.message.compareTo(other.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SEQ
            if (field.type == TType.I32) {
              this.seq = iprot.readI32();
              setSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MESSAGE
            if (field.type == TType.STRUCT) {
              this.message = new Message();
              this.message.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQ_FIELD_DESC);
      oprot.writeI32(this.seq);
      oprot.writeFieldEnd();
      if (this.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        this.message.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendMessageAwaitCommit_args(");
      boolean first = true;

      sb.append("seq:");
      sb.append(this.seq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendMessageAwaitCommit_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendMessageAwaitCommit_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private CommitMessageResult success;
    private TalkException e;

    // isset id assignments

    public sendMessageAwaitCommit_result() {
    }

    public sendMessageAwaitCommit_result(
      CommitMessageResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMessageAwaitCommit_result(sendMessageAwaitCommit_result other) {
      if (other.isSetSuccess()) {
        this.success = new CommitMessageResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public sendMessageAwaitCommit_result deepCopy() {
      return new sendMessageAwaitCommit_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public CommitMessageResult getSuccess() {
      return this.success;
    }

    public void setSuccess(CommitMessageResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMessageAwaitCommit_result)
        return this.equals((sendMessageAwaitCommit_result)that);
      return false;
    }

    public boolean equals(sendMessageAwaitCommit_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendMessageAwaitCommit_result other = (sendMessageAwaitCommit_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new CommitMessageResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendMessageAwaitCommit_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendChatRemoved_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendChatRemoved_args");

    private static final TField SEQ_FIELD_DESC = new TField("seq", TType.I32, (short)1);
    private static final TField CONSUMER_FIELD_DESC = new TField("consumer", TType.STRING, (short)2);
    private static final TField LAST_MESSAGE_ID_FIELD_DESC = new TField("lastMessageId", TType.STRING, (short)3);

    private int seq;
    private String consumer;
    private String lastMessageId;

    // isset id assignments
    private static final int __SEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public sendChatRemoved_args() {
    }

    public sendChatRemoved_args(
      int seq,
      String consumer,
      String lastMessageId)
    {
      this();
      this.seq = seq;
      setSeqIsSet(true);
      this.consumer = consumer;
      this.lastMessageId = lastMessageId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendChatRemoved_args(sendChatRemoved_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.seq = other.seq;
      if (other.isSetConsumer()) {
        this.consumer = other.consumer;
      }
      if (other.isSetLastMessageId()) {
        this.lastMessageId = other.lastMessageId;
      }
    }

    public sendChatRemoved_args deepCopy() {
      return new sendChatRemoved_args(this);
    }

    public void clear() {
      setSeqIsSet(false);
      this.seq = 0;
      this.consumer = null;
      this.lastMessageId = null;
    }

    public int getSeq() {
      return this.seq;
    }

    public void setSeq(int seq) {
      this.seq = seq;
      setSeqIsSet(true);
    }

    public void unsetSeq() {
      __isset_vector[__SEQ_ISSET_ID] = false;
    }

    /** Returns true if field seq is set (has been assigned a value) and false otherwise */
    public boolean isSetSeq() {
      return __isset_vector[__SEQ_ISSET_ID];
    }

    public void setSeqIsSet(boolean value) {
      __isset_vector[__SEQ_ISSET_ID] = value;
    }

    public String getConsumer() {
      return this.consumer;
    }

    public void setConsumer(String consumer) {
      this.consumer = consumer;
    }

    public void unsetConsumer() {
      this.consumer = null;
    }

    /** Returns true if field consumer is set (has been assigned a value) and false otherwise */
    public boolean isSetConsumer() {
      return this.consumer != null;
    }

    public void setConsumerIsSet(boolean value) {
      if (!value) {
        this.consumer = null;
      }
    }

    public String getLastMessageId() {
      return this.lastMessageId;
    }

    public void setLastMessageId(String lastMessageId) {
      this.lastMessageId = lastMessageId;
    }

    public void unsetLastMessageId() {
      this.lastMessageId = null;
    }

    /** Returns true if field lastMessageId is set (has been assigned a value) and false otherwise */
    public boolean isSetLastMessageId() {
      return this.lastMessageId != null;
    }

    public void setLastMessageIdIsSet(boolean value) {
      if (!value) {
        this.lastMessageId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendChatRemoved_args)
        return this.equals((sendChatRemoved_args)that);
      return false;
    }

    public boolean equals(sendChatRemoved_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_seq = true;
      boolean that_present_seq = true;
      if (this_present_seq || that_present_seq) {
        if (!(this_present_seq && that_present_seq))
          return false;
        if (this.seq != that.seq)
          return false;
      }

      boolean this_present_consumer = true && this.isSetConsumer();
      boolean that_present_consumer = true && that.isSetConsumer();
      if (this_present_consumer || that_present_consumer) {
        if (!(this_present_consumer && that_present_consumer))
          return false;
        if (!this.consumer.equals(that.consumer))
          return false;
      }

      boolean this_present_lastMessageId = true && this.isSetLastMessageId();
      boolean that_present_lastMessageId = true && that.isSetLastMessageId();
      if (this_present_lastMessageId || that_present_lastMessageId) {
        if (!(this_present_lastMessageId && that_present_lastMessageId))
          return false;
        if (!this.lastMessageId.equals(that.lastMessageId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendChatRemoved_args other = (sendChatRemoved_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSeq(), other.isSetSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeq()) {
        lastComparison = TBaseHelper.compareTo(this.seq, other.seq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetConsumer(), other.isSetConsumer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConsumer()) {
        lastComparison = TBaseHelper.compareTo(this.consumer, other.consumer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLastMessageId(), other.isSetLastMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastMessageId()) {
        lastComparison = TBaseHelper.compareTo(this.lastMessageId, other.lastMessageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SEQ
            if (field.type == TType.I32) {
              this.seq = iprot.readI32();
              setSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CONSUMER
            if (field.type == TType.STRING) {
              this.consumer = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // LAST_MESSAGE_ID
            if (field.type == TType.STRING) {
              this.lastMessageId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQ_FIELD_DESC);
      oprot.writeI32(this.seq);
      oprot.writeFieldEnd();
      if (this.consumer != null) {
        oprot.writeFieldBegin(CONSUMER_FIELD_DESC);
        oprot.writeString(this.consumer);
        oprot.writeFieldEnd();
      }
      if (this.lastMessageId != null) {
        oprot.writeFieldBegin(LAST_MESSAGE_ID_FIELD_DESC);
        oprot.writeString(this.lastMessageId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendChatRemoved_args(");
      boolean first = true;

      sb.append("seq:");
      sb.append(this.seq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("consumer:");
      if (this.consumer == null) {
        sb.append("null");
      } else {
        sb.append(this.consumer);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lastMessageId:");
      if (this.lastMessageId == null) {
        sb.append("null");
      } else {
        sb.append(this.lastMessageId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendChatRemoved_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendChatRemoved_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public sendChatRemoved_result() {
    }

    public sendChatRemoved_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendChatRemoved_result(sendChatRemoved_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public sendChatRemoved_result deepCopy() {
      return new sendChatRemoved_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendChatRemoved_result)
        return this.equals((sendChatRemoved_result)that);
      return false;
    }

    public boolean equals(sendChatRemoved_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendChatRemoved_result other = (sendChatRemoved_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendChatRemoved_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendContentPreviewUpdated_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendContentPreviewUpdated_args");

    private static final TField ESQ_FIELD_DESC = new TField("esq", TType.I32, (short)1);
    private static final TField MESSAGE_ID_FIELD_DESC = new TField("messageId", TType.STRING, (short)2);
    private static final TField RECEIVER_MIDS_FIELD_DESC = new TField("receiverMids", TType.LIST, (short)3);

    private int esq;
    private String messageId;
    private Vector receiverMids;

    // isset id assignments
    private static final int __ESQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public sendContentPreviewUpdated_args() {
    }

    public sendContentPreviewUpdated_args(
      int esq,
      String messageId,
      Vector receiverMids)
    {
      this();
      this.esq = esq;
      setEsqIsSet(true);
      this.messageId = messageId;
      this.receiverMids = receiverMids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendContentPreviewUpdated_args(sendContentPreviewUpdated_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.esq = other.esq;
      if (other.isSetMessageId()) {
        this.messageId = other.messageId;
      }
      if (other.isSetReceiverMids()) {
        Vector __this__receiverMids = new Vector();
        for (Enumeration other_enum = other.receiverMids.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__receiverMids.addElement(other_element);
        }
        this.receiverMids = __this__receiverMids;
      }
    }

    public sendContentPreviewUpdated_args deepCopy() {
      return new sendContentPreviewUpdated_args(this);
    }

    public void clear() {
      setEsqIsSet(false);
      this.esq = 0;
      this.messageId = null;
      this.receiverMids = null;
    }

    public int getEsq() {
      return this.esq;
    }

    public void setEsq(int esq) {
      this.esq = esq;
      setEsqIsSet(true);
    }

    public void unsetEsq() {
      __isset_vector[__ESQ_ISSET_ID] = false;
    }

    /** Returns true if field esq is set (has been assigned a value) and false otherwise */
    public boolean isSetEsq() {
      return __isset_vector[__ESQ_ISSET_ID];
    }

    public void setEsqIsSet(boolean value) {
      __isset_vector[__ESQ_ISSET_ID] = value;
    }

    public String getMessageId() {
      return this.messageId;
    }

    public void setMessageId(String messageId) {
      this.messageId = messageId;
    }

    public void unsetMessageId() {
      this.messageId = null;
    }

    /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageId() {
      return this.messageId != null;
    }

    public void setMessageIdIsSet(boolean value) {
      if (!value) {
        this.messageId = null;
      }
    }

    public int getReceiverMidsSize() {
      return (this.receiverMids == null) ? 0 : this.receiverMids.size();
    }

    public Enumeration getReceiverMidsEnumeration() {
      return (this.receiverMids == null) ? null : this.receiverMids.elements();
    }

    public void addToReceiverMids(String elem) {
      if (this.receiverMids == null) {
        this.receiverMids = new Vector();
      }
      this.receiverMids.addElement(elem);
    }

    public Vector getReceiverMids() {
      return this.receiverMids;
    }

    public void setReceiverMids(Vector receiverMids) {
      this.receiverMids = receiverMids;
    }

    public void unsetReceiverMids() {
      this.receiverMids = null;
    }

    /** Returns true if field receiverMids is set (has been assigned a value) and false otherwise */
    public boolean isSetReceiverMids() {
      return this.receiverMids != null;
    }

    public void setReceiverMidsIsSet(boolean value) {
      if (!value) {
        this.receiverMids = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendContentPreviewUpdated_args)
        return this.equals((sendContentPreviewUpdated_args)that);
      return false;
    }

    public boolean equals(sendContentPreviewUpdated_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_esq = true;
      boolean that_present_esq = true;
      if (this_present_esq || that_present_esq) {
        if (!(this_present_esq && that_present_esq))
          return false;
        if (this.esq != that.esq)
          return false;
      }

      boolean this_present_messageId = true && this.isSetMessageId();
      boolean that_present_messageId = true && that.isSetMessageId();
      if (this_present_messageId || that_present_messageId) {
        if (!(this_present_messageId && that_present_messageId))
          return false;
        if (!this.messageId.equals(that.messageId))
          return false;
      }

      boolean this_present_receiverMids = true && this.isSetReceiverMids();
      boolean that_present_receiverMids = true && that.isSetReceiverMids();
      if (this_present_receiverMids || that_present_receiverMids) {
        if (!(this_present_receiverMids && that_present_receiverMids))
          return false;
        if (!this.receiverMids.equals(that.receiverMids))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendContentPreviewUpdated_args other = (sendContentPreviewUpdated_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetEsq(), other.isSetEsq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEsq()) {
        lastComparison = TBaseHelper.compareTo(this.esq, other.esq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMessageId(), other.isSetMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageId()) {
        lastComparison = TBaseHelper.compareTo(this.messageId, other.messageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetReceiverMids(), other.isSetReceiverMids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReceiverMids()) {
        lastComparison = TBaseHelper.compareTo(this.receiverMids, other.receiverMids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ESQ
            if (field.type == TType.I32) {
              this.esq = iprot.readI32();
              setEsqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MESSAGE_ID
            if (field.type == TType.STRING) {
              this.messageId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // RECEIVER_MIDS
            if (field.type == TType.LIST) {
              {
                TList _list1105 = iprot.readListBegin();
                this.receiverMids = new Vector(_list1105.size);
                for (int _i1106 = 0; _i1106 < _list1105.size; ++_i1106)
                {
                  String _elem1107;
                  _elem1107 = iprot.readString();
                  this.receiverMids.addElement(_elem1107);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ESQ_FIELD_DESC);
      oprot.writeI32(this.esq);
      oprot.writeFieldEnd();
      if (this.messageId != null) {
        oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
        oprot.writeString(this.messageId);
        oprot.writeFieldEnd();
      }
      if (this.receiverMids != null) {
        oprot.writeFieldBegin(RECEIVER_MIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.receiverMids.size()));
          for (Enumeration _iter1108_enum = this.receiverMids.elements(); _iter1108_enum.hasMoreElements(); )           {
            String _iter1108 = (String)_iter1108_enum.nextElement();
            oprot.writeString(_iter1108);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendContentPreviewUpdated_args(");
      boolean first = true;

      sb.append("esq:");
      sb.append(this.esq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("messageId:");
      if (this.messageId == null) {
        sb.append("null");
      } else {
        sb.append(this.messageId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("receiverMids:");
      if (this.receiverMids == null) {
        sb.append("null");
      } else {
        sb.append(this.receiverMids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendContentPreviewUpdated_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendContentPreviewUpdated_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.MAP, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Hashtable success;
    private TalkException e;

    // isset id assignments

    public sendContentPreviewUpdated_result() {
    }

    public sendContentPreviewUpdated_result(
      Hashtable success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendContentPreviewUpdated_result(sendContentPreviewUpdated_result other) {
      if (other.isSetSuccess()) {
        Hashtable __this__success = new Hashtable();
        for (Enumeration other_enum = other.success.keys(); other_enum.hasMoreElements(); ) {

          String other_element_key = (String)other_enum.nextElement();
          String other_element_value = (String)other.success.get(other_element_key);

          String __this__success_copy_key = other_element_key;

          String __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public sendContentPreviewUpdated_result deepCopy() {
      return new sendContentPreviewUpdated_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new Hashtable();
      }
      this.success.put(key, val);
    }

    public Hashtable getSuccess() {
      return this.success;
    }

    public void setSuccess(Hashtable success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendContentPreviewUpdated_result)
        return this.equals((sendContentPreviewUpdated_result)that);
      return false;
    }

    public boolean equals(sendContentPreviewUpdated_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendContentPreviewUpdated_result other = (sendContentPreviewUpdated_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.MAP) {
              {
                TMap _map1109 = iprot.readMapBegin();
                this.success = new Hashtable(2*_map1109.size);
                for (int _i1110 = 0; _i1110 < _map1109.size; ++_i1110)
                {
                  String _key1111;
                  String _val1112;
                  _key1111 = iprot.readString();
                  _val1112 = iprot.readString();
                  this.success.put(_key1111, _val1112);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.success.size()));
          for (Enumeration _iter1113_enum = this.success.keys(); _iter1113_enum.hasMoreElements(); )           {
            String _iter1113 = (String)_iter1113_enum.nextElement();
            oprot.writeString(_iter1113);
            oprot.writeString(((String)this.success.get(_iter1113)));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendContentPreviewUpdated_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendContentReceipt_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendContentReceipt_args");

    private static final TField SEQ_FIELD_DESC = new TField("seq", TType.I32, (short)1);
    private static final TField CONSUMER_FIELD_DESC = new TField("consumer", TType.STRING, (short)2);
    private static final TField MESSAGE_ID_FIELD_DESC = new TField("messageId", TType.STRING, (short)3);

    private int seq;
    private String consumer;
    private String messageId;

    // isset id assignments
    private static final int __SEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public sendContentReceipt_args() {
    }

    public sendContentReceipt_args(
      int seq,
      String consumer,
      String messageId)
    {
      this();
      this.seq = seq;
      setSeqIsSet(true);
      this.consumer = consumer;
      this.messageId = messageId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendContentReceipt_args(sendContentReceipt_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.seq = other.seq;
      if (other.isSetConsumer()) {
        this.consumer = other.consumer;
      }
      if (other.isSetMessageId()) {
        this.messageId = other.messageId;
      }
    }

    public sendContentReceipt_args deepCopy() {
      return new sendContentReceipt_args(this);
    }

    public void clear() {
      setSeqIsSet(false);
      this.seq = 0;
      this.consumer = null;
      this.messageId = null;
    }

    public int getSeq() {
      return this.seq;
    }

    public void setSeq(int seq) {
      this.seq = seq;
      setSeqIsSet(true);
    }

    public void unsetSeq() {
      __isset_vector[__SEQ_ISSET_ID] = false;
    }

    /** Returns true if field seq is set (has been assigned a value) and false otherwise */
    public boolean isSetSeq() {
      return __isset_vector[__SEQ_ISSET_ID];
    }

    public void setSeqIsSet(boolean value) {
      __isset_vector[__SEQ_ISSET_ID] = value;
    }

    public String getConsumer() {
      return this.consumer;
    }

    public void setConsumer(String consumer) {
      this.consumer = consumer;
    }

    public void unsetConsumer() {
      this.consumer = null;
    }

    /** Returns true if field consumer is set (has been assigned a value) and false otherwise */
    public boolean isSetConsumer() {
      return this.consumer != null;
    }

    public void setConsumerIsSet(boolean value) {
      if (!value) {
        this.consumer = null;
      }
    }

    public String getMessageId() {
      return this.messageId;
    }

    public void setMessageId(String messageId) {
      this.messageId = messageId;
    }

    public void unsetMessageId() {
      this.messageId = null;
    }

    /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageId() {
      return this.messageId != null;
    }

    public void setMessageIdIsSet(boolean value) {
      if (!value) {
        this.messageId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendContentReceipt_args)
        return this.equals((sendContentReceipt_args)that);
      return false;
    }

    public boolean equals(sendContentReceipt_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_seq = true;
      boolean that_present_seq = true;
      if (this_present_seq || that_present_seq) {
        if (!(this_present_seq && that_present_seq))
          return false;
        if (this.seq != that.seq)
          return false;
      }

      boolean this_present_consumer = true && this.isSetConsumer();
      boolean that_present_consumer = true && that.isSetConsumer();
      if (this_present_consumer || that_present_consumer) {
        if (!(this_present_consumer && that_present_consumer))
          return false;
        if (!this.consumer.equals(that.consumer))
          return false;
      }

      boolean this_present_messageId = true && this.isSetMessageId();
      boolean that_present_messageId = true && that.isSetMessageId();
      if (this_present_messageId || that_present_messageId) {
        if (!(this_present_messageId && that_present_messageId))
          return false;
        if (!this.messageId.equals(that.messageId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendContentReceipt_args other = (sendContentReceipt_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSeq(), other.isSetSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeq()) {
        lastComparison = TBaseHelper.compareTo(this.seq, other.seq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetConsumer(), other.isSetConsumer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConsumer()) {
        lastComparison = TBaseHelper.compareTo(this.consumer, other.consumer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMessageId(), other.isSetMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageId()) {
        lastComparison = TBaseHelper.compareTo(this.messageId, other.messageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SEQ
            if (field.type == TType.I32) {
              this.seq = iprot.readI32();
              setSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CONSUMER
            if (field.type == TType.STRING) {
              this.consumer = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // MESSAGE_ID
            if (field.type == TType.STRING) {
              this.messageId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQ_FIELD_DESC);
      oprot.writeI32(this.seq);
      oprot.writeFieldEnd();
      if (this.consumer != null) {
        oprot.writeFieldBegin(CONSUMER_FIELD_DESC);
        oprot.writeString(this.consumer);
        oprot.writeFieldEnd();
      }
      if (this.messageId != null) {
        oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
        oprot.writeString(this.messageId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendContentReceipt_args(");
      boolean first = true;

      sb.append("seq:");
      sb.append(this.seq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("consumer:");
      if (this.consumer == null) {
        sb.append("null");
      } else {
        sb.append(this.consumer);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("messageId:");
      if (this.messageId == null) {
        sb.append("null");
      } else {
        sb.append(this.messageId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendContentReceipt_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendContentReceipt_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public sendContentReceipt_result() {
    }

    public sendContentReceipt_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendContentReceipt_result(sendContentReceipt_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public sendContentReceipt_result deepCopy() {
      return new sendContentReceipt_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendContentReceipt_result)
        return this.equals((sendContentReceipt_result)that);
      return false;
    }

    public boolean equals(sendContentReceipt_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendContentReceipt_result other = (sendContentReceipt_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendContentReceipt_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendDummyPush_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendDummyPush_args");


    public sendDummyPush_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendDummyPush_args(sendDummyPush_args other) {
    }

    public sendDummyPush_args deepCopy() {
      return new sendDummyPush_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendDummyPush_args)
        return this.equals((sendDummyPush_args)that);
      return false;
    }

    public boolean equals(sendDummyPush_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendDummyPush_args other = (sendDummyPush_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendDummyPush_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendDummyPush_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendDummyPush_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public sendDummyPush_result() {
    }

    public sendDummyPush_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendDummyPush_result(sendDummyPush_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public sendDummyPush_result deepCopy() {
      return new sendDummyPush_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendDummyPush_result)
        return this.equals((sendDummyPush_result)that);
      return false;
    }

    public boolean equals(sendDummyPush_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendDummyPush_result other = (sendDummyPush_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendDummyPush_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class removeE2EEPublicKey_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("removeE2EEPublicKey_args");

    private static final TField PUBLIC_KEY_FIELD_DESC = new TField("publicKey", TType.STRUCT, (short)2);

    private E2EEPublicKey publicKey;

    // isset id assignments

    public removeE2EEPublicKey_args() {
    }

    public removeE2EEPublicKey_args(
      E2EEPublicKey publicKey)
    {
      this();
      this.publicKey = publicKey;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeE2EEPublicKey_args(removeE2EEPublicKey_args other) {
      if (other.isSetPublicKey()) {
        this.publicKey = new E2EEPublicKey(other.publicKey);
      }
    }

    public removeE2EEPublicKey_args deepCopy() {
      return new removeE2EEPublicKey_args(this);
    }

    public void clear() {
      this.publicKey = null;
    }

    public E2EEPublicKey getPublicKey() {
      return this.publicKey;
    }

    public void setPublicKey(E2EEPublicKey publicKey) {
      this.publicKey = publicKey;
    }

    public void unsetPublicKey() {
      this.publicKey = null;
    }

    /** Returns true if field publicKey is set (has been assigned a value) and false otherwise */
    public boolean isSetPublicKey() {
      return this.publicKey != null;
    }

    public void setPublicKeyIsSet(boolean value) {
      if (!value) {
        this.publicKey = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeE2EEPublicKey_args)
        return this.equals((removeE2EEPublicKey_args)that);
      return false;
    }

    public boolean equals(removeE2EEPublicKey_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_publicKey = true && this.isSetPublicKey();
      boolean that_present_publicKey = true && that.isSetPublicKey();
      if (this_present_publicKey || that_present_publicKey) {
        if (!(this_present_publicKey && that_present_publicKey))
          return false;
        if (!this.publicKey.equals(that.publicKey))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      removeE2EEPublicKey_args other = (removeE2EEPublicKey_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetPublicKey(), other.isSetPublicKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPublicKey()) {
        lastComparison = this.publicKey.compareTo(other.publicKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // PUBLIC_KEY
            if (field.type == TType.STRUCT) {
              this.publicKey = new E2EEPublicKey();
              this.publicKey.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.publicKey != null) {
        oprot.writeFieldBegin(PUBLIC_KEY_FIELD_DESC);
        this.publicKey.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("removeE2EEPublicKey_args(");
      boolean first = true;

      sb.append("publicKey:");
      if (this.publicKey == null) {
        sb.append("null");
      } else {
        sb.append(this.publicKey);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class removeE2EEPublicKey_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("removeE2EEPublicKey_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public removeE2EEPublicKey_result() {
    }

    public removeE2EEPublicKey_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeE2EEPublicKey_result(removeE2EEPublicKey_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public removeE2EEPublicKey_result deepCopy() {
      return new removeE2EEPublicKey_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeE2EEPublicKey_result)
        return this.equals((removeE2EEPublicKey_result)that);
      return false;
    }

    public boolean equals(removeE2EEPublicKey_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      removeE2EEPublicKey_result other = (removeE2EEPublicKey_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("removeE2EEPublicKey_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class negotiateE2EEPublicKey_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("negotiateE2EEPublicKey_args");

    private static final TField MID_FIELD_DESC = new TField("mid", TType.STRING, (short)2);

    private String mid;

    // isset id assignments

    public negotiateE2EEPublicKey_args() {
    }

    public negotiateE2EEPublicKey_args(
      String mid)
    {
      this();
      this.mid = mid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public negotiateE2EEPublicKey_args(negotiateE2EEPublicKey_args other) {
      if (other.isSetMid()) {
        this.mid = other.mid;
      }
    }

    public negotiateE2EEPublicKey_args deepCopy() {
      return new negotiateE2EEPublicKey_args(this);
    }

    public void clear() {
      this.mid = null;
    }

    public String getMid() {
      return this.mid;
    }

    public void setMid(String mid) {
      this.mid = mid;
    }

    public void unsetMid() {
      this.mid = null;
    }

    /** Returns true if field mid is set (has been assigned a value) and false otherwise */
    public boolean isSetMid() {
      return this.mid != null;
    }

    public void setMidIsSet(boolean value) {
      if (!value) {
        this.mid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof negotiateE2EEPublicKey_args)
        return this.equals((negotiateE2EEPublicKey_args)that);
      return false;
    }

    public boolean equals(negotiateE2EEPublicKey_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mid = true && this.isSetMid();
      boolean that_present_mid = true && that.isSetMid();
      if (this_present_mid || that_present_mid) {
        if (!(this_present_mid && that_present_mid))
          return false;
        if (!this.mid.equals(that.mid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      negotiateE2EEPublicKey_args other = (negotiateE2EEPublicKey_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetMid(), other.isSetMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMid()) {
        lastComparison = TBaseHelper.compareTo(this.mid, other.mid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // MID
            if (field.type == TType.STRING) {
              this.mid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.mid != null) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeString(this.mid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("negotiateE2EEPublicKey_args(");
      boolean first = true;

      sb.append("mid:");
      if (this.mid == null) {
        sb.append("null");
      } else {
        sb.append(this.mid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class negotiateE2EEPublicKey_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("negotiateE2EEPublicKey_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private E2EENegotiationResult success;
    private TalkException e;

    // isset id assignments

    public negotiateE2EEPublicKey_result() {
    }

    public negotiateE2EEPublicKey_result(
      E2EENegotiationResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public negotiateE2EEPublicKey_result(negotiateE2EEPublicKey_result other) {
      if (other.isSetSuccess()) {
        this.success = new E2EENegotiationResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public negotiateE2EEPublicKey_result deepCopy() {
      return new negotiateE2EEPublicKey_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public E2EENegotiationResult getSuccess() {
      return this.success;
    }

    public void setSuccess(E2EENegotiationResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof negotiateE2EEPublicKey_result)
        return this.equals((negotiateE2EEPublicKey_result)that);
      return false;
    }

    public boolean equals(negotiateE2EEPublicKey_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      negotiateE2EEPublicKey_result other = (negotiateE2EEPublicKey_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new E2EENegotiationResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("negotiateE2EEPublicKey_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getE2EEPublicKey_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getE2EEPublicKey_args");

    private static final TField MID_FIELD_DESC = new TField("mid", TType.STRING, (short)2);
    private static final TField VERSION_FIELD_DESC = new TField("version", TType.I32, (short)3);
    private static final TField KEY_ID_FIELD_DESC = new TField("keyId", TType.I32, (short)4);

    private String mid;
    private int version;
    private int keyId;

    // isset id assignments
    private static final int __VERSION_ISSET_ID = 0;
    private static final int __KEYID_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public getE2EEPublicKey_args() {
    }

    public getE2EEPublicKey_args(
      String mid,
      int version,
      int keyId)
    {
      this();
      this.mid = mid;
      this.version = version;
      setVersionIsSet(true);
      this.keyId = keyId;
      setKeyIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getE2EEPublicKey_args(getE2EEPublicKey_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetMid()) {
        this.mid = other.mid;
      }
      this.version = other.version;
      this.keyId = other.keyId;
    }

    public getE2EEPublicKey_args deepCopy() {
      return new getE2EEPublicKey_args(this);
    }

    public void clear() {
      this.mid = null;
      setVersionIsSet(false);
      this.version = 0;
      setKeyIdIsSet(false);
      this.keyId = 0;
    }

    public String getMid() {
      return this.mid;
    }

    public void setMid(String mid) {
      this.mid = mid;
    }

    public void unsetMid() {
      this.mid = null;
    }

    /** Returns true if field mid is set (has been assigned a value) and false otherwise */
    public boolean isSetMid() {
      return this.mid != null;
    }

    public void setMidIsSet(boolean value) {
      if (!value) {
        this.mid = null;
      }
    }

    public int getVersion() {
      return this.version;
    }

    public void setVersion(int version) {
      this.version = version;
      setVersionIsSet(true);
    }

    public void unsetVersion() {
      __isset_vector[__VERSION_ISSET_ID] = false;
    }

    /** Returns true if field version is set (has been assigned a value) and false otherwise */
    public boolean isSetVersion() {
      return __isset_vector[__VERSION_ISSET_ID];
    }

    public void setVersionIsSet(boolean value) {
      __isset_vector[__VERSION_ISSET_ID] = value;
    }

    public int getKeyId() {
      return this.keyId;
    }

    public void setKeyId(int keyId) {
      this.keyId = keyId;
      setKeyIdIsSet(true);
    }

    public void unsetKeyId() {
      __isset_vector[__KEYID_ISSET_ID] = false;
    }

    /** Returns true if field keyId is set (has been assigned a value) and false otherwise */
    public boolean isSetKeyId() {
      return __isset_vector[__KEYID_ISSET_ID];
    }

    public void setKeyIdIsSet(boolean value) {
      __isset_vector[__KEYID_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getE2EEPublicKey_args)
        return this.equals((getE2EEPublicKey_args)that);
      return false;
    }

    public boolean equals(getE2EEPublicKey_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mid = true && this.isSetMid();
      boolean that_present_mid = true && that.isSetMid();
      if (this_present_mid || that_present_mid) {
        if (!(this_present_mid && that_present_mid))
          return false;
        if (!this.mid.equals(that.mid))
          return false;
      }

      boolean this_present_version = true;
      boolean that_present_version = true;
      if (this_present_version || that_present_version) {
        if (!(this_present_version && that_present_version))
          return false;
        if (this.version != that.version)
          return false;
      }

      boolean this_present_keyId = true;
      boolean that_present_keyId = true;
      if (this_present_keyId || that_present_keyId) {
        if (!(this_present_keyId && that_present_keyId))
          return false;
        if (this.keyId != that.keyId)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getE2EEPublicKey_args other = (getE2EEPublicKey_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetMid(), other.isSetMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMid()) {
        lastComparison = TBaseHelper.compareTo(this.mid, other.mid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetVersion(), other.isSetVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersion()) {
        lastComparison = TBaseHelper.compareTo(this.version, other.version);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetKeyId(), other.isSetKeyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeyId()) {
        lastComparison = TBaseHelper.compareTo(this.keyId, other.keyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // MID
            if (field.type == TType.STRING) {
              this.mid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // VERSION
            if (field.type == TType.I32) {
              this.version = iprot.readI32();
              setVersionIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // KEY_ID
            if (field.type == TType.I32) {
              this.keyId = iprot.readI32();
              setKeyIdIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.mid != null) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeString(this.mid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeI32(this.version);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(KEY_ID_FIELD_DESC);
      oprot.writeI32(this.keyId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getE2EEPublicKey_args(");
      boolean first = true;

      sb.append("mid:");
      if (this.mid == null) {
        sb.append("null");
      } else {
        sb.append(this.mid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("version:");
      sb.append(this.version);
      first = false;
      if (!first) sb.append(", ");
      sb.append("keyId:");
      sb.append(this.keyId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getE2EEPublicKey_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getE2EEPublicKey_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private E2EEPublicKey success;
    private TalkException e;

    // isset id assignments

    public getE2EEPublicKey_result() {
    }

    public getE2EEPublicKey_result(
      E2EEPublicKey success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getE2EEPublicKey_result(getE2EEPublicKey_result other) {
      if (other.isSetSuccess()) {
        this.success = new E2EEPublicKey(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getE2EEPublicKey_result deepCopy() {
      return new getE2EEPublicKey_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public E2EEPublicKey getSuccess() {
      return this.success;
    }

    public void setSuccess(E2EEPublicKey success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getE2EEPublicKey_result)
        return this.equals((getE2EEPublicKey_result)that);
      return false;
    }

    public boolean equals(getE2EEPublicKey_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getE2EEPublicKey_result other = (getE2EEPublicKey_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new E2EEPublicKey();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getE2EEPublicKey_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class requestE2EEKeyExchange_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("requestE2EEKeyExchange_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField TEMPORAL_PUBLIC_KEY_FIELD_DESC = new TField("temporalPublicKey", TType.STRING, (short)2);
    private static final TField PUBLIC_KEY_FIELD_DESC = new TField("publicKey", TType.STRUCT, (short)3);
    private static final TField VERIFIER_FIELD_DESC = new TField("verifier", TType.STRING, (short)4);

    private int reqSeq;
    private byte[] temporalPublicKey;
    private E2EEPublicKey publicKey;
    private byte[] verifier;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public requestE2EEKeyExchange_args() {
    }

    public requestE2EEKeyExchange_args(
      int reqSeq,
      byte[] temporalPublicKey,
      E2EEPublicKey publicKey,
      byte[] verifier)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.temporalPublicKey = temporalPublicKey;
      this.publicKey = publicKey;
      this.verifier = verifier;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestE2EEKeyExchange_args(requestE2EEKeyExchange_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetTemporalPublicKey()) {
        this.temporalPublicKey = new byte[other.temporalPublicKey.length];
        System.arraycopy(other.temporalPublicKey, 0, temporalPublicKey, 0, other.temporalPublicKey.length);
      }
      if (other.isSetPublicKey()) {
        this.publicKey = new E2EEPublicKey(other.publicKey);
      }
      if (other.isSetVerifier()) {
        this.verifier = new byte[other.verifier.length];
        System.arraycopy(other.verifier, 0, verifier, 0, other.verifier.length);
      }
    }

    public requestE2EEKeyExchange_args deepCopy() {
      return new requestE2EEKeyExchange_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.temporalPublicKey = null;
      this.publicKey = null;
      this.verifier = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public byte[] getTemporalPublicKey() {
      return this.temporalPublicKey;
    }

    public void setTemporalPublicKey(byte[] temporalPublicKey) {
      this.temporalPublicKey = temporalPublicKey;
    }

    public void unsetTemporalPublicKey() {
      this.temporalPublicKey = null;
    }

    /** Returns true if field temporalPublicKey is set (has been assigned a value) and false otherwise */
    public boolean isSetTemporalPublicKey() {
      return this.temporalPublicKey != null;
    }

    public void setTemporalPublicKeyIsSet(boolean value) {
      if (!value) {
        this.temporalPublicKey = null;
      }
    }

    public E2EEPublicKey getPublicKey() {
      return this.publicKey;
    }

    public void setPublicKey(E2EEPublicKey publicKey) {
      this.publicKey = publicKey;
    }

    public void unsetPublicKey() {
      this.publicKey = null;
    }

    /** Returns true if field publicKey is set (has been assigned a value) and false otherwise */
    public boolean isSetPublicKey() {
      return this.publicKey != null;
    }

    public void setPublicKeyIsSet(boolean value) {
      if (!value) {
        this.publicKey = null;
      }
    }

    public byte[] getVerifier() {
      return this.verifier;
    }

    public void setVerifier(byte[] verifier) {
      this.verifier = verifier;
    }

    public void unsetVerifier() {
      this.verifier = null;
    }

    /** Returns true if field verifier is set (has been assigned a value) and false otherwise */
    public boolean isSetVerifier() {
      return this.verifier != null;
    }

    public void setVerifierIsSet(boolean value) {
      if (!value) {
        this.verifier = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestE2EEKeyExchange_args)
        return this.equals((requestE2EEKeyExchange_args)that);
      return false;
    }

    public boolean equals(requestE2EEKeyExchange_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_temporalPublicKey = true && this.isSetTemporalPublicKey();
      boolean that_present_temporalPublicKey = true && that.isSetTemporalPublicKey();
      if (this_present_temporalPublicKey || that_present_temporalPublicKey) {
        if (!(this_present_temporalPublicKey && that_present_temporalPublicKey))
          return false;
        if (TBaseHelper.compareTo(this.temporalPublicKey, that.temporalPublicKey) != 0)
          return false;
      }

      boolean this_present_publicKey = true && this.isSetPublicKey();
      boolean that_present_publicKey = true && that.isSetPublicKey();
      if (this_present_publicKey || that_present_publicKey) {
        if (!(this_present_publicKey && that_present_publicKey))
          return false;
        if (!this.publicKey.equals(that.publicKey))
          return false;
      }

      boolean this_present_verifier = true && this.isSetVerifier();
      boolean that_present_verifier = true && that.isSetVerifier();
      if (this_present_verifier || that_present_verifier) {
        if (!(this_present_verifier && that_present_verifier))
          return false;
        if (TBaseHelper.compareTo(this.verifier, that.verifier) != 0)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      requestE2EEKeyExchange_args other = (requestE2EEKeyExchange_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetTemporalPublicKey(), other.isSetTemporalPublicKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTemporalPublicKey()) {
        lastComparison = TBaseHelper.compareTo(this.temporalPublicKey, other.temporalPublicKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPublicKey(), other.isSetPublicKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPublicKey()) {
        lastComparison = this.publicKey.compareTo(other.publicKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetVerifier(), other.isSetVerifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVerifier()) {
        lastComparison = TBaseHelper.compareTo(this.verifier, other.verifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TEMPORAL_PUBLIC_KEY
            if (field.type == TType.STRING) {
              this.temporalPublicKey = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PUBLIC_KEY
            if (field.type == TType.STRUCT) {
              this.publicKey = new E2EEPublicKey();
              this.publicKey.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // VERIFIER
            if (field.type == TType.STRING) {
              this.verifier = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.temporalPublicKey != null) {
        oprot.writeFieldBegin(TEMPORAL_PUBLIC_KEY_FIELD_DESC);
        oprot.writeBinary(this.temporalPublicKey);
        oprot.writeFieldEnd();
      }
      if (this.publicKey != null) {
        oprot.writeFieldBegin(PUBLIC_KEY_FIELD_DESC);
        this.publicKey.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.verifier != null) {
        oprot.writeFieldBegin(VERIFIER_FIELD_DESC);
        oprot.writeBinary(this.verifier);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("requestE2EEKeyExchange_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("temporalPublicKey:");
      if (this.temporalPublicKey == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.temporalPublicKey, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("publicKey:");
      if (this.publicKey == null) {
        sb.append("null");
      } else {
        sb.append(this.publicKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("verifier:");
      if (this.verifier == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.verifier, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class requestE2EEKeyExchange_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("requestE2EEKeyExchange_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public requestE2EEKeyExchange_result() {
    }

    public requestE2EEKeyExchange_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestE2EEKeyExchange_result(requestE2EEKeyExchange_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public requestE2EEKeyExchange_result deepCopy() {
      return new requestE2EEKeyExchange_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestE2EEKeyExchange_result)
        return this.equals((requestE2EEKeyExchange_result)that);
      return false;
    }

    public boolean equals(requestE2EEKeyExchange_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      requestE2EEKeyExchange_result other = (requestE2EEKeyExchange_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("requestE2EEKeyExchange_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getLastE2EEPublicKeys_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getLastE2EEPublicKeys_args");

    private static final TField CHAT_MID_FIELD_DESC = new TField("chatMid", TType.STRING, (short)2);

    private String chatMid;

    // isset id assignments

    public getLastE2EEPublicKeys_args() {
    }

    public getLastE2EEPublicKeys_args(
      String chatMid)
    {
      this();
      this.chatMid = chatMid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLastE2EEPublicKeys_args(getLastE2EEPublicKeys_args other) {
      if (other.isSetChatMid()) {
        this.chatMid = other.chatMid;
      }
    }

    public getLastE2EEPublicKeys_args deepCopy() {
      return new getLastE2EEPublicKeys_args(this);
    }

    public void clear() {
      this.chatMid = null;
    }

    public String getChatMid() {
      return this.chatMid;
    }

    public void setChatMid(String chatMid) {
      this.chatMid = chatMid;
    }

    public void unsetChatMid() {
      this.chatMid = null;
    }

    /** Returns true if field chatMid is set (has been assigned a value) and false otherwise */
    public boolean isSetChatMid() {
      return this.chatMid != null;
    }

    public void setChatMidIsSet(boolean value) {
      if (!value) {
        this.chatMid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLastE2EEPublicKeys_args)
        return this.equals((getLastE2EEPublicKeys_args)that);
      return false;
    }

    public boolean equals(getLastE2EEPublicKeys_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_chatMid = true && this.isSetChatMid();
      boolean that_present_chatMid = true && that.isSetChatMid();
      if (this_present_chatMid || that_present_chatMid) {
        if (!(this_present_chatMid && that_present_chatMid))
          return false;
        if (!this.chatMid.equals(that.chatMid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getLastE2EEPublicKeys_args other = (getLastE2EEPublicKeys_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetChatMid(), other.isSetChatMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChatMid()) {
        lastComparison = TBaseHelper.compareTo(this.chatMid, other.chatMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // CHAT_MID
            if (field.type == TType.STRING) {
              this.chatMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.chatMid != null) {
        oprot.writeFieldBegin(CHAT_MID_FIELD_DESC);
        oprot.writeString(this.chatMid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getLastE2EEPublicKeys_args(");
      boolean first = true;

      sb.append("chatMid:");
      if (this.chatMid == null) {
        sb.append("null");
      } else {
        sb.append(this.chatMid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getLastE2EEPublicKeys_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getLastE2EEPublicKeys_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.MAP, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Hashtable success;
    private TalkException e;

    // isset id assignments

    public getLastE2EEPublicKeys_result() {
    }

    public getLastE2EEPublicKeys_result(
      Hashtable success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLastE2EEPublicKeys_result(getLastE2EEPublicKeys_result other) {
      if (other.isSetSuccess()) {
        Hashtable __this__success = new Hashtable();
        for (Enumeration other_enum = other.success.keys(); other_enum.hasMoreElements(); ) {

          String other_element_key = (String)other_enum.nextElement();
          E2EEPublicKey other_element_value = (E2EEPublicKey)other.success.get(other_element_key);

          String __this__success_copy_key = other_element_key;

          E2EEPublicKey __this__success_copy_value = new E2EEPublicKey(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getLastE2EEPublicKeys_result deepCopy() {
      return new getLastE2EEPublicKeys_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, E2EEPublicKey val) {
      if (this.success == null) {
        this.success = new Hashtable();
      }
      this.success.put(key, val);
    }

    public Hashtable getSuccess() {
      return this.success;
    }

    public void setSuccess(Hashtable success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLastE2EEPublicKeys_result)
        return this.equals((getLastE2EEPublicKeys_result)that);
      return false;
    }

    public boolean equals(getLastE2EEPublicKeys_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getLastE2EEPublicKeys_result other = (getLastE2EEPublicKeys_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.MAP) {
              {
                TMap _map1114 = iprot.readMapBegin();
                this.success = new Hashtable(2*_map1114.size);
                for (int _i1115 = 0; _i1115 < _map1114.size; ++_i1115)
                {
                  String _key1116;
                  E2EEPublicKey _val1117;
                  _key1116 = iprot.readString();
                  _val1117 = new E2EEPublicKey();
                  _val1117.read(iprot);
                  this.success.put(_key1116, _val1117);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.success.size()));
          for (Enumeration _iter1118_enum = this.success.keys(); _iter1118_enum.hasMoreElements(); )           {
            String _iter1118 = (String)_iter1118_enum.nextElement();
            oprot.writeString(_iter1118);
            ((E2EEPublicKey)this.success.get(_iter1118)).write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getLastE2EEPublicKeys_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerE2EEPublicKey_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerE2EEPublicKey_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField PUBLIC_KEY_FIELD_DESC = new TField("publicKey", TType.STRUCT, (short)2);

    private int reqSeq;
    private E2EEPublicKey publicKey;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public registerE2EEPublicKey_args() {
    }

    public registerE2EEPublicKey_args(
      int reqSeq,
      E2EEPublicKey publicKey)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.publicKey = publicKey;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerE2EEPublicKey_args(registerE2EEPublicKey_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetPublicKey()) {
        this.publicKey = new E2EEPublicKey(other.publicKey);
      }
    }

    public registerE2EEPublicKey_args deepCopy() {
      return new registerE2EEPublicKey_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.publicKey = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public E2EEPublicKey getPublicKey() {
      return this.publicKey;
    }

    public void setPublicKey(E2EEPublicKey publicKey) {
      this.publicKey = publicKey;
    }

    public void unsetPublicKey() {
      this.publicKey = null;
    }

    /** Returns true if field publicKey is set (has been assigned a value) and false otherwise */
    public boolean isSetPublicKey() {
      return this.publicKey != null;
    }

    public void setPublicKeyIsSet(boolean value) {
      if (!value) {
        this.publicKey = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerE2EEPublicKey_args)
        return this.equals((registerE2EEPublicKey_args)that);
      return false;
    }

    public boolean equals(registerE2EEPublicKey_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_publicKey = true && this.isSetPublicKey();
      boolean that_present_publicKey = true && that.isSetPublicKey();
      if (this_present_publicKey || that_present_publicKey) {
        if (!(this_present_publicKey && that_present_publicKey))
          return false;
        if (!this.publicKey.equals(that.publicKey))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerE2EEPublicKey_args other = (registerE2EEPublicKey_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPublicKey(), other.isSetPublicKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPublicKey()) {
        lastComparison = this.publicKey.compareTo(other.publicKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // PUBLIC_KEY
            if (field.type == TType.STRUCT) {
              this.publicKey = new E2EEPublicKey();
              this.publicKey.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.publicKey != null) {
        oprot.writeFieldBegin(PUBLIC_KEY_FIELD_DESC);
        this.publicKey.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerE2EEPublicKey_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("publicKey:");
      if (this.publicKey == null) {
        sb.append("null");
      } else {
        sb.append(this.publicKey);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerE2EEPublicKey_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerE2EEPublicKey_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private E2EEPublicKey success;
    private TalkException e;

    // isset id assignments

    public registerE2EEPublicKey_result() {
    }

    public registerE2EEPublicKey_result(
      E2EEPublicKey success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerE2EEPublicKey_result(registerE2EEPublicKey_result other) {
      if (other.isSetSuccess()) {
        this.success = new E2EEPublicKey(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public registerE2EEPublicKey_result deepCopy() {
      return new registerE2EEPublicKey_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public E2EEPublicKey getSuccess() {
      return this.success;
    }

    public void setSuccess(E2EEPublicKey success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerE2EEPublicKey_result)
        return this.equals((registerE2EEPublicKey_result)that);
      return false;
    }

    public boolean equals(registerE2EEPublicKey_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerE2EEPublicKey_result other = (registerE2EEPublicKey_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new E2EEPublicKey();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerE2EEPublicKey_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getE2EEPublicKeys_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getE2EEPublicKeys_args");


    public getE2EEPublicKeys_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getE2EEPublicKeys_args(getE2EEPublicKeys_args other) {
    }

    public getE2EEPublicKeys_args deepCopy() {
      return new getE2EEPublicKeys_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getE2EEPublicKeys_args)
        return this.equals((getE2EEPublicKeys_args)that);
      return false;
    }

    public boolean equals(getE2EEPublicKeys_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getE2EEPublicKeys_args other = (getE2EEPublicKeys_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getE2EEPublicKeys_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getE2EEPublicKeys_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getE2EEPublicKeys_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getE2EEPublicKeys_result() {
    }

    public getE2EEPublicKeys_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getE2EEPublicKeys_result(getE2EEPublicKeys_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          E2EEPublicKey other_element = (E2EEPublicKey)other_enum.nextElement();
          __this__success.addElement(new E2EEPublicKey(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getE2EEPublicKeys_result deepCopy() {
      return new getE2EEPublicKeys_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(E2EEPublicKey elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getE2EEPublicKeys_result)
        return this.equals((getE2EEPublicKeys_result)that);
      return false;
    }

    public boolean equals(getE2EEPublicKeys_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getE2EEPublicKeys_result other = (getE2EEPublicKeys_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list1119 = iprot.readListBegin();
                this.success = new Vector(_list1119.size);
                for (int _i1120 = 0; _i1120 < _list1119.size; ++_i1120)
                {
                  E2EEPublicKey _elem1121;
                  _elem1121 = new E2EEPublicKey();
                  _elem1121.read(iprot);
                  this.success.addElement(_elem1121);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter1122_enum = this.success.elements(); _iter1122_enum.hasMoreElements(); )           {
            E2EEPublicKey _iter1122 = (E2EEPublicKey)_iter1122_enum.nextElement();
            _iter1122.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getE2EEPublicKeys_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getE2EEPublicKeysEx_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getE2EEPublicKeysEx_args");

    private static final TField IGNORE_E2_EESTATUS_FIELD_DESC = new TField("ignoreE2EEStatus", TType.BOOL, (short)2);

    private boolean ignoreE2EEStatus;

    // isset id assignments
    private static final int __IGNOREE2EESTATUS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getE2EEPublicKeysEx_args() {
    }

    public getE2EEPublicKeysEx_args(
      boolean ignoreE2EEStatus)
    {
      this();
      this.ignoreE2EEStatus = ignoreE2EEStatus;
      setIgnoreE2EEStatusIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getE2EEPublicKeysEx_args(getE2EEPublicKeysEx_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.ignoreE2EEStatus = other.ignoreE2EEStatus;
    }

    public getE2EEPublicKeysEx_args deepCopy() {
      return new getE2EEPublicKeysEx_args(this);
    }

    public void clear() {
      setIgnoreE2EEStatusIsSet(false);
      this.ignoreE2EEStatus = false;
    }

    public boolean isIgnoreE2EEStatus() {
      return this.ignoreE2EEStatus;
    }

    public void setIgnoreE2EEStatus(boolean ignoreE2EEStatus) {
      this.ignoreE2EEStatus = ignoreE2EEStatus;
      setIgnoreE2EEStatusIsSet(true);
    }

    public void unsetIgnoreE2EEStatus() {
      __isset_vector[__IGNOREE2EESTATUS_ISSET_ID] = false;
    }

    /** Returns true if field ignoreE2EEStatus is set (has been assigned a value) and false otherwise */
    public boolean isSetIgnoreE2EEStatus() {
      return __isset_vector[__IGNOREE2EESTATUS_ISSET_ID];
    }

    public void setIgnoreE2EEStatusIsSet(boolean value) {
      __isset_vector[__IGNOREE2EESTATUS_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getE2EEPublicKeysEx_args)
        return this.equals((getE2EEPublicKeysEx_args)that);
      return false;
    }

    public boolean equals(getE2EEPublicKeysEx_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ignoreE2EEStatus = true;
      boolean that_present_ignoreE2EEStatus = true;
      if (this_present_ignoreE2EEStatus || that_present_ignoreE2EEStatus) {
        if (!(this_present_ignoreE2EEStatus && that_present_ignoreE2EEStatus))
          return false;
        if (this.ignoreE2EEStatus != that.ignoreE2EEStatus)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getE2EEPublicKeysEx_args other = (getE2EEPublicKeysEx_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetIgnoreE2EEStatus(), other.isSetIgnoreE2EEStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIgnoreE2EEStatus()) {
        lastComparison = TBaseHelper.compareTo(this.ignoreE2EEStatus, other.ignoreE2EEStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // IGNORE_E2_EESTATUS
            if (field.type == TType.BOOL) {
              this.ignoreE2EEStatus = iprot.readBool();
              setIgnoreE2EEStatusIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IGNORE_E2_EESTATUS_FIELD_DESC);
      oprot.writeBool(this.ignoreE2EEStatus);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getE2EEPublicKeysEx_args(");
      boolean first = true;

      sb.append("ignoreE2EEStatus:");
      sb.append(this.ignoreE2EEStatus);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getE2EEPublicKeysEx_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getE2EEPublicKeysEx_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getE2EEPublicKeysEx_result() {
    }

    public getE2EEPublicKeysEx_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getE2EEPublicKeysEx_result(getE2EEPublicKeysEx_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          E2EEPublicKey other_element = (E2EEPublicKey)other_enum.nextElement();
          __this__success.addElement(new E2EEPublicKey(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getE2EEPublicKeysEx_result deepCopy() {
      return new getE2EEPublicKeysEx_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(E2EEPublicKey elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getE2EEPublicKeysEx_result)
        return this.equals((getE2EEPublicKeysEx_result)that);
      return false;
    }

    public boolean equals(getE2EEPublicKeysEx_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getE2EEPublicKeysEx_result other = (getE2EEPublicKeysEx_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list1123 = iprot.readListBegin();
                this.success = new Vector(_list1123.size);
                for (int _i1124 = 0; _i1124 < _list1123.size; ++_i1124)
                {
                  E2EEPublicKey _elem1125;
                  _elem1125 = new E2EEPublicKey();
                  _elem1125.read(iprot);
                  this.success.addElement(_elem1125);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter1126_enum = this.success.elements(); _iter1126_enum.hasMoreElements(); )           {
            E2EEPublicKey _iter1126 = (E2EEPublicKey)_iter1126_enum.nextElement();
            _iter1126.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getE2EEPublicKeysEx_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getReadMessageOpsInBulk_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getReadMessageOpsInBulk_args");

    private static final TField CHAT_IDS_FIELD_DESC = new TField("chatIds", TType.LIST, (short)2);

    private Vector chatIds;

    // isset id assignments

    public getReadMessageOpsInBulk_args() {
    }

    public getReadMessageOpsInBulk_args(
      Vector chatIds)
    {
      this();
      this.chatIds = chatIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReadMessageOpsInBulk_args(getReadMessageOpsInBulk_args other) {
      if (other.isSetChatIds()) {
        Vector __this__chatIds = new Vector();
        for (Enumeration other_enum = other.chatIds.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__chatIds.addElement(other_element);
        }
        this.chatIds = __this__chatIds;
      }
    }

    public getReadMessageOpsInBulk_args deepCopy() {
      return new getReadMessageOpsInBulk_args(this);
    }

    public void clear() {
      this.chatIds = null;
    }

    public int getChatIdsSize() {
      return (this.chatIds == null) ? 0 : this.chatIds.size();
    }

    public Enumeration getChatIdsEnumeration() {
      return (this.chatIds == null) ? null : this.chatIds.elements();
    }

    public void addToChatIds(String elem) {
      if (this.chatIds == null) {
        this.chatIds = new Vector();
      }
      this.chatIds.addElement(elem);
    }

    public Vector getChatIds() {
      return this.chatIds;
    }

    public void setChatIds(Vector chatIds) {
      this.chatIds = chatIds;
    }

    public void unsetChatIds() {
      this.chatIds = null;
    }

    /** Returns true if field chatIds is set (has been assigned a value) and false otherwise */
    public boolean isSetChatIds() {
      return this.chatIds != null;
    }

    public void setChatIdsIsSet(boolean value) {
      if (!value) {
        this.chatIds = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getReadMessageOpsInBulk_args)
        return this.equals((getReadMessageOpsInBulk_args)that);
      return false;
    }

    public boolean equals(getReadMessageOpsInBulk_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_chatIds = true && this.isSetChatIds();
      boolean that_present_chatIds = true && that.isSetChatIds();
      if (this_present_chatIds || that_present_chatIds) {
        if (!(this_present_chatIds && that_present_chatIds))
          return false;
        if (!this.chatIds.equals(that.chatIds))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getReadMessageOpsInBulk_args other = (getReadMessageOpsInBulk_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetChatIds(), other.isSetChatIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChatIds()) {
        lastComparison = TBaseHelper.compareTo(this.chatIds, other.chatIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // CHAT_IDS
            if (field.type == TType.LIST) {
              {
                TList _list1127 = iprot.readListBegin();
                this.chatIds = new Vector(_list1127.size);
                for (int _i1128 = 0; _i1128 < _list1127.size; ++_i1128)
                {
                  String _elem1129;
                  _elem1129 = iprot.readString();
                  this.chatIds.addElement(_elem1129);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.chatIds != null) {
        oprot.writeFieldBegin(CHAT_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.chatIds.size()));
          for (Enumeration _iter1130_enum = this.chatIds.elements(); _iter1130_enum.hasMoreElements(); )           {
            String _iter1130 = (String)_iter1130_enum.nextElement();
            oprot.writeString(_iter1130);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getReadMessageOpsInBulk_args(");
      boolean first = true;

      sb.append("chatIds:");
      if (this.chatIds == null) {
        sb.append("null");
      } else {
        sb.append(this.chatIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getReadMessageOpsInBulk_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getReadMessageOpsInBulk_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getReadMessageOpsInBulk_result() {
    }

    public getReadMessageOpsInBulk_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReadMessageOpsInBulk_result(getReadMessageOpsInBulk_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          Operation other_element = (Operation)other_enum.nextElement();
          __this__success.addElement(new Operation(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getReadMessageOpsInBulk_result deepCopy() {
      return new getReadMessageOpsInBulk_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(Operation elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getReadMessageOpsInBulk_result)
        return this.equals((getReadMessageOpsInBulk_result)that);
      return false;
    }

    public boolean equals(getReadMessageOpsInBulk_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getReadMessageOpsInBulk_result other = (getReadMessageOpsInBulk_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list1131 = iprot.readListBegin();
                this.success = new Vector(_list1131.size);
                for (int _i1132 = 0; _i1132 < _list1131.size; ++_i1132)
                {
                  Operation _elem1133;
                  _elem1133 = new Operation();
                  _elem1133.read(iprot);
                  this.success.addElement(_elem1133);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter1134_enum = this.success.elements(); _iter1134_enum.hasMoreElements(); )           {
            Operation _iter1134 = (Operation)_iter1134_enum.nextElement();
            _iter1134.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getReadMessageOpsInBulk_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendEvent_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendEvent_args");

    private static final TField SEQ_FIELD_DESC = new TField("seq", TType.I32, (short)1);
    private static final TField MESSAGE_FIELD_DESC = new TField("message", TType.STRUCT, (short)2);

    private int seq;
    private Message message;

    // isset id assignments
    private static final int __SEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public sendEvent_args() {
    }

    public sendEvent_args(
      int seq,
      Message message)
    {
      this();
      this.seq = seq;
      setSeqIsSet(true);
      this.message = message;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendEvent_args(sendEvent_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.seq = other.seq;
      if (other.isSetMessage()) {
        this.message = new Message(other.message);
      }
    }

    public sendEvent_args deepCopy() {
      return new sendEvent_args(this);
    }

    public void clear() {
      setSeqIsSet(false);
      this.seq = 0;
      this.message = null;
    }

    public int getSeq() {
      return this.seq;
    }

    public void setSeq(int seq) {
      this.seq = seq;
      setSeqIsSet(true);
    }

    public void unsetSeq() {
      __isset_vector[__SEQ_ISSET_ID] = false;
    }

    /** Returns true if field seq is set (has been assigned a value) and false otherwise */
    public boolean isSetSeq() {
      return __isset_vector[__SEQ_ISSET_ID];
    }

    public void setSeqIsSet(boolean value) {
      __isset_vector[__SEQ_ISSET_ID] = value;
    }

    public Message getMessage() {
      return this.message;
    }

    public void setMessage(Message message) {
      this.message = message;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /** Returns true if field message is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendEvent_args)
        return this.equals((sendEvent_args)that);
      return false;
    }

    public boolean equals(sendEvent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_seq = true;
      boolean that_present_seq = true;
      if (this_present_seq || that_present_seq) {
        if (!(this_present_seq && that_present_seq))
          return false;
        if (this.seq != that.seq)
          return false;
      }

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendEvent_args other = (sendEvent_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSeq(), other.isSetSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeq()) {
        lastComparison = TBaseHelper.compareTo(this.seq, other.seq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMessage(), other.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = this.message.compareTo(other.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SEQ
            if (field.type == TType.I32) {
              this.seq = iprot.readI32();
              setSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MESSAGE
            if (field.type == TType.STRUCT) {
              this.message = new Message();
              this.message.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQ_FIELD_DESC);
      oprot.writeI32(this.seq);
      oprot.writeFieldEnd();
      if (this.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        this.message.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendEvent_args(");
      boolean first = true;

      sb.append("seq:");
      sb.append(this.seq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendEvent_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendEvent_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Message success;
    private TalkException e;

    // isset id assignments

    public sendEvent_result() {
    }

    public sendEvent_result(
      Message success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendEvent_result(sendEvent_result other) {
      if (other.isSetSuccess()) {
        this.success = new Message(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public sendEvent_result deepCopy() {
      return new sendEvent_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Message getSuccess() {
      return this.success;
    }

    public void setSuccess(Message success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendEvent_result)
        return this.equals((sendEvent_result)that);
      return false;
    }

    public boolean equals(sendEvent_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendEvent_result other = (sendEvent_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Message();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendEvent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendMessage_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendMessage_args");

    private static final TField SEQ_FIELD_DESC = new TField("seq", TType.I32, (short)1);
    private static final TField MESSAGE_FIELD_DESC = new TField("message", TType.STRUCT, (short)2);

    private int seq;
    private Message message;

    // isset id assignments
    private static final int __SEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public sendMessage_args() {
    }

    public sendMessage_args(
      int seq,
      Message message)
    {
      this();
      this.seq = seq;
      setSeqIsSet(true);
      this.message = message;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMessage_args(sendMessage_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.seq = other.seq;
      if (other.isSetMessage()) {
        this.message = new Message(other.message);
      }
    }

    public sendMessage_args deepCopy() {
      return new sendMessage_args(this);
    }

    public void clear() {
      setSeqIsSet(false);
      this.seq = 0;
      this.message = null;
    }

    public int getSeq() {
      return this.seq;
    }

    public void setSeq(int seq) {
      this.seq = seq;
      setSeqIsSet(true);
    }

    public void unsetSeq() {
      __isset_vector[__SEQ_ISSET_ID] = false;
    }

    /** Returns true if field seq is set (has been assigned a value) and false otherwise */
    public boolean isSetSeq() {
      return __isset_vector[__SEQ_ISSET_ID];
    }

    public void setSeqIsSet(boolean value) {
      __isset_vector[__SEQ_ISSET_ID] = value;
    }

    public Message getMessage() {
      return this.message;
    }

    public void setMessage(Message message) {
      this.message = message;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /** Returns true if field message is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMessage_args)
        return this.equals((sendMessage_args)that);
      return false;
    }

    public boolean equals(sendMessage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_seq = true;
      boolean that_present_seq = true;
      if (this_present_seq || that_present_seq) {
        if (!(this_present_seq && that_present_seq))
          return false;
        if (this.seq != that.seq)
          return false;
      }

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendMessage_args other = (sendMessage_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSeq(), other.isSetSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeq()) {
        lastComparison = TBaseHelper.compareTo(this.seq, other.seq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMessage(), other.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = this.message.compareTo(other.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SEQ
            if (field.type == TType.I32) {
              this.seq = iprot.readI32();
              setSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MESSAGE
            if (field.type == TType.STRUCT) {
              this.message = new Message();
              this.message.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQ_FIELD_DESC);
      oprot.writeI32(this.seq);
      oprot.writeFieldEnd();
      if (this.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        this.message.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendMessage_args(");
      boolean first = true;

      sb.append("seq:");
      sb.append(this.seq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendMessage_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendMessage_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Message success;
    private TalkException e;

    // isset id assignments

    public sendMessage_result() {
    }

    public sendMessage_result(
      Message success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMessage_result(sendMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = new Message(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public sendMessage_result deepCopy() {
      return new sendMessage_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Message getSuccess() {
      return this.success;
    }

    public void setSuccess(Message success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMessage_result)
        return this.equals((sendMessage_result)that);
      return false;
    }

    public boolean equals(sendMessage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendMessage_result other = (sendMessage_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Message();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendMessageIgnored_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendMessageIgnored_args");

    private static final TField SEQ_FIELD_DESC = new TField("seq", TType.I32, (short)1);
    private static final TField CONSUMER_FIELD_DESC = new TField("consumer", TType.STRING, (short)2);
    private static final TField MESSAGE_IDS_FIELD_DESC = new TField("messageIds", TType.LIST, (short)3);

    private int seq;
    private String consumer;
    private Vector messageIds;

    // isset id assignments
    private static final int __SEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public sendMessageIgnored_args() {
    }

    public sendMessageIgnored_args(
      int seq,
      String consumer,
      Vector messageIds)
    {
      this();
      this.seq = seq;
      setSeqIsSet(true);
      this.consumer = consumer;
      this.messageIds = messageIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMessageIgnored_args(sendMessageIgnored_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.seq = other.seq;
      if (other.isSetConsumer()) {
        this.consumer = other.consumer;
      }
      if (other.isSetMessageIds()) {
        Vector __this__messageIds = new Vector();
        for (Enumeration other_enum = other.messageIds.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__messageIds.addElement(other_element);
        }
        this.messageIds = __this__messageIds;
      }
    }

    public sendMessageIgnored_args deepCopy() {
      return new sendMessageIgnored_args(this);
    }

    public void clear() {
      setSeqIsSet(false);
      this.seq = 0;
      this.consumer = null;
      this.messageIds = null;
    }

    public int getSeq() {
      return this.seq;
    }

    public void setSeq(int seq) {
      this.seq = seq;
      setSeqIsSet(true);
    }

    public void unsetSeq() {
      __isset_vector[__SEQ_ISSET_ID] = false;
    }

    /** Returns true if field seq is set (has been assigned a value) and false otherwise */
    public boolean isSetSeq() {
      return __isset_vector[__SEQ_ISSET_ID];
    }

    public void setSeqIsSet(boolean value) {
      __isset_vector[__SEQ_ISSET_ID] = value;
    }

    public String getConsumer() {
      return this.consumer;
    }

    public void setConsumer(String consumer) {
      this.consumer = consumer;
    }

    public void unsetConsumer() {
      this.consumer = null;
    }

    /** Returns true if field consumer is set (has been assigned a value) and false otherwise */
    public boolean isSetConsumer() {
      return this.consumer != null;
    }

    public void setConsumerIsSet(boolean value) {
      if (!value) {
        this.consumer = null;
      }
    }

    public int getMessageIdsSize() {
      return (this.messageIds == null) ? 0 : this.messageIds.size();
    }

    public Enumeration getMessageIdsEnumeration() {
      return (this.messageIds == null) ? null : this.messageIds.elements();
    }

    public void addToMessageIds(String elem) {
      if (this.messageIds == null) {
        this.messageIds = new Vector();
      }
      this.messageIds.addElement(elem);
    }

    public Vector getMessageIds() {
      return this.messageIds;
    }

    public void setMessageIds(Vector messageIds) {
      this.messageIds = messageIds;
    }

    public void unsetMessageIds() {
      this.messageIds = null;
    }

    /** Returns true if field messageIds is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageIds() {
      return this.messageIds != null;
    }

    public void setMessageIdsIsSet(boolean value) {
      if (!value) {
        this.messageIds = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMessageIgnored_args)
        return this.equals((sendMessageIgnored_args)that);
      return false;
    }

    public boolean equals(sendMessageIgnored_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_seq = true;
      boolean that_present_seq = true;
      if (this_present_seq || that_present_seq) {
        if (!(this_present_seq && that_present_seq))
          return false;
        if (this.seq != that.seq)
          return false;
      }

      boolean this_present_consumer = true && this.isSetConsumer();
      boolean that_present_consumer = true && that.isSetConsumer();
      if (this_present_consumer || that_present_consumer) {
        if (!(this_present_consumer && that_present_consumer))
          return false;
        if (!this.consumer.equals(that.consumer))
          return false;
      }

      boolean this_present_messageIds = true && this.isSetMessageIds();
      boolean that_present_messageIds = true && that.isSetMessageIds();
      if (this_present_messageIds || that_present_messageIds) {
        if (!(this_present_messageIds && that_present_messageIds))
          return false;
        if (!this.messageIds.equals(that.messageIds))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendMessageIgnored_args other = (sendMessageIgnored_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSeq(), other.isSetSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeq()) {
        lastComparison = TBaseHelper.compareTo(this.seq, other.seq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetConsumer(), other.isSetConsumer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConsumer()) {
        lastComparison = TBaseHelper.compareTo(this.consumer, other.consumer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMessageIds(), other.isSetMessageIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageIds()) {
        lastComparison = TBaseHelper.compareTo(this.messageIds, other.messageIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SEQ
            if (field.type == TType.I32) {
              this.seq = iprot.readI32();
              setSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CONSUMER
            if (field.type == TType.STRING) {
              this.consumer = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // MESSAGE_IDS
            if (field.type == TType.LIST) {
              {
                TList _list1135 = iprot.readListBegin();
                this.messageIds = new Vector(_list1135.size);
                for (int _i1136 = 0; _i1136 < _list1135.size; ++_i1136)
                {
                  String _elem1137;
                  _elem1137 = iprot.readString();
                  this.messageIds.addElement(_elem1137);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQ_FIELD_DESC);
      oprot.writeI32(this.seq);
      oprot.writeFieldEnd();
      if (this.consumer != null) {
        oprot.writeFieldBegin(CONSUMER_FIELD_DESC);
        oprot.writeString(this.consumer);
        oprot.writeFieldEnd();
      }
      if (this.messageIds != null) {
        oprot.writeFieldBegin(MESSAGE_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.messageIds.size()));
          for (Enumeration _iter1138_enum = this.messageIds.elements(); _iter1138_enum.hasMoreElements(); )           {
            String _iter1138 = (String)_iter1138_enum.nextElement();
            oprot.writeString(_iter1138);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendMessageIgnored_args(");
      boolean first = true;

      sb.append("seq:");
      sb.append(this.seq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("consumer:");
      if (this.consumer == null) {
        sb.append("null");
      } else {
        sb.append(this.consumer);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("messageIds:");
      if (this.messageIds == null) {
        sb.append("null");
      } else {
        sb.append(this.messageIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendMessageIgnored_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendMessageIgnored_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public sendMessageIgnored_result() {
    }

    public sendMessageIgnored_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMessageIgnored_result(sendMessageIgnored_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public sendMessageIgnored_result deepCopy() {
      return new sendMessageIgnored_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMessageIgnored_result)
        return this.equals((sendMessageIgnored_result)that);
      return false;
    }

    public boolean equals(sendMessageIgnored_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendMessageIgnored_result other = (sendMessageIgnored_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendMessageIgnored_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendMessageReceipt_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendMessageReceipt_args");

    private static final TField SEQ_FIELD_DESC = new TField("seq", TType.I32, (short)1);
    private static final TField CONSUMER_FIELD_DESC = new TField("consumer", TType.STRING, (short)2);
    private static final TField MESSAGE_IDS_FIELD_DESC = new TField("messageIds", TType.LIST, (short)3);

    private int seq;
    private String consumer;
    private Vector messageIds;

    // isset id assignments
    private static final int __SEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public sendMessageReceipt_args() {
    }

    public sendMessageReceipt_args(
      int seq,
      String consumer,
      Vector messageIds)
    {
      this();
      this.seq = seq;
      setSeqIsSet(true);
      this.consumer = consumer;
      this.messageIds = messageIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMessageReceipt_args(sendMessageReceipt_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.seq = other.seq;
      if (other.isSetConsumer()) {
        this.consumer = other.consumer;
      }
      if (other.isSetMessageIds()) {
        Vector __this__messageIds = new Vector();
        for (Enumeration other_enum = other.messageIds.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__messageIds.addElement(other_element);
        }
        this.messageIds = __this__messageIds;
      }
    }

    public sendMessageReceipt_args deepCopy() {
      return new sendMessageReceipt_args(this);
    }

    public void clear() {
      setSeqIsSet(false);
      this.seq = 0;
      this.consumer = null;
      this.messageIds = null;
    }

    public int getSeq() {
      return this.seq;
    }

    public void setSeq(int seq) {
      this.seq = seq;
      setSeqIsSet(true);
    }

    public void unsetSeq() {
      __isset_vector[__SEQ_ISSET_ID] = false;
    }

    /** Returns true if field seq is set (has been assigned a value) and false otherwise */
    public boolean isSetSeq() {
      return __isset_vector[__SEQ_ISSET_ID];
    }

    public void setSeqIsSet(boolean value) {
      __isset_vector[__SEQ_ISSET_ID] = value;
    }

    public String getConsumer() {
      return this.consumer;
    }

    public void setConsumer(String consumer) {
      this.consumer = consumer;
    }

    public void unsetConsumer() {
      this.consumer = null;
    }

    /** Returns true if field consumer is set (has been assigned a value) and false otherwise */
    public boolean isSetConsumer() {
      return this.consumer != null;
    }

    public void setConsumerIsSet(boolean value) {
      if (!value) {
        this.consumer = null;
      }
    }

    public int getMessageIdsSize() {
      return (this.messageIds == null) ? 0 : this.messageIds.size();
    }

    public Enumeration getMessageIdsEnumeration() {
      return (this.messageIds == null) ? null : this.messageIds.elements();
    }

    public void addToMessageIds(String elem) {
      if (this.messageIds == null) {
        this.messageIds = new Vector();
      }
      this.messageIds.addElement(elem);
    }

    public Vector getMessageIds() {
      return this.messageIds;
    }

    public void setMessageIds(Vector messageIds) {
      this.messageIds = messageIds;
    }

    public void unsetMessageIds() {
      this.messageIds = null;
    }

    /** Returns true if field messageIds is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageIds() {
      return this.messageIds != null;
    }

    public void setMessageIdsIsSet(boolean value) {
      if (!value) {
        this.messageIds = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMessageReceipt_args)
        return this.equals((sendMessageReceipt_args)that);
      return false;
    }

    public boolean equals(sendMessageReceipt_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_seq = true;
      boolean that_present_seq = true;
      if (this_present_seq || that_present_seq) {
        if (!(this_present_seq && that_present_seq))
          return false;
        if (this.seq != that.seq)
          return false;
      }

      boolean this_present_consumer = true && this.isSetConsumer();
      boolean that_present_consumer = true && that.isSetConsumer();
      if (this_present_consumer || that_present_consumer) {
        if (!(this_present_consumer && that_present_consumer))
          return false;
        if (!this.consumer.equals(that.consumer))
          return false;
      }

      boolean this_present_messageIds = true && this.isSetMessageIds();
      boolean that_present_messageIds = true && that.isSetMessageIds();
      if (this_present_messageIds || that_present_messageIds) {
        if (!(this_present_messageIds && that_present_messageIds))
          return false;
        if (!this.messageIds.equals(that.messageIds))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendMessageReceipt_args other = (sendMessageReceipt_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSeq(), other.isSetSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeq()) {
        lastComparison = TBaseHelper.compareTo(this.seq, other.seq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetConsumer(), other.isSetConsumer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConsumer()) {
        lastComparison = TBaseHelper.compareTo(this.consumer, other.consumer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMessageIds(), other.isSetMessageIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageIds()) {
        lastComparison = TBaseHelper.compareTo(this.messageIds, other.messageIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SEQ
            if (field.type == TType.I32) {
              this.seq = iprot.readI32();
              setSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CONSUMER
            if (field.type == TType.STRING) {
              this.consumer = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // MESSAGE_IDS
            if (field.type == TType.LIST) {
              {
                TList _list1139 = iprot.readListBegin();
                this.messageIds = new Vector(_list1139.size);
                for (int _i1140 = 0; _i1140 < _list1139.size; ++_i1140)
                {
                  String _elem1141;
                  _elem1141 = iprot.readString();
                  this.messageIds.addElement(_elem1141);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQ_FIELD_DESC);
      oprot.writeI32(this.seq);
      oprot.writeFieldEnd();
      if (this.consumer != null) {
        oprot.writeFieldBegin(CONSUMER_FIELD_DESC);
        oprot.writeString(this.consumer);
        oprot.writeFieldEnd();
      }
      if (this.messageIds != null) {
        oprot.writeFieldBegin(MESSAGE_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.messageIds.size()));
          for (Enumeration _iter1142_enum = this.messageIds.elements(); _iter1142_enum.hasMoreElements(); )           {
            String _iter1142 = (String)_iter1142_enum.nextElement();
            oprot.writeString(_iter1142);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendMessageReceipt_args(");
      boolean first = true;

      sb.append("seq:");
      sb.append(this.seq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("consumer:");
      if (this.consumer == null) {
        sb.append("null");
      } else {
        sb.append(this.consumer);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("messageIds:");
      if (this.messageIds == null) {
        sb.append("null");
      } else {
        sb.append(this.messageIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendMessageReceipt_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendMessageReceipt_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public sendMessageReceipt_result() {
    }

    public sendMessageReceipt_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMessageReceipt_result(sendMessageReceipt_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public sendMessageReceipt_result deepCopy() {
      return new sendMessageReceipt_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMessageReceipt_result)
        return this.equals((sendMessageReceipt_result)that);
      return false;
    }

    public boolean equals(sendMessageReceipt_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendMessageReceipt_result other = (sendMessageReceipt_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendMessageReceipt_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findContactByMetaTag_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findContactByMetaTag_args");

    private static final TField USERID_FIELD_DESC = new TField("userid", TType.STRING, (short)2);
    private static final TField REFERENCE_FIELD_DESC = new TField("reference", TType.STRING, (short)3);

    private String userid;
    private String reference;

    // isset id assignments

    public findContactByMetaTag_args() {
    }

    public findContactByMetaTag_args(
      String userid,
      String reference)
    {
      this();
      this.userid = userid;
      this.reference = reference;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findContactByMetaTag_args(findContactByMetaTag_args other) {
      if (other.isSetUserid()) {
        this.userid = other.userid;
      }
      if (other.isSetReference()) {
        this.reference = other.reference;
      }
    }

    public findContactByMetaTag_args deepCopy() {
      return new findContactByMetaTag_args(this);
    }

    public void clear() {
      this.userid = null;
      this.reference = null;
    }

    public String getUserid() {
      return this.userid;
    }

    public void setUserid(String userid) {
      this.userid = userid;
    }

    public void unsetUserid() {
      this.userid = null;
    }

    /** Returns true if field userid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserid() {
      return this.userid != null;
    }

    public void setUseridIsSet(boolean value) {
      if (!value) {
        this.userid = null;
      }
    }

    public String getReference() {
      return this.reference;
    }

    public void setReference(String reference) {
      this.reference = reference;
    }

    public void unsetReference() {
      this.reference = null;
    }

    /** Returns true if field reference is set (has been assigned a value) and false otherwise */
    public boolean isSetReference() {
      return this.reference != null;
    }

    public void setReferenceIsSet(boolean value) {
      if (!value) {
        this.reference = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findContactByMetaTag_args)
        return this.equals((findContactByMetaTag_args)that);
      return false;
    }

    public boolean equals(findContactByMetaTag_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userid = true && this.isSetUserid();
      boolean that_present_userid = true && that.isSetUserid();
      if (this_present_userid || that_present_userid) {
        if (!(this_present_userid && that_present_userid))
          return false;
        if (!this.userid.equals(that.userid))
          return false;
      }

      boolean this_present_reference = true && this.isSetReference();
      boolean that_present_reference = true && that.isSetReference();
      if (this_present_reference || that_present_reference) {
        if (!(this_present_reference && that_present_reference))
          return false;
        if (!this.reference.equals(that.reference))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findContactByMetaTag_args other = (findContactByMetaTag_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetUserid(), other.isSetUserid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserid()) {
        lastComparison = TBaseHelper.compareTo(this.userid, other.userid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetReference(), other.isSetReference());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReference()) {
        lastComparison = TBaseHelper.compareTo(this.reference, other.reference);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // USERID
            if (field.type == TType.STRING) {
              this.userid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // REFERENCE
            if (field.type == TType.STRING) {
              this.reference = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.userid != null) {
        oprot.writeFieldBegin(USERID_FIELD_DESC);
        oprot.writeString(this.userid);
        oprot.writeFieldEnd();
      }
      if (this.reference != null) {
        oprot.writeFieldBegin(REFERENCE_FIELD_DESC);
        oprot.writeString(this.reference);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findContactByMetaTag_args(");
      boolean first = true;

      sb.append("userid:");
      if (this.userid == null) {
        sb.append("null");
      } else {
        sb.append(this.userid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reference:");
      if (this.reference == null) {
        sb.append("null");
      } else {
        sb.append(this.reference);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findContactByMetaTag_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findContactByMetaTag_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Contact success;
    private TalkException e;

    // isset id assignments

    public findContactByMetaTag_result() {
    }

    public findContactByMetaTag_result(
      Contact success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findContactByMetaTag_result(findContactByMetaTag_result other) {
      if (other.isSetSuccess()) {
        this.success = new Contact(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public findContactByMetaTag_result deepCopy() {
      return new findContactByMetaTag_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Contact getSuccess() {
      return this.success;
    }

    public void setSuccess(Contact success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findContactByMetaTag_result)
        return this.equals((findContactByMetaTag_result)that);
      return false;
    }

    public boolean equals(findContactByMetaTag_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findContactByMetaTag_result other = (findContactByMetaTag_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Contact();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findContactByMetaTag_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendMessageToMyHome_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendMessageToMyHome_args");

    private static final TField SEQ_FIELD_DESC = new TField("seq", TType.I32, (short)1);
    private static final TField MESSAGE_FIELD_DESC = new TField("message", TType.STRUCT, (short)2);

    private int seq;
    private Message message;

    // isset id assignments
    private static final int __SEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public sendMessageToMyHome_args() {
    }

    public sendMessageToMyHome_args(
      int seq,
      Message message)
    {
      this();
      this.seq = seq;
      setSeqIsSet(true);
      this.message = message;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMessageToMyHome_args(sendMessageToMyHome_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.seq = other.seq;
      if (other.isSetMessage()) {
        this.message = new Message(other.message);
      }
    }

    public sendMessageToMyHome_args deepCopy() {
      return new sendMessageToMyHome_args(this);
    }

    public void clear() {
      setSeqIsSet(false);
      this.seq = 0;
      this.message = null;
    }

    public int getSeq() {
      return this.seq;
    }

    public void setSeq(int seq) {
      this.seq = seq;
      setSeqIsSet(true);
    }

    public void unsetSeq() {
      __isset_vector[__SEQ_ISSET_ID] = false;
    }

    /** Returns true if field seq is set (has been assigned a value) and false otherwise */
    public boolean isSetSeq() {
      return __isset_vector[__SEQ_ISSET_ID];
    }

    public void setSeqIsSet(boolean value) {
      __isset_vector[__SEQ_ISSET_ID] = value;
    }

    public Message getMessage() {
      return this.message;
    }

    public void setMessage(Message message) {
      this.message = message;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /** Returns true if field message is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMessageToMyHome_args)
        return this.equals((sendMessageToMyHome_args)that);
      return false;
    }

    public boolean equals(sendMessageToMyHome_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_seq = true;
      boolean that_present_seq = true;
      if (this_present_seq || that_present_seq) {
        if (!(this_present_seq && that_present_seq))
          return false;
        if (this.seq != that.seq)
          return false;
      }

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendMessageToMyHome_args other = (sendMessageToMyHome_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSeq(), other.isSetSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeq()) {
        lastComparison = TBaseHelper.compareTo(this.seq, other.seq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMessage(), other.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = this.message.compareTo(other.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SEQ
            if (field.type == TType.I32) {
              this.seq = iprot.readI32();
              setSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MESSAGE
            if (field.type == TType.STRUCT) {
              this.message = new Message();
              this.message.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQ_FIELD_DESC);
      oprot.writeI32(this.seq);
      oprot.writeFieldEnd();
      if (this.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        this.message.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendMessageToMyHome_args(");
      boolean first = true;

      sb.append("seq:");
      sb.append(this.seq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendMessageToMyHome_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendMessageToMyHome_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Message success;
    private TalkException e;

    // isset id assignments

    public sendMessageToMyHome_result() {
    }

    public sendMessageToMyHome_result(
      Message success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMessageToMyHome_result(sendMessageToMyHome_result other) {
      if (other.isSetSuccess()) {
        this.success = new Message(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public sendMessageToMyHome_result deepCopy() {
      return new sendMessageToMyHome_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Message getSuccess() {
      return this.success;
    }

    public void setSuccess(Message success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMessageToMyHome_result)
        return this.equals((sendMessageToMyHome_result)that);
      return false;
    }

    public boolean equals(sendMessageToMyHome_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendMessageToMyHome_result other = (sendMessageToMyHome_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Message();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendMessageToMyHome_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class setBuddyLocation_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("setBuddyLocation_args");

    private static final TField MID_FIELD_DESC = new TField("mid", TType.STRING, (short)2);
    private static final TField INDEX_FIELD_DESC = new TField("index", TType.I32, (short)3);
    private static final TField LOCATION_FIELD_DESC = new TField("location", TType.STRUCT, (short)4);

    private String mid;
    private int index;
    private Geolocation location;

    // isset id assignments
    private static final int __INDEX_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public setBuddyLocation_args() {
    }

    public setBuddyLocation_args(
      String mid,
      int index,
      Geolocation location)
    {
      this();
      this.mid = mid;
      this.index = index;
      setIndexIsSet(true);
      this.location = location;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setBuddyLocation_args(setBuddyLocation_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetMid()) {
        this.mid = other.mid;
      }
      this.index = other.index;
      if (other.isSetLocation()) {
        this.location = new Geolocation(other.location);
      }
    }

    public setBuddyLocation_args deepCopy() {
      return new setBuddyLocation_args(this);
    }

    public void clear() {
      this.mid = null;
      setIndexIsSet(false);
      this.index = 0;
      this.location = null;
    }

    public String getMid() {
      return this.mid;
    }

    public void setMid(String mid) {
      this.mid = mid;
    }

    public void unsetMid() {
      this.mid = null;
    }

    /** Returns true if field mid is set (has been assigned a value) and false otherwise */
    public boolean isSetMid() {
      return this.mid != null;
    }

    public void setMidIsSet(boolean value) {
      if (!value) {
        this.mid = null;
      }
    }

    public int getIndex() {
      return this.index;
    }

    public void setIndex(int index) {
      this.index = index;
      setIndexIsSet(true);
    }

    public void unsetIndex() {
      __isset_vector[__INDEX_ISSET_ID] = false;
    }

    /** Returns true if field index is set (has been assigned a value) and false otherwise */
    public boolean isSetIndex() {
      return __isset_vector[__INDEX_ISSET_ID];
    }

    public void setIndexIsSet(boolean value) {
      __isset_vector[__INDEX_ISSET_ID] = value;
    }

    public Geolocation getLocation() {
      return this.location;
    }

    public void setLocation(Geolocation location) {
      this.location = location;
    }

    public void unsetLocation() {
      this.location = null;
    }

    /** Returns true if field location is set (has been assigned a value) and false otherwise */
    public boolean isSetLocation() {
      return this.location != null;
    }

    public void setLocationIsSet(boolean value) {
      if (!value) {
        this.location = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setBuddyLocation_args)
        return this.equals((setBuddyLocation_args)that);
      return false;
    }

    public boolean equals(setBuddyLocation_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mid = true && this.isSetMid();
      boolean that_present_mid = true && that.isSetMid();
      if (this_present_mid || that_present_mid) {
        if (!(this_present_mid && that_present_mid))
          return false;
        if (!this.mid.equals(that.mid))
          return false;
      }

      boolean this_present_index = true;
      boolean that_present_index = true;
      if (this_present_index || that_present_index) {
        if (!(this_present_index && that_present_index))
          return false;
        if (this.index != that.index)
          return false;
      }

      boolean this_present_location = true && this.isSetLocation();
      boolean that_present_location = true && that.isSetLocation();
      if (this_present_location || that_present_location) {
        if (!(this_present_location && that_present_location))
          return false;
        if (!this.location.equals(that.location))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      setBuddyLocation_args other = (setBuddyLocation_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetMid(), other.isSetMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMid()) {
        lastComparison = TBaseHelper.compareTo(this.mid, other.mid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetIndex(), other.isSetIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndex()) {
        lastComparison = TBaseHelper.compareTo(this.index, other.index);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLocation(), other.isSetLocation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocation()) {
        lastComparison = this.location.compareTo(other.location);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // MID
            if (field.type == TType.STRING) {
              this.mid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // INDEX
            if (field.type == TType.I32) {
              this.index = iprot.readI32();
              setIndexIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // LOCATION
            if (field.type == TType.STRUCT) {
              this.location = new Geolocation();
              this.location.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.mid != null) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeString(this.mid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(INDEX_FIELD_DESC);
      oprot.writeI32(this.index);
      oprot.writeFieldEnd();
      if (this.location != null) {
        oprot.writeFieldBegin(LOCATION_FIELD_DESC);
        this.location.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("setBuddyLocation_args(");
      boolean first = true;

      sb.append("mid:");
      if (this.mid == null) {
        sb.append("null");
      } else {
        sb.append(this.mid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("index:");
      sb.append(this.index);
      first = false;
      if (!first) sb.append(", ");
      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class setBuddyLocation_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("setBuddyLocation_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public setBuddyLocation_result() {
    }

    public setBuddyLocation_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setBuddyLocation_result(setBuddyLocation_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public setBuddyLocation_result deepCopy() {
      return new setBuddyLocation_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setBuddyLocation_result)
        return this.equals((setBuddyLocation_result)that);
      return false;
    }

    public boolean equals(setBuddyLocation_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      setBuddyLocation_result other = (setBuddyLocation_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("setBuddyLocation_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class setIdentityCredential_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("setIdentityCredential_args");

    private static final TField IDENTIFIER_FIELD_DESC = new TField("identifier", TType.STRING, (short)2);
    private static final TField VERIFIER_FIELD_DESC = new TField("verifier", TType.STRING, (short)3);
    private static final TField PROVIDER_FIELD_DESC = new TField("provider", TType.I32, (short)4);

    private String identifier;
    private String verifier;
    private IdentityProvider provider;

    // isset id assignments

    public setIdentityCredential_args() {
    }

    public setIdentityCredential_args(
      String identifier,
      String verifier,
      IdentityProvider provider)
    {
      this();
      this.identifier = identifier;
      this.verifier = verifier;
      this.provider = provider;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setIdentityCredential_args(setIdentityCredential_args other) {
      if (other.isSetIdentifier()) {
        this.identifier = other.identifier;
      }
      if (other.isSetVerifier()) {
        this.verifier = other.verifier;
      }
      if (other.isSetProvider()) {
        this.provider = other.provider;
      }
    }

    public setIdentityCredential_args deepCopy() {
      return new setIdentityCredential_args(this);
    }

    public void clear() {
      this.identifier = null;
      this.verifier = null;
      this.provider = null;
    }

    public String getIdentifier() {
      return this.identifier;
    }

    public void setIdentifier(String identifier) {
      this.identifier = identifier;
    }

    public void unsetIdentifier() {
      this.identifier = null;
    }

    /** Returns true if field identifier is set (has been assigned a value) and false otherwise */
    public boolean isSetIdentifier() {
      return this.identifier != null;
    }

    public void setIdentifierIsSet(boolean value) {
      if (!value) {
        this.identifier = null;
      }
    }

    public String getVerifier() {
      return this.verifier;
    }

    public void setVerifier(String verifier) {
      this.verifier = verifier;
    }

    public void unsetVerifier() {
      this.verifier = null;
    }

    /** Returns true if field verifier is set (has been assigned a value) and false otherwise */
    public boolean isSetVerifier() {
      return this.verifier != null;
    }

    public void setVerifierIsSet(boolean value) {
      if (!value) {
        this.verifier = null;
      }
    }

    /**
     * 
     * @see IdentityProvider
     */
    public IdentityProvider getProvider() {
      return this.provider;
    }

    /**
     * 
     * @see IdentityProvider
     */
    public void setProvider(IdentityProvider provider) {
      this.provider = provider;
    }

    public void unsetProvider() {
      this.provider = null;
    }

    /** Returns true if field provider is set (has been assigned a value) and false otherwise */
    public boolean isSetProvider() {
      return this.provider != null;
    }

    public void setProviderIsSet(boolean value) {
      if (!value) {
        this.provider = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setIdentityCredential_args)
        return this.equals((setIdentityCredential_args)that);
      return false;
    }

    public boolean equals(setIdentityCredential_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_identifier = true && this.isSetIdentifier();
      boolean that_present_identifier = true && that.isSetIdentifier();
      if (this_present_identifier || that_present_identifier) {
        if (!(this_present_identifier && that_present_identifier))
          return false;
        if (!this.identifier.equals(that.identifier))
          return false;
      }

      boolean this_present_verifier = true && this.isSetVerifier();
      boolean that_present_verifier = true && that.isSetVerifier();
      if (this_present_verifier || that_present_verifier) {
        if (!(this_present_verifier && that_present_verifier))
          return false;
        if (!this.verifier.equals(that.verifier))
          return false;
      }

      boolean this_present_provider = true && this.isSetProvider();
      boolean that_present_provider = true && that.isSetProvider();
      if (this_present_provider || that_present_provider) {
        if (!(this_present_provider && that_present_provider))
          return false;
        if (!this.provider.equals(that.provider))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      setIdentityCredential_args other = (setIdentityCredential_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetIdentifier(), other.isSetIdentifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdentifier()) {
        lastComparison = TBaseHelper.compareTo(this.identifier, other.identifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetVerifier(), other.isSetVerifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVerifier()) {
        lastComparison = TBaseHelper.compareTo(this.verifier, other.verifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetProvider(), other.isSetProvider());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProvider()) {
        lastComparison = TBaseHelper.compareTo(this.provider, other.provider);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // IDENTIFIER
            if (field.type == TType.STRING) {
              this.identifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // VERIFIER
            if (field.type == TType.STRING) {
              this.verifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // PROVIDER
            if (field.type == TType.I32) {
              this.provider = IdentityProvider.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.identifier != null) {
        oprot.writeFieldBegin(IDENTIFIER_FIELD_DESC);
        oprot.writeString(this.identifier);
        oprot.writeFieldEnd();
      }
      if (this.verifier != null) {
        oprot.writeFieldBegin(VERIFIER_FIELD_DESC);
        oprot.writeString(this.verifier);
        oprot.writeFieldEnd();
      }
      if (this.provider != null) {
        oprot.writeFieldBegin(PROVIDER_FIELD_DESC);
        oprot.writeI32(this.provider.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("setIdentityCredential_args(");
      boolean first = true;

      sb.append("identifier:");
      if (this.identifier == null) {
        sb.append("null");
      } else {
        sb.append(this.identifier);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("verifier:");
      if (this.verifier == null) {
        sb.append("null");
      } else {
        sb.append(this.verifier);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("provider:");
      if (this.provider == null) {
        sb.append("null");
      } else {
        sb.append(this.provider);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class setIdentityCredential_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("setIdentityCredential_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public setIdentityCredential_result() {
    }

    public setIdentityCredential_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setIdentityCredential_result(setIdentityCredential_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public setIdentityCredential_result deepCopy() {
      return new setIdentityCredential_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setIdentityCredential_result)
        return this.equals((setIdentityCredential_result)that);
      return false;
    }

    public boolean equals(setIdentityCredential_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      setIdentityCredential_result other = (setIdentityCredential_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("setIdentityCredential_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class setNotificationsEnabled_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("setNotificationsEnabled_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField TYPE_FIELD_DESC = new TField("type", TType.I32, (short)2);
    private static final TField TARGET_FIELD_DESC = new TField("target", TType.STRING, (short)3);
    private static final TField ENABLEMENT_FIELD_DESC = new TField("enablement", TType.BOOL, (short)4);

    private int reqSeq;
    private MIDType type;
    private String target;
    private boolean enablement;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private static final int __ENABLEMENT_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public setNotificationsEnabled_args() {
    }

    public setNotificationsEnabled_args(
      int reqSeq,
      MIDType type,
      String target,
      boolean enablement)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.type = type;
      this.target = target;
      this.enablement = enablement;
      setEnablementIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setNotificationsEnabled_args(setNotificationsEnabled_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetType()) {
        this.type = other.type;
      }
      if (other.isSetTarget()) {
        this.target = other.target;
      }
      this.enablement = other.enablement;
    }

    public setNotificationsEnabled_args deepCopy() {
      return new setNotificationsEnabled_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.type = null;
      this.target = null;
      setEnablementIsSet(false);
      this.enablement = false;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    /**
     * 
     * @see MIDType
     */
    public MIDType getType() {
      return this.type;
    }

    /**
     * 
     * @see MIDType
     */
    public void setType(MIDType type) {
      this.type = type;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public String getTarget() {
      return this.target;
    }

    public void setTarget(String target) {
      this.target = target;
    }

    public void unsetTarget() {
      this.target = null;
    }

    /** Returns true if field target is set (has been assigned a value) and false otherwise */
    public boolean isSetTarget() {
      return this.target != null;
    }

    public void setTargetIsSet(boolean value) {
      if (!value) {
        this.target = null;
      }
    }

    public boolean isEnablement() {
      return this.enablement;
    }

    public void setEnablement(boolean enablement) {
      this.enablement = enablement;
      setEnablementIsSet(true);
    }

    public void unsetEnablement() {
      __isset_vector[__ENABLEMENT_ISSET_ID] = false;
    }

    /** Returns true if field enablement is set (has been assigned a value) and false otherwise */
    public boolean isSetEnablement() {
      return __isset_vector[__ENABLEMENT_ISSET_ID];
    }

    public void setEnablementIsSet(boolean value) {
      __isset_vector[__ENABLEMENT_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setNotificationsEnabled_args)
        return this.equals((setNotificationsEnabled_args)that);
      return false;
    }

    public boolean equals(setNotificationsEnabled_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      boolean this_present_target = true && this.isSetTarget();
      boolean that_present_target = true && that.isSetTarget();
      if (this_present_target || that_present_target) {
        if (!(this_present_target && that_present_target))
          return false;
        if (!this.target.equals(that.target))
          return false;
      }

      boolean this_present_enablement = true;
      boolean that_present_enablement = true;
      if (this_present_enablement || that_present_enablement) {
        if (!(this_present_enablement && that_present_enablement))
          return false;
        if (this.enablement != that.enablement)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      setNotificationsEnabled_args other = (setNotificationsEnabled_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetType(), other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetTarget(), other.isSetTarget());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTarget()) {
        lastComparison = TBaseHelper.compareTo(this.target, other.target);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetEnablement(), other.isSetEnablement());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnablement()) {
        lastComparison = TBaseHelper.compareTo(this.enablement, other.enablement);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TYPE
            if (field.type == TType.I32) {
              this.type = MIDType.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // TARGET
            if (field.type == TType.STRING) {
              this.target = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ENABLEMENT
            if (field.type == TType.BOOL) {
              this.enablement = iprot.readBool();
              setEnablementIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(this.type.getValue());
        oprot.writeFieldEnd();
      }
      if (this.target != null) {
        oprot.writeFieldBegin(TARGET_FIELD_DESC);
        oprot.writeString(this.target);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ENABLEMENT_FIELD_DESC);
      oprot.writeBool(this.enablement);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("setNotificationsEnabled_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("target:");
      if (this.target == null) {
        sb.append("null");
      } else {
        sb.append(this.target);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("enablement:");
      sb.append(this.enablement);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class setNotificationsEnabled_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("setNotificationsEnabled_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public setNotificationsEnabled_result() {
    }

    public setNotificationsEnabled_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setNotificationsEnabled_result(setNotificationsEnabled_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public setNotificationsEnabled_result deepCopy() {
      return new setNotificationsEnabled_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setNotificationsEnabled_result)
        return this.equals((setNotificationsEnabled_result)that);
      return false;
    }

    public boolean equals(setNotificationsEnabled_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      setNotificationsEnabled_result other = (setNotificationsEnabled_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("setNotificationsEnabled_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class startUpdateVerification_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("startUpdateVerification_args");

    private static final TField REGION_FIELD_DESC = new TField("region", TType.STRING, (short)2);
    private static final TField CARRIER_FIELD_DESC = new TField("carrier", TType.I32, (short)3);
    private static final TField PHONE_FIELD_DESC = new TField("phone", TType.STRING, (short)4);
    private static final TField UDID_HASH_FIELD_DESC = new TField("udidHash", TType.STRING, (short)5);
    private static final TField DEVICE_INFO_FIELD_DESC = new TField("deviceInfo", TType.STRUCT, (short)6);
    private static final TField NETWORK_CODE_FIELD_DESC = new TField("networkCode", TType.STRING, (short)7);
    private static final TField LOCALE_FIELD_DESC = new TField("locale", TType.STRING, (short)8);

    private String region;
    private CarrierCode carrier;
    private String phone;
    private String udidHash;
    private DeviceInfo deviceInfo;
    private String networkCode;
    private String locale;

    // isset id assignments

    public startUpdateVerification_args() {
    }

    public startUpdateVerification_args(
      String region,
      CarrierCode carrier,
      String phone,
      String udidHash,
      DeviceInfo deviceInfo,
      String networkCode,
      String locale)
    {
      this();
      this.region = region;
      this.carrier = carrier;
      this.phone = phone;
      this.udidHash = udidHash;
      this.deviceInfo = deviceInfo;
      this.networkCode = networkCode;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startUpdateVerification_args(startUpdateVerification_args other) {
      if (other.isSetRegion()) {
        this.region = other.region;
      }
      if (other.isSetCarrier()) {
        this.carrier = other.carrier;
      }
      if (other.isSetPhone()) {
        this.phone = other.phone;
      }
      if (other.isSetUdidHash()) {
        this.udidHash = other.udidHash;
      }
      if (other.isSetDeviceInfo()) {
        this.deviceInfo = new DeviceInfo(other.deviceInfo);
      }
      if (other.isSetNetworkCode()) {
        this.networkCode = other.networkCode;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public startUpdateVerification_args deepCopy() {
      return new startUpdateVerification_args(this);
    }

    public void clear() {
      this.region = null;
      this.carrier = null;
      this.phone = null;
      this.udidHash = null;
      this.deviceInfo = null;
      this.networkCode = null;
      this.locale = null;
    }

    public String getRegion() {
      return this.region;
    }

    public void setRegion(String region) {
      this.region = region;
    }

    public void unsetRegion() {
      this.region = null;
    }

    /** Returns true if field region is set (has been assigned a value) and false otherwise */
    public boolean isSetRegion() {
      return this.region != null;
    }

    public void setRegionIsSet(boolean value) {
      if (!value) {
        this.region = null;
      }
    }

    /**
     * 
     * @see CarrierCode
     */
    public CarrierCode getCarrier() {
      return this.carrier;
    }

    /**
     * 
     * @see CarrierCode
     */
    public void setCarrier(CarrierCode carrier) {
      this.carrier = carrier;
    }

    public void unsetCarrier() {
      this.carrier = null;
    }

    /** Returns true if field carrier is set (has been assigned a value) and false otherwise */
    public boolean isSetCarrier() {
      return this.carrier != null;
    }

    public void setCarrierIsSet(boolean value) {
      if (!value) {
        this.carrier = null;
      }
    }

    public String getPhone() {
      return this.phone;
    }

    public void setPhone(String phone) {
      this.phone = phone;
    }

    public void unsetPhone() {
      this.phone = null;
    }

    /** Returns true if field phone is set (has been assigned a value) and false otherwise */
    public boolean isSetPhone() {
      return this.phone != null;
    }

    public void setPhoneIsSet(boolean value) {
      if (!value) {
        this.phone = null;
      }
    }

    public String getUdidHash() {
      return this.udidHash;
    }

    public void setUdidHash(String udidHash) {
      this.udidHash = udidHash;
    }

    public void unsetUdidHash() {
      this.udidHash = null;
    }

    /** Returns true if field udidHash is set (has been assigned a value) and false otherwise */
    public boolean isSetUdidHash() {
      return this.udidHash != null;
    }

    public void setUdidHashIsSet(boolean value) {
      if (!value) {
        this.udidHash = null;
      }
    }

    public DeviceInfo getDeviceInfo() {
      return this.deviceInfo;
    }

    public void setDeviceInfo(DeviceInfo deviceInfo) {
      this.deviceInfo = deviceInfo;
    }

    public void unsetDeviceInfo() {
      this.deviceInfo = null;
    }

    /** Returns true if field deviceInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceInfo() {
      return this.deviceInfo != null;
    }

    public void setDeviceInfoIsSet(boolean value) {
      if (!value) {
        this.deviceInfo = null;
      }
    }

    public String getNetworkCode() {
      return this.networkCode;
    }

    public void setNetworkCode(String networkCode) {
      this.networkCode = networkCode;
    }

    public void unsetNetworkCode() {
      this.networkCode = null;
    }

    /** Returns true if field networkCode is set (has been assigned a value) and false otherwise */
    public boolean isSetNetworkCode() {
      return this.networkCode != null;
    }

    public void setNetworkCodeIsSet(boolean value) {
      if (!value) {
        this.networkCode = null;
      }
    }

    public String getLocale() {
      return this.locale;
    }

    public void setLocale(String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startUpdateVerification_args)
        return this.equals((startUpdateVerification_args)that);
      return false;
    }

    public boolean equals(startUpdateVerification_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_region = true && this.isSetRegion();
      boolean that_present_region = true && that.isSetRegion();
      if (this_present_region || that_present_region) {
        if (!(this_present_region && that_present_region))
          return false;
        if (!this.region.equals(that.region))
          return false;
      }

      boolean this_present_carrier = true && this.isSetCarrier();
      boolean that_present_carrier = true && that.isSetCarrier();
      if (this_present_carrier || that_present_carrier) {
        if (!(this_present_carrier && that_present_carrier))
          return false;
        if (!this.carrier.equals(that.carrier))
          return false;
      }

      boolean this_present_phone = true && this.isSetPhone();
      boolean that_present_phone = true && that.isSetPhone();
      if (this_present_phone || that_present_phone) {
        if (!(this_present_phone && that_present_phone))
          return false;
        if (!this.phone.equals(that.phone))
          return false;
      }

      boolean this_present_udidHash = true && this.isSetUdidHash();
      boolean that_present_udidHash = true && that.isSetUdidHash();
      if (this_present_udidHash || that_present_udidHash) {
        if (!(this_present_udidHash && that_present_udidHash))
          return false;
        if (!this.udidHash.equals(that.udidHash))
          return false;
      }

      boolean this_present_deviceInfo = true && this.isSetDeviceInfo();
      boolean that_present_deviceInfo = true && that.isSetDeviceInfo();
      if (this_present_deviceInfo || that_present_deviceInfo) {
        if (!(this_present_deviceInfo && that_present_deviceInfo))
          return false;
        if (!this.deviceInfo.equals(that.deviceInfo))
          return false;
      }

      boolean this_present_networkCode = true && this.isSetNetworkCode();
      boolean that_present_networkCode = true && that.isSetNetworkCode();
      if (this_present_networkCode || that_present_networkCode) {
        if (!(this_present_networkCode && that_present_networkCode))
          return false;
        if (!this.networkCode.equals(that.networkCode))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      startUpdateVerification_args other = (startUpdateVerification_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRegion(), other.isSetRegion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegion()) {
        lastComparison = TBaseHelper.compareTo(this.region, other.region);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCarrier(), other.isSetCarrier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCarrier()) {
        lastComparison = TBaseHelper.compareTo(this.carrier, other.carrier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPhone(), other.isSetPhone());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPhone()) {
        lastComparison = TBaseHelper.compareTo(this.phone, other.phone);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUdidHash(), other.isSetUdidHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUdidHash()) {
        lastComparison = TBaseHelper.compareTo(this.udidHash, other.udidHash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetDeviceInfo(), other.isSetDeviceInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceInfo()) {
        lastComparison = this.deviceInfo.compareTo(other.deviceInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNetworkCode(), other.isSetNetworkCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNetworkCode()) {
        lastComparison = TBaseHelper.compareTo(this.networkCode, other.networkCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLocale(), other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // REGION
            if (field.type == TType.STRING) {
              this.region = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // CARRIER
            if (field.type == TType.I32) {
              this.carrier = CarrierCode.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // PHONE
            if (field.type == TType.STRING) {
              this.phone = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // UDID_HASH
            if (field.type == TType.STRING) {
              this.udidHash = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // DEVICE_INFO
            if (field.type == TType.STRUCT) {
              this.deviceInfo = new DeviceInfo();
              this.deviceInfo.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // NETWORK_CODE
            if (field.type == TType.STRING) {
              this.networkCode = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 8: // LOCALE
            if (field.type == TType.STRING) {
              this.locale = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.region != null) {
        oprot.writeFieldBegin(REGION_FIELD_DESC);
        oprot.writeString(this.region);
        oprot.writeFieldEnd();
      }
      if (this.carrier != null) {
        oprot.writeFieldBegin(CARRIER_FIELD_DESC);
        oprot.writeI32(this.carrier.getValue());
        oprot.writeFieldEnd();
      }
      if (this.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(this.phone);
        oprot.writeFieldEnd();
      }
      if (this.udidHash != null) {
        oprot.writeFieldBegin(UDID_HASH_FIELD_DESC);
        oprot.writeString(this.udidHash);
        oprot.writeFieldEnd();
      }
      if (this.deviceInfo != null) {
        oprot.writeFieldBegin(DEVICE_INFO_FIELD_DESC);
        this.deviceInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.networkCode != null) {
        oprot.writeFieldBegin(NETWORK_CODE_FIELD_DESC);
        oprot.writeString(this.networkCode);
        oprot.writeFieldEnd();
      }
      if (this.locale != null) {
        oprot.writeFieldBegin(LOCALE_FIELD_DESC);
        oprot.writeString(this.locale);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("startUpdateVerification_args(");
      boolean first = true;

      sb.append("region:");
      if (this.region == null) {
        sb.append("null");
      } else {
        sb.append(this.region);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("carrier:");
      if (this.carrier == null) {
        sb.append("null");
      } else {
        sb.append(this.carrier);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("phone:");
      if (this.phone == null) {
        sb.append("null");
      } else {
        sb.append(this.phone);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("udidHash:");
      if (this.udidHash == null) {
        sb.append("null");
      } else {
        sb.append(this.udidHash);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deviceInfo:");
      if (this.deviceInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("networkCode:");
      if (this.networkCode == null) {
        sb.append("null");
      } else {
        sb.append(this.networkCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class startUpdateVerification_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("startUpdateVerification_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private VerificationSessionData success;
    private TalkException e;

    // isset id assignments

    public startUpdateVerification_result() {
    }

    public startUpdateVerification_result(
      VerificationSessionData success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startUpdateVerification_result(startUpdateVerification_result other) {
      if (other.isSetSuccess()) {
        this.success = new VerificationSessionData(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public startUpdateVerification_result deepCopy() {
      return new startUpdateVerification_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public VerificationSessionData getSuccess() {
      return this.success;
    }

    public void setSuccess(VerificationSessionData success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startUpdateVerification_result)
        return this.equals((startUpdateVerification_result)that);
      return false;
    }

    public boolean equals(startUpdateVerification_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      startUpdateVerification_result other = (startUpdateVerification_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new VerificationSessionData();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("startUpdateVerification_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class startVerification_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("startVerification_args");

    private static final TField REGION_FIELD_DESC = new TField("region", TType.STRING, (short)2);
    private static final TField CARRIER_FIELD_DESC = new TField("carrier", TType.I32, (short)3);
    private static final TField PHONE_FIELD_DESC = new TField("phone", TType.STRING, (short)4);
    private static final TField UDID_HASH_FIELD_DESC = new TField("udidHash", TType.STRING, (short)5);
    private static final TField DEVICE_INFO_FIELD_DESC = new TField("deviceInfo", TType.STRUCT, (short)6);
    private static final TField NETWORK_CODE_FIELD_DESC = new TField("networkCode", TType.STRING, (short)7);
    private static final TField MID_FIELD_DESC = new TField("mid", TType.STRING, (short)8);
    private static final TField LOCALE_FIELD_DESC = new TField("locale", TType.STRING, (short)9);
    private static final TField SIM_INFO_FIELD_DESC = new TField("simInfo", TType.STRUCT, (short)10);
    private static final TField OLD_UDID_HASH_FIELD_DESC = new TField("oldUdidHash", TType.STRING, (short)11);

    private String region;
    private CarrierCode carrier;
    private String phone;
    private String udidHash;
    private DeviceInfo deviceInfo;
    private String networkCode;
    private String mid;
    private String locale;
    private SIMInfo simInfo;
    private String oldUdidHash;

    // isset id assignments

    public startVerification_args() {
    }

    public startVerification_args(
      String region,
      CarrierCode carrier,
      String phone,
      String udidHash,
      DeviceInfo deviceInfo,
      String networkCode,
      String mid,
      String locale,
      SIMInfo simInfo,
      String oldUdidHash)
    {
      this();
      this.region = region;
      this.carrier = carrier;
      this.phone = phone;
      this.udidHash = udidHash;
      this.deviceInfo = deviceInfo;
      this.networkCode = networkCode;
      this.mid = mid;
      this.locale = locale;
      this.simInfo = simInfo;
      this.oldUdidHash = oldUdidHash;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startVerification_args(startVerification_args other) {
      if (other.isSetRegion()) {
        this.region = other.region;
      }
      if (other.isSetCarrier()) {
        this.carrier = other.carrier;
      }
      if (other.isSetPhone()) {
        this.phone = other.phone;
      }
      if (other.isSetUdidHash()) {
        this.udidHash = other.udidHash;
      }
      if (other.isSetDeviceInfo()) {
        this.deviceInfo = new DeviceInfo(other.deviceInfo);
      }
      if (other.isSetNetworkCode()) {
        this.networkCode = other.networkCode;
      }
      if (other.isSetMid()) {
        this.mid = other.mid;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
      if (other.isSetSimInfo()) {
        this.simInfo = new SIMInfo(other.simInfo);
      }
      if (other.isSetOldUdidHash()) {
        this.oldUdidHash = other.oldUdidHash;
      }
    }

    public startVerification_args deepCopy() {
      return new startVerification_args(this);
    }

    public void clear() {
      this.region = null;
      this.carrier = null;
      this.phone = null;
      this.udidHash = null;
      this.deviceInfo = null;
      this.networkCode = null;
      this.mid = null;
      this.locale = null;
      this.simInfo = null;
      this.oldUdidHash = null;
    }

    public String getRegion() {
      return this.region;
    }

    public void setRegion(String region) {
      this.region = region;
    }

    public void unsetRegion() {
      this.region = null;
    }

    /** Returns true if field region is set (has been assigned a value) and false otherwise */
    public boolean isSetRegion() {
      return this.region != null;
    }

    public void setRegionIsSet(boolean value) {
      if (!value) {
        this.region = null;
      }
    }

    /**
     * 
     * @see CarrierCode
     */
    public CarrierCode getCarrier() {
      return this.carrier;
    }

    /**
     * 
     * @see CarrierCode
     */
    public void setCarrier(CarrierCode carrier) {
      this.carrier = carrier;
    }

    public void unsetCarrier() {
      this.carrier = null;
    }

    /** Returns true if field carrier is set (has been assigned a value) and false otherwise */
    public boolean isSetCarrier() {
      return this.carrier != null;
    }

    public void setCarrierIsSet(boolean value) {
      if (!value) {
        this.carrier = null;
      }
    }

    public String getPhone() {
      return this.phone;
    }

    public void setPhone(String phone) {
      this.phone = phone;
    }

    public void unsetPhone() {
      this.phone = null;
    }

    /** Returns true if field phone is set (has been assigned a value) and false otherwise */
    public boolean isSetPhone() {
      return this.phone != null;
    }

    public void setPhoneIsSet(boolean value) {
      if (!value) {
        this.phone = null;
      }
    }

    public String getUdidHash() {
      return this.udidHash;
    }

    public void setUdidHash(String udidHash) {
      this.udidHash = udidHash;
    }

    public void unsetUdidHash() {
      this.udidHash = null;
    }

    /** Returns true if field udidHash is set (has been assigned a value) and false otherwise */
    public boolean isSetUdidHash() {
      return this.udidHash != null;
    }

    public void setUdidHashIsSet(boolean value) {
      if (!value) {
        this.udidHash = null;
      }
    }

    public DeviceInfo getDeviceInfo() {
      return this.deviceInfo;
    }

    public void setDeviceInfo(DeviceInfo deviceInfo) {
      this.deviceInfo = deviceInfo;
    }

    public void unsetDeviceInfo() {
      this.deviceInfo = null;
    }

    /** Returns true if field deviceInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceInfo() {
      return this.deviceInfo != null;
    }

    public void setDeviceInfoIsSet(boolean value) {
      if (!value) {
        this.deviceInfo = null;
      }
    }

    public String getNetworkCode() {
      return this.networkCode;
    }

    public void setNetworkCode(String networkCode) {
      this.networkCode = networkCode;
    }

    public void unsetNetworkCode() {
      this.networkCode = null;
    }

    /** Returns true if field networkCode is set (has been assigned a value) and false otherwise */
    public boolean isSetNetworkCode() {
      return this.networkCode != null;
    }

    public void setNetworkCodeIsSet(boolean value) {
      if (!value) {
        this.networkCode = null;
      }
    }

    public String getMid() {
      return this.mid;
    }

    public void setMid(String mid) {
      this.mid = mid;
    }

    public void unsetMid() {
      this.mid = null;
    }

    /** Returns true if field mid is set (has been assigned a value) and false otherwise */
    public boolean isSetMid() {
      return this.mid != null;
    }

    public void setMidIsSet(boolean value) {
      if (!value) {
        this.mid = null;
      }
    }

    public String getLocale() {
      return this.locale;
    }

    public void setLocale(String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public SIMInfo getSimInfo() {
      return this.simInfo;
    }

    public void setSimInfo(SIMInfo simInfo) {
      this.simInfo = simInfo;
    }

    public void unsetSimInfo() {
      this.simInfo = null;
    }

    /** Returns true if field simInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetSimInfo() {
      return this.simInfo != null;
    }

    public void setSimInfoIsSet(boolean value) {
      if (!value) {
        this.simInfo = null;
      }
    }

    public String getOldUdidHash() {
      return this.oldUdidHash;
    }

    public void setOldUdidHash(String oldUdidHash) {
      this.oldUdidHash = oldUdidHash;
    }

    public void unsetOldUdidHash() {
      this.oldUdidHash = null;
    }

    /** Returns true if field oldUdidHash is set (has been assigned a value) and false otherwise */
    public boolean isSetOldUdidHash() {
      return this.oldUdidHash != null;
    }

    public void setOldUdidHashIsSet(boolean value) {
      if (!value) {
        this.oldUdidHash = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startVerification_args)
        return this.equals((startVerification_args)that);
      return false;
    }

    public boolean equals(startVerification_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_region = true && this.isSetRegion();
      boolean that_present_region = true && that.isSetRegion();
      if (this_present_region || that_present_region) {
        if (!(this_present_region && that_present_region))
          return false;
        if (!this.region.equals(that.region))
          return false;
      }

      boolean this_present_carrier = true && this.isSetCarrier();
      boolean that_present_carrier = true && that.isSetCarrier();
      if (this_present_carrier || that_present_carrier) {
        if (!(this_present_carrier && that_present_carrier))
          return false;
        if (!this.carrier.equals(that.carrier))
          return false;
      }

      boolean this_present_phone = true && this.isSetPhone();
      boolean that_present_phone = true && that.isSetPhone();
      if (this_present_phone || that_present_phone) {
        if (!(this_present_phone && that_present_phone))
          return false;
        if (!this.phone.equals(that.phone))
          return false;
      }

      boolean this_present_udidHash = true && this.isSetUdidHash();
      boolean that_present_udidHash = true && that.isSetUdidHash();
      if (this_present_udidHash || that_present_udidHash) {
        if (!(this_present_udidHash && that_present_udidHash))
          return false;
        if (!this.udidHash.equals(that.udidHash))
          return false;
      }

      boolean this_present_deviceInfo = true && this.isSetDeviceInfo();
      boolean that_present_deviceInfo = true && that.isSetDeviceInfo();
      if (this_present_deviceInfo || that_present_deviceInfo) {
        if (!(this_present_deviceInfo && that_present_deviceInfo))
          return false;
        if (!this.deviceInfo.equals(that.deviceInfo))
          return false;
      }

      boolean this_present_networkCode = true && this.isSetNetworkCode();
      boolean that_present_networkCode = true && that.isSetNetworkCode();
      if (this_present_networkCode || that_present_networkCode) {
        if (!(this_present_networkCode && that_present_networkCode))
          return false;
        if (!this.networkCode.equals(that.networkCode))
          return false;
      }

      boolean this_present_mid = true && this.isSetMid();
      boolean that_present_mid = true && that.isSetMid();
      if (this_present_mid || that_present_mid) {
        if (!(this_present_mid && that_present_mid))
          return false;
        if (!this.mid.equals(that.mid))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      boolean this_present_simInfo = true && this.isSetSimInfo();
      boolean that_present_simInfo = true && that.isSetSimInfo();
      if (this_present_simInfo || that_present_simInfo) {
        if (!(this_present_simInfo && that_present_simInfo))
          return false;
        if (!this.simInfo.equals(that.simInfo))
          return false;
      }

      boolean this_present_oldUdidHash = true && this.isSetOldUdidHash();
      boolean that_present_oldUdidHash = true && that.isSetOldUdidHash();
      if (this_present_oldUdidHash || that_present_oldUdidHash) {
        if (!(this_present_oldUdidHash && that_present_oldUdidHash))
          return false;
        if (!this.oldUdidHash.equals(that.oldUdidHash))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      startVerification_args other = (startVerification_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRegion(), other.isSetRegion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegion()) {
        lastComparison = TBaseHelper.compareTo(this.region, other.region);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCarrier(), other.isSetCarrier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCarrier()) {
        lastComparison = TBaseHelper.compareTo(this.carrier, other.carrier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPhone(), other.isSetPhone());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPhone()) {
        lastComparison = TBaseHelper.compareTo(this.phone, other.phone);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUdidHash(), other.isSetUdidHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUdidHash()) {
        lastComparison = TBaseHelper.compareTo(this.udidHash, other.udidHash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetDeviceInfo(), other.isSetDeviceInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceInfo()) {
        lastComparison = this.deviceInfo.compareTo(other.deviceInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNetworkCode(), other.isSetNetworkCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNetworkCode()) {
        lastComparison = TBaseHelper.compareTo(this.networkCode, other.networkCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMid(), other.isSetMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMid()) {
        lastComparison = TBaseHelper.compareTo(this.mid, other.mid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLocale(), other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSimInfo(), other.isSetSimInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSimInfo()) {
        lastComparison = this.simInfo.compareTo(other.simInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetOldUdidHash(), other.isSetOldUdidHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOldUdidHash()) {
        lastComparison = TBaseHelper.compareTo(this.oldUdidHash, other.oldUdidHash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // REGION
            if (field.type == TType.STRING) {
              this.region = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // CARRIER
            if (field.type == TType.I32) {
              this.carrier = CarrierCode.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // PHONE
            if (field.type == TType.STRING) {
              this.phone = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // UDID_HASH
            if (field.type == TType.STRING) {
              this.udidHash = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // DEVICE_INFO
            if (field.type == TType.STRUCT) {
              this.deviceInfo = new DeviceInfo();
              this.deviceInfo.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // NETWORK_CODE
            if (field.type == TType.STRING) {
              this.networkCode = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 8: // MID
            if (field.type == TType.STRING) {
              this.mid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 9: // LOCALE
            if (field.type == TType.STRING) {
              this.locale = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 10: // SIM_INFO
            if (field.type == TType.STRUCT) {
              this.simInfo = new SIMInfo();
              this.simInfo.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 11: // OLD_UDID_HASH
            if (field.type == TType.STRING) {
              this.oldUdidHash = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.region != null) {
        oprot.writeFieldBegin(REGION_FIELD_DESC);
        oprot.writeString(this.region);
        oprot.writeFieldEnd();
      }
      if (this.carrier != null) {
        oprot.writeFieldBegin(CARRIER_FIELD_DESC);
        oprot.writeI32(this.carrier.getValue());
        oprot.writeFieldEnd();
      }
      if (this.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(this.phone);
        oprot.writeFieldEnd();
      }
      if (this.udidHash != null) {
        oprot.writeFieldBegin(UDID_HASH_FIELD_DESC);
        oprot.writeString(this.udidHash);
        oprot.writeFieldEnd();
      }
      if (this.deviceInfo != null) {
        oprot.writeFieldBegin(DEVICE_INFO_FIELD_DESC);
        this.deviceInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.networkCode != null) {
        oprot.writeFieldBegin(NETWORK_CODE_FIELD_DESC);
        oprot.writeString(this.networkCode);
        oprot.writeFieldEnd();
      }
      if (this.mid != null) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeString(this.mid);
        oprot.writeFieldEnd();
      }
      if (this.locale != null) {
        oprot.writeFieldBegin(LOCALE_FIELD_DESC);
        oprot.writeString(this.locale);
        oprot.writeFieldEnd();
      }
      if (this.simInfo != null) {
        oprot.writeFieldBegin(SIM_INFO_FIELD_DESC);
        this.simInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.oldUdidHash != null) {
        oprot.writeFieldBegin(OLD_UDID_HASH_FIELD_DESC);
        oprot.writeString(this.oldUdidHash);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("startVerification_args(");
      boolean first = true;

      sb.append("region:");
      if (this.region == null) {
        sb.append("null");
      } else {
        sb.append(this.region);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("carrier:");
      if (this.carrier == null) {
        sb.append("null");
      } else {
        sb.append(this.carrier);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("phone:");
      if (this.phone == null) {
        sb.append("null");
      } else {
        sb.append(this.phone);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("udidHash:");
      if (this.udidHash == null) {
        sb.append("null");
      } else {
        sb.append(this.udidHash);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deviceInfo:");
      if (this.deviceInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("networkCode:");
      if (this.networkCode == null) {
        sb.append("null");
      } else {
        sb.append(this.networkCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mid:");
      if (this.mid == null) {
        sb.append("null");
      } else {
        sb.append(this.mid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("simInfo:");
      if (this.simInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.simInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oldUdidHash:");
      if (this.oldUdidHash == null) {
        sb.append("null");
      } else {
        sb.append(this.oldUdidHash);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class startVerification_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("startVerification_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private VerificationSessionData success;
    private TalkException e;

    // isset id assignments

    public startVerification_result() {
    }

    public startVerification_result(
      VerificationSessionData success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startVerification_result(startVerification_result other) {
      if (other.isSetSuccess()) {
        this.success = new VerificationSessionData(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public startVerification_result deepCopy() {
      return new startVerification_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public VerificationSessionData getSuccess() {
      return this.success;
    }

    public void setSuccess(VerificationSessionData success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startVerification_result)
        return this.equals((startVerification_result)that);
      return false;
    }

    public boolean equals(startVerification_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      startVerification_result other = (startVerification_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new VerificationSessionData();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("startVerification_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateGroupPreferenceAttribute_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateGroupPreferenceAttribute_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField GROUP_MID_FIELD_DESC = new TField("groupMid", TType.STRING, (short)2);
    private static final TField UPDATED_ATTRS_FIELD_DESC = new TField("updatedAttrs", TType.MAP, (short)3);

    private int reqSeq;
    private String groupMid;
    private Hashtable updatedAttrs;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public updateGroupPreferenceAttribute_args() {
    }

    public updateGroupPreferenceAttribute_args(
      int reqSeq,
      String groupMid,
      Hashtable updatedAttrs)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.groupMid = groupMid;
      this.updatedAttrs = updatedAttrs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateGroupPreferenceAttribute_args(updateGroupPreferenceAttribute_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetGroupMid()) {
        this.groupMid = other.groupMid;
      }
      if (other.isSetUpdatedAttrs()) {
        Hashtable __this__updatedAttrs = new Hashtable();
        for (Enumeration other_enum = other.updatedAttrs.keys(); other_enum.hasMoreElements(); ) {

          GroupPreferenceAttribute other_element_key = (GroupPreferenceAttribute)other_enum.nextElement();
          String other_element_value = (String)other.updatedAttrs.get(other_element_key);

          GroupPreferenceAttribute __this__updatedAttrs_copy_key = other_element_key;

          String __this__updatedAttrs_copy_value = other_element_value;

          __this__updatedAttrs.put(__this__updatedAttrs_copy_key, __this__updatedAttrs_copy_value);
        }
        this.updatedAttrs = __this__updatedAttrs;
      }
    }

    public updateGroupPreferenceAttribute_args deepCopy() {
      return new updateGroupPreferenceAttribute_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.groupMid = null;
      this.updatedAttrs = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public String getGroupMid() {
      return this.groupMid;
    }

    public void setGroupMid(String groupMid) {
      this.groupMid = groupMid;
    }

    public void unsetGroupMid() {
      this.groupMid = null;
    }

    /** Returns true if field groupMid is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupMid() {
      return this.groupMid != null;
    }

    public void setGroupMidIsSet(boolean value) {
      if (!value) {
        this.groupMid = null;
      }
    }

    public int getUpdatedAttrsSize() {
      return (this.updatedAttrs == null) ? 0 : this.updatedAttrs.size();
    }

    public void putToUpdatedAttrs(GroupPreferenceAttribute key, String val) {
      if (this.updatedAttrs == null) {
        this.updatedAttrs = new Hashtable();
      }
      this.updatedAttrs.put(key, val);
    }

    public Hashtable getUpdatedAttrs() {
      return this.updatedAttrs;
    }

    public void setUpdatedAttrs(Hashtable updatedAttrs) {
      this.updatedAttrs = updatedAttrs;
    }

    public void unsetUpdatedAttrs() {
      this.updatedAttrs = null;
    }

    /** Returns true if field updatedAttrs is set (has been assigned a value) and false otherwise */
    public boolean isSetUpdatedAttrs() {
      return this.updatedAttrs != null;
    }

    public void setUpdatedAttrsIsSet(boolean value) {
      if (!value) {
        this.updatedAttrs = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateGroupPreferenceAttribute_args)
        return this.equals((updateGroupPreferenceAttribute_args)that);
      return false;
    }

    public boolean equals(updateGroupPreferenceAttribute_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_groupMid = true && this.isSetGroupMid();
      boolean that_present_groupMid = true && that.isSetGroupMid();
      if (this_present_groupMid || that_present_groupMid) {
        if (!(this_present_groupMid && that_present_groupMid))
          return false;
        if (!this.groupMid.equals(that.groupMid))
          return false;
      }

      boolean this_present_updatedAttrs = true && this.isSetUpdatedAttrs();
      boolean that_present_updatedAttrs = true && that.isSetUpdatedAttrs();
      if (this_present_updatedAttrs || that_present_updatedAttrs) {
        if (!(this_present_updatedAttrs && that_present_updatedAttrs))
          return false;
        if (!this.updatedAttrs.equals(that.updatedAttrs))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateGroupPreferenceAttribute_args other = (updateGroupPreferenceAttribute_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGroupMid(), other.isSetGroupMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupMid()) {
        lastComparison = TBaseHelper.compareTo(this.groupMid, other.groupMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUpdatedAttrs(), other.isSetUpdatedAttrs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpdatedAttrs()) {
        lastComparison = TBaseHelper.compareTo(this.updatedAttrs, other.updatedAttrs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GROUP_MID
            if (field.type == TType.STRING) {
              this.groupMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // UPDATED_ATTRS
            if (field.type == TType.MAP) {
              {
                TMap _map1143 = iprot.readMapBegin();
                this.updatedAttrs = new Hashtable(2*_map1143.size);
                for (int _i1144 = 0; _i1144 < _map1143.size; ++_i1144)
                {
                  GroupPreferenceAttribute _key1145;
                  String _val1146;
                  _key1145 = GroupPreferenceAttribute.findByValue(iprot.readI32());
                  _val1146 = iprot.readString();
                  this.updatedAttrs.put(_key1145, _val1146);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.groupMid != null) {
        oprot.writeFieldBegin(GROUP_MID_FIELD_DESC);
        oprot.writeString(this.groupMid);
        oprot.writeFieldEnd();
      }
      if (this.updatedAttrs != null) {
        oprot.writeFieldBegin(UPDATED_ATTRS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.I32, TType.STRING, this.updatedAttrs.size()));
          for (Enumeration _iter1147_enum = this.updatedAttrs.keys(); _iter1147_enum.hasMoreElements(); )           {
            GroupPreferenceAttribute _iter1147 = (GroupPreferenceAttribute)_iter1147_enum.nextElement();
            oprot.writeI32(_iter1147.getValue());
            oprot.writeString(((String)this.updatedAttrs.get(_iter1147)));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateGroupPreferenceAttribute_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("groupMid:");
      if (this.groupMid == null) {
        sb.append("null");
      } else {
        sb.append(this.groupMid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("updatedAttrs:");
      if (this.updatedAttrs == null) {
        sb.append("null");
      } else {
        sb.append(this.updatedAttrs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateGroupPreferenceAttribute_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateGroupPreferenceAttribute_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public updateGroupPreferenceAttribute_result() {
    }

    public updateGroupPreferenceAttribute_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateGroupPreferenceAttribute_result(updateGroupPreferenceAttribute_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public updateGroupPreferenceAttribute_result deepCopy() {
      return new updateGroupPreferenceAttribute_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateGroupPreferenceAttribute_result)
        return this.equals((updateGroupPreferenceAttribute_result)that);
      return false;
    }

    public boolean equals(updateGroupPreferenceAttribute_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateGroupPreferenceAttribute_result other = (updateGroupPreferenceAttribute_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateGroupPreferenceAttribute_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createRoomV2_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("createRoomV2_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField CONTACT_IDS_FIELD_DESC = new TField("contactIds", TType.LIST, (short)2);

    private int reqSeq;
    private Vector contactIds;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public createRoomV2_args() {
    }

    public createRoomV2_args(
      int reqSeq,
      Vector contactIds)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.contactIds = contactIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createRoomV2_args(createRoomV2_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetContactIds()) {
        Vector __this__contactIds = new Vector();
        for (Enumeration other_enum = other.contactIds.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__contactIds.addElement(other_element);
        }
        this.contactIds = __this__contactIds;
      }
    }

    public createRoomV2_args deepCopy() {
      return new createRoomV2_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.contactIds = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public int getContactIdsSize() {
      return (this.contactIds == null) ? 0 : this.contactIds.size();
    }

    public Enumeration getContactIdsEnumeration() {
      return (this.contactIds == null) ? null : this.contactIds.elements();
    }

    public void addToContactIds(String elem) {
      if (this.contactIds == null) {
        this.contactIds = new Vector();
      }
      this.contactIds.addElement(elem);
    }

    public Vector getContactIds() {
      return this.contactIds;
    }

    public void setContactIds(Vector contactIds) {
      this.contactIds = contactIds;
    }

    public void unsetContactIds() {
      this.contactIds = null;
    }

    /** Returns true if field contactIds is set (has been assigned a value) and false otherwise */
    public boolean isSetContactIds() {
      return this.contactIds != null;
    }

    public void setContactIdsIsSet(boolean value) {
      if (!value) {
        this.contactIds = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createRoomV2_args)
        return this.equals((createRoomV2_args)that);
      return false;
    }

    public boolean equals(createRoomV2_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_contactIds = true && this.isSetContactIds();
      boolean that_present_contactIds = true && that.isSetContactIds();
      if (this_present_contactIds || that_present_contactIds) {
        if (!(this_present_contactIds && that_present_contactIds))
          return false;
        if (!this.contactIds.equals(that.contactIds))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      createRoomV2_args other = (createRoomV2_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetContactIds(), other.isSetContactIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContactIds()) {
        lastComparison = TBaseHelper.compareTo(this.contactIds, other.contactIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // CONTACT_IDS
            if (field.type == TType.LIST) {
              {
                TList _list1148 = iprot.readListBegin();
                this.contactIds = new Vector(_list1148.size);
                for (int _i1149 = 0; _i1149 < _list1148.size; ++_i1149)
                {
                  String _elem1150;
                  _elem1150 = iprot.readString();
                  this.contactIds.addElement(_elem1150);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.contactIds != null) {
        oprot.writeFieldBegin(CONTACT_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.contactIds.size()));
          for (Enumeration _iter1151_enum = this.contactIds.elements(); _iter1151_enum.hasMoreElements(); )           {
            String _iter1151 = (String)_iter1151_enum.nextElement();
            oprot.writeString(_iter1151);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("createRoomV2_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("contactIds:");
      if (this.contactIds == null) {
        sb.append("null");
      } else {
        sb.append(this.contactIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createRoomV2_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("createRoomV2_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Room success;
    private TalkException e;

    // isset id assignments

    public createRoomV2_result() {
    }

    public createRoomV2_result(
      Room success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createRoomV2_result(createRoomV2_result other) {
      if (other.isSetSuccess()) {
        this.success = new Room(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public createRoomV2_result deepCopy() {
      return new createRoomV2_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Room getSuccess() {
      return this.success;
    }

    public void setSuccess(Room success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createRoomV2_result)
        return this.equals((createRoomV2_result)that);
      return false;
    }

    public boolean equals(createRoomV2_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      createRoomV2_result other = (createRoomV2_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Room();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("createRoomV2_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class storeUpdateProfileAttribute_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("storeUpdateProfileAttribute_args");

    private static final TField SEQ_FIELD_DESC = new TField("seq", TType.I32, (short)1);
    private static final TField PROFILE_ATTRIBUTE_FIELD_DESC = new TField("profileAttribute", TType.I32, (short)2);
    private static final TField VALUE_FIELD_DESC = new TField("value", TType.STRING, (short)3);

    private int seq;
    private ProfileAttribute profileAttribute;
    private String value;

    // isset id assignments
    private static final int __SEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public storeUpdateProfileAttribute_args() {
    }

    public storeUpdateProfileAttribute_args(
      int seq,
      ProfileAttribute profileAttribute,
      String value)
    {
      this();
      this.seq = seq;
      setSeqIsSet(true);
      this.profileAttribute = profileAttribute;
      this.value = value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeUpdateProfileAttribute_args(storeUpdateProfileAttribute_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.seq = other.seq;
      if (other.isSetProfileAttribute()) {
        this.profileAttribute = other.profileAttribute;
      }
      if (other.isSetValue()) {
        this.value = other.value;
      }
    }

    public storeUpdateProfileAttribute_args deepCopy() {
      return new storeUpdateProfileAttribute_args(this);
    }

    public void clear() {
      setSeqIsSet(false);
      this.seq = 0;
      this.profileAttribute = null;
      this.value = null;
    }

    public int getSeq() {
      return this.seq;
    }

    public void setSeq(int seq) {
      this.seq = seq;
      setSeqIsSet(true);
    }

    public void unsetSeq() {
      __isset_vector[__SEQ_ISSET_ID] = false;
    }

    /** Returns true if field seq is set (has been assigned a value) and false otherwise */
    public boolean isSetSeq() {
      return __isset_vector[__SEQ_ISSET_ID];
    }

    public void setSeqIsSet(boolean value) {
      __isset_vector[__SEQ_ISSET_ID] = value;
    }

    /**
     * 
     * @see ProfileAttribute
     */
    public ProfileAttribute getProfileAttribute() {
      return this.profileAttribute;
    }

    /**
     * 
     * @see ProfileAttribute
     */
    public void setProfileAttribute(ProfileAttribute profileAttribute) {
      this.profileAttribute = profileAttribute;
    }

    public void unsetProfileAttribute() {
      this.profileAttribute = null;
    }

    /** Returns true if field profileAttribute is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileAttribute() {
      return this.profileAttribute != null;
    }

    public void setProfileAttributeIsSet(boolean value) {
      if (!value) {
        this.profileAttribute = null;
      }
    }

    public String getValue() {
      return this.value;
    }

    public void setValue(String value) {
      this.value = value;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeUpdateProfileAttribute_args)
        return this.equals((storeUpdateProfileAttribute_args)that);
      return false;
    }

    public boolean equals(storeUpdateProfileAttribute_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_seq = true;
      boolean that_present_seq = true;
      if (this_present_seq || that_present_seq) {
        if (!(this_present_seq && that_present_seq))
          return false;
        if (this.seq != that.seq)
          return false;
      }

      boolean this_present_profileAttribute = true && this.isSetProfileAttribute();
      boolean that_present_profileAttribute = true && that.isSetProfileAttribute();
      if (this_present_profileAttribute || that_present_profileAttribute) {
        if (!(this_present_profileAttribute && that_present_profileAttribute))
          return false;
        if (!this.profileAttribute.equals(that.profileAttribute))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      storeUpdateProfileAttribute_args other = (storeUpdateProfileAttribute_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSeq(), other.isSetSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeq()) {
        lastComparison = TBaseHelper.compareTo(this.seq, other.seq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetProfileAttribute(), other.isSetProfileAttribute());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileAttribute()) {
        lastComparison = TBaseHelper.compareTo(this.profileAttribute, other.profileAttribute);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetValue(), other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SEQ
            if (field.type == TType.I32) {
              this.seq = iprot.readI32();
              setSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // PROFILE_ATTRIBUTE
            if (field.type == TType.I32) {
              this.profileAttribute = ProfileAttribute.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // VALUE
            if (field.type == TType.STRING) {
              this.value = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQ_FIELD_DESC);
      oprot.writeI32(this.seq);
      oprot.writeFieldEnd();
      if (this.profileAttribute != null) {
        oprot.writeFieldBegin(PROFILE_ATTRIBUTE_FIELD_DESC);
        oprot.writeI32(this.profileAttribute.getValue());
        oprot.writeFieldEnd();
      }
      if (this.value != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeString(this.value);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("storeUpdateProfileAttribute_args(");
      boolean first = true;

      sb.append("seq:");
      sb.append(this.seq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("profileAttribute:");
      if (this.profileAttribute == null) {
        sb.append("null");
      } else {
        sb.append(this.profileAttribute);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class storeUpdateProfileAttribute_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("storeUpdateProfileAttribute_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public storeUpdateProfileAttribute_result() {
    }

    public storeUpdateProfileAttribute_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeUpdateProfileAttribute_result(storeUpdateProfileAttribute_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public storeUpdateProfileAttribute_result deepCopy() {
      return new storeUpdateProfileAttribute_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeUpdateProfileAttribute_result)
        return this.equals((storeUpdateProfileAttribute_result)that);
      return false;
    }

    public boolean equals(storeUpdateProfileAttribute_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      storeUpdateProfileAttribute_result other = (storeUpdateProfileAttribute_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("storeUpdateProfileAttribute_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class syncContactBySnsIds_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("syncContactBySnsIds_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField MODIFICATIONS_FIELD_DESC = new TField("modifications", TType.LIST, (short)2);

    private int reqSeq;
    private Vector modifications;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public syncContactBySnsIds_args() {
    }

    public syncContactBySnsIds_args(
      int reqSeq,
      Vector modifications)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.modifications = modifications;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public syncContactBySnsIds_args(syncContactBySnsIds_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetModifications()) {
        Vector __this__modifications = new Vector();
        for (Enumeration other_enum = other.modifications.elements(); other_enum.hasMoreElements(); ) {
          SnsFriendModification other_element = (SnsFriendModification)other_enum.nextElement();
          __this__modifications.addElement(new SnsFriendModification(other_element));
        }
        this.modifications = __this__modifications;
      }
    }

    public syncContactBySnsIds_args deepCopy() {
      return new syncContactBySnsIds_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.modifications = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public int getModificationsSize() {
      return (this.modifications == null) ? 0 : this.modifications.size();
    }

    public Enumeration getModificationsEnumeration() {
      return (this.modifications == null) ? null : this.modifications.elements();
    }

    public void addToModifications(SnsFriendModification elem) {
      if (this.modifications == null) {
        this.modifications = new Vector();
      }
      this.modifications.addElement(elem);
    }

    public Vector getModifications() {
      return this.modifications;
    }

    public void setModifications(Vector modifications) {
      this.modifications = modifications;
    }

    public void unsetModifications() {
      this.modifications = null;
    }

    /** Returns true if field modifications is set (has been assigned a value) and false otherwise */
    public boolean isSetModifications() {
      return this.modifications != null;
    }

    public void setModificationsIsSet(boolean value) {
      if (!value) {
        this.modifications = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof syncContactBySnsIds_args)
        return this.equals((syncContactBySnsIds_args)that);
      return false;
    }

    public boolean equals(syncContactBySnsIds_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_modifications = true && this.isSetModifications();
      boolean that_present_modifications = true && that.isSetModifications();
      if (this_present_modifications || that_present_modifications) {
        if (!(this_present_modifications && that_present_modifications))
          return false;
        if (!this.modifications.equals(that.modifications))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      syncContactBySnsIds_args other = (syncContactBySnsIds_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetModifications(), other.isSetModifications());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModifications()) {
        lastComparison = TBaseHelper.compareTo(this.modifications, other.modifications);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MODIFICATIONS
            if (field.type == TType.LIST) {
              {
                TList _list1152 = iprot.readListBegin();
                this.modifications = new Vector(_list1152.size);
                for (int _i1153 = 0; _i1153 < _list1152.size; ++_i1153)
                {
                  SnsFriendModification _elem1154;
                  _elem1154 = new SnsFriendModification();
                  _elem1154.read(iprot);
                  this.modifications.addElement(_elem1154);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.modifications != null) {
        oprot.writeFieldBegin(MODIFICATIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.modifications.size()));
          for (Enumeration _iter1155_enum = this.modifications.elements(); _iter1155_enum.hasMoreElements(); )           {
            SnsFriendModification _iter1155 = (SnsFriendModification)_iter1155_enum.nextElement();
            _iter1155.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("syncContactBySnsIds_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("modifications:");
      if (this.modifications == null) {
        sb.append("null");
      } else {
        sb.append(this.modifications);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class syncContactBySnsIds_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("syncContactBySnsIds_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public syncContactBySnsIds_result() {
    }

    public syncContactBySnsIds_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public syncContactBySnsIds_result(syncContactBySnsIds_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          SnsFriendContactRegistration other_element = (SnsFriendContactRegistration)other_enum.nextElement();
          __this__success.addElement(new SnsFriendContactRegistration(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public syncContactBySnsIds_result deepCopy() {
      return new syncContactBySnsIds_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(SnsFriendContactRegistration elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof syncContactBySnsIds_result)
        return this.equals((syncContactBySnsIds_result)that);
      return false;
    }

    public boolean equals(syncContactBySnsIds_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      syncContactBySnsIds_result other = (syncContactBySnsIds_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list1156 = iprot.readListBegin();
                this.success = new Vector(_list1156.size);
                for (int _i1157 = 0; _i1157 < _list1156.size; ++_i1157)
                {
                  SnsFriendContactRegistration _elem1158;
                  _elem1158 = new SnsFriendContactRegistration();
                  _elem1158.read(iprot);
                  this.success.addElement(_elem1158);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter1159_enum = this.success.elements(); _iter1159_enum.hasMoreElements(); )           {
            SnsFriendContactRegistration _iter1159 = (SnsFriendContactRegistration)_iter1159_enum.nextElement();
            _iter1159.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("syncContactBySnsIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class syncContacts_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("syncContacts_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField LOCAL_CONTACTS_FIELD_DESC = new TField("localContacts", TType.LIST, (short)2);

    private int reqSeq;
    private Vector localContacts;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public syncContacts_args() {
    }

    public syncContacts_args(
      int reqSeq,
      Vector localContacts)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.localContacts = localContacts;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public syncContacts_args(syncContacts_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetLocalContacts()) {
        Vector __this__localContacts = new Vector();
        for (Enumeration other_enum = other.localContacts.elements(); other_enum.hasMoreElements(); ) {
          ContactModification other_element = (ContactModification)other_enum.nextElement();
          __this__localContacts.addElement(new ContactModification(other_element));
        }
        this.localContacts = __this__localContacts;
      }
    }

    public syncContacts_args deepCopy() {
      return new syncContacts_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.localContacts = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public int getLocalContactsSize() {
      return (this.localContacts == null) ? 0 : this.localContacts.size();
    }

    public Enumeration getLocalContactsEnumeration() {
      return (this.localContacts == null) ? null : this.localContacts.elements();
    }

    public void addToLocalContacts(ContactModification elem) {
      if (this.localContacts == null) {
        this.localContacts = new Vector();
      }
      this.localContacts.addElement(elem);
    }

    public Vector getLocalContacts() {
      return this.localContacts;
    }

    public void setLocalContacts(Vector localContacts) {
      this.localContacts = localContacts;
    }

    public void unsetLocalContacts() {
      this.localContacts = null;
    }

    /** Returns true if field localContacts is set (has been assigned a value) and false otherwise */
    public boolean isSetLocalContacts() {
      return this.localContacts != null;
    }

    public void setLocalContactsIsSet(boolean value) {
      if (!value) {
        this.localContacts = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof syncContacts_args)
        return this.equals((syncContacts_args)that);
      return false;
    }

    public boolean equals(syncContacts_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_localContacts = true && this.isSetLocalContacts();
      boolean that_present_localContacts = true && that.isSetLocalContacts();
      if (this_present_localContacts || that_present_localContacts) {
        if (!(this_present_localContacts && that_present_localContacts))
          return false;
        if (!this.localContacts.equals(that.localContacts))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      syncContacts_args other = (syncContacts_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLocalContacts(), other.isSetLocalContacts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocalContacts()) {
        lastComparison = TBaseHelper.compareTo(this.localContacts, other.localContacts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // LOCAL_CONTACTS
            if (field.type == TType.LIST) {
              {
                TList _list1160 = iprot.readListBegin();
                this.localContacts = new Vector(_list1160.size);
                for (int _i1161 = 0; _i1161 < _list1160.size; ++_i1161)
                {
                  ContactModification _elem1162;
                  _elem1162 = new ContactModification();
                  _elem1162.read(iprot);
                  this.localContacts.addElement(_elem1162);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.localContacts != null) {
        oprot.writeFieldBegin(LOCAL_CONTACTS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.localContacts.size()));
          for (Enumeration _iter1163_enum = this.localContacts.elements(); _iter1163_enum.hasMoreElements(); )           {
            ContactModification _iter1163 = (ContactModification)_iter1163_enum.nextElement();
            _iter1163.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("syncContacts_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("localContacts:");
      if (this.localContacts == null) {
        sb.append("null");
      } else {
        sb.append(this.localContacts);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class syncContacts_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("syncContacts_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.MAP, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Hashtable success;
    private TalkException e;

    // isset id assignments

    public syncContacts_result() {
    }

    public syncContacts_result(
      Hashtable success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public syncContacts_result(syncContacts_result other) {
      if (other.isSetSuccess()) {
        Hashtable __this__success = new Hashtable();
        for (Enumeration other_enum = other.success.keys(); other_enum.hasMoreElements(); ) {

          String other_element_key = (String)other_enum.nextElement();
          ContactRegistration other_element_value = (ContactRegistration)other.success.get(other_element_key);

          String __this__success_copy_key = other_element_key;

          ContactRegistration __this__success_copy_value = new ContactRegistration(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public syncContacts_result deepCopy() {
      return new syncContacts_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, ContactRegistration val) {
      if (this.success == null) {
        this.success = new Hashtable();
      }
      this.success.put(key, val);
    }

    public Hashtable getSuccess() {
      return this.success;
    }

    public void setSuccess(Hashtable success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof syncContacts_result)
        return this.equals((syncContacts_result)that);
      return false;
    }

    public boolean equals(syncContacts_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      syncContacts_result other = (syncContacts_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.MAP) {
              {
                TMap _map1164 = iprot.readMapBegin();
                this.success = new Hashtable(2*_map1164.size);
                for (int _i1165 = 0; _i1165 < _map1164.size; ++_i1165)
                {
                  String _key1166;
                  ContactRegistration _val1167;
                  _key1166 = iprot.readString();
                  _val1167 = new ContactRegistration();
                  _val1167.read(iprot);
                  this.success.put(_key1166, _val1167);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.success.size()));
          for (Enumeration _iter1168_enum = this.success.keys(); _iter1168_enum.hasMoreElements(); )           {
            String _iter1168 = (String)_iter1168_enum.nextElement();
            oprot.writeString(_iter1168);
            ((ContactRegistration)this.success.get(_iter1168)).write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("syncContacts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class trySendMessage_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("trySendMessage_args");

    private static final TField SEQ_FIELD_DESC = new TField("seq", TType.I32, (short)1);
    private static final TField MESSAGE_FIELD_DESC = new TField("message", TType.STRUCT, (short)2);

    private int seq;
    private Message message;

    // isset id assignments
    private static final int __SEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public trySendMessage_args() {
    }

    public trySendMessage_args(
      int seq,
      Message message)
    {
      this();
      this.seq = seq;
      setSeqIsSet(true);
      this.message = message;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public trySendMessage_args(trySendMessage_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.seq = other.seq;
      if (other.isSetMessage()) {
        this.message = new Message(other.message);
      }
    }

    public trySendMessage_args deepCopy() {
      return new trySendMessage_args(this);
    }

    public void clear() {
      setSeqIsSet(false);
      this.seq = 0;
      this.message = null;
    }

    public int getSeq() {
      return this.seq;
    }

    public void setSeq(int seq) {
      this.seq = seq;
      setSeqIsSet(true);
    }

    public void unsetSeq() {
      __isset_vector[__SEQ_ISSET_ID] = false;
    }

    /** Returns true if field seq is set (has been assigned a value) and false otherwise */
    public boolean isSetSeq() {
      return __isset_vector[__SEQ_ISSET_ID];
    }

    public void setSeqIsSet(boolean value) {
      __isset_vector[__SEQ_ISSET_ID] = value;
    }

    public Message getMessage() {
      return this.message;
    }

    public void setMessage(Message message) {
      this.message = message;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /** Returns true if field message is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof trySendMessage_args)
        return this.equals((trySendMessage_args)that);
      return false;
    }

    public boolean equals(trySendMessage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_seq = true;
      boolean that_present_seq = true;
      if (this_present_seq || that_present_seq) {
        if (!(this_present_seq && that_present_seq))
          return false;
        if (this.seq != that.seq)
          return false;
      }

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      trySendMessage_args other = (trySendMessage_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSeq(), other.isSetSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeq()) {
        lastComparison = TBaseHelper.compareTo(this.seq, other.seq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMessage(), other.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = this.message.compareTo(other.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SEQ
            if (field.type == TType.I32) {
              this.seq = iprot.readI32();
              setSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MESSAGE
            if (field.type == TType.STRUCT) {
              this.message = new Message();
              this.message.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQ_FIELD_DESC);
      oprot.writeI32(this.seq);
      oprot.writeFieldEnd();
      if (this.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        this.message.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("trySendMessage_args(");
      boolean first = true;

      sb.append("seq:");
      sb.append(this.seq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class trySendMessage_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("trySendMessage_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Message success;
    private TalkException e;

    // isset id assignments

    public trySendMessage_result() {
    }

    public trySendMessage_result(
      Message success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public trySendMessage_result(trySendMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = new Message(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public trySendMessage_result deepCopy() {
      return new trySendMessage_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Message getSuccess() {
      return this.success;
    }

    public void setSuccess(Message success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof trySendMessage_result)
        return this.equals((trySendMessage_result)that);
      return false;
    }

    public boolean equals(trySendMessage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      trySendMessage_result other = (trySendMessage_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Message();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("trySendMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNextMessagesV2_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getNextMessagesV2_args");

    private static final TField MESSAGE_BOX_ID_FIELD_DESC = new TField("messageBoxId", TType.STRING, (short)2);
    private static final TField START_MESSAGE_ID_FIELD_DESC = new TField("startMessageId", TType.STRUCT, (short)3);
    private static final TField MESSAGES_COUNT_FIELD_DESC = new TField("messagesCount", TType.I32, (short)4);

    private String messageBoxId;
    private MessageBoxV2MessageId startMessageId;
    private int messagesCount;

    // isset id assignments
    private static final int __MESSAGESCOUNT_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getNextMessagesV2_args() {
    }

    public getNextMessagesV2_args(
      String messageBoxId,
      MessageBoxV2MessageId startMessageId,
      int messagesCount)
    {
      this();
      this.messageBoxId = messageBoxId;
      this.startMessageId = startMessageId;
      this.messagesCount = messagesCount;
      setMessagesCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNextMessagesV2_args(getNextMessagesV2_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetMessageBoxId()) {
        this.messageBoxId = other.messageBoxId;
      }
      if (other.isSetStartMessageId()) {
        this.startMessageId = new MessageBoxV2MessageId(other.startMessageId);
      }
      this.messagesCount = other.messagesCount;
    }

    public getNextMessagesV2_args deepCopy() {
      return new getNextMessagesV2_args(this);
    }

    public void clear() {
      this.messageBoxId = null;
      this.startMessageId = null;
      setMessagesCountIsSet(false);
      this.messagesCount = 0;
    }

    public String getMessageBoxId() {
      return this.messageBoxId;
    }

    public void setMessageBoxId(String messageBoxId) {
      this.messageBoxId = messageBoxId;
    }

    public void unsetMessageBoxId() {
      this.messageBoxId = null;
    }

    /** Returns true if field messageBoxId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageBoxId() {
      return this.messageBoxId != null;
    }

    public void setMessageBoxIdIsSet(boolean value) {
      if (!value) {
        this.messageBoxId = null;
      }
    }

    public MessageBoxV2MessageId getStartMessageId() {
      return this.startMessageId;
    }

    public void setStartMessageId(MessageBoxV2MessageId startMessageId) {
      this.startMessageId = startMessageId;
    }

    public void unsetStartMessageId() {
      this.startMessageId = null;
    }

    /** Returns true if field startMessageId is set (has been assigned a value) and false otherwise */
    public boolean isSetStartMessageId() {
      return this.startMessageId != null;
    }

    public void setStartMessageIdIsSet(boolean value) {
      if (!value) {
        this.startMessageId = null;
      }
    }

    public int getMessagesCount() {
      return this.messagesCount;
    }

    public void setMessagesCount(int messagesCount) {
      this.messagesCount = messagesCount;
      setMessagesCountIsSet(true);
    }

    public void unsetMessagesCount() {
      __isset_vector[__MESSAGESCOUNT_ISSET_ID] = false;
    }

    /** Returns true if field messagesCount is set (has been assigned a value) and false otherwise */
    public boolean isSetMessagesCount() {
      return __isset_vector[__MESSAGESCOUNT_ISSET_ID];
    }

    public void setMessagesCountIsSet(boolean value) {
      __isset_vector[__MESSAGESCOUNT_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNextMessagesV2_args)
        return this.equals((getNextMessagesV2_args)that);
      return false;
    }

    public boolean equals(getNextMessagesV2_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_messageBoxId = true && this.isSetMessageBoxId();
      boolean that_present_messageBoxId = true && that.isSetMessageBoxId();
      if (this_present_messageBoxId || that_present_messageBoxId) {
        if (!(this_present_messageBoxId && that_present_messageBoxId))
          return false;
        if (!this.messageBoxId.equals(that.messageBoxId))
          return false;
      }

      boolean this_present_startMessageId = true && this.isSetStartMessageId();
      boolean that_present_startMessageId = true && that.isSetStartMessageId();
      if (this_present_startMessageId || that_present_startMessageId) {
        if (!(this_present_startMessageId && that_present_startMessageId))
          return false;
        if (!this.startMessageId.equals(that.startMessageId))
          return false;
      }

      boolean this_present_messagesCount = true;
      boolean that_present_messagesCount = true;
      if (this_present_messagesCount || that_present_messagesCount) {
        if (!(this_present_messagesCount && that_present_messagesCount))
          return false;
        if (this.messagesCount != that.messagesCount)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getNextMessagesV2_args other = (getNextMessagesV2_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetMessageBoxId(), other.isSetMessageBoxId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageBoxId()) {
        lastComparison = TBaseHelper.compareTo(this.messageBoxId, other.messageBoxId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetStartMessageId(), other.isSetStartMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartMessageId()) {
        lastComparison = this.startMessageId.compareTo(other.startMessageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMessagesCount(), other.isSetMessagesCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessagesCount()) {
        lastComparison = TBaseHelper.compareTo(this.messagesCount, other.messagesCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // MESSAGE_BOX_ID
            if (field.type == TType.STRING) {
              this.messageBoxId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // START_MESSAGE_ID
            if (field.type == TType.STRUCT) {
              this.startMessageId = new MessageBoxV2MessageId();
              this.startMessageId.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // MESSAGES_COUNT
            if (field.type == TType.I32) {
              this.messagesCount = iprot.readI32();
              setMessagesCountIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.messageBoxId != null) {
        oprot.writeFieldBegin(MESSAGE_BOX_ID_FIELD_DESC);
        oprot.writeString(this.messageBoxId);
        oprot.writeFieldEnd();
      }
      if (this.startMessageId != null) {
        oprot.writeFieldBegin(START_MESSAGE_ID_FIELD_DESC);
        this.startMessageId.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MESSAGES_COUNT_FIELD_DESC);
      oprot.writeI32(this.messagesCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getNextMessagesV2_args(");
      boolean first = true;

      sb.append("messageBoxId:");
      if (this.messageBoxId == null) {
        sb.append("null");
      } else {
        sb.append(this.messageBoxId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startMessageId:");
      if (this.startMessageId == null) {
        sb.append("null");
      } else {
        sb.append(this.startMessageId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("messagesCount:");
      sb.append(this.messagesCount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNextMessagesV2_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getNextMessagesV2_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getNextMessagesV2_result() {
    }

    public getNextMessagesV2_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNextMessagesV2_result(getNextMessagesV2_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          Message other_element = (Message)other_enum.nextElement();
          __this__success.addElement(new Message(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getNextMessagesV2_result deepCopy() {
      return new getNextMessagesV2_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(Message elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNextMessagesV2_result)
        return this.equals((getNextMessagesV2_result)that);
      return false;
    }

    public boolean equals(getNextMessagesV2_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getNextMessagesV2_result other = (getNextMessagesV2_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list1169 = iprot.readListBegin();
                this.success = new Vector(_list1169.size);
                for (int _i1170 = 0; _i1170 < _list1169.size; ++_i1170)
                {
                  Message _elem1171;
                  _elem1171 = new Message();
                  _elem1171.read(iprot);
                  this.success.addElement(_elem1171);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter1172_enum = this.success.elements(); _iter1172_enum.hasMoreElements(); )           {
            Message _iter1172 = (Message)_iter1172_enum.nextElement();
            _iter1172.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getNextMessagesV2_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getMessageBoxCompactWrapUpV2_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getMessageBoxCompactWrapUpV2_args");

    private static final TField MESSAGE_BOX_ID_FIELD_DESC = new TField("messageBoxId", TType.STRING, (short)2);

    private String messageBoxId;

    // isset id assignments

    public getMessageBoxCompactWrapUpV2_args() {
    }

    public getMessageBoxCompactWrapUpV2_args(
      String messageBoxId)
    {
      this();
      this.messageBoxId = messageBoxId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessageBoxCompactWrapUpV2_args(getMessageBoxCompactWrapUpV2_args other) {
      if (other.isSetMessageBoxId()) {
        this.messageBoxId = other.messageBoxId;
      }
    }

    public getMessageBoxCompactWrapUpV2_args deepCopy() {
      return new getMessageBoxCompactWrapUpV2_args(this);
    }

    public void clear() {
      this.messageBoxId = null;
    }

    public String getMessageBoxId() {
      return this.messageBoxId;
    }

    public void setMessageBoxId(String messageBoxId) {
      this.messageBoxId = messageBoxId;
    }

    public void unsetMessageBoxId() {
      this.messageBoxId = null;
    }

    /** Returns true if field messageBoxId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageBoxId() {
      return this.messageBoxId != null;
    }

    public void setMessageBoxIdIsSet(boolean value) {
      if (!value) {
        this.messageBoxId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessageBoxCompactWrapUpV2_args)
        return this.equals((getMessageBoxCompactWrapUpV2_args)that);
      return false;
    }

    public boolean equals(getMessageBoxCompactWrapUpV2_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_messageBoxId = true && this.isSetMessageBoxId();
      boolean that_present_messageBoxId = true && that.isSetMessageBoxId();
      if (this_present_messageBoxId || that_present_messageBoxId) {
        if (!(this_present_messageBoxId && that_present_messageBoxId))
          return false;
        if (!this.messageBoxId.equals(that.messageBoxId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getMessageBoxCompactWrapUpV2_args other = (getMessageBoxCompactWrapUpV2_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetMessageBoxId(), other.isSetMessageBoxId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageBoxId()) {
        lastComparison = TBaseHelper.compareTo(this.messageBoxId, other.messageBoxId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // MESSAGE_BOX_ID
            if (field.type == TType.STRING) {
              this.messageBoxId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.messageBoxId != null) {
        oprot.writeFieldBegin(MESSAGE_BOX_ID_FIELD_DESC);
        oprot.writeString(this.messageBoxId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getMessageBoxCompactWrapUpV2_args(");
      boolean first = true;

      sb.append("messageBoxId:");
      if (this.messageBoxId == null) {
        sb.append("null");
      } else {
        sb.append(this.messageBoxId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getMessageBoxCompactWrapUpV2_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getMessageBoxCompactWrapUpV2_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TMessageBoxWrapUp success;
    private TalkException e;

    // isset id assignments

    public getMessageBoxCompactWrapUpV2_result() {
    }

    public getMessageBoxCompactWrapUpV2_result(
      TMessageBoxWrapUp success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessageBoxCompactWrapUpV2_result(getMessageBoxCompactWrapUpV2_result other) {
      if (other.isSetSuccess()) {
        this.success = new TMessageBoxWrapUp(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getMessageBoxCompactWrapUpV2_result deepCopy() {
      return new getMessageBoxCompactWrapUpV2_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public TMessageBoxWrapUp getSuccess() {
      return this.success;
    }

    public void setSuccess(TMessageBoxWrapUp success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessageBoxCompactWrapUpV2_result)
        return this.equals((getMessageBoxCompactWrapUpV2_result)that);
      return false;
    }

    public boolean equals(getMessageBoxCompactWrapUpV2_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getMessageBoxCompactWrapUpV2_result other = (getMessageBoxCompactWrapUpV2_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new TMessageBoxWrapUp();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getMessageBoxCompactWrapUpV2_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getRecentMessagesV2_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getRecentMessagesV2_args");

    private static final TField MESSAGE_BOX_ID_FIELD_DESC = new TField("messageBoxId", TType.STRING, (short)2);
    private static final TField MESSAGES_COUNT_FIELD_DESC = new TField("messagesCount", TType.I32, (short)3);

    private String messageBoxId;
    private int messagesCount;

    // isset id assignments
    private static final int __MESSAGESCOUNT_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getRecentMessagesV2_args() {
    }

    public getRecentMessagesV2_args(
      String messageBoxId,
      int messagesCount)
    {
      this();
      this.messageBoxId = messageBoxId;
      this.messagesCount = messagesCount;
      setMessagesCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecentMessagesV2_args(getRecentMessagesV2_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetMessageBoxId()) {
        this.messageBoxId = other.messageBoxId;
      }
      this.messagesCount = other.messagesCount;
    }

    public getRecentMessagesV2_args deepCopy() {
      return new getRecentMessagesV2_args(this);
    }

    public void clear() {
      this.messageBoxId = null;
      setMessagesCountIsSet(false);
      this.messagesCount = 0;
    }

    public String getMessageBoxId() {
      return this.messageBoxId;
    }

    public void setMessageBoxId(String messageBoxId) {
      this.messageBoxId = messageBoxId;
    }

    public void unsetMessageBoxId() {
      this.messageBoxId = null;
    }

    /** Returns true if field messageBoxId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageBoxId() {
      return this.messageBoxId != null;
    }

    public void setMessageBoxIdIsSet(boolean value) {
      if (!value) {
        this.messageBoxId = null;
      }
    }

    public int getMessagesCount() {
      return this.messagesCount;
    }

    public void setMessagesCount(int messagesCount) {
      this.messagesCount = messagesCount;
      setMessagesCountIsSet(true);
    }

    public void unsetMessagesCount() {
      __isset_vector[__MESSAGESCOUNT_ISSET_ID] = false;
    }

    /** Returns true if field messagesCount is set (has been assigned a value) and false otherwise */
    public boolean isSetMessagesCount() {
      return __isset_vector[__MESSAGESCOUNT_ISSET_ID];
    }

    public void setMessagesCountIsSet(boolean value) {
      __isset_vector[__MESSAGESCOUNT_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecentMessagesV2_args)
        return this.equals((getRecentMessagesV2_args)that);
      return false;
    }

    public boolean equals(getRecentMessagesV2_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_messageBoxId = true && this.isSetMessageBoxId();
      boolean that_present_messageBoxId = true && that.isSetMessageBoxId();
      if (this_present_messageBoxId || that_present_messageBoxId) {
        if (!(this_present_messageBoxId && that_present_messageBoxId))
          return false;
        if (!this.messageBoxId.equals(that.messageBoxId))
          return false;
      }

      boolean this_present_messagesCount = true;
      boolean that_present_messagesCount = true;
      if (this_present_messagesCount || that_present_messagesCount) {
        if (!(this_present_messagesCount && that_present_messagesCount))
          return false;
        if (this.messagesCount != that.messagesCount)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getRecentMessagesV2_args other = (getRecentMessagesV2_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetMessageBoxId(), other.isSetMessageBoxId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageBoxId()) {
        lastComparison = TBaseHelper.compareTo(this.messageBoxId, other.messageBoxId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMessagesCount(), other.isSetMessagesCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessagesCount()) {
        lastComparison = TBaseHelper.compareTo(this.messagesCount, other.messagesCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // MESSAGE_BOX_ID
            if (field.type == TType.STRING) {
              this.messageBoxId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // MESSAGES_COUNT
            if (field.type == TType.I32) {
              this.messagesCount = iprot.readI32();
              setMessagesCountIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.messageBoxId != null) {
        oprot.writeFieldBegin(MESSAGE_BOX_ID_FIELD_DESC);
        oprot.writeString(this.messageBoxId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MESSAGES_COUNT_FIELD_DESC);
      oprot.writeI32(this.messagesCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getRecentMessagesV2_args(");
      boolean first = true;

      sb.append("messageBoxId:");
      if (this.messageBoxId == null) {
        sb.append("null");
      } else {
        sb.append(this.messageBoxId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("messagesCount:");
      sb.append(this.messagesCount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getRecentMessagesV2_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getRecentMessagesV2_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getRecentMessagesV2_result() {
    }

    public getRecentMessagesV2_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecentMessagesV2_result(getRecentMessagesV2_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          Message other_element = (Message)other_enum.nextElement();
          __this__success.addElement(new Message(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getRecentMessagesV2_result deepCopy() {
      return new getRecentMessagesV2_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(Message elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecentMessagesV2_result)
        return this.equals((getRecentMessagesV2_result)that);
      return false;
    }

    public boolean equals(getRecentMessagesV2_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getRecentMessagesV2_result other = (getRecentMessagesV2_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list1173 = iprot.readListBegin();
                this.success = new Vector(_list1173.size);
                for (int _i1174 = 0; _i1174 < _list1173.size; ++_i1174)
                {
                  Message _elem1175;
                  _elem1175 = new Message();
                  _elem1175.read(iprot);
                  this.success.addElement(_elem1175);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter1176_enum = this.success.elements(); _iter1176_enum.hasMoreElements(); )           {
            Message _iter1176 = (Message)_iter1176_enum.nextElement();
            _iter1176.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getRecentMessagesV2_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class validateContactsOnBot_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("validateContactsOnBot_args");

    private static final TField CONTACTS_FIELD_DESC = new TField("contacts", TType.LIST, (short)2);

    private Vector contacts;

    // isset id assignments

    public validateContactsOnBot_args() {
    }

    public validateContactsOnBot_args(
      Vector contacts)
    {
      this();
      this.contacts = contacts;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public validateContactsOnBot_args(validateContactsOnBot_args other) {
      if (other.isSetContacts()) {
        Vector __this__contacts = new Vector();
        for (Enumeration other_enum = other.contacts.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__contacts.addElement(other_element);
        }
        this.contacts = __this__contacts;
      }
    }

    public validateContactsOnBot_args deepCopy() {
      return new validateContactsOnBot_args(this);
    }

    public void clear() {
      this.contacts = null;
    }

    public int getContactsSize() {
      return (this.contacts == null) ? 0 : this.contacts.size();
    }

    public Enumeration getContactsEnumeration() {
      return (this.contacts == null) ? null : this.contacts.elements();
    }

    public void addToContacts(String elem) {
      if (this.contacts == null) {
        this.contacts = new Vector();
      }
      this.contacts.addElement(elem);
    }

    public Vector getContacts() {
      return this.contacts;
    }

    public void setContacts(Vector contacts) {
      this.contacts = contacts;
    }

    public void unsetContacts() {
      this.contacts = null;
    }

    /** Returns true if field contacts is set (has been assigned a value) and false otherwise */
    public boolean isSetContacts() {
      return this.contacts != null;
    }

    public void setContactsIsSet(boolean value) {
      if (!value) {
        this.contacts = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof validateContactsOnBot_args)
        return this.equals((validateContactsOnBot_args)that);
      return false;
    }

    public boolean equals(validateContactsOnBot_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_contacts = true && this.isSetContacts();
      boolean that_present_contacts = true && that.isSetContacts();
      if (this_present_contacts || that_present_contacts) {
        if (!(this_present_contacts && that_present_contacts))
          return false;
        if (!this.contacts.equals(that.contacts))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      validateContactsOnBot_args other = (validateContactsOnBot_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetContacts(), other.isSetContacts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContacts()) {
        lastComparison = TBaseHelper.compareTo(this.contacts, other.contacts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // CONTACTS
            if (field.type == TType.LIST) {
              {
                TList _list1177 = iprot.readListBegin();
                this.contacts = new Vector(_list1177.size);
                for (int _i1178 = 0; _i1178 < _list1177.size; ++_i1178)
                {
                  String _elem1179;
                  _elem1179 = iprot.readString();
                  this.contacts.addElement(_elem1179);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.contacts != null) {
        oprot.writeFieldBegin(CONTACTS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.contacts.size()));
          for (Enumeration _iter1180_enum = this.contacts.elements(); _iter1180_enum.hasMoreElements(); )           {
            String _iter1180 = (String)_iter1180_enum.nextElement();
            oprot.writeString(_iter1180);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("validateContactsOnBot_args(");
      boolean first = true;

      sb.append("contacts:");
      if (this.contacts == null) {
        sb.append("null");
      } else {
        sb.append(this.contacts);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class validateContactsOnBot_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("validateContactsOnBot_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.MAP, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Hashtable success;
    private TalkException e;

    // isset id assignments

    public validateContactsOnBot_result() {
    }

    public validateContactsOnBot_result(
      Hashtable success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public validateContactsOnBot_result(validateContactsOnBot_result other) {
      if (other.isSetSuccess()) {
        Hashtable __this__success = new Hashtable();
        for (Enumeration other_enum = other.success.keys(); other_enum.hasMoreElements(); ) {

          String other_element_key = (String)other_enum.nextElement();
          String other_element_value = (String)other.success.get(other_element_key);

          String __this__success_copy_key = other_element_key;

          String __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public validateContactsOnBot_result deepCopy() {
      return new validateContactsOnBot_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new Hashtable();
      }
      this.success.put(key, val);
    }

    public Hashtable getSuccess() {
      return this.success;
    }

    public void setSuccess(Hashtable success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof validateContactsOnBot_result)
        return this.equals((validateContactsOnBot_result)that);
      return false;
    }

    public boolean equals(validateContactsOnBot_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      validateContactsOnBot_result other = (validateContactsOnBot_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.MAP) {
              {
                TMap _map1181 = iprot.readMapBegin();
                this.success = new Hashtable(2*_map1181.size);
                for (int _i1182 = 0; _i1182 < _map1181.size; ++_i1182)
                {
                  String _key1183;
                  String _val1184;
                  _key1183 = iprot.readString();
                  _val1184 = iprot.readString();
                  this.success.put(_key1183, _val1184);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.success.size()));
          for (Enumeration _iter1185_enum = this.success.keys(); _iter1185_enum.hasMoreElements(); )           {
            String _iter1185 = (String)_iter1185_enum.nextElement();
            oprot.writeString(_iter1185);
            oprot.writeString(((String)this.success.get(_iter1185)));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("validateContactsOnBot_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class tryFriendRequest_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("tryFriendRequest_args");

    private static final TField MID_OR_EMID_FIELD_DESC = new TField("midOrEMid", TType.STRING, (short)1);
    private static final TField METHOD_FIELD_DESC = new TField("method", TType.I32, (short)2);
    private static final TField FRIEND_REQUEST_PARAMS_FIELD_DESC = new TField("friendRequestParams", TType.STRING, (short)3);

    private String midOrEMid;
    private FriendRequestMethod method;
    private String friendRequestParams;

    // isset id assignments

    public tryFriendRequest_args() {
    }

    public tryFriendRequest_args(
      String midOrEMid,
      FriendRequestMethod method,
      String friendRequestParams)
    {
      this();
      this.midOrEMid = midOrEMid;
      this.method = method;
      this.friendRequestParams = friendRequestParams;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tryFriendRequest_args(tryFriendRequest_args other) {
      if (other.isSetMidOrEMid()) {
        this.midOrEMid = other.midOrEMid;
      }
      if (other.isSetMethod()) {
        this.method = other.method;
      }
      if (other.isSetFriendRequestParams()) {
        this.friendRequestParams = other.friendRequestParams;
      }
    }

    public tryFriendRequest_args deepCopy() {
      return new tryFriendRequest_args(this);
    }

    public void clear() {
      this.midOrEMid = null;
      this.method = null;
      this.friendRequestParams = null;
    }

    public String getMidOrEMid() {
      return this.midOrEMid;
    }

    public void setMidOrEMid(String midOrEMid) {
      this.midOrEMid = midOrEMid;
    }

    public void unsetMidOrEMid() {
      this.midOrEMid = null;
    }

    /** Returns true if field midOrEMid is set (has been assigned a value) and false otherwise */
    public boolean isSetMidOrEMid() {
      return this.midOrEMid != null;
    }

    public void setMidOrEMidIsSet(boolean value) {
      if (!value) {
        this.midOrEMid = null;
      }
    }

    /**
     * 
     * @see FriendRequestMethod
     */
    public FriendRequestMethod getMethod() {
      return this.method;
    }

    /**
     * 
     * @see FriendRequestMethod
     */
    public void setMethod(FriendRequestMethod method) {
      this.method = method;
    }

    public void unsetMethod() {
      this.method = null;
    }

    /** Returns true if field method is set (has been assigned a value) and false otherwise */
    public boolean isSetMethod() {
      return this.method != null;
    }

    public void setMethodIsSet(boolean value) {
      if (!value) {
        this.method = null;
      }
    }

    public String getFriendRequestParams() {
      return this.friendRequestParams;
    }

    public void setFriendRequestParams(String friendRequestParams) {
      this.friendRequestParams = friendRequestParams;
    }

    public void unsetFriendRequestParams() {
      this.friendRequestParams = null;
    }

    /** Returns true if field friendRequestParams is set (has been assigned a value) and false otherwise */
    public boolean isSetFriendRequestParams() {
      return this.friendRequestParams != null;
    }

    public void setFriendRequestParamsIsSet(boolean value) {
      if (!value) {
        this.friendRequestParams = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tryFriendRequest_args)
        return this.equals((tryFriendRequest_args)that);
      return false;
    }

    public boolean equals(tryFriendRequest_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_midOrEMid = true && this.isSetMidOrEMid();
      boolean that_present_midOrEMid = true && that.isSetMidOrEMid();
      if (this_present_midOrEMid || that_present_midOrEMid) {
        if (!(this_present_midOrEMid && that_present_midOrEMid))
          return false;
        if (!this.midOrEMid.equals(that.midOrEMid))
          return false;
      }

      boolean this_present_method = true && this.isSetMethod();
      boolean that_present_method = true && that.isSetMethod();
      if (this_present_method || that_present_method) {
        if (!(this_present_method && that_present_method))
          return false;
        if (!this.method.equals(that.method))
          return false;
      }

      boolean this_present_friendRequestParams = true && this.isSetFriendRequestParams();
      boolean that_present_friendRequestParams = true && that.isSetFriendRequestParams();
      if (this_present_friendRequestParams || that_present_friendRequestParams) {
        if (!(this_present_friendRequestParams && that_present_friendRequestParams))
          return false;
        if (!this.friendRequestParams.equals(that.friendRequestParams))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      tryFriendRequest_args other = (tryFriendRequest_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetMidOrEMid(), other.isSetMidOrEMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMidOrEMid()) {
        lastComparison = TBaseHelper.compareTo(this.midOrEMid, other.midOrEMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMethod(), other.isSetMethod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMethod()) {
        lastComparison = TBaseHelper.compareTo(this.method, other.method);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetFriendRequestParams(), other.isSetFriendRequestParams());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFriendRequestParams()) {
        lastComparison = TBaseHelper.compareTo(this.friendRequestParams, other.friendRequestParams);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MID_OR_EMID
            if (field.type == TType.STRING) {
              this.midOrEMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // METHOD
            if (field.type == TType.I32) {
              this.method = FriendRequestMethod.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // FRIEND_REQUEST_PARAMS
            if (field.type == TType.STRING) {
              this.friendRequestParams = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.midOrEMid != null) {
        oprot.writeFieldBegin(MID_OR_EMID_FIELD_DESC);
        oprot.writeString(this.midOrEMid);
        oprot.writeFieldEnd();
      }
      if (this.method != null) {
        oprot.writeFieldBegin(METHOD_FIELD_DESC);
        oprot.writeI32(this.method.getValue());
        oprot.writeFieldEnd();
      }
      if (this.friendRequestParams != null) {
        oprot.writeFieldBegin(FRIEND_REQUEST_PARAMS_FIELD_DESC);
        oprot.writeString(this.friendRequestParams);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("tryFriendRequest_args(");
      boolean first = true;

      sb.append("midOrEMid:");
      if (this.midOrEMid == null) {
        sb.append("null");
      } else {
        sb.append(this.midOrEMid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("method:");
      if (this.method == null) {
        sb.append("null");
      } else {
        sb.append(this.method);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("friendRequestParams:");
      if (this.friendRequestParams == null) {
        sb.append("null");
      } else {
        sb.append(this.friendRequestParams);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class tryFriendRequest_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("tryFriendRequest_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public tryFriendRequest_result() {
    }

    public tryFriendRequest_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public tryFriendRequest_result(tryFriendRequest_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public tryFriendRequest_result deepCopy() {
      return new tryFriendRequest_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof tryFriendRequest_result)
        return this.equals((tryFriendRequest_result)that);
      return false;
    }

    public boolean equals(tryFriendRequest_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      tryFriendRequest_result other = (tryFriendRequest_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("tryFriendRequest_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class unblockContact_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("unblockContact_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField ID_FIELD_DESC = new TField("id", TType.STRING, (short)2);

    private int reqSeq;
    private String id;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public unblockContact_args() {
    }

    public unblockContact_args(
      int reqSeq,
      String id)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unblockContact_args(unblockContact_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public unblockContact_args deepCopy() {
      return new unblockContact_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.id = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public String getId() {
      return this.id;
    }

    public void setId(String id) {
      this.id = id;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unblockContact_args)
        return this.equals((unblockContact_args)that);
      return false;
    }

    public boolean equals(unblockContact_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      unblockContact_args other = (unblockContact_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetId(), other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ID
            if (field.type == TType.STRING) {
              this.id = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(this.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("unblockContact_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class unblockContact_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("unblockContact_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public unblockContact_result() {
    }

    public unblockContact_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unblockContact_result(unblockContact_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public unblockContact_result deepCopy() {
      return new unblockContact_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unblockContact_result)
        return this.equals((unblockContact_result)that);
      return false;
    }

    public boolean equals(unblockContact_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      unblockContact_result other = (unblockContact_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("unblockContact_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class unblockRecommendation_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("unblockRecommendation_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField ID_FIELD_DESC = new TField("id", TType.STRING, (short)2);

    private int reqSeq;
    private String id;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public unblockRecommendation_args() {
    }

    public unblockRecommendation_args(
      int reqSeq,
      String id)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.id = id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unblockRecommendation_args(unblockRecommendation_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetId()) {
        this.id = other.id;
      }
    }

    public unblockRecommendation_args deepCopy() {
      return new unblockRecommendation_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.id = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public String getId() {
      return this.id;
    }

    public void setId(String id) {
      this.id = id;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unblockRecommendation_args)
        return this.equals((unblockRecommendation_args)that);
      return false;
    }

    public boolean equals(unblockRecommendation_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      unblockRecommendation_args other = (unblockRecommendation_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetId(), other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ID
            if (field.type == TType.STRING) {
              this.id = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(this.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("unblockRecommendation_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class unblockRecommendation_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("unblockRecommendation_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public unblockRecommendation_result() {
    }

    public unblockRecommendation_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unblockRecommendation_result(unblockRecommendation_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public unblockRecommendation_result deepCopy() {
      return new unblockRecommendation_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unblockRecommendation_result)
        return this.equals((unblockRecommendation_result)that);
      return false;
    }

    public boolean equals(unblockRecommendation_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      unblockRecommendation_result other = (unblockRecommendation_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("unblockRecommendation_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class unregisterUserAndDevice_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("unregisterUserAndDevice_args");


    public unregisterUserAndDevice_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unregisterUserAndDevice_args(unregisterUserAndDevice_args other) {
    }

    public unregisterUserAndDevice_args deepCopy() {
      return new unregisterUserAndDevice_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unregisterUserAndDevice_args)
        return this.equals((unregisterUserAndDevice_args)that);
      return false;
    }

    public boolean equals(unregisterUserAndDevice_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      unregisterUserAndDevice_args other = (unregisterUserAndDevice_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("unregisterUserAndDevice_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class unregisterUserAndDevice_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("unregisterUserAndDevice_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public unregisterUserAndDevice_result() {
    }

    public unregisterUserAndDevice_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unregisterUserAndDevice_result(unregisterUserAndDevice_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public unregisterUserAndDevice_result deepCopy() {
      return new unregisterUserAndDevice_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unregisterUserAndDevice_result)
        return this.equals((unregisterUserAndDevice_result)that);
      return false;
    }

    public boolean equals(unregisterUserAndDevice_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      unregisterUserAndDevice_result other = (unregisterUserAndDevice_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("unregisterUserAndDevice_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateApnsDeviceToken_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateApnsDeviceToken_args");

    private static final TField APNS_DEVICE_TOKEN_FIELD_DESC = new TField("apnsDeviceToken", TType.STRING, (short)2);

    private byte[] apnsDeviceToken;

    // isset id assignments

    public updateApnsDeviceToken_args() {
    }

    public updateApnsDeviceToken_args(
      byte[] apnsDeviceToken)
    {
      this();
      this.apnsDeviceToken = apnsDeviceToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateApnsDeviceToken_args(updateApnsDeviceToken_args other) {
      if (other.isSetApnsDeviceToken()) {
        this.apnsDeviceToken = new byte[other.apnsDeviceToken.length];
        System.arraycopy(other.apnsDeviceToken, 0, apnsDeviceToken, 0, other.apnsDeviceToken.length);
      }
    }

    public updateApnsDeviceToken_args deepCopy() {
      return new updateApnsDeviceToken_args(this);
    }

    public void clear() {
      this.apnsDeviceToken = null;
    }

    public byte[] getApnsDeviceToken() {
      return this.apnsDeviceToken;
    }

    public void setApnsDeviceToken(byte[] apnsDeviceToken) {
      this.apnsDeviceToken = apnsDeviceToken;
    }

    public void unsetApnsDeviceToken() {
      this.apnsDeviceToken = null;
    }

    /** Returns true if field apnsDeviceToken is set (has been assigned a value) and false otherwise */
    public boolean isSetApnsDeviceToken() {
      return this.apnsDeviceToken != null;
    }

    public void setApnsDeviceTokenIsSet(boolean value) {
      if (!value) {
        this.apnsDeviceToken = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateApnsDeviceToken_args)
        return this.equals((updateApnsDeviceToken_args)that);
      return false;
    }

    public boolean equals(updateApnsDeviceToken_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_apnsDeviceToken = true && this.isSetApnsDeviceToken();
      boolean that_present_apnsDeviceToken = true && that.isSetApnsDeviceToken();
      if (this_present_apnsDeviceToken || that_present_apnsDeviceToken) {
        if (!(this_present_apnsDeviceToken && that_present_apnsDeviceToken))
          return false;
        if (TBaseHelper.compareTo(this.apnsDeviceToken, that.apnsDeviceToken) != 0)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateApnsDeviceToken_args other = (updateApnsDeviceToken_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetApnsDeviceToken(), other.isSetApnsDeviceToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApnsDeviceToken()) {
        lastComparison = TBaseHelper.compareTo(this.apnsDeviceToken, other.apnsDeviceToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // APNS_DEVICE_TOKEN
            if (field.type == TType.STRING) {
              this.apnsDeviceToken = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.apnsDeviceToken != null) {
        oprot.writeFieldBegin(APNS_DEVICE_TOKEN_FIELD_DESC);
        oprot.writeBinary(this.apnsDeviceToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateApnsDeviceToken_args(");
      boolean first = true;

      sb.append("apnsDeviceToken:");
      if (this.apnsDeviceToken == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.apnsDeviceToken, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateApnsDeviceToken_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateApnsDeviceToken_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public updateApnsDeviceToken_result() {
    }

    public updateApnsDeviceToken_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateApnsDeviceToken_result(updateApnsDeviceToken_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public updateApnsDeviceToken_result deepCopy() {
      return new updateApnsDeviceToken_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateApnsDeviceToken_result)
        return this.equals((updateApnsDeviceToken_result)that);
      return false;
    }

    public boolean equals(updateApnsDeviceToken_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateApnsDeviceToken_result other = (updateApnsDeviceToken_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateApnsDeviceToken_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateBuddySetting_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateBuddySetting_args");

    private static final TField KEY_FIELD_DESC = new TField("key", TType.STRING, (short)2);
    private static final TField VALUE_FIELD_DESC = new TField("value", TType.STRING, (short)3);

    private String key;
    private String value;

    // isset id assignments

    public updateBuddySetting_args() {
    }

    public updateBuddySetting_args(
      String key,
      String value)
    {
      this();
      this.key = key;
      this.value = value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBuddySetting_args(updateBuddySetting_args other) {
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetValue()) {
        this.value = other.value;
      }
    }

    public updateBuddySetting_args deepCopy() {
      return new updateBuddySetting_args(this);
    }

    public void clear() {
      this.key = null;
      this.value = null;
    }

    public String getKey() {
      return this.key;
    }

    public void setKey(String key) {
      this.key = key;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public String getValue() {
      return this.value;
    }

    public void setValue(String value) {
      this.value = value;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBuddySetting_args)
        return this.equals((updateBuddySetting_args)that);
      return false;
    }

    public boolean equals(updateBuddySetting_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateBuddySetting_args other = (updateBuddySetting_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetKey(), other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetValue(), other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // KEY
            if (field.type == TType.STRING) {
              this.key = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // VALUE
            if (field.type == TType.STRING) {
              this.value = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(this.key);
        oprot.writeFieldEnd();
      }
      if (this.value != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeString(this.value);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateBuddySetting_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateBuddySetting_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateBuddySetting_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public updateBuddySetting_result() {
    }

    public updateBuddySetting_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBuddySetting_result(updateBuddySetting_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public updateBuddySetting_result deepCopy() {
      return new updateBuddySetting_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBuddySetting_result)
        return this.equals((updateBuddySetting_result)that);
      return false;
    }

    public boolean equals(updateBuddySetting_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateBuddySetting_result other = (updateBuddySetting_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateBuddySetting_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateC2DMRegistrationId_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateC2DMRegistrationId_args");

    private static final TField REGISTRATION_ID_FIELD_DESC = new TField("registrationId", TType.STRING, (short)2);

    private String registrationId;

    // isset id assignments

    public updateC2DMRegistrationId_args() {
    }

    public updateC2DMRegistrationId_args(
      String registrationId)
    {
      this();
      this.registrationId = registrationId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateC2DMRegistrationId_args(updateC2DMRegistrationId_args other) {
      if (other.isSetRegistrationId()) {
        this.registrationId = other.registrationId;
      }
    }

    public updateC2DMRegistrationId_args deepCopy() {
      return new updateC2DMRegistrationId_args(this);
    }

    public void clear() {
      this.registrationId = null;
    }

    public String getRegistrationId() {
      return this.registrationId;
    }

    public void setRegistrationId(String registrationId) {
      this.registrationId = registrationId;
    }

    public void unsetRegistrationId() {
      this.registrationId = null;
    }

    /** Returns true if field registrationId is set (has been assigned a value) and false otherwise */
    public boolean isSetRegistrationId() {
      return this.registrationId != null;
    }

    public void setRegistrationIdIsSet(boolean value) {
      if (!value) {
        this.registrationId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateC2DMRegistrationId_args)
        return this.equals((updateC2DMRegistrationId_args)that);
      return false;
    }

    public boolean equals(updateC2DMRegistrationId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_registrationId = true && this.isSetRegistrationId();
      boolean that_present_registrationId = true && that.isSetRegistrationId();
      if (this_present_registrationId || that_present_registrationId) {
        if (!(this_present_registrationId && that_present_registrationId))
          return false;
        if (!this.registrationId.equals(that.registrationId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateC2DMRegistrationId_args other = (updateC2DMRegistrationId_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRegistrationId(), other.isSetRegistrationId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegistrationId()) {
        lastComparison = TBaseHelper.compareTo(this.registrationId, other.registrationId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // REGISTRATION_ID
            if (field.type == TType.STRING) {
              this.registrationId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.registrationId != null) {
        oprot.writeFieldBegin(REGISTRATION_ID_FIELD_DESC);
        oprot.writeString(this.registrationId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateC2DMRegistrationId_args(");
      boolean first = true;

      sb.append("registrationId:");
      if (this.registrationId == null) {
        sb.append("null");
      } else {
        sb.append(this.registrationId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateC2DMRegistrationId_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateC2DMRegistrationId_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public updateC2DMRegistrationId_result() {
    }

    public updateC2DMRegistrationId_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateC2DMRegistrationId_result(updateC2DMRegistrationId_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public updateC2DMRegistrationId_result deepCopy() {
      return new updateC2DMRegistrationId_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateC2DMRegistrationId_result)
        return this.equals((updateC2DMRegistrationId_result)that);
      return false;
    }

    public boolean equals(updateC2DMRegistrationId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateC2DMRegistrationId_result other = (updateC2DMRegistrationId_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateC2DMRegistrationId_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateContactSetting_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateContactSetting_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField MID_FIELD_DESC = new TField("mid", TType.STRING, (short)2);
    private static final TField FLAG_FIELD_DESC = new TField("flag", TType.I32, (short)3);
    private static final TField VALUE_FIELD_DESC = new TField("value", TType.STRING, (short)4);

    private int reqSeq;
    private String mid;
    private ContactSetting flag;
    private String value;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public updateContactSetting_args() {
    }

    public updateContactSetting_args(
      int reqSeq,
      String mid,
      ContactSetting flag,
      String value)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.mid = mid;
      this.flag = flag;
      this.value = value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateContactSetting_args(updateContactSetting_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetMid()) {
        this.mid = other.mid;
      }
      if (other.isSetFlag()) {
        this.flag = other.flag;
      }
      if (other.isSetValue()) {
        this.value = other.value;
      }
    }

    public updateContactSetting_args deepCopy() {
      return new updateContactSetting_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.mid = null;
      this.flag = null;
      this.value = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public String getMid() {
      return this.mid;
    }

    public void setMid(String mid) {
      this.mid = mid;
    }

    public void unsetMid() {
      this.mid = null;
    }

    /** Returns true if field mid is set (has been assigned a value) and false otherwise */
    public boolean isSetMid() {
      return this.mid != null;
    }

    public void setMidIsSet(boolean value) {
      if (!value) {
        this.mid = null;
      }
    }

    /**
     * 
     * @see ContactSetting
     */
    public ContactSetting getFlag() {
      return this.flag;
    }

    /**
     * 
     * @see ContactSetting
     */
    public void setFlag(ContactSetting flag) {
      this.flag = flag;
    }

    public void unsetFlag() {
      this.flag = null;
    }

    /** Returns true if field flag is set (has been assigned a value) and false otherwise */
    public boolean isSetFlag() {
      return this.flag != null;
    }

    public void setFlagIsSet(boolean value) {
      if (!value) {
        this.flag = null;
      }
    }

    public String getValue() {
      return this.value;
    }

    public void setValue(String value) {
      this.value = value;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateContactSetting_args)
        return this.equals((updateContactSetting_args)that);
      return false;
    }

    public boolean equals(updateContactSetting_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_mid = true && this.isSetMid();
      boolean that_present_mid = true && that.isSetMid();
      if (this_present_mid || that_present_mid) {
        if (!(this_present_mid && that_present_mid))
          return false;
        if (!this.mid.equals(that.mid))
          return false;
      }

      boolean this_present_flag = true && this.isSetFlag();
      boolean that_present_flag = true && that.isSetFlag();
      if (this_present_flag || that_present_flag) {
        if (!(this_present_flag && that_present_flag))
          return false;
        if (!this.flag.equals(that.flag))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateContactSetting_args other = (updateContactSetting_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMid(), other.isSetMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMid()) {
        lastComparison = TBaseHelper.compareTo(this.mid, other.mid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetFlag(), other.isSetFlag());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFlag()) {
        lastComparison = TBaseHelper.compareTo(this.flag, other.flag);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetValue(), other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MID
            if (field.type == TType.STRING) {
              this.mid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // FLAG
            if (field.type == TType.I32) {
              this.flag = ContactSetting.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // VALUE
            if (field.type == TType.STRING) {
              this.value = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.mid != null) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeString(this.mid);
        oprot.writeFieldEnd();
      }
      if (this.flag != null) {
        oprot.writeFieldBegin(FLAG_FIELD_DESC);
        oprot.writeI32(this.flag.getValue());
        oprot.writeFieldEnd();
      }
      if (this.value != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeString(this.value);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateContactSetting_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("mid:");
      if (this.mid == null) {
        sb.append("null");
      } else {
        sb.append(this.mid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("flag:");
      if (this.flag == null) {
        sb.append("null");
      } else {
        sb.append(this.flag);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateContactSetting_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateContactSetting_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public updateContactSetting_result() {
    }

    public updateContactSetting_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateContactSetting_result(updateContactSetting_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public updateContactSetting_result deepCopy() {
      return new updateContactSetting_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateContactSetting_result)
        return this.equals((updateContactSetting_result)that);
      return false;
    }

    public boolean equals(updateContactSetting_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateContactSetting_result other = (updateContactSetting_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateContactSetting_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateCustomModeSettings_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateCustomModeSettings_args");

    private static final TField CUSTOM_MODE_FIELD_DESC = new TField("customMode", TType.I32, (short)2);
    private static final TField PARAM_MAP_FIELD_DESC = new TField("paramMap", TType.MAP, (short)3);

    private CustomMode customMode;
    private Hashtable paramMap;

    // isset id assignments

    public updateCustomModeSettings_args() {
    }

    public updateCustomModeSettings_args(
      CustomMode customMode,
      Hashtable paramMap)
    {
      this();
      this.customMode = customMode;
      this.paramMap = paramMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCustomModeSettings_args(updateCustomModeSettings_args other) {
      if (other.isSetCustomMode()) {
        this.customMode = other.customMode;
      }
      if (other.isSetParamMap()) {
        Hashtable __this__paramMap = new Hashtable();
        for (Enumeration other_enum = other.paramMap.keys(); other_enum.hasMoreElements(); ) {

          String other_element_key = (String)other_enum.nextElement();
          String other_element_value = (String)other.paramMap.get(other_element_key);

          String __this__paramMap_copy_key = other_element_key;

          String __this__paramMap_copy_value = other_element_value;

          __this__paramMap.put(__this__paramMap_copy_key, __this__paramMap_copy_value);
        }
        this.paramMap = __this__paramMap;
      }
    }

    public updateCustomModeSettings_args deepCopy() {
      return new updateCustomModeSettings_args(this);
    }

    public void clear() {
      this.customMode = null;
      this.paramMap = null;
    }

    /**
     * 
     * @see CustomMode
     */
    public CustomMode getCustomMode() {
      return this.customMode;
    }

    /**
     * 
     * @see CustomMode
     */
    public void setCustomMode(CustomMode customMode) {
      this.customMode = customMode;
    }

    public void unsetCustomMode() {
      this.customMode = null;
    }

    /** Returns true if field customMode is set (has been assigned a value) and false otherwise */
    public boolean isSetCustomMode() {
      return this.customMode != null;
    }

    public void setCustomModeIsSet(boolean value) {
      if (!value) {
        this.customMode = null;
      }
    }

    public int getParamMapSize() {
      return (this.paramMap == null) ? 0 : this.paramMap.size();
    }

    public void putToParamMap(String key, String val) {
      if (this.paramMap == null) {
        this.paramMap = new Hashtable();
      }
      this.paramMap.put(key, val);
    }

    public Hashtable getParamMap() {
      return this.paramMap;
    }

    public void setParamMap(Hashtable paramMap) {
      this.paramMap = paramMap;
    }

    public void unsetParamMap() {
      this.paramMap = null;
    }

    /** Returns true if field paramMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParamMap() {
      return this.paramMap != null;
    }

    public void setParamMapIsSet(boolean value) {
      if (!value) {
        this.paramMap = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCustomModeSettings_args)
        return this.equals((updateCustomModeSettings_args)that);
      return false;
    }

    public boolean equals(updateCustomModeSettings_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_customMode = true && this.isSetCustomMode();
      boolean that_present_customMode = true && that.isSetCustomMode();
      if (this_present_customMode || that_present_customMode) {
        if (!(this_present_customMode && that_present_customMode))
          return false;
        if (!this.customMode.equals(that.customMode))
          return false;
      }

      boolean this_present_paramMap = true && this.isSetParamMap();
      boolean that_present_paramMap = true && that.isSetParamMap();
      if (this_present_paramMap || that_present_paramMap) {
        if (!(this_present_paramMap && that_present_paramMap))
          return false;
        if (!this.paramMap.equals(that.paramMap))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateCustomModeSettings_args other = (updateCustomModeSettings_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetCustomMode(), other.isSetCustomMode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCustomMode()) {
        lastComparison = TBaseHelper.compareTo(this.customMode, other.customMode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetParamMap(), other.isSetParamMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParamMap()) {
        lastComparison = TBaseHelper.compareTo(this.paramMap, other.paramMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // CUSTOM_MODE
            if (field.type == TType.I32) {
              this.customMode = CustomMode.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PARAM_MAP
            if (field.type == TType.MAP) {
              {
                TMap _map1186 = iprot.readMapBegin();
                this.paramMap = new Hashtable(2*_map1186.size);
                for (int _i1187 = 0; _i1187 < _map1186.size; ++_i1187)
                {
                  String _key1188;
                  String _val1189;
                  _key1188 = iprot.readString();
                  _val1189 = iprot.readString();
                  this.paramMap.put(_key1188, _val1189);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.customMode != null) {
        oprot.writeFieldBegin(CUSTOM_MODE_FIELD_DESC);
        oprot.writeI32(this.customMode.getValue());
        oprot.writeFieldEnd();
      }
      if (this.paramMap != null) {
        oprot.writeFieldBegin(PARAM_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.paramMap.size()));
          for (Enumeration _iter1190_enum = this.paramMap.keys(); _iter1190_enum.hasMoreElements(); )           {
            String _iter1190 = (String)_iter1190_enum.nextElement();
            oprot.writeString(_iter1190);
            oprot.writeString(((String)this.paramMap.get(_iter1190)));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateCustomModeSettings_args(");
      boolean first = true;

      sb.append("customMode:");
      if (this.customMode == null) {
        sb.append("null");
      } else {
        sb.append(this.customMode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("paramMap:");
      if (this.paramMap == null) {
        sb.append("null");
      } else {
        sb.append(this.paramMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateCustomModeSettings_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateCustomModeSettings_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public updateCustomModeSettings_result() {
    }

    public updateCustomModeSettings_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateCustomModeSettings_result(updateCustomModeSettings_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public updateCustomModeSettings_result deepCopy() {
      return new updateCustomModeSettings_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateCustomModeSettings_result)
        return this.equals((updateCustomModeSettings_result)that);
      return false;
    }

    public boolean equals(updateCustomModeSettings_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateCustomModeSettings_result other = (updateCustomModeSettings_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateCustomModeSettings_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateDeviceInfo_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateDeviceInfo_args");

    private static final TField DEVICE_UID_FIELD_DESC = new TField("deviceUid", TType.STRING, (short)2);
    private static final TField DEVICE_INFO_FIELD_DESC = new TField("deviceInfo", TType.STRUCT, (short)3);

    private String deviceUid;
    private DeviceInfo deviceInfo;

    // isset id assignments

    public updateDeviceInfo_args() {
    }

    public updateDeviceInfo_args(
      String deviceUid,
      DeviceInfo deviceInfo)
    {
      this();
      this.deviceUid = deviceUid;
      this.deviceInfo = deviceInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateDeviceInfo_args(updateDeviceInfo_args other) {
      if (other.isSetDeviceUid()) {
        this.deviceUid = other.deviceUid;
      }
      if (other.isSetDeviceInfo()) {
        this.deviceInfo = new DeviceInfo(other.deviceInfo);
      }
    }

    public updateDeviceInfo_args deepCopy() {
      return new updateDeviceInfo_args(this);
    }

    public void clear() {
      this.deviceUid = null;
      this.deviceInfo = null;
    }

    public String getDeviceUid() {
      return this.deviceUid;
    }

    public void setDeviceUid(String deviceUid) {
      this.deviceUid = deviceUid;
    }

    public void unsetDeviceUid() {
      this.deviceUid = null;
    }

    /** Returns true if field deviceUid is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceUid() {
      return this.deviceUid != null;
    }

    public void setDeviceUidIsSet(boolean value) {
      if (!value) {
        this.deviceUid = null;
      }
    }

    public DeviceInfo getDeviceInfo() {
      return this.deviceInfo;
    }

    public void setDeviceInfo(DeviceInfo deviceInfo) {
      this.deviceInfo = deviceInfo;
    }

    public void unsetDeviceInfo() {
      this.deviceInfo = null;
    }

    /** Returns true if field deviceInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceInfo() {
      return this.deviceInfo != null;
    }

    public void setDeviceInfoIsSet(boolean value) {
      if (!value) {
        this.deviceInfo = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateDeviceInfo_args)
        return this.equals((updateDeviceInfo_args)that);
      return false;
    }

    public boolean equals(updateDeviceInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_deviceUid = true && this.isSetDeviceUid();
      boolean that_present_deviceUid = true && that.isSetDeviceUid();
      if (this_present_deviceUid || that_present_deviceUid) {
        if (!(this_present_deviceUid && that_present_deviceUid))
          return false;
        if (!this.deviceUid.equals(that.deviceUid))
          return false;
      }

      boolean this_present_deviceInfo = true && this.isSetDeviceInfo();
      boolean that_present_deviceInfo = true && that.isSetDeviceInfo();
      if (this_present_deviceInfo || that_present_deviceInfo) {
        if (!(this_present_deviceInfo && that_present_deviceInfo))
          return false;
        if (!this.deviceInfo.equals(that.deviceInfo))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateDeviceInfo_args other = (updateDeviceInfo_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetDeviceUid(), other.isSetDeviceUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceUid()) {
        lastComparison = TBaseHelper.compareTo(this.deviceUid, other.deviceUid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetDeviceInfo(), other.isSetDeviceInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceInfo()) {
        lastComparison = this.deviceInfo.compareTo(other.deviceInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // DEVICE_UID
            if (field.type == TType.STRING) {
              this.deviceUid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // DEVICE_INFO
            if (field.type == TType.STRUCT) {
              this.deviceInfo = new DeviceInfo();
              this.deviceInfo.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.deviceUid != null) {
        oprot.writeFieldBegin(DEVICE_UID_FIELD_DESC);
        oprot.writeString(this.deviceUid);
        oprot.writeFieldEnd();
      }
      if (this.deviceInfo != null) {
        oprot.writeFieldBegin(DEVICE_INFO_FIELD_DESC);
        this.deviceInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateDeviceInfo_args(");
      boolean first = true;

      sb.append("deviceUid:");
      if (this.deviceUid == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceUid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deviceInfo:");
      if (this.deviceInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.deviceInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateDeviceInfo_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateDeviceInfo_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public updateDeviceInfo_result() {
    }

    public updateDeviceInfo_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateDeviceInfo_result(updateDeviceInfo_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public updateDeviceInfo_result deepCopy() {
      return new updateDeviceInfo_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateDeviceInfo_result)
        return this.equals((updateDeviceInfo_result)that);
      return false;
    }

    public boolean equals(updateDeviceInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateDeviceInfo_result other = (updateDeviceInfo_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateDeviceInfo_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateGroup_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateGroup_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField GROUP_FIELD_DESC = new TField("group", TType.STRUCT, (short)2);

    private int reqSeq;
    private Group group;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public updateGroup_args() {
    }

    public updateGroup_args(
      int reqSeq,
      Group group)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.group = group;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateGroup_args(updateGroup_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetGroup()) {
        this.group = new Group(other.group);
      }
    }

    public updateGroup_args deepCopy() {
      return new updateGroup_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.group = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public Group getGroup() {
      return this.group;
    }

    public void setGroup(Group group) {
      this.group = group;
    }

    public void unsetGroup() {
      this.group = null;
    }

    /** Returns true if field group is set (has been assigned a value) and false otherwise */
    public boolean isSetGroup() {
      return this.group != null;
    }

    public void setGroupIsSet(boolean value) {
      if (!value) {
        this.group = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateGroup_args)
        return this.equals((updateGroup_args)that);
      return false;
    }

    public boolean equals(updateGroup_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_group = true && this.isSetGroup();
      boolean that_present_group = true && that.isSetGroup();
      if (this_present_group || that_present_group) {
        if (!(this_present_group && that_present_group))
          return false;
        if (!this.group.equals(that.group))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateGroup_args other = (updateGroup_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetGroup(), other.isSetGroup());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroup()) {
        lastComparison = this.group.compareTo(other.group);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // GROUP
            if (field.type == TType.STRUCT) {
              this.group = new Group();
              this.group.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.group != null) {
        oprot.writeFieldBegin(GROUP_FIELD_DESC);
        this.group.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateGroup_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("group:");
      if (this.group == null) {
        sb.append("null");
      } else {
        sb.append(this.group);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateGroup_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateGroup_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public updateGroup_result() {
    }

    public updateGroup_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateGroup_result(updateGroup_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public updateGroup_result deepCopy() {
      return new updateGroup_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateGroup_result)
        return this.equals((updateGroup_result)that);
      return false;
    }

    public boolean equals(updateGroup_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateGroup_result other = (updateGroup_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateGroup_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateNotificationToken_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateNotificationToken_args");

    private static final TField TYPE_FIELD_DESC = new TField("type", TType.I32, (short)3);
    private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)2);

    private NotificationType type;
    private String token;

    // isset id assignments

    public updateNotificationToken_args() {
    }

    public updateNotificationToken_args(
      NotificationType type,
      String token)
    {
      this();
      this.type = type;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateNotificationToken_args(updateNotificationToken_args other) {
      if (other.isSetType()) {
        this.type = other.type;
      }
      if (other.isSetToken()) {
        this.token = other.token;
      }
    }

    public updateNotificationToken_args deepCopy() {
      return new updateNotificationToken_args(this);
    }

    public void clear() {
      this.type = null;
      this.token = null;
    }

    /**
     * 
     * @see NotificationType
     */
    public NotificationType getType() {
      return this.type;
    }

    /**
     * 
     * @see NotificationType
     */
    public void setType(NotificationType type) {
      this.type = type;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public String getToken() {
      return this.token;
    }

    public void setToken(String token) {
      this.token = token;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateNotificationToken_args)
        return this.equals((updateNotificationToken_args)that);
      return false;
    }

    public boolean equals(updateNotificationToken_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (!this.token.equals(that.token))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateNotificationToken_args other = (updateNotificationToken_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetType(), other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetToken(), other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 3: // TYPE
            if (field.type == TType.I32) {
              this.type = NotificationType.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TOKEN
            if (field.type == TType.STRING) {
              this.token = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(this.token);
        oprot.writeFieldEnd();
      }
      if (this.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(this.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateNotificationToken_args(");
      boolean first = true;

      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateNotificationToken_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateNotificationToken_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public updateNotificationToken_result() {
    }

    public updateNotificationToken_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateNotificationToken_result(updateNotificationToken_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public updateNotificationToken_result deepCopy() {
      return new updateNotificationToken_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateNotificationToken_result)
        return this.equals((updateNotificationToken_result)that);
      return false;
    }

    public boolean equals(updateNotificationToken_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateNotificationToken_result other = (updateNotificationToken_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateNotificationToken_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateNotificationTokenWithBytes_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateNotificationTokenWithBytes_args");

    private static final TField TYPE_FIELD_DESC = new TField("type", TType.I32, (short)3);
    private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)2);

    private NotificationType type;
    private byte[] token;

    // isset id assignments

    public updateNotificationTokenWithBytes_args() {
    }

    public updateNotificationTokenWithBytes_args(
      NotificationType type,
      byte[] token)
    {
      this();
      this.type = type;
      this.token = token;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateNotificationTokenWithBytes_args(updateNotificationTokenWithBytes_args other) {
      if (other.isSetType()) {
        this.type = other.type;
      }
      if (other.isSetToken()) {
        this.token = new byte[other.token.length];
        System.arraycopy(other.token, 0, token, 0, other.token.length);
      }
    }

    public updateNotificationTokenWithBytes_args deepCopy() {
      return new updateNotificationTokenWithBytes_args(this);
    }

    public void clear() {
      this.type = null;
      this.token = null;
    }

    /**
     * 
     * @see NotificationType
     */
    public NotificationType getType() {
      return this.type;
    }

    /**
     * 
     * @see NotificationType
     */
    public void setType(NotificationType type) {
      this.type = type;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public byte[] getToken() {
      return this.token;
    }

    public void setToken(byte[] token) {
      this.token = token;
    }

    public void unsetToken() {
      this.token = null;
    }

    /** Returns true if field token is set (has been assigned a value) and false otherwise */
    public boolean isSetToken() {
      return this.token != null;
    }

    public void setTokenIsSet(boolean value) {
      if (!value) {
        this.token = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateNotificationTokenWithBytes_args)
        return this.equals((updateNotificationTokenWithBytes_args)that);
      return false;
    }

    public boolean equals(updateNotificationTokenWithBytes_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      boolean this_present_token = true && this.isSetToken();
      boolean that_present_token = true && that.isSetToken();
      if (this_present_token || that_present_token) {
        if (!(this_present_token && that_present_token))
          return false;
        if (TBaseHelper.compareTo(this.token, that.token) != 0)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateNotificationTokenWithBytes_args other = (updateNotificationTokenWithBytes_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetType(), other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetToken(), other.isSetToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToken()) {
        lastComparison = TBaseHelper.compareTo(this.token, other.token);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 3: // TYPE
            if (field.type == TType.I32) {
              this.type = NotificationType.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // TOKEN
            if (field.type == TType.STRING) {
              this.token = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeBinary(this.token);
        oprot.writeFieldEnd();
      }
      if (this.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(this.type.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateNotificationTokenWithBytes_args(");
      boolean first = true;

      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.token, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateNotificationTokenWithBytes_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateNotificationTokenWithBytes_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public updateNotificationTokenWithBytes_result() {
    }

    public updateNotificationTokenWithBytes_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateNotificationTokenWithBytes_result(updateNotificationTokenWithBytes_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public updateNotificationTokenWithBytes_result deepCopy() {
      return new updateNotificationTokenWithBytes_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateNotificationTokenWithBytes_result)
        return this.equals((updateNotificationTokenWithBytes_result)that);
      return false;
    }

    public boolean equals(updateNotificationTokenWithBytes_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateNotificationTokenWithBytes_result other = (updateNotificationTokenWithBytes_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateNotificationTokenWithBytes_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateProfile_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateProfile_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField PROFILE_FIELD_DESC = new TField("profile", TType.STRUCT, (short)2);

    private int reqSeq;
    private Profile profile;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public updateProfile_args() {
    }

    public updateProfile_args(
      int reqSeq,
      Profile profile)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.profile = profile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProfile_args(updateProfile_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetProfile()) {
        this.profile = new Profile(other.profile);
      }
    }

    public updateProfile_args deepCopy() {
      return new updateProfile_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.profile = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public Profile getProfile() {
      return this.profile;
    }

    public void setProfile(Profile profile) {
      this.profile = profile;
    }

    public void unsetProfile() {
      this.profile = null;
    }

    /** Returns true if field profile is set (has been assigned a value) and false otherwise */
    public boolean isSetProfile() {
      return this.profile != null;
    }

    public void setProfileIsSet(boolean value) {
      if (!value) {
        this.profile = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProfile_args)
        return this.equals((updateProfile_args)that);
      return false;
    }

    public boolean equals(updateProfile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_profile = true && this.isSetProfile();
      boolean that_present_profile = true && that.isSetProfile();
      if (this_present_profile || that_present_profile) {
        if (!(this_present_profile && that_present_profile))
          return false;
        if (!this.profile.equals(that.profile))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateProfile_args other = (updateProfile_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetProfile(), other.isSetProfile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfile()) {
        lastComparison = this.profile.compareTo(other.profile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // PROFILE
            if (field.type == TType.STRUCT) {
              this.profile = new Profile();
              this.profile.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.profile != null) {
        oprot.writeFieldBegin(PROFILE_FIELD_DESC);
        this.profile.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateProfile_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("profile:");
      if (this.profile == null) {
        sb.append("null");
      } else {
        sb.append(this.profile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateProfile_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateProfile_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public updateProfile_result() {
    }

    public updateProfile_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProfile_result(updateProfile_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public updateProfile_result deepCopy() {
      return new updateProfile_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProfile_result)
        return this.equals((updateProfile_result)that);
      return false;
    }

    public boolean equals(updateProfile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateProfile_result other = (updateProfile_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateProfile_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateProfileAttribute_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateProfileAttribute_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField ATTR_FIELD_DESC = new TField("attr", TType.I32, (short)2);
    private static final TField VALUE_FIELD_DESC = new TField("value", TType.STRING, (short)3);

    private int reqSeq;
    private ProfileAttribute attr;
    private String value;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public updateProfileAttribute_args() {
    }

    public updateProfileAttribute_args(
      int reqSeq,
      ProfileAttribute attr,
      String value)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.attr = attr;
      this.value = value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProfileAttribute_args(updateProfileAttribute_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetAttr()) {
        this.attr = other.attr;
      }
      if (other.isSetValue()) {
        this.value = other.value;
      }
    }

    public updateProfileAttribute_args deepCopy() {
      return new updateProfileAttribute_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.attr = null;
      this.value = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    /**
     * 
     * @see ProfileAttribute
     */
    public ProfileAttribute getAttr() {
      return this.attr;
    }

    /**
     * 
     * @see ProfileAttribute
     */
    public void setAttr(ProfileAttribute attr) {
      this.attr = attr;
    }

    public void unsetAttr() {
      this.attr = null;
    }

    /** Returns true if field attr is set (has been assigned a value) and false otherwise */
    public boolean isSetAttr() {
      return this.attr != null;
    }

    public void setAttrIsSet(boolean value) {
      if (!value) {
        this.attr = null;
      }
    }

    public String getValue() {
      return this.value;
    }

    public void setValue(String value) {
      this.value = value;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProfileAttribute_args)
        return this.equals((updateProfileAttribute_args)that);
      return false;
    }

    public boolean equals(updateProfileAttribute_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_attr = true && this.isSetAttr();
      boolean that_present_attr = true && that.isSetAttr();
      if (this_present_attr || that_present_attr) {
        if (!(this_present_attr && that_present_attr))
          return false;
        if (!this.attr.equals(that.attr))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateProfileAttribute_args other = (updateProfileAttribute_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetAttr(), other.isSetAttr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttr()) {
        lastComparison = TBaseHelper.compareTo(this.attr, other.attr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetValue(), other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ATTR
            if (field.type == TType.I32) {
              this.attr = ProfileAttribute.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // VALUE
            if (field.type == TType.STRING) {
              this.value = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.attr != null) {
        oprot.writeFieldBegin(ATTR_FIELD_DESC);
        oprot.writeI32(this.attr.getValue());
        oprot.writeFieldEnd();
      }
      if (this.value != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeString(this.value);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateProfileAttribute_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("attr:");
      if (this.attr == null) {
        sb.append("null");
      } else {
        sb.append(this.attr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateProfileAttribute_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateProfileAttribute_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public updateProfileAttribute_result() {
    }

    public updateProfileAttribute_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProfileAttribute_result(updateProfileAttribute_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public updateProfileAttribute_result deepCopy() {
      return new updateProfileAttribute_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProfileAttribute_result)
        return this.equals((updateProfileAttribute_result)that);
      return false;
    }

    public boolean equals(updateProfileAttribute_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateProfileAttribute_result other = (updateProfileAttribute_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateProfileAttribute_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateRegion_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateRegion_args");

    private static final TField REGION_FIELD_DESC = new TField("region", TType.STRING, (short)2);

    private String region;

    // isset id assignments

    public updateRegion_args() {
    }

    public updateRegion_args(
      String region)
    {
      this();
      this.region = region;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRegion_args(updateRegion_args other) {
      if (other.isSetRegion()) {
        this.region = other.region;
      }
    }

    public updateRegion_args deepCopy() {
      return new updateRegion_args(this);
    }

    public void clear() {
      this.region = null;
    }

    public String getRegion() {
      return this.region;
    }

    public void setRegion(String region) {
      this.region = region;
    }

    public void unsetRegion() {
      this.region = null;
    }

    /** Returns true if field region is set (has been assigned a value) and false otherwise */
    public boolean isSetRegion() {
      return this.region != null;
    }

    public void setRegionIsSet(boolean value) {
      if (!value) {
        this.region = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRegion_args)
        return this.equals((updateRegion_args)that);
      return false;
    }

    public boolean equals(updateRegion_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_region = true && this.isSetRegion();
      boolean that_present_region = true && that.isSetRegion();
      if (this_present_region || that_present_region) {
        if (!(this_present_region && that_present_region))
          return false;
        if (!this.region.equals(that.region))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateRegion_args other = (updateRegion_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRegion(), other.isSetRegion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegion()) {
        lastComparison = TBaseHelper.compareTo(this.region, other.region);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // REGION
            if (field.type == TType.STRING) {
              this.region = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.region != null) {
        oprot.writeFieldBegin(REGION_FIELD_DESC);
        oprot.writeString(this.region);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateRegion_args(");
      boolean first = true;

      sb.append("region:");
      if (this.region == null) {
        sb.append("null");
      } else {
        sb.append(this.region);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateRegion_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateRegion_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public updateRegion_result() {
    }

    public updateRegion_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateRegion_result(updateRegion_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public updateRegion_result deepCopy() {
      return new updateRegion_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateRegion_result)
        return this.equals((updateRegion_result)that);
      return false;
    }

    public boolean equals(updateRegion_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateRegion_result other = (updateRegion_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateRegion_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateSettings_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateSettings_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField SETTINGS_FIELD_DESC = new TField("settings", TType.STRUCT, (short)2);

    private int reqSeq;
    private Settings settings;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public updateSettings_args() {
    }

    public updateSettings_args(
      int reqSeq,
      Settings settings)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.settings = settings;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSettings_args(updateSettings_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetSettings()) {
        this.settings = new Settings(other.settings);
      }
    }

    public updateSettings_args deepCopy() {
      return new updateSettings_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.settings = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public Settings getSettings() {
      return this.settings;
    }

    public void setSettings(Settings settings) {
      this.settings = settings;
    }

    public void unsetSettings() {
      this.settings = null;
    }

    /** Returns true if field settings is set (has been assigned a value) and false otherwise */
    public boolean isSetSettings() {
      return this.settings != null;
    }

    public void setSettingsIsSet(boolean value) {
      if (!value) {
        this.settings = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSettings_args)
        return this.equals((updateSettings_args)that);
      return false;
    }

    public boolean equals(updateSettings_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_settings = true && this.isSetSettings();
      boolean that_present_settings = true && that.isSetSettings();
      if (this_present_settings || that_present_settings) {
        if (!(this_present_settings && that_present_settings))
          return false;
        if (!this.settings.equals(that.settings))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateSettings_args other = (updateSettings_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSettings(), other.isSetSettings());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSettings()) {
        lastComparison = this.settings.compareTo(other.settings);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SETTINGS
            if (field.type == TType.STRUCT) {
              this.settings = new Settings();
              this.settings.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.settings != null) {
        oprot.writeFieldBegin(SETTINGS_FIELD_DESC);
        this.settings.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateSettings_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("settings:");
      if (this.settings == null) {
        sb.append("null");
      } else {
        sb.append(this.settings);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateSettings_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateSettings_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public updateSettings_result() {
    }

    public updateSettings_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSettings_result(updateSettings_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public updateSettings_result deepCopy() {
      return new updateSettings_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSettings_result)
        return this.equals((updateSettings_result)that);
      return false;
    }

    public boolean equals(updateSettings_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateSettings_result other = (updateSettings_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateSettings_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateSettings2_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateSettings2_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField SETTINGS_FIELD_DESC = new TField("settings", TType.STRUCT, (short)2);

    private int reqSeq;
    private Settings settings;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public updateSettings2_args() {
    }

    public updateSettings2_args(
      int reqSeq,
      Settings settings)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.settings = settings;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSettings2_args(updateSettings2_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetSettings()) {
        this.settings = new Settings(other.settings);
      }
    }

    public updateSettings2_args deepCopy() {
      return new updateSettings2_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.settings = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public Settings getSettings() {
      return this.settings;
    }

    public void setSettings(Settings settings) {
      this.settings = settings;
    }

    public void unsetSettings() {
      this.settings = null;
    }

    /** Returns true if field settings is set (has been assigned a value) and false otherwise */
    public boolean isSetSettings() {
      return this.settings != null;
    }

    public void setSettingsIsSet(boolean value) {
      if (!value) {
        this.settings = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSettings2_args)
        return this.equals((updateSettings2_args)that);
      return false;
    }

    public boolean equals(updateSettings2_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_settings = true && this.isSetSettings();
      boolean that_present_settings = true && that.isSetSettings();
      if (this_present_settings || that_present_settings) {
        if (!(this_present_settings && that_present_settings))
          return false;
        if (!this.settings.equals(that.settings))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateSettings2_args other = (updateSettings2_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSettings(), other.isSetSettings());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSettings()) {
        lastComparison = this.settings.compareTo(other.settings);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SETTINGS
            if (field.type == TType.STRUCT) {
              this.settings = new Settings();
              this.settings.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.settings != null) {
        oprot.writeFieldBegin(SETTINGS_FIELD_DESC);
        this.settings.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateSettings2_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("settings:");
      if (this.settings == null) {
        sb.append("null");
      } else {
        sb.append(this.settings);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateSettings2_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateSettings2_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private int success;
    private TalkException e;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public updateSettings2_result() {
    }

    public updateSettings2_result(
      int success,
      TalkException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSettings2_result(updateSettings2_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public updateSettings2_result deepCopy() {
      return new updateSettings2_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSettings2_result)
        return this.equals((updateSettings2_result)that);
      return false;
    }

    public boolean equals(updateSettings2_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateSettings2_result other = (updateSettings2_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateSettings2_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateSettingsAttribute_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateSettingsAttribute_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField ATTR_FIELD_DESC = new TField("attr", TType.I32, (short)2);
    private static final TField VALUE_FIELD_DESC = new TField("value", TType.STRING, (short)3);

    private int reqSeq;
    private SettingsAttribute attr;
    private String value;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public updateSettingsAttribute_args() {
    }

    public updateSettingsAttribute_args(
      int reqSeq,
      SettingsAttribute attr,
      String value)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.attr = attr;
      this.value = value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSettingsAttribute_args(updateSettingsAttribute_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetAttr()) {
        this.attr = other.attr;
      }
      if (other.isSetValue()) {
        this.value = other.value;
      }
    }

    public updateSettingsAttribute_args deepCopy() {
      return new updateSettingsAttribute_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.attr = null;
      this.value = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    /**
     * 
     * @see SettingsAttribute
     */
    public SettingsAttribute getAttr() {
      return this.attr;
    }

    /**
     * 
     * @see SettingsAttribute
     */
    public void setAttr(SettingsAttribute attr) {
      this.attr = attr;
    }

    public void unsetAttr() {
      this.attr = null;
    }

    /** Returns true if field attr is set (has been assigned a value) and false otherwise */
    public boolean isSetAttr() {
      return this.attr != null;
    }

    public void setAttrIsSet(boolean value) {
      if (!value) {
        this.attr = null;
      }
    }

    public String getValue() {
      return this.value;
    }

    public void setValue(String value) {
      this.value = value;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSettingsAttribute_args)
        return this.equals((updateSettingsAttribute_args)that);
      return false;
    }

    public boolean equals(updateSettingsAttribute_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_attr = true && this.isSetAttr();
      boolean that_present_attr = true && that.isSetAttr();
      if (this_present_attr || that_present_attr) {
        if (!(this_present_attr && that_present_attr))
          return false;
        if (!this.attr.equals(that.attr))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateSettingsAttribute_args other = (updateSettingsAttribute_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetAttr(), other.isSetAttr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttr()) {
        lastComparison = TBaseHelper.compareTo(this.attr, other.attr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetValue(), other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ATTR
            if (field.type == TType.I32) {
              this.attr = SettingsAttribute.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // VALUE
            if (field.type == TType.STRING) {
              this.value = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.attr != null) {
        oprot.writeFieldBegin(ATTR_FIELD_DESC);
        oprot.writeI32(this.attr.getValue());
        oprot.writeFieldEnd();
      }
      if (this.value != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeString(this.value);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateSettingsAttribute_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("attr:");
      if (this.attr == null) {
        sb.append("null");
      } else {
        sb.append(this.attr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateSettingsAttribute_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateSettingsAttribute_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public updateSettingsAttribute_result() {
    }

    public updateSettingsAttribute_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSettingsAttribute_result(updateSettingsAttribute_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public updateSettingsAttribute_result deepCopy() {
      return new updateSettingsAttribute_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSettingsAttribute_result)
        return this.equals((updateSettingsAttribute_result)that);
      return false;
    }

    public boolean equals(updateSettingsAttribute_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateSettingsAttribute_result other = (updateSettingsAttribute_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateSettingsAttribute_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateSettingsAttributes_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateSettingsAttributes_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField ATTR_BITSET_FIELD_DESC = new TField("attrBitset", TType.I32, (short)2);
    private static final TField SETTINGS_FIELD_DESC = new TField("settings", TType.STRUCT, (short)3);

    private int reqSeq;
    private int attrBitset;
    private Settings settings;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private static final int __ATTRBITSET_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public updateSettingsAttributes_args() {
    }

    public updateSettingsAttributes_args(
      int reqSeq,
      int attrBitset,
      Settings settings)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.attrBitset = attrBitset;
      setAttrBitsetIsSet(true);
      this.settings = settings;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSettingsAttributes_args(updateSettingsAttributes_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      this.attrBitset = other.attrBitset;
      if (other.isSetSettings()) {
        this.settings = new Settings(other.settings);
      }
    }

    public updateSettingsAttributes_args deepCopy() {
      return new updateSettingsAttributes_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      setAttrBitsetIsSet(false);
      this.attrBitset = 0;
      this.settings = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public int getAttrBitset() {
      return this.attrBitset;
    }

    public void setAttrBitset(int attrBitset) {
      this.attrBitset = attrBitset;
      setAttrBitsetIsSet(true);
    }

    public void unsetAttrBitset() {
      __isset_vector[__ATTRBITSET_ISSET_ID] = false;
    }

    /** Returns true if field attrBitset is set (has been assigned a value) and false otherwise */
    public boolean isSetAttrBitset() {
      return __isset_vector[__ATTRBITSET_ISSET_ID];
    }

    public void setAttrBitsetIsSet(boolean value) {
      __isset_vector[__ATTRBITSET_ISSET_ID] = value;
    }

    public Settings getSettings() {
      return this.settings;
    }

    public void setSettings(Settings settings) {
      this.settings = settings;
    }

    public void unsetSettings() {
      this.settings = null;
    }

    /** Returns true if field settings is set (has been assigned a value) and false otherwise */
    public boolean isSetSettings() {
      return this.settings != null;
    }

    public void setSettingsIsSet(boolean value) {
      if (!value) {
        this.settings = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSettingsAttributes_args)
        return this.equals((updateSettingsAttributes_args)that);
      return false;
    }

    public boolean equals(updateSettingsAttributes_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_attrBitset = true;
      boolean that_present_attrBitset = true;
      if (this_present_attrBitset || that_present_attrBitset) {
        if (!(this_present_attrBitset && that_present_attrBitset))
          return false;
        if (this.attrBitset != that.attrBitset)
          return false;
      }

      boolean this_present_settings = true && this.isSetSettings();
      boolean that_present_settings = true && that.isSetSettings();
      if (this_present_settings || that_present_settings) {
        if (!(this_present_settings && that_present_settings))
          return false;
        if (!this.settings.equals(that.settings))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateSettingsAttributes_args other = (updateSettingsAttributes_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetAttrBitset(), other.isSetAttrBitset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttrBitset()) {
        lastComparison = TBaseHelper.compareTo(this.attrBitset, other.attrBitset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSettings(), other.isSetSettings());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSettings()) {
        lastComparison = this.settings.compareTo(other.settings);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ATTR_BITSET
            if (field.type == TType.I32) {
              this.attrBitset = iprot.readI32();
              setAttrBitsetIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SETTINGS
            if (field.type == TType.STRUCT) {
              this.settings = new Settings();
              this.settings.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ATTR_BITSET_FIELD_DESC);
      oprot.writeI32(this.attrBitset);
      oprot.writeFieldEnd();
      if (this.settings != null) {
        oprot.writeFieldBegin(SETTINGS_FIELD_DESC);
        this.settings.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateSettingsAttributes_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("attrBitset:");
      sb.append(this.attrBitset);
      first = false;
      if (!first) sb.append(", ");
      sb.append("settings:");
      if (this.settings == null) {
        sb.append("null");
      } else {
        sb.append(this.settings);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateSettingsAttributes_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateSettingsAttributes_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private int success;
    private TalkException e;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public updateSettingsAttributes_result() {
    }

    public updateSettingsAttributes_result(
      int success,
      TalkException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSettingsAttributes_result(updateSettingsAttributes_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public updateSettingsAttributes_result deepCopy() {
      return new updateSettingsAttributes_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSettingsAttributes_result)
        return this.equals((updateSettingsAttributes_result)that);
      return false;
    }

    public boolean equals(updateSettingsAttributes_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateSettingsAttributes_result other = (updateSettingsAttributes_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateSettingsAttributes_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class verifyIdentityCredential_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("verifyIdentityCredential_args");

    private static final TField IDENTITY_PROVIDER_FIELD_DESC = new TField("identityProvider", TType.I32, (short)8);
    private static final TField IDENTIFIER_FIELD_DESC = new TField("identifier", TType.STRING, (short)3);
    private static final TField PASSWORD_FIELD_DESC = new TField("password", TType.STRING, (short)4);

    private IdentityProvider identityProvider;
    private String identifier;
    private String password;

    // isset id assignments

    public verifyIdentityCredential_args() {
    }

    public verifyIdentityCredential_args(
      IdentityProvider identityProvider,
      String identifier,
      String password)
    {
      this();
      this.identityProvider = identityProvider;
      this.identifier = identifier;
      this.password = password;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyIdentityCredential_args(verifyIdentityCredential_args other) {
      if (other.isSetIdentityProvider()) {
        this.identityProvider = other.identityProvider;
      }
      if (other.isSetIdentifier()) {
        this.identifier = other.identifier;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
    }

    public verifyIdentityCredential_args deepCopy() {
      return new verifyIdentityCredential_args(this);
    }

    public void clear() {
      this.identityProvider = null;
      this.identifier = null;
      this.password = null;
    }

    /**
     * 
     * @see IdentityProvider
     */
    public IdentityProvider getIdentityProvider() {
      return this.identityProvider;
    }

    /**
     * 
     * @see IdentityProvider
     */
    public void setIdentityProvider(IdentityProvider identityProvider) {
      this.identityProvider = identityProvider;
    }

    public void unsetIdentityProvider() {
      this.identityProvider = null;
    }

    /** Returns true if field identityProvider is set (has been assigned a value) and false otherwise */
    public boolean isSetIdentityProvider() {
      return this.identityProvider != null;
    }

    public void setIdentityProviderIsSet(boolean value) {
      if (!value) {
        this.identityProvider = null;
      }
    }

    public String getIdentifier() {
      return this.identifier;
    }

    public void setIdentifier(String identifier) {
      this.identifier = identifier;
    }

    public void unsetIdentifier() {
      this.identifier = null;
    }

    /** Returns true if field identifier is set (has been assigned a value) and false otherwise */
    public boolean isSetIdentifier() {
      return this.identifier != null;
    }

    public void setIdentifierIsSet(boolean value) {
      if (!value) {
        this.identifier = null;
      }
    }

    public String getPassword() {
      return this.password;
    }

    public void setPassword(String password) {
      this.password = password;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyIdentityCredential_args)
        return this.equals((verifyIdentityCredential_args)that);
      return false;
    }

    public boolean equals(verifyIdentityCredential_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_identityProvider = true && this.isSetIdentityProvider();
      boolean that_present_identityProvider = true && that.isSetIdentityProvider();
      if (this_present_identityProvider || that_present_identityProvider) {
        if (!(this_present_identityProvider && that_present_identityProvider))
          return false;
        if (!this.identityProvider.equals(that.identityProvider))
          return false;
      }

      boolean this_present_identifier = true && this.isSetIdentifier();
      boolean that_present_identifier = true && that.isSetIdentifier();
      if (this_present_identifier || that_present_identifier) {
        if (!(this_present_identifier && that_present_identifier))
          return false;
        if (!this.identifier.equals(that.identifier))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      verifyIdentityCredential_args other = (verifyIdentityCredential_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetIdentityProvider(), other.isSetIdentityProvider());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdentityProvider()) {
        lastComparison = TBaseHelper.compareTo(this.identityProvider, other.identityProvider);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetIdentifier(), other.isSetIdentifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdentifier()) {
        lastComparison = TBaseHelper.compareTo(this.identifier, other.identifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPassword(), other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 8: // IDENTITY_PROVIDER
            if (field.type == TType.I32) {
              this.identityProvider = IdentityProvider.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // IDENTIFIER
            if (field.type == TType.STRING) {
              this.identifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // PASSWORD
            if (field.type == TType.STRING) {
              this.password = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.identifier != null) {
        oprot.writeFieldBegin(IDENTIFIER_FIELD_DESC);
        oprot.writeString(this.identifier);
        oprot.writeFieldEnd();
      }
      if (this.password != null) {
        oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
        oprot.writeString(this.password);
        oprot.writeFieldEnd();
      }
      if (this.identityProvider != null) {
        oprot.writeFieldBegin(IDENTITY_PROVIDER_FIELD_DESC);
        oprot.writeI32(this.identityProvider.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("verifyIdentityCredential_args(");
      boolean first = true;

      sb.append("identityProvider:");
      if (this.identityProvider == null) {
        sb.append("null");
      } else {
        sb.append(this.identityProvider);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("identifier:");
      if (this.identifier == null) {
        sb.append("null");
      } else {
        sb.append(this.identifier);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class verifyIdentityCredential_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("verifyIdentityCredential_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public verifyIdentityCredential_result() {
    }

    public verifyIdentityCredential_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyIdentityCredential_result(verifyIdentityCredential_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public verifyIdentityCredential_result deepCopy() {
      return new verifyIdentityCredential_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyIdentityCredential_result)
        return this.equals((verifyIdentityCredential_result)that);
      return false;
    }

    public boolean equals(verifyIdentityCredential_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      verifyIdentityCredential_result other = (verifyIdentityCredential_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("verifyIdentityCredential_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class verifyIdentityCredentialWithResult_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("verifyIdentityCredentialWithResult_args");

    private static final TField IDENTITY_CREDENTIAL_FIELD_DESC = new TField("identityCredential", TType.STRUCT, (short)2);

    private IdentityCredential identityCredential;

    // isset id assignments

    public verifyIdentityCredentialWithResult_args() {
    }

    public verifyIdentityCredentialWithResult_args(
      IdentityCredential identityCredential)
    {
      this();
      this.identityCredential = identityCredential;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyIdentityCredentialWithResult_args(verifyIdentityCredentialWithResult_args other) {
      if (other.isSetIdentityCredential()) {
        this.identityCredential = new IdentityCredential(other.identityCredential);
      }
    }

    public verifyIdentityCredentialWithResult_args deepCopy() {
      return new verifyIdentityCredentialWithResult_args(this);
    }

    public void clear() {
      this.identityCredential = null;
    }

    public IdentityCredential getIdentityCredential() {
      return this.identityCredential;
    }

    public void setIdentityCredential(IdentityCredential identityCredential) {
      this.identityCredential = identityCredential;
    }

    public void unsetIdentityCredential() {
      this.identityCredential = null;
    }

    /** Returns true if field identityCredential is set (has been assigned a value) and false otherwise */
    public boolean isSetIdentityCredential() {
      return this.identityCredential != null;
    }

    public void setIdentityCredentialIsSet(boolean value) {
      if (!value) {
        this.identityCredential = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyIdentityCredentialWithResult_args)
        return this.equals((verifyIdentityCredentialWithResult_args)that);
      return false;
    }

    public boolean equals(verifyIdentityCredentialWithResult_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_identityCredential = true && this.isSetIdentityCredential();
      boolean that_present_identityCredential = true && that.isSetIdentityCredential();
      if (this_present_identityCredential || that_present_identityCredential) {
        if (!(this_present_identityCredential && that_present_identityCredential))
          return false;
        if (!this.identityCredential.equals(that.identityCredential))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      verifyIdentityCredentialWithResult_args other = (verifyIdentityCredentialWithResult_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetIdentityCredential(), other.isSetIdentityCredential());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdentityCredential()) {
        lastComparison = this.identityCredential.compareTo(other.identityCredential);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // IDENTITY_CREDENTIAL
            if (field.type == TType.STRUCT) {
              this.identityCredential = new IdentityCredential();
              this.identityCredential.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.identityCredential != null) {
        oprot.writeFieldBegin(IDENTITY_CREDENTIAL_FIELD_DESC);
        this.identityCredential.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("verifyIdentityCredentialWithResult_args(");
      boolean first = true;

      sb.append("identityCredential:");
      if (this.identityCredential == null) {
        sb.append("null");
      } else {
        sb.append(this.identityCredential);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class verifyIdentityCredentialWithResult_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("verifyIdentityCredentialWithResult_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private UserAuthStatus success;
    private TalkException e;

    // isset id assignments

    public verifyIdentityCredentialWithResult_result() {
    }

    public verifyIdentityCredentialWithResult_result(
      UserAuthStatus success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyIdentityCredentialWithResult_result(verifyIdentityCredentialWithResult_result other) {
      if (other.isSetSuccess()) {
        this.success = new UserAuthStatus(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public verifyIdentityCredentialWithResult_result deepCopy() {
      return new verifyIdentityCredentialWithResult_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public UserAuthStatus getSuccess() {
      return this.success;
    }

    public void setSuccess(UserAuthStatus success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyIdentityCredentialWithResult_result)
        return this.equals((verifyIdentityCredentialWithResult_result)that);
      return false;
    }

    public boolean equals(verifyIdentityCredentialWithResult_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      verifyIdentityCredentialWithResult_result other = (verifyIdentityCredentialWithResult_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new UserAuthStatus();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("verifyIdentityCredentialWithResult_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class verifyPhone_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("verifyPhone_args");

    private static final TField SESSION_ID_FIELD_DESC = new TField("sessionId", TType.STRING, (short)2);
    private static final TField PIN_CODE_FIELD_DESC = new TField("pinCode", TType.STRING, (short)3);
    private static final TField UDID_HASH_FIELD_DESC = new TField("udidHash", TType.STRING, (short)4);

    private String sessionId;
    private String pinCode;
    private String udidHash;

    // isset id assignments

    public verifyPhone_args() {
    }

    public verifyPhone_args(
      String sessionId,
      String pinCode,
      String udidHash)
    {
      this();
      this.sessionId = sessionId;
      this.pinCode = pinCode;
      this.udidHash = udidHash;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyPhone_args(verifyPhone_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
      if (other.isSetPinCode()) {
        this.pinCode = other.pinCode;
      }
      if (other.isSetUdidHash()) {
        this.udidHash = other.udidHash;
      }
    }

    public verifyPhone_args deepCopy() {
      return new verifyPhone_args(this);
    }

    public void clear() {
      this.sessionId = null;
      this.pinCode = null;
      this.udidHash = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public void setSessionId(String sessionId) {
      this.sessionId = sessionId;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public String getPinCode() {
      return this.pinCode;
    }

    public void setPinCode(String pinCode) {
      this.pinCode = pinCode;
    }

    public void unsetPinCode() {
      this.pinCode = null;
    }

    /** Returns true if field pinCode is set (has been assigned a value) and false otherwise */
    public boolean isSetPinCode() {
      return this.pinCode != null;
    }

    public void setPinCodeIsSet(boolean value) {
      if (!value) {
        this.pinCode = null;
      }
    }

    public String getUdidHash() {
      return this.udidHash;
    }

    public void setUdidHash(String udidHash) {
      this.udidHash = udidHash;
    }

    public void unsetUdidHash() {
      this.udidHash = null;
    }

    /** Returns true if field udidHash is set (has been assigned a value) and false otherwise */
    public boolean isSetUdidHash() {
      return this.udidHash != null;
    }

    public void setUdidHashIsSet(boolean value) {
      if (!value) {
        this.udidHash = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyPhone_args)
        return this.equals((verifyPhone_args)that);
      return false;
    }

    public boolean equals(verifyPhone_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      boolean this_present_pinCode = true && this.isSetPinCode();
      boolean that_present_pinCode = true && that.isSetPinCode();
      if (this_present_pinCode || that_present_pinCode) {
        if (!(this_present_pinCode && that_present_pinCode))
          return false;
        if (!this.pinCode.equals(that.pinCode))
          return false;
      }

      boolean this_present_udidHash = true && this.isSetUdidHash();
      boolean that_present_udidHash = true && that.isSetUdidHash();
      if (this_present_udidHash || that_present_udidHash) {
        if (!(this_present_udidHash && that_present_udidHash))
          return false;
        if (!this.udidHash.equals(that.udidHash))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      verifyPhone_args other = (verifyPhone_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSessionId(), other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPinCode(), other.isSetPinCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPinCode()) {
        lastComparison = TBaseHelper.compareTo(this.pinCode, other.pinCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUdidHash(), other.isSetUdidHash());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUdidHash()) {
        lastComparison = TBaseHelper.compareTo(this.udidHash, other.udidHash);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // SESSION_ID
            if (field.type == TType.STRING) {
              this.sessionId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PIN_CODE
            if (field.type == TType.STRING) {
              this.pinCode = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // UDID_HASH
            if (field.type == TType.STRING) {
              this.udidHash = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.sessionId != null) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeString(this.sessionId);
        oprot.writeFieldEnd();
      }
      if (this.pinCode != null) {
        oprot.writeFieldBegin(PIN_CODE_FIELD_DESC);
        oprot.writeString(this.pinCode);
        oprot.writeFieldEnd();
      }
      if (this.udidHash != null) {
        oprot.writeFieldBegin(UDID_HASH_FIELD_DESC);
        oprot.writeString(this.udidHash);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("verifyPhone_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pinCode:");
      if (this.pinCode == null) {
        sb.append("null");
      } else {
        sb.append(this.pinCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("udidHash:");
      if (this.udidHash == null) {
        sb.append("null");
      } else {
        sb.append(this.udidHash);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class verifyPhone_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("verifyPhone_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private VerificationResult success;
    private TalkException e;

    // isset id assignments

    public verifyPhone_result() {
    }

    public verifyPhone_result(
      VerificationResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyPhone_result(verifyPhone_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public verifyPhone_result deepCopy() {
      return new verifyPhone_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    /**
     * 
     * @see VerificationResult
     */
    public VerificationResult getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see VerificationResult
     */
    public void setSuccess(VerificationResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyPhone_result)
        return this.equals((verifyPhone_result)that);
      return false;
    }

    public boolean equals(verifyPhone_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      verifyPhone_result other = (verifyPhone_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = VerificationResult.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success.getValue());
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("verifyPhone_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class verifyQrcode_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("verifyQrcode_args");

    private static final TField VERIFIER_FIELD_DESC = new TField("verifier", TType.STRING, (short)2);
    private static final TField PIN_CODE_FIELD_DESC = new TField("pinCode", TType.STRING, (short)3);

    private String verifier;
    private String pinCode;

    // isset id assignments

    public verifyQrcode_args() {
    }

    public verifyQrcode_args(
      String verifier,
      String pinCode)
    {
      this();
      this.verifier = verifier;
      this.pinCode = pinCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyQrcode_args(verifyQrcode_args other) {
      if (other.isSetVerifier()) {
        this.verifier = other.verifier;
      }
      if (other.isSetPinCode()) {
        this.pinCode = other.pinCode;
      }
    }

    public verifyQrcode_args deepCopy() {
      return new verifyQrcode_args(this);
    }

    public void clear() {
      this.verifier = null;
      this.pinCode = null;
    }

    public String getVerifier() {
      return this.verifier;
    }

    public void setVerifier(String verifier) {
      this.verifier = verifier;
    }

    public void unsetVerifier() {
      this.verifier = null;
    }

    /** Returns true if field verifier is set (has been assigned a value) and false otherwise */
    public boolean isSetVerifier() {
      return this.verifier != null;
    }

    public void setVerifierIsSet(boolean value) {
      if (!value) {
        this.verifier = null;
      }
    }

    public String getPinCode() {
      return this.pinCode;
    }

    public void setPinCode(String pinCode) {
      this.pinCode = pinCode;
    }

    public void unsetPinCode() {
      this.pinCode = null;
    }

    /** Returns true if field pinCode is set (has been assigned a value) and false otherwise */
    public boolean isSetPinCode() {
      return this.pinCode != null;
    }

    public void setPinCodeIsSet(boolean value) {
      if (!value) {
        this.pinCode = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyQrcode_args)
        return this.equals((verifyQrcode_args)that);
      return false;
    }

    public boolean equals(verifyQrcode_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_verifier = true && this.isSetVerifier();
      boolean that_present_verifier = true && that.isSetVerifier();
      if (this_present_verifier || that_present_verifier) {
        if (!(this_present_verifier && that_present_verifier))
          return false;
        if (!this.verifier.equals(that.verifier))
          return false;
      }

      boolean this_present_pinCode = true && this.isSetPinCode();
      boolean that_present_pinCode = true && that.isSetPinCode();
      if (this_present_pinCode || that_present_pinCode) {
        if (!(this_present_pinCode && that_present_pinCode))
          return false;
        if (!this.pinCode.equals(that.pinCode))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      verifyQrcode_args other = (verifyQrcode_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetVerifier(), other.isSetVerifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVerifier()) {
        lastComparison = TBaseHelper.compareTo(this.verifier, other.verifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPinCode(), other.isSetPinCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPinCode()) {
        lastComparison = TBaseHelper.compareTo(this.pinCode, other.pinCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // VERIFIER
            if (field.type == TType.STRING) {
              this.verifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PIN_CODE
            if (field.type == TType.STRING) {
              this.pinCode = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.verifier != null) {
        oprot.writeFieldBegin(VERIFIER_FIELD_DESC);
        oprot.writeString(this.verifier);
        oprot.writeFieldEnd();
      }
      if (this.pinCode != null) {
        oprot.writeFieldBegin(PIN_CODE_FIELD_DESC);
        oprot.writeString(this.pinCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("verifyQrcode_args(");
      boolean first = true;

      sb.append("verifier:");
      if (this.verifier == null) {
        sb.append("null");
      } else {
        sb.append(this.verifier);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pinCode:");
      if (this.pinCode == null) {
        sb.append("null");
      } else {
        sb.append(this.pinCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class verifyQrcode_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("verifyQrcode_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public verifyQrcode_result() {
    }

    public verifyQrcode_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyQrcode_result(verifyQrcode_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public verifyQrcode_result deepCopy() {
      return new verifyQrcode_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyQrcode_result)
        return this.equals((verifyQrcode_result)that);
      return false;
    }

    public boolean equals(verifyQrcode_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      verifyQrcode_result other = (verifyQrcode_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("verifyQrcode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
