/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class FriendChannelMatricesResponse implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("FriendChannelMatricesResponse");

  private static final TField EXPIRES_FIELD_DESC = new TField("expires", TType.I64, (short)1);
  private static final TField MATRICES_FIELD_DESC = new TField("matrices", TType.LIST, (short)2);

  private long expires;
  private Vector matrices;

  // isset id assignments
  private static final int __EXPIRES_ISSET_ID = 0;
  private boolean[] __isset_vector = new boolean[1];

  public FriendChannelMatricesResponse() {
  }

  public FriendChannelMatricesResponse(
    long expires,
    Vector matrices)
  {
    this();
    this.expires = expires;
    setExpiresIsSet(true);
    this.matrices = matrices;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FriendChannelMatricesResponse(FriendChannelMatricesResponse other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    this.expires = other.expires;
    if (other.isSetMatrices()) {
      Vector __this__matrices = new Vector();
      for (Enumeration other_enum = other.matrices.elements(); other_enum.hasMoreElements(); ) {
        FriendChannelMatrix other_element = (FriendChannelMatrix)other_enum.nextElement();
        __this__matrices.addElement(new FriendChannelMatrix(other_element));
      }
      this.matrices = __this__matrices;
    }
  }

  public FriendChannelMatricesResponse deepCopy() {
    return new FriendChannelMatricesResponse(this);
  }

  public void clear() {
    setExpiresIsSet(false);
    this.expires = 0;
    this.matrices = null;
  }

  public long getExpires() {
    return this.expires;
  }

  public void setExpires(long expires) {
    this.expires = expires;
    setExpiresIsSet(true);
  }

  public void unsetExpires() {
    __isset_vector[__EXPIRES_ISSET_ID] = false;
  }

  /** Returns true if field expires is set (has been assigned a value) and false otherwise */
  public boolean isSetExpires() {
    return __isset_vector[__EXPIRES_ISSET_ID];
  }

  public void setExpiresIsSet(boolean value) {
    __isset_vector[__EXPIRES_ISSET_ID] = value;
  }

  public int getMatricesSize() {
    return (this.matrices == null) ? 0 : this.matrices.size();
  }

  public Enumeration getMatricesEnumeration() {
    return (this.matrices == null) ? null : this.matrices.elements();
  }

  public void addToMatrices(FriendChannelMatrix elem) {
    if (this.matrices == null) {
      this.matrices = new Vector();
    }
    this.matrices.addElement(elem);
  }

  public Vector getMatrices() {
    return this.matrices;
  }

  public void setMatrices(Vector matrices) {
    this.matrices = matrices;
  }

  public void unsetMatrices() {
    this.matrices = null;
  }

  /** Returns true if field matrices is set (has been assigned a value) and false otherwise */
  public boolean isSetMatrices() {
    return this.matrices != null;
  }

  public void setMatricesIsSet(boolean value) {
    if (!value) {
      this.matrices = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FriendChannelMatricesResponse)
      return this.equals((FriendChannelMatricesResponse)that);
    return false;
  }

  public boolean equals(FriendChannelMatricesResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_expires = true;
    boolean that_present_expires = true;
    if (this_present_expires || that_present_expires) {
      if (!(this_present_expires && that_present_expires))
        return false;
      if (this.expires != that.expires)
        return false;
    }

    boolean this_present_matrices = true && this.isSetMatrices();
    boolean that_present_matrices = true && that.isSetMatrices();
    if (this_present_matrices || that_present_matrices) {
      if (!(this_present_matrices && that_present_matrices))
        return false;
      if (!this.matrices.equals(that.matrices))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    FriendChannelMatricesResponse other = (FriendChannelMatricesResponse)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetExpires(), other.isSetExpires());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpires()) {
      lastComparison = TBaseHelper.compareTo(this.expires, other.expires);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetMatrices(), other.isSetMatrices());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMatrices()) {
      lastComparison = TBaseHelper.compareTo(this.matrices, other.matrices);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // EXPIRES
          if (field.type == TType.I64) {
            this.expires = iprot.readI64();
            setExpiresIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // MATRICES
          if (field.type == TType.LIST) {
            {
              TList _list125 = iprot.readListBegin();
              this.matrices = new Vector(_list125.size);
              for (int _i126 = 0; _i126 < _list125.size; ++_i126)
              {
                FriendChannelMatrix _elem127;
                _elem127 = new FriendChannelMatrix();
                _elem127.read(iprot);
                this.matrices.addElement(_elem127);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(EXPIRES_FIELD_DESC);
    oprot.writeI64(this.expires);
    oprot.writeFieldEnd();
    if (this.matrices != null) {
      oprot.writeFieldBegin(MATRICES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.matrices.size()));
        for (Enumeration _iter128_enum = this.matrices.elements(); _iter128_enum.hasMoreElements(); )         {
          FriendChannelMatrix _iter128 = (FriendChannelMatrix)_iter128_enum.nextElement();
          _iter128.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("FriendChannelMatricesResponse(");
    boolean first = true;

    sb.append("expires:");
    sb.append(this.expires);
    first = false;
    if (!first) sb.append(", ");
    sb.append("matrices:");
    if (this.matrices == null) {
      sb.append("null");
    } else {
      sb.append(this.matrices);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

