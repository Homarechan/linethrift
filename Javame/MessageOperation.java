/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class MessageOperation implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("MessageOperation");

  private static final TField REVISION_FIELD_DESC = new TField("revision", TType.I64, (short)1);
  private static final TField CREATED_TIME_FIELD_DESC = new TField("createdTime", TType.I64, (short)2);
  private static final TField TYPE_FIELD_DESC = new TField("type", TType.I32, (short)3);
  private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)4);
  private static final TField STATUS_FIELD_DESC = new TField("status", TType.I32, (short)5);
  private static final TField PARAM1_FIELD_DESC = new TField("param1", TType.STRING, (short)10);
  private static final TField PARAM2_FIELD_DESC = new TField("param2", TType.STRING, (short)11);
  private static final TField PARAM3_FIELD_DESC = new TField("param3", TType.STRING, (short)12);
  private static final TField MESSAGE_FIELD_DESC = new TField("message", TType.STRUCT, (short)20);

  private long revision;
  private long createdTime;
  private MessageOperationType type;
  private int reqSeq;
  private OpStatus status;
  private String param1;
  private String param2;
  private String param3;
  private Message message;

  // isset id assignments
  private static final int __REVISION_ISSET_ID = 0;
  private static final int __CREATEDTIME_ISSET_ID = 1;
  private static final int __REQSEQ_ISSET_ID = 2;
  private boolean[] __isset_vector = new boolean[3];

  public MessageOperation() {
  }

  public MessageOperation(
    long revision,
    long createdTime,
    MessageOperationType type,
    int reqSeq,
    OpStatus status,
    String param1,
    String param2,
    String param3,
    Message message)
  {
    this();
    this.revision = revision;
    setRevisionIsSet(true);
    this.createdTime = createdTime;
    setCreatedTimeIsSet(true);
    this.type = type;
    this.reqSeq = reqSeq;
    setReqSeqIsSet(true);
    this.status = status;
    this.param1 = param1;
    this.param2 = param2;
    this.param3 = param3;
    this.message = message;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MessageOperation(MessageOperation other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    this.revision = other.revision;
    this.createdTime = other.createdTime;
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.reqSeq = other.reqSeq;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetParam1()) {
      this.param1 = other.param1;
    }
    if (other.isSetParam2()) {
      this.param2 = other.param2;
    }
    if (other.isSetParam3()) {
      this.param3 = other.param3;
    }
    if (other.isSetMessage()) {
      this.message = new Message(other.message);
    }
  }

  public MessageOperation deepCopy() {
    return new MessageOperation(this);
  }

  public void clear() {
    setRevisionIsSet(false);
    this.revision = 0;
    setCreatedTimeIsSet(false);
    this.createdTime = 0;
    this.type = null;
    setReqSeqIsSet(false);
    this.reqSeq = 0;
    this.status = null;
    this.param1 = null;
    this.param2 = null;
    this.param3 = null;
    this.message = null;
  }

  public long getRevision() {
    return this.revision;
  }

  public void setRevision(long revision) {
    this.revision = revision;
    setRevisionIsSet(true);
  }

  public void unsetRevision() {
    __isset_vector[__REVISION_ISSET_ID] = false;
  }

  /** Returns true if field revision is set (has been assigned a value) and false otherwise */
  public boolean isSetRevision() {
    return __isset_vector[__REVISION_ISSET_ID];
  }

  public void setRevisionIsSet(boolean value) {
    __isset_vector[__REVISION_ISSET_ID] = value;
  }

  public long getCreatedTime() {
    return this.createdTime;
  }

  public void setCreatedTime(long createdTime) {
    this.createdTime = createdTime;
    setCreatedTimeIsSet(true);
  }

  public void unsetCreatedTime() {
    __isset_vector[__CREATEDTIME_ISSET_ID] = false;
  }

  /** Returns true if field createdTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedTime() {
    return __isset_vector[__CREATEDTIME_ISSET_ID];
  }

  public void setCreatedTimeIsSet(boolean value) {
    __isset_vector[__CREATEDTIME_ISSET_ID] = value;
  }

  /**
   * 
   * @see MessageOperationType
   */
  public MessageOperationType getType() {
    return this.type;
  }

  /**
   * 
   * @see MessageOperationType
   */
  public void setType(MessageOperationType type) {
    this.type = type;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getReqSeq() {
    return this.reqSeq;
  }

  public void setReqSeq(int reqSeq) {
    this.reqSeq = reqSeq;
    setReqSeqIsSet(true);
  }

  public void unsetReqSeq() {
    __isset_vector[__REQSEQ_ISSET_ID] = false;
  }

  /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
  public boolean isSetReqSeq() {
    return __isset_vector[__REQSEQ_ISSET_ID];
  }

  public void setReqSeqIsSet(boolean value) {
    __isset_vector[__REQSEQ_ISSET_ID] = value;
  }

  /**
   * 
   * @see OpStatus
   */
  public OpStatus getStatus() {
    return this.status;
  }

  /**
   * 
   * @see OpStatus
   */
  public void setStatus(OpStatus status) {
    this.status = status;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getParam1() {
    return this.param1;
  }

  public void setParam1(String param1) {
    this.param1 = param1;
  }

  public void unsetParam1() {
    this.param1 = null;
  }

  /** Returns true if field param1 is set (has been assigned a value) and false otherwise */
  public boolean isSetParam1() {
    return this.param1 != null;
  }

  public void setParam1IsSet(boolean value) {
    if (!value) {
      this.param1 = null;
    }
  }

  public String getParam2() {
    return this.param2;
  }

  public void setParam2(String param2) {
    this.param2 = param2;
  }

  public void unsetParam2() {
    this.param2 = null;
  }

  /** Returns true if field param2 is set (has been assigned a value) and false otherwise */
  public boolean isSetParam2() {
    return this.param2 != null;
  }

  public void setParam2IsSet(boolean value) {
    if (!value) {
      this.param2 = null;
    }
  }

  public String getParam3() {
    return this.param3;
  }

  public void setParam3(String param3) {
    this.param3 = param3;
  }

  public void unsetParam3() {
    this.param3 = null;
  }

  /** Returns true if field param3 is set (has been assigned a value) and false otherwise */
  public boolean isSetParam3() {
    return this.param3 != null;
  }

  public void setParam3IsSet(boolean value) {
    if (!value) {
      this.param3 = null;
    }
  }

  public Message getMessage() {
    return this.message;
  }

  public void setMessage(Message message) {
    this.message = message;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MessageOperation)
      return this.equals((MessageOperation)that);
    return false;
  }

  public boolean equals(MessageOperation that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_revision = true;
    boolean that_present_revision = true;
    if (this_present_revision || that_present_revision) {
      if (!(this_present_revision && that_present_revision))
        return false;
      if (this.revision != that.revision)
        return false;
    }

    boolean this_present_createdTime = true;
    boolean that_present_createdTime = true;
    if (this_present_createdTime || that_present_createdTime) {
      if (!(this_present_createdTime && that_present_createdTime))
        return false;
      if (this.createdTime != that.createdTime)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_reqSeq = true;
    boolean that_present_reqSeq = true;
    if (this_present_reqSeq || that_present_reqSeq) {
      if (!(this_present_reqSeq && that_present_reqSeq))
        return false;
      if (this.reqSeq != that.reqSeq)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_param1 = true && this.isSetParam1();
    boolean that_present_param1 = true && that.isSetParam1();
    if (this_present_param1 || that_present_param1) {
      if (!(this_present_param1 && that_present_param1))
        return false;
      if (!this.param1.equals(that.param1))
        return false;
    }

    boolean this_present_param2 = true && this.isSetParam2();
    boolean that_present_param2 = true && that.isSetParam2();
    if (this_present_param2 || that_present_param2) {
      if (!(this_present_param2 && that_present_param2))
        return false;
      if (!this.param2.equals(that.param2))
        return false;
    }

    boolean this_present_param3 = true && this.isSetParam3();
    boolean that_present_param3 = true && that.isSetParam3();
    if (this_present_param3 || that_present_param3) {
      if (!(this_present_param3 && that_present_param3))
        return false;
      if (!this.param3.equals(that.param3))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    MessageOperation other = (MessageOperation)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetRevision(), other.isSetRevision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRevision()) {
      lastComparison = TBaseHelper.compareTo(this.revision, other.revision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetCreatedTime(), other.isSetCreatedTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedTime()) {
      lastComparison = TBaseHelper.compareTo(this.createdTime, other.createdTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetType(), other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReqSeq()) {
      lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetStatus(), other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetParam1(), other.isSetParam1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParam1()) {
      lastComparison = TBaseHelper.compareTo(this.param1, other.param1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetParam2(), other.isSetParam2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParam2()) {
      lastComparison = TBaseHelper.compareTo(this.param2, other.param2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetParam3(), other.isSetParam3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParam3()) {
      lastComparison = TBaseHelper.compareTo(this.param3, other.param3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetMessage(), other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = this.message.compareTo(other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // REVISION
          if (field.type == TType.I64) {
            this.revision = iprot.readI64();
            setRevisionIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // CREATED_TIME
          if (field.type == TType.I64) {
            this.createdTime = iprot.readI64();
            setCreatedTimeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // TYPE
          if (field.type == TType.I32) {
            this.type = MessageOperationType.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // REQ_SEQ
          if (field.type == TType.I32) {
            this.reqSeq = iprot.readI32();
            setReqSeqIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // STATUS
          if (field.type == TType.I32) {
            this.status = OpStatus.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // PARAM1
          if (field.type == TType.STRING) {
            this.param1 = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // PARAM2
          if (field.type == TType.STRING) {
            this.param2 = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // PARAM3
          if (field.type == TType.STRING) {
            this.param3 = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 20: // MESSAGE
          if (field.type == TType.STRUCT) {
            this.message = new Message();
            this.message.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(REVISION_FIELD_DESC);
    oprot.writeI64(this.revision);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(CREATED_TIME_FIELD_DESC);
    oprot.writeI64(this.createdTime);
    oprot.writeFieldEnd();
    if (this.type != null) {
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(this.type.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
    oprot.writeI32(this.reqSeq);
    oprot.writeFieldEnd();
    if (this.status != null) {
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(this.status.getValue());
      oprot.writeFieldEnd();
    }
    if (this.param1 != null) {
      oprot.writeFieldBegin(PARAM1_FIELD_DESC);
      oprot.writeString(this.param1);
      oprot.writeFieldEnd();
    }
    if (this.param2 != null) {
      oprot.writeFieldBegin(PARAM2_FIELD_DESC);
      oprot.writeString(this.param2);
      oprot.writeFieldEnd();
    }
    if (this.param3 != null) {
      oprot.writeFieldBegin(PARAM3_FIELD_DESC);
      oprot.writeString(this.param3);
      oprot.writeFieldEnd();
    }
    if (this.message != null) {
      oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
      this.message.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("MessageOperation(");
    boolean first = true;

    sb.append("revision:");
    sb.append(this.revision);
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdTime:");
    sb.append(this.createdTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reqSeq:");
    sb.append(this.reqSeq);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("param1:");
    if (this.param1 == null) {
      sb.append("null");
    } else {
      sb.append(this.param1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("param2:");
    if (this.param2 == null) {
      sb.append("null");
    } else {
      sb.append(this.param2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("param3:");
    if (this.param3 == null) {
      sb.append("null");
    } else {
      sb.append(this.param3);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

