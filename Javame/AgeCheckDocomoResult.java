/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class AgeCheckDocomoResult implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("AgeCheckDocomoResult");

  private static final TField AUTH_URL_FIELD_DESC = new TField("authUrl", TType.STRING, (short)1);
  private static final TField USER_AGE_TYPE_FIELD_DESC = new TField("userAgeType", TType.I32, (short)2);

  private String authUrl;
  private UserAgeType userAgeType;

  // isset id assignments

  public AgeCheckDocomoResult() {
  }

  public AgeCheckDocomoResult(
    String authUrl,
    UserAgeType userAgeType)
  {
    this();
    this.authUrl = authUrl;
    this.userAgeType = userAgeType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AgeCheckDocomoResult(AgeCheckDocomoResult other) {
    if (other.isSetAuthUrl()) {
      this.authUrl = other.authUrl;
    }
    if (other.isSetUserAgeType()) {
      this.userAgeType = other.userAgeType;
    }
  }

  public AgeCheckDocomoResult deepCopy() {
    return new AgeCheckDocomoResult(this);
  }

  public void clear() {
    this.authUrl = null;
    this.userAgeType = null;
  }

  public String getAuthUrl() {
    return this.authUrl;
  }

  public void setAuthUrl(String authUrl) {
    this.authUrl = authUrl;
  }

  public void unsetAuthUrl() {
    this.authUrl = null;
  }

  /** Returns true if field authUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthUrl() {
    return this.authUrl != null;
  }

  public void setAuthUrlIsSet(boolean value) {
    if (!value) {
      this.authUrl = null;
    }
  }

  /**
   * 
   * @see UserAgeType
   */
  public UserAgeType getUserAgeType() {
    return this.userAgeType;
  }

  /**
   * 
   * @see UserAgeType
   */
  public void setUserAgeType(UserAgeType userAgeType) {
    this.userAgeType = userAgeType;
  }

  public void unsetUserAgeType() {
    this.userAgeType = null;
  }

  /** Returns true if field userAgeType is set (has been assigned a value) and false otherwise */
  public boolean isSetUserAgeType() {
    return this.userAgeType != null;
  }

  public void setUserAgeTypeIsSet(boolean value) {
    if (!value) {
      this.userAgeType = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AgeCheckDocomoResult)
      return this.equals((AgeCheckDocomoResult)that);
    return false;
  }

  public boolean equals(AgeCheckDocomoResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_authUrl = true && this.isSetAuthUrl();
    boolean that_present_authUrl = true && that.isSetAuthUrl();
    if (this_present_authUrl || that_present_authUrl) {
      if (!(this_present_authUrl && that_present_authUrl))
        return false;
      if (!this.authUrl.equals(that.authUrl))
        return false;
    }

    boolean this_present_userAgeType = true && this.isSetUserAgeType();
    boolean that_present_userAgeType = true && that.isSetUserAgeType();
    if (this_present_userAgeType || that_present_userAgeType) {
      if (!(this_present_userAgeType && that_present_userAgeType))
        return false;
      if (!this.userAgeType.equals(that.userAgeType))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    AgeCheckDocomoResult other = (AgeCheckDocomoResult)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetAuthUrl(), other.isSetAuthUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthUrl()) {
      lastComparison = TBaseHelper.compareTo(this.authUrl, other.authUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetUserAgeType(), other.isSetUserAgeType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserAgeType()) {
      lastComparison = TBaseHelper.compareTo(this.userAgeType, other.userAgeType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // AUTH_URL
          if (field.type == TType.STRING) {
            this.authUrl = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // USER_AGE_TYPE
          if (field.type == TType.I32) {
            this.userAgeType = UserAgeType.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.authUrl != null) {
      oprot.writeFieldBegin(AUTH_URL_FIELD_DESC);
      oprot.writeString(this.authUrl);
      oprot.writeFieldEnd();
    }
    if (this.userAgeType != null) {
      oprot.writeFieldBegin(USER_AGE_TYPE_FIELD_DESC);
      oprot.writeI32(this.userAgeType.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("AgeCheckDocomoResult(");
    boolean first = true;

    sb.append("authUrl:");
    if (this.authUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.authUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userAgeType:");
    if (this.userAgeType == null) {
      sb.append("null");
    } else {
      sb.append(this.userAgeType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

