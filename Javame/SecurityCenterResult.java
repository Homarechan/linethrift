/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class SecurityCenterResult implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("SecurityCenterResult");

  private static final TField URI_FIELD_DESC = new TField("uri", TType.STRING, (short)1);
  private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)2);
  private static final TField COOKIE_PATH_FIELD_DESC = new TField("cookiePath", TType.STRING, (short)3);
  private static final TField SKIP_FIELD_DESC = new TField("skip", TType.BOOL, (short)4);

  private String uri;
  private String token;
  private String cookiePath;
  private boolean skip;

  // isset id assignments
  private static final int __SKIP_ISSET_ID = 0;
  private boolean[] __isset_vector = new boolean[1];

  public SecurityCenterResult() {
  }

  public SecurityCenterResult(
    String uri,
    String token,
    String cookiePath,
    boolean skip)
  {
    this();
    this.uri = uri;
    this.token = token;
    this.cookiePath = cookiePath;
    this.skip = skip;
    setSkipIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SecurityCenterResult(SecurityCenterResult other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    if (other.isSetUri()) {
      this.uri = other.uri;
    }
    if (other.isSetToken()) {
      this.token = other.token;
    }
    if (other.isSetCookiePath()) {
      this.cookiePath = other.cookiePath;
    }
    this.skip = other.skip;
  }

  public SecurityCenterResult deepCopy() {
    return new SecurityCenterResult(this);
  }

  public void clear() {
    this.uri = null;
    this.token = null;
    this.cookiePath = null;
    setSkipIsSet(false);
    this.skip = false;
  }

  public String getUri() {
    return this.uri;
  }

  public void setUri(String uri) {
    this.uri = uri;
  }

  public void unsetUri() {
    this.uri = null;
  }

  /** Returns true if field uri is set (has been assigned a value) and false otherwise */
  public boolean isSetUri() {
    return this.uri != null;
  }

  public void setUriIsSet(boolean value) {
    if (!value) {
      this.uri = null;
    }
  }

  public String getToken() {
    return this.token;
  }

  public void setToken(String token) {
    this.token = token;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  public String getCookiePath() {
    return this.cookiePath;
  }

  public void setCookiePath(String cookiePath) {
    this.cookiePath = cookiePath;
  }

  public void unsetCookiePath() {
    this.cookiePath = null;
  }

  /** Returns true if field cookiePath is set (has been assigned a value) and false otherwise */
  public boolean isSetCookiePath() {
    return this.cookiePath != null;
  }

  public void setCookiePathIsSet(boolean value) {
    if (!value) {
      this.cookiePath = null;
    }
  }

  public boolean isSkip() {
    return this.skip;
  }

  public void setSkip(boolean skip) {
    this.skip = skip;
    setSkipIsSet(true);
  }

  public void unsetSkip() {
    __isset_vector[__SKIP_ISSET_ID] = false;
  }

  /** Returns true if field skip is set (has been assigned a value) and false otherwise */
  public boolean isSetSkip() {
    return __isset_vector[__SKIP_ISSET_ID];
  }

  public void setSkipIsSet(boolean value) {
    __isset_vector[__SKIP_ISSET_ID] = value;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SecurityCenterResult)
      return this.equals((SecurityCenterResult)that);
    return false;
  }

  public boolean equals(SecurityCenterResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_uri = true && this.isSetUri();
    boolean that_present_uri = true && that.isSetUri();
    if (this_present_uri || that_present_uri) {
      if (!(this_present_uri && that_present_uri))
        return false;
      if (!this.uri.equals(that.uri))
        return false;
    }

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_cookiePath = true && this.isSetCookiePath();
    boolean that_present_cookiePath = true && that.isSetCookiePath();
    if (this_present_cookiePath || that_present_cookiePath) {
      if (!(this_present_cookiePath && that_present_cookiePath))
        return false;
      if (!this.cookiePath.equals(that.cookiePath))
        return false;
    }

    boolean this_present_skip = true;
    boolean that_present_skip = true;
    if (this_present_skip || that_present_skip) {
      if (!(this_present_skip && that_present_skip))
        return false;
      if (this.skip != that.skip)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    SecurityCenterResult other = (SecurityCenterResult)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetUri(), other.isSetUri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUri()) {
      lastComparison = TBaseHelper.compareTo(this.uri, other.uri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetToken(), other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetCookiePath(), other.isSetCookiePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCookiePath()) {
      lastComparison = TBaseHelper.compareTo(this.cookiePath, other.cookiePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSkip(), other.isSetSkip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkip()) {
      lastComparison = TBaseHelper.compareTo(this.skip, other.skip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // URI
          if (field.type == TType.STRING) {
            this.uri = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // TOKEN
          if (field.type == TType.STRING) {
            this.token = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // COOKIE_PATH
          if (field.type == TType.STRING) {
            this.cookiePath = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // SKIP
          if (field.type == TType.BOOL) {
            this.skip = iprot.readBool();
            setSkipIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.uri != null) {
      oprot.writeFieldBegin(URI_FIELD_DESC);
      oprot.writeString(this.uri);
      oprot.writeFieldEnd();
    }
    if (this.token != null) {
      oprot.writeFieldBegin(TOKEN_FIELD_DESC);
      oprot.writeString(this.token);
      oprot.writeFieldEnd();
    }
    if (this.cookiePath != null) {
      oprot.writeFieldBegin(COOKIE_PATH_FIELD_DESC);
      oprot.writeString(this.cookiePath);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SKIP_FIELD_DESC);
    oprot.writeBool(this.skip);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("SecurityCenterResult(");
    boolean first = true;

    sb.append("uri:");
    if (this.uri == null) {
      sb.append("null");
    } else {
      sb.append(this.uri);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("token:");
    if (this.token == null) {
      sb.append("null");
    } else {
      sb.append(this.token);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cookiePath:");
    if (this.cookiePath == null) {
      sb.append("null");
    } else {
      sb.append(this.cookiePath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("skip:");
    sb.append(this.skip);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

