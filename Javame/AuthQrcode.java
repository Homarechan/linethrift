/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class AuthQrcode implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("AuthQrcode");

  private static final TField QRCODE_FIELD_DESC = new TField("qrcode", TType.STRING, (short)1);
  private static final TField VERIFIER_FIELD_DESC = new TField("verifier", TType.STRING, (short)2);
  private static final TField CALLBACK_URL_FIELD_DESC = new TField("callbackUrl", TType.STRING, (short)3);

  private String qrcode;
  private String verifier;
  private String callbackUrl;

  // isset id assignments

  public AuthQrcode() {
  }

  public AuthQrcode(
    String qrcode,
    String verifier,
    String callbackUrl)
  {
    this();
    this.qrcode = qrcode;
    this.verifier = verifier;
    this.callbackUrl = callbackUrl;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AuthQrcode(AuthQrcode other) {
    if (other.isSetQrcode()) {
      this.qrcode = other.qrcode;
    }
    if (other.isSetVerifier()) {
      this.verifier = other.verifier;
    }
    if (other.isSetCallbackUrl()) {
      this.callbackUrl = other.callbackUrl;
    }
  }

  public AuthQrcode deepCopy() {
    return new AuthQrcode(this);
  }

  public void clear() {
    this.qrcode = null;
    this.verifier = null;
    this.callbackUrl = null;
  }

  public String getQrcode() {
    return this.qrcode;
  }

  public void setQrcode(String qrcode) {
    this.qrcode = qrcode;
  }

  public void unsetQrcode() {
    this.qrcode = null;
  }

  /** Returns true if field qrcode is set (has been assigned a value) and false otherwise */
  public boolean isSetQrcode() {
    return this.qrcode != null;
  }

  public void setQrcodeIsSet(boolean value) {
    if (!value) {
      this.qrcode = null;
    }
  }

  public String getVerifier() {
    return this.verifier;
  }

  public void setVerifier(String verifier) {
    this.verifier = verifier;
  }

  public void unsetVerifier() {
    this.verifier = null;
  }

  /** Returns true if field verifier is set (has been assigned a value) and false otherwise */
  public boolean isSetVerifier() {
    return this.verifier != null;
  }

  public void setVerifierIsSet(boolean value) {
    if (!value) {
      this.verifier = null;
    }
  }

  public String getCallbackUrl() {
    return this.callbackUrl;
  }

  public void setCallbackUrl(String callbackUrl) {
    this.callbackUrl = callbackUrl;
  }

  public void unsetCallbackUrl() {
    this.callbackUrl = null;
  }

  /** Returns true if field callbackUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetCallbackUrl() {
    return this.callbackUrl != null;
  }

  public void setCallbackUrlIsSet(boolean value) {
    if (!value) {
      this.callbackUrl = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AuthQrcode)
      return this.equals((AuthQrcode)that);
    return false;
  }

  public boolean equals(AuthQrcode that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_qrcode = true && this.isSetQrcode();
    boolean that_present_qrcode = true && that.isSetQrcode();
    if (this_present_qrcode || that_present_qrcode) {
      if (!(this_present_qrcode && that_present_qrcode))
        return false;
      if (!this.qrcode.equals(that.qrcode))
        return false;
    }

    boolean this_present_verifier = true && this.isSetVerifier();
    boolean that_present_verifier = true && that.isSetVerifier();
    if (this_present_verifier || that_present_verifier) {
      if (!(this_present_verifier && that_present_verifier))
        return false;
      if (!this.verifier.equals(that.verifier))
        return false;
    }

    boolean this_present_callbackUrl = true && this.isSetCallbackUrl();
    boolean that_present_callbackUrl = true && that.isSetCallbackUrl();
    if (this_present_callbackUrl || that_present_callbackUrl) {
      if (!(this_present_callbackUrl && that_present_callbackUrl))
        return false;
      if (!this.callbackUrl.equals(that.callbackUrl))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    AuthQrcode other = (AuthQrcode)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetQrcode(), other.isSetQrcode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetQrcode()) {
      lastComparison = TBaseHelper.compareTo(this.qrcode, other.qrcode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetVerifier(), other.isSetVerifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVerifier()) {
      lastComparison = TBaseHelper.compareTo(this.verifier, other.verifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetCallbackUrl(), other.isSetCallbackUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCallbackUrl()) {
      lastComparison = TBaseHelper.compareTo(this.callbackUrl, other.callbackUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // QRCODE
          if (field.type == TType.STRING) {
            this.qrcode = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // VERIFIER
          if (field.type == TType.STRING) {
            this.verifier = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // CALLBACK_URL
          if (field.type == TType.STRING) {
            this.callbackUrl = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.qrcode != null) {
      oprot.writeFieldBegin(QRCODE_FIELD_DESC);
      oprot.writeString(this.qrcode);
      oprot.writeFieldEnd();
    }
    if (this.verifier != null) {
      oprot.writeFieldBegin(VERIFIER_FIELD_DESC);
      oprot.writeString(this.verifier);
      oprot.writeFieldEnd();
    }
    if (this.callbackUrl != null) {
      oprot.writeFieldBegin(CALLBACK_URL_FIELD_DESC);
      oprot.writeString(this.callbackUrl);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("AuthQrcode(");
    boolean first = true;

    sb.append("qrcode:");
    if (this.qrcode == null) {
      sb.append("null");
    } else {
      sb.append(this.qrcode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("verifier:");
    if (this.verifier == null) {
      sb.append("null");
    } else {
      sb.append(this.verifier);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("callbackUrl:");
    if (this.callbackUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.callbackUrl);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

