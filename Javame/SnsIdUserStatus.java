/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class SnsIdUserStatus implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("SnsIdUserStatus");

  private static final TField USER_EXISTING_FIELD_DESC = new TField("userExisting", TType.BOOL, (short)1);
  private static final TField PHONE_NUMBER_REGISTERED_FIELD_DESC = new TField("phoneNumberRegistered", TType.BOOL, (short)2);
  private static final TField SAME_DEVICE_FIELD_DESC = new TField("sameDevice", TType.BOOL, (short)3);

  private boolean userExisting;
  private boolean phoneNumberRegistered;
  private boolean sameDevice;

  // isset id assignments
  private static final int __USEREXISTING_ISSET_ID = 0;
  private static final int __PHONENUMBERREGISTERED_ISSET_ID = 1;
  private static final int __SAMEDEVICE_ISSET_ID = 2;
  private boolean[] __isset_vector = new boolean[3];

  public SnsIdUserStatus() {
  }

  public SnsIdUserStatus(
    boolean userExisting,
    boolean phoneNumberRegistered,
    boolean sameDevice)
  {
    this();
    this.userExisting = userExisting;
    setUserExistingIsSet(true);
    this.phoneNumberRegistered = phoneNumberRegistered;
    setPhoneNumberRegisteredIsSet(true);
    this.sameDevice = sameDevice;
    setSameDeviceIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SnsIdUserStatus(SnsIdUserStatus other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    this.userExisting = other.userExisting;
    this.phoneNumberRegistered = other.phoneNumberRegistered;
    this.sameDevice = other.sameDevice;
  }

  public SnsIdUserStatus deepCopy() {
    return new SnsIdUserStatus(this);
  }

  public void clear() {
    setUserExistingIsSet(false);
    this.userExisting = false;
    setPhoneNumberRegisteredIsSet(false);
    this.phoneNumberRegistered = false;
    setSameDeviceIsSet(false);
    this.sameDevice = false;
  }

  public boolean isUserExisting() {
    return this.userExisting;
  }

  public void setUserExisting(boolean userExisting) {
    this.userExisting = userExisting;
    setUserExistingIsSet(true);
  }

  public void unsetUserExisting() {
    __isset_vector[__USEREXISTING_ISSET_ID] = false;
  }

  /** Returns true if field userExisting is set (has been assigned a value) and false otherwise */
  public boolean isSetUserExisting() {
    return __isset_vector[__USEREXISTING_ISSET_ID];
  }

  public void setUserExistingIsSet(boolean value) {
    __isset_vector[__USEREXISTING_ISSET_ID] = value;
  }

  public boolean isPhoneNumberRegistered() {
    return this.phoneNumberRegistered;
  }

  public void setPhoneNumberRegistered(boolean phoneNumberRegistered) {
    this.phoneNumberRegistered = phoneNumberRegistered;
    setPhoneNumberRegisteredIsSet(true);
  }

  public void unsetPhoneNumberRegistered() {
    __isset_vector[__PHONENUMBERREGISTERED_ISSET_ID] = false;
  }

  /** Returns true if field phoneNumberRegistered is set (has been assigned a value) and false otherwise */
  public boolean isSetPhoneNumberRegistered() {
    return __isset_vector[__PHONENUMBERREGISTERED_ISSET_ID];
  }

  public void setPhoneNumberRegisteredIsSet(boolean value) {
    __isset_vector[__PHONENUMBERREGISTERED_ISSET_ID] = value;
  }

  public boolean isSameDevice() {
    return this.sameDevice;
  }

  public void setSameDevice(boolean sameDevice) {
    this.sameDevice = sameDevice;
    setSameDeviceIsSet(true);
  }

  public void unsetSameDevice() {
    __isset_vector[__SAMEDEVICE_ISSET_ID] = false;
  }

  /** Returns true if field sameDevice is set (has been assigned a value) and false otherwise */
  public boolean isSetSameDevice() {
    return __isset_vector[__SAMEDEVICE_ISSET_ID];
  }

  public void setSameDeviceIsSet(boolean value) {
    __isset_vector[__SAMEDEVICE_ISSET_ID] = value;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SnsIdUserStatus)
      return this.equals((SnsIdUserStatus)that);
    return false;
  }

  public boolean equals(SnsIdUserStatus that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_userExisting = true;
    boolean that_present_userExisting = true;
    if (this_present_userExisting || that_present_userExisting) {
      if (!(this_present_userExisting && that_present_userExisting))
        return false;
      if (this.userExisting != that.userExisting)
        return false;
    }

    boolean this_present_phoneNumberRegistered = true;
    boolean that_present_phoneNumberRegistered = true;
    if (this_present_phoneNumberRegistered || that_present_phoneNumberRegistered) {
      if (!(this_present_phoneNumberRegistered && that_present_phoneNumberRegistered))
        return false;
      if (this.phoneNumberRegistered != that.phoneNumberRegistered)
        return false;
    }

    boolean this_present_sameDevice = true;
    boolean that_present_sameDevice = true;
    if (this_present_sameDevice || that_present_sameDevice) {
      if (!(this_present_sameDevice && that_present_sameDevice))
        return false;
      if (this.sameDevice != that.sameDevice)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    SnsIdUserStatus other = (SnsIdUserStatus)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetUserExisting(), other.isSetUserExisting());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserExisting()) {
      lastComparison = TBaseHelper.compareTo(this.userExisting, other.userExisting);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetPhoneNumberRegistered(), other.isSetPhoneNumberRegistered());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhoneNumberRegistered()) {
      lastComparison = TBaseHelper.compareTo(this.phoneNumberRegistered, other.phoneNumberRegistered);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSameDevice(), other.isSetSameDevice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSameDevice()) {
      lastComparison = TBaseHelper.compareTo(this.sameDevice, other.sameDevice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // USER_EXISTING
          if (field.type == TType.BOOL) {
            this.userExisting = iprot.readBool();
            setUserExistingIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // PHONE_NUMBER_REGISTERED
          if (field.type == TType.BOOL) {
            this.phoneNumberRegistered = iprot.readBool();
            setPhoneNumberRegisteredIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SAME_DEVICE
          if (field.type == TType.BOOL) {
            this.sameDevice = iprot.readBool();
            setSameDeviceIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(USER_EXISTING_FIELD_DESC);
    oprot.writeBool(this.userExisting);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(PHONE_NUMBER_REGISTERED_FIELD_DESC);
    oprot.writeBool(this.phoneNumberRegistered);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SAME_DEVICE_FIELD_DESC);
    oprot.writeBool(this.sameDevice);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("SnsIdUserStatus(");
    boolean first = true;

    sb.append("userExisting:");
    sb.append(this.userExisting);
    first = false;
    if (!first) sb.append(", ");
    sb.append("phoneNumberRegistered:");
    sb.append(this.phoneNumberRegistered);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sameDevice:");
    sb.append(this.sameDevice);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

