/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class LoginRequest implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("LoginRequest");

  private static final TField TYPE_FIELD_DESC = new TField("type", TType.I32, (short)1);
  private static final TField IDENTITY_PROVIDER_FIELD_DESC = new TField("identityProvider", TType.I32, (short)2);
  private static final TField IDENTIFIER_FIELD_DESC = new TField("identifier", TType.STRING, (short)3);
  private static final TField PASSWORD_FIELD_DESC = new TField("password", TType.STRING, (short)4);
  private static final TField KEEP_LOGGED_IN_FIELD_DESC = new TField("keepLoggedIn", TType.BOOL, (short)5);
  private static final TField ACCESS_LOCATION_FIELD_DESC = new TField("accessLocation", TType.STRING, (short)6);
  private static final TField SYSTEM_NAME_FIELD_DESC = new TField("systemName", TType.STRING, (short)7);
  private static final TField CERTIFICATE_FIELD_DESC = new TField("certificate", TType.STRING, (short)8);
  private static final TField VERIFIER_FIELD_DESC = new TField("verifier", TType.STRING, (short)9);
  private static final TField SECRET_FIELD_DESC = new TField("secret", TType.STRING, (short)10);
  private static final TField E2EE_VERSION_FIELD_DESC = new TField("e2eeVersion", TType.I32, (short)11);

  private int type;
  private int identityProvider;
  private String identifier;
  private String password;
  private boolean keepLoggedIn;
  private String accessLocation;
  private String systemName;
  private String certificate;
  private String verifier;
  private String secret;
  private int e2eeVersion;

  // isset id assignments
  private static final int __TYPE_ISSET_ID = 0;
  private static final int __IDENTITYPROVIDER_ISSET_ID = 1;
  private static final int __KEEPLOGGEDIN_ISSET_ID = 2;
  private static final int __E2EEVERSION_ISSET_ID = 3;
  private boolean[] __isset_vector = new boolean[4];

  public LoginRequest() {
  }

  public LoginRequest(
    int type,
    int identityProvider,
    String identifier,
    String password,
    boolean keepLoggedIn,
    String accessLocation,
    String systemName,
    String certificate,
    String verifier,
    String secret,
    int e2eeVersion)
  {
    this();
    this.type = type;
    setTypeIsSet(true);
    this.identityProvider = identityProvider;
    setIdentityProviderIsSet(true);
    this.identifier = identifier;
    this.password = password;
    this.keepLoggedIn = keepLoggedIn;
    setKeepLoggedInIsSet(true);
    this.accessLocation = accessLocation;
    this.systemName = systemName;
    this.certificate = certificate;
    this.verifier = verifier;
    this.secret = secret;
    this.e2eeVersion = e2eeVersion;
    setE2eeVersionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LoginRequest(LoginRequest other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    this.type = other.type;
    this.identityProvider = other.identityProvider;
    if (other.isSetIdentifier()) {
      this.identifier = other.identifier;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    this.keepLoggedIn = other.keepLoggedIn;
    if (other.isSetAccessLocation()) {
      this.accessLocation = other.accessLocation;
    }
    if (other.isSetSystemName()) {
      this.systemName = other.systemName;
    }
    if (other.isSetCertificate()) {
      this.certificate = other.certificate;
    }
    if (other.isSetVerifier()) {
      this.verifier = other.verifier;
    }
    if (other.isSetSecret()) {
      this.secret = other.secret;
    }
    this.e2eeVersion = other.e2eeVersion;
  }

  public LoginRequest deepCopy() {
    return new LoginRequest(this);
  }

  public void clear() {
    setTypeIsSet(false);
    this.type = 0;
    setIdentityProviderIsSet(false);
    this.identityProvider = 0;
    this.identifier = null;
    this.password = null;
    setKeepLoggedInIsSet(false);
    this.keepLoggedIn = false;
    this.accessLocation = null;
    this.systemName = null;
    this.certificate = null;
    this.verifier = null;
    this.secret = null;
    setE2eeVersionIsSet(false);
    this.e2eeVersion = 0;
  }

  public int getType() {
    return this.type;
  }

  public void setType(int type) {
    this.type = type;
    setTypeIsSet(true);
  }

  public void unsetType() {
    __isset_vector[__TYPE_ISSET_ID] = false;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return __isset_vector[__TYPE_ISSET_ID];
  }

  public void setTypeIsSet(boolean value) {
    __isset_vector[__TYPE_ISSET_ID] = value;
  }

  public int getIdentityProvider() {
    return this.identityProvider;
  }

  public void setIdentityProvider(int identityProvider) {
    this.identityProvider = identityProvider;
    setIdentityProviderIsSet(true);
  }

  public void unsetIdentityProvider() {
    __isset_vector[__IDENTITYPROVIDER_ISSET_ID] = false;
  }

  /** Returns true if field identityProvider is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentityProvider() {
    return __isset_vector[__IDENTITYPROVIDER_ISSET_ID];
  }

  public void setIdentityProviderIsSet(boolean value) {
    __isset_vector[__IDENTITYPROVIDER_ISSET_ID] = value;
  }

  public String getIdentifier() {
    return this.identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }

  public void unsetIdentifier() {
    this.identifier = null;
  }

  /** Returns true if field identifier is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentifier() {
    return this.identifier != null;
  }

  public void setIdentifierIsSet(boolean value) {
    if (!value) {
      this.identifier = null;
    }
  }

  public String getPassword() {
    return this.password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public boolean isKeepLoggedIn() {
    return this.keepLoggedIn;
  }

  public void setKeepLoggedIn(boolean keepLoggedIn) {
    this.keepLoggedIn = keepLoggedIn;
    setKeepLoggedInIsSet(true);
  }

  public void unsetKeepLoggedIn() {
    __isset_vector[__KEEPLOGGEDIN_ISSET_ID] = false;
  }

  /** Returns true if field keepLoggedIn is set (has been assigned a value) and false otherwise */
  public boolean isSetKeepLoggedIn() {
    return __isset_vector[__KEEPLOGGEDIN_ISSET_ID];
  }

  public void setKeepLoggedInIsSet(boolean value) {
    __isset_vector[__KEEPLOGGEDIN_ISSET_ID] = value;
  }

  public String getAccessLocation() {
    return this.accessLocation;
  }

  public void setAccessLocation(String accessLocation) {
    this.accessLocation = accessLocation;
  }

  public void unsetAccessLocation() {
    this.accessLocation = null;
  }

  /** Returns true if field accessLocation is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessLocation() {
    return this.accessLocation != null;
  }

  public void setAccessLocationIsSet(boolean value) {
    if (!value) {
      this.accessLocation = null;
    }
  }

  public String getSystemName() {
    return this.systemName;
  }

  public void setSystemName(String systemName) {
    this.systemName = systemName;
  }

  public void unsetSystemName() {
    this.systemName = null;
  }

  /** Returns true if field systemName is set (has been assigned a value) and false otherwise */
  public boolean isSetSystemName() {
    return this.systemName != null;
  }

  public void setSystemNameIsSet(boolean value) {
    if (!value) {
      this.systemName = null;
    }
  }

  public String getCertificate() {
    return this.certificate;
  }

  public void setCertificate(String certificate) {
    this.certificate = certificate;
  }

  public void unsetCertificate() {
    this.certificate = null;
  }

  /** Returns true if field certificate is set (has been assigned a value) and false otherwise */
  public boolean isSetCertificate() {
    return this.certificate != null;
  }

  public void setCertificateIsSet(boolean value) {
    if (!value) {
      this.certificate = null;
    }
  }

  public String getVerifier() {
    return this.verifier;
  }

  public void setVerifier(String verifier) {
    this.verifier = verifier;
  }

  public void unsetVerifier() {
    this.verifier = null;
  }

  /** Returns true if field verifier is set (has been assigned a value) and false otherwise */
  public boolean isSetVerifier() {
    return this.verifier != null;
  }

  public void setVerifierIsSet(boolean value) {
    if (!value) {
      this.verifier = null;
    }
  }

  public String getSecret() {
    return this.secret;
  }

  public void setSecret(String secret) {
    this.secret = secret;
  }

  public void unsetSecret() {
    this.secret = null;
  }

  /** Returns true if field secret is set (has been assigned a value) and false otherwise */
  public boolean isSetSecret() {
    return this.secret != null;
  }

  public void setSecretIsSet(boolean value) {
    if (!value) {
      this.secret = null;
    }
  }

  public int getE2eeVersion() {
    return this.e2eeVersion;
  }

  public void setE2eeVersion(int e2eeVersion) {
    this.e2eeVersion = e2eeVersion;
    setE2eeVersionIsSet(true);
  }

  public void unsetE2eeVersion() {
    __isset_vector[__E2EEVERSION_ISSET_ID] = false;
  }

  /** Returns true if field e2eeVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetE2eeVersion() {
    return __isset_vector[__E2EEVERSION_ISSET_ID];
  }

  public void setE2eeVersionIsSet(boolean value) {
    __isset_vector[__E2EEVERSION_ISSET_ID] = value;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LoginRequest)
      return this.equals((LoginRequest)that);
    return false;
  }

  public boolean equals(LoginRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_identityProvider = true;
    boolean that_present_identityProvider = true;
    if (this_present_identityProvider || that_present_identityProvider) {
      if (!(this_present_identityProvider && that_present_identityProvider))
        return false;
      if (this.identityProvider != that.identityProvider)
        return false;
    }

    boolean this_present_identifier = true && this.isSetIdentifier();
    boolean that_present_identifier = true && that.isSetIdentifier();
    if (this_present_identifier || that_present_identifier) {
      if (!(this_present_identifier && that_present_identifier))
        return false;
      if (!this.identifier.equals(that.identifier))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_keepLoggedIn = true;
    boolean that_present_keepLoggedIn = true;
    if (this_present_keepLoggedIn || that_present_keepLoggedIn) {
      if (!(this_present_keepLoggedIn && that_present_keepLoggedIn))
        return false;
      if (this.keepLoggedIn != that.keepLoggedIn)
        return false;
    }

    boolean this_present_accessLocation = true && this.isSetAccessLocation();
    boolean that_present_accessLocation = true && that.isSetAccessLocation();
    if (this_present_accessLocation || that_present_accessLocation) {
      if (!(this_present_accessLocation && that_present_accessLocation))
        return false;
      if (!this.accessLocation.equals(that.accessLocation))
        return false;
    }

    boolean this_present_systemName = true && this.isSetSystemName();
    boolean that_present_systemName = true && that.isSetSystemName();
    if (this_present_systemName || that_present_systemName) {
      if (!(this_present_systemName && that_present_systemName))
        return false;
      if (!this.systemName.equals(that.systemName))
        return false;
    }

    boolean this_present_certificate = true && this.isSetCertificate();
    boolean that_present_certificate = true && that.isSetCertificate();
    if (this_present_certificate || that_present_certificate) {
      if (!(this_present_certificate && that_present_certificate))
        return false;
      if (!this.certificate.equals(that.certificate))
        return false;
    }

    boolean this_present_verifier = true && this.isSetVerifier();
    boolean that_present_verifier = true && that.isSetVerifier();
    if (this_present_verifier || that_present_verifier) {
      if (!(this_present_verifier && that_present_verifier))
        return false;
      if (!this.verifier.equals(that.verifier))
        return false;
    }

    boolean this_present_secret = true && this.isSetSecret();
    boolean that_present_secret = true && that.isSetSecret();
    if (this_present_secret || that_present_secret) {
      if (!(this_present_secret && that_present_secret))
        return false;
      if (!this.secret.equals(that.secret))
        return false;
    }

    boolean this_present_e2eeVersion = true;
    boolean that_present_e2eeVersion = true;
    if (this_present_e2eeVersion || that_present_e2eeVersion) {
      if (!(this_present_e2eeVersion && that_present_e2eeVersion))
        return false;
      if (this.e2eeVersion != that.e2eeVersion)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    LoginRequest other = (LoginRequest)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetType(), other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetIdentityProvider(), other.isSetIdentityProvider());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentityProvider()) {
      lastComparison = TBaseHelper.compareTo(this.identityProvider, other.identityProvider);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetIdentifier(), other.isSetIdentifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentifier()) {
      lastComparison = TBaseHelper.compareTo(this.identifier, other.identifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetPassword(), other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetKeepLoggedIn(), other.isSetKeepLoggedIn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeepLoggedIn()) {
      lastComparison = TBaseHelper.compareTo(this.keepLoggedIn, other.keepLoggedIn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetAccessLocation(), other.isSetAccessLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessLocation()) {
      lastComparison = TBaseHelper.compareTo(this.accessLocation, other.accessLocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSystemName(), other.isSetSystemName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSystemName()) {
      lastComparison = TBaseHelper.compareTo(this.systemName, other.systemName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetCertificate(), other.isSetCertificate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertificate()) {
      lastComparison = TBaseHelper.compareTo(this.certificate, other.certificate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetVerifier(), other.isSetVerifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVerifier()) {
      lastComparison = TBaseHelper.compareTo(this.verifier, other.verifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSecret(), other.isSetSecret());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecret()) {
      lastComparison = TBaseHelper.compareTo(this.secret, other.secret);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetE2eeVersion(), other.isSetE2eeVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetE2eeVersion()) {
      lastComparison = TBaseHelper.compareTo(this.e2eeVersion, other.e2eeVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // TYPE
          if (field.type == TType.I32) {
            this.type = iprot.readI32();
            setTypeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // IDENTITY_PROVIDER
          if (field.type == TType.I32) {
            this.identityProvider = iprot.readI32();
            setIdentityProviderIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // IDENTIFIER
          if (field.type == TType.STRING) {
            this.identifier = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // PASSWORD
          if (field.type == TType.STRING) {
            this.password = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // KEEP_LOGGED_IN
          if (field.type == TType.BOOL) {
            this.keepLoggedIn = iprot.readBool();
            setKeepLoggedInIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // ACCESS_LOCATION
          if (field.type == TType.STRING) {
            this.accessLocation = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // SYSTEM_NAME
          if (field.type == TType.STRING) {
            this.systemName = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // CERTIFICATE
          if (field.type == TType.STRING) {
            this.certificate = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // VERIFIER
          if (field.type == TType.STRING) {
            this.verifier = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // SECRET
          if (field.type == TType.STRING) {
            this.secret = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // E2EE_VERSION
          if (field.type == TType.I32) {
            this.e2eeVersion = iprot.readI32();
            setE2eeVersionIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(TYPE_FIELD_DESC);
    oprot.writeI32(this.type);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(IDENTITY_PROVIDER_FIELD_DESC);
    oprot.writeI32(this.identityProvider);
    oprot.writeFieldEnd();
    if (this.identifier != null) {
      oprot.writeFieldBegin(IDENTIFIER_FIELD_DESC);
      oprot.writeString(this.identifier);
      oprot.writeFieldEnd();
    }
    if (this.password != null) {
      oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
      oprot.writeString(this.password);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(KEEP_LOGGED_IN_FIELD_DESC);
    oprot.writeBool(this.keepLoggedIn);
    oprot.writeFieldEnd();
    if (this.accessLocation != null) {
      oprot.writeFieldBegin(ACCESS_LOCATION_FIELD_DESC);
      oprot.writeString(this.accessLocation);
      oprot.writeFieldEnd();
    }
    if (this.systemName != null) {
      oprot.writeFieldBegin(SYSTEM_NAME_FIELD_DESC);
      oprot.writeString(this.systemName);
      oprot.writeFieldEnd();
    }
    if (this.certificate != null) {
      oprot.writeFieldBegin(CERTIFICATE_FIELD_DESC);
      oprot.writeString(this.certificate);
      oprot.writeFieldEnd();
    }
    if (this.verifier != null) {
      oprot.writeFieldBegin(VERIFIER_FIELD_DESC);
      oprot.writeString(this.verifier);
      oprot.writeFieldEnd();
    }
    if (this.secret != null) {
      oprot.writeFieldBegin(SECRET_FIELD_DESC);
      oprot.writeString(this.secret);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(E2EE_VERSION_FIELD_DESC);
    oprot.writeI32(this.e2eeVersion);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("LoginRequest(");
    boolean first = true;

    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("identityProvider:");
    sb.append(this.identityProvider);
    first = false;
    if (!first) sb.append(", ");
    sb.append("identifier:");
    if (this.identifier == null) {
      sb.append("null");
    } else {
      sb.append(this.identifier);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("password:");
    if (this.password == null) {
      sb.append("null");
    } else {
      sb.append(this.password);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("keepLoggedIn:");
    sb.append(this.keepLoggedIn);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accessLocation:");
    if (this.accessLocation == null) {
      sb.append("null");
    } else {
      sb.append(this.accessLocation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("systemName:");
    if (this.systemName == null) {
      sb.append("null");
    } else {
      sb.append(this.systemName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("certificate:");
    if (this.certificate == null) {
      sb.append("null");
    } else {
      sb.append(this.certificate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("verifier:");
    if (this.verifier == null) {
      sb.append("null");
    } else {
      sb.append(this.verifier);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("secret:");
    if (this.secret == null) {
      sb.append("null");
    } else {
      sb.append(this.secret);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("e2eeVersion:");
    sb.append(this.e2eeVersion);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

