/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class SpotNearbyResponse implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("SpotNearbyResponse");

  private static final TField SPOT_NEARBY_ITEMS_FIELD_DESC = new TField("spotNearbyItems", TType.LIST, (short)1);

  private Vector spotNearbyItems;

  // isset id assignments

  public SpotNearbyResponse() {
  }

  public SpotNearbyResponse(
    Vector spotNearbyItems)
  {
    this();
    this.spotNearbyItems = spotNearbyItems;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SpotNearbyResponse(SpotNearbyResponse other) {
    if (other.isSetSpotNearbyItems()) {
      Vector __this__spotNearbyItems = new Vector();
      for (Enumeration other_enum = other.spotNearbyItems.elements(); other_enum.hasMoreElements(); ) {
        SpotNearbyItem other_element = (SpotNearbyItem)other_enum.nextElement();
        __this__spotNearbyItems.addElement(new SpotNearbyItem(other_element));
      }
      this.spotNearbyItems = __this__spotNearbyItems;
    }
  }

  public SpotNearbyResponse deepCopy() {
    return new SpotNearbyResponse(this);
  }

  public void clear() {
    this.spotNearbyItems = null;
  }

  public int getSpotNearbyItemsSize() {
    return (this.spotNearbyItems == null) ? 0 : this.spotNearbyItems.size();
  }

  public Enumeration getSpotNearbyItemsEnumeration() {
    return (this.spotNearbyItems == null) ? null : this.spotNearbyItems.elements();
  }

  public void addToSpotNearbyItems(SpotNearbyItem elem) {
    if (this.spotNearbyItems == null) {
      this.spotNearbyItems = new Vector();
    }
    this.spotNearbyItems.addElement(elem);
  }

  public Vector getSpotNearbyItems() {
    return this.spotNearbyItems;
  }

  public void setSpotNearbyItems(Vector spotNearbyItems) {
    this.spotNearbyItems = spotNearbyItems;
  }

  public void unsetSpotNearbyItems() {
    this.spotNearbyItems = null;
  }

  /** Returns true if field spotNearbyItems is set (has been assigned a value) and false otherwise */
  public boolean isSetSpotNearbyItems() {
    return this.spotNearbyItems != null;
  }

  public void setSpotNearbyItemsIsSet(boolean value) {
    if (!value) {
      this.spotNearbyItems = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SpotNearbyResponse)
      return this.equals((SpotNearbyResponse)that);
    return false;
  }

  public boolean equals(SpotNearbyResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_spotNearbyItems = true && this.isSetSpotNearbyItems();
    boolean that_present_spotNearbyItems = true && that.isSetSpotNearbyItems();
    if (this_present_spotNearbyItems || that_present_spotNearbyItems) {
      if (!(this_present_spotNearbyItems && that_present_spotNearbyItems))
        return false;
      if (!this.spotNearbyItems.equals(that.spotNearbyItems))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    SpotNearbyResponse other = (SpotNearbyResponse)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetSpotNearbyItems(), other.isSetSpotNearbyItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpotNearbyItems()) {
      lastComparison = TBaseHelper.compareTo(this.spotNearbyItems, other.spotNearbyItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // SPOT_NEARBY_ITEMS
          if (field.type == TType.LIST) {
            {
              TList _list8 = iprot.readListBegin();
              this.spotNearbyItems = new Vector(_list8.size);
              for (int _i9 = 0; _i9 < _list8.size; ++_i9)
              {
                SpotNearbyItem _elem10;
                _elem10 = new SpotNearbyItem();
                _elem10.read(iprot);
                this.spotNearbyItems.addElement(_elem10);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.spotNearbyItems != null) {
      oprot.writeFieldBegin(SPOT_NEARBY_ITEMS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.spotNearbyItems.size()));
        for (Enumeration _iter11_enum = this.spotNearbyItems.elements(); _iter11_enum.hasMoreElements(); )         {
          SpotNearbyItem _iter11 = (SpotNearbyItem)_iter11_enum.nextElement();
          _iter11.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("SpotNearbyResponse(");
    boolean first = true;

    sb.append("spotNearbyItems:");
    if (this.spotNearbyItems == null) {
      sb.append("null");
    } else {
      sb.append(this.spotNearbyItems);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

