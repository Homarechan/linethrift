/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class CreateSquareChatRequest implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("CreateSquareChatRequest");

  private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
  private static final TField SQUARE_CHAT_FIELD_DESC = new TField("squareChat", TType.STRUCT, (short)2);
  private static final TField SQUARE_MEMBER_MIDS_FIELD_DESC = new TField("squareMemberMids", TType.LIST, (short)3);

  private int reqSeq;
  private SquareChat squareChat;
  private Vector squareMemberMids;

  // isset id assignments
  private static final int __REQSEQ_ISSET_ID = 0;
  private boolean[] __isset_vector = new boolean[1];

  public CreateSquareChatRequest() {
  }

  public CreateSquareChatRequest(
    int reqSeq,
    SquareChat squareChat,
    Vector squareMemberMids)
  {
    this();
    this.reqSeq = reqSeq;
    setReqSeqIsSet(true);
    this.squareChat = squareChat;
    this.squareMemberMids = squareMemberMids;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CreateSquareChatRequest(CreateSquareChatRequest other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    this.reqSeq = other.reqSeq;
    if (other.isSetSquareChat()) {
      this.squareChat = new SquareChat(other.squareChat);
    }
    if (other.isSetSquareMemberMids()) {
      Vector __this__squareMemberMids = new Vector();
      for (Enumeration other_enum = other.squareMemberMids.elements(); other_enum.hasMoreElements(); ) {
        String other_element = (String)other_enum.nextElement();
        __this__squareMemberMids.addElement(other_element);
      }
      this.squareMemberMids = __this__squareMemberMids;
    }
  }

  public CreateSquareChatRequest deepCopy() {
    return new CreateSquareChatRequest(this);
  }

  public void clear() {
    setReqSeqIsSet(false);
    this.reqSeq = 0;
    this.squareChat = null;
    this.squareMemberMids = null;
  }

  public int getReqSeq() {
    return this.reqSeq;
  }

  public void setReqSeq(int reqSeq) {
    this.reqSeq = reqSeq;
    setReqSeqIsSet(true);
  }

  public void unsetReqSeq() {
    __isset_vector[__REQSEQ_ISSET_ID] = false;
  }

  /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
  public boolean isSetReqSeq() {
    return __isset_vector[__REQSEQ_ISSET_ID];
  }

  public void setReqSeqIsSet(boolean value) {
    __isset_vector[__REQSEQ_ISSET_ID] = value;
  }

  public SquareChat getSquareChat() {
    return this.squareChat;
  }

  public void setSquareChat(SquareChat squareChat) {
    this.squareChat = squareChat;
  }

  public void unsetSquareChat() {
    this.squareChat = null;
  }

  /** Returns true if field squareChat is set (has been assigned a value) and false otherwise */
  public boolean isSetSquareChat() {
    return this.squareChat != null;
  }

  public void setSquareChatIsSet(boolean value) {
    if (!value) {
      this.squareChat = null;
    }
  }

  public int getSquareMemberMidsSize() {
    return (this.squareMemberMids == null) ? 0 : this.squareMemberMids.size();
  }

  public Enumeration getSquareMemberMidsEnumeration() {
    return (this.squareMemberMids == null) ? null : this.squareMemberMids.elements();
  }

  public void addToSquareMemberMids(String elem) {
    if (this.squareMemberMids == null) {
      this.squareMemberMids = new Vector();
    }
    this.squareMemberMids.addElement(elem);
  }

  public Vector getSquareMemberMids() {
    return this.squareMemberMids;
  }

  public void setSquareMemberMids(Vector squareMemberMids) {
    this.squareMemberMids = squareMemberMids;
  }

  public void unsetSquareMemberMids() {
    this.squareMemberMids = null;
  }

  /** Returns true if field squareMemberMids is set (has been assigned a value) and false otherwise */
  public boolean isSetSquareMemberMids() {
    return this.squareMemberMids != null;
  }

  public void setSquareMemberMidsIsSet(boolean value) {
    if (!value) {
      this.squareMemberMids = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CreateSquareChatRequest)
      return this.equals((CreateSquareChatRequest)that);
    return false;
  }

  public boolean equals(CreateSquareChatRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_reqSeq = true;
    boolean that_present_reqSeq = true;
    if (this_present_reqSeq || that_present_reqSeq) {
      if (!(this_present_reqSeq && that_present_reqSeq))
        return false;
      if (this.reqSeq != that.reqSeq)
        return false;
    }

    boolean this_present_squareChat = true && this.isSetSquareChat();
    boolean that_present_squareChat = true && that.isSetSquareChat();
    if (this_present_squareChat || that_present_squareChat) {
      if (!(this_present_squareChat && that_present_squareChat))
        return false;
      if (!this.squareChat.equals(that.squareChat))
        return false;
    }

    boolean this_present_squareMemberMids = true && this.isSetSquareMemberMids();
    boolean that_present_squareMemberMids = true && that.isSetSquareMemberMids();
    if (this_present_squareMemberMids || that_present_squareMemberMids) {
      if (!(this_present_squareMemberMids && that_present_squareMemberMids))
        return false;
      if (!this.squareMemberMids.equals(that.squareMemberMids))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    CreateSquareChatRequest other = (CreateSquareChatRequest)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReqSeq()) {
      lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSquareChat(), other.isSetSquareChat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSquareChat()) {
      lastComparison = this.squareChat.compareTo(other.squareChat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSquareMemberMids(), other.isSetSquareMemberMids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSquareMemberMids()) {
      lastComparison = TBaseHelper.compareTo(this.squareMemberMids, other.squareMemberMids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // REQ_SEQ
          if (field.type == TType.I32) {
            this.reqSeq = iprot.readI32();
            setReqSeqIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SQUARE_CHAT
          if (field.type == TType.STRUCT) {
            this.squareChat = new SquareChat();
            this.squareChat.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SQUARE_MEMBER_MIDS
          if (field.type == TType.LIST) {
            {
              TList _list292 = iprot.readListBegin();
              this.squareMemberMids = new Vector(_list292.size);
              for (int _i293 = 0; _i293 < _list292.size; ++_i293)
              {
                String _elem294;
                _elem294 = iprot.readString();
                this.squareMemberMids.addElement(_elem294);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
    oprot.writeI32(this.reqSeq);
    oprot.writeFieldEnd();
    if (this.squareChat != null) {
      oprot.writeFieldBegin(SQUARE_CHAT_FIELD_DESC);
      this.squareChat.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.squareMemberMids != null) {
      oprot.writeFieldBegin(SQUARE_MEMBER_MIDS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.squareMemberMids.size()));
        for (Enumeration _iter295_enum = this.squareMemberMids.elements(); _iter295_enum.hasMoreElements(); )         {
          String _iter295 = (String)_iter295_enum.nextElement();
          oprot.writeString(_iter295);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("CreateSquareChatRequest(");
    boolean first = true;

    sb.append("reqSeq:");
    sb.append(this.reqSeq);
    first = false;
    if (!first) sb.append(", ");
    sb.append("squareChat:");
    if (this.squareChat == null) {
      sb.append("null");
    } else {
      sb.append(this.squareChat);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("squareMemberMids:");
    if (this.squareMemberMids == null) {
      sb.append("null");
    } else {
      sb.append(this.squareMemberMids);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

