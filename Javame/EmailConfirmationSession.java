/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class EmailConfirmationSession implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("EmailConfirmationSession");

  private static final TField EMAIL_CONFIRMATION_TYPE_FIELD_DESC = new TField("emailConfirmationType", TType.I32, (short)1);
  private static final TField VERIFIER_FIELD_DESC = new TField("verifier", TType.STRING, (short)2);
  private static final TField TARGET_EMAIL_FIELD_DESC = new TField("targetEmail", TType.STRING, (short)3);

  private EmailConfirmationType emailConfirmationType;
  private String verifier;
  private String targetEmail;

  // isset id assignments

  public EmailConfirmationSession() {
  }

  public EmailConfirmationSession(
    EmailConfirmationType emailConfirmationType,
    String verifier,
    String targetEmail)
  {
    this();
    this.emailConfirmationType = emailConfirmationType;
    this.verifier = verifier;
    this.targetEmail = targetEmail;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EmailConfirmationSession(EmailConfirmationSession other) {
    if (other.isSetEmailConfirmationType()) {
      this.emailConfirmationType = other.emailConfirmationType;
    }
    if (other.isSetVerifier()) {
      this.verifier = other.verifier;
    }
    if (other.isSetTargetEmail()) {
      this.targetEmail = other.targetEmail;
    }
  }

  public EmailConfirmationSession deepCopy() {
    return new EmailConfirmationSession(this);
  }

  public void clear() {
    this.emailConfirmationType = null;
    this.verifier = null;
    this.targetEmail = null;
  }

  /**
   * 
   * @see EmailConfirmationType
   */
  public EmailConfirmationType getEmailConfirmationType() {
    return this.emailConfirmationType;
  }

  /**
   * 
   * @see EmailConfirmationType
   */
  public void setEmailConfirmationType(EmailConfirmationType emailConfirmationType) {
    this.emailConfirmationType = emailConfirmationType;
  }

  public void unsetEmailConfirmationType() {
    this.emailConfirmationType = null;
  }

  /** Returns true if field emailConfirmationType is set (has been assigned a value) and false otherwise */
  public boolean isSetEmailConfirmationType() {
    return this.emailConfirmationType != null;
  }

  public void setEmailConfirmationTypeIsSet(boolean value) {
    if (!value) {
      this.emailConfirmationType = null;
    }
  }

  public String getVerifier() {
    return this.verifier;
  }

  public void setVerifier(String verifier) {
    this.verifier = verifier;
  }

  public void unsetVerifier() {
    this.verifier = null;
  }

  /** Returns true if field verifier is set (has been assigned a value) and false otherwise */
  public boolean isSetVerifier() {
    return this.verifier != null;
  }

  public void setVerifierIsSet(boolean value) {
    if (!value) {
      this.verifier = null;
    }
  }

  public String getTargetEmail() {
    return this.targetEmail;
  }

  public void setTargetEmail(String targetEmail) {
    this.targetEmail = targetEmail;
  }

  public void unsetTargetEmail() {
    this.targetEmail = null;
  }

  /** Returns true if field targetEmail is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetEmail() {
    return this.targetEmail != null;
  }

  public void setTargetEmailIsSet(boolean value) {
    if (!value) {
      this.targetEmail = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EmailConfirmationSession)
      return this.equals((EmailConfirmationSession)that);
    return false;
  }

  public boolean equals(EmailConfirmationSession that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_emailConfirmationType = true && this.isSetEmailConfirmationType();
    boolean that_present_emailConfirmationType = true && that.isSetEmailConfirmationType();
    if (this_present_emailConfirmationType || that_present_emailConfirmationType) {
      if (!(this_present_emailConfirmationType && that_present_emailConfirmationType))
        return false;
      if (!this.emailConfirmationType.equals(that.emailConfirmationType))
        return false;
    }

    boolean this_present_verifier = true && this.isSetVerifier();
    boolean that_present_verifier = true && that.isSetVerifier();
    if (this_present_verifier || that_present_verifier) {
      if (!(this_present_verifier && that_present_verifier))
        return false;
      if (!this.verifier.equals(that.verifier))
        return false;
    }

    boolean this_present_targetEmail = true && this.isSetTargetEmail();
    boolean that_present_targetEmail = true && that.isSetTargetEmail();
    if (this_present_targetEmail || that_present_targetEmail) {
      if (!(this_present_targetEmail && that_present_targetEmail))
        return false;
      if (!this.targetEmail.equals(that.targetEmail))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    EmailConfirmationSession other = (EmailConfirmationSession)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetEmailConfirmationType(), other.isSetEmailConfirmationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmailConfirmationType()) {
      lastComparison = TBaseHelper.compareTo(this.emailConfirmationType, other.emailConfirmationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetVerifier(), other.isSetVerifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVerifier()) {
      lastComparison = TBaseHelper.compareTo(this.verifier, other.verifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetTargetEmail(), other.isSetTargetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetEmail()) {
      lastComparison = TBaseHelper.compareTo(this.targetEmail, other.targetEmail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // EMAIL_CONFIRMATION_TYPE
          if (field.type == TType.I32) {
            this.emailConfirmationType = EmailConfirmationType.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // VERIFIER
          if (field.type == TType.STRING) {
            this.verifier = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // TARGET_EMAIL
          if (field.type == TType.STRING) {
            this.targetEmail = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.emailConfirmationType != null) {
      oprot.writeFieldBegin(EMAIL_CONFIRMATION_TYPE_FIELD_DESC);
      oprot.writeI32(this.emailConfirmationType.getValue());
      oprot.writeFieldEnd();
    }
    if (this.verifier != null) {
      oprot.writeFieldBegin(VERIFIER_FIELD_DESC);
      oprot.writeString(this.verifier);
      oprot.writeFieldEnd();
    }
    if (this.targetEmail != null) {
      oprot.writeFieldBegin(TARGET_EMAIL_FIELD_DESC);
      oprot.writeString(this.targetEmail);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("EmailConfirmationSession(");
    boolean first = true;

    sb.append("emailConfirmationType:");
    if (this.emailConfirmationType == null) {
      sb.append("null");
    } else {
      sb.append(this.emailConfirmationType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("verifier:");
    if (this.verifier == null) {
      sb.append("null");
    } else {
      sb.append(this.verifier);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("targetEmail:");
    if (this.targetEmail == null) {
      sb.append("null");
    } else {
      sb.append(this.targetEmail);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

