/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class SquareFeature implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("SquareFeature");

  private static final TField CONTROL_STATE_FIELD_DESC = new TField("controlState", TType.I32, (short)1);
  private static final TField BOOLEAN_VALUE_FIELD_DESC = new TField("booleanValue", TType.I32, (short)2);

  private SquareFeatureControlState controlState;
  private BooleanState booleanValue;

  // isset id assignments

  public SquareFeature() {
  }

  public SquareFeature(
    SquareFeatureControlState controlState,
    BooleanState booleanValue)
  {
    this();
    this.controlState = controlState;
    this.booleanValue = booleanValue;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SquareFeature(SquareFeature other) {
    if (other.isSetControlState()) {
      this.controlState = other.controlState;
    }
    if (other.isSetBooleanValue()) {
      this.booleanValue = other.booleanValue;
    }
  }

  public SquareFeature deepCopy() {
    return new SquareFeature(this);
  }

  public void clear() {
    this.controlState = null;
    this.booleanValue = null;
  }

  /**
   * 
   * @see SquareFeatureControlState
   */
  public SquareFeatureControlState getControlState() {
    return this.controlState;
  }

  /**
   * 
   * @see SquareFeatureControlState
   */
  public void setControlState(SquareFeatureControlState controlState) {
    this.controlState = controlState;
  }

  public void unsetControlState() {
    this.controlState = null;
  }

  /** Returns true if field controlState is set (has been assigned a value) and false otherwise */
  public boolean isSetControlState() {
    return this.controlState != null;
  }

  public void setControlStateIsSet(boolean value) {
    if (!value) {
      this.controlState = null;
    }
  }

  /**
   * 
   * @see BooleanState
   */
  public BooleanState getBooleanValue() {
    return this.booleanValue;
  }

  /**
   * 
   * @see BooleanState
   */
  public void setBooleanValue(BooleanState booleanValue) {
    this.booleanValue = booleanValue;
  }

  public void unsetBooleanValue() {
    this.booleanValue = null;
  }

  /** Returns true if field booleanValue is set (has been assigned a value) and false otherwise */
  public boolean isSetBooleanValue() {
    return this.booleanValue != null;
  }

  public void setBooleanValueIsSet(boolean value) {
    if (!value) {
      this.booleanValue = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SquareFeature)
      return this.equals((SquareFeature)that);
    return false;
  }

  public boolean equals(SquareFeature that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_controlState = true && this.isSetControlState();
    boolean that_present_controlState = true && that.isSetControlState();
    if (this_present_controlState || that_present_controlState) {
      if (!(this_present_controlState && that_present_controlState))
        return false;
      if (!this.controlState.equals(that.controlState))
        return false;
    }

    boolean this_present_booleanValue = true && this.isSetBooleanValue();
    boolean that_present_booleanValue = true && that.isSetBooleanValue();
    if (this_present_booleanValue || that_present_booleanValue) {
      if (!(this_present_booleanValue && that_present_booleanValue))
        return false;
      if (!this.booleanValue.equals(that.booleanValue))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    SquareFeature other = (SquareFeature)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetControlState(), other.isSetControlState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetControlState()) {
      lastComparison = TBaseHelper.compareTo(this.controlState, other.controlState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetBooleanValue(), other.isSetBooleanValue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBooleanValue()) {
      lastComparison = TBaseHelper.compareTo(this.booleanValue, other.booleanValue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // CONTROL_STATE
          if (field.type == TType.I32) {
            this.controlState = SquareFeatureControlState.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // BOOLEAN_VALUE
          if (field.type == TType.I32) {
            this.booleanValue = BooleanState.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.controlState != null) {
      oprot.writeFieldBegin(CONTROL_STATE_FIELD_DESC);
      oprot.writeI32(this.controlState.getValue());
      oprot.writeFieldEnd();
    }
    if (this.booleanValue != null) {
      oprot.writeFieldBegin(BOOLEAN_VALUE_FIELD_DESC);
      oprot.writeI32(this.booleanValue.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("SquareFeature(");
    boolean first = true;

    sb.append("controlState:");
    if (this.controlState == null) {
      sb.append("null");
    } else {
      sb.append(this.controlState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("booleanValue:");
    if (this.booleanValue == null) {
      sb.append("null");
    } else {
      sb.append(this.booleanValue);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

