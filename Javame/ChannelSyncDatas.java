/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class ChannelSyncDatas implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("ChannelSyncDatas");

  private static final TField CHANNEL_INFOS_FIELD_DESC = new TField("channelInfos", TType.LIST, (short)1);
  private static final TField CHANNEL_DOMAINS_FIELD_DESC = new TField("channelDomains", TType.LIST, (short)2);
  private static final TField REVISION_FIELD_DESC = new TField("revision", TType.I64, (short)3);
  private static final TField EXPIRES_FIELD_DESC = new TField("expires", TType.I64, (short)4);

  private Vector channelInfos;
  private Vector channelDomains;
  private long revision;
  private long expires;

  // isset id assignments
  private static final int __REVISION_ISSET_ID = 0;
  private static final int __EXPIRES_ISSET_ID = 1;
  private boolean[] __isset_vector = new boolean[2];

  public ChannelSyncDatas() {
  }

  public ChannelSyncDatas(
    Vector channelInfos,
    Vector channelDomains,
    long revision,
    long expires)
  {
    this();
    this.channelInfos = channelInfos;
    this.channelDomains = channelDomains;
    this.revision = revision;
    setRevisionIsSet(true);
    this.expires = expires;
    setExpiresIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChannelSyncDatas(ChannelSyncDatas other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    if (other.isSetChannelInfos()) {
      Vector __this__channelInfos = new Vector();
      for (Enumeration other_enum = other.channelInfos.elements(); other_enum.hasMoreElements(); ) {
        ChannelInfo other_element = (ChannelInfo)other_enum.nextElement();
        __this__channelInfos.addElement(new ChannelInfo(other_element));
      }
      this.channelInfos = __this__channelInfos;
    }
    if (other.isSetChannelDomains()) {
      Vector __this__channelDomains = new Vector();
      for (Enumeration other_enum = other.channelDomains.elements(); other_enum.hasMoreElements(); ) {
        ChannelDomain other_element = (ChannelDomain)other_enum.nextElement();
        __this__channelDomains.addElement(new ChannelDomain(other_element));
      }
      this.channelDomains = __this__channelDomains;
    }
    this.revision = other.revision;
    this.expires = other.expires;
  }

  public ChannelSyncDatas deepCopy() {
    return new ChannelSyncDatas(this);
  }

  public void clear() {
    this.channelInfos = null;
    this.channelDomains = null;
    setRevisionIsSet(false);
    this.revision = 0;
    setExpiresIsSet(false);
    this.expires = 0;
  }

  public int getChannelInfosSize() {
    return (this.channelInfos == null) ? 0 : this.channelInfos.size();
  }

  public Enumeration getChannelInfosEnumeration() {
    return (this.channelInfos == null) ? null : this.channelInfos.elements();
  }

  public void addToChannelInfos(ChannelInfo elem) {
    if (this.channelInfos == null) {
      this.channelInfos = new Vector();
    }
    this.channelInfos.addElement(elem);
  }

  public Vector getChannelInfos() {
    return this.channelInfos;
  }

  public void setChannelInfos(Vector channelInfos) {
    this.channelInfos = channelInfos;
  }

  public void unsetChannelInfos() {
    this.channelInfos = null;
  }

  /** Returns true if field channelInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelInfos() {
    return this.channelInfos != null;
  }

  public void setChannelInfosIsSet(boolean value) {
    if (!value) {
      this.channelInfos = null;
    }
  }

  public int getChannelDomainsSize() {
    return (this.channelDomains == null) ? 0 : this.channelDomains.size();
  }

  public Enumeration getChannelDomainsEnumeration() {
    return (this.channelDomains == null) ? null : this.channelDomains.elements();
  }

  public void addToChannelDomains(ChannelDomain elem) {
    if (this.channelDomains == null) {
      this.channelDomains = new Vector();
    }
    this.channelDomains.addElement(elem);
  }

  public Vector getChannelDomains() {
    return this.channelDomains;
  }

  public void setChannelDomains(Vector channelDomains) {
    this.channelDomains = channelDomains;
  }

  public void unsetChannelDomains() {
    this.channelDomains = null;
  }

  /** Returns true if field channelDomains is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelDomains() {
    return this.channelDomains != null;
  }

  public void setChannelDomainsIsSet(boolean value) {
    if (!value) {
      this.channelDomains = null;
    }
  }

  public long getRevision() {
    return this.revision;
  }

  public void setRevision(long revision) {
    this.revision = revision;
    setRevisionIsSet(true);
  }

  public void unsetRevision() {
    __isset_vector[__REVISION_ISSET_ID] = false;
  }

  /** Returns true if field revision is set (has been assigned a value) and false otherwise */
  public boolean isSetRevision() {
    return __isset_vector[__REVISION_ISSET_ID];
  }

  public void setRevisionIsSet(boolean value) {
    __isset_vector[__REVISION_ISSET_ID] = value;
  }

  public long getExpires() {
    return this.expires;
  }

  public void setExpires(long expires) {
    this.expires = expires;
    setExpiresIsSet(true);
  }

  public void unsetExpires() {
    __isset_vector[__EXPIRES_ISSET_ID] = false;
  }

  /** Returns true if field expires is set (has been assigned a value) and false otherwise */
  public boolean isSetExpires() {
    return __isset_vector[__EXPIRES_ISSET_ID];
  }

  public void setExpiresIsSet(boolean value) {
    __isset_vector[__EXPIRES_ISSET_ID] = value;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ChannelSyncDatas)
      return this.equals((ChannelSyncDatas)that);
    return false;
  }

  public boolean equals(ChannelSyncDatas that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_channelInfos = true && this.isSetChannelInfos();
    boolean that_present_channelInfos = true && that.isSetChannelInfos();
    if (this_present_channelInfos || that_present_channelInfos) {
      if (!(this_present_channelInfos && that_present_channelInfos))
        return false;
      if (!this.channelInfos.equals(that.channelInfos))
        return false;
    }

    boolean this_present_channelDomains = true && this.isSetChannelDomains();
    boolean that_present_channelDomains = true && that.isSetChannelDomains();
    if (this_present_channelDomains || that_present_channelDomains) {
      if (!(this_present_channelDomains && that_present_channelDomains))
        return false;
      if (!this.channelDomains.equals(that.channelDomains))
        return false;
    }

    boolean this_present_revision = true;
    boolean that_present_revision = true;
    if (this_present_revision || that_present_revision) {
      if (!(this_present_revision && that_present_revision))
        return false;
      if (this.revision != that.revision)
        return false;
    }

    boolean this_present_expires = true;
    boolean that_present_expires = true;
    if (this_present_expires || that_present_expires) {
      if (!(this_present_expires && that_present_expires))
        return false;
      if (this.expires != that.expires)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    ChannelSyncDatas other = (ChannelSyncDatas)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetChannelInfos(), other.isSetChannelInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelInfos()) {
      lastComparison = TBaseHelper.compareTo(this.channelInfos, other.channelInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetChannelDomains(), other.isSetChannelDomains());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelDomains()) {
      lastComparison = TBaseHelper.compareTo(this.channelDomains, other.channelDomains);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetRevision(), other.isSetRevision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRevision()) {
      lastComparison = TBaseHelper.compareTo(this.revision, other.revision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetExpires(), other.isSetExpires());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpires()) {
      lastComparison = TBaseHelper.compareTo(this.expires, other.expires);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // CHANNEL_INFOS
          if (field.type == TType.LIST) {
            {
              TList _list87 = iprot.readListBegin();
              this.channelInfos = new Vector(_list87.size);
              for (int _i88 = 0; _i88 < _list87.size; ++_i88)
              {
                ChannelInfo _elem89;
                _elem89 = new ChannelInfo();
                _elem89.read(iprot);
                this.channelInfos.addElement(_elem89);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // CHANNEL_DOMAINS
          if (field.type == TType.LIST) {
            {
              TList _list90 = iprot.readListBegin();
              this.channelDomains = new Vector(_list90.size);
              for (int _i91 = 0; _i91 < _list90.size; ++_i91)
              {
                ChannelDomain _elem92;
                _elem92 = new ChannelDomain();
                _elem92.read(iprot);
                this.channelDomains.addElement(_elem92);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // REVISION
          if (field.type == TType.I64) {
            this.revision = iprot.readI64();
            setRevisionIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // EXPIRES
          if (field.type == TType.I64) {
            this.expires = iprot.readI64();
            setExpiresIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.channelInfos != null) {
      oprot.writeFieldBegin(CHANNEL_INFOS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.channelInfos.size()));
        for (Enumeration _iter93_enum = this.channelInfos.elements(); _iter93_enum.hasMoreElements(); )         {
          ChannelInfo _iter93 = (ChannelInfo)_iter93_enum.nextElement();
          _iter93.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.channelDomains != null) {
      oprot.writeFieldBegin(CHANNEL_DOMAINS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.channelDomains.size()));
        for (Enumeration _iter94_enum = this.channelDomains.elements(); _iter94_enum.hasMoreElements(); )         {
          ChannelDomain _iter94 = (ChannelDomain)_iter94_enum.nextElement();
          _iter94.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(REVISION_FIELD_DESC);
    oprot.writeI64(this.revision);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(EXPIRES_FIELD_DESC);
    oprot.writeI64(this.expires);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("ChannelSyncDatas(");
    boolean first = true;

    sb.append("channelInfos:");
    if (this.channelInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.channelInfos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelDomains:");
    if (this.channelDomains == null) {
      sb.append("null");
    } else {
      sb.append(this.channelDomains);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("revision:");
    sb.append(this.revision);
    first = false;
    if (!first) sb.append(", ");
    sb.append("expires:");
    sb.append(this.expires);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

