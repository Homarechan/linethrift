/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class BuddyOnAir implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("BuddyOnAir");

  private static final TField MID_FIELD_DESC = new TField("mid", TType.STRING, (short)1);
  private static final TField FRESHNESS_LIFETIME_FIELD_DESC = new TField("freshnessLifetime", TType.I64, (short)3);
  private static final TField ON_AIR_ID_FIELD_DESC = new TField("onAirId", TType.STRING, (short)4);
  private static final TField ON_AIR_FIELD_DESC = new TField("onAir", TType.BOOL, (short)5);
  private static final TField TEXT_FIELD_DESC = new TField("text", TType.STRING, (short)11);
  private static final TField VIEWER_COUNT_FIELD_DESC = new TField("viewerCount", TType.I64, (short)12);
  private static final TField TARGET_COUNT_FIELD_DESC = new TField("targetCount", TType.I64, (short)13);
  private static final TField ON_AIR_TYPE_FIELD_DESC = new TField("onAirType", TType.I32, (short)31);
  private static final TField ON_AIR_URLS_FIELD_DESC = new TField("onAirUrls", TType.STRUCT, (short)32);

  private String mid;
  private long freshnessLifetime;
  private String onAirId;
  private boolean onAir;
  private String text;
  private long viewerCount;
  private long targetCount;
  private BuddyOnAirType onAirType;
  private BuddyOnAirUrls onAirUrls;

  // isset id assignments
  private static final int __FRESHNESSLIFETIME_ISSET_ID = 0;
  private static final int __ONAIR_ISSET_ID = 1;
  private static final int __VIEWERCOUNT_ISSET_ID = 2;
  private static final int __TARGETCOUNT_ISSET_ID = 3;
  private boolean[] __isset_vector = new boolean[4];

  public BuddyOnAir() {
  }

  public BuddyOnAir(
    String mid,
    long freshnessLifetime,
    String onAirId,
    boolean onAir,
    String text,
    long viewerCount,
    long targetCount,
    BuddyOnAirType onAirType,
    BuddyOnAirUrls onAirUrls)
  {
    this();
    this.mid = mid;
    this.freshnessLifetime = freshnessLifetime;
    setFreshnessLifetimeIsSet(true);
    this.onAirId = onAirId;
    this.onAir = onAir;
    setOnAirIsSet(true);
    this.text = text;
    this.viewerCount = viewerCount;
    setViewerCountIsSet(true);
    this.targetCount = targetCount;
    setTargetCountIsSet(true);
    this.onAirType = onAirType;
    this.onAirUrls = onAirUrls;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BuddyOnAir(BuddyOnAir other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    if (other.isSetMid()) {
      this.mid = other.mid;
    }
    this.freshnessLifetime = other.freshnessLifetime;
    if (other.isSetOnAirId()) {
      this.onAirId = other.onAirId;
    }
    this.onAir = other.onAir;
    if (other.isSetText()) {
      this.text = other.text;
    }
    this.viewerCount = other.viewerCount;
    this.targetCount = other.targetCount;
    if (other.isSetOnAirType()) {
      this.onAirType = other.onAirType;
    }
    if (other.isSetOnAirUrls()) {
      this.onAirUrls = new BuddyOnAirUrls(other.onAirUrls);
    }
  }

  public BuddyOnAir deepCopy() {
    return new BuddyOnAir(this);
  }

  public void clear() {
    this.mid = null;
    setFreshnessLifetimeIsSet(false);
    this.freshnessLifetime = 0;
    this.onAirId = null;
    setOnAirIsSet(false);
    this.onAir = false;
    this.text = null;
    setViewerCountIsSet(false);
    this.viewerCount = 0;
    setTargetCountIsSet(false);
    this.targetCount = 0;
    this.onAirType = null;
    this.onAirUrls = null;
  }

  public String getMid() {
    return this.mid;
  }

  public void setMid(String mid) {
    this.mid = mid;
  }

  public void unsetMid() {
    this.mid = null;
  }

  /** Returns true if field mid is set (has been assigned a value) and false otherwise */
  public boolean isSetMid() {
    return this.mid != null;
  }

  public void setMidIsSet(boolean value) {
    if (!value) {
      this.mid = null;
    }
  }

  public long getFreshnessLifetime() {
    return this.freshnessLifetime;
  }

  public void setFreshnessLifetime(long freshnessLifetime) {
    this.freshnessLifetime = freshnessLifetime;
    setFreshnessLifetimeIsSet(true);
  }

  public void unsetFreshnessLifetime() {
    __isset_vector[__FRESHNESSLIFETIME_ISSET_ID] = false;
  }

  /** Returns true if field freshnessLifetime is set (has been assigned a value) and false otherwise */
  public boolean isSetFreshnessLifetime() {
    return __isset_vector[__FRESHNESSLIFETIME_ISSET_ID];
  }

  public void setFreshnessLifetimeIsSet(boolean value) {
    __isset_vector[__FRESHNESSLIFETIME_ISSET_ID] = value;
  }

  public String getOnAirId() {
    return this.onAirId;
  }

  public void setOnAirId(String onAirId) {
    this.onAirId = onAirId;
  }

  public void unsetOnAirId() {
    this.onAirId = null;
  }

  /** Returns true if field onAirId is set (has been assigned a value) and false otherwise */
  public boolean isSetOnAirId() {
    return this.onAirId != null;
  }

  public void setOnAirIdIsSet(boolean value) {
    if (!value) {
      this.onAirId = null;
    }
  }

  public boolean isOnAir() {
    return this.onAir;
  }

  public void setOnAir(boolean onAir) {
    this.onAir = onAir;
    setOnAirIsSet(true);
  }

  public void unsetOnAir() {
    __isset_vector[__ONAIR_ISSET_ID] = false;
  }

  /** Returns true if field onAir is set (has been assigned a value) and false otherwise */
  public boolean isSetOnAir() {
    return __isset_vector[__ONAIR_ISSET_ID];
  }

  public void setOnAirIsSet(boolean value) {
    __isset_vector[__ONAIR_ISSET_ID] = value;
  }

  public String getText() {
    return this.text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public void unsetText() {
    this.text = null;
  }

  /** Returns true if field text is set (has been assigned a value) and false otherwise */
  public boolean isSetText() {
    return this.text != null;
  }

  public void setTextIsSet(boolean value) {
    if (!value) {
      this.text = null;
    }
  }

  public long getViewerCount() {
    return this.viewerCount;
  }

  public void setViewerCount(long viewerCount) {
    this.viewerCount = viewerCount;
    setViewerCountIsSet(true);
  }

  public void unsetViewerCount() {
    __isset_vector[__VIEWERCOUNT_ISSET_ID] = false;
  }

  /** Returns true if field viewerCount is set (has been assigned a value) and false otherwise */
  public boolean isSetViewerCount() {
    return __isset_vector[__VIEWERCOUNT_ISSET_ID];
  }

  public void setViewerCountIsSet(boolean value) {
    __isset_vector[__VIEWERCOUNT_ISSET_ID] = value;
  }

  public long getTargetCount() {
    return this.targetCount;
  }

  public void setTargetCount(long targetCount) {
    this.targetCount = targetCount;
    setTargetCountIsSet(true);
  }

  public void unsetTargetCount() {
    __isset_vector[__TARGETCOUNT_ISSET_ID] = false;
  }

  /** Returns true if field targetCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetCount() {
    return __isset_vector[__TARGETCOUNT_ISSET_ID];
  }

  public void setTargetCountIsSet(boolean value) {
    __isset_vector[__TARGETCOUNT_ISSET_ID] = value;
  }

  /**
   * 
   * @see BuddyOnAirType
   */
  public BuddyOnAirType getOnAirType() {
    return this.onAirType;
  }

  /**
   * 
   * @see BuddyOnAirType
   */
  public void setOnAirType(BuddyOnAirType onAirType) {
    this.onAirType = onAirType;
  }

  public void unsetOnAirType() {
    this.onAirType = null;
  }

  /** Returns true if field onAirType is set (has been assigned a value) and false otherwise */
  public boolean isSetOnAirType() {
    return this.onAirType != null;
  }

  public void setOnAirTypeIsSet(boolean value) {
    if (!value) {
      this.onAirType = null;
    }
  }

  public BuddyOnAirUrls getOnAirUrls() {
    return this.onAirUrls;
  }

  public void setOnAirUrls(BuddyOnAirUrls onAirUrls) {
    this.onAirUrls = onAirUrls;
  }

  public void unsetOnAirUrls() {
    this.onAirUrls = null;
  }

  /** Returns true if field onAirUrls is set (has been assigned a value) and false otherwise */
  public boolean isSetOnAirUrls() {
    return this.onAirUrls != null;
  }

  public void setOnAirUrlsIsSet(boolean value) {
    if (!value) {
      this.onAirUrls = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BuddyOnAir)
      return this.equals((BuddyOnAir)that);
    return false;
  }

  public boolean equals(BuddyOnAir that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_mid = true && this.isSetMid();
    boolean that_present_mid = true && that.isSetMid();
    if (this_present_mid || that_present_mid) {
      if (!(this_present_mid && that_present_mid))
        return false;
      if (!this.mid.equals(that.mid))
        return false;
    }

    boolean this_present_freshnessLifetime = true;
    boolean that_present_freshnessLifetime = true;
    if (this_present_freshnessLifetime || that_present_freshnessLifetime) {
      if (!(this_present_freshnessLifetime && that_present_freshnessLifetime))
        return false;
      if (this.freshnessLifetime != that.freshnessLifetime)
        return false;
    }

    boolean this_present_onAirId = true && this.isSetOnAirId();
    boolean that_present_onAirId = true && that.isSetOnAirId();
    if (this_present_onAirId || that_present_onAirId) {
      if (!(this_present_onAirId && that_present_onAirId))
        return false;
      if (!this.onAirId.equals(that.onAirId))
        return false;
    }

    boolean this_present_onAir = true;
    boolean that_present_onAir = true;
    if (this_present_onAir || that_present_onAir) {
      if (!(this_present_onAir && that_present_onAir))
        return false;
      if (this.onAir != that.onAir)
        return false;
    }

    boolean this_present_text = true && this.isSetText();
    boolean that_present_text = true && that.isSetText();
    if (this_present_text || that_present_text) {
      if (!(this_present_text && that_present_text))
        return false;
      if (!this.text.equals(that.text))
        return false;
    }

    boolean this_present_viewerCount = true;
    boolean that_present_viewerCount = true;
    if (this_present_viewerCount || that_present_viewerCount) {
      if (!(this_present_viewerCount && that_present_viewerCount))
        return false;
      if (this.viewerCount != that.viewerCount)
        return false;
    }

    boolean this_present_targetCount = true;
    boolean that_present_targetCount = true;
    if (this_present_targetCount || that_present_targetCount) {
      if (!(this_present_targetCount && that_present_targetCount))
        return false;
      if (this.targetCount != that.targetCount)
        return false;
    }

    boolean this_present_onAirType = true && this.isSetOnAirType();
    boolean that_present_onAirType = true && that.isSetOnAirType();
    if (this_present_onAirType || that_present_onAirType) {
      if (!(this_present_onAirType && that_present_onAirType))
        return false;
      if (!this.onAirType.equals(that.onAirType))
        return false;
    }

    boolean this_present_onAirUrls = true && this.isSetOnAirUrls();
    boolean that_present_onAirUrls = true && that.isSetOnAirUrls();
    if (this_present_onAirUrls || that_present_onAirUrls) {
      if (!(this_present_onAirUrls && that_present_onAirUrls))
        return false;
      if (!this.onAirUrls.equals(that.onAirUrls))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    BuddyOnAir other = (BuddyOnAir)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetMid(), other.isSetMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMid()) {
      lastComparison = TBaseHelper.compareTo(this.mid, other.mid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetFreshnessLifetime(), other.isSetFreshnessLifetime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFreshnessLifetime()) {
      lastComparison = TBaseHelper.compareTo(this.freshnessLifetime, other.freshnessLifetime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetOnAirId(), other.isSetOnAirId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnAirId()) {
      lastComparison = TBaseHelper.compareTo(this.onAirId, other.onAirId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetOnAir(), other.isSetOnAir());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnAir()) {
      lastComparison = TBaseHelper.compareTo(this.onAir, other.onAir);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetText(), other.isSetText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetText()) {
      lastComparison = TBaseHelper.compareTo(this.text, other.text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetViewerCount(), other.isSetViewerCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetViewerCount()) {
      lastComparison = TBaseHelper.compareTo(this.viewerCount, other.viewerCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetTargetCount(), other.isSetTargetCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetCount()) {
      lastComparison = TBaseHelper.compareTo(this.targetCount, other.targetCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetOnAirType(), other.isSetOnAirType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnAirType()) {
      lastComparison = TBaseHelper.compareTo(this.onAirType, other.onAirType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetOnAirUrls(), other.isSetOnAirUrls());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnAirUrls()) {
      lastComparison = this.onAirUrls.compareTo(other.onAirUrls);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // MID
          if (field.type == TType.STRING) {
            this.mid = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // FRESHNESS_LIFETIME
          if (field.type == TType.I64) {
            this.freshnessLifetime = iprot.readI64();
            setFreshnessLifetimeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // ON_AIR_ID
          if (field.type == TType.STRING) {
            this.onAirId = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // ON_AIR
          if (field.type == TType.BOOL) {
            this.onAir = iprot.readBool();
            setOnAirIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // TEXT
          if (field.type == TType.STRING) {
            this.text = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // VIEWER_COUNT
          if (field.type == TType.I64) {
            this.viewerCount = iprot.readI64();
            setViewerCountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // TARGET_COUNT
          if (field.type == TType.I64) {
            this.targetCount = iprot.readI64();
            setTargetCountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 31: // ON_AIR_TYPE
          if (field.type == TType.I32) {
            this.onAirType = BuddyOnAirType.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 32: // ON_AIR_URLS
          if (field.type == TType.STRUCT) {
            this.onAirUrls = new BuddyOnAirUrls();
            this.onAirUrls.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.mid != null) {
      oprot.writeFieldBegin(MID_FIELD_DESC);
      oprot.writeString(this.mid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(FRESHNESS_LIFETIME_FIELD_DESC);
    oprot.writeI64(this.freshnessLifetime);
    oprot.writeFieldEnd();
    if (this.onAirId != null) {
      oprot.writeFieldBegin(ON_AIR_ID_FIELD_DESC);
      oprot.writeString(this.onAirId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(ON_AIR_FIELD_DESC);
    oprot.writeBool(this.onAir);
    oprot.writeFieldEnd();
    if (this.text != null) {
      oprot.writeFieldBegin(TEXT_FIELD_DESC);
      oprot.writeString(this.text);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(VIEWER_COUNT_FIELD_DESC);
    oprot.writeI64(this.viewerCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TARGET_COUNT_FIELD_DESC);
    oprot.writeI64(this.targetCount);
    oprot.writeFieldEnd();
    if (this.onAirType != null) {
      oprot.writeFieldBegin(ON_AIR_TYPE_FIELD_DESC);
      oprot.writeI32(this.onAirType.getValue());
      oprot.writeFieldEnd();
    }
    if (this.onAirUrls != null) {
      oprot.writeFieldBegin(ON_AIR_URLS_FIELD_DESC);
      this.onAirUrls.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("BuddyOnAir(");
    boolean first = true;

    sb.append("mid:");
    if (this.mid == null) {
      sb.append("null");
    } else {
      sb.append(this.mid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("freshnessLifetime:");
    sb.append(this.freshnessLifetime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("onAirId:");
    if (this.onAirId == null) {
      sb.append("null");
    } else {
      sb.append(this.onAirId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("onAir:");
    sb.append(this.onAir);
    first = false;
    if (!first) sb.append(", ");
    sb.append("text:");
    if (this.text == null) {
      sb.append("null");
    } else {
      sb.append(this.text);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("viewerCount:");
    sb.append(this.viewerCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("targetCount:");
    sb.append(this.targetCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("onAirType:");
    if (this.onAirType == null) {
      sb.append("null");
    } else {
      sb.append(this.onAirType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("onAirUrls:");
    if (this.onAirUrls == null) {
      sb.append("null");
    } else {
      sb.append(this.onAirUrls);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

