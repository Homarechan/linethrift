/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class TMessageBoxWrapUp implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("TMessageBoxWrapUp");

  private static final TField MESSAGE_BOX_FIELD_DESC = new TField("messageBox", TType.STRUCT, (short)1);
  private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)2);
  private static final TField CONTACTS_FIELD_DESC = new TField("contacts", TType.LIST, (short)3);
  private static final TField PICTURE_REVISION_FIELD_DESC = new TField("pictureRevision", TType.STRING, (short)4);

  private TMessageBox messageBox;
  private String name;
  private Vector contacts;
  private String pictureRevision;

  // isset id assignments

  public TMessageBoxWrapUp() {
  }

  public TMessageBoxWrapUp(
    TMessageBox messageBox,
    String name,
    Vector contacts,
    String pictureRevision)
  {
    this();
    this.messageBox = messageBox;
    this.name = name;
    this.contacts = contacts;
    this.pictureRevision = pictureRevision;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMessageBoxWrapUp(TMessageBoxWrapUp other) {
    if (other.isSetMessageBox()) {
      this.messageBox = new TMessageBox(other.messageBox);
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetContacts()) {
      Vector __this__contacts = new Vector();
      for (Enumeration other_enum = other.contacts.elements(); other_enum.hasMoreElements(); ) {
        Contact other_element = (Contact)other_enum.nextElement();
        __this__contacts.addElement(new Contact(other_element));
      }
      this.contacts = __this__contacts;
    }
    if (other.isSetPictureRevision()) {
      this.pictureRevision = other.pictureRevision;
    }
  }

  public TMessageBoxWrapUp deepCopy() {
    return new TMessageBoxWrapUp(this);
  }

  public void clear() {
    this.messageBox = null;
    this.name = null;
    this.contacts = null;
    this.pictureRevision = null;
  }

  public TMessageBox getMessageBox() {
    return this.messageBox;
  }

  public void setMessageBox(TMessageBox messageBox) {
    this.messageBox = messageBox;
  }

  public void unsetMessageBox() {
    this.messageBox = null;
  }

  /** Returns true if field messageBox is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageBox() {
    return this.messageBox != null;
  }

  public void setMessageBoxIsSet(boolean value) {
    if (!value) {
      this.messageBox = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getContactsSize() {
    return (this.contacts == null) ? 0 : this.contacts.size();
  }

  public Enumeration getContactsEnumeration() {
    return (this.contacts == null) ? null : this.contacts.elements();
  }

  public void addToContacts(Contact elem) {
    if (this.contacts == null) {
      this.contacts = new Vector();
    }
    this.contacts.addElement(elem);
  }

  public Vector getContacts() {
    return this.contacts;
  }

  public void setContacts(Vector contacts) {
    this.contacts = contacts;
  }

  public void unsetContacts() {
    this.contacts = null;
  }

  /** Returns true if field contacts is set (has been assigned a value) and false otherwise */
  public boolean isSetContacts() {
    return this.contacts != null;
  }

  public void setContactsIsSet(boolean value) {
    if (!value) {
      this.contacts = null;
    }
  }

  public String getPictureRevision() {
    return this.pictureRevision;
  }

  public void setPictureRevision(String pictureRevision) {
    this.pictureRevision = pictureRevision;
  }

  public void unsetPictureRevision() {
    this.pictureRevision = null;
  }

  /** Returns true if field pictureRevision is set (has been assigned a value) and false otherwise */
  public boolean isSetPictureRevision() {
    return this.pictureRevision != null;
  }

  public void setPictureRevisionIsSet(boolean value) {
    if (!value) {
      this.pictureRevision = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TMessageBoxWrapUp)
      return this.equals((TMessageBoxWrapUp)that);
    return false;
  }

  public boolean equals(TMessageBoxWrapUp that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_messageBox = true && this.isSetMessageBox();
    boolean that_present_messageBox = true && that.isSetMessageBox();
    if (this_present_messageBox || that_present_messageBox) {
      if (!(this_present_messageBox && that_present_messageBox))
        return false;
      if (!this.messageBox.equals(that.messageBox))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_contacts = true && this.isSetContacts();
    boolean that_present_contacts = true && that.isSetContacts();
    if (this_present_contacts || that_present_contacts) {
      if (!(this_present_contacts && that_present_contacts))
        return false;
      if (!this.contacts.equals(that.contacts))
        return false;
    }

    boolean this_present_pictureRevision = true && this.isSetPictureRevision();
    boolean that_present_pictureRevision = true && that.isSetPictureRevision();
    if (this_present_pictureRevision || that_present_pictureRevision) {
      if (!(this_present_pictureRevision && that_present_pictureRevision))
        return false;
      if (!this.pictureRevision.equals(that.pictureRevision))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    TMessageBoxWrapUp other = (TMessageBoxWrapUp)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetMessageBox(), other.isSetMessageBox());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageBox()) {
      lastComparison = this.messageBox.compareTo(other.messageBox);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetName(), other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetContacts(), other.isSetContacts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContacts()) {
      lastComparison = TBaseHelper.compareTo(this.contacts, other.contacts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetPictureRevision(), other.isSetPictureRevision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPictureRevision()) {
      lastComparison = TBaseHelper.compareTo(this.pictureRevision, other.pictureRevision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // MESSAGE_BOX
          if (field.type == TType.STRUCT) {
            this.messageBox = new TMessageBox();
            this.messageBox.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // NAME
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // CONTACTS
          if (field.type == TType.LIST) {
            {
              TList _list259 = iprot.readListBegin();
              this.contacts = new Vector(_list259.size);
              for (int _i260 = 0; _i260 < _list259.size; ++_i260)
              {
                Contact _elem261;
                _elem261 = new Contact();
                _elem261.read(iprot);
                this.contacts.addElement(_elem261);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // PICTURE_REVISION
          if (field.type == TType.STRING) {
            this.pictureRevision = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.messageBox != null) {
      oprot.writeFieldBegin(MESSAGE_BOX_FIELD_DESC);
      this.messageBox.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.contacts != null) {
      oprot.writeFieldBegin(CONTACTS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.contacts.size()));
        for (Enumeration _iter262_enum = this.contacts.elements(); _iter262_enum.hasMoreElements(); )         {
          Contact _iter262 = (Contact)_iter262_enum.nextElement();
          _iter262.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.pictureRevision != null) {
      oprot.writeFieldBegin(PICTURE_REVISION_FIELD_DESC);
      oprot.writeString(this.pictureRevision);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("TMessageBoxWrapUp(");
    boolean first = true;

    sb.append("messageBox:");
    if (this.messageBox == null) {
      sb.append("null");
    } else {
      sb.append(this.messageBox);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contacts:");
    if (this.contacts == null) {
      sb.append("null");
    } else {
      sb.append(this.contacts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pictureRevision:");
    if (this.pictureRevision == null) {
      sb.append("null");
    } else {
      sb.append(this.pictureRevision);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

