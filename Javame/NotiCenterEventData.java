/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class NotiCenterEventData implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("NotiCenterEventData");

  private static final TField ID_FIELD_DESC = new TField("id", TType.STRING, (short)1);
  private static final TField TO_FIELD_DESC = new TField("to", TType.STRING, (short)2);
  private static final TField FROM__FIELD_DESC = new TField("from_", TType.STRING, (short)3);
  private static final TField TO_CHANNEL_FIELD_DESC = new TField("toChannel", TType.STRING, (short)4);
  private static final TField FROM_CHANNEL_FIELD_DESC = new TField("fromChannel", TType.STRING, (short)5);
  private static final TField EVENT_TYPE_FIELD_DESC = new TField("eventType", TType.STRING, (short)6);
  private static final TField CREATED_TIME_FIELD_DESC = new TField("createdTime", TType.I64, (short)7);
  private static final TField OPERATION_REVISION_FIELD_DESC = new TField("operationRevision", TType.I64, (short)8);
  private static final TField CONTENT_FIELD_DESC = new TField("content", TType.MAP, (short)9);
  private static final TField PUSH_FIELD_DESC = new TField("push", TType.MAP, (short)10);

  private String id;
  private String to;
  private String from_;
  private String toChannel;
  private String fromChannel;
  private String eventType;
  private long createdTime;
  private long operationRevision;
  private Hashtable content;
  private Hashtable push;

  // isset id assignments
  private static final int __CREATEDTIME_ISSET_ID = 0;
  private static final int __OPERATIONREVISION_ISSET_ID = 1;
  private boolean[] __isset_vector = new boolean[2];

  public NotiCenterEventData() {
  }

  public NotiCenterEventData(
    String id,
    String to,
    String from_,
    String toChannel,
    String fromChannel,
    String eventType,
    long createdTime,
    long operationRevision,
    Hashtable content,
    Hashtable push)
  {
    this();
    this.id = id;
    this.to = to;
    this.from_ = from_;
    this.toChannel = toChannel;
    this.fromChannel = fromChannel;
    this.eventType = eventType;
    this.createdTime = createdTime;
    setCreatedTimeIsSet(true);
    this.operationRevision = operationRevision;
    setOperationRevisionIsSet(true);
    this.content = content;
    this.push = push;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NotiCenterEventData(NotiCenterEventData other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetTo()) {
      this.to = other.to;
    }
    if (other.isSetFrom_()) {
      this.from_ = other.from_;
    }
    if (other.isSetToChannel()) {
      this.toChannel = other.toChannel;
    }
    if (other.isSetFromChannel()) {
      this.fromChannel = other.fromChannel;
    }
    if (other.isSetEventType()) {
      this.eventType = other.eventType;
    }
    this.createdTime = other.createdTime;
    this.operationRevision = other.operationRevision;
    if (other.isSetContent()) {
      Hashtable __this__content = new Hashtable();
      for (Enumeration other_enum = other.content.keys(); other_enum.hasMoreElements(); ) {

        String other_element_key = (String)other_enum.nextElement();
        String other_element_value = (String)other.content.get(other_element_key);

        String __this__content_copy_key = other_element_key;

        String __this__content_copy_value = other_element_value;

        __this__content.put(__this__content_copy_key, __this__content_copy_value);
      }
      this.content = __this__content;
    }
    if (other.isSetPush()) {
      Hashtable __this__push = new Hashtable();
      for (Enumeration other_enum = other.push.keys(); other_enum.hasMoreElements(); ) {

        String other_element_key = (String)other_enum.nextElement();
        String other_element_value = (String)other.push.get(other_element_key);

        String __this__push_copy_key = other_element_key;

        String __this__push_copy_value = other_element_value;

        __this__push.put(__this__push_copy_key, __this__push_copy_value);
      }
      this.push = __this__push;
    }
  }

  public NotiCenterEventData deepCopy() {
    return new NotiCenterEventData(this);
  }

  public void clear() {
    this.id = null;
    this.to = null;
    this.from_ = null;
    this.toChannel = null;
    this.fromChannel = null;
    this.eventType = null;
    setCreatedTimeIsSet(false);
    this.createdTime = 0;
    setOperationRevisionIsSet(false);
    this.operationRevision = 0;
    this.content = null;
    this.push = null;
  }

  public String getId() {
    return this.id;
  }

  public void setId(String id) {
    this.id = id;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getTo() {
    return this.to;
  }

  public void setTo(String to) {
    this.to = to;
  }

  public void unsetTo() {
    this.to = null;
  }

  /** Returns true if field to is set (has been assigned a value) and false otherwise */
  public boolean isSetTo() {
    return this.to != null;
  }

  public void setToIsSet(boolean value) {
    if (!value) {
      this.to = null;
    }
  }

  public String getFrom_() {
    return this.from_;
  }

  public void setFrom_(String from_) {
    this.from_ = from_;
  }

  public void unsetFrom_() {
    this.from_ = null;
  }

  /** Returns true if field from_ is set (has been assigned a value) and false otherwise */
  public boolean isSetFrom_() {
    return this.from_ != null;
  }

  public void setFrom_IsSet(boolean value) {
    if (!value) {
      this.from_ = null;
    }
  }

  public String getToChannel() {
    return this.toChannel;
  }

  public void setToChannel(String toChannel) {
    this.toChannel = toChannel;
  }

  public void unsetToChannel() {
    this.toChannel = null;
  }

  /** Returns true if field toChannel is set (has been assigned a value) and false otherwise */
  public boolean isSetToChannel() {
    return this.toChannel != null;
  }

  public void setToChannelIsSet(boolean value) {
    if (!value) {
      this.toChannel = null;
    }
  }

  public String getFromChannel() {
    return this.fromChannel;
  }

  public void setFromChannel(String fromChannel) {
    this.fromChannel = fromChannel;
  }

  public void unsetFromChannel() {
    this.fromChannel = null;
  }

  /** Returns true if field fromChannel is set (has been assigned a value) and false otherwise */
  public boolean isSetFromChannel() {
    return this.fromChannel != null;
  }

  public void setFromChannelIsSet(boolean value) {
    if (!value) {
      this.fromChannel = null;
    }
  }

  public String getEventType() {
    return this.eventType;
  }

  public void setEventType(String eventType) {
    this.eventType = eventType;
  }

  public void unsetEventType() {
    this.eventType = null;
  }

  /** Returns true if field eventType is set (has been assigned a value) and false otherwise */
  public boolean isSetEventType() {
    return this.eventType != null;
  }

  public void setEventTypeIsSet(boolean value) {
    if (!value) {
      this.eventType = null;
    }
  }

  public long getCreatedTime() {
    return this.createdTime;
  }

  public void setCreatedTime(long createdTime) {
    this.createdTime = createdTime;
    setCreatedTimeIsSet(true);
  }

  public void unsetCreatedTime() {
    __isset_vector[__CREATEDTIME_ISSET_ID] = false;
  }

  /** Returns true if field createdTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedTime() {
    return __isset_vector[__CREATEDTIME_ISSET_ID];
  }

  public void setCreatedTimeIsSet(boolean value) {
    __isset_vector[__CREATEDTIME_ISSET_ID] = value;
  }

  public long getOperationRevision() {
    return this.operationRevision;
  }

  public void setOperationRevision(long operationRevision) {
    this.operationRevision = operationRevision;
    setOperationRevisionIsSet(true);
  }

  public void unsetOperationRevision() {
    __isset_vector[__OPERATIONREVISION_ISSET_ID] = false;
  }

  /** Returns true if field operationRevision is set (has been assigned a value) and false otherwise */
  public boolean isSetOperationRevision() {
    return __isset_vector[__OPERATIONREVISION_ISSET_ID];
  }

  public void setOperationRevisionIsSet(boolean value) {
    __isset_vector[__OPERATIONREVISION_ISSET_ID] = value;
  }

  public int getContentSize() {
    return (this.content == null) ? 0 : this.content.size();
  }

  public void putToContent(String key, String val) {
    if (this.content == null) {
      this.content = new Hashtable();
    }
    this.content.put(key, val);
  }

  public Hashtable getContent() {
    return this.content;
  }

  public void setContent(Hashtable content) {
    this.content = content;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public int getPushSize() {
    return (this.push == null) ? 0 : this.push.size();
  }

  public void putToPush(String key, String val) {
    if (this.push == null) {
      this.push = new Hashtable();
    }
    this.push.put(key, val);
  }

  public Hashtable getPush() {
    return this.push;
  }

  public void setPush(Hashtable push) {
    this.push = push;
  }

  public void unsetPush() {
    this.push = null;
  }

  /** Returns true if field push is set (has been assigned a value) and false otherwise */
  public boolean isSetPush() {
    return this.push != null;
  }

  public void setPushIsSet(boolean value) {
    if (!value) {
      this.push = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NotiCenterEventData)
      return this.equals((NotiCenterEventData)that);
    return false;
  }

  public boolean equals(NotiCenterEventData that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_to = true && this.isSetTo();
    boolean that_present_to = true && that.isSetTo();
    if (this_present_to || that_present_to) {
      if (!(this_present_to && that_present_to))
        return false;
      if (!this.to.equals(that.to))
        return false;
    }

    boolean this_present_from_ = true && this.isSetFrom_();
    boolean that_present_from_ = true && that.isSetFrom_();
    if (this_present_from_ || that_present_from_) {
      if (!(this_present_from_ && that_present_from_))
        return false;
      if (!this.from_.equals(that.from_))
        return false;
    }

    boolean this_present_toChannel = true && this.isSetToChannel();
    boolean that_present_toChannel = true && that.isSetToChannel();
    if (this_present_toChannel || that_present_toChannel) {
      if (!(this_present_toChannel && that_present_toChannel))
        return false;
      if (!this.toChannel.equals(that.toChannel))
        return false;
    }

    boolean this_present_fromChannel = true && this.isSetFromChannel();
    boolean that_present_fromChannel = true && that.isSetFromChannel();
    if (this_present_fromChannel || that_present_fromChannel) {
      if (!(this_present_fromChannel && that_present_fromChannel))
        return false;
      if (!this.fromChannel.equals(that.fromChannel))
        return false;
    }

    boolean this_present_eventType = true && this.isSetEventType();
    boolean that_present_eventType = true && that.isSetEventType();
    if (this_present_eventType || that_present_eventType) {
      if (!(this_present_eventType && that_present_eventType))
        return false;
      if (!this.eventType.equals(that.eventType))
        return false;
    }

    boolean this_present_createdTime = true;
    boolean that_present_createdTime = true;
    if (this_present_createdTime || that_present_createdTime) {
      if (!(this_present_createdTime && that_present_createdTime))
        return false;
      if (this.createdTime != that.createdTime)
        return false;
    }

    boolean this_present_operationRevision = true;
    boolean that_present_operationRevision = true;
    if (this_present_operationRevision || that_present_operationRevision) {
      if (!(this_present_operationRevision && that_present_operationRevision))
        return false;
      if (this.operationRevision != that.operationRevision)
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_push = true && this.isSetPush();
    boolean that_present_push = true && that.isSetPush();
    if (this_present_push || that_present_push) {
      if (!(this_present_push && that_present_push))
        return false;
      if (!this.push.equals(that.push))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    NotiCenterEventData other = (NotiCenterEventData)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetId(), other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetTo(), other.isSetTo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTo()) {
      lastComparison = TBaseHelper.compareTo(this.to, other.to);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetFrom_(), other.isSetFrom_());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrom_()) {
      lastComparison = TBaseHelper.compareTo(this.from_, other.from_);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetToChannel(), other.isSetToChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToChannel()) {
      lastComparison = TBaseHelper.compareTo(this.toChannel, other.toChannel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetFromChannel(), other.isSetFromChannel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromChannel()) {
      lastComparison = TBaseHelper.compareTo(this.fromChannel, other.fromChannel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetEventType(), other.isSetEventType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventType()) {
      lastComparison = TBaseHelper.compareTo(this.eventType, other.eventType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetCreatedTime(), other.isSetCreatedTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedTime()) {
      lastComparison = TBaseHelper.compareTo(this.createdTime, other.createdTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetOperationRevision(), other.isSetOperationRevision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperationRevision()) {
      lastComparison = TBaseHelper.compareTo(this.operationRevision, other.operationRevision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetContent(), other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetPush(), other.isSetPush());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPush()) {
      lastComparison = TBaseHelper.compareTo(this.push, other.push);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ID
          if (field.type == TType.STRING) {
            this.id = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // TO
          if (field.type == TType.STRING) {
            this.to = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // FROM_
          if (field.type == TType.STRING) {
            this.from_ = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // TO_CHANNEL
          if (field.type == TType.STRING) {
            this.toChannel = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // FROM_CHANNEL
          if (field.type == TType.STRING) {
            this.fromChannel = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // EVENT_TYPE
          if (field.type == TType.STRING) {
            this.eventType = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // CREATED_TIME
          if (field.type == TType.I64) {
            this.createdTime = iprot.readI64();
            setCreatedTimeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // OPERATION_REVISION
          if (field.type == TType.I64) {
            this.operationRevision = iprot.readI64();
            setOperationRevisionIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // CONTENT
          if (field.type == TType.MAP) {
            {
              TMap _map95 = iprot.readMapBegin();
              this.content = new Hashtable(2*_map95.size);
              for (int _i96 = 0; _i96 < _map95.size; ++_i96)
              {
                String _key97;
                String _val98;
                _key97 = iprot.readString();
                _val98 = iprot.readString();
                this.content.put(_key97, _val98);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // PUSH
          if (field.type == TType.MAP) {
            {
              TMap _map99 = iprot.readMapBegin();
              this.push = new Hashtable(2*_map99.size);
              for (int _i100 = 0; _i100 < _map99.size; ++_i100)
              {
                String _key101;
                String _val102;
                _key101 = iprot.readString();
                _val102 = iprot.readString();
                this.push.put(_key101, _val102);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.id != null) {
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeString(this.id);
      oprot.writeFieldEnd();
    }
    if (this.to != null) {
      oprot.writeFieldBegin(TO_FIELD_DESC);
      oprot.writeString(this.to);
      oprot.writeFieldEnd();
    }
    if (this.from_ != null) {
      oprot.writeFieldBegin(FROM__FIELD_DESC);
      oprot.writeString(this.from_);
      oprot.writeFieldEnd();
    }
    if (this.toChannel != null) {
      oprot.writeFieldBegin(TO_CHANNEL_FIELD_DESC);
      oprot.writeString(this.toChannel);
      oprot.writeFieldEnd();
    }
    if (this.fromChannel != null) {
      oprot.writeFieldBegin(FROM_CHANNEL_FIELD_DESC);
      oprot.writeString(this.fromChannel);
      oprot.writeFieldEnd();
    }
    if (this.eventType != null) {
      oprot.writeFieldBegin(EVENT_TYPE_FIELD_DESC);
      oprot.writeString(this.eventType);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(CREATED_TIME_FIELD_DESC);
    oprot.writeI64(this.createdTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(OPERATION_REVISION_FIELD_DESC);
    oprot.writeI64(this.operationRevision);
    oprot.writeFieldEnd();
    if (this.content != null) {
      oprot.writeFieldBegin(CONTENT_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.content.size()));
        for (Enumeration _iter103_enum = this.content.keys(); _iter103_enum.hasMoreElements(); )         {
          String _iter103 = (String)_iter103_enum.nextElement();
          oprot.writeString(_iter103);
          oprot.writeString(((String)this.content.get(_iter103)));
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.push != null) {
      oprot.writeFieldBegin(PUSH_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.push.size()));
        for (Enumeration _iter104_enum = this.push.keys(); _iter104_enum.hasMoreElements(); )         {
          String _iter104 = (String)_iter104_enum.nextElement();
          oprot.writeString(_iter104);
          oprot.writeString(((String)this.push.get(_iter104)));
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("NotiCenterEventData(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("to:");
    if (this.to == null) {
      sb.append("null");
    } else {
      sb.append(this.to);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("from_:");
    if (this.from_ == null) {
      sb.append("null");
    } else {
      sb.append(this.from_);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("toChannel:");
    if (this.toChannel == null) {
      sb.append("null");
    } else {
      sb.append(this.toChannel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromChannel:");
    if (this.fromChannel == null) {
      sb.append("null");
    } else {
      sb.append(this.fromChannel);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eventType:");
    if (this.eventType == null) {
      sb.append("null");
    } else {
      sb.append(this.eventType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdTime:");
    sb.append(this.createdTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("operationRevision:");
    sb.append(this.operationRevision);
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("push:");
    if (this.push == null) {
      sb.append("null");
    } else {
      sb.append(this.push);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

