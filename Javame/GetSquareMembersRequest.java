/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class GetSquareMembersRequest implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("GetSquareMembersRequest");

  private static final TField MIDS_FIELD_DESC = new TField("mids", TType.SET, (short)2);

  private Hashtable mids;

  // isset id assignments

  public GetSquareMembersRequest() {
  }

  public GetSquareMembersRequest(
    Hashtable mids)
  {
    this();
    this.mids = mids;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetSquareMembersRequest(GetSquareMembersRequest other) {
    if (other.isSetMids()) {
      Hashtable __this__mids = new Hashtable();
      for (Enumeration other_enum = other.mids.elements(); other_enum.hasMoreElements(); ) {
        String other_element = (String)other_enum.nextElement();
        __this__mids.addElement(other_element);
      }
      this.mids = __this__mids;
    }
  }

  public GetSquareMembersRequest deepCopy() {
    return new GetSquareMembersRequest(this);
  }

  public void clear() {
    this.mids = null;
  }

  public int getMidsSize() {
    return (this.mids == null) ? 0 : this.mids.size();
  }

  public Enumeration getMidsEnumeration() {
    return (this.mids == null) ? null : this.mids.elements();
  }

  public void addToMids(String elem) {
    if (this.mids == null) {
      this.mids = new Hashtable();
    }
    this.mids.put(elem, elem);
  }

  public Hashtable getMids() {
    return this.mids;
  }

  public void setMids(Hashtable mids) {
    this.mids = mids;
  }

  public void unsetMids() {
    this.mids = null;
  }

  /** Returns true if field mids is set (has been assigned a value) and false otherwise */
  public boolean isSetMids() {
    return this.mids != null;
  }

  public void setMidsIsSet(boolean value) {
    if (!value) {
      this.mids = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetSquareMembersRequest)
      return this.equals((GetSquareMembersRequest)that);
    return false;
  }

  public boolean equals(GetSquareMembersRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_mids = true && this.isSetMids();
    boolean that_present_mids = true && that.isSetMids();
    if (this_present_mids || that_present_mids) {
      if (!(this_present_mids && that_present_mids))
        return false;
      if (!this.mids.equals(that.mids))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    GetSquareMembersRequest other = (GetSquareMembersRequest)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetMids(), other.isSetMids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMids()) {
      lastComparison = TBaseHelper.compareTo(this.mids, other.mids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 2: // MIDS
          if (field.type == TType.SET) {
            {
              TSet _set365 = iprot.readSetBegin();
              this.mids = new Hashtable(2*_set365.size);
              for (int _i366 = 0; _i366 < _set365.size; ++_i366)
              {
                String _elem367;
                _elem367 = iprot.readString();
                this.mids.put(_elem367, _elem367);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.mids != null) {
      oprot.writeFieldBegin(MIDS_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.STRING, this.mids.size()));
        for (Enumeration _iter368_enum = this.mids.keys(); _iter368_enum.hasMoreElements(); )         {
          String _iter368 = (String)_iter368_enum.nextElement();
          oprot.writeString(_iter368);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("GetSquareMembersRequest(");
    boolean first = true;

    sb.append("mids:");
    if (this.mids == null) {
      sb.append("null");
    } else {
      sb.append(this.mids);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

