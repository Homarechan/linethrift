/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class LoginResult implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("LoginResult");

  private static final TField AUTH_TOKEN_FIELD_DESC = new TField("authToken", TType.STRING, (short)1);
  private static final TField CERTIFICATE_FIELD_DESC = new TField("certificate", TType.STRING, (short)2);
  private static final TField VERIFIER_FIELD_DESC = new TField("verifier", TType.STRING, (short)3);
  private static final TField PIN_CODE_FIELD_DESC = new TField("pinCode", TType.STRING, (short)4);
  private static final TField TYPE_FIELD_DESC = new TField("type", TType.I32, (short)5);
  private static final TField LAST_PRIMARY_BIND_TIME_FIELD_DESC = new TField("lastPrimaryBindTime", TType.I64, (short)6);
  private static final TField DISPLAY_MESSAGE_FIELD_DESC = new TField("displayMessage", TType.STRING, (short)7);
  private static final TField SESSION_FOR_SMSCONFIRM_FIELD_DESC = new TField("sessionForSMSConfirm", TType.STRUCT, (short)8);

  private String authToken;
  private String certificate;
  private String verifier;
  private String pinCode;
  private LoginResultType type;
  private long lastPrimaryBindTime;
  private String displayMessage;
  private VerificationSessionData sessionForSMSConfirm;

  // isset id assignments
  private static final int __LASTPRIMARYBINDTIME_ISSET_ID = 0;
  private boolean[] __isset_vector = new boolean[1];

  public LoginResult() {
  }

  public LoginResult(
    String authToken,
    String certificate,
    String verifier,
    String pinCode,
    LoginResultType type,
    long lastPrimaryBindTime,
    String displayMessage,
    VerificationSessionData sessionForSMSConfirm)
  {
    this();
    this.authToken = authToken;
    this.certificate = certificate;
    this.verifier = verifier;
    this.pinCode = pinCode;
    this.type = type;
    this.lastPrimaryBindTime = lastPrimaryBindTime;
    setLastPrimaryBindTimeIsSet(true);
    this.displayMessage = displayMessage;
    this.sessionForSMSConfirm = sessionForSMSConfirm;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LoginResult(LoginResult other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    if (other.isSetAuthToken()) {
      this.authToken = other.authToken;
    }
    if (other.isSetCertificate()) {
      this.certificate = other.certificate;
    }
    if (other.isSetVerifier()) {
      this.verifier = other.verifier;
    }
    if (other.isSetPinCode()) {
      this.pinCode = other.pinCode;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.lastPrimaryBindTime = other.lastPrimaryBindTime;
    if (other.isSetDisplayMessage()) {
      this.displayMessage = other.displayMessage;
    }
    if (other.isSetSessionForSMSConfirm()) {
      this.sessionForSMSConfirm = new VerificationSessionData(other.sessionForSMSConfirm);
    }
  }

  public LoginResult deepCopy() {
    return new LoginResult(this);
  }

  public void clear() {
    this.authToken = null;
    this.certificate = null;
    this.verifier = null;
    this.pinCode = null;
    this.type = null;
    setLastPrimaryBindTimeIsSet(false);
    this.lastPrimaryBindTime = 0;
    this.displayMessage = null;
    this.sessionForSMSConfirm = null;
  }

  public String getAuthToken() {
    return this.authToken;
  }

  public void setAuthToken(String authToken) {
    this.authToken = authToken;
  }

  public void unsetAuthToken() {
    this.authToken = null;
  }

  /** Returns true if field authToken is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthToken() {
    return this.authToken != null;
  }

  public void setAuthTokenIsSet(boolean value) {
    if (!value) {
      this.authToken = null;
    }
  }

  public String getCertificate() {
    return this.certificate;
  }

  public void setCertificate(String certificate) {
    this.certificate = certificate;
  }

  public void unsetCertificate() {
    this.certificate = null;
  }

  /** Returns true if field certificate is set (has been assigned a value) and false otherwise */
  public boolean isSetCertificate() {
    return this.certificate != null;
  }

  public void setCertificateIsSet(boolean value) {
    if (!value) {
      this.certificate = null;
    }
  }

  public String getVerifier() {
    return this.verifier;
  }

  public void setVerifier(String verifier) {
    this.verifier = verifier;
  }

  public void unsetVerifier() {
    this.verifier = null;
  }

  /** Returns true if field verifier is set (has been assigned a value) and false otherwise */
  public boolean isSetVerifier() {
    return this.verifier != null;
  }

  public void setVerifierIsSet(boolean value) {
    if (!value) {
      this.verifier = null;
    }
  }

  public String getPinCode() {
    return this.pinCode;
  }

  public void setPinCode(String pinCode) {
    this.pinCode = pinCode;
  }

  public void unsetPinCode() {
    this.pinCode = null;
  }

  /** Returns true if field pinCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPinCode() {
    return this.pinCode != null;
  }

  public void setPinCodeIsSet(boolean value) {
    if (!value) {
      this.pinCode = null;
    }
  }

  /**
   * 
   * @see LoginResultType
   */
  public LoginResultType getType() {
    return this.type;
  }

  /**
   * 
   * @see LoginResultType
   */
  public void setType(LoginResultType type) {
    this.type = type;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public long getLastPrimaryBindTime() {
    return this.lastPrimaryBindTime;
  }

  public void setLastPrimaryBindTime(long lastPrimaryBindTime) {
    this.lastPrimaryBindTime = lastPrimaryBindTime;
    setLastPrimaryBindTimeIsSet(true);
  }

  public void unsetLastPrimaryBindTime() {
    __isset_vector[__LASTPRIMARYBINDTIME_ISSET_ID] = false;
  }

  /** Returns true if field lastPrimaryBindTime is set (has been assigned a value) and false otherwise */
  public boolean isSetLastPrimaryBindTime() {
    return __isset_vector[__LASTPRIMARYBINDTIME_ISSET_ID];
  }

  public void setLastPrimaryBindTimeIsSet(boolean value) {
    __isset_vector[__LASTPRIMARYBINDTIME_ISSET_ID] = value;
  }

  public String getDisplayMessage() {
    return this.displayMessage;
  }

  public void setDisplayMessage(String displayMessage) {
    this.displayMessage = displayMessage;
  }

  public void unsetDisplayMessage() {
    this.displayMessage = null;
  }

  /** Returns true if field displayMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayMessage() {
    return this.displayMessage != null;
  }

  public void setDisplayMessageIsSet(boolean value) {
    if (!value) {
      this.displayMessage = null;
    }
  }

  public VerificationSessionData getSessionForSMSConfirm() {
    return this.sessionForSMSConfirm;
  }

  public void setSessionForSMSConfirm(VerificationSessionData sessionForSMSConfirm) {
    this.sessionForSMSConfirm = sessionForSMSConfirm;
  }

  public void unsetSessionForSMSConfirm() {
    this.sessionForSMSConfirm = null;
  }

  /** Returns true if field sessionForSMSConfirm is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionForSMSConfirm() {
    return this.sessionForSMSConfirm != null;
  }

  public void setSessionForSMSConfirmIsSet(boolean value) {
    if (!value) {
      this.sessionForSMSConfirm = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LoginResult)
      return this.equals((LoginResult)that);
    return false;
  }

  public boolean equals(LoginResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_authToken = true && this.isSetAuthToken();
    boolean that_present_authToken = true && that.isSetAuthToken();
    if (this_present_authToken || that_present_authToken) {
      if (!(this_present_authToken && that_present_authToken))
        return false;
      if (!this.authToken.equals(that.authToken))
        return false;
    }

    boolean this_present_certificate = true && this.isSetCertificate();
    boolean that_present_certificate = true && that.isSetCertificate();
    if (this_present_certificate || that_present_certificate) {
      if (!(this_present_certificate && that_present_certificate))
        return false;
      if (!this.certificate.equals(that.certificate))
        return false;
    }

    boolean this_present_verifier = true && this.isSetVerifier();
    boolean that_present_verifier = true && that.isSetVerifier();
    if (this_present_verifier || that_present_verifier) {
      if (!(this_present_verifier && that_present_verifier))
        return false;
      if (!this.verifier.equals(that.verifier))
        return false;
    }

    boolean this_present_pinCode = true && this.isSetPinCode();
    boolean that_present_pinCode = true && that.isSetPinCode();
    if (this_present_pinCode || that_present_pinCode) {
      if (!(this_present_pinCode && that_present_pinCode))
        return false;
      if (!this.pinCode.equals(that.pinCode))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_lastPrimaryBindTime = true;
    boolean that_present_lastPrimaryBindTime = true;
    if (this_present_lastPrimaryBindTime || that_present_lastPrimaryBindTime) {
      if (!(this_present_lastPrimaryBindTime && that_present_lastPrimaryBindTime))
        return false;
      if (this.lastPrimaryBindTime != that.lastPrimaryBindTime)
        return false;
    }

    boolean this_present_displayMessage = true && this.isSetDisplayMessage();
    boolean that_present_displayMessage = true && that.isSetDisplayMessage();
    if (this_present_displayMessage || that_present_displayMessage) {
      if (!(this_present_displayMessage && that_present_displayMessage))
        return false;
      if (!this.displayMessage.equals(that.displayMessage))
        return false;
    }

    boolean this_present_sessionForSMSConfirm = true && this.isSetSessionForSMSConfirm();
    boolean that_present_sessionForSMSConfirm = true && that.isSetSessionForSMSConfirm();
    if (this_present_sessionForSMSConfirm || that_present_sessionForSMSConfirm) {
      if (!(this_present_sessionForSMSConfirm && that_present_sessionForSMSConfirm))
        return false;
      if (!this.sessionForSMSConfirm.equals(that.sessionForSMSConfirm))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    LoginResult other = (LoginResult)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetAuthToken(), other.isSetAuthToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthToken()) {
      lastComparison = TBaseHelper.compareTo(this.authToken, other.authToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetCertificate(), other.isSetCertificate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertificate()) {
      lastComparison = TBaseHelper.compareTo(this.certificate, other.certificate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetVerifier(), other.isSetVerifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVerifier()) {
      lastComparison = TBaseHelper.compareTo(this.verifier, other.verifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetPinCode(), other.isSetPinCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPinCode()) {
      lastComparison = TBaseHelper.compareTo(this.pinCode, other.pinCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetType(), other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetLastPrimaryBindTime(), other.isSetLastPrimaryBindTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastPrimaryBindTime()) {
      lastComparison = TBaseHelper.compareTo(this.lastPrimaryBindTime, other.lastPrimaryBindTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetDisplayMessage(), other.isSetDisplayMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayMessage()) {
      lastComparison = TBaseHelper.compareTo(this.displayMessage, other.displayMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSessionForSMSConfirm(), other.isSetSessionForSMSConfirm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionForSMSConfirm()) {
      lastComparison = this.sessionForSMSConfirm.compareTo(other.sessionForSMSConfirm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // AUTH_TOKEN
          if (field.type == TType.STRING) {
            this.authToken = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // CERTIFICATE
          if (field.type == TType.STRING) {
            this.certificate = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // VERIFIER
          if (field.type == TType.STRING) {
            this.verifier = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // PIN_CODE
          if (field.type == TType.STRING) {
            this.pinCode = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // TYPE
          if (field.type == TType.I32) {
            this.type = LoginResultType.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // LAST_PRIMARY_BIND_TIME
          if (field.type == TType.I64) {
            this.lastPrimaryBindTime = iprot.readI64();
            setLastPrimaryBindTimeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // DISPLAY_MESSAGE
          if (field.type == TType.STRING) {
            this.displayMessage = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // SESSION_FOR_SMSCONFIRM
          if (field.type == TType.STRUCT) {
            this.sessionForSMSConfirm = new VerificationSessionData();
            this.sessionForSMSConfirm.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.authToken != null) {
      oprot.writeFieldBegin(AUTH_TOKEN_FIELD_DESC);
      oprot.writeString(this.authToken);
      oprot.writeFieldEnd();
    }
    if (this.certificate != null) {
      oprot.writeFieldBegin(CERTIFICATE_FIELD_DESC);
      oprot.writeString(this.certificate);
      oprot.writeFieldEnd();
    }
    if (this.verifier != null) {
      oprot.writeFieldBegin(VERIFIER_FIELD_DESC);
      oprot.writeString(this.verifier);
      oprot.writeFieldEnd();
    }
    if (this.pinCode != null) {
      oprot.writeFieldBegin(PIN_CODE_FIELD_DESC);
      oprot.writeString(this.pinCode);
      oprot.writeFieldEnd();
    }
    if (this.type != null) {
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(this.type.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(LAST_PRIMARY_BIND_TIME_FIELD_DESC);
    oprot.writeI64(this.lastPrimaryBindTime);
    oprot.writeFieldEnd();
    if (this.displayMessage != null) {
      oprot.writeFieldBegin(DISPLAY_MESSAGE_FIELD_DESC);
      oprot.writeString(this.displayMessage);
      oprot.writeFieldEnd();
    }
    if (this.sessionForSMSConfirm != null) {
      oprot.writeFieldBegin(SESSION_FOR_SMSCONFIRM_FIELD_DESC);
      this.sessionForSMSConfirm.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("LoginResult(");
    boolean first = true;

    sb.append("authToken:");
    if (this.authToken == null) {
      sb.append("null");
    } else {
      sb.append(this.authToken);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("certificate:");
    if (this.certificate == null) {
      sb.append("null");
    } else {
      sb.append(this.certificate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("verifier:");
    if (this.verifier == null) {
      sb.append("null");
    } else {
      sb.append(this.verifier);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pinCode:");
    if (this.pinCode == null) {
      sb.append("null");
    } else {
      sb.append(this.pinCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastPrimaryBindTime:");
    sb.append(this.lastPrimaryBindTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("displayMessage:");
    if (this.displayMessage == null) {
      sb.append("null");
    } else {
      sb.append(this.displayMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sessionForSMSConfirm:");
    if (this.sessionForSMSConfirm == null) {
      sb.append("null");
    } else {
      sb.append(this.sessionForSMSConfirm);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

