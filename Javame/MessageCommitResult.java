/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class MessageCommitResult implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("MessageCommitResult");

  private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);
  private static final TField STATE_FIELD_DESC = new TField("state", TType.I32, (short)2);
  private static final TField MESSAGE_STORE_REQUEST_ID_FIELD_DESC = new TField("messageStoreRequestId", TType.STRING, (short)3);
  private static final TField MESSAGE_IDS_FIELD_DESC = new TField("messageIds", TType.LIST, (short)4);
  private static final TField RECEIVER_COUNT_FIELD_DESC = new TField("receiverCount", TType.I64, (short)11);
  private static final TField SUCCESS_COUNT_FIELD_DESC = new TField("successCount", TType.I64, (short)12);
  private static final TField FAIL_COUNT_FIELD_DESC = new TField("failCount", TType.I64, (short)13);
  private static final TField BLOCK_COUNT_FIELD_DESC = new TField("blockCount", TType.I64, (short)14);
  private static final TField UNREGISTERED_COUNT_FIELD_DESC = new TField("unregisteredCount", TType.I64, (short)15);
  private static final TField UNRELATED_COUNT_FIELD_DESC = new TField("unrelatedCount", TType.I64, (short)16);
  private static final TField ERROR_DESCRIPTION_FIELD_DESC = new TField("errorDescription", TType.STRING, (short)21);

  private String requestId;
  private BuddyResultState state;
  private String messageStoreRequestId;
  private Vector messageIds;
  private long receiverCount;
  private long successCount;
  private long failCount;
  private long blockCount;
  private long unregisteredCount;
  private long unrelatedCount;
  private String errorDescription;

  // isset id assignments
  private static final int __RECEIVERCOUNT_ISSET_ID = 0;
  private static final int __SUCCESSCOUNT_ISSET_ID = 1;
  private static final int __FAILCOUNT_ISSET_ID = 2;
  private static final int __BLOCKCOUNT_ISSET_ID = 3;
  private static final int __UNREGISTEREDCOUNT_ISSET_ID = 4;
  private static final int __UNRELATEDCOUNT_ISSET_ID = 5;
  private boolean[] __isset_vector = new boolean[6];

  public MessageCommitResult() {
  }

  public MessageCommitResult(
    String requestId,
    BuddyResultState state,
    String messageStoreRequestId,
    Vector messageIds,
    long receiverCount,
    long successCount,
    long failCount,
    long blockCount,
    long unregisteredCount,
    long unrelatedCount,
    String errorDescription)
  {
    this();
    this.requestId = requestId;
    this.state = state;
    this.messageStoreRequestId = messageStoreRequestId;
    this.messageIds = messageIds;
    this.receiverCount = receiverCount;
    setReceiverCountIsSet(true);
    this.successCount = successCount;
    setSuccessCountIsSet(true);
    this.failCount = failCount;
    setFailCountIsSet(true);
    this.blockCount = blockCount;
    setBlockCountIsSet(true);
    this.unregisteredCount = unregisteredCount;
    setUnregisteredCountIsSet(true);
    this.unrelatedCount = unrelatedCount;
    setUnrelatedCountIsSet(true);
    this.errorDescription = errorDescription;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MessageCommitResult(MessageCommitResult other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    if (other.isSetRequestId()) {
      this.requestId = other.requestId;
    }
    if (other.isSetState()) {
      this.state = other.state;
    }
    if (other.isSetMessageStoreRequestId()) {
      this.messageStoreRequestId = other.messageStoreRequestId;
    }
    if (other.isSetMessageIds()) {
      Vector __this__messageIds = new Vector();
      for (Enumeration other_enum = other.messageIds.elements(); other_enum.hasMoreElements(); ) {
        String other_element = (String)other_enum.nextElement();
        __this__messageIds.addElement(other_element);
      }
      this.messageIds = __this__messageIds;
    }
    this.receiverCount = other.receiverCount;
    this.successCount = other.successCount;
    this.failCount = other.failCount;
    this.blockCount = other.blockCount;
    this.unregisteredCount = other.unregisteredCount;
    this.unrelatedCount = other.unrelatedCount;
    if (other.isSetErrorDescription()) {
      this.errorDescription = other.errorDescription;
    }
  }

  public MessageCommitResult deepCopy() {
    return new MessageCommitResult(this);
  }

  public void clear() {
    this.requestId = null;
    this.state = null;
    this.messageStoreRequestId = null;
    this.messageIds = null;
    setReceiverCountIsSet(false);
    this.receiverCount = 0;
    setSuccessCountIsSet(false);
    this.successCount = 0;
    setFailCountIsSet(false);
    this.failCount = 0;
    setBlockCountIsSet(false);
    this.blockCount = 0;
    setUnregisteredCountIsSet(false);
    this.unregisteredCount = 0;
    setUnrelatedCountIsSet(false);
    this.unrelatedCount = 0;
    this.errorDescription = null;
  }

  public String getRequestId() {
    return this.requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }

  public void unsetRequestId() {
    this.requestId = null;
  }

  /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestId() {
    return this.requestId != null;
  }

  public void setRequestIdIsSet(boolean value) {
    if (!value) {
      this.requestId = null;
    }
  }

  /**
   * 
   * @see BuddyResultState
   */
  public BuddyResultState getState() {
    return this.state;
  }

  /**
   * 
   * @see BuddyResultState
   */
  public void setState(BuddyResultState state) {
    this.state = state;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public String getMessageStoreRequestId() {
    return this.messageStoreRequestId;
  }

  public void setMessageStoreRequestId(String messageStoreRequestId) {
    this.messageStoreRequestId = messageStoreRequestId;
  }

  public void unsetMessageStoreRequestId() {
    this.messageStoreRequestId = null;
  }

  /** Returns true if field messageStoreRequestId is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageStoreRequestId() {
    return this.messageStoreRequestId != null;
  }

  public void setMessageStoreRequestIdIsSet(boolean value) {
    if (!value) {
      this.messageStoreRequestId = null;
    }
  }

  public int getMessageIdsSize() {
    return (this.messageIds == null) ? 0 : this.messageIds.size();
  }

  public Enumeration getMessageIdsEnumeration() {
    return (this.messageIds == null) ? null : this.messageIds.elements();
  }

  public void addToMessageIds(String elem) {
    if (this.messageIds == null) {
      this.messageIds = new Vector();
    }
    this.messageIds.addElement(elem);
  }

  public Vector getMessageIds() {
    return this.messageIds;
  }

  public void setMessageIds(Vector messageIds) {
    this.messageIds = messageIds;
  }

  public void unsetMessageIds() {
    this.messageIds = null;
  }

  /** Returns true if field messageIds is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageIds() {
    return this.messageIds != null;
  }

  public void setMessageIdsIsSet(boolean value) {
    if (!value) {
      this.messageIds = null;
    }
  }

  public long getReceiverCount() {
    return this.receiverCount;
  }

  public void setReceiverCount(long receiverCount) {
    this.receiverCount = receiverCount;
    setReceiverCountIsSet(true);
  }

  public void unsetReceiverCount() {
    __isset_vector[__RECEIVERCOUNT_ISSET_ID] = false;
  }

  /** Returns true if field receiverCount is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiverCount() {
    return __isset_vector[__RECEIVERCOUNT_ISSET_ID];
  }

  public void setReceiverCountIsSet(boolean value) {
    __isset_vector[__RECEIVERCOUNT_ISSET_ID] = value;
  }

  public long getSuccessCount() {
    return this.successCount;
  }

  public void setSuccessCount(long successCount) {
    this.successCount = successCount;
    setSuccessCountIsSet(true);
  }

  public void unsetSuccessCount() {
    __isset_vector[__SUCCESSCOUNT_ISSET_ID] = false;
  }

  /** Returns true if field successCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccessCount() {
    return __isset_vector[__SUCCESSCOUNT_ISSET_ID];
  }

  public void setSuccessCountIsSet(boolean value) {
    __isset_vector[__SUCCESSCOUNT_ISSET_ID] = value;
  }

  public long getFailCount() {
    return this.failCount;
  }

  public void setFailCount(long failCount) {
    this.failCount = failCount;
    setFailCountIsSet(true);
  }

  public void unsetFailCount() {
    __isset_vector[__FAILCOUNT_ISSET_ID] = false;
  }

  /** Returns true if field failCount is set (has been assigned a value) and false otherwise */
  public boolean isSetFailCount() {
    return __isset_vector[__FAILCOUNT_ISSET_ID];
  }

  public void setFailCountIsSet(boolean value) {
    __isset_vector[__FAILCOUNT_ISSET_ID] = value;
  }

  public long getBlockCount() {
    return this.blockCount;
  }

  public void setBlockCount(long blockCount) {
    this.blockCount = blockCount;
    setBlockCountIsSet(true);
  }

  public void unsetBlockCount() {
    __isset_vector[__BLOCKCOUNT_ISSET_ID] = false;
  }

  /** Returns true if field blockCount is set (has been assigned a value) and false otherwise */
  public boolean isSetBlockCount() {
    return __isset_vector[__BLOCKCOUNT_ISSET_ID];
  }

  public void setBlockCountIsSet(boolean value) {
    __isset_vector[__BLOCKCOUNT_ISSET_ID] = value;
  }

  public long getUnregisteredCount() {
    return this.unregisteredCount;
  }

  public void setUnregisteredCount(long unregisteredCount) {
    this.unregisteredCount = unregisteredCount;
    setUnregisteredCountIsSet(true);
  }

  public void unsetUnregisteredCount() {
    __isset_vector[__UNREGISTEREDCOUNT_ISSET_ID] = false;
  }

  /** Returns true if field unregisteredCount is set (has been assigned a value) and false otherwise */
  public boolean isSetUnregisteredCount() {
    return __isset_vector[__UNREGISTEREDCOUNT_ISSET_ID];
  }

  public void setUnregisteredCountIsSet(boolean value) {
    __isset_vector[__UNREGISTEREDCOUNT_ISSET_ID] = value;
  }

  public long getUnrelatedCount() {
    return this.unrelatedCount;
  }

  public void setUnrelatedCount(long unrelatedCount) {
    this.unrelatedCount = unrelatedCount;
    setUnrelatedCountIsSet(true);
  }

  public void unsetUnrelatedCount() {
    __isset_vector[__UNRELATEDCOUNT_ISSET_ID] = false;
  }

  /** Returns true if field unrelatedCount is set (has been assigned a value) and false otherwise */
  public boolean isSetUnrelatedCount() {
    return __isset_vector[__UNRELATEDCOUNT_ISSET_ID];
  }

  public void setUnrelatedCountIsSet(boolean value) {
    __isset_vector[__UNRELATEDCOUNT_ISSET_ID] = value;
  }

  public String getErrorDescription() {
    return this.errorDescription;
  }

  public void setErrorDescription(String errorDescription) {
    this.errorDescription = errorDescription;
  }

  public void unsetErrorDescription() {
    this.errorDescription = null;
  }

  /** Returns true if field errorDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorDescription() {
    return this.errorDescription != null;
  }

  public void setErrorDescriptionIsSet(boolean value) {
    if (!value) {
      this.errorDescription = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MessageCommitResult)
      return this.equals((MessageCommitResult)that);
    return false;
  }

  public boolean equals(MessageCommitResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_requestId = true && this.isSetRequestId();
    boolean that_present_requestId = true && that.isSetRequestId();
    if (this_present_requestId || that_present_requestId) {
      if (!(this_present_requestId && that_present_requestId))
        return false;
      if (!this.requestId.equals(that.requestId))
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_messageStoreRequestId = true && this.isSetMessageStoreRequestId();
    boolean that_present_messageStoreRequestId = true && that.isSetMessageStoreRequestId();
    if (this_present_messageStoreRequestId || that_present_messageStoreRequestId) {
      if (!(this_present_messageStoreRequestId && that_present_messageStoreRequestId))
        return false;
      if (!this.messageStoreRequestId.equals(that.messageStoreRequestId))
        return false;
    }

    boolean this_present_messageIds = true && this.isSetMessageIds();
    boolean that_present_messageIds = true && that.isSetMessageIds();
    if (this_present_messageIds || that_present_messageIds) {
      if (!(this_present_messageIds && that_present_messageIds))
        return false;
      if (!this.messageIds.equals(that.messageIds))
        return false;
    }

    boolean this_present_receiverCount = true;
    boolean that_present_receiverCount = true;
    if (this_present_receiverCount || that_present_receiverCount) {
      if (!(this_present_receiverCount && that_present_receiverCount))
        return false;
      if (this.receiverCount != that.receiverCount)
        return false;
    }

    boolean this_present_successCount = true;
    boolean that_present_successCount = true;
    if (this_present_successCount || that_present_successCount) {
      if (!(this_present_successCount && that_present_successCount))
        return false;
      if (this.successCount != that.successCount)
        return false;
    }

    boolean this_present_failCount = true;
    boolean that_present_failCount = true;
    if (this_present_failCount || that_present_failCount) {
      if (!(this_present_failCount && that_present_failCount))
        return false;
      if (this.failCount != that.failCount)
        return false;
    }

    boolean this_present_blockCount = true;
    boolean that_present_blockCount = true;
    if (this_present_blockCount || that_present_blockCount) {
      if (!(this_present_blockCount && that_present_blockCount))
        return false;
      if (this.blockCount != that.blockCount)
        return false;
    }

    boolean this_present_unregisteredCount = true;
    boolean that_present_unregisteredCount = true;
    if (this_present_unregisteredCount || that_present_unregisteredCount) {
      if (!(this_present_unregisteredCount && that_present_unregisteredCount))
        return false;
      if (this.unregisteredCount != that.unregisteredCount)
        return false;
    }

    boolean this_present_unrelatedCount = true;
    boolean that_present_unrelatedCount = true;
    if (this_present_unrelatedCount || that_present_unrelatedCount) {
      if (!(this_present_unrelatedCount && that_present_unrelatedCount))
        return false;
      if (this.unrelatedCount != that.unrelatedCount)
        return false;
    }

    boolean this_present_errorDescription = true && this.isSetErrorDescription();
    boolean that_present_errorDescription = true && that.isSetErrorDescription();
    if (this_present_errorDescription || that_present_errorDescription) {
      if (!(this_present_errorDescription && that_present_errorDescription))
        return false;
      if (!this.errorDescription.equals(that.errorDescription))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    MessageCommitResult other = (MessageCommitResult)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestId()) {
      lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetState(), other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetMessageStoreRequestId(), other.isSetMessageStoreRequestId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageStoreRequestId()) {
      lastComparison = TBaseHelper.compareTo(this.messageStoreRequestId, other.messageStoreRequestId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetMessageIds(), other.isSetMessageIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageIds()) {
      lastComparison = TBaseHelper.compareTo(this.messageIds, other.messageIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetReceiverCount(), other.isSetReceiverCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiverCount()) {
      lastComparison = TBaseHelper.compareTo(this.receiverCount, other.receiverCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSuccessCount(), other.isSetSuccessCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccessCount()) {
      lastComparison = TBaseHelper.compareTo(this.successCount, other.successCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetFailCount(), other.isSetFailCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailCount()) {
      lastComparison = TBaseHelper.compareTo(this.failCount, other.failCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetBlockCount(), other.isSetBlockCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlockCount()) {
      lastComparison = TBaseHelper.compareTo(this.blockCount, other.blockCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetUnregisteredCount(), other.isSetUnregisteredCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnregisteredCount()) {
      lastComparison = TBaseHelper.compareTo(this.unregisteredCount, other.unregisteredCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetUnrelatedCount(), other.isSetUnrelatedCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnrelatedCount()) {
      lastComparison = TBaseHelper.compareTo(this.unrelatedCount, other.unrelatedCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetErrorDescription(), other.isSetErrorDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorDescription()) {
      lastComparison = TBaseHelper.compareTo(this.errorDescription, other.errorDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // REQUEST_ID
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // STATE
          if (field.type == TType.I32) {
            this.state = BuddyResultState.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // MESSAGE_STORE_REQUEST_ID
          if (field.type == TType.STRING) {
            this.messageStoreRequestId = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // MESSAGE_IDS
          if (field.type == TType.LIST) {
            {
              TList _list0 = iprot.readListBegin();
              this.messageIds = new Vector(_list0.size);
              for (int _i1 = 0; _i1 < _list0.size; ++_i1)
              {
                String _elem2;
                _elem2 = iprot.readString();
                this.messageIds.addElement(_elem2);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // RECEIVER_COUNT
          if (field.type == TType.I64) {
            this.receiverCount = iprot.readI64();
            setReceiverCountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // SUCCESS_COUNT
          if (field.type == TType.I64) {
            this.successCount = iprot.readI64();
            setSuccessCountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // FAIL_COUNT
          if (field.type == TType.I64) {
            this.failCount = iprot.readI64();
            setFailCountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // BLOCK_COUNT
          if (field.type == TType.I64) {
            this.blockCount = iprot.readI64();
            setBlockCountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 15: // UNREGISTERED_COUNT
          if (field.type == TType.I64) {
            this.unregisteredCount = iprot.readI64();
            setUnregisteredCountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 16: // UNRELATED_COUNT
          if (field.type == TType.I64) {
            this.unrelatedCount = iprot.readI64();
            setUnrelatedCountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 21: // ERROR_DESCRIPTION
          if (field.type == TType.STRING) {
            this.errorDescription = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    if (this.state != null) {
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeI32(this.state.getValue());
      oprot.writeFieldEnd();
    }
    if (this.messageStoreRequestId != null) {
      oprot.writeFieldBegin(MESSAGE_STORE_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.messageStoreRequestId);
      oprot.writeFieldEnd();
    }
    if (this.messageIds != null) {
      oprot.writeFieldBegin(MESSAGE_IDS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.messageIds.size()));
        for (Enumeration _iter3_enum = this.messageIds.elements(); _iter3_enum.hasMoreElements(); )         {
          String _iter3 = (String)_iter3_enum.nextElement();
          oprot.writeString(_iter3);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(RECEIVER_COUNT_FIELD_DESC);
    oprot.writeI64(this.receiverCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SUCCESS_COUNT_FIELD_DESC);
    oprot.writeI64(this.successCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(FAIL_COUNT_FIELD_DESC);
    oprot.writeI64(this.failCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(BLOCK_COUNT_FIELD_DESC);
    oprot.writeI64(this.blockCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(UNREGISTERED_COUNT_FIELD_DESC);
    oprot.writeI64(this.unregisteredCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(UNRELATED_COUNT_FIELD_DESC);
    oprot.writeI64(this.unrelatedCount);
    oprot.writeFieldEnd();
    if (this.errorDescription != null) {
      oprot.writeFieldBegin(ERROR_DESCRIPTION_FIELD_DESC);
      oprot.writeString(this.errorDescription);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("MessageCommitResult(");
    boolean first = true;

    sb.append("requestId:");
    if (this.requestId == null) {
      sb.append("null");
    } else {
      sb.append(this.requestId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("messageStoreRequestId:");
    if (this.messageStoreRequestId == null) {
      sb.append("null");
    } else {
      sb.append(this.messageStoreRequestId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("messageIds:");
    if (this.messageIds == null) {
      sb.append("null");
    } else {
      sb.append(this.messageIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("receiverCount:");
    sb.append(this.receiverCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("successCount:");
    sb.append(this.successCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("failCount:");
    sb.append(this.failCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("blockCount:");
    sb.append(this.blockCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unregisteredCount:");
    sb.append(this.unregisteredCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unrelatedCount:");
    sb.append(this.unrelatedCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("errorDescription:");
    if (this.errorDescription == null) {
      sb.append("null");
    } else {
      sb.append(this.errorDescription);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

