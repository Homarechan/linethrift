/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class CoinPayLoad implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("CoinPayLoad");

  private static final TField PAY_COIN_FIELD_DESC = new TField("payCoin", TType.I32, (short)1);
  private static final TField FREE_COIN_FIELD_DESC = new TField("freeCoin", TType.I32, (short)2);
  private static final TField TYPE_FIELD_DESC = new TField("type", TType.I32, (short)3);
  private static final TField REWARD_COIN_FIELD_DESC = new TField("rewardCoin", TType.I32, (short)4);

  private int payCoin;
  private int freeCoin;
  private PayloadType type;
  private int rewardCoin;

  // isset id assignments
  private static final int __PAYCOIN_ISSET_ID = 0;
  private static final int __FREECOIN_ISSET_ID = 1;
  private static final int __REWARDCOIN_ISSET_ID = 2;
  private boolean[] __isset_vector = new boolean[3];

  public CoinPayLoad() {
  }

  public CoinPayLoad(
    int payCoin,
    int freeCoin,
    PayloadType type,
    int rewardCoin)
  {
    this();
    this.payCoin = payCoin;
    setPayCoinIsSet(true);
    this.freeCoin = freeCoin;
    setFreeCoinIsSet(true);
    this.type = type;
    this.rewardCoin = rewardCoin;
    setRewardCoinIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CoinPayLoad(CoinPayLoad other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    this.payCoin = other.payCoin;
    this.freeCoin = other.freeCoin;
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.rewardCoin = other.rewardCoin;
  }

  public CoinPayLoad deepCopy() {
    return new CoinPayLoad(this);
  }

  public void clear() {
    setPayCoinIsSet(false);
    this.payCoin = 0;
    setFreeCoinIsSet(false);
    this.freeCoin = 0;
    this.type = null;
    setRewardCoinIsSet(false);
    this.rewardCoin = 0;
  }

  public int getPayCoin() {
    return this.payCoin;
  }

  public void setPayCoin(int payCoin) {
    this.payCoin = payCoin;
    setPayCoinIsSet(true);
  }

  public void unsetPayCoin() {
    __isset_vector[__PAYCOIN_ISSET_ID] = false;
  }

  /** Returns true if field payCoin is set (has been assigned a value) and false otherwise */
  public boolean isSetPayCoin() {
    return __isset_vector[__PAYCOIN_ISSET_ID];
  }

  public void setPayCoinIsSet(boolean value) {
    __isset_vector[__PAYCOIN_ISSET_ID] = value;
  }

  public int getFreeCoin() {
    return this.freeCoin;
  }

  public void setFreeCoin(int freeCoin) {
    this.freeCoin = freeCoin;
    setFreeCoinIsSet(true);
  }

  public void unsetFreeCoin() {
    __isset_vector[__FREECOIN_ISSET_ID] = false;
  }

  /** Returns true if field freeCoin is set (has been assigned a value) and false otherwise */
  public boolean isSetFreeCoin() {
    return __isset_vector[__FREECOIN_ISSET_ID];
  }

  public void setFreeCoinIsSet(boolean value) {
    __isset_vector[__FREECOIN_ISSET_ID] = value;
  }

  /**
   * 
   * @see PayloadType
   */
  public PayloadType getType() {
    return this.type;
  }

  /**
   * 
   * @see PayloadType
   */
  public void setType(PayloadType type) {
    this.type = type;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getRewardCoin() {
    return this.rewardCoin;
  }

  public void setRewardCoin(int rewardCoin) {
    this.rewardCoin = rewardCoin;
    setRewardCoinIsSet(true);
  }

  public void unsetRewardCoin() {
    __isset_vector[__REWARDCOIN_ISSET_ID] = false;
  }

  /** Returns true if field rewardCoin is set (has been assigned a value) and false otherwise */
  public boolean isSetRewardCoin() {
    return __isset_vector[__REWARDCOIN_ISSET_ID];
  }

  public void setRewardCoinIsSet(boolean value) {
    __isset_vector[__REWARDCOIN_ISSET_ID] = value;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CoinPayLoad)
      return this.equals((CoinPayLoad)that);
    return false;
  }

  public boolean equals(CoinPayLoad that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_payCoin = true;
    boolean that_present_payCoin = true;
    if (this_present_payCoin || that_present_payCoin) {
      if (!(this_present_payCoin && that_present_payCoin))
        return false;
      if (this.payCoin != that.payCoin)
        return false;
    }

    boolean this_present_freeCoin = true;
    boolean that_present_freeCoin = true;
    if (this_present_freeCoin || that_present_freeCoin) {
      if (!(this_present_freeCoin && that_present_freeCoin))
        return false;
      if (this.freeCoin != that.freeCoin)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_rewardCoin = true;
    boolean that_present_rewardCoin = true;
    if (this_present_rewardCoin || that_present_rewardCoin) {
      if (!(this_present_rewardCoin && that_present_rewardCoin))
        return false;
      if (this.rewardCoin != that.rewardCoin)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    CoinPayLoad other = (CoinPayLoad)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetPayCoin(), other.isSetPayCoin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayCoin()) {
      lastComparison = TBaseHelper.compareTo(this.payCoin, other.payCoin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetFreeCoin(), other.isSetFreeCoin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFreeCoin()) {
      lastComparison = TBaseHelper.compareTo(this.freeCoin, other.freeCoin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetType(), other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetRewardCoin(), other.isSetRewardCoin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRewardCoin()) {
      lastComparison = TBaseHelper.compareTo(this.rewardCoin, other.rewardCoin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // PAY_COIN
          if (field.type == TType.I32) {
            this.payCoin = iprot.readI32();
            setPayCoinIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // FREE_COIN
          if (field.type == TType.I32) {
            this.freeCoin = iprot.readI32();
            setFreeCoinIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // TYPE
          if (field.type == TType.I32) {
            this.type = PayloadType.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // REWARD_COIN
          if (field.type == TType.I32) {
            this.rewardCoin = iprot.readI32();
            setRewardCoinIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(PAY_COIN_FIELD_DESC);
    oprot.writeI32(this.payCoin);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(FREE_COIN_FIELD_DESC);
    oprot.writeI32(this.freeCoin);
    oprot.writeFieldEnd();
    if (this.type != null) {
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(this.type.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(REWARD_COIN_FIELD_DESC);
    oprot.writeI32(this.rewardCoin);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("CoinPayLoad(");
    boolean first = true;

    sb.append("payCoin:");
    sb.append(this.payCoin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("freeCoin:");
    sb.append(this.freeCoin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rewardCoin:");
    sb.append(this.rewardCoin);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

