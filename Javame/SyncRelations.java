/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class SyncRelations implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("SyncRelations");

  private static final TField SYNC_ALL_FIELD_DESC = new TField("syncAll", TType.BOOL, (short)1);
  private static final TField SYNC_PARAM_CONTACT_FIELD_DESC = new TField("syncParamContact", TType.LIST, (short)2);
  private static final TField SYNC_PARAM_MID_FIELD_DESC = new TField("syncParamMid", TType.LIST, (short)3);

  private boolean syncAll;
  private Vector syncParamContact;
  private Vector syncParamMid;

  // isset id assignments
  private static final int __SYNCALL_ISSET_ID = 0;
  private boolean[] __isset_vector = new boolean[1];

  public SyncRelations() {
  }

  public SyncRelations(
    boolean syncAll,
    Vector syncParamContact,
    Vector syncParamMid)
  {
    this();
    this.syncAll = syncAll;
    setSyncAllIsSet(true);
    this.syncParamContact = syncParamContact;
    this.syncParamMid = syncParamMid;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SyncRelations(SyncRelations other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    this.syncAll = other.syncAll;
    if (other.isSetSyncParamContact()) {
      Vector __this__syncParamContact = new Vector();
      for (Enumeration other_enum = other.syncParamContact.elements(); other_enum.hasMoreElements(); ) {
        SyncParamContact other_element = (SyncParamContact)other_enum.nextElement();
        __this__syncParamContact.addElement(new SyncParamContact(other_element));
      }
      this.syncParamContact = __this__syncParamContact;
    }
    if (other.isSetSyncParamMid()) {
      Vector __this__syncParamMid = new Vector();
      for (Enumeration other_enum = other.syncParamMid.elements(); other_enum.hasMoreElements(); ) {
        SyncParamMid other_element = (SyncParamMid)other_enum.nextElement();
        __this__syncParamMid.addElement(new SyncParamMid(other_element));
      }
      this.syncParamMid = __this__syncParamMid;
    }
  }

  public SyncRelations deepCopy() {
    return new SyncRelations(this);
  }

  public void clear() {
    setSyncAllIsSet(false);
    this.syncAll = false;
    this.syncParamContact = null;
    this.syncParamMid = null;
  }

  public boolean isSyncAll() {
    return this.syncAll;
  }

  public void setSyncAll(boolean syncAll) {
    this.syncAll = syncAll;
    setSyncAllIsSet(true);
  }

  public void unsetSyncAll() {
    __isset_vector[__SYNCALL_ISSET_ID] = false;
  }

  /** Returns true if field syncAll is set (has been assigned a value) and false otherwise */
  public boolean isSetSyncAll() {
    return __isset_vector[__SYNCALL_ISSET_ID];
  }

  public void setSyncAllIsSet(boolean value) {
    __isset_vector[__SYNCALL_ISSET_ID] = value;
  }

  public int getSyncParamContactSize() {
    return (this.syncParamContact == null) ? 0 : this.syncParamContact.size();
  }

  public Enumeration getSyncParamContactEnumeration() {
    return (this.syncParamContact == null) ? null : this.syncParamContact.elements();
  }

  public void addToSyncParamContact(SyncParamContact elem) {
    if (this.syncParamContact == null) {
      this.syncParamContact = new Vector();
    }
    this.syncParamContact.addElement(elem);
  }

  public Vector getSyncParamContact() {
    return this.syncParamContact;
  }

  public void setSyncParamContact(Vector syncParamContact) {
    this.syncParamContact = syncParamContact;
  }

  public void unsetSyncParamContact() {
    this.syncParamContact = null;
  }

  /** Returns true if field syncParamContact is set (has been assigned a value) and false otherwise */
  public boolean isSetSyncParamContact() {
    return this.syncParamContact != null;
  }

  public void setSyncParamContactIsSet(boolean value) {
    if (!value) {
      this.syncParamContact = null;
    }
  }

  public int getSyncParamMidSize() {
    return (this.syncParamMid == null) ? 0 : this.syncParamMid.size();
  }

  public Enumeration getSyncParamMidEnumeration() {
    return (this.syncParamMid == null) ? null : this.syncParamMid.elements();
  }

  public void addToSyncParamMid(SyncParamMid elem) {
    if (this.syncParamMid == null) {
      this.syncParamMid = new Vector();
    }
    this.syncParamMid.addElement(elem);
  }

  public Vector getSyncParamMid() {
    return this.syncParamMid;
  }

  public void setSyncParamMid(Vector syncParamMid) {
    this.syncParamMid = syncParamMid;
  }

  public void unsetSyncParamMid() {
    this.syncParamMid = null;
  }

  /** Returns true if field syncParamMid is set (has been assigned a value) and false otherwise */
  public boolean isSetSyncParamMid() {
    return this.syncParamMid != null;
  }

  public void setSyncParamMidIsSet(boolean value) {
    if (!value) {
      this.syncParamMid = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SyncRelations)
      return this.equals((SyncRelations)that);
    return false;
  }

  public boolean equals(SyncRelations that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_syncAll = true;
    boolean that_present_syncAll = true;
    if (this_present_syncAll || that_present_syncAll) {
      if (!(this_present_syncAll && that_present_syncAll))
        return false;
      if (this.syncAll != that.syncAll)
        return false;
    }

    boolean this_present_syncParamContact = true && this.isSetSyncParamContact();
    boolean that_present_syncParamContact = true && that.isSetSyncParamContact();
    if (this_present_syncParamContact || that_present_syncParamContact) {
      if (!(this_present_syncParamContact && that_present_syncParamContact))
        return false;
      if (!this.syncParamContact.equals(that.syncParamContact))
        return false;
    }

    boolean this_present_syncParamMid = true && this.isSetSyncParamMid();
    boolean that_present_syncParamMid = true && that.isSetSyncParamMid();
    if (this_present_syncParamMid || that_present_syncParamMid) {
      if (!(this_present_syncParamMid && that_present_syncParamMid))
        return false;
      if (!this.syncParamMid.equals(that.syncParamMid))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    SyncRelations other = (SyncRelations)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetSyncAll(), other.isSetSyncAll());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSyncAll()) {
      lastComparison = TBaseHelper.compareTo(this.syncAll, other.syncAll);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSyncParamContact(), other.isSetSyncParamContact());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSyncParamContact()) {
      lastComparison = TBaseHelper.compareTo(this.syncParamContact, other.syncParamContact);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSyncParamMid(), other.isSetSyncParamMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSyncParamMid()) {
      lastComparison = TBaseHelper.compareTo(this.syncParamMid, other.syncParamMid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // SYNC_ALL
          if (field.type == TType.BOOL) {
            this.syncAll = iprot.readBool();
            setSyncAllIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SYNC_PARAM_CONTACT
          if (field.type == TType.LIST) {
            {
              TList _list276 = iprot.readListBegin();
              this.syncParamContact = new Vector(_list276.size);
              for (int _i277 = 0; _i277 < _list276.size; ++_i277)
              {
                SyncParamContact _elem278;
                _elem278 = new SyncParamContact();
                _elem278.read(iprot);
                this.syncParamContact.addElement(_elem278);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SYNC_PARAM_MID
          if (field.type == TType.LIST) {
            {
              TList _list279 = iprot.readListBegin();
              this.syncParamMid = new Vector(_list279.size);
              for (int _i280 = 0; _i280 < _list279.size; ++_i280)
              {
                SyncParamMid _elem281;
                _elem281 = new SyncParamMid();
                _elem281.read(iprot);
                this.syncParamMid.addElement(_elem281);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(SYNC_ALL_FIELD_DESC);
    oprot.writeBool(this.syncAll);
    oprot.writeFieldEnd();
    if (this.syncParamContact != null) {
      oprot.writeFieldBegin(SYNC_PARAM_CONTACT_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.syncParamContact.size()));
        for (Enumeration _iter282_enum = this.syncParamContact.elements(); _iter282_enum.hasMoreElements(); )         {
          SyncParamContact _iter282 = (SyncParamContact)_iter282_enum.nextElement();
          _iter282.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.syncParamMid != null) {
      oprot.writeFieldBegin(SYNC_PARAM_MID_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.syncParamMid.size()));
        for (Enumeration _iter283_enum = this.syncParamMid.elements(); _iter283_enum.hasMoreElements(); )         {
          SyncParamMid _iter283 = (SyncParamMid)_iter283_enum.nextElement();
          _iter283.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("SyncRelations(");
    boolean first = true;

    sb.append("syncAll:");
    sb.append(this.syncAll);
    first = false;
    if (!first) sb.append(", ");
    sb.append("syncParamContact:");
    if (this.syncParamContact == null) {
      sb.append("null");
    } else {
      sb.append(this.syncParamContact);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("syncParamMid:");
    if (this.syncParamMid == null) {
      sb.append("null");
    } else {
      sb.append(this.syncParamMid);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

