/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class RemoveSubscriptionsRequest implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("RemoveSubscriptionsRequest");

  private static final TField UNSUBSCRIPTIONS_FIELD_DESC = new TField("unsubscriptions", TType.LIST, (short)2);

  private Vector unsubscriptions;

  // isset id assignments

  public RemoveSubscriptionsRequest() {
  }

  public RemoveSubscriptionsRequest(
    Vector unsubscriptions)
  {
    this();
    this.unsubscriptions = unsubscriptions;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RemoveSubscriptionsRequest(RemoveSubscriptionsRequest other) {
    if (other.isSetUnsubscriptions()) {
      Vector __this__unsubscriptions = new Vector();
      for (Enumeration other_enum = other.unsubscriptions.elements(); other_enum.hasMoreElements(); ) {
        Long other_element = (Long)other_enum.nextElement();
        __this__unsubscriptions.addElement(other_element);
      }
      this.unsubscriptions = __this__unsubscriptions;
    }
  }

  public RemoveSubscriptionsRequest deepCopy() {
    return new RemoveSubscriptionsRequest(this);
  }

  public void clear() {
    this.unsubscriptions = null;
  }

  public int getUnsubscriptionsSize() {
    return (this.unsubscriptions == null) ? 0 : this.unsubscriptions.size();
  }

  public Enumeration getUnsubscriptionsEnumeration() {
    return (this.unsubscriptions == null) ? null : this.unsubscriptions.elements();
  }

  public void addToUnsubscriptions(long elem) {
    if (this.unsubscriptions == null) {
      this.unsubscriptions = new Vector();
    }
    this.unsubscriptions.addElement(new Long(elem));
  }

  public Vector getUnsubscriptions() {
    return this.unsubscriptions;
  }

  public void setUnsubscriptions(Vector unsubscriptions) {
    this.unsubscriptions = unsubscriptions;
  }

  public void unsetUnsubscriptions() {
    this.unsubscriptions = null;
  }

  /** Returns true if field unsubscriptions is set (has been assigned a value) and false otherwise */
  public boolean isSetUnsubscriptions() {
    return this.unsubscriptions != null;
  }

  public void setUnsubscriptionsIsSet(boolean value) {
    if (!value) {
      this.unsubscriptions = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RemoveSubscriptionsRequest)
      return this.equals((RemoveSubscriptionsRequest)that);
    return false;
  }

  public boolean equals(RemoveSubscriptionsRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_unsubscriptions = true && this.isSetUnsubscriptions();
    boolean that_present_unsubscriptions = true && that.isSetUnsubscriptions();
    if (this_present_unsubscriptions || that_present_unsubscriptions) {
      if (!(this_present_unsubscriptions && that_present_unsubscriptions))
        return false;
      if (!this.unsubscriptions.equals(that.unsubscriptions))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    RemoveSubscriptionsRequest other = (RemoveSubscriptionsRequest)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetUnsubscriptions(), other.isSetUnsubscriptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnsubscriptions()) {
      lastComparison = TBaseHelper.compareTo(this.unsubscriptions, other.unsubscriptions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 2: // UNSUBSCRIPTIONS
          if (field.type == TType.LIST) {
            {
              TList _list458 = iprot.readListBegin();
              this.unsubscriptions = new Vector(_list458.size);
              for (int _i459 = 0; _i459 < _list458.size; ++_i459)
              {
                long _elem460;
                _elem460 = iprot.readI64();
                this.unsubscriptions.addElement(new Long(_elem460));
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.unsubscriptions != null) {
      oprot.writeFieldBegin(UNSUBSCRIPTIONS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.I64, this.unsubscriptions.size()));
        for (Enumeration _iter461_enum = this.unsubscriptions.elements(); _iter461_enum.hasMoreElements(); )         {
          Long _iter461 = (Long)_iter461_enum.nextElement();
          oprot.writeI64(_iter461);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("RemoveSubscriptionsRequest(");
    boolean first = true;

    sb.append("unsubscriptions:");
    if (this.unsubscriptions == null) {
      sb.append("null");
    } else {
      sb.append(this.unsubscriptions);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

