/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class BuddyOnAirUrls implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("BuddyOnAirUrls");

  private static final TField HLS_FIELD_DESC = new TField("hls", TType.MAP, (short)1);
  private static final TField SMOOTH_STREAMING_FIELD_DESC = new TField("smoothStreaming", TType.MAP, (short)2);

  private Hashtable hls;
  private Hashtable smoothStreaming;

  // isset id assignments

  public BuddyOnAirUrls() {
  }

  public BuddyOnAirUrls(
    Hashtable hls,
    Hashtable smoothStreaming)
  {
    this();
    this.hls = hls;
    this.smoothStreaming = smoothStreaming;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BuddyOnAirUrls(BuddyOnAirUrls other) {
    if (other.isSetHls()) {
      Hashtable __this__hls = new Hashtable();
      for (Enumeration other_enum = other.hls.keys(); other_enum.hasMoreElements(); ) {

        String other_element_key = (String)other_enum.nextElement();
        String other_element_value = (String)other.hls.get(other_element_key);

        String __this__hls_copy_key = other_element_key;

        String __this__hls_copy_value = other_element_value;

        __this__hls.put(__this__hls_copy_key, __this__hls_copy_value);
      }
      this.hls = __this__hls;
    }
    if (other.isSetSmoothStreaming()) {
      Hashtable __this__smoothStreaming = new Hashtable();
      for (Enumeration other_enum = other.smoothStreaming.keys(); other_enum.hasMoreElements(); ) {

        String other_element_key = (String)other_enum.nextElement();
        String other_element_value = (String)other.smoothStreaming.get(other_element_key);

        String __this__smoothStreaming_copy_key = other_element_key;

        String __this__smoothStreaming_copy_value = other_element_value;

        __this__smoothStreaming.put(__this__smoothStreaming_copy_key, __this__smoothStreaming_copy_value);
      }
      this.smoothStreaming = __this__smoothStreaming;
    }
  }

  public BuddyOnAirUrls deepCopy() {
    return new BuddyOnAirUrls(this);
  }

  public void clear() {
    this.hls = null;
    this.smoothStreaming = null;
  }

  public int getHlsSize() {
    return (this.hls == null) ? 0 : this.hls.size();
  }

  public void putToHls(String key, String val) {
    if (this.hls == null) {
      this.hls = new Hashtable();
    }
    this.hls.put(key, val);
  }

  public Hashtable getHls() {
    return this.hls;
  }

  public void setHls(Hashtable hls) {
    this.hls = hls;
  }

  public void unsetHls() {
    this.hls = null;
  }

  /** Returns true if field hls is set (has been assigned a value) and false otherwise */
  public boolean isSetHls() {
    return this.hls != null;
  }

  public void setHlsIsSet(boolean value) {
    if (!value) {
      this.hls = null;
    }
  }

  public int getSmoothStreamingSize() {
    return (this.smoothStreaming == null) ? 0 : this.smoothStreaming.size();
  }

  public void putToSmoothStreaming(String key, String val) {
    if (this.smoothStreaming == null) {
      this.smoothStreaming = new Hashtable();
    }
    this.smoothStreaming.put(key, val);
  }

  public Hashtable getSmoothStreaming() {
    return this.smoothStreaming;
  }

  public void setSmoothStreaming(Hashtable smoothStreaming) {
    this.smoothStreaming = smoothStreaming;
  }

  public void unsetSmoothStreaming() {
    this.smoothStreaming = null;
  }

  /** Returns true if field smoothStreaming is set (has been assigned a value) and false otherwise */
  public boolean isSetSmoothStreaming() {
    return this.smoothStreaming != null;
  }

  public void setSmoothStreamingIsSet(boolean value) {
    if (!value) {
      this.smoothStreaming = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BuddyOnAirUrls)
      return this.equals((BuddyOnAirUrls)that);
    return false;
  }

  public boolean equals(BuddyOnAirUrls that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_hls = true && this.isSetHls();
    boolean that_present_hls = true && that.isSetHls();
    if (this_present_hls || that_present_hls) {
      if (!(this_present_hls && that_present_hls))
        return false;
      if (!this.hls.equals(that.hls))
        return false;
    }

    boolean this_present_smoothStreaming = true && this.isSetSmoothStreaming();
    boolean that_present_smoothStreaming = true && that.isSetSmoothStreaming();
    if (this_present_smoothStreaming || that_present_smoothStreaming) {
      if (!(this_present_smoothStreaming && that_present_smoothStreaming))
        return false;
      if (!this.smoothStreaming.equals(that.smoothStreaming))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    BuddyOnAirUrls other = (BuddyOnAirUrls)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetHls(), other.isSetHls());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHls()) {
      lastComparison = TBaseHelper.compareTo(this.hls, other.hls);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSmoothStreaming(), other.isSetSmoothStreaming());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSmoothStreaming()) {
      lastComparison = TBaseHelper.compareTo(this.smoothStreaming, other.smoothStreaming);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // HLS
          if (field.type == TType.MAP) {
            {
              TMap _map69 = iprot.readMapBegin();
              this.hls = new Hashtable(2*_map69.size);
              for (int _i70 = 0; _i70 < _map69.size; ++_i70)
              {
                String _key71;
                String _val72;
                _key71 = iprot.readString();
                _val72 = iprot.readString();
                this.hls.put(_key71, _val72);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SMOOTH_STREAMING
          if (field.type == TType.MAP) {
            {
              TMap _map73 = iprot.readMapBegin();
              this.smoothStreaming = new Hashtable(2*_map73.size);
              for (int _i74 = 0; _i74 < _map73.size; ++_i74)
              {
                String _key75;
                String _val76;
                _key75 = iprot.readString();
                _val76 = iprot.readString();
                this.smoothStreaming.put(_key75, _val76);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.hls != null) {
      oprot.writeFieldBegin(HLS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.hls.size()));
        for (Enumeration _iter77_enum = this.hls.keys(); _iter77_enum.hasMoreElements(); )         {
          String _iter77 = (String)_iter77_enum.nextElement();
          oprot.writeString(_iter77);
          oprot.writeString(((String)this.hls.get(_iter77)));
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.smoothStreaming != null) {
      oprot.writeFieldBegin(SMOOTH_STREAMING_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.smoothStreaming.size()));
        for (Enumeration _iter78_enum = this.smoothStreaming.keys(); _iter78_enum.hasMoreElements(); )         {
          String _iter78 = (String)_iter78_enum.nextElement();
          oprot.writeString(_iter78);
          oprot.writeString(((String)this.smoothStreaming.get(_iter78)));
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("BuddyOnAirUrls(");
    boolean first = true;

    sb.append("hls:");
    if (this.hls == null) {
      sb.append("null");
    } else {
      sb.append(this.hls);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("smoothStreaming:");
    if (this.smoothStreaming == null) {
      sb.append("null");
    } else {
      sb.append(this.smoothStreaming);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

