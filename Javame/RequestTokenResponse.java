/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class RequestTokenResponse implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("RequestTokenResponse");

  private static final TField REQUEST_TOKEN_FIELD_DESC = new TField("requestToken", TType.STRING, (short)1);
  private static final TField RETURN_URL_FIELD_DESC = new TField("returnUrl", TType.STRING, (short)2);

  private String requestToken;
  private String returnUrl;

  // isset id assignments

  public RequestTokenResponse() {
  }

  public RequestTokenResponse(
    String requestToken,
    String returnUrl)
  {
    this();
    this.requestToken = requestToken;
    this.returnUrl = returnUrl;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RequestTokenResponse(RequestTokenResponse other) {
    if (other.isSetRequestToken()) {
      this.requestToken = other.requestToken;
    }
    if (other.isSetReturnUrl()) {
      this.returnUrl = other.returnUrl;
    }
  }

  public RequestTokenResponse deepCopy() {
    return new RequestTokenResponse(this);
  }

  public void clear() {
    this.requestToken = null;
    this.returnUrl = null;
  }

  public String getRequestToken() {
    return this.requestToken;
  }

  public void setRequestToken(String requestToken) {
    this.requestToken = requestToken;
  }

  public void unsetRequestToken() {
    this.requestToken = null;
  }

  /** Returns true if field requestToken is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestToken() {
    return this.requestToken != null;
  }

  public void setRequestTokenIsSet(boolean value) {
    if (!value) {
      this.requestToken = null;
    }
  }

  public String getReturnUrl() {
    return this.returnUrl;
  }

  public void setReturnUrl(String returnUrl) {
    this.returnUrl = returnUrl;
  }

  public void unsetReturnUrl() {
    this.returnUrl = null;
  }

  /** Returns true if field returnUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetReturnUrl() {
    return this.returnUrl != null;
  }

  public void setReturnUrlIsSet(boolean value) {
    if (!value) {
      this.returnUrl = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RequestTokenResponse)
      return this.equals((RequestTokenResponse)that);
    return false;
  }

  public boolean equals(RequestTokenResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_requestToken = true && this.isSetRequestToken();
    boolean that_present_requestToken = true && that.isSetRequestToken();
    if (this_present_requestToken || that_present_requestToken) {
      if (!(this_present_requestToken && that_present_requestToken))
        return false;
      if (!this.requestToken.equals(that.requestToken))
        return false;
    }

    boolean this_present_returnUrl = true && this.isSetReturnUrl();
    boolean that_present_returnUrl = true && that.isSetReturnUrl();
    if (this_present_returnUrl || that_present_returnUrl) {
      if (!(this_present_returnUrl && that_present_returnUrl))
        return false;
      if (!this.returnUrl.equals(that.returnUrl))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    RequestTokenResponse other = (RequestTokenResponse)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetRequestToken(), other.isSetRequestToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestToken()) {
      lastComparison = TBaseHelper.compareTo(this.requestToken, other.requestToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetReturnUrl(), other.isSetReturnUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReturnUrl()) {
      lastComparison = TBaseHelper.compareTo(this.returnUrl, other.returnUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // REQUEST_TOKEN
          if (field.type == TType.STRING) {
            this.requestToken = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // RETURN_URL
          if (field.type == TType.STRING) {
            this.returnUrl = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.requestToken != null) {
      oprot.writeFieldBegin(REQUEST_TOKEN_FIELD_DESC);
      oprot.writeString(this.requestToken);
      oprot.writeFieldEnd();
    }
    if (this.returnUrl != null) {
      oprot.writeFieldBegin(RETURN_URL_FIELD_DESC);
      oprot.writeString(this.returnUrl);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("RequestTokenResponse(");
    boolean first = true;

    sb.append("requestToken:");
    if (this.requestToken == null) {
      sb.append("null");
    } else {
      sb.append(this.requestToken);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("returnUrl:");
    if (this.returnUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.returnUrl);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

