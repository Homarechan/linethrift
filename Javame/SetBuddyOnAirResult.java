/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class SetBuddyOnAirResult implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("SetBuddyOnAirResult");

  private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);
  private static final TField STATE_FIELD_DESC = new TField("state", TType.I32, (short)2);
  private static final TField EVENT_NO_FIELD_DESC = new TField("eventNo", TType.I32, (short)3);
  private static final TField RECEIVER_COUNT_FIELD_DESC = new TField("receiverCount", TType.I64, (short)11);
  private static final TField SUCCESS_COUNT_FIELD_DESC = new TField("successCount", TType.I64, (short)12);
  private static final TField FAIL_COUNT_FIELD_DESC = new TField("failCount", TType.I64, (short)13);
  private static final TField CANCEL_COUNT_FIELD_DESC = new TField("cancelCount", TType.I64, (short)14);
  private static final TField UNREGISTER_COUNT_FIELD_DESC = new TField("unregisterCount", TType.I64, (short)15);
  private static final TField TIMESTAMP_FIELD_DESC = new TField("timestamp", TType.I64, (short)21);
  private static final TField MESSAGE_FIELD_DESC = new TField("message", TType.STRING, (short)22);

  private String requestId;
  private BuddyResultState state;
  private int eventNo;
  private long receiverCount;
  private long successCount;
  private long failCount;
  private long cancelCount;
  private long unregisterCount;
  private long timestamp;
  private String message;

  // isset id assignments
  private static final int __EVENTNO_ISSET_ID = 0;
  private static final int __RECEIVERCOUNT_ISSET_ID = 1;
  private static final int __SUCCESSCOUNT_ISSET_ID = 2;
  private static final int __FAILCOUNT_ISSET_ID = 3;
  private static final int __CANCELCOUNT_ISSET_ID = 4;
  private static final int __UNREGISTERCOUNT_ISSET_ID = 5;
  private static final int __TIMESTAMP_ISSET_ID = 6;
  private boolean[] __isset_vector = new boolean[7];

  public SetBuddyOnAirResult() {
  }

  public SetBuddyOnAirResult(
    String requestId,
    BuddyResultState state,
    int eventNo,
    long receiverCount,
    long successCount,
    long failCount,
    long cancelCount,
    long unregisterCount,
    long timestamp,
    String message)
  {
    this();
    this.requestId = requestId;
    this.state = state;
    this.eventNo = eventNo;
    setEventNoIsSet(true);
    this.receiverCount = receiverCount;
    setReceiverCountIsSet(true);
    this.successCount = successCount;
    setSuccessCountIsSet(true);
    this.failCount = failCount;
    setFailCountIsSet(true);
    this.cancelCount = cancelCount;
    setCancelCountIsSet(true);
    this.unregisterCount = unregisterCount;
    setUnregisterCountIsSet(true);
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.message = message;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SetBuddyOnAirResult(SetBuddyOnAirResult other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    if (other.isSetRequestId()) {
      this.requestId = other.requestId;
    }
    if (other.isSetState()) {
      this.state = other.state;
    }
    this.eventNo = other.eventNo;
    this.receiverCount = other.receiverCount;
    this.successCount = other.successCount;
    this.failCount = other.failCount;
    this.cancelCount = other.cancelCount;
    this.unregisterCount = other.unregisterCount;
    this.timestamp = other.timestamp;
    if (other.isSetMessage()) {
      this.message = other.message;
    }
  }

  public SetBuddyOnAirResult deepCopy() {
    return new SetBuddyOnAirResult(this);
  }

  public void clear() {
    this.requestId = null;
    this.state = null;
    setEventNoIsSet(false);
    this.eventNo = 0;
    setReceiverCountIsSet(false);
    this.receiverCount = 0;
    setSuccessCountIsSet(false);
    this.successCount = 0;
    setFailCountIsSet(false);
    this.failCount = 0;
    setCancelCountIsSet(false);
    this.cancelCount = 0;
    setUnregisterCountIsSet(false);
    this.unregisterCount = 0;
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.message = null;
  }

  public String getRequestId() {
    return this.requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }

  public void unsetRequestId() {
    this.requestId = null;
  }

  /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestId() {
    return this.requestId != null;
  }

  public void setRequestIdIsSet(boolean value) {
    if (!value) {
      this.requestId = null;
    }
  }

  /**
   * 
   * @see BuddyResultState
   */
  public BuddyResultState getState() {
    return this.state;
  }

  /**
   * 
   * @see BuddyResultState
   */
  public void setState(BuddyResultState state) {
    this.state = state;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public int getEventNo() {
    return this.eventNo;
  }

  public void setEventNo(int eventNo) {
    this.eventNo = eventNo;
    setEventNoIsSet(true);
  }

  public void unsetEventNo() {
    __isset_vector[__EVENTNO_ISSET_ID] = false;
  }

  /** Returns true if field eventNo is set (has been assigned a value) and false otherwise */
  public boolean isSetEventNo() {
    return __isset_vector[__EVENTNO_ISSET_ID];
  }

  public void setEventNoIsSet(boolean value) {
    __isset_vector[__EVENTNO_ISSET_ID] = value;
  }

  public long getReceiverCount() {
    return this.receiverCount;
  }

  public void setReceiverCount(long receiverCount) {
    this.receiverCount = receiverCount;
    setReceiverCountIsSet(true);
  }

  public void unsetReceiverCount() {
    __isset_vector[__RECEIVERCOUNT_ISSET_ID] = false;
  }

  /** Returns true if field receiverCount is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiverCount() {
    return __isset_vector[__RECEIVERCOUNT_ISSET_ID];
  }

  public void setReceiverCountIsSet(boolean value) {
    __isset_vector[__RECEIVERCOUNT_ISSET_ID] = value;
  }

  public long getSuccessCount() {
    return this.successCount;
  }

  public void setSuccessCount(long successCount) {
    this.successCount = successCount;
    setSuccessCountIsSet(true);
  }

  public void unsetSuccessCount() {
    __isset_vector[__SUCCESSCOUNT_ISSET_ID] = false;
  }

  /** Returns true if field successCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccessCount() {
    return __isset_vector[__SUCCESSCOUNT_ISSET_ID];
  }

  public void setSuccessCountIsSet(boolean value) {
    __isset_vector[__SUCCESSCOUNT_ISSET_ID] = value;
  }

  public long getFailCount() {
    return this.failCount;
  }

  public void setFailCount(long failCount) {
    this.failCount = failCount;
    setFailCountIsSet(true);
  }

  public void unsetFailCount() {
    __isset_vector[__FAILCOUNT_ISSET_ID] = false;
  }

  /** Returns true if field failCount is set (has been assigned a value) and false otherwise */
  public boolean isSetFailCount() {
    return __isset_vector[__FAILCOUNT_ISSET_ID];
  }

  public void setFailCountIsSet(boolean value) {
    __isset_vector[__FAILCOUNT_ISSET_ID] = value;
  }

  public long getCancelCount() {
    return this.cancelCount;
  }

  public void setCancelCount(long cancelCount) {
    this.cancelCount = cancelCount;
    setCancelCountIsSet(true);
  }

  public void unsetCancelCount() {
    __isset_vector[__CANCELCOUNT_ISSET_ID] = false;
  }

  /** Returns true if field cancelCount is set (has been assigned a value) and false otherwise */
  public boolean isSetCancelCount() {
    return __isset_vector[__CANCELCOUNT_ISSET_ID];
  }

  public void setCancelCountIsSet(boolean value) {
    __isset_vector[__CANCELCOUNT_ISSET_ID] = value;
  }

  public long getUnregisterCount() {
    return this.unregisterCount;
  }

  public void setUnregisterCount(long unregisterCount) {
    this.unregisterCount = unregisterCount;
    setUnregisterCountIsSet(true);
  }

  public void unsetUnregisterCount() {
    __isset_vector[__UNREGISTERCOUNT_ISSET_ID] = false;
  }

  /** Returns true if field unregisterCount is set (has been assigned a value) and false otherwise */
  public boolean isSetUnregisterCount() {
    return __isset_vector[__UNREGISTERCOUNT_ISSET_ID];
  }

  public void setUnregisterCountIsSet(boolean value) {
    __isset_vector[__UNREGISTERCOUNT_ISSET_ID] = value;
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public void setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
  }

  public void unsetTimestamp() {
    __isset_vector[__TIMESTAMP_ISSET_ID] = false;
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return __isset_vector[__TIMESTAMP_ISSET_ID];
  }

  public void setTimestampIsSet(boolean value) {
    __isset_vector[__TIMESTAMP_ISSET_ID] = value;
  }

  public String getMessage() {
    return this.message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SetBuddyOnAirResult)
      return this.equals((SetBuddyOnAirResult)that);
    return false;
  }

  public boolean equals(SetBuddyOnAirResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_requestId = true && this.isSetRequestId();
    boolean that_present_requestId = true && that.isSetRequestId();
    if (this_present_requestId || that_present_requestId) {
      if (!(this_present_requestId && that_present_requestId))
        return false;
      if (!this.requestId.equals(that.requestId))
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_eventNo = true;
    boolean that_present_eventNo = true;
    if (this_present_eventNo || that_present_eventNo) {
      if (!(this_present_eventNo && that_present_eventNo))
        return false;
      if (this.eventNo != that.eventNo)
        return false;
    }

    boolean this_present_receiverCount = true;
    boolean that_present_receiverCount = true;
    if (this_present_receiverCount || that_present_receiverCount) {
      if (!(this_present_receiverCount && that_present_receiverCount))
        return false;
      if (this.receiverCount != that.receiverCount)
        return false;
    }

    boolean this_present_successCount = true;
    boolean that_present_successCount = true;
    if (this_present_successCount || that_present_successCount) {
      if (!(this_present_successCount && that_present_successCount))
        return false;
      if (this.successCount != that.successCount)
        return false;
    }

    boolean this_present_failCount = true;
    boolean that_present_failCount = true;
    if (this_present_failCount || that_present_failCount) {
      if (!(this_present_failCount && that_present_failCount))
        return false;
      if (this.failCount != that.failCount)
        return false;
    }

    boolean this_present_cancelCount = true;
    boolean that_present_cancelCount = true;
    if (this_present_cancelCount || that_present_cancelCount) {
      if (!(this_present_cancelCount && that_present_cancelCount))
        return false;
      if (this.cancelCount != that.cancelCount)
        return false;
    }

    boolean this_present_unregisterCount = true;
    boolean that_present_unregisterCount = true;
    if (this_present_unregisterCount || that_present_unregisterCount) {
      if (!(this_present_unregisterCount && that_present_unregisterCount))
        return false;
      if (this.unregisterCount != that.unregisterCount)
        return false;
    }

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    SetBuddyOnAirResult other = (SetBuddyOnAirResult)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestId()) {
      lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetState(), other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetEventNo(), other.isSetEventNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventNo()) {
      lastComparison = TBaseHelper.compareTo(this.eventNo, other.eventNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetReceiverCount(), other.isSetReceiverCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiverCount()) {
      lastComparison = TBaseHelper.compareTo(this.receiverCount, other.receiverCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSuccessCount(), other.isSetSuccessCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccessCount()) {
      lastComparison = TBaseHelper.compareTo(this.successCount, other.successCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetFailCount(), other.isSetFailCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailCount()) {
      lastComparison = TBaseHelper.compareTo(this.failCount, other.failCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetCancelCount(), other.isSetCancelCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCancelCount()) {
      lastComparison = TBaseHelper.compareTo(this.cancelCount, other.cancelCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetUnregisterCount(), other.isSetUnregisterCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnregisterCount()) {
      lastComparison = TBaseHelper.compareTo(this.unregisterCount, other.unregisterCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetTimestamp(), other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetMessage(), other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // REQUEST_ID
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // STATE
          if (field.type == TType.I32) {
            this.state = BuddyResultState.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // EVENT_NO
          if (field.type == TType.I32) {
            this.eventNo = iprot.readI32();
            setEventNoIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // RECEIVER_COUNT
          if (field.type == TType.I64) {
            this.receiverCount = iprot.readI64();
            setReceiverCountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // SUCCESS_COUNT
          if (field.type == TType.I64) {
            this.successCount = iprot.readI64();
            setSuccessCountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // FAIL_COUNT
          if (field.type == TType.I64) {
            this.failCount = iprot.readI64();
            setFailCountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // CANCEL_COUNT
          if (field.type == TType.I64) {
            this.cancelCount = iprot.readI64();
            setCancelCountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 15: // UNREGISTER_COUNT
          if (field.type == TType.I64) {
            this.unregisterCount = iprot.readI64();
            setUnregisterCountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 21: // TIMESTAMP
          if (field.type == TType.I64) {
            this.timestamp = iprot.readI64();
            setTimestampIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 22: // MESSAGE
          if (field.type == TType.STRING) {
            this.message = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    if (this.state != null) {
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeI32(this.state.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(EVENT_NO_FIELD_DESC);
    oprot.writeI32(this.eventNo);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(RECEIVER_COUNT_FIELD_DESC);
    oprot.writeI64(this.receiverCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SUCCESS_COUNT_FIELD_DESC);
    oprot.writeI64(this.successCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(FAIL_COUNT_FIELD_DESC);
    oprot.writeI64(this.failCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(CANCEL_COUNT_FIELD_DESC);
    oprot.writeI64(this.cancelCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(UNREGISTER_COUNT_FIELD_DESC);
    oprot.writeI64(this.unregisterCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
    oprot.writeI64(this.timestamp);
    oprot.writeFieldEnd();
    if (this.message != null) {
      oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
      oprot.writeString(this.message);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("SetBuddyOnAirResult(");
    boolean first = true;

    sb.append("requestId:");
    if (this.requestId == null) {
      sb.append("null");
    } else {
      sb.append(this.requestId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eventNo:");
    sb.append(this.eventNo);
    first = false;
    if (!first) sb.append(", ");
    sb.append("receiverCount:");
    sb.append(this.receiverCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("successCount:");
    sb.append(this.successCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("failCount:");
    sb.append(this.failCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cancelCount:");
    sb.append(this.cancelCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unregisterCount:");
    sb.append(this.unregisterCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

