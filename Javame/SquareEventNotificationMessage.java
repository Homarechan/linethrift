/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class SquareEventNotificationMessage implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("SquareEventNotificationMessage");

  private static final TField SQUARE_CHAT_MID_FIELD_DESC = new TField("squareChatMid", TType.STRING, (short)1);
  private static final TField SQUARE_MESSAGE_FIELD_DESC = new TField("squareMessage", TType.STRUCT, (short)2);
  private static final TField SENDER_DISPLAY_NAME_FIELD_DESC = new TField("senderDisplayName", TType.STRING, (short)3);
  private static final TField UNREAD_COUNT_FIELD_DESC = new TField("unreadCount", TType.I32, (short)4);
  private static final TField REQUIRED_TO_FETCH_CHAT_EVENTS_FIELD_DESC = new TField("requiredToFetchChatEvents", TType.BOOL, (short)5);

  private String squareChatMid;
  private SquareMessage squareMessage;
  private String senderDisplayName;
  private int unreadCount;
  private boolean requiredToFetchChatEvents;

  // isset id assignments
  private static final int __UNREADCOUNT_ISSET_ID = 0;
  private static final int __REQUIREDTOFETCHCHATEVENTS_ISSET_ID = 1;
  private boolean[] __isset_vector = new boolean[2];

  public SquareEventNotificationMessage() {
  }

  public SquareEventNotificationMessage(
    String squareChatMid,
    SquareMessage squareMessage,
    String senderDisplayName,
    int unreadCount,
    boolean requiredToFetchChatEvents)
  {
    this();
    this.squareChatMid = squareChatMid;
    this.squareMessage = squareMessage;
    this.senderDisplayName = senderDisplayName;
    this.unreadCount = unreadCount;
    setUnreadCountIsSet(true);
    this.requiredToFetchChatEvents = requiredToFetchChatEvents;
    setRequiredToFetchChatEventsIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SquareEventNotificationMessage(SquareEventNotificationMessage other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    if (other.isSetSquareChatMid()) {
      this.squareChatMid = other.squareChatMid;
    }
    if (other.isSetSquareMessage()) {
      this.squareMessage = new SquareMessage(other.squareMessage);
    }
    if (other.isSetSenderDisplayName()) {
      this.senderDisplayName = other.senderDisplayName;
    }
    this.unreadCount = other.unreadCount;
    this.requiredToFetchChatEvents = other.requiredToFetchChatEvents;
  }

  public SquareEventNotificationMessage deepCopy() {
    return new SquareEventNotificationMessage(this);
  }

  public void clear() {
    this.squareChatMid = null;
    this.squareMessage = null;
    this.senderDisplayName = null;
    setUnreadCountIsSet(false);
    this.unreadCount = 0;
    setRequiredToFetchChatEventsIsSet(false);
    this.requiredToFetchChatEvents = false;
  }

  public String getSquareChatMid() {
    return this.squareChatMid;
  }

  public void setSquareChatMid(String squareChatMid) {
    this.squareChatMid = squareChatMid;
  }

  public void unsetSquareChatMid() {
    this.squareChatMid = null;
  }

  /** Returns true if field squareChatMid is set (has been assigned a value) and false otherwise */
  public boolean isSetSquareChatMid() {
    return this.squareChatMid != null;
  }

  public void setSquareChatMidIsSet(boolean value) {
    if (!value) {
      this.squareChatMid = null;
    }
  }

  public SquareMessage getSquareMessage() {
    return this.squareMessage;
  }

  public void setSquareMessage(SquareMessage squareMessage) {
    this.squareMessage = squareMessage;
  }

  public void unsetSquareMessage() {
    this.squareMessage = null;
  }

  /** Returns true if field squareMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetSquareMessage() {
    return this.squareMessage != null;
  }

  public void setSquareMessageIsSet(boolean value) {
    if (!value) {
      this.squareMessage = null;
    }
  }

  public String getSenderDisplayName() {
    return this.senderDisplayName;
  }

  public void setSenderDisplayName(String senderDisplayName) {
    this.senderDisplayName = senderDisplayName;
  }

  public void unsetSenderDisplayName() {
    this.senderDisplayName = null;
  }

  /** Returns true if field senderDisplayName is set (has been assigned a value) and false otherwise */
  public boolean isSetSenderDisplayName() {
    return this.senderDisplayName != null;
  }

  public void setSenderDisplayNameIsSet(boolean value) {
    if (!value) {
      this.senderDisplayName = null;
    }
  }

  public int getUnreadCount() {
    return this.unreadCount;
  }

  public void setUnreadCount(int unreadCount) {
    this.unreadCount = unreadCount;
    setUnreadCountIsSet(true);
  }

  public void unsetUnreadCount() {
    __isset_vector[__UNREADCOUNT_ISSET_ID] = false;
  }

  /** Returns true if field unreadCount is set (has been assigned a value) and false otherwise */
  public boolean isSetUnreadCount() {
    return __isset_vector[__UNREADCOUNT_ISSET_ID];
  }

  public void setUnreadCountIsSet(boolean value) {
    __isset_vector[__UNREADCOUNT_ISSET_ID] = value;
  }

  public boolean isRequiredToFetchChatEvents() {
    return this.requiredToFetchChatEvents;
  }

  public void setRequiredToFetchChatEvents(boolean requiredToFetchChatEvents) {
    this.requiredToFetchChatEvents = requiredToFetchChatEvents;
    setRequiredToFetchChatEventsIsSet(true);
  }

  public void unsetRequiredToFetchChatEvents() {
    __isset_vector[__REQUIREDTOFETCHCHATEVENTS_ISSET_ID] = false;
  }

  /** Returns true if field requiredToFetchChatEvents is set (has been assigned a value) and false otherwise */
  public boolean isSetRequiredToFetchChatEvents() {
    return __isset_vector[__REQUIREDTOFETCHCHATEVENTS_ISSET_ID];
  }

  public void setRequiredToFetchChatEventsIsSet(boolean value) {
    __isset_vector[__REQUIREDTOFETCHCHATEVENTS_ISSET_ID] = value;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SquareEventNotificationMessage)
      return this.equals((SquareEventNotificationMessage)that);
    return false;
  }

  public boolean equals(SquareEventNotificationMessage that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_squareChatMid = true && this.isSetSquareChatMid();
    boolean that_present_squareChatMid = true && that.isSetSquareChatMid();
    if (this_present_squareChatMid || that_present_squareChatMid) {
      if (!(this_present_squareChatMid && that_present_squareChatMid))
        return false;
      if (!this.squareChatMid.equals(that.squareChatMid))
        return false;
    }

    boolean this_present_squareMessage = true && this.isSetSquareMessage();
    boolean that_present_squareMessage = true && that.isSetSquareMessage();
    if (this_present_squareMessage || that_present_squareMessage) {
      if (!(this_present_squareMessage && that_present_squareMessage))
        return false;
      if (!this.squareMessage.equals(that.squareMessage))
        return false;
    }

    boolean this_present_senderDisplayName = true && this.isSetSenderDisplayName();
    boolean that_present_senderDisplayName = true && that.isSetSenderDisplayName();
    if (this_present_senderDisplayName || that_present_senderDisplayName) {
      if (!(this_present_senderDisplayName && that_present_senderDisplayName))
        return false;
      if (!this.senderDisplayName.equals(that.senderDisplayName))
        return false;
    }

    boolean this_present_unreadCount = true;
    boolean that_present_unreadCount = true;
    if (this_present_unreadCount || that_present_unreadCount) {
      if (!(this_present_unreadCount && that_present_unreadCount))
        return false;
      if (this.unreadCount != that.unreadCount)
        return false;
    }

    boolean this_present_requiredToFetchChatEvents = true;
    boolean that_present_requiredToFetchChatEvents = true;
    if (this_present_requiredToFetchChatEvents || that_present_requiredToFetchChatEvents) {
      if (!(this_present_requiredToFetchChatEvents && that_present_requiredToFetchChatEvents))
        return false;
      if (this.requiredToFetchChatEvents != that.requiredToFetchChatEvents)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    SquareEventNotificationMessage other = (SquareEventNotificationMessage)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetSquareChatMid(), other.isSetSquareChatMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSquareChatMid()) {
      lastComparison = TBaseHelper.compareTo(this.squareChatMid, other.squareChatMid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSquareMessage(), other.isSetSquareMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSquareMessage()) {
      lastComparison = this.squareMessage.compareTo(other.squareMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSenderDisplayName(), other.isSetSenderDisplayName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSenderDisplayName()) {
      lastComparison = TBaseHelper.compareTo(this.senderDisplayName, other.senderDisplayName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetUnreadCount(), other.isSetUnreadCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnreadCount()) {
      lastComparison = TBaseHelper.compareTo(this.unreadCount, other.unreadCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetRequiredToFetchChatEvents(), other.isSetRequiredToFetchChatEvents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequiredToFetchChatEvents()) {
      lastComparison = TBaseHelper.compareTo(this.requiredToFetchChatEvents, other.requiredToFetchChatEvents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // SQUARE_CHAT_MID
          if (field.type == TType.STRING) {
            this.squareChatMid = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SQUARE_MESSAGE
          if (field.type == TType.STRUCT) {
            this.squareMessage = new SquareMessage();
            this.squareMessage.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SENDER_DISPLAY_NAME
          if (field.type == TType.STRING) {
            this.senderDisplayName = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // UNREAD_COUNT
          if (field.type == TType.I32) {
            this.unreadCount = iprot.readI32();
            setUnreadCountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // REQUIRED_TO_FETCH_CHAT_EVENTS
          if (field.type == TType.BOOL) {
            this.requiredToFetchChatEvents = iprot.readBool();
            setRequiredToFetchChatEventsIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.squareChatMid != null) {
      oprot.writeFieldBegin(SQUARE_CHAT_MID_FIELD_DESC);
      oprot.writeString(this.squareChatMid);
      oprot.writeFieldEnd();
    }
    if (this.squareMessage != null) {
      oprot.writeFieldBegin(SQUARE_MESSAGE_FIELD_DESC);
      this.squareMessage.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.senderDisplayName != null) {
      oprot.writeFieldBegin(SENDER_DISPLAY_NAME_FIELD_DESC);
      oprot.writeString(this.senderDisplayName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(UNREAD_COUNT_FIELD_DESC);
    oprot.writeI32(this.unreadCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(REQUIRED_TO_FETCH_CHAT_EVENTS_FIELD_DESC);
    oprot.writeBool(this.requiredToFetchChatEvents);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("SquareEventNotificationMessage(");
    boolean first = true;

    sb.append("squareChatMid:");
    if (this.squareChatMid == null) {
      sb.append("null");
    } else {
      sb.append(this.squareChatMid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("squareMessage:");
    if (this.squareMessage == null) {
      sb.append("null");
    } else {
      sb.append(this.squareMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("senderDisplayName:");
    if (this.senderDisplayName == null) {
      sb.append("null");
    } else {
      sb.append(this.senderDisplayName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unreadCount:");
    sb.append(this.unreadCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requiredToFetchChatEvents:");
    sb.append(this.requiredToFetchChatEvents);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

