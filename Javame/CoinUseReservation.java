/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class CoinUseReservation implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("CoinUseReservation");

  private static final TField CHANNEL_ID_FIELD_DESC = new TField("channelId", TType.STRING, (short)1);
  private static final TField SHOP_ORDER_ID_FIELD_DESC = new TField("shopOrderId", TType.STRING, (short)2);
  private static final TField APP_STORE_CODE_FIELD_DESC = new TField("appStoreCode", TType.I32, (short)3);
  private static final TField ITEMS_FIELD_DESC = new TField("items", TType.LIST, (short)4);
  private static final TField COUNTRY_FIELD_DESC = new TField("country", TType.STRING, (short)5);

  private String channelId;
  private String shopOrderId;
  private PaymentType appStoreCode;
  private Vector items;
  private String country;

  // isset id assignments

  public CoinUseReservation() {
  }

  public CoinUseReservation(
    String channelId,
    String shopOrderId,
    PaymentType appStoreCode,
    Vector items,
    String country)
  {
    this();
    this.channelId = channelId;
    this.shopOrderId = shopOrderId;
    this.appStoreCode = appStoreCode;
    this.items = items;
    this.country = country;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CoinUseReservation(CoinUseReservation other) {
    if (other.isSetChannelId()) {
      this.channelId = other.channelId;
    }
    if (other.isSetShopOrderId()) {
      this.shopOrderId = other.shopOrderId;
    }
    if (other.isSetAppStoreCode()) {
      this.appStoreCode = other.appStoreCode;
    }
    if (other.isSetItems()) {
      Vector __this__items = new Vector();
      for (Enumeration other_enum = other.items.elements(); other_enum.hasMoreElements(); ) {
        CoinUseReservationItem other_element = (CoinUseReservationItem)other_enum.nextElement();
        __this__items.addElement(new CoinUseReservationItem(other_element));
      }
      this.items = __this__items;
    }
    if (other.isSetCountry()) {
      this.country = other.country;
    }
  }

  public CoinUseReservation deepCopy() {
    return new CoinUseReservation(this);
  }

  public void clear() {
    this.channelId = null;
    this.shopOrderId = null;
    this.appStoreCode = null;
    this.items = null;
    this.country = null;
  }

  public String getChannelId() {
    return this.channelId;
  }

  public void setChannelId(String channelId) {
    this.channelId = channelId;
  }

  public void unsetChannelId() {
    this.channelId = null;
  }

  /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelId() {
    return this.channelId != null;
  }

  public void setChannelIdIsSet(boolean value) {
    if (!value) {
      this.channelId = null;
    }
  }

  public String getShopOrderId() {
    return this.shopOrderId;
  }

  public void setShopOrderId(String shopOrderId) {
    this.shopOrderId = shopOrderId;
  }

  public void unsetShopOrderId() {
    this.shopOrderId = null;
  }

  /** Returns true if field shopOrderId is set (has been assigned a value) and false otherwise */
  public boolean isSetShopOrderId() {
    return this.shopOrderId != null;
  }

  public void setShopOrderIdIsSet(boolean value) {
    if (!value) {
      this.shopOrderId = null;
    }
  }

  /**
   * 
   * @see PaymentType
   */
  public PaymentType getAppStoreCode() {
    return this.appStoreCode;
  }

  /**
   * 
   * @see PaymentType
   */
  public void setAppStoreCode(PaymentType appStoreCode) {
    this.appStoreCode = appStoreCode;
  }

  public void unsetAppStoreCode() {
    this.appStoreCode = null;
  }

  /** Returns true if field appStoreCode is set (has been assigned a value) and false otherwise */
  public boolean isSetAppStoreCode() {
    return this.appStoreCode != null;
  }

  public void setAppStoreCodeIsSet(boolean value) {
    if (!value) {
      this.appStoreCode = null;
    }
  }

  public int getItemsSize() {
    return (this.items == null) ? 0 : this.items.size();
  }

  public Enumeration getItemsEnumeration() {
    return (this.items == null) ? null : this.items.elements();
  }

  public void addToItems(CoinUseReservationItem elem) {
    if (this.items == null) {
      this.items = new Vector();
    }
    this.items.addElement(elem);
  }

  public Vector getItems() {
    return this.items;
  }

  public void setItems(Vector items) {
    this.items = items;
  }

  public void unsetItems() {
    this.items = null;
  }

  /** Returns true if field items is set (has been assigned a value) and false otherwise */
  public boolean isSetItems() {
    return this.items != null;
  }

  public void setItemsIsSet(boolean value) {
    if (!value) {
      this.items = null;
    }
  }

  public String getCountry() {
    return this.country;
  }

  public void setCountry(String country) {
    this.country = country;
  }

  public void unsetCountry() {
    this.country = null;
  }

  /** Returns true if field country is set (has been assigned a value) and false otherwise */
  public boolean isSetCountry() {
    return this.country != null;
  }

  public void setCountryIsSet(boolean value) {
    if (!value) {
      this.country = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CoinUseReservation)
      return this.equals((CoinUseReservation)that);
    return false;
  }

  public boolean equals(CoinUseReservation that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_channelId = true && this.isSetChannelId();
    boolean that_present_channelId = true && that.isSetChannelId();
    if (this_present_channelId || that_present_channelId) {
      if (!(this_present_channelId && that_present_channelId))
        return false;
      if (!this.channelId.equals(that.channelId))
        return false;
    }

    boolean this_present_shopOrderId = true && this.isSetShopOrderId();
    boolean that_present_shopOrderId = true && that.isSetShopOrderId();
    if (this_present_shopOrderId || that_present_shopOrderId) {
      if (!(this_present_shopOrderId && that_present_shopOrderId))
        return false;
      if (!this.shopOrderId.equals(that.shopOrderId))
        return false;
    }

    boolean this_present_appStoreCode = true && this.isSetAppStoreCode();
    boolean that_present_appStoreCode = true && that.isSetAppStoreCode();
    if (this_present_appStoreCode || that_present_appStoreCode) {
      if (!(this_present_appStoreCode && that_present_appStoreCode))
        return false;
      if (!this.appStoreCode.equals(that.appStoreCode))
        return false;
    }

    boolean this_present_items = true && this.isSetItems();
    boolean that_present_items = true && that.isSetItems();
    if (this_present_items || that_present_items) {
      if (!(this_present_items && that_present_items))
        return false;
      if (!this.items.equals(that.items))
        return false;
    }

    boolean this_present_country = true && this.isSetCountry();
    boolean that_present_country = true && that.isSetCountry();
    if (this_present_country || that_present_country) {
      if (!(this_present_country && that_present_country))
        return false;
      if (!this.country.equals(that.country))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    CoinUseReservation other = (CoinUseReservation)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetChannelId(), other.isSetChannelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelId()) {
      lastComparison = TBaseHelper.compareTo(this.channelId, other.channelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetShopOrderId(), other.isSetShopOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShopOrderId()) {
      lastComparison = TBaseHelper.compareTo(this.shopOrderId, other.shopOrderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetAppStoreCode(), other.isSetAppStoreCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppStoreCode()) {
      lastComparison = TBaseHelper.compareTo(this.appStoreCode, other.appStoreCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetItems(), other.isSetItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItems()) {
      lastComparison = TBaseHelper.compareTo(this.items, other.items);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetCountry(), other.isSetCountry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountry()) {
      lastComparison = TBaseHelper.compareTo(this.country, other.country);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // CHANNEL_ID
          if (field.type == TType.STRING) {
            this.channelId = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SHOP_ORDER_ID
          if (field.type == TType.STRING) {
            this.shopOrderId = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // APP_STORE_CODE
          if (field.type == TType.I32) {
            this.appStoreCode = PaymentType.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // ITEMS
          if (field.type == TType.LIST) {
            {
              TList _list109 = iprot.readListBegin();
              this.items = new Vector(_list109.size);
              for (int _i110 = 0; _i110 < _list109.size; ++_i110)
              {
                CoinUseReservationItem _elem111;
                _elem111 = new CoinUseReservationItem();
                _elem111.read(iprot);
                this.items.addElement(_elem111);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // COUNTRY
          if (field.type == TType.STRING) {
            this.country = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.channelId != null) {
      oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
      oprot.writeString(this.channelId);
      oprot.writeFieldEnd();
    }
    if (this.shopOrderId != null) {
      oprot.writeFieldBegin(SHOP_ORDER_ID_FIELD_DESC);
      oprot.writeString(this.shopOrderId);
      oprot.writeFieldEnd();
    }
    if (this.appStoreCode != null) {
      oprot.writeFieldBegin(APP_STORE_CODE_FIELD_DESC);
      oprot.writeI32(this.appStoreCode.getValue());
      oprot.writeFieldEnd();
    }
    if (this.items != null) {
      oprot.writeFieldBegin(ITEMS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.items.size()));
        for (Enumeration _iter112_enum = this.items.elements(); _iter112_enum.hasMoreElements(); )         {
          CoinUseReservationItem _iter112 = (CoinUseReservationItem)_iter112_enum.nextElement();
          _iter112.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.country != null) {
      oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
      oprot.writeString(this.country);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("CoinUseReservation(");
    boolean first = true;

    sb.append("channelId:");
    if (this.channelId == null) {
      sb.append("null");
    } else {
      sb.append(this.channelId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shopOrderId:");
    if (this.shopOrderId == null) {
      sb.append("null");
    } else {
      sb.append(this.shopOrderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appStoreCode:");
    if (this.appStoreCode == null) {
      sb.append("null");
    } else {
      sb.append(this.appStoreCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("items:");
    if (this.items == null) {
      sb.append("null");
    } else {
      sb.append(this.items);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("country:");
    if (this.country == null) {
      sb.append("null");
    } else {
      sb.append(this.country);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

