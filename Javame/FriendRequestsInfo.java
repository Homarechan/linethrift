/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class FriendRequestsInfo implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("FriendRequestsInfo");

  private static final TField TOTAL_INCOMING_COUNT_FIELD_DESC = new TField("totalIncomingCount", TType.I32, (short)1);
  private static final TField TOTAL_OUTGOING_COUNT_FIELD_DESC = new TField("totalOutgoingCount", TType.I32, (short)2);
  private static final TField RECENT_INCOMINGS_FIELD_DESC = new TField("recentIncomings", TType.LIST, (short)3);
  private static final TField RECENT_OUTGOINGS_FIELD_DESC = new TField("recentOutgoings", TType.LIST, (short)4);
  private static final TField TOTAL_INCOMING_LIMIT_FIELD_DESC = new TField("totalIncomingLimit", TType.I32, (short)5);
  private static final TField TOTAL_OUTGOING_LIMIT_FIELD_DESC = new TField("totalOutgoingLimit", TType.I32, (short)6);

  private int totalIncomingCount;
  private int totalOutgoingCount;
  private Vector recentIncomings;
  private Vector recentOutgoings;
  private int totalIncomingLimit;
  private int totalOutgoingLimit;

  // isset id assignments
  private static final int __TOTALINCOMINGCOUNT_ISSET_ID = 0;
  private static final int __TOTALOUTGOINGCOUNT_ISSET_ID = 1;
  private static final int __TOTALINCOMINGLIMIT_ISSET_ID = 2;
  private static final int __TOTALOUTGOINGLIMIT_ISSET_ID = 3;
  private boolean[] __isset_vector = new boolean[4];

  public FriendRequestsInfo() {
  }

  public FriendRequestsInfo(
    int totalIncomingCount,
    int totalOutgoingCount,
    Vector recentIncomings,
    Vector recentOutgoings,
    int totalIncomingLimit,
    int totalOutgoingLimit)
  {
    this();
    this.totalIncomingCount = totalIncomingCount;
    setTotalIncomingCountIsSet(true);
    this.totalOutgoingCount = totalOutgoingCount;
    setTotalOutgoingCountIsSet(true);
    this.recentIncomings = recentIncomings;
    this.recentOutgoings = recentOutgoings;
    this.totalIncomingLimit = totalIncomingLimit;
    setTotalIncomingLimitIsSet(true);
    this.totalOutgoingLimit = totalOutgoingLimit;
    setTotalOutgoingLimitIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FriendRequestsInfo(FriendRequestsInfo other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    this.totalIncomingCount = other.totalIncomingCount;
    this.totalOutgoingCount = other.totalOutgoingCount;
    if (other.isSetRecentIncomings()) {
      Vector __this__recentIncomings = new Vector();
      for (Enumeration other_enum = other.recentIncomings.elements(); other_enum.hasMoreElements(); ) {
        FriendRequest other_element = (FriendRequest)other_enum.nextElement();
        __this__recentIncomings.addElement(new FriendRequest(other_element));
      }
      this.recentIncomings = __this__recentIncomings;
    }
    if (other.isSetRecentOutgoings()) {
      Vector __this__recentOutgoings = new Vector();
      for (Enumeration other_enum = other.recentOutgoings.elements(); other_enum.hasMoreElements(); ) {
        FriendRequest other_element = (FriendRequest)other_enum.nextElement();
        __this__recentOutgoings.addElement(new FriendRequest(other_element));
      }
      this.recentOutgoings = __this__recentOutgoings;
    }
    this.totalIncomingLimit = other.totalIncomingLimit;
    this.totalOutgoingLimit = other.totalOutgoingLimit;
  }

  public FriendRequestsInfo deepCopy() {
    return new FriendRequestsInfo(this);
  }

  public void clear() {
    setTotalIncomingCountIsSet(false);
    this.totalIncomingCount = 0;
    setTotalOutgoingCountIsSet(false);
    this.totalOutgoingCount = 0;
    this.recentIncomings = null;
    this.recentOutgoings = null;
    setTotalIncomingLimitIsSet(false);
    this.totalIncomingLimit = 0;
    setTotalOutgoingLimitIsSet(false);
    this.totalOutgoingLimit = 0;
  }

  public int getTotalIncomingCount() {
    return this.totalIncomingCount;
  }

  public void setTotalIncomingCount(int totalIncomingCount) {
    this.totalIncomingCount = totalIncomingCount;
    setTotalIncomingCountIsSet(true);
  }

  public void unsetTotalIncomingCount() {
    __isset_vector[__TOTALINCOMINGCOUNT_ISSET_ID] = false;
  }

  /** Returns true if field totalIncomingCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalIncomingCount() {
    return __isset_vector[__TOTALINCOMINGCOUNT_ISSET_ID];
  }

  public void setTotalIncomingCountIsSet(boolean value) {
    __isset_vector[__TOTALINCOMINGCOUNT_ISSET_ID] = value;
  }

  public int getTotalOutgoingCount() {
    return this.totalOutgoingCount;
  }

  public void setTotalOutgoingCount(int totalOutgoingCount) {
    this.totalOutgoingCount = totalOutgoingCount;
    setTotalOutgoingCountIsSet(true);
  }

  public void unsetTotalOutgoingCount() {
    __isset_vector[__TOTALOUTGOINGCOUNT_ISSET_ID] = false;
  }

  /** Returns true if field totalOutgoingCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalOutgoingCount() {
    return __isset_vector[__TOTALOUTGOINGCOUNT_ISSET_ID];
  }

  public void setTotalOutgoingCountIsSet(boolean value) {
    __isset_vector[__TOTALOUTGOINGCOUNT_ISSET_ID] = value;
  }

  public int getRecentIncomingsSize() {
    return (this.recentIncomings == null) ? 0 : this.recentIncomings.size();
  }

  public Enumeration getRecentIncomingsEnumeration() {
    return (this.recentIncomings == null) ? null : this.recentIncomings.elements();
  }

  public void addToRecentIncomings(FriendRequest elem) {
    if (this.recentIncomings == null) {
      this.recentIncomings = new Vector();
    }
    this.recentIncomings.addElement(elem);
  }

  public Vector getRecentIncomings() {
    return this.recentIncomings;
  }

  public void setRecentIncomings(Vector recentIncomings) {
    this.recentIncomings = recentIncomings;
  }

  public void unsetRecentIncomings() {
    this.recentIncomings = null;
  }

  /** Returns true if field recentIncomings is set (has been assigned a value) and false otherwise */
  public boolean isSetRecentIncomings() {
    return this.recentIncomings != null;
  }

  public void setRecentIncomingsIsSet(boolean value) {
    if (!value) {
      this.recentIncomings = null;
    }
  }

  public int getRecentOutgoingsSize() {
    return (this.recentOutgoings == null) ? 0 : this.recentOutgoings.size();
  }

  public Enumeration getRecentOutgoingsEnumeration() {
    return (this.recentOutgoings == null) ? null : this.recentOutgoings.elements();
  }

  public void addToRecentOutgoings(FriendRequest elem) {
    if (this.recentOutgoings == null) {
      this.recentOutgoings = new Vector();
    }
    this.recentOutgoings.addElement(elem);
  }

  public Vector getRecentOutgoings() {
    return this.recentOutgoings;
  }

  public void setRecentOutgoings(Vector recentOutgoings) {
    this.recentOutgoings = recentOutgoings;
  }

  public void unsetRecentOutgoings() {
    this.recentOutgoings = null;
  }

  /** Returns true if field recentOutgoings is set (has been assigned a value) and false otherwise */
  public boolean isSetRecentOutgoings() {
    return this.recentOutgoings != null;
  }

  public void setRecentOutgoingsIsSet(boolean value) {
    if (!value) {
      this.recentOutgoings = null;
    }
  }

  public int getTotalIncomingLimit() {
    return this.totalIncomingLimit;
  }

  public void setTotalIncomingLimit(int totalIncomingLimit) {
    this.totalIncomingLimit = totalIncomingLimit;
    setTotalIncomingLimitIsSet(true);
  }

  public void unsetTotalIncomingLimit() {
    __isset_vector[__TOTALINCOMINGLIMIT_ISSET_ID] = false;
  }

  /** Returns true if field totalIncomingLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalIncomingLimit() {
    return __isset_vector[__TOTALINCOMINGLIMIT_ISSET_ID];
  }

  public void setTotalIncomingLimitIsSet(boolean value) {
    __isset_vector[__TOTALINCOMINGLIMIT_ISSET_ID] = value;
  }

  public int getTotalOutgoingLimit() {
    return this.totalOutgoingLimit;
  }

  public void setTotalOutgoingLimit(int totalOutgoingLimit) {
    this.totalOutgoingLimit = totalOutgoingLimit;
    setTotalOutgoingLimitIsSet(true);
  }

  public void unsetTotalOutgoingLimit() {
    __isset_vector[__TOTALOUTGOINGLIMIT_ISSET_ID] = false;
  }

  /** Returns true if field totalOutgoingLimit is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalOutgoingLimit() {
    return __isset_vector[__TOTALOUTGOINGLIMIT_ISSET_ID];
  }

  public void setTotalOutgoingLimitIsSet(boolean value) {
    __isset_vector[__TOTALOUTGOINGLIMIT_ISSET_ID] = value;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FriendRequestsInfo)
      return this.equals((FriendRequestsInfo)that);
    return false;
  }

  public boolean equals(FriendRequestsInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_totalIncomingCount = true;
    boolean that_present_totalIncomingCount = true;
    if (this_present_totalIncomingCount || that_present_totalIncomingCount) {
      if (!(this_present_totalIncomingCount && that_present_totalIncomingCount))
        return false;
      if (this.totalIncomingCount != that.totalIncomingCount)
        return false;
    }

    boolean this_present_totalOutgoingCount = true;
    boolean that_present_totalOutgoingCount = true;
    if (this_present_totalOutgoingCount || that_present_totalOutgoingCount) {
      if (!(this_present_totalOutgoingCount && that_present_totalOutgoingCount))
        return false;
      if (this.totalOutgoingCount != that.totalOutgoingCount)
        return false;
    }

    boolean this_present_recentIncomings = true && this.isSetRecentIncomings();
    boolean that_present_recentIncomings = true && that.isSetRecentIncomings();
    if (this_present_recentIncomings || that_present_recentIncomings) {
      if (!(this_present_recentIncomings && that_present_recentIncomings))
        return false;
      if (!this.recentIncomings.equals(that.recentIncomings))
        return false;
    }

    boolean this_present_recentOutgoings = true && this.isSetRecentOutgoings();
    boolean that_present_recentOutgoings = true && that.isSetRecentOutgoings();
    if (this_present_recentOutgoings || that_present_recentOutgoings) {
      if (!(this_present_recentOutgoings && that_present_recentOutgoings))
        return false;
      if (!this.recentOutgoings.equals(that.recentOutgoings))
        return false;
    }

    boolean this_present_totalIncomingLimit = true;
    boolean that_present_totalIncomingLimit = true;
    if (this_present_totalIncomingLimit || that_present_totalIncomingLimit) {
      if (!(this_present_totalIncomingLimit && that_present_totalIncomingLimit))
        return false;
      if (this.totalIncomingLimit != that.totalIncomingLimit)
        return false;
    }

    boolean this_present_totalOutgoingLimit = true;
    boolean that_present_totalOutgoingLimit = true;
    if (this_present_totalOutgoingLimit || that_present_totalOutgoingLimit) {
      if (!(this_present_totalOutgoingLimit && that_present_totalOutgoingLimit))
        return false;
      if (this.totalOutgoingLimit != that.totalOutgoingLimit)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    FriendRequestsInfo other = (FriendRequestsInfo)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetTotalIncomingCount(), other.isSetTotalIncomingCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalIncomingCount()) {
      lastComparison = TBaseHelper.compareTo(this.totalIncomingCount, other.totalIncomingCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetTotalOutgoingCount(), other.isSetTotalOutgoingCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalOutgoingCount()) {
      lastComparison = TBaseHelper.compareTo(this.totalOutgoingCount, other.totalOutgoingCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetRecentIncomings(), other.isSetRecentIncomings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecentIncomings()) {
      lastComparison = TBaseHelper.compareTo(this.recentIncomings, other.recentIncomings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetRecentOutgoings(), other.isSetRecentOutgoings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecentOutgoings()) {
      lastComparison = TBaseHelper.compareTo(this.recentOutgoings, other.recentOutgoings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetTotalIncomingLimit(), other.isSetTotalIncomingLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalIncomingLimit()) {
      lastComparison = TBaseHelper.compareTo(this.totalIncomingLimit, other.totalIncomingLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetTotalOutgoingLimit(), other.isSetTotalOutgoingLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalOutgoingLimit()) {
      lastComparison = TBaseHelper.compareTo(this.totalOutgoingLimit, other.totalOutgoingLimit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // TOTAL_INCOMING_COUNT
          if (field.type == TType.I32) {
            this.totalIncomingCount = iprot.readI32();
            setTotalIncomingCountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // TOTAL_OUTGOING_COUNT
          if (field.type == TType.I32) {
            this.totalOutgoingCount = iprot.readI32();
            setTotalOutgoingCountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // RECENT_INCOMINGS
          if (field.type == TType.LIST) {
            {
              TList _list129 = iprot.readListBegin();
              this.recentIncomings = new Vector(_list129.size);
              for (int _i130 = 0; _i130 < _list129.size; ++_i130)
              {
                FriendRequest _elem131;
                _elem131 = new FriendRequest();
                _elem131.read(iprot);
                this.recentIncomings.addElement(_elem131);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // RECENT_OUTGOINGS
          if (field.type == TType.LIST) {
            {
              TList _list132 = iprot.readListBegin();
              this.recentOutgoings = new Vector(_list132.size);
              for (int _i133 = 0; _i133 < _list132.size; ++_i133)
              {
                FriendRequest _elem134;
                _elem134 = new FriendRequest();
                _elem134.read(iprot);
                this.recentOutgoings.addElement(_elem134);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // TOTAL_INCOMING_LIMIT
          if (field.type == TType.I32) {
            this.totalIncomingLimit = iprot.readI32();
            setTotalIncomingLimitIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // TOTAL_OUTGOING_LIMIT
          if (field.type == TType.I32) {
            this.totalOutgoingLimit = iprot.readI32();
            setTotalOutgoingLimitIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(TOTAL_INCOMING_COUNT_FIELD_DESC);
    oprot.writeI32(this.totalIncomingCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TOTAL_OUTGOING_COUNT_FIELD_DESC);
    oprot.writeI32(this.totalOutgoingCount);
    oprot.writeFieldEnd();
    if (this.recentIncomings != null) {
      oprot.writeFieldBegin(RECENT_INCOMINGS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.recentIncomings.size()));
        for (Enumeration _iter135_enum = this.recentIncomings.elements(); _iter135_enum.hasMoreElements(); )         {
          FriendRequest _iter135 = (FriendRequest)_iter135_enum.nextElement();
          _iter135.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.recentOutgoings != null) {
      oprot.writeFieldBegin(RECENT_OUTGOINGS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.recentOutgoings.size()));
        for (Enumeration _iter136_enum = this.recentOutgoings.elements(); _iter136_enum.hasMoreElements(); )         {
          FriendRequest _iter136 = (FriendRequest)_iter136_enum.nextElement();
          _iter136.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(TOTAL_INCOMING_LIMIT_FIELD_DESC);
    oprot.writeI32(this.totalIncomingLimit);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(TOTAL_OUTGOING_LIMIT_FIELD_DESC);
    oprot.writeI32(this.totalOutgoingLimit);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("FriendRequestsInfo(");
    boolean first = true;

    sb.append("totalIncomingCount:");
    sb.append(this.totalIncomingCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalOutgoingCount:");
    sb.append(this.totalOutgoingCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("recentIncomings:");
    if (this.recentIncomings == null) {
      sb.append("null");
    } else {
      sb.append(this.recentIncomings);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recentOutgoings:");
    if (this.recentOutgoings == null) {
      sb.append("null");
    } else {
      sb.append(this.recentOutgoings);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalIncomingLimit:");
    sb.append(this.totalIncomingLimit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalOutgoingLimit:");
    sb.append(this.totalOutgoingLimit);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

