/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class ShopService {

  public interface Iface {

    public void buyCoinProduct(PaymentReservation paymentReservation) throws TalkException, TException;

    public void buyFreeProduct(String receiverMid, String productId, int messageTemplate, String language, String country, long packageId) throws TalkException, TException;

    public void buyMustbuyProduct(String receiverMid, String productId, int messageTemplate, String language, String country, long packageId, String serialNumber) throws TalkException, TException;

    public void checkCanReceivePresent(String recipientMid, long packageId, String language, String country) throws TalkException, TException;

    public ProductList getActivePurchases(long start, int size, String language, String country) throws TalkException, TException;

    public ProductSimpleList getActivePurchaseVersions(long start, int size, String language, String country) throws TalkException, TException;

    public Vector getCoinProducts(PaymentType appStoreCode, String country, String language) throws TalkException, TException;

    public Vector getCoinProductsByPgCode(PaymentType appStoreCode, PaymentPgType pgCode, String country, String language) throws TalkException, TException;

    public CoinHistoryResult getCoinPurchaseHistory(CoinHistoryCondition request) throws TalkException, TException;

    public CoinHistoryResult getCoinUseAndRefundHistory(CoinHistoryCondition request) throws TalkException, TException;

    public ProductList getDownloads(long start, int size, String language, String country) throws TalkException, TException;

    public ProductList getEventPackages(long start, int size, String language, String country) throws TalkException, TException;

    public ProductList getNewlyReleasedPackages(long start, int size, String language, String country) throws TalkException, TException;

    public ProductList getPopularPackages(long start, int size, String language, String country) throws TalkException, TException;

    public ProductList getPresentsReceived(long start, int size, String language, String country) throws TalkException, TException;

    public ProductList getPresentsSent(long start, int size, String language, String country) throws TalkException, TException;

    public Product getProduct(long packageID, String language, String country) throws TalkException, TException;

    public ProductList getProductList(Vector productIdList, String language, String country) throws TalkException, TException;

    public ProductList getProductListWithCarrier(Vector productIdList, String language, String country, String carrierCode) throws TalkException, TException;

    public Product getProductWithCarrier(long packageID, String language, String country, String carrierCode) throws TalkException, TException;

    public ProductList getPurchaseHistory(long start, int size, String language, String country) throws TalkException, TException;

    public Coin getTotalBalance(PaymentType appStoreCode) throws TalkException, TException;

    public long notifyDownloaded(long packageId, String language) throws TalkException, TException;

    public PaymentReservationResult reserveCoinPurchase(CoinPurchaseReservation request) throws TalkException, TException;

    public PaymentReservationResult reservePayment(PaymentReservation paymentReservation) throws TalkException, TException;

  }

  public static class Client implements TServiceClient, Iface {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public void buyCoinProduct(PaymentReservation paymentReservation) throws TalkException, TException
    {
      send_buyCoinProduct(paymentReservation);
      recv_buyCoinProduct();
    }

    public void send_buyCoinProduct(PaymentReservation paymentReservation) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("buyCoinProduct", TMessageType.CALL, ++seqid_));
      buyCoinProduct_args args = new buyCoinProduct_args();
      args.setPaymentReservation(paymentReservation);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_buyCoinProduct() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "buyCoinProduct failed: out of sequence response");
      }
      buyCoinProduct_result result = new buyCoinProduct_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void buyFreeProduct(String receiverMid, String productId, int messageTemplate, String language, String country, long packageId) throws TalkException, TException
    {
      send_buyFreeProduct(receiverMid, productId, messageTemplate, language, country, packageId);
      recv_buyFreeProduct();
    }

    public void send_buyFreeProduct(String receiverMid, String productId, int messageTemplate, String language, String country, long packageId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("buyFreeProduct", TMessageType.CALL, ++seqid_));
      buyFreeProduct_args args = new buyFreeProduct_args();
      args.setReceiverMid(receiverMid);
      args.setProductId(productId);
      args.setMessageTemplate(messageTemplate);
      args.setLanguage(language);
      args.setCountry(country);
      args.setPackageId(packageId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_buyFreeProduct() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "buyFreeProduct failed: out of sequence response");
      }
      buyFreeProduct_result result = new buyFreeProduct_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void buyMustbuyProduct(String receiverMid, String productId, int messageTemplate, String language, String country, long packageId, String serialNumber) throws TalkException, TException
    {
      send_buyMustbuyProduct(receiverMid, productId, messageTemplate, language, country, packageId, serialNumber);
      recv_buyMustbuyProduct();
    }

    public void send_buyMustbuyProduct(String receiverMid, String productId, int messageTemplate, String language, String country, long packageId, String serialNumber) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("buyMustbuyProduct", TMessageType.CALL, ++seqid_));
      buyMustbuyProduct_args args = new buyMustbuyProduct_args();
      args.setReceiverMid(receiverMid);
      args.setProductId(productId);
      args.setMessageTemplate(messageTemplate);
      args.setLanguage(language);
      args.setCountry(country);
      args.setPackageId(packageId);
      args.setSerialNumber(serialNumber);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_buyMustbuyProduct() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "buyMustbuyProduct failed: out of sequence response");
      }
      buyMustbuyProduct_result result = new buyMustbuyProduct_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void checkCanReceivePresent(String recipientMid, long packageId, String language, String country) throws TalkException, TException
    {
      send_checkCanReceivePresent(recipientMid, packageId, language, country);
      recv_checkCanReceivePresent();
    }

    public void send_checkCanReceivePresent(String recipientMid, long packageId, String language, String country) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("checkCanReceivePresent", TMessageType.CALL, ++seqid_));
      checkCanReceivePresent_args args = new checkCanReceivePresent_args();
      args.setRecipientMid(recipientMid);
      args.setPackageId(packageId);
      args.setLanguage(language);
      args.setCountry(country);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_checkCanReceivePresent() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "checkCanReceivePresent failed: out of sequence response");
      }
      checkCanReceivePresent_result result = new checkCanReceivePresent_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public ProductList getActivePurchases(long start, int size, String language, String country) throws TalkException, TException
    {
      send_getActivePurchases(start, size, language, country);
      return recv_getActivePurchases();
    }

    public void send_getActivePurchases(long start, int size, String language, String country) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getActivePurchases", TMessageType.CALL, ++seqid_));
      getActivePurchases_args args = new getActivePurchases_args();
      args.setStart(start);
      args.setSize(size);
      args.setLanguage(language);
      args.setCountry(country);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ProductList recv_getActivePurchases() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getActivePurchases failed: out of sequence response");
      }
      getActivePurchases_result result = new getActivePurchases_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getActivePurchases failed: unknown result");
    }

    public ProductSimpleList getActivePurchaseVersions(long start, int size, String language, String country) throws TalkException, TException
    {
      send_getActivePurchaseVersions(start, size, language, country);
      return recv_getActivePurchaseVersions();
    }

    public void send_getActivePurchaseVersions(long start, int size, String language, String country) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getActivePurchaseVersions", TMessageType.CALL, ++seqid_));
      getActivePurchaseVersions_args args = new getActivePurchaseVersions_args();
      args.setStart(start);
      args.setSize(size);
      args.setLanguage(language);
      args.setCountry(country);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ProductSimpleList recv_getActivePurchaseVersions() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getActivePurchaseVersions failed: out of sequence response");
      }
      getActivePurchaseVersions_result result = new getActivePurchaseVersions_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getActivePurchaseVersions failed: unknown result");
    }

    public Vector getCoinProducts(PaymentType appStoreCode, String country, String language) throws TalkException, TException
    {
      send_getCoinProducts(appStoreCode, country, language);
      return recv_getCoinProducts();
    }

    public void send_getCoinProducts(PaymentType appStoreCode, String country, String language) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getCoinProducts", TMessageType.CALL, ++seqid_));
      getCoinProducts_args args = new getCoinProducts_args();
      args.setAppStoreCode(appStoreCode);
      args.setCountry(country);
      args.setLanguage(language);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getCoinProducts() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getCoinProducts failed: out of sequence response");
      }
      getCoinProducts_result result = new getCoinProducts_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getCoinProducts failed: unknown result");
    }

    public Vector getCoinProductsByPgCode(PaymentType appStoreCode, PaymentPgType pgCode, String country, String language) throws TalkException, TException
    {
      send_getCoinProductsByPgCode(appStoreCode, pgCode, country, language);
      return recv_getCoinProductsByPgCode();
    }

    public void send_getCoinProductsByPgCode(PaymentType appStoreCode, PaymentPgType pgCode, String country, String language) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getCoinProductsByPgCode", TMessageType.CALL, ++seqid_));
      getCoinProductsByPgCode_args args = new getCoinProductsByPgCode_args();
      args.setAppStoreCode(appStoreCode);
      args.setPgCode(pgCode);
      args.setCountry(country);
      args.setLanguage(language);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getCoinProductsByPgCode() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getCoinProductsByPgCode failed: out of sequence response");
      }
      getCoinProductsByPgCode_result result = new getCoinProductsByPgCode_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getCoinProductsByPgCode failed: unknown result");
    }

    public CoinHistoryResult getCoinPurchaseHistory(CoinHistoryCondition request) throws TalkException, TException
    {
      send_getCoinPurchaseHistory(request);
      return recv_getCoinPurchaseHistory();
    }

    public void send_getCoinPurchaseHistory(CoinHistoryCondition request) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getCoinPurchaseHistory", TMessageType.CALL, ++seqid_));
      getCoinPurchaseHistory_args args = new getCoinPurchaseHistory_args();
      args.setRequest(request);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public CoinHistoryResult recv_getCoinPurchaseHistory() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getCoinPurchaseHistory failed: out of sequence response");
      }
      getCoinPurchaseHistory_result result = new getCoinPurchaseHistory_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getCoinPurchaseHistory failed: unknown result");
    }

    public CoinHistoryResult getCoinUseAndRefundHistory(CoinHistoryCondition request) throws TalkException, TException
    {
      send_getCoinUseAndRefundHistory(request);
      return recv_getCoinUseAndRefundHistory();
    }

    public void send_getCoinUseAndRefundHistory(CoinHistoryCondition request) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getCoinUseAndRefundHistory", TMessageType.CALL, ++seqid_));
      getCoinUseAndRefundHistory_args args = new getCoinUseAndRefundHistory_args();
      args.setRequest(request);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public CoinHistoryResult recv_getCoinUseAndRefundHistory() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getCoinUseAndRefundHistory failed: out of sequence response");
      }
      getCoinUseAndRefundHistory_result result = new getCoinUseAndRefundHistory_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getCoinUseAndRefundHistory failed: unknown result");
    }

    public ProductList getDownloads(long start, int size, String language, String country) throws TalkException, TException
    {
      send_getDownloads(start, size, language, country);
      return recv_getDownloads();
    }

    public void send_getDownloads(long start, int size, String language, String country) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getDownloads", TMessageType.CALL, ++seqid_));
      getDownloads_args args = new getDownloads_args();
      args.setStart(start);
      args.setSize(size);
      args.setLanguage(language);
      args.setCountry(country);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ProductList recv_getDownloads() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getDownloads failed: out of sequence response");
      }
      getDownloads_result result = new getDownloads_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getDownloads failed: unknown result");
    }

    public ProductList getEventPackages(long start, int size, String language, String country) throws TalkException, TException
    {
      send_getEventPackages(start, size, language, country);
      return recv_getEventPackages();
    }

    public void send_getEventPackages(long start, int size, String language, String country) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getEventPackages", TMessageType.CALL, ++seqid_));
      getEventPackages_args args = new getEventPackages_args();
      args.setStart(start);
      args.setSize(size);
      args.setLanguage(language);
      args.setCountry(country);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ProductList recv_getEventPackages() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getEventPackages failed: out of sequence response");
      }
      getEventPackages_result result = new getEventPackages_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getEventPackages failed: unknown result");
    }

    public ProductList getNewlyReleasedPackages(long start, int size, String language, String country) throws TalkException, TException
    {
      send_getNewlyReleasedPackages(start, size, language, country);
      return recv_getNewlyReleasedPackages();
    }

    public void send_getNewlyReleasedPackages(long start, int size, String language, String country) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getNewlyReleasedPackages", TMessageType.CALL, ++seqid_));
      getNewlyReleasedPackages_args args = new getNewlyReleasedPackages_args();
      args.setStart(start);
      args.setSize(size);
      args.setLanguage(language);
      args.setCountry(country);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ProductList recv_getNewlyReleasedPackages() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getNewlyReleasedPackages failed: out of sequence response");
      }
      getNewlyReleasedPackages_result result = new getNewlyReleasedPackages_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getNewlyReleasedPackages failed: unknown result");
    }

    public ProductList getPopularPackages(long start, int size, String language, String country) throws TalkException, TException
    {
      send_getPopularPackages(start, size, language, country);
      return recv_getPopularPackages();
    }

    public void send_getPopularPackages(long start, int size, String language, String country) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getPopularPackages", TMessageType.CALL, ++seqid_));
      getPopularPackages_args args = new getPopularPackages_args();
      args.setStart(start);
      args.setSize(size);
      args.setLanguage(language);
      args.setCountry(country);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ProductList recv_getPopularPackages() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getPopularPackages failed: out of sequence response");
      }
      getPopularPackages_result result = new getPopularPackages_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getPopularPackages failed: unknown result");
    }

    public ProductList getPresentsReceived(long start, int size, String language, String country) throws TalkException, TException
    {
      send_getPresentsReceived(start, size, language, country);
      return recv_getPresentsReceived();
    }

    public void send_getPresentsReceived(long start, int size, String language, String country) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getPresentsReceived", TMessageType.CALL, ++seqid_));
      getPresentsReceived_args args = new getPresentsReceived_args();
      args.setStart(start);
      args.setSize(size);
      args.setLanguage(language);
      args.setCountry(country);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ProductList recv_getPresentsReceived() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getPresentsReceived failed: out of sequence response");
      }
      getPresentsReceived_result result = new getPresentsReceived_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getPresentsReceived failed: unknown result");
    }

    public ProductList getPresentsSent(long start, int size, String language, String country) throws TalkException, TException
    {
      send_getPresentsSent(start, size, language, country);
      return recv_getPresentsSent();
    }

    public void send_getPresentsSent(long start, int size, String language, String country) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getPresentsSent", TMessageType.CALL, ++seqid_));
      getPresentsSent_args args = new getPresentsSent_args();
      args.setStart(start);
      args.setSize(size);
      args.setLanguage(language);
      args.setCountry(country);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ProductList recv_getPresentsSent() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getPresentsSent failed: out of sequence response");
      }
      getPresentsSent_result result = new getPresentsSent_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getPresentsSent failed: unknown result");
    }

    public Product getProduct(long packageID, String language, String country) throws TalkException, TException
    {
      send_getProduct(packageID, language, country);
      return recv_getProduct();
    }

    public void send_getProduct(long packageID, String language, String country) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getProduct", TMessageType.CALL, ++seqid_));
      getProduct_args args = new getProduct_args();
      args.setPackageID(packageID);
      args.setLanguage(language);
      args.setCountry(country);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Product recv_getProduct() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getProduct failed: out of sequence response");
      }
      getProduct_result result = new getProduct_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getProduct failed: unknown result");
    }

    public ProductList getProductList(Vector productIdList, String language, String country) throws TalkException, TException
    {
      send_getProductList(productIdList, language, country);
      return recv_getProductList();
    }

    public void send_getProductList(Vector productIdList, String language, String country) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getProductList", TMessageType.CALL, ++seqid_));
      getProductList_args args = new getProductList_args();
      args.setProductIdList(productIdList);
      args.setLanguage(language);
      args.setCountry(country);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ProductList recv_getProductList() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getProductList failed: out of sequence response");
      }
      getProductList_result result = new getProductList_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getProductList failed: unknown result");
    }

    public ProductList getProductListWithCarrier(Vector productIdList, String language, String country, String carrierCode) throws TalkException, TException
    {
      send_getProductListWithCarrier(productIdList, language, country, carrierCode);
      return recv_getProductListWithCarrier();
    }

    public void send_getProductListWithCarrier(Vector productIdList, String language, String country, String carrierCode) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getProductListWithCarrier", TMessageType.CALL, ++seqid_));
      getProductListWithCarrier_args args = new getProductListWithCarrier_args();
      args.setProductIdList(productIdList);
      args.setLanguage(language);
      args.setCountry(country);
      args.setCarrierCode(carrierCode);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ProductList recv_getProductListWithCarrier() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getProductListWithCarrier failed: out of sequence response");
      }
      getProductListWithCarrier_result result = new getProductListWithCarrier_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getProductListWithCarrier failed: unknown result");
    }

    public Product getProductWithCarrier(long packageID, String language, String country, String carrierCode) throws TalkException, TException
    {
      send_getProductWithCarrier(packageID, language, country, carrierCode);
      return recv_getProductWithCarrier();
    }

    public void send_getProductWithCarrier(long packageID, String language, String country, String carrierCode) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getProductWithCarrier", TMessageType.CALL, ++seqid_));
      getProductWithCarrier_args args = new getProductWithCarrier_args();
      args.setPackageID(packageID);
      args.setLanguage(language);
      args.setCountry(country);
      args.setCarrierCode(carrierCode);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Product recv_getProductWithCarrier() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getProductWithCarrier failed: out of sequence response");
      }
      getProductWithCarrier_result result = new getProductWithCarrier_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getProductWithCarrier failed: unknown result");
    }

    public ProductList getPurchaseHistory(long start, int size, String language, String country) throws TalkException, TException
    {
      send_getPurchaseHistory(start, size, language, country);
      return recv_getPurchaseHistory();
    }

    public void send_getPurchaseHistory(long start, int size, String language, String country) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getPurchaseHistory", TMessageType.CALL, ++seqid_));
      getPurchaseHistory_args args = new getPurchaseHistory_args();
      args.setStart(start);
      args.setSize(size);
      args.setLanguage(language);
      args.setCountry(country);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ProductList recv_getPurchaseHistory() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getPurchaseHistory failed: out of sequence response");
      }
      getPurchaseHistory_result result = new getPurchaseHistory_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getPurchaseHistory failed: unknown result");
    }

    public Coin getTotalBalance(PaymentType appStoreCode) throws TalkException, TException
    {
      send_getTotalBalance(appStoreCode);
      return recv_getTotalBalance();
    }

    public void send_getTotalBalance(PaymentType appStoreCode) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getTotalBalance", TMessageType.CALL, ++seqid_));
      getTotalBalance_args args = new getTotalBalance_args();
      args.setAppStoreCode(appStoreCode);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Coin recv_getTotalBalance() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getTotalBalance failed: out of sequence response");
      }
      getTotalBalance_result result = new getTotalBalance_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getTotalBalance failed: unknown result");
    }

    public long notifyDownloaded(long packageId, String language) throws TalkException, TException
    {
      send_notifyDownloaded(packageId, language);
      return recv_notifyDownloaded();
    }

    public void send_notifyDownloaded(long packageId, String language) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("notifyDownloaded", TMessageType.CALL, ++seqid_));
      notifyDownloaded_args args = new notifyDownloaded_args();
      args.setPackageId(packageId);
      args.setLanguage(language);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public long recv_notifyDownloaded() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "notifyDownloaded failed: out of sequence response");
      }
      notifyDownloaded_result result = new notifyDownloaded_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "notifyDownloaded failed: unknown result");
    }

    public PaymentReservationResult reserveCoinPurchase(CoinPurchaseReservation request) throws TalkException, TException
    {
      send_reserveCoinPurchase(request);
      return recv_reserveCoinPurchase();
    }

    public void send_reserveCoinPurchase(CoinPurchaseReservation request) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("reserveCoinPurchase", TMessageType.CALL, ++seqid_));
      reserveCoinPurchase_args args = new reserveCoinPurchase_args();
      args.setRequest(request);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public PaymentReservationResult recv_reserveCoinPurchase() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "reserveCoinPurchase failed: out of sequence response");
      }
      reserveCoinPurchase_result result = new reserveCoinPurchase_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "reserveCoinPurchase failed: unknown result");
    }

    public PaymentReservationResult reservePayment(PaymentReservation paymentReservation) throws TalkException, TException
    {
      send_reservePayment(paymentReservation);
      return recv_reservePayment();
    }

    public void send_reservePayment(PaymentReservation paymentReservation) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("reservePayment", TMessageType.CALL, ++seqid_));
      reservePayment_args args = new reservePayment_args();
      args.setPaymentReservation(paymentReservation);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public PaymentReservationResult recv_reservePayment() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "reservePayment failed: out of sequence response");
      }
      reservePayment_result result = new reservePayment_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "reservePayment failed: unknown result");
    }

  }
  public static class Processor implements TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("buyCoinProduct", new buyCoinProduct());
      processMap_.put("buyFreeProduct", new buyFreeProduct());
      processMap_.put("buyMustbuyProduct", new buyMustbuyProduct());
      processMap_.put("checkCanReceivePresent", new checkCanReceivePresent());
      processMap_.put("getActivePurchases", new getActivePurchases());
      processMap_.put("getActivePurchaseVersions", new getActivePurchaseVersions());
      processMap_.put("getCoinProducts", new getCoinProducts());
      processMap_.put("getCoinProductsByPgCode", new getCoinProductsByPgCode());
      processMap_.put("getCoinPurchaseHistory", new getCoinPurchaseHistory());
      processMap_.put("getCoinUseAndRefundHistory", new getCoinUseAndRefundHistory());
      processMap_.put("getDownloads", new getDownloads());
      processMap_.put("getEventPackages", new getEventPackages());
      processMap_.put("getNewlyReleasedPackages", new getNewlyReleasedPackages());
      processMap_.put("getPopularPackages", new getPopularPackages());
      processMap_.put("getPresentsReceived", new getPresentsReceived());
      processMap_.put("getPresentsSent", new getPresentsSent());
      processMap_.put("getProduct", new getProduct());
      processMap_.put("getProductList", new getProductList());
      processMap_.put("getProductListWithCarrier", new getProductListWithCarrier());
      processMap_.put("getProductWithCarrier", new getProductWithCarrier());
      processMap_.put("getPurchaseHistory", new getPurchaseHistory());
      processMap_.put("getTotalBalance", new getTotalBalance());
      processMap_.put("notifyDownloaded", new notifyDownloaded());
      processMap_.put("reserveCoinPurchase", new reserveCoinPurchase());
      processMap_.put("reservePayment", new reservePayment());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final Hashtable processMap_ = new Hashtable();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = (ProcessFunction)processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class buyCoinProduct implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        buyCoinProduct_args args = new buyCoinProduct_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("buyCoinProduct", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        buyCoinProduct_result result = new buyCoinProduct_result();
        try {
          iface_.buyCoinProduct(args.paymentReservation);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing buyCoinProduct");
          oprot.writeMessageBegin(new TMessage("buyCoinProduct", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("buyCoinProduct", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class buyFreeProduct implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        buyFreeProduct_args args = new buyFreeProduct_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("buyFreeProduct", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        buyFreeProduct_result result = new buyFreeProduct_result();
        try {
          iface_.buyFreeProduct(args.receiverMid, args.productId, args.messageTemplate, args.language, args.country, args.packageId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing buyFreeProduct");
          oprot.writeMessageBegin(new TMessage("buyFreeProduct", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("buyFreeProduct", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class buyMustbuyProduct implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        buyMustbuyProduct_args args = new buyMustbuyProduct_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("buyMustbuyProduct", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        buyMustbuyProduct_result result = new buyMustbuyProduct_result();
        try {
          iface_.buyMustbuyProduct(args.receiverMid, args.productId, args.messageTemplate, args.language, args.country, args.packageId, args.serialNumber);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing buyMustbuyProduct");
          oprot.writeMessageBegin(new TMessage("buyMustbuyProduct", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("buyMustbuyProduct", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class checkCanReceivePresent implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        checkCanReceivePresent_args args = new checkCanReceivePresent_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("checkCanReceivePresent", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        checkCanReceivePresent_result result = new checkCanReceivePresent_result();
        try {
          iface_.checkCanReceivePresent(args.recipientMid, args.packageId, args.language, args.country);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing checkCanReceivePresent");
          oprot.writeMessageBegin(new TMessage("checkCanReceivePresent", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("checkCanReceivePresent", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getActivePurchases implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getActivePurchases_args args = new getActivePurchases_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getActivePurchases", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getActivePurchases_result result = new getActivePurchases_result();
        try {
          result.success = iface_.getActivePurchases(args.start, args.size, args.language, args.country);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getActivePurchases");
          oprot.writeMessageBegin(new TMessage("getActivePurchases", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getActivePurchases", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getActivePurchaseVersions implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getActivePurchaseVersions_args args = new getActivePurchaseVersions_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getActivePurchaseVersions", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getActivePurchaseVersions_result result = new getActivePurchaseVersions_result();
        try {
          result.success = iface_.getActivePurchaseVersions(args.start, args.size, args.language, args.country);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getActivePurchaseVersions");
          oprot.writeMessageBegin(new TMessage("getActivePurchaseVersions", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getActivePurchaseVersions", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getCoinProducts implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getCoinProducts_args args = new getCoinProducts_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getCoinProducts", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getCoinProducts_result result = new getCoinProducts_result();
        try {
          result.success = iface_.getCoinProducts(args.appStoreCode, args.country, args.language);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getCoinProducts");
          oprot.writeMessageBegin(new TMessage("getCoinProducts", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getCoinProducts", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getCoinProductsByPgCode implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getCoinProductsByPgCode_args args = new getCoinProductsByPgCode_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getCoinProductsByPgCode", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getCoinProductsByPgCode_result result = new getCoinProductsByPgCode_result();
        try {
          result.success = iface_.getCoinProductsByPgCode(args.appStoreCode, args.pgCode, args.country, args.language);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getCoinProductsByPgCode");
          oprot.writeMessageBegin(new TMessage("getCoinProductsByPgCode", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getCoinProductsByPgCode", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getCoinPurchaseHistory implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getCoinPurchaseHistory_args args = new getCoinPurchaseHistory_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getCoinPurchaseHistory", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getCoinPurchaseHistory_result result = new getCoinPurchaseHistory_result();
        try {
          result.success = iface_.getCoinPurchaseHistory(args.request);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getCoinPurchaseHistory");
          oprot.writeMessageBegin(new TMessage("getCoinPurchaseHistory", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getCoinPurchaseHistory", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getCoinUseAndRefundHistory implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getCoinUseAndRefundHistory_args args = new getCoinUseAndRefundHistory_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getCoinUseAndRefundHistory", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getCoinUseAndRefundHistory_result result = new getCoinUseAndRefundHistory_result();
        try {
          result.success = iface_.getCoinUseAndRefundHistory(args.request);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getCoinUseAndRefundHistory");
          oprot.writeMessageBegin(new TMessage("getCoinUseAndRefundHistory", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getCoinUseAndRefundHistory", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getDownloads implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getDownloads_args args = new getDownloads_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getDownloads", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getDownloads_result result = new getDownloads_result();
        try {
          result.success = iface_.getDownloads(args.start, args.size, args.language, args.country);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getDownloads");
          oprot.writeMessageBegin(new TMessage("getDownloads", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getDownloads", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getEventPackages implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getEventPackages_args args = new getEventPackages_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getEventPackages", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getEventPackages_result result = new getEventPackages_result();
        try {
          result.success = iface_.getEventPackages(args.start, args.size, args.language, args.country);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getEventPackages");
          oprot.writeMessageBegin(new TMessage("getEventPackages", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getEventPackages", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getNewlyReleasedPackages implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getNewlyReleasedPackages_args args = new getNewlyReleasedPackages_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getNewlyReleasedPackages", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getNewlyReleasedPackages_result result = new getNewlyReleasedPackages_result();
        try {
          result.success = iface_.getNewlyReleasedPackages(args.start, args.size, args.language, args.country);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getNewlyReleasedPackages");
          oprot.writeMessageBegin(new TMessage("getNewlyReleasedPackages", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getNewlyReleasedPackages", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getPopularPackages implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getPopularPackages_args args = new getPopularPackages_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getPopularPackages", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getPopularPackages_result result = new getPopularPackages_result();
        try {
          result.success = iface_.getPopularPackages(args.start, args.size, args.language, args.country);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getPopularPackages");
          oprot.writeMessageBegin(new TMessage("getPopularPackages", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getPopularPackages", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getPresentsReceived implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getPresentsReceived_args args = new getPresentsReceived_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getPresentsReceived", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getPresentsReceived_result result = new getPresentsReceived_result();
        try {
          result.success = iface_.getPresentsReceived(args.start, args.size, args.language, args.country);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getPresentsReceived");
          oprot.writeMessageBegin(new TMessage("getPresentsReceived", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getPresentsReceived", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getPresentsSent implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getPresentsSent_args args = new getPresentsSent_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getPresentsSent", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getPresentsSent_result result = new getPresentsSent_result();
        try {
          result.success = iface_.getPresentsSent(args.start, args.size, args.language, args.country);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getPresentsSent");
          oprot.writeMessageBegin(new TMessage("getPresentsSent", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getPresentsSent", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getProduct implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getProduct_args args = new getProduct_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getProduct", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getProduct_result result = new getProduct_result();
        try {
          result.success = iface_.getProduct(args.packageID, args.language, args.country);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getProduct");
          oprot.writeMessageBegin(new TMessage("getProduct", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getProduct", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getProductList implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getProductList_args args = new getProductList_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getProductList", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getProductList_result result = new getProductList_result();
        try {
          result.success = iface_.getProductList(args.productIdList, args.language, args.country);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getProductList");
          oprot.writeMessageBegin(new TMessage("getProductList", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getProductList", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getProductListWithCarrier implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getProductListWithCarrier_args args = new getProductListWithCarrier_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getProductListWithCarrier", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getProductListWithCarrier_result result = new getProductListWithCarrier_result();
        try {
          result.success = iface_.getProductListWithCarrier(args.productIdList, args.language, args.country, args.carrierCode);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getProductListWithCarrier");
          oprot.writeMessageBegin(new TMessage("getProductListWithCarrier", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getProductListWithCarrier", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getProductWithCarrier implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getProductWithCarrier_args args = new getProductWithCarrier_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getProductWithCarrier", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getProductWithCarrier_result result = new getProductWithCarrier_result();
        try {
          result.success = iface_.getProductWithCarrier(args.packageID, args.language, args.country, args.carrierCode);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getProductWithCarrier");
          oprot.writeMessageBegin(new TMessage("getProductWithCarrier", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getProductWithCarrier", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getPurchaseHistory implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getPurchaseHistory_args args = new getPurchaseHistory_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getPurchaseHistory", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getPurchaseHistory_result result = new getPurchaseHistory_result();
        try {
          result.success = iface_.getPurchaseHistory(args.start, args.size, args.language, args.country);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getPurchaseHistory");
          oprot.writeMessageBegin(new TMessage("getPurchaseHistory", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getPurchaseHistory", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getTotalBalance implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getTotalBalance_args args = new getTotalBalance_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getTotalBalance", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getTotalBalance_result result = new getTotalBalance_result();
        try {
          result.success = iface_.getTotalBalance(args.appStoreCode);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getTotalBalance");
          oprot.writeMessageBegin(new TMessage("getTotalBalance", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getTotalBalance", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class notifyDownloaded implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        notifyDownloaded_args args = new notifyDownloaded_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("notifyDownloaded", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        notifyDownloaded_result result = new notifyDownloaded_result();
        try {
          result.success = iface_.notifyDownloaded(args.packageId, args.language);
          result.setSuccessIsSet(true);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing notifyDownloaded");
          oprot.writeMessageBegin(new TMessage("notifyDownloaded", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("notifyDownloaded", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class reserveCoinPurchase implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        reserveCoinPurchase_args args = new reserveCoinPurchase_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("reserveCoinPurchase", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        reserveCoinPurchase_result result = new reserveCoinPurchase_result();
        try {
          result.success = iface_.reserveCoinPurchase(args.request);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing reserveCoinPurchase");
          oprot.writeMessageBegin(new TMessage("reserveCoinPurchase", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("reserveCoinPurchase", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class reservePayment implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        reservePayment_args args = new reservePayment_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("reservePayment", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        reservePayment_result result = new reservePayment_result();
        try {
          result.success = iface_.reservePayment(args.paymentReservation);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing reservePayment");
          oprot.writeMessageBegin(new TMessage("reservePayment", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("reservePayment", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class buyCoinProduct_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("buyCoinProduct_args");

    private static final TField PAYMENT_RESERVATION_FIELD_DESC = new TField("paymentReservation", TType.STRUCT, (short)2);

    private PaymentReservation paymentReservation;

    // isset id assignments

    public buyCoinProduct_args() {
    }

    public buyCoinProduct_args(
      PaymentReservation paymentReservation)
    {
      this();
      this.paymentReservation = paymentReservation;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public buyCoinProduct_args(buyCoinProduct_args other) {
      if (other.isSetPaymentReservation()) {
        this.paymentReservation = new PaymentReservation(other.paymentReservation);
      }
    }

    public buyCoinProduct_args deepCopy() {
      return new buyCoinProduct_args(this);
    }

    public void clear() {
      this.paymentReservation = null;
    }

    public PaymentReservation getPaymentReservation() {
      return this.paymentReservation;
    }

    public void setPaymentReservation(PaymentReservation paymentReservation) {
      this.paymentReservation = paymentReservation;
    }

    public void unsetPaymentReservation() {
      this.paymentReservation = null;
    }

    /** Returns true if field paymentReservation is set (has been assigned a value) and false otherwise */
    public boolean isSetPaymentReservation() {
      return this.paymentReservation != null;
    }

    public void setPaymentReservationIsSet(boolean value) {
      if (!value) {
        this.paymentReservation = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof buyCoinProduct_args)
        return this.equals((buyCoinProduct_args)that);
      return false;
    }

    public boolean equals(buyCoinProduct_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_paymentReservation = true && this.isSetPaymentReservation();
      boolean that_present_paymentReservation = true && that.isSetPaymentReservation();
      if (this_present_paymentReservation || that_present_paymentReservation) {
        if (!(this_present_paymentReservation && that_present_paymentReservation))
          return false;
        if (!this.paymentReservation.equals(that.paymentReservation))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      buyCoinProduct_args other = (buyCoinProduct_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetPaymentReservation(), other.isSetPaymentReservation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaymentReservation()) {
        lastComparison = this.paymentReservation.compareTo(other.paymentReservation);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // PAYMENT_RESERVATION
            if (field.type == TType.STRUCT) {
              this.paymentReservation = new PaymentReservation();
              this.paymentReservation.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.paymentReservation != null) {
        oprot.writeFieldBegin(PAYMENT_RESERVATION_FIELD_DESC);
        this.paymentReservation.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("buyCoinProduct_args(");
      boolean first = true;

      sb.append("paymentReservation:");
      if (this.paymentReservation == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentReservation);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class buyCoinProduct_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("buyCoinProduct_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public buyCoinProduct_result() {
    }

    public buyCoinProduct_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public buyCoinProduct_result(buyCoinProduct_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public buyCoinProduct_result deepCopy() {
      return new buyCoinProduct_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof buyCoinProduct_result)
        return this.equals((buyCoinProduct_result)that);
      return false;
    }

    public boolean equals(buyCoinProduct_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      buyCoinProduct_result other = (buyCoinProduct_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("buyCoinProduct_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class buyFreeProduct_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("buyFreeProduct_args");

    private static final TField RECEIVER_MID_FIELD_DESC = new TField("receiverMid", TType.STRING, (short)2);
    private static final TField PRODUCT_ID_FIELD_DESC = new TField("productId", TType.STRING, (short)3);
    private static final TField MESSAGE_TEMPLATE_FIELD_DESC = new TField("messageTemplate", TType.I32, (short)4);
    private static final TField LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, (short)5);
    private static final TField COUNTRY_FIELD_DESC = new TField("country", TType.STRING, (short)6);
    private static final TField PACKAGE_ID_FIELD_DESC = new TField("packageId", TType.I64, (short)7);

    private String receiverMid;
    private String productId;
    private int messageTemplate;
    private String language;
    private String country;
    private long packageId;

    // isset id assignments
    private static final int __MESSAGETEMPLATE_ISSET_ID = 0;
    private static final int __PACKAGEID_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public buyFreeProduct_args() {
    }

    public buyFreeProduct_args(
      String receiverMid,
      String productId,
      int messageTemplate,
      String language,
      String country,
      long packageId)
    {
      this();
      this.receiverMid = receiverMid;
      this.productId = productId;
      this.messageTemplate = messageTemplate;
      setMessageTemplateIsSet(true);
      this.language = language;
      this.country = country;
      this.packageId = packageId;
      setPackageIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public buyFreeProduct_args(buyFreeProduct_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetReceiverMid()) {
        this.receiverMid = other.receiverMid;
      }
      if (other.isSetProductId()) {
        this.productId = other.productId;
      }
      this.messageTemplate = other.messageTemplate;
      if (other.isSetLanguage()) {
        this.language = other.language;
      }
      if (other.isSetCountry()) {
        this.country = other.country;
      }
      this.packageId = other.packageId;
    }

    public buyFreeProduct_args deepCopy() {
      return new buyFreeProduct_args(this);
    }

    public void clear() {
      this.receiverMid = null;
      this.productId = null;
      setMessageTemplateIsSet(false);
      this.messageTemplate = 0;
      this.language = null;
      this.country = null;
      setPackageIdIsSet(false);
      this.packageId = 0;
    }

    public String getReceiverMid() {
      return this.receiverMid;
    }

    public void setReceiverMid(String receiverMid) {
      this.receiverMid = receiverMid;
    }

    public void unsetReceiverMid() {
      this.receiverMid = null;
    }

    /** Returns true if field receiverMid is set (has been assigned a value) and false otherwise */
    public boolean isSetReceiverMid() {
      return this.receiverMid != null;
    }

    public void setReceiverMidIsSet(boolean value) {
      if (!value) {
        this.receiverMid = null;
      }
    }

    public String getProductId() {
      return this.productId;
    }

    public void setProductId(String productId) {
      this.productId = productId;
    }

    public void unsetProductId() {
      this.productId = null;
    }

    /** Returns true if field productId is set (has been assigned a value) and false otherwise */
    public boolean isSetProductId() {
      return this.productId != null;
    }

    public void setProductIdIsSet(boolean value) {
      if (!value) {
        this.productId = null;
      }
    }

    public int getMessageTemplate() {
      return this.messageTemplate;
    }

    public void setMessageTemplate(int messageTemplate) {
      this.messageTemplate = messageTemplate;
      setMessageTemplateIsSet(true);
    }

    public void unsetMessageTemplate() {
      __isset_vector[__MESSAGETEMPLATE_ISSET_ID] = false;
    }

    /** Returns true if field messageTemplate is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageTemplate() {
      return __isset_vector[__MESSAGETEMPLATE_ISSET_ID];
    }

    public void setMessageTemplateIsSet(boolean value) {
      __isset_vector[__MESSAGETEMPLATE_ISSET_ID] = value;
    }

    public String getLanguage() {
      return this.language;
    }

    public void setLanguage(String language) {
      this.language = language;
    }

    public void unsetLanguage() {
      this.language = null;
    }

    /** Returns true if field language is set (has been assigned a value) and false otherwise */
    public boolean isSetLanguage() {
      return this.language != null;
    }

    public void setLanguageIsSet(boolean value) {
      if (!value) {
        this.language = null;
      }
    }

    public String getCountry() {
      return this.country;
    }

    public void setCountry(String country) {
      this.country = country;
    }

    public void unsetCountry() {
      this.country = null;
    }

    /** Returns true if field country is set (has been assigned a value) and false otherwise */
    public boolean isSetCountry() {
      return this.country != null;
    }

    public void setCountryIsSet(boolean value) {
      if (!value) {
        this.country = null;
      }
    }

    public long getPackageId() {
      return this.packageId;
    }

    public void setPackageId(long packageId) {
      this.packageId = packageId;
      setPackageIdIsSet(true);
    }

    public void unsetPackageId() {
      __isset_vector[__PACKAGEID_ISSET_ID] = false;
    }

    /** Returns true if field packageId is set (has been assigned a value) and false otherwise */
    public boolean isSetPackageId() {
      return __isset_vector[__PACKAGEID_ISSET_ID];
    }

    public void setPackageIdIsSet(boolean value) {
      __isset_vector[__PACKAGEID_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof buyFreeProduct_args)
        return this.equals((buyFreeProduct_args)that);
      return false;
    }

    public boolean equals(buyFreeProduct_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_receiverMid = true && this.isSetReceiverMid();
      boolean that_present_receiverMid = true && that.isSetReceiverMid();
      if (this_present_receiverMid || that_present_receiverMid) {
        if (!(this_present_receiverMid && that_present_receiverMid))
          return false;
        if (!this.receiverMid.equals(that.receiverMid))
          return false;
      }

      boolean this_present_productId = true && this.isSetProductId();
      boolean that_present_productId = true && that.isSetProductId();
      if (this_present_productId || that_present_productId) {
        if (!(this_present_productId && that_present_productId))
          return false;
        if (!this.productId.equals(that.productId))
          return false;
      }

      boolean this_present_messageTemplate = true;
      boolean that_present_messageTemplate = true;
      if (this_present_messageTemplate || that_present_messageTemplate) {
        if (!(this_present_messageTemplate && that_present_messageTemplate))
          return false;
        if (this.messageTemplate != that.messageTemplate)
          return false;
      }

      boolean this_present_language = true && this.isSetLanguage();
      boolean that_present_language = true && that.isSetLanguage();
      if (this_present_language || that_present_language) {
        if (!(this_present_language && that_present_language))
          return false;
        if (!this.language.equals(that.language))
          return false;
      }

      boolean this_present_country = true && this.isSetCountry();
      boolean that_present_country = true && that.isSetCountry();
      if (this_present_country || that_present_country) {
        if (!(this_present_country && that_present_country))
          return false;
        if (!this.country.equals(that.country))
          return false;
      }

      boolean this_present_packageId = true;
      boolean that_present_packageId = true;
      if (this_present_packageId || that_present_packageId) {
        if (!(this_present_packageId && that_present_packageId))
          return false;
        if (this.packageId != that.packageId)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      buyFreeProduct_args other = (buyFreeProduct_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReceiverMid(), other.isSetReceiverMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReceiverMid()) {
        lastComparison = TBaseHelper.compareTo(this.receiverMid, other.receiverMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetProductId(), other.isSetProductId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductId()) {
        lastComparison = TBaseHelper.compareTo(this.productId, other.productId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMessageTemplate(), other.isSetMessageTemplate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageTemplate()) {
        lastComparison = TBaseHelper.compareTo(this.messageTemplate, other.messageTemplate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLanguage(), other.isSetLanguage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLanguage()) {
        lastComparison = TBaseHelper.compareTo(this.language, other.language);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCountry(), other.isSetCountry());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountry()) {
        lastComparison = TBaseHelper.compareTo(this.country, other.country);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPackageId(), other.isSetPackageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPackageId()) {
        lastComparison = TBaseHelper.compareTo(this.packageId, other.packageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // RECEIVER_MID
            if (field.type == TType.STRING) {
              this.receiverMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PRODUCT_ID
            if (field.type == TType.STRING) {
              this.productId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // MESSAGE_TEMPLATE
            if (field.type == TType.I32) {
              this.messageTemplate = iprot.readI32();
              setMessageTemplateIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // LANGUAGE
            if (field.type == TType.STRING) {
              this.language = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // COUNTRY
            if (field.type == TType.STRING) {
              this.country = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // PACKAGE_ID
            if (field.type == TType.I64) {
              this.packageId = iprot.readI64();
              setPackageIdIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.receiverMid != null) {
        oprot.writeFieldBegin(RECEIVER_MID_FIELD_DESC);
        oprot.writeString(this.receiverMid);
        oprot.writeFieldEnd();
      }
      if (this.productId != null) {
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeString(this.productId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MESSAGE_TEMPLATE_FIELD_DESC);
      oprot.writeI32(this.messageTemplate);
      oprot.writeFieldEnd();
      if (this.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(this.language);
        oprot.writeFieldEnd();
      }
      if (this.country != null) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeString(this.country);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PACKAGE_ID_FIELD_DESC);
      oprot.writeI64(this.packageId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("buyFreeProduct_args(");
      boolean first = true;

      sb.append("receiverMid:");
      if (this.receiverMid == null) {
        sb.append("null");
      } else {
        sb.append(this.receiverMid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productId:");
      if (this.productId == null) {
        sb.append("null");
      } else {
        sb.append(this.productId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("messageTemplate:");
      sb.append(this.messageTemplate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("country:");
      if (this.country == null) {
        sb.append("null");
      } else {
        sb.append(this.country);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("packageId:");
      sb.append(this.packageId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class buyFreeProduct_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("buyFreeProduct_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public buyFreeProduct_result() {
    }

    public buyFreeProduct_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public buyFreeProduct_result(buyFreeProduct_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public buyFreeProduct_result deepCopy() {
      return new buyFreeProduct_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof buyFreeProduct_result)
        return this.equals((buyFreeProduct_result)that);
      return false;
    }

    public boolean equals(buyFreeProduct_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      buyFreeProduct_result other = (buyFreeProduct_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("buyFreeProduct_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class buyMustbuyProduct_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("buyMustbuyProduct_args");

    private static final TField RECEIVER_MID_FIELD_DESC = new TField("receiverMid", TType.STRING, (short)2);
    private static final TField PRODUCT_ID_FIELD_DESC = new TField("productId", TType.STRING, (short)3);
    private static final TField MESSAGE_TEMPLATE_FIELD_DESC = new TField("messageTemplate", TType.I32, (short)4);
    private static final TField LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, (short)5);
    private static final TField COUNTRY_FIELD_DESC = new TField("country", TType.STRING, (short)6);
    private static final TField PACKAGE_ID_FIELD_DESC = new TField("packageId", TType.I64, (short)7);
    private static final TField SERIAL_NUMBER_FIELD_DESC = new TField("serialNumber", TType.STRING, (short)8);

    private String receiverMid;
    private String productId;
    private int messageTemplate;
    private String language;
    private String country;
    private long packageId;
    private String serialNumber;

    // isset id assignments
    private static final int __MESSAGETEMPLATE_ISSET_ID = 0;
    private static final int __PACKAGEID_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public buyMustbuyProduct_args() {
    }

    public buyMustbuyProduct_args(
      String receiverMid,
      String productId,
      int messageTemplate,
      String language,
      String country,
      long packageId,
      String serialNumber)
    {
      this();
      this.receiverMid = receiverMid;
      this.productId = productId;
      this.messageTemplate = messageTemplate;
      setMessageTemplateIsSet(true);
      this.language = language;
      this.country = country;
      this.packageId = packageId;
      setPackageIdIsSet(true);
      this.serialNumber = serialNumber;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public buyMustbuyProduct_args(buyMustbuyProduct_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetReceiverMid()) {
        this.receiverMid = other.receiverMid;
      }
      if (other.isSetProductId()) {
        this.productId = other.productId;
      }
      this.messageTemplate = other.messageTemplate;
      if (other.isSetLanguage()) {
        this.language = other.language;
      }
      if (other.isSetCountry()) {
        this.country = other.country;
      }
      this.packageId = other.packageId;
      if (other.isSetSerialNumber()) {
        this.serialNumber = other.serialNumber;
      }
    }

    public buyMustbuyProduct_args deepCopy() {
      return new buyMustbuyProduct_args(this);
    }

    public void clear() {
      this.receiverMid = null;
      this.productId = null;
      setMessageTemplateIsSet(false);
      this.messageTemplate = 0;
      this.language = null;
      this.country = null;
      setPackageIdIsSet(false);
      this.packageId = 0;
      this.serialNumber = null;
    }

    public String getReceiverMid() {
      return this.receiverMid;
    }

    public void setReceiverMid(String receiverMid) {
      this.receiverMid = receiverMid;
    }

    public void unsetReceiverMid() {
      this.receiverMid = null;
    }

    /** Returns true if field receiverMid is set (has been assigned a value) and false otherwise */
    public boolean isSetReceiverMid() {
      return this.receiverMid != null;
    }

    public void setReceiverMidIsSet(boolean value) {
      if (!value) {
        this.receiverMid = null;
      }
    }

    public String getProductId() {
      return this.productId;
    }

    public void setProductId(String productId) {
      this.productId = productId;
    }

    public void unsetProductId() {
      this.productId = null;
    }

    /** Returns true if field productId is set (has been assigned a value) and false otherwise */
    public boolean isSetProductId() {
      return this.productId != null;
    }

    public void setProductIdIsSet(boolean value) {
      if (!value) {
        this.productId = null;
      }
    }

    public int getMessageTemplate() {
      return this.messageTemplate;
    }

    public void setMessageTemplate(int messageTemplate) {
      this.messageTemplate = messageTemplate;
      setMessageTemplateIsSet(true);
    }

    public void unsetMessageTemplate() {
      __isset_vector[__MESSAGETEMPLATE_ISSET_ID] = false;
    }

    /** Returns true if field messageTemplate is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageTemplate() {
      return __isset_vector[__MESSAGETEMPLATE_ISSET_ID];
    }

    public void setMessageTemplateIsSet(boolean value) {
      __isset_vector[__MESSAGETEMPLATE_ISSET_ID] = value;
    }

    public String getLanguage() {
      return this.language;
    }

    public void setLanguage(String language) {
      this.language = language;
    }

    public void unsetLanguage() {
      this.language = null;
    }

    /** Returns true if field language is set (has been assigned a value) and false otherwise */
    public boolean isSetLanguage() {
      return this.language != null;
    }

    public void setLanguageIsSet(boolean value) {
      if (!value) {
        this.language = null;
      }
    }

    public String getCountry() {
      return this.country;
    }

    public void setCountry(String country) {
      this.country = country;
    }

    public void unsetCountry() {
      this.country = null;
    }

    /** Returns true if field country is set (has been assigned a value) and false otherwise */
    public boolean isSetCountry() {
      return this.country != null;
    }

    public void setCountryIsSet(boolean value) {
      if (!value) {
        this.country = null;
      }
    }

    public long getPackageId() {
      return this.packageId;
    }

    public void setPackageId(long packageId) {
      this.packageId = packageId;
      setPackageIdIsSet(true);
    }

    public void unsetPackageId() {
      __isset_vector[__PACKAGEID_ISSET_ID] = false;
    }

    /** Returns true if field packageId is set (has been assigned a value) and false otherwise */
    public boolean isSetPackageId() {
      return __isset_vector[__PACKAGEID_ISSET_ID];
    }

    public void setPackageIdIsSet(boolean value) {
      __isset_vector[__PACKAGEID_ISSET_ID] = value;
    }

    public String getSerialNumber() {
      return this.serialNumber;
    }

    public void setSerialNumber(String serialNumber) {
      this.serialNumber = serialNumber;
    }

    public void unsetSerialNumber() {
      this.serialNumber = null;
    }

    /** Returns true if field serialNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetSerialNumber() {
      return this.serialNumber != null;
    }

    public void setSerialNumberIsSet(boolean value) {
      if (!value) {
        this.serialNumber = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof buyMustbuyProduct_args)
        return this.equals((buyMustbuyProduct_args)that);
      return false;
    }

    public boolean equals(buyMustbuyProduct_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_receiverMid = true && this.isSetReceiverMid();
      boolean that_present_receiverMid = true && that.isSetReceiverMid();
      if (this_present_receiverMid || that_present_receiverMid) {
        if (!(this_present_receiverMid && that_present_receiverMid))
          return false;
        if (!this.receiverMid.equals(that.receiverMid))
          return false;
      }

      boolean this_present_productId = true && this.isSetProductId();
      boolean that_present_productId = true && that.isSetProductId();
      if (this_present_productId || that_present_productId) {
        if (!(this_present_productId && that_present_productId))
          return false;
        if (!this.productId.equals(that.productId))
          return false;
      }

      boolean this_present_messageTemplate = true;
      boolean that_present_messageTemplate = true;
      if (this_present_messageTemplate || that_present_messageTemplate) {
        if (!(this_present_messageTemplate && that_present_messageTemplate))
          return false;
        if (this.messageTemplate != that.messageTemplate)
          return false;
      }

      boolean this_present_language = true && this.isSetLanguage();
      boolean that_present_language = true && that.isSetLanguage();
      if (this_present_language || that_present_language) {
        if (!(this_present_language && that_present_language))
          return false;
        if (!this.language.equals(that.language))
          return false;
      }

      boolean this_present_country = true && this.isSetCountry();
      boolean that_present_country = true && that.isSetCountry();
      if (this_present_country || that_present_country) {
        if (!(this_present_country && that_present_country))
          return false;
        if (!this.country.equals(that.country))
          return false;
      }

      boolean this_present_packageId = true;
      boolean that_present_packageId = true;
      if (this_present_packageId || that_present_packageId) {
        if (!(this_present_packageId && that_present_packageId))
          return false;
        if (this.packageId != that.packageId)
          return false;
      }

      boolean this_present_serialNumber = true && this.isSetSerialNumber();
      boolean that_present_serialNumber = true && that.isSetSerialNumber();
      if (this_present_serialNumber || that_present_serialNumber) {
        if (!(this_present_serialNumber && that_present_serialNumber))
          return false;
        if (!this.serialNumber.equals(that.serialNumber))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      buyMustbuyProduct_args other = (buyMustbuyProduct_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReceiverMid(), other.isSetReceiverMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReceiverMid()) {
        lastComparison = TBaseHelper.compareTo(this.receiverMid, other.receiverMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetProductId(), other.isSetProductId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductId()) {
        lastComparison = TBaseHelper.compareTo(this.productId, other.productId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMessageTemplate(), other.isSetMessageTemplate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageTemplate()) {
        lastComparison = TBaseHelper.compareTo(this.messageTemplate, other.messageTemplate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLanguage(), other.isSetLanguage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLanguage()) {
        lastComparison = TBaseHelper.compareTo(this.language, other.language);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCountry(), other.isSetCountry());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountry()) {
        lastComparison = TBaseHelper.compareTo(this.country, other.country);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPackageId(), other.isSetPackageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPackageId()) {
        lastComparison = TBaseHelper.compareTo(this.packageId, other.packageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSerialNumber(), other.isSetSerialNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSerialNumber()) {
        lastComparison = TBaseHelper.compareTo(this.serialNumber, other.serialNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // RECEIVER_MID
            if (field.type == TType.STRING) {
              this.receiverMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PRODUCT_ID
            if (field.type == TType.STRING) {
              this.productId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // MESSAGE_TEMPLATE
            if (field.type == TType.I32) {
              this.messageTemplate = iprot.readI32();
              setMessageTemplateIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // LANGUAGE
            if (field.type == TType.STRING) {
              this.language = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // COUNTRY
            if (field.type == TType.STRING) {
              this.country = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // PACKAGE_ID
            if (field.type == TType.I64) {
              this.packageId = iprot.readI64();
              setPackageIdIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 8: // SERIAL_NUMBER
            if (field.type == TType.STRING) {
              this.serialNumber = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.receiverMid != null) {
        oprot.writeFieldBegin(RECEIVER_MID_FIELD_DESC);
        oprot.writeString(this.receiverMid);
        oprot.writeFieldEnd();
      }
      if (this.productId != null) {
        oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
        oprot.writeString(this.productId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MESSAGE_TEMPLATE_FIELD_DESC);
      oprot.writeI32(this.messageTemplate);
      oprot.writeFieldEnd();
      if (this.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(this.language);
        oprot.writeFieldEnd();
      }
      if (this.country != null) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeString(this.country);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PACKAGE_ID_FIELD_DESC);
      oprot.writeI64(this.packageId);
      oprot.writeFieldEnd();
      if (this.serialNumber != null) {
        oprot.writeFieldBegin(SERIAL_NUMBER_FIELD_DESC);
        oprot.writeString(this.serialNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("buyMustbuyProduct_args(");
      boolean first = true;

      sb.append("receiverMid:");
      if (this.receiverMid == null) {
        sb.append("null");
      } else {
        sb.append(this.receiverMid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("productId:");
      if (this.productId == null) {
        sb.append("null");
      } else {
        sb.append(this.productId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("messageTemplate:");
      sb.append(this.messageTemplate);
      first = false;
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("country:");
      if (this.country == null) {
        sb.append("null");
      } else {
        sb.append(this.country);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("packageId:");
      sb.append(this.packageId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("serialNumber:");
      if (this.serialNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.serialNumber);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class buyMustbuyProduct_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("buyMustbuyProduct_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public buyMustbuyProduct_result() {
    }

    public buyMustbuyProduct_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public buyMustbuyProduct_result(buyMustbuyProduct_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public buyMustbuyProduct_result deepCopy() {
      return new buyMustbuyProduct_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof buyMustbuyProduct_result)
        return this.equals((buyMustbuyProduct_result)that);
      return false;
    }

    public boolean equals(buyMustbuyProduct_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      buyMustbuyProduct_result other = (buyMustbuyProduct_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("buyMustbuyProduct_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class checkCanReceivePresent_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("checkCanReceivePresent_args");

    private static final TField RECIPIENT_MID_FIELD_DESC = new TField("recipientMid", TType.STRING, (short)2);
    private static final TField PACKAGE_ID_FIELD_DESC = new TField("packageId", TType.I64, (short)3);
    private static final TField LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, (short)4);
    private static final TField COUNTRY_FIELD_DESC = new TField("country", TType.STRING, (short)5);

    private String recipientMid;
    private long packageId;
    private String language;
    private String country;

    // isset id assignments
    private static final int __PACKAGEID_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public checkCanReceivePresent_args() {
    }

    public checkCanReceivePresent_args(
      String recipientMid,
      long packageId,
      String language,
      String country)
    {
      this();
      this.recipientMid = recipientMid;
      this.packageId = packageId;
      setPackageIdIsSet(true);
      this.language = language;
      this.country = country;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkCanReceivePresent_args(checkCanReceivePresent_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetRecipientMid()) {
        this.recipientMid = other.recipientMid;
      }
      this.packageId = other.packageId;
      if (other.isSetLanguage()) {
        this.language = other.language;
      }
      if (other.isSetCountry()) {
        this.country = other.country;
      }
    }

    public checkCanReceivePresent_args deepCopy() {
      return new checkCanReceivePresent_args(this);
    }

    public void clear() {
      this.recipientMid = null;
      setPackageIdIsSet(false);
      this.packageId = 0;
      this.language = null;
      this.country = null;
    }

    public String getRecipientMid() {
      return this.recipientMid;
    }

    public void setRecipientMid(String recipientMid) {
      this.recipientMid = recipientMid;
    }

    public void unsetRecipientMid() {
      this.recipientMid = null;
    }

    /** Returns true if field recipientMid is set (has been assigned a value) and false otherwise */
    public boolean isSetRecipientMid() {
      return this.recipientMid != null;
    }

    public void setRecipientMidIsSet(boolean value) {
      if (!value) {
        this.recipientMid = null;
      }
    }

    public long getPackageId() {
      return this.packageId;
    }

    public void setPackageId(long packageId) {
      this.packageId = packageId;
      setPackageIdIsSet(true);
    }

    public void unsetPackageId() {
      __isset_vector[__PACKAGEID_ISSET_ID] = false;
    }

    /** Returns true if field packageId is set (has been assigned a value) and false otherwise */
    public boolean isSetPackageId() {
      return __isset_vector[__PACKAGEID_ISSET_ID];
    }

    public void setPackageIdIsSet(boolean value) {
      __isset_vector[__PACKAGEID_ISSET_ID] = value;
    }

    public String getLanguage() {
      return this.language;
    }

    public void setLanguage(String language) {
      this.language = language;
    }

    public void unsetLanguage() {
      this.language = null;
    }

    /** Returns true if field language is set (has been assigned a value) and false otherwise */
    public boolean isSetLanguage() {
      return this.language != null;
    }

    public void setLanguageIsSet(boolean value) {
      if (!value) {
        this.language = null;
      }
    }

    public String getCountry() {
      return this.country;
    }

    public void setCountry(String country) {
      this.country = country;
    }

    public void unsetCountry() {
      this.country = null;
    }

    /** Returns true if field country is set (has been assigned a value) and false otherwise */
    public boolean isSetCountry() {
      return this.country != null;
    }

    public void setCountryIsSet(boolean value) {
      if (!value) {
        this.country = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkCanReceivePresent_args)
        return this.equals((checkCanReceivePresent_args)that);
      return false;
    }

    public boolean equals(checkCanReceivePresent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_recipientMid = true && this.isSetRecipientMid();
      boolean that_present_recipientMid = true && that.isSetRecipientMid();
      if (this_present_recipientMid || that_present_recipientMid) {
        if (!(this_present_recipientMid && that_present_recipientMid))
          return false;
        if (!this.recipientMid.equals(that.recipientMid))
          return false;
      }

      boolean this_present_packageId = true;
      boolean that_present_packageId = true;
      if (this_present_packageId || that_present_packageId) {
        if (!(this_present_packageId && that_present_packageId))
          return false;
        if (this.packageId != that.packageId)
          return false;
      }

      boolean this_present_language = true && this.isSetLanguage();
      boolean that_present_language = true && that.isSetLanguage();
      if (this_present_language || that_present_language) {
        if (!(this_present_language && that_present_language))
          return false;
        if (!this.language.equals(that.language))
          return false;
      }

      boolean this_present_country = true && this.isSetCountry();
      boolean that_present_country = true && that.isSetCountry();
      if (this_present_country || that_present_country) {
        if (!(this_present_country && that_present_country))
          return false;
        if (!this.country.equals(that.country))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      checkCanReceivePresent_args other = (checkCanReceivePresent_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRecipientMid(), other.isSetRecipientMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRecipientMid()) {
        lastComparison = TBaseHelper.compareTo(this.recipientMid, other.recipientMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPackageId(), other.isSetPackageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPackageId()) {
        lastComparison = TBaseHelper.compareTo(this.packageId, other.packageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLanguage(), other.isSetLanguage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLanguage()) {
        lastComparison = TBaseHelper.compareTo(this.language, other.language);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCountry(), other.isSetCountry());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountry()) {
        lastComparison = TBaseHelper.compareTo(this.country, other.country);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // RECIPIENT_MID
            if (field.type == TType.STRING) {
              this.recipientMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PACKAGE_ID
            if (field.type == TType.I64) {
              this.packageId = iprot.readI64();
              setPackageIdIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // LANGUAGE
            if (field.type == TType.STRING) {
              this.language = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // COUNTRY
            if (field.type == TType.STRING) {
              this.country = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.recipientMid != null) {
        oprot.writeFieldBegin(RECIPIENT_MID_FIELD_DESC);
        oprot.writeString(this.recipientMid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PACKAGE_ID_FIELD_DESC);
      oprot.writeI64(this.packageId);
      oprot.writeFieldEnd();
      if (this.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(this.language);
        oprot.writeFieldEnd();
      }
      if (this.country != null) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeString(this.country);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("checkCanReceivePresent_args(");
      boolean first = true;

      sb.append("recipientMid:");
      if (this.recipientMid == null) {
        sb.append("null");
      } else {
        sb.append(this.recipientMid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("packageId:");
      sb.append(this.packageId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("country:");
      if (this.country == null) {
        sb.append("null");
      } else {
        sb.append(this.country);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class checkCanReceivePresent_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("checkCanReceivePresent_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public checkCanReceivePresent_result() {
    }

    public checkCanReceivePresent_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkCanReceivePresent_result(checkCanReceivePresent_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public checkCanReceivePresent_result deepCopy() {
      return new checkCanReceivePresent_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkCanReceivePresent_result)
        return this.equals((checkCanReceivePresent_result)that);
      return false;
    }

    public boolean equals(checkCanReceivePresent_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      checkCanReceivePresent_result other = (checkCanReceivePresent_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("checkCanReceivePresent_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getActivePurchases_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getActivePurchases_args");

    private static final TField START_FIELD_DESC = new TField("start", TType.I64, (short)2);
    private static final TField SIZE_FIELD_DESC = new TField("size", TType.I32, (short)3);
    private static final TField LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, (short)4);
    private static final TField COUNTRY_FIELD_DESC = new TField("country", TType.STRING, (short)5);

    private long start;
    private int size;
    private String language;
    private String country;

    // isset id assignments
    private static final int __START_ISSET_ID = 0;
    private static final int __SIZE_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public getActivePurchases_args() {
    }

    public getActivePurchases_args(
      long start,
      int size,
      String language,
      String country)
    {
      this();
      this.start = start;
      setStartIsSet(true);
      this.size = size;
      setSizeIsSet(true);
      this.language = language;
      this.country = country;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getActivePurchases_args(getActivePurchases_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.start = other.start;
      this.size = other.size;
      if (other.isSetLanguage()) {
        this.language = other.language;
      }
      if (other.isSetCountry()) {
        this.country = other.country;
      }
    }

    public getActivePurchases_args deepCopy() {
      return new getActivePurchases_args(this);
    }

    public void clear() {
      setStartIsSet(false);
      this.start = 0;
      setSizeIsSet(false);
      this.size = 0;
      this.language = null;
      this.country = null;
    }

    public long getStart() {
      return this.start;
    }

    public void setStart(long start) {
      this.start = start;
      setStartIsSet(true);
    }

    public void unsetStart() {
      __isset_vector[__START_ISSET_ID] = false;
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return __isset_vector[__START_ISSET_ID];
    }

    public void setStartIsSet(boolean value) {
      __isset_vector[__START_ISSET_ID] = value;
    }

    public int getSize() {
      return this.size;
    }

    public void setSize(int size) {
      this.size = size;
      setSizeIsSet(true);
    }

    public void unsetSize() {
      __isset_vector[__SIZE_ISSET_ID] = false;
    }

    /** Returns true if field size is set (has been assigned a value) and false otherwise */
    public boolean isSetSize() {
      return __isset_vector[__SIZE_ISSET_ID];
    }

    public void setSizeIsSet(boolean value) {
      __isset_vector[__SIZE_ISSET_ID] = value;
    }

    public String getLanguage() {
      return this.language;
    }

    public void setLanguage(String language) {
      this.language = language;
    }

    public void unsetLanguage() {
      this.language = null;
    }

    /** Returns true if field language is set (has been assigned a value) and false otherwise */
    public boolean isSetLanguage() {
      return this.language != null;
    }

    public void setLanguageIsSet(boolean value) {
      if (!value) {
        this.language = null;
      }
    }

    public String getCountry() {
      return this.country;
    }

    public void setCountry(String country) {
      this.country = country;
    }

    public void unsetCountry() {
      this.country = null;
    }

    /** Returns true if field country is set (has been assigned a value) and false otherwise */
    public boolean isSetCountry() {
      return this.country != null;
    }

    public void setCountryIsSet(boolean value) {
      if (!value) {
        this.country = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getActivePurchases_args)
        return this.equals((getActivePurchases_args)that);
      return false;
    }

    public boolean equals(getActivePurchases_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_size = true;
      boolean that_present_size = true;
      if (this_present_size || that_present_size) {
        if (!(this_present_size && that_present_size))
          return false;
        if (this.size != that.size)
          return false;
      }

      boolean this_present_language = true && this.isSetLanguage();
      boolean that_present_language = true && that.isSetLanguage();
      if (this_present_language || that_present_language) {
        if (!(this_present_language && that_present_language))
          return false;
        if (!this.language.equals(that.language))
          return false;
      }

      boolean this_present_country = true && this.isSetCountry();
      boolean that_present_country = true && that.isSetCountry();
      if (this_present_country || that_present_country) {
        if (!(this_present_country && that_present_country))
          return false;
        if (!this.country.equals(that.country))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getActivePurchases_args other = (getActivePurchases_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetStart(), other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSize(), other.isSetSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSize()) {
        lastComparison = TBaseHelper.compareTo(this.size, other.size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLanguage(), other.isSetLanguage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLanguage()) {
        lastComparison = TBaseHelper.compareTo(this.language, other.language);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCountry(), other.isSetCountry());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountry()) {
        lastComparison = TBaseHelper.compareTo(this.country, other.country);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // START
            if (field.type == TType.I64) {
              this.start = iprot.readI64();
              setStartIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SIZE
            if (field.type == TType.I32) {
              this.size = iprot.readI32();
              setSizeIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // LANGUAGE
            if (field.type == TType.STRING) {
              this.language = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // COUNTRY
            if (field.type == TType.STRING) {
              this.country = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(START_FIELD_DESC);
      oprot.writeI64(this.start);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIZE_FIELD_DESC);
      oprot.writeI32(this.size);
      oprot.writeFieldEnd();
      if (this.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(this.language);
        oprot.writeFieldEnd();
      }
      if (this.country != null) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeString(this.country);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getActivePurchases_args(");
      boolean first = true;

      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("size:");
      sb.append(this.size);
      first = false;
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("country:");
      if (this.country == null) {
        sb.append("null");
      } else {
        sb.append(this.country);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getActivePurchases_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getActivePurchases_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private ProductList success;
    private TalkException e;

    // isset id assignments

    public getActivePurchases_result() {
    }

    public getActivePurchases_result(
      ProductList success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getActivePurchases_result(getActivePurchases_result other) {
      if (other.isSetSuccess()) {
        this.success = new ProductList(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getActivePurchases_result deepCopy() {
      return new getActivePurchases_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ProductList getSuccess() {
      return this.success;
    }

    public void setSuccess(ProductList success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getActivePurchases_result)
        return this.equals((getActivePurchases_result)that);
      return false;
    }

    public boolean equals(getActivePurchases_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getActivePurchases_result other = (getActivePurchases_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new ProductList();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getActivePurchases_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getActivePurchaseVersions_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getActivePurchaseVersions_args");

    private static final TField START_FIELD_DESC = new TField("start", TType.I64, (short)2);
    private static final TField SIZE_FIELD_DESC = new TField("size", TType.I32, (short)3);
    private static final TField LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, (short)4);
    private static final TField COUNTRY_FIELD_DESC = new TField("country", TType.STRING, (short)5);

    private long start;
    private int size;
    private String language;
    private String country;

    // isset id assignments
    private static final int __START_ISSET_ID = 0;
    private static final int __SIZE_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public getActivePurchaseVersions_args() {
    }

    public getActivePurchaseVersions_args(
      long start,
      int size,
      String language,
      String country)
    {
      this();
      this.start = start;
      setStartIsSet(true);
      this.size = size;
      setSizeIsSet(true);
      this.language = language;
      this.country = country;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getActivePurchaseVersions_args(getActivePurchaseVersions_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.start = other.start;
      this.size = other.size;
      if (other.isSetLanguage()) {
        this.language = other.language;
      }
      if (other.isSetCountry()) {
        this.country = other.country;
      }
    }

    public getActivePurchaseVersions_args deepCopy() {
      return new getActivePurchaseVersions_args(this);
    }

    public void clear() {
      setStartIsSet(false);
      this.start = 0;
      setSizeIsSet(false);
      this.size = 0;
      this.language = null;
      this.country = null;
    }

    public long getStart() {
      return this.start;
    }

    public void setStart(long start) {
      this.start = start;
      setStartIsSet(true);
    }

    public void unsetStart() {
      __isset_vector[__START_ISSET_ID] = false;
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return __isset_vector[__START_ISSET_ID];
    }

    public void setStartIsSet(boolean value) {
      __isset_vector[__START_ISSET_ID] = value;
    }

    public int getSize() {
      return this.size;
    }

    public void setSize(int size) {
      this.size = size;
      setSizeIsSet(true);
    }

    public void unsetSize() {
      __isset_vector[__SIZE_ISSET_ID] = false;
    }

    /** Returns true if field size is set (has been assigned a value) and false otherwise */
    public boolean isSetSize() {
      return __isset_vector[__SIZE_ISSET_ID];
    }

    public void setSizeIsSet(boolean value) {
      __isset_vector[__SIZE_ISSET_ID] = value;
    }

    public String getLanguage() {
      return this.language;
    }

    public void setLanguage(String language) {
      this.language = language;
    }

    public void unsetLanguage() {
      this.language = null;
    }

    /** Returns true if field language is set (has been assigned a value) and false otherwise */
    public boolean isSetLanguage() {
      return this.language != null;
    }

    public void setLanguageIsSet(boolean value) {
      if (!value) {
        this.language = null;
      }
    }

    public String getCountry() {
      return this.country;
    }

    public void setCountry(String country) {
      this.country = country;
    }

    public void unsetCountry() {
      this.country = null;
    }

    /** Returns true if field country is set (has been assigned a value) and false otherwise */
    public boolean isSetCountry() {
      return this.country != null;
    }

    public void setCountryIsSet(boolean value) {
      if (!value) {
        this.country = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getActivePurchaseVersions_args)
        return this.equals((getActivePurchaseVersions_args)that);
      return false;
    }

    public boolean equals(getActivePurchaseVersions_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_size = true;
      boolean that_present_size = true;
      if (this_present_size || that_present_size) {
        if (!(this_present_size && that_present_size))
          return false;
        if (this.size != that.size)
          return false;
      }

      boolean this_present_language = true && this.isSetLanguage();
      boolean that_present_language = true && that.isSetLanguage();
      if (this_present_language || that_present_language) {
        if (!(this_present_language && that_present_language))
          return false;
        if (!this.language.equals(that.language))
          return false;
      }

      boolean this_present_country = true && this.isSetCountry();
      boolean that_present_country = true && that.isSetCountry();
      if (this_present_country || that_present_country) {
        if (!(this_present_country && that_present_country))
          return false;
        if (!this.country.equals(that.country))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getActivePurchaseVersions_args other = (getActivePurchaseVersions_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetStart(), other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSize(), other.isSetSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSize()) {
        lastComparison = TBaseHelper.compareTo(this.size, other.size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLanguage(), other.isSetLanguage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLanguage()) {
        lastComparison = TBaseHelper.compareTo(this.language, other.language);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCountry(), other.isSetCountry());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountry()) {
        lastComparison = TBaseHelper.compareTo(this.country, other.country);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // START
            if (field.type == TType.I64) {
              this.start = iprot.readI64();
              setStartIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SIZE
            if (field.type == TType.I32) {
              this.size = iprot.readI32();
              setSizeIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // LANGUAGE
            if (field.type == TType.STRING) {
              this.language = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // COUNTRY
            if (field.type == TType.STRING) {
              this.country = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(START_FIELD_DESC);
      oprot.writeI64(this.start);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIZE_FIELD_DESC);
      oprot.writeI32(this.size);
      oprot.writeFieldEnd();
      if (this.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(this.language);
        oprot.writeFieldEnd();
      }
      if (this.country != null) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeString(this.country);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getActivePurchaseVersions_args(");
      boolean first = true;

      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("size:");
      sb.append(this.size);
      first = false;
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("country:");
      if (this.country == null) {
        sb.append("null");
      } else {
        sb.append(this.country);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getActivePurchaseVersions_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getActivePurchaseVersions_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private ProductSimpleList success;
    private TalkException e;

    // isset id assignments

    public getActivePurchaseVersions_result() {
    }

    public getActivePurchaseVersions_result(
      ProductSimpleList success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getActivePurchaseVersions_result(getActivePurchaseVersions_result other) {
      if (other.isSetSuccess()) {
        this.success = new ProductSimpleList(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getActivePurchaseVersions_result deepCopy() {
      return new getActivePurchaseVersions_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ProductSimpleList getSuccess() {
      return this.success;
    }

    public void setSuccess(ProductSimpleList success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getActivePurchaseVersions_result)
        return this.equals((getActivePurchaseVersions_result)that);
      return false;
    }

    public boolean equals(getActivePurchaseVersions_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getActivePurchaseVersions_result other = (getActivePurchaseVersions_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new ProductSimpleList();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getActivePurchaseVersions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getCoinProducts_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getCoinProducts_args");

    private static final TField APP_STORE_CODE_FIELD_DESC = new TField("appStoreCode", TType.I32, (short)2);
    private static final TField COUNTRY_FIELD_DESC = new TField("country", TType.STRING, (short)3);
    private static final TField LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, (short)4);

    private PaymentType appStoreCode;
    private String country;
    private String language;

    // isset id assignments

    public getCoinProducts_args() {
    }

    public getCoinProducts_args(
      PaymentType appStoreCode,
      String country,
      String language)
    {
      this();
      this.appStoreCode = appStoreCode;
      this.country = country;
      this.language = language;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCoinProducts_args(getCoinProducts_args other) {
      if (other.isSetAppStoreCode()) {
        this.appStoreCode = other.appStoreCode;
      }
      if (other.isSetCountry()) {
        this.country = other.country;
      }
      if (other.isSetLanguage()) {
        this.language = other.language;
      }
    }

    public getCoinProducts_args deepCopy() {
      return new getCoinProducts_args(this);
    }

    public void clear() {
      this.appStoreCode = null;
      this.country = null;
      this.language = null;
    }

    /**
     * 
     * @see PaymentType
     */
    public PaymentType getAppStoreCode() {
      return this.appStoreCode;
    }

    /**
     * 
     * @see PaymentType
     */
    public void setAppStoreCode(PaymentType appStoreCode) {
      this.appStoreCode = appStoreCode;
    }

    public void unsetAppStoreCode() {
      this.appStoreCode = null;
    }

    /** Returns true if field appStoreCode is set (has been assigned a value) and false otherwise */
    public boolean isSetAppStoreCode() {
      return this.appStoreCode != null;
    }

    public void setAppStoreCodeIsSet(boolean value) {
      if (!value) {
        this.appStoreCode = null;
      }
    }

    public String getCountry() {
      return this.country;
    }

    public void setCountry(String country) {
      this.country = country;
    }

    public void unsetCountry() {
      this.country = null;
    }

    /** Returns true if field country is set (has been assigned a value) and false otherwise */
    public boolean isSetCountry() {
      return this.country != null;
    }

    public void setCountryIsSet(boolean value) {
      if (!value) {
        this.country = null;
      }
    }

    public String getLanguage() {
      return this.language;
    }

    public void setLanguage(String language) {
      this.language = language;
    }

    public void unsetLanguage() {
      this.language = null;
    }

    /** Returns true if field language is set (has been assigned a value) and false otherwise */
    public boolean isSetLanguage() {
      return this.language != null;
    }

    public void setLanguageIsSet(boolean value) {
      if (!value) {
        this.language = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCoinProducts_args)
        return this.equals((getCoinProducts_args)that);
      return false;
    }

    public boolean equals(getCoinProducts_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_appStoreCode = true && this.isSetAppStoreCode();
      boolean that_present_appStoreCode = true && that.isSetAppStoreCode();
      if (this_present_appStoreCode || that_present_appStoreCode) {
        if (!(this_present_appStoreCode && that_present_appStoreCode))
          return false;
        if (!this.appStoreCode.equals(that.appStoreCode))
          return false;
      }

      boolean this_present_country = true && this.isSetCountry();
      boolean that_present_country = true && that.isSetCountry();
      if (this_present_country || that_present_country) {
        if (!(this_present_country && that_present_country))
          return false;
        if (!this.country.equals(that.country))
          return false;
      }

      boolean this_present_language = true && this.isSetLanguage();
      boolean that_present_language = true && that.isSetLanguage();
      if (this_present_language || that_present_language) {
        if (!(this_present_language && that_present_language))
          return false;
        if (!this.language.equals(that.language))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getCoinProducts_args other = (getCoinProducts_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAppStoreCode(), other.isSetAppStoreCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppStoreCode()) {
        lastComparison = TBaseHelper.compareTo(this.appStoreCode, other.appStoreCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCountry(), other.isSetCountry());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountry()) {
        lastComparison = TBaseHelper.compareTo(this.country, other.country);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLanguage(), other.isSetLanguage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLanguage()) {
        lastComparison = TBaseHelper.compareTo(this.language, other.language);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // APP_STORE_CODE
            if (field.type == TType.I32) {
              this.appStoreCode = PaymentType.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // COUNTRY
            if (field.type == TType.STRING) {
              this.country = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // LANGUAGE
            if (field.type == TType.STRING) {
              this.language = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.appStoreCode != null) {
        oprot.writeFieldBegin(APP_STORE_CODE_FIELD_DESC);
        oprot.writeI32(this.appStoreCode.getValue());
        oprot.writeFieldEnd();
      }
      if (this.country != null) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeString(this.country);
        oprot.writeFieldEnd();
      }
      if (this.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(this.language);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getCoinProducts_args(");
      boolean first = true;

      sb.append("appStoreCode:");
      if (this.appStoreCode == null) {
        sb.append("null");
      } else {
        sb.append(this.appStoreCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("country:");
      if (this.country == null) {
        sb.append("null");
      } else {
        sb.append(this.country);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getCoinProducts_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getCoinProducts_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getCoinProducts_result() {
    }

    public getCoinProducts_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCoinProducts_result(getCoinProducts_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          CoinProductItem other_element = (CoinProductItem)other_enum.nextElement();
          __this__success.addElement(new CoinProductItem(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getCoinProducts_result deepCopy() {
      return new getCoinProducts_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(CoinProductItem elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCoinProducts_result)
        return this.equals((getCoinProducts_result)that);
      return false;
    }

    public boolean equals(getCoinProducts_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getCoinProducts_result other = (getCoinProducts_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list749 = iprot.readListBegin();
                this.success = new Vector(_list749.size);
                for (int _i750 = 0; _i750 < _list749.size; ++_i750)
                {
                  CoinProductItem _elem751;
                  _elem751 = new CoinProductItem();
                  _elem751.read(iprot);
                  this.success.addElement(_elem751);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter752_enum = this.success.elements(); _iter752_enum.hasMoreElements(); )           {
            CoinProductItem _iter752 = (CoinProductItem)_iter752_enum.nextElement();
            _iter752.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getCoinProducts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getCoinProductsByPgCode_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getCoinProductsByPgCode_args");

    private static final TField APP_STORE_CODE_FIELD_DESC = new TField("appStoreCode", TType.I32, (short)2);
    private static final TField PG_CODE_FIELD_DESC = new TField("pgCode", TType.I32, (short)3);
    private static final TField COUNTRY_FIELD_DESC = new TField("country", TType.STRING, (short)4);
    private static final TField LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, (short)5);

    private PaymentType appStoreCode;
    private PaymentPgType pgCode;
    private String country;
    private String language;

    // isset id assignments

    public getCoinProductsByPgCode_args() {
    }

    public getCoinProductsByPgCode_args(
      PaymentType appStoreCode,
      PaymentPgType pgCode,
      String country,
      String language)
    {
      this();
      this.appStoreCode = appStoreCode;
      this.pgCode = pgCode;
      this.country = country;
      this.language = language;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCoinProductsByPgCode_args(getCoinProductsByPgCode_args other) {
      if (other.isSetAppStoreCode()) {
        this.appStoreCode = other.appStoreCode;
      }
      if (other.isSetPgCode()) {
        this.pgCode = other.pgCode;
      }
      if (other.isSetCountry()) {
        this.country = other.country;
      }
      if (other.isSetLanguage()) {
        this.language = other.language;
      }
    }

    public getCoinProductsByPgCode_args deepCopy() {
      return new getCoinProductsByPgCode_args(this);
    }

    public void clear() {
      this.appStoreCode = null;
      this.pgCode = null;
      this.country = null;
      this.language = null;
    }

    /**
     * 
     * @see PaymentType
     */
    public PaymentType getAppStoreCode() {
      return this.appStoreCode;
    }

    /**
     * 
     * @see PaymentType
     */
    public void setAppStoreCode(PaymentType appStoreCode) {
      this.appStoreCode = appStoreCode;
    }

    public void unsetAppStoreCode() {
      this.appStoreCode = null;
    }

    /** Returns true if field appStoreCode is set (has been assigned a value) and false otherwise */
    public boolean isSetAppStoreCode() {
      return this.appStoreCode != null;
    }

    public void setAppStoreCodeIsSet(boolean value) {
      if (!value) {
        this.appStoreCode = null;
      }
    }

    /**
     * 
     * @see PaymentPgType
     */
    public PaymentPgType getPgCode() {
      return this.pgCode;
    }

    /**
     * 
     * @see PaymentPgType
     */
    public void setPgCode(PaymentPgType pgCode) {
      this.pgCode = pgCode;
    }

    public void unsetPgCode() {
      this.pgCode = null;
    }

    /** Returns true if field pgCode is set (has been assigned a value) and false otherwise */
    public boolean isSetPgCode() {
      return this.pgCode != null;
    }

    public void setPgCodeIsSet(boolean value) {
      if (!value) {
        this.pgCode = null;
      }
    }

    public String getCountry() {
      return this.country;
    }

    public void setCountry(String country) {
      this.country = country;
    }

    public void unsetCountry() {
      this.country = null;
    }

    /** Returns true if field country is set (has been assigned a value) and false otherwise */
    public boolean isSetCountry() {
      return this.country != null;
    }

    public void setCountryIsSet(boolean value) {
      if (!value) {
        this.country = null;
      }
    }

    public String getLanguage() {
      return this.language;
    }

    public void setLanguage(String language) {
      this.language = language;
    }

    public void unsetLanguage() {
      this.language = null;
    }

    /** Returns true if field language is set (has been assigned a value) and false otherwise */
    public boolean isSetLanguage() {
      return this.language != null;
    }

    public void setLanguageIsSet(boolean value) {
      if (!value) {
        this.language = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCoinProductsByPgCode_args)
        return this.equals((getCoinProductsByPgCode_args)that);
      return false;
    }

    public boolean equals(getCoinProductsByPgCode_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_appStoreCode = true && this.isSetAppStoreCode();
      boolean that_present_appStoreCode = true && that.isSetAppStoreCode();
      if (this_present_appStoreCode || that_present_appStoreCode) {
        if (!(this_present_appStoreCode && that_present_appStoreCode))
          return false;
        if (!this.appStoreCode.equals(that.appStoreCode))
          return false;
      }

      boolean this_present_pgCode = true && this.isSetPgCode();
      boolean that_present_pgCode = true && that.isSetPgCode();
      if (this_present_pgCode || that_present_pgCode) {
        if (!(this_present_pgCode && that_present_pgCode))
          return false;
        if (!this.pgCode.equals(that.pgCode))
          return false;
      }

      boolean this_present_country = true && this.isSetCountry();
      boolean that_present_country = true && that.isSetCountry();
      if (this_present_country || that_present_country) {
        if (!(this_present_country && that_present_country))
          return false;
        if (!this.country.equals(that.country))
          return false;
      }

      boolean this_present_language = true && this.isSetLanguage();
      boolean that_present_language = true && that.isSetLanguage();
      if (this_present_language || that_present_language) {
        if (!(this_present_language && that_present_language))
          return false;
        if (!this.language.equals(that.language))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getCoinProductsByPgCode_args other = (getCoinProductsByPgCode_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAppStoreCode(), other.isSetAppStoreCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppStoreCode()) {
        lastComparison = TBaseHelper.compareTo(this.appStoreCode, other.appStoreCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPgCode(), other.isSetPgCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPgCode()) {
        lastComparison = TBaseHelper.compareTo(this.pgCode, other.pgCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCountry(), other.isSetCountry());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountry()) {
        lastComparison = TBaseHelper.compareTo(this.country, other.country);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLanguage(), other.isSetLanguage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLanguage()) {
        lastComparison = TBaseHelper.compareTo(this.language, other.language);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // APP_STORE_CODE
            if (field.type == TType.I32) {
              this.appStoreCode = PaymentType.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PG_CODE
            if (field.type == TType.I32) {
              this.pgCode = PaymentPgType.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // COUNTRY
            if (field.type == TType.STRING) {
              this.country = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // LANGUAGE
            if (field.type == TType.STRING) {
              this.language = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.appStoreCode != null) {
        oprot.writeFieldBegin(APP_STORE_CODE_FIELD_DESC);
        oprot.writeI32(this.appStoreCode.getValue());
        oprot.writeFieldEnd();
      }
      if (this.pgCode != null) {
        oprot.writeFieldBegin(PG_CODE_FIELD_DESC);
        oprot.writeI32(this.pgCode.getValue());
        oprot.writeFieldEnd();
      }
      if (this.country != null) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeString(this.country);
        oprot.writeFieldEnd();
      }
      if (this.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(this.language);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getCoinProductsByPgCode_args(");
      boolean first = true;

      sb.append("appStoreCode:");
      if (this.appStoreCode == null) {
        sb.append("null");
      } else {
        sb.append(this.appStoreCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pgCode:");
      if (this.pgCode == null) {
        sb.append("null");
      } else {
        sb.append(this.pgCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("country:");
      if (this.country == null) {
        sb.append("null");
      } else {
        sb.append(this.country);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getCoinProductsByPgCode_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getCoinProductsByPgCode_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getCoinProductsByPgCode_result() {
    }

    public getCoinProductsByPgCode_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCoinProductsByPgCode_result(getCoinProductsByPgCode_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          CoinProductItem other_element = (CoinProductItem)other_enum.nextElement();
          __this__success.addElement(new CoinProductItem(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getCoinProductsByPgCode_result deepCopy() {
      return new getCoinProductsByPgCode_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(CoinProductItem elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCoinProductsByPgCode_result)
        return this.equals((getCoinProductsByPgCode_result)that);
      return false;
    }

    public boolean equals(getCoinProductsByPgCode_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getCoinProductsByPgCode_result other = (getCoinProductsByPgCode_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list753 = iprot.readListBegin();
                this.success = new Vector(_list753.size);
                for (int _i754 = 0; _i754 < _list753.size; ++_i754)
                {
                  CoinProductItem _elem755;
                  _elem755 = new CoinProductItem();
                  _elem755.read(iprot);
                  this.success.addElement(_elem755);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter756_enum = this.success.elements(); _iter756_enum.hasMoreElements(); )           {
            CoinProductItem _iter756 = (CoinProductItem)_iter756_enum.nextElement();
            _iter756.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getCoinProductsByPgCode_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getCoinPurchaseHistory_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getCoinPurchaseHistory_args");

    private static final TField REQUEST_FIELD_DESC = new TField("request", TType.STRUCT, (short)2);

    private CoinHistoryCondition request;

    // isset id assignments

    public getCoinPurchaseHistory_args() {
    }

    public getCoinPurchaseHistory_args(
      CoinHistoryCondition request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCoinPurchaseHistory_args(getCoinPurchaseHistory_args other) {
      if (other.isSetRequest()) {
        this.request = new CoinHistoryCondition(other.request);
      }
    }

    public getCoinPurchaseHistory_args deepCopy() {
      return new getCoinPurchaseHistory_args(this);
    }

    public void clear() {
      this.request = null;
    }

    public CoinHistoryCondition getRequest() {
      return this.request;
    }

    public void setRequest(CoinHistoryCondition request) {
      this.request = request;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCoinPurchaseHistory_args)
        return this.equals((getCoinPurchaseHistory_args)that);
      return false;
    }

    public boolean equals(getCoinPurchaseHistory_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getCoinPurchaseHistory_args other = (getCoinPurchaseHistory_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = this.request.compareTo(other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // REQUEST
            if (field.type == TType.STRUCT) {
              this.request = new CoinHistoryCondition();
              this.request.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.request != null) {
        oprot.writeFieldBegin(REQUEST_FIELD_DESC);
        this.request.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getCoinPurchaseHistory_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getCoinPurchaseHistory_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getCoinPurchaseHistory_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private CoinHistoryResult success;
    private TalkException e;

    // isset id assignments

    public getCoinPurchaseHistory_result() {
    }

    public getCoinPurchaseHistory_result(
      CoinHistoryResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCoinPurchaseHistory_result(getCoinPurchaseHistory_result other) {
      if (other.isSetSuccess()) {
        this.success = new CoinHistoryResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getCoinPurchaseHistory_result deepCopy() {
      return new getCoinPurchaseHistory_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public CoinHistoryResult getSuccess() {
      return this.success;
    }

    public void setSuccess(CoinHistoryResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCoinPurchaseHistory_result)
        return this.equals((getCoinPurchaseHistory_result)that);
      return false;
    }

    public boolean equals(getCoinPurchaseHistory_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getCoinPurchaseHistory_result other = (getCoinPurchaseHistory_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new CoinHistoryResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getCoinPurchaseHistory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getCoinUseAndRefundHistory_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getCoinUseAndRefundHistory_args");

    private static final TField REQUEST_FIELD_DESC = new TField("request", TType.STRUCT, (short)2);

    private CoinHistoryCondition request;

    // isset id assignments

    public getCoinUseAndRefundHistory_args() {
    }

    public getCoinUseAndRefundHistory_args(
      CoinHistoryCondition request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCoinUseAndRefundHistory_args(getCoinUseAndRefundHistory_args other) {
      if (other.isSetRequest()) {
        this.request = new CoinHistoryCondition(other.request);
      }
    }

    public getCoinUseAndRefundHistory_args deepCopy() {
      return new getCoinUseAndRefundHistory_args(this);
    }

    public void clear() {
      this.request = null;
    }

    public CoinHistoryCondition getRequest() {
      return this.request;
    }

    public void setRequest(CoinHistoryCondition request) {
      this.request = request;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCoinUseAndRefundHistory_args)
        return this.equals((getCoinUseAndRefundHistory_args)that);
      return false;
    }

    public boolean equals(getCoinUseAndRefundHistory_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getCoinUseAndRefundHistory_args other = (getCoinUseAndRefundHistory_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = this.request.compareTo(other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // REQUEST
            if (field.type == TType.STRUCT) {
              this.request = new CoinHistoryCondition();
              this.request.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.request != null) {
        oprot.writeFieldBegin(REQUEST_FIELD_DESC);
        this.request.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getCoinUseAndRefundHistory_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getCoinUseAndRefundHistory_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getCoinUseAndRefundHistory_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private CoinHistoryResult success;
    private TalkException e;

    // isset id assignments

    public getCoinUseAndRefundHistory_result() {
    }

    public getCoinUseAndRefundHistory_result(
      CoinHistoryResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCoinUseAndRefundHistory_result(getCoinUseAndRefundHistory_result other) {
      if (other.isSetSuccess()) {
        this.success = new CoinHistoryResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getCoinUseAndRefundHistory_result deepCopy() {
      return new getCoinUseAndRefundHistory_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public CoinHistoryResult getSuccess() {
      return this.success;
    }

    public void setSuccess(CoinHistoryResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCoinUseAndRefundHistory_result)
        return this.equals((getCoinUseAndRefundHistory_result)that);
      return false;
    }

    public boolean equals(getCoinUseAndRefundHistory_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getCoinUseAndRefundHistory_result other = (getCoinUseAndRefundHistory_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new CoinHistoryResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getCoinUseAndRefundHistory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getDownloads_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getDownloads_args");

    private static final TField START_FIELD_DESC = new TField("start", TType.I64, (short)2);
    private static final TField SIZE_FIELD_DESC = new TField("size", TType.I32, (short)3);
    private static final TField LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, (short)4);
    private static final TField COUNTRY_FIELD_DESC = new TField("country", TType.STRING, (short)5);

    private long start;
    private int size;
    private String language;
    private String country;

    // isset id assignments
    private static final int __START_ISSET_ID = 0;
    private static final int __SIZE_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public getDownloads_args() {
    }

    public getDownloads_args(
      long start,
      int size,
      String language,
      String country)
    {
      this();
      this.start = start;
      setStartIsSet(true);
      this.size = size;
      setSizeIsSet(true);
      this.language = language;
      this.country = country;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDownloads_args(getDownloads_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.start = other.start;
      this.size = other.size;
      if (other.isSetLanguage()) {
        this.language = other.language;
      }
      if (other.isSetCountry()) {
        this.country = other.country;
      }
    }

    public getDownloads_args deepCopy() {
      return new getDownloads_args(this);
    }

    public void clear() {
      setStartIsSet(false);
      this.start = 0;
      setSizeIsSet(false);
      this.size = 0;
      this.language = null;
      this.country = null;
    }

    public long getStart() {
      return this.start;
    }

    public void setStart(long start) {
      this.start = start;
      setStartIsSet(true);
    }

    public void unsetStart() {
      __isset_vector[__START_ISSET_ID] = false;
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return __isset_vector[__START_ISSET_ID];
    }

    public void setStartIsSet(boolean value) {
      __isset_vector[__START_ISSET_ID] = value;
    }

    public int getSize() {
      return this.size;
    }

    public void setSize(int size) {
      this.size = size;
      setSizeIsSet(true);
    }

    public void unsetSize() {
      __isset_vector[__SIZE_ISSET_ID] = false;
    }

    /** Returns true if field size is set (has been assigned a value) and false otherwise */
    public boolean isSetSize() {
      return __isset_vector[__SIZE_ISSET_ID];
    }

    public void setSizeIsSet(boolean value) {
      __isset_vector[__SIZE_ISSET_ID] = value;
    }

    public String getLanguage() {
      return this.language;
    }

    public void setLanguage(String language) {
      this.language = language;
    }

    public void unsetLanguage() {
      this.language = null;
    }

    /** Returns true if field language is set (has been assigned a value) and false otherwise */
    public boolean isSetLanguage() {
      return this.language != null;
    }

    public void setLanguageIsSet(boolean value) {
      if (!value) {
        this.language = null;
      }
    }

    public String getCountry() {
      return this.country;
    }

    public void setCountry(String country) {
      this.country = country;
    }

    public void unsetCountry() {
      this.country = null;
    }

    /** Returns true if field country is set (has been assigned a value) and false otherwise */
    public boolean isSetCountry() {
      return this.country != null;
    }

    public void setCountryIsSet(boolean value) {
      if (!value) {
        this.country = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDownloads_args)
        return this.equals((getDownloads_args)that);
      return false;
    }

    public boolean equals(getDownloads_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_size = true;
      boolean that_present_size = true;
      if (this_present_size || that_present_size) {
        if (!(this_present_size && that_present_size))
          return false;
        if (this.size != that.size)
          return false;
      }

      boolean this_present_language = true && this.isSetLanguage();
      boolean that_present_language = true && that.isSetLanguage();
      if (this_present_language || that_present_language) {
        if (!(this_present_language && that_present_language))
          return false;
        if (!this.language.equals(that.language))
          return false;
      }

      boolean this_present_country = true && this.isSetCountry();
      boolean that_present_country = true && that.isSetCountry();
      if (this_present_country || that_present_country) {
        if (!(this_present_country && that_present_country))
          return false;
        if (!this.country.equals(that.country))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getDownloads_args other = (getDownloads_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetStart(), other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSize(), other.isSetSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSize()) {
        lastComparison = TBaseHelper.compareTo(this.size, other.size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLanguage(), other.isSetLanguage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLanguage()) {
        lastComparison = TBaseHelper.compareTo(this.language, other.language);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCountry(), other.isSetCountry());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountry()) {
        lastComparison = TBaseHelper.compareTo(this.country, other.country);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // START
            if (field.type == TType.I64) {
              this.start = iprot.readI64();
              setStartIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SIZE
            if (field.type == TType.I32) {
              this.size = iprot.readI32();
              setSizeIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // LANGUAGE
            if (field.type == TType.STRING) {
              this.language = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // COUNTRY
            if (field.type == TType.STRING) {
              this.country = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(START_FIELD_DESC);
      oprot.writeI64(this.start);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIZE_FIELD_DESC);
      oprot.writeI32(this.size);
      oprot.writeFieldEnd();
      if (this.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(this.language);
        oprot.writeFieldEnd();
      }
      if (this.country != null) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeString(this.country);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getDownloads_args(");
      boolean first = true;

      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("size:");
      sb.append(this.size);
      first = false;
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("country:");
      if (this.country == null) {
        sb.append("null");
      } else {
        sb.append(this.country);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getDownloads_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getDownloads_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private ProductList success;
    private TalkException e;

    // isset id assignments

    public getDownloads_result() {
    }

    public getDownloads_result(
      ProductList success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDownloads_result(getDownloads_result other) {
      if (other.isSetSuccess()) {
        this.success = new ProductList(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getDownloads_result deepCopy() {
      return new getDownloads_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ProductList getSuccess() {
      return this.success;
    }

    public void setSuccess(ProductList success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDownloads_result)
        return this.equals((getDownloads_result)that);
      return false;
    }

    public boolean equals(getDownloads_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getDownloads_result other = (getDownloads_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new ProductList();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getDownloads_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getEventPackages_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getEventPackages_args");

    private static final TField START_FIELD_DESC = new TField("start", TType.I64, (short)2);
    private static final TField SIZE_FIELD_DESC = new TField("size", TType.I32, (short)3);
    private static final TField LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, (short)4);
    private static final TField COUNTRY_FIELD_DESC = new TField("country", TType.STRING, (short)5);

    private long start;
    private int size;
    private String language;
    private String country;

    // isset id assignments
    private static final int __START_ISSET_ID = 0;
    private static final int __SIZE_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public getEventPackages_args() {
    }

    public getEventPackages_args(
      long start,
      int size,
      String language,
      String country)
    {
      this();
      this.start = start;
      setStartIsSet(true);
      this.size = size;
      setSizeIsSet(true);
      this.language = language;
      this.country = country;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEventPackages_args(getEventPackages_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.start = other.start;
      this.size = other.size;
      if (other.isSetLanguage()) {
        this.language = other.language;
      }
      if (other.isSetCountry()) {
        this.country = other.country;
      }
    }

    public getEventPackages_args deepCopy() {
      return new getEventPackages_args(this);
    }

    public void clear() {
      setStartIsSet(false);
      this.start = 0;
      setSizeIsSet(false);
      this.size = 0;
      this.language = null;
      this.country = null;
    }

    public long getStart() {
      return this.start;
    }

    public void setStart(long start) {
      this.start = start;
      setStartIsSet(true);
    }

    public void unsetStart() {
      __isset_vector[__START_ISSET_ID] = false;
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return __isset_vector[__START_ISSET_ID];
    }

    public void setStartIsSet(boolean value) {
      __isset_vector[__START_ISSET_ID] = value;
    }

    public int getSize() {
      return this.size;
    }

    public void setSize(int size) {
      this.size = size;
      setSizeIsSet(true);
    }

    public void unsetSize() {
      __isset_vector[__SIZE_ISSET_ID] = false;
    }

    /** Returns true if field size is set (has been assigned a value) and false otherwise */
    public boolean isSetSize() {
      return __isset_vector[__SIZE_ISSET_ID];
    }

    public void setSizeIsSet(boolean value) {
      __isset_vector[__SIZE_ISSET_ID] = value;
    }

    public String getLanguage() {
      return this.language;
    }

    public void setLanguage(String language) {
      this.language = language;
    }

    public void unsetLanguage() {
      this.language = null;
    }

    /** Returns true if field language is set (has been assigned a value) and false otherwise */
    public boolean isSetLanguage() {
      return this.language != null;
    }

    public void setLanguageIsSet(boolean value) {
      if (!value) {
        this.language = null;
      }
    }

    public String getCountry() {
      return this.country;
    }

    public void setCountry(String country) {
      this.country = country;
    }

    public void unsetCountry() {
      this.country = null;
    }

    /** Returns true if field country is set (has been assigned a value) and false otherwise */
    public boolean isSetCountry() {
      return this.country != null;
    }

    public void setCountryIsSet(boolean value) {
      if (!value) {
        this.country = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEventPackages_args)
        return this.equals((getEventPackages_args)that);
      return false;
    }

    public boolean equals(getEventPackages_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_size = true;
      boolean that_present_size = true;
      if (this_present_size || that_present_size) {
        if (!(this_present_size && that_present_size))
          return false;
        if (this.size != that.size)
          return false;
      }

      boolean this_present_language = true && this.isSetLanguage();
      boolean that_present_language = true && that.isSetLanguage();
      if (this_present_language || that_present_language) {
        if (!(this_present_language && that_present_language))
          return false;
        if (!this.language.equals(that.language))
          return false;
      }

      boolean this_present_country = true && this.isSetCountry();
      boolean that_present_country = true && that.isSetCountry();
      if (this_present_country || that_present_country) {
        if (!(this_present_country && that_present_country))
          return false;
        if (!this.country.equals(that.country))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getEventPackages_args other = (getEventPackages_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetStart(), other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSize(), other.isSetSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSize()) {
        lastComparison = TBaseHelper.compareTo(this.size, other.size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLanguage(), other.isSetLanguage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLanguage()) {
        lastComparison = TBaseHelper.compareTo(this.language, other.language);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCountry(), other.isSetCountry());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountry()) {
        lastComparison = TBaseHelper.compareTo(this.country, other.country);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // START
            if (field.type == TType.I64) {
              this.start = iprot.readI64();
              setStartIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SIZE
            if (field.type == TType.I32) {
              this.size = iprot.readI32();
              setSizeIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // LANGUAGE
            if (field.type == TType.STRING) {
              this.language = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // COUNTRY
            if (field.type == TType.STRING) {
              this.country = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(START_FIELD_DESC);
      oprot.writeI64(this.start);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIZE_FIELD_DESC);
      oprot.writeI32(this.size);
      oprot.writeFieldEnd();
      if (this.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(this.language);
        oprot.writeFieldEnd();
      }
      if (this.country != null) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeString(this.country);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getEventPackages_args(");
      boolean first = true;

      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("size:");
      sb.append(this.size);
      first = false;
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("country:");
      if (this.country == null) {
        sb.append("null");
      } else {
        sb.append(this.country);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getEventPackages_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getEventPackages_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private ProductList success;
    private TalkException e;

    // isset id assignments

    public getEventPackages_result() {
    }

    public getEventPackages_result(
      ProductList success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEventPackages_result(getEventPackages_result other) {
      if (other.isSetSuccess()) {
        this.success = new ProductList(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getEventPackages_result deepCopy() {
      return new getEventPackages_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ProductList getSuccess() {
      return this.success;
    }

    public void setSuccess(ProductList success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEventPackages_result)
        return this.equals((getEventPackages_result)that);
      return false;
    }

    public boolean equals(getEventPackages_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getEventPackages_result other = (getEventPackages_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new ProductList();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getEventPackages_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNewlyReleasedPackages_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getNewlyReleasedPackages_args");

    private static final TField START_FIELD_DESC = new TField("start", TType.I64, (short)2);
    private static final TField SIZE_FIELD_DESC = new TField("size", TType.I32, (short)3);
    private static final TField LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, (short)4);
    private static final TField COUNTRY_FIELD_DESC = new TField("country", TType.STRING, (short)5);

    private long start;
    private int size;
    private String language;
    private String country;

    // isset id assignments
    private static final int __START_ISSET_ID = 0;
    private static final int __SIZE_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public getNewlyReleasedPackages_args() {
    }

    public getNewlyReleasedPackages_args(
      long start,
      int size,
      String language,
      String country)
    {
      this();
      this.start = start;
      setStartIsSet(true);
      this.size = size;
      setSizeIsSet(true);
      this.language = language;
      this.country = country;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNewlyReleasedPackages_args(getNewlyReleasedPackages_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.start = other.start;
      this.size = other.size;
      if (other.isSetLanguage()) {
        this.language = other.language;
      }
      if (other.isSetCountry()) {
        this.country = other.country;
      }
    }

    public getNewlyReleasedPackages_args deepCopy() {
      return new getNewlyReleasedPackages_args(this);
    }

    public void clear() {
      setStartIsSet(false);
      this.start = 0;
      setSizeIsSet(false);
      this.size = 0;
      this.language = null;
      this.country = null;
    }

    public long getStart() {
      return this.start;
    }

    public void setStart(long start) {
      this.start = start;
      setStartIsSet(true);
    }

    public void unsetStart() {
      __isset_vector[__START_ISSET_ID] = false;
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return __isset_vector[__START_ISSET_ID];
    }

    public void setStartIsSet(boolean value) {
      __isset_vector[__START_ISSET_ID] = value;
    }

    public int getSize() {
      return this.size;
    }

    public void setSize(int size) {
      this.size = size;
      setSizeIsSet(true);
    }

    public void unsetSize() {
      __isset_vector[__SIZE_ISSET_ID] = false;
    }

    /** Returns true if field size is set (has been assigned a value) and false otherwise */
    public boolean isSetSize() {
      return __isset_vector[__SIZE_ISSET_ID];
    }

    public void setSizeIsSet(boolean value) {
      __isset_vector[__SIZE_ISSET_ID] = value;
    }

    public String getLanguage() {
      return this.language;
    }

    public void setLanguage(String language) {
      this.language = language;
    }

    public void unsetLanguage() {
      this.language = null;
    }

    /** Returns true if field language is set (has been assigned a value) and false otherwise */
    public boolean isSetLanguage() {
      return this.language != null;
    }

    public void setLanguageIsSet(boolean value) {
      if (!value) {
        this.language = null;
      }
    }

    public String getCountry() {
      return this.country;
    }

    public void setCountry(String country) {
      this.country = country;
    }

    public void unsetCountry() {
      this.country = null;
    }

    /** Returns true if field country is set (has been assigned a value) and false otherwise */
    public boolean isSetCountry() {
      return this.country != null;
    }

    public void setCountryIsSet(boolean value) {
      if (!value) {
        this.country = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNewlyReleasedPackages_args)
        return this.equals((getNewlyReleasedPackages_args)that);
      return false;
    }

    public boolean equals(getNewlyReleasedPackages_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_size = true;
      boolean that_present_size = true;
      if (this_present_size || that_present_size) {
        if (!(this_present_size && that_present_size))
          return false;
        if (this.size != that.size)
          return false;
      }

      boolean this_present_language = true && this.isSetLanguage();
      boolean that_present_language = true && that.isSetLanguage();
      if (this_present_language || that_present_language) {
        if (!(this_present_language && that_present_language))
          return false;
        if (!this.language.equals(that.language))
          return false;
      }

      boolean this_present_country = true && this.isSetCountry();
      boolean that_present_country = true && that.isSetCountry();
      if (this_present_country || that_present_country) {
        if (!(this_present_country && that_present_country))
          return false;
        if (!this.country.equals(that.country))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getNewlyReleasedPackages_args other = (getNewlyReleasedPackages_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetStart(), other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSize(), other.isSetSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSize()) {
        lastComparison = TBaseHelper.compareTo(this.size, other.size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLanguage(), other.isSetLanguage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLanguage()) {
        lastComparison = TBaseHelper.compareTo(this.language, other.language);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCountry(), other.isSetCountry());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountry()) {
        lastComparison = TBaseHelper.compareTo(this.country, other.country);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // START
            if (field.type == TType.I64) {
              this.start = iprot.readI64();
              setStartIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SIZE
            if (field.type == TType.I32) {
              this.size = iprot.readI32();
              setSizeIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // LANGUAGE
            if (field.type == TType.STRING) {
              this.language = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // COUNTRY
            if (field.type == TType.STRING) {
              this.country = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(START_FIELD_DESC);
      oprot.writeI64(this.start);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIZE_FIELD_DESC);
      oprot.writeI32(this.size);
      oprot.writeFieldEnd();
      if (this.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(this.language);
        oprot.writeFieldEnd();
      }
      if (this.country != null) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeString(this.country);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getNewlyReleasedPackages_args(");
      boolean first = true;

      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("size:");
      sb.append(this.size);
      first = false;
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("country:");
      if (this.country == null) {
        sb.append("null");
      } else {
        sb.append(this.country);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNewlyReleasedPackages_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getNewlyReleasedPackages_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private ProductList success;
    private TalkException e;

    // isset id assignments

    public getNewlyReleasedPackages_result() {
    }

    public getNewlyReleasedPackages_result(
      ProductList success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNewlyReleasedPackages_result(getNewlyReleasedPackages_result other) {
      if (other.isSetSuccess()) {
        this.success = new ProductList(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getNewlyReleasedPackages_result deepCopy() {
      return new getNewlyReleasedPackages_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ProductList getSuccess() {
      return this.success;
    }

    public void setSuccess(ProductList success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNewlyReleasedPackages_result)
        return this.equals((getNewlyReleasedPackages_result)that);
      return false;
    }

    public boolean equals(getNewlyReleasedPackages_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getNewlyReleasedPackages_result other = (getNewlyReleasedPackages_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new ProductList();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getNewlyReleasedPackages_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPopularPackages_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPopularPackages_args");

    private static final TField START_FIELD_DESC = new TField("start", TType.I64, (short)2);
    private static final TField SIZE_FIELD_DESC = new TField("size", TType.I32, (short)3);
    private static final TField LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, (short)4);
    private static final TField COUNTRY_FIELD_DESC = new TField("country", TType.STRING, (short)5);

    private long start;
    private int size;
    private String language;
    private String country;

    // isset id assignments
    private static final int __START_ISSET_ID = 0;
    private static final int __SIZE_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public getPopularPackages_args() {
    }

    public getPopularPackages_args(
      long start,
      int size,
      String language,
      String country)
    {
      this();
      this.start = start;
      setStartIsSet(true);
      this.size = size;
      setSizeIsSet(true);
      this.language = language;
      this.country = country;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPopularPackages_args(getPopularPackages_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.start = other.start;
      this.size = other.size;
      if (other.isSetLanguage()) {
        this.language = other.language;
      }
      if (other.isSetCountry()) {
        this.country = other.country;
      }
    }

    public getPopularPackages_args deepCopy() {
      return new getPopularPackages_args(this);
    }

    public void clear() {
      setStartIsSet(false);
      this.start = 0;
      setSizeIsSet(false);
      this.size = 0;
      this.language = null;
      this.country = null;
    }

    public long getStart() {
      return this.start;
    }

    public void setStart(long start) {
      this.start = start;
      setStartIsSet(true);
    }

    public void unsetStart() {
      __isset_vector[__START_ISSET_ID] = false;
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return __isset_vector[__START_ISSET_ID];
    }

    public void setStartIsSet(boolean value) {
      __isset_vector[__START_ISSET_ID] = value;
    }

    public int getSize() {
      return this.size;
    }

    public void setSize(int size) {
      this.size = size;
      setSizeIsSet(true);
    }

    public void unsetSize() {
      __isset_vector[__SIZE_ISSET_ID] = false;
    }

    /** Returns true if field size is set (has been assigned a value) and false otherwise */
    public boolean isSetSize() {
      return __isset_vector[__SIZE_ISSET_ID];
    }

    public void setSizeIsSet(boolean value) {
      __isset_vector[__SIZE_ISSET_ID] = value;
    }

    public String getLanguage() {
      return this.language;
    }

    public void setLanguage(String language) {
      this.language = language;
    }

    public void unsetLanguage() {
      this.language = null;
    }

    /** Returns true if field language is set (has been assigned a value) and false otherwise */
    public boolean isSetLanguage() {
      return this.language != null;
    }

    public void setLanguageIsSet(boolean value) {
      if (!value) {
        this.language = null;
      }
    }

    public String getCountry() {
      return this.country;
    }

    public void setCountry(String country) {
      this.country = country;
    }

    public void unsetCountry() {
      this.country = null;
    }

    /** Returns true if field country is set (has been assigned a value) and false otherwise */
    public boolean isSetCountry() {
      return this.country != null;
    }

    public void setCountryIsSet(boolean value) {
      if (!value) {
        this.country = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPopularPackages_args)
        return this.equals((getPopularPackages_args)that);
      return false;
    }

    public boolean equals(getPopularPackages_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_size = true;
      boolean that_present_size = true;
      if (this_present_size || that_present_size) {
        if (!(this_present_size && that_present_size))
          return false;
        if (this.size != that.size)
          return false;
      }

      boolean this_present_language = true && this.isSetLanguage();
      boolean that_present_language = true && that.isSetLanguage();
      if (this_present_language || that_present_language) {
        if (!(this_present_language && that_present_language))
          return false;
        if (!this.language.equals(that.language))
          return false;
      }

      boolean this_present_country = true && this.isSetCountry();
      boolean that_present_country = true && that.isSetCountry();
      if (this_present_country || that_present_country) {
        if (!(this_present_country && that_present_country))
          return false;
        if (!this.country.equals(that.country))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPopularPackages_args other = (getPopularPackages_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetStart(), other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSize(), other.isSetSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSize()) {
        lastComparison = TBaseHelper.compareTo(this.size, other.size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLanguage(), other.isSetLanguage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLanguage()) {
        lastComparison = TBaseHelper.compareTo(this.language, other.language);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCountry(), other.isSetCountry());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountry()) {
        lastComparison = TBaseHelper.compareTo(this.country, other.country);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // START
            if (field.type == TType.I64) {
              this.start = iprot.readI64();
              setStartIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SIZE
            if (field.type == TType.I32) {
              this.size = iprot.readI32();
              setSizeIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // LANGUAGE
            if (field.type == TType.STRING) {
              this.language = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // COUNTRY
            if (field.type == TType.STRING) {
              this.country = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(START_FIELD_DESC);
      oprot.writeI64(this.start);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIZE_FIELD_DESC);
      oprot.writeI32(this.size);
      oprot.writeFieldEnd();
      if (this.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(this.language);
        oprot.writeFieldEnd();
      }
      if (this.country != null) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeString(this.country);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPopularPackages_args(");
      boolean first = true;

      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("size:");
      sb.append(this.size);
      first = false;
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("country:");
      if (this.country == null) {
        sb.append("null");
      } else {
        sb.append(this.country);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPopularPackages_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPopularPackages_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private ProductList success;
    private TalkException e;

    // isset id assignments

    public getPopularPackages_result() {
    }

    public getPopularPackages_result(
      ProductList success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPopularPackages_result(getPopularPackages_result other) {
      if (other.isSetSuccess()) {
        this.success = new ProductList(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getPopularPackages_result deepCopy() {
      return new getPopularPackages_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ProductList getSuccess() {
      return this.success;
    }

    public void setSuccess(ProductList success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPopularPackages_result)
        return this.equals((getPopularPackages_result)that);
      return false;
    }

    public boolean equals(getPopularPackages_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPopularPackages_result other = (getPopularPackages_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new ProductList();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPopularPackages_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPresentsReceived_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPresentsReceived_args");

    private static final TField START_FIELD_DESC = new TField("start", TType.I64, (short)2);
    private static final TField SIZE_FIELD_DESC = new TField("size", TType.I32, (short)3);
    private static final TField LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, (short)4);
    private static final TField COUNTRY_FIELD_DESC = new TField("country", TType.STRING, (short)5);

    private long start;
    private int size;
    private String language;
    private String country;

    // isset id assignments
    private static final int __START_ISSET_ID = 0;
    private static final int __SIZE_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public getPresentsReceived_args() {
    }

    public getPresentsReceived_args(
      long start,
      int size,
      String language,
      String country)
    {
      this();
      this.start = start;
      setStartIsSet(true);
      this.size = size;
      setSizeIsSet(true);
      this.language = language;
      this.country = country;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPresentsReceived_args(getPresentsReceived_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.start = other.start;
      this.size = other.size;
      if (other.isSetLanguage()) {
        this.language = other.language;
      }
      if (other.isSetCountry()) {
        this.country = other.country;
      }
    }

    public getPresentsReceived_args deepCopy() {
      return new getPresentsReceived_args(this);
    }

    public void clear() {
      setStartIsSet(false);
      this.start = 0;
      setSizeIsSet(false);
      this.size = 0;
      this.language = null;
      this.country = null;
    }

    public long getStart() {
      return this.start;
    }

    public void setStart(long start) {
      this.start = start;
      setStartIsSet(true);
    }

    public void unsetStart() {
      __isset_vector[__START_ISSET_ID] = false;
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return __isset_vector[__START_ISSET_ID];
    }

    public void setStartIsSet(boolean value) {
      __isset_vector[__START_ISSET_ID] = value;
    }

    public int getSize() {
      return this.size;
    }

    public void setSize(int size) {
      this.size = size;
      setSizeIsSet(true);
    }

    public void unsetSize() {
      __isset_vector[__SIZE_ISSET_ID] = false;
    }

    /** Returns true if field size is set (has been assigned a value) and false otherwise */
    public boolean isSetSize() {
      return __isset_vector[__SIZE_ISSET_ID];
    }

    public void setSizeIsSet(boolean value) {
      __isset_vector[__SIZE_ISSET_ID] = value;
    }

    public String getLanguage() {
      return this.language;
    }

    public void setLanguage(String language) {
      this.language = language;
    }

    public void unsetLanguage() {
      this.language = null;
    }

    /** Returns true if field language is set (has been assigned a value) and false otherwise */
    public boolean isSetLanguage() {
      return this.language != null;
    }

    public void setLanguageIsSet(boolean value) {
      if (!value) {
        this.language = null;
      }
    }

    public String getCountry() {
      return this.country;
    }

    public void setCountry(String country) {
      this.country = country;
    }

    public void unsetCountry() {
      this.country = null;
    }

    /** Returns true if field country is set (has been assigned a value) and false otherwise */
    public boolean isSetCountry() {
      return this.country != null;
    }

    public void setCountryIsSet(boolean value) {
      if (!value) {
        this.country = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPresentsReceived_args)
        return this.equals((getPresentsReceived_args)that);
      return false;
    }

    public boolean equals(getPresentsReceived_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_size = true;
      boolean that_present_size = true;
      if (this_present_size || that_present_size) {
        if (!(this_present_size && that_present_size))
          return false;
        if (this.size != that.size)
          return false;
      }

      boolean this_present_language = true && this.isSetLanguage();
      boolean that_present_language = true && that.isSetLanguage();
      if (this_present_language || that_present_language) {
        if (!(this_present_language && that_present_language))
          return false;
        if (!this.language.equals(that.language))
          return false;
      }

      boolean this_present_country = true && this.isSetCountry();
      boolean that_present_country = true && that.isSetCountry();
      if (this_present_country || that_present_country) {
        if (!(this_present_country && that_present_country))
          return false;
        if (!this.country.equals(that.country))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPresentsReceived_args other = (getPresentsReceived_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetStart(), other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSize(), other.isSetSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSize()) {
        lastComparison = TBaseHelper.compareTo(this.size, other.size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLanguage(), other.isSetLanguage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLanguage()) {
        lastComparison = TBaseHelper.compareTo(this.language, other.language);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCountry(), other.isSetCountry());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountry()) {
        lastComparison = TBaseHelper.compareTo(this.country, other.country);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // START
            if (field.type == TType.I64) {
              this.start = iprot.readI64();
              setStartIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SIZE
            if (field.type == TType.I32) {
              this.size = iprot.readI32();
              setSizeIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // LANGUAGE
            if (field.type == TType.STRING) {
              this.language = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // COUNTRY
            if (field.type == TType.STRING) {
              this.country = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(START_FIELD_DESC);
      oprot.writeI64(this.start);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIZE_FIELD_DESC);
      oprot.writeI32(this.size);
      oprot.writeFieldEnd();
      if (this.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(this.language);
        oprot.writeFieldEnd();
      }
      if (this.country != null) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeString(this.country);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPresentsReceived_args(");
      boolean first = true;

      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("size:");
      sb.append(this.size);
      first = false;
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("country:");
      if (this.country == null) {
        sb.append("null");
      } else {
        sb.append(this.country);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPresentsReceived_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPresentsReceived_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private ProductList success;
    private TalkException e;

    // isset id assignments

    public getPresentsReceived_result() {
    }

    public getPresentsReceived_result(
      ProductList success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPresentsReceived_result(getPresentsReceived_result other) {
      if (other.isSetSuccess()) {
        this.success = new ProductList(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getPresentsReceived_result deepCopy() {
      return new getPresentsReceived_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ProductList getSuccess() {
      return this.success;
    }

    public void setSuccess(ProductList success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPresentsReceived_result)
        return this.equals((getPresentsReceived_result)that);
      return false;
    }

    public boolean equals(getPresentsReceived_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPresentsReceived_result other = (getPresentsReceived_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new ProductList();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPresentsReceived_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPresentsSent_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPresentsSent_args");

    private static final TField START_FIELD_DESC = new TField("start", TType.I64, (short)2);
    private static final TField SIZE_FIELD_DESC = new TField("size", TType.I32, (short)3);
    private static final TField LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, (short)4);
    private static final TField COUNTRY_FIELD_DESC = new TField("country", TType.STRING, (short)5);

    private long start;
    private int size;
    private String language;
    private String country;

    // isset id assignments
    private static final int __START_ISSET_ID = 0;
    private static final int __SIZE_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public getPresentsSent_args() {
    }

    public getPresentsSent_args(
      long start,
      int size,
      String language,
      String country)
    {
      this();
      this.start = start;
      setStartIsSet(true);
      this.size = size;
      setSizeIsSet(true);
      this.language = language;
      this.country = country;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPresentsSent_args(getPresentsSent_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.start = other.start;
      this.size = other.size;
      if (other.isSetLanguage()) {
        this.language = other.language;
      }
      if (other.isSetCountry()) {
        this.country = other.country;
      }
    }

    public getPresentsSent_args deepCopy() {
      return new getPresentsSent_args(this);
    }

    public void clear() {
      setStartIsSet(false);
      this.start = 0;
      setSizeIsSet(false);
      this.size = 0;
      this.language = null;
      this.country = null;
    }

    public long getStart() {
      return this.start;
    }

    public void setStart(long start) {
      this.start = start;
      setStartIsSet(true);
    }

    public void unsetStart() {
      __isset_vector[__START_ISSET_ID] = false;
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return __isset_vector[__START_ISSET_ID];
    }

    public void setStartIsSet(boolean value) {
      __isset_vector[__START_ISSET_ID] = value;
    }

    public int getSize() {
      return this.size;
    }

    public void setSize(int size) {
      this.size = size;
      setSizeIsSet(true);
    }

    public void unsetSize() {
      __isset_vector[__SIZE_ISSET_ID] = false;
    }

    /** Returns true if field size is set (has been assigned a value) and false otherwise */
    public boolean isSetSize() {
      return __isset_vector[__SIZE_ISSET_ID];
    }

    public void setSizeIsSet(boolean value) {
      __isset_vector[__SIZE_ISSET_ID] = value;
    }

    public String getLanguage() {
      return this.language;
    }

    public void setLanguage(String language) {
      this.language = language;
    }

    public void unsetLanguage() {
      this.language = null;
    }

    /** Returns true if field language is set (has been assigned a value) and false otherwise */
    public boolean isSetLanguage() {
      return this.language != null;
    }

    public void setLanguageIsSet(boolean value) {
      if (!value) {
        this.language = null;
      }
    }

    public String getCountry() {
      return this.country;
    }

    public void setCountry(String country) {
      this.country = country;
    }

    public void unsetCountry() {
      this.country = null;
    }

    /** Returns true if field country is set (has been assigned a value) and false otherwise */
    public boolean isSetCountry() {
      return this.country != null;
    }

    public void setCountryIsSet(boolean value) {
      if (!value) {
        this.country = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPresentsSent_args)
        return this.equals((getPresentsSent_args)that);
      return false;
    }

    public boolean equals(getPresentsSent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_size = true;
      boolean that_present_size = true;
      if (this_present_size || that_present_size) {
        if (!(this_present_size && that_present_size))
          return false;
        if (this.size != that.size)
          return false;
      }

      boolean this_present_language = true && this.isSetLanguage();
      boolean that_present_language = true && that.isSetLanguage();
      if (this_present_language || that_present_language) {
        if (!(this_present_language && that_present_language))
          return false;
        if (!this.language.equals(that.language))
          return false;
      }

      boolean this_present_country = true && this.isSetCountry();
      boolean that_present_country = true && that.isSetCountry();
      if (this_present_country || that_present_country) {
        if (!(this_present_country && that_present_country))
          return false;
        if (!this.country.equals(that.country))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPresentsSent_args other = (getPresentsSent_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetStart(), other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSize(), other.isSetSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSize()) {
        lastComparison = TBaseHelper.compareTo(this.size, other.size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLanguage(), other.isSetLanguage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLanguage()) {
        lastComparison = TBaseHelper.compareTo(this.language, other.language);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCountry(), other.isSetCountry());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountry()) {
        lastComparison = TBaseHelper.compareTo(this.country, other.country);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // START
            if (field.type == TType.I64) {
              this.start = iprot.readI64();
              setStartIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SIZE
            if (field.type == TType.I32) {
              this.size = iprot.readI32();
              setSizeIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // LANGUAGE
            if (field.type == TType.STRING) {
              this.language = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // COUNTRY
            if (field.type == TType.STRING) {
              this.country = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(START_FIELD_DESC);
      oprot.writeI64(this.start);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIZE_FIELD_DESC);
      oprot.writeI32(this.size);
      oprot.writeFieldEnd();
      if (this.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(this.language);
        oprot.writeFieldEnd();
      }
      if (this.country != null) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeString(this.country);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPresentsSent_args(");
      boolean first = true;

      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("size:");
      sb.append(this.size);
      first = false;
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("country:");
      if (this.country == null) {
        sb.append("null");
      } else {
        sb.append(this.country);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPresentsSent_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPresentsSent_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private ProductList success;
    private TalkException e;

    // isset id assignments

    public getPresentsSent_result() {
    }

    public getPresentsSent_result(
      ProductList success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPresentsSent_result(getPresentsSent_result other) {
      if (other.isSetSuccess()) {
        this.success = new ProductList(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getPresentsSent_result deepCopy() {
      return new getPresentsSent_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ProductList getSuccess() {
      return this.success;
    }

    public void setSuccess(ProductList success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPresentsSent_result)
        return this.equals((getPresentsSent_result)that);
      return false;
    }

    public boolean equals(getPresentsSent_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPresentsSent_result other = (getPresentsSent_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new ProductList();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPresentsSent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getProduct_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getProduct_args");

    private static final TField PACKAGE_ID_FIELD_DESC = new TField("packageID", TType.I64, (short)2);
    private static final TField LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, (short)3);
    private static final TField COUNTRY_FIELD_DESC = new TField("country", TType.STRING, (short)4);

    private long packageID;
    private String language;
    private String country;

    // isset id assignments
    private static final int __PACKAGEID_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getProduct_args() {
    }

    public getProduct_args(
      long packageID,
      String language,
      String country)
    {
      this();
      this.packageID = packageID;
      setPackageIDIsSet(true);
      this.language = language;
      this.country = country;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProduct_args(getProduct_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.packageID = other.packageID;
      if (other.isSetLanguage()) {
        this.language = other.language;
      }
      if (other.isSetCountry()) {
        this.country = other.country;
      }
    }

    public getProduct_args deepCopy() {
      return new getProduct_args(this);
    }

    public void clear() {
      setPackageIDIsSet(false);
      this.packageID = 0;
      this.language = null;
      this.country = null;
    }

    public long getPackageID() {
      return this.packageID;
    }

    public void setPackageID(long packageID) {
      this.packageID = packageID;
      setPackageIDIsSet(true);
    }

    public void unsetPackageID() {
      __isset_vector[__PACKAGEID_ISSET_ID] = false;
    }

    /** Returns true if field packageID is set (has been assigned a value) and false otherwise */
    public boolean isSetPackageID() {
      return __isset_vector[__PACKAGEID_ISSET_ID];
    }

    public void setPackageIDIsSet(boolean value) {
      __isset_vector[__PACKAGEID_ISSET_ID] = value;
    }

    public String getLanguage() {
      return this.language;
    }

    public void setLanguage(String language) {
      this.language = language;
    }

    public void unsetLanguage() {
      this.language = null;
    }

    /** Returns true if field language is set (has been assigned a value) and false otherwise */
    public boolean isSetLanguage() {
      return this.language != null;
    }

    public void setLanguageIsSet(boolean value) {
      if (!value) {
        this.language = null;
      }
    }

    public String getCountry() {
      return this.country;
    }

    public void setCountry(String country) {
      this.country = country;
    }

    public void unsetCountry() {
      this.country = null;
    }

    /** Returns true if field country is set (has been assigned a value) and false otherwise */
    public boolean isSetCountry() {
      return this.country != null;
    }

    public void setCountryIsSet(boolean value) {
      if (!value) {
        this.country = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProduct_args)
        return this.equals((getProduct_args)that);
      return false;
    }

    public boolean equals(getProduct_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_packageID = true;
      boolean that_present_packageID = true;
      if (this_present_packageID || that_present_packageID) {
        if (!(this_present_packageID && that_present_packageID))
          return false;
        if (this.packageID != that.packageID)
          return false;
      }

      boolean this_present_language = true && this.isSetLanguage();
      boolean that_present_language = true && that.isSetLanguage();
      if (this_present_language || that_present_language) {
        if (!(this_present_language && that_present_language))
          return false;
        if (!this.language.equals(that.language))
          return false;
      }

      boolean this_present_country = true && this.isSetCountry();
      boolean that_present_country = true && that.isSetCountry();
      if (this_present_country || that_present_country) {
        if (!(this_present_country && that_present_country))
          return false;
        if (!this.country.equals(that.country))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getProduct_args other = (getProduct_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetPackageID(), other.isSetPackageID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPackageID()) {
        lastComparison = TBaseHelper.compareTo(this.packageID, other.packageID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLanguage(), other.isSetLanguage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLanguage()) {
        lastComparison = TBaseHelper.compareTo(this.language, other.language);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCountry(), other.isSetCountry());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountry()) {
        lastComparison = TBaseHelper.compareTo(this.country, other.country);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // PACKAGE_ID
            if (field.type == TType.I64) {
              this.packageID = iprot.readI64();
              setPackageIDIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // LANGUAGE
            if (field.type == TType.STRING) {
              this.language = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // COUNTRY
            if (field.type == TType.STRING) {
              this.country = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PACKAGE_ID_FIELD_DESC);
      oprot.writeI64(this.packageID);
      oprot.writeFieldEnd();
      if (this.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(this.language);
        oprot.writeFieldEnd();
      }
      if (this.country != null) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeString(this.country);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getProduct_args(");
      boolean first = true;

      sb.append("packageID:");
      sb.append(this.packageID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("country:");
      if (this.country == null) {
        sb.append("null");
      } else {
        sb.append(this.country);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getProduct_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getProduct_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Product success;
    private TalkException e;

    // isset id assignments

    public getProduct_result() {
    }

    public getProduct_result(
      Product success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProduct_result(getProduct_result other) {
      if (other.isSetSuccess()) {
        this.success = new Product(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getProduct_result deepCopy() {
      return new getProduct_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Product getSuccess() {
      return this.success;
    }

    public void setSuccess(Product success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProduct_result)
        return this.equals((getProduct_result)that);
      return false;
    }

    public boolean equals(getProduct_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getProduct_result other = (getProduct_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Product();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getProduct_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getProductList_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getProductList_args");

    private static final TField PRODUCT_ID_LIST_FIELD_DESC = new TField("productIdList", TType.LIST, (short)2);
    private static final TField LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, (short)3);
    private static final TField COUNTRY_FIELD_DESC = new TField("country", TType.STRING, (short)4);

    private Vector productIdList;
    private String language;
    private String country;

    // isset id assignments

    public getProductList_args() {
    }

    public getProductList_args(
      Vector productIdList,
      String language,
      String country)
    {
      this();
      this.productIdList = productIdList;
      this.language = language;
      this.country = country;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductList_args(getProductList_args other) {
      if (other.isSetProductIdList()) {
        Vector __this__productIdList = new Vector();
        for (Enumeration other_enum = other.productIdList.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__productIdList.addElement(other_element);
        }
        this.productIdList = __this__productIdList;
      }
      if (other.isSetLanguage()) {
        this.language = other.language;
      }
      if (other.isSetCountry()) {
        this.country = other.country;
      }
    }

    public getProductList_args deepCopy() {
      return new getProductList_args(this);
    }

    public void clear() {
      this.productIdList = null;
      this.language = null;
      this.country = null;
    }

    public int getProductIdListSize() {
      return (this.productIdList == null) ? 0 : this.productIdList.size();
    }

    public Enumeration getProductIdListEnumeration() {
      return (this.productIdList == null) ? null : this.productIdList.elements();
    }

    public void addToProductIdList(String elem) {
      if (this.productIdList == null) {
        this.productIdList = new Vector();
      }
      this.productIdList.addElement(elem);
    }

    public Vector getProductIdList() {
      return this.productIdList;
    }

    public void setProductIdList(Vector productIdList) {
      this.productIdList = productIdList;
    }

    public void unsetProductIdList() {
      this.productIdList = null;
    }

    /** Returns true if field productIdList is set (has been assigned a value) and false otherwise */
    public boolean isSetProductIdList() {
      return this.productIdList != null;
    }

    public void setProductIdListIsSet(boolean value) {
      if (!value) {
        this.productIdList = null;
      }
    }

    public String getLanguage() {
      return this.language;
    }

    public void setLanguage(String language) {
      this.language = language;
    }

    public void unsetLanguage() {
      this.language = null;
    }

    /** Returns true if field language is set (has been assigned a value) and false otherwise */
    public boolean isSetLanguage() {
      return this.language != null;
    }

    public void setLanguageIsSet(boolean value) {
      if (!value) {
        this.language = null;
      }
    }

    public String getCountry() {
      return this.country;
    }

    public void setCountry(String country) {
      this.country = country;
    }

    public void unsetCountry() {
      this.country = null;
    }

    /** Returns true if field country is set (has been assigned a value) and false otherwise */
    public boolean isSetCountry() {
      return this.country != null;
    }

    public void setCountryIsSet(boolean value) {
      if (!value) {
        this.country = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductList_args)
        return this.equals((getProductList_args)that);
      return false;
    }

    public boolean equals(getProductList_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_productIdList = true && this.isSetProductIdList();
      boolean that_present_productIdList = true && that.isSetProductIdList();
      if (this_present_productIdList || that_present_productIdList) {
        if (!(this_present_productIdList && that_present_productIdList))
          return false;
        if (!this.productIdList.equals(that.productIdList))
          return false;
      }

      boolean this_present_language = true && this.isSetLanguage();
      boolean that_present_language = true && that.isSetLanguage();
      if (this_present_language || that_present_language) {
        if (!(this_present_language && that_present_language))
          return false;
        if (!this.language.equals(that.language))
          return false;
      }

      boolean this_present_country = true && this.isSetCountry();
      boolean that_present_country = true && that.isSetCountry();
      if (this_present_country || that_present_country) {
        if (!(this_present_country && that_present_country))
          return false;
        if (!this.country.equals(that.country))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getProductList_args other = (getProductList_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetProductIdList(), other.isSetProductIdList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductIdList()) {
        lastComparison = TBaseHelper.compareTo(this.productIdList, other.productIdList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLanguage(), other.isSetLanguage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLanguage()) {
        lastComparison = TBaseHelper.compareTo(this.language, other.language);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCountry(), other.isSetCountry());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountry()) {
        lastComparison = TBaseHelper.compareTo(this.country, other.country);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // PRODUCT_ID_LIST
            if (field.type == TType.LIST) {
              {
                TList _list757 = iprot.readListBegin();
                this.productIdList = new Vector(_list757.size);
                for (int _i758 = 0; _i758 < _list757.size; ++_i758)
                {
                  String _elem759;
                  _elem759 = iprot.readString();
                  this.productIdList.addElement(_elem759);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // LANGUAGE
            if (field.type == TType.STRING) {
              this.language = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // COUNTRY
            if (field.type == TType.STRING) {
              this.country = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.productIdList != null) {
        oprot.writeFieldBegin(PRODUCT_ID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.productIdList.size()));
          for (Enumeration _iter760_enum = this.productIdList.elements(); _iter760_enum.hasMoreElements(); )           {
            String _iter760 = (String)_iter760_enum.nextElement();
            oprot.writeString(_iter760);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(this.language);
        oprot.writeFieldEnd();
      }
      if (this.country != null) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeString(this.country);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getProductList_args(");
      boolean first = true;

      sb.append("productIdList:");
      if (this.productIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.productIdList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("country:");
      if (this.country == null) {
        sb.append("null");
      } else {
        sb.append(this.country);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getProductList_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getProductList_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private ProductList success;
    private TalkException e;

    // isset id assignments

    public getProductList_result() {
    }

    public getProductList_result(
      ProductList success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductList_result(getProductList_result other) {
      if (other.isSetSuccess()) {
        this.success = new ProductList(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getProductList_result deepCopy() {
      return new getProductList_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ProductList getSuccess() {
      return this.success;
    }

    public void setSuccess(ProductList success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductList_result)
        return this.equals((getProductList_result)that);
      return false;
    }

    public boolean equals(getProductList_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getProductList_result other = (getProductList_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new ProductList();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getProductList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getProductListWithCarrier_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getProductListWithCarrier_args");

    private static final TField PRODUCT_ID_LIST_FIELD_DESC = new TField("productIdList", TType.LIST, (short)2);
    private static final TField LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, (short)3);
    private static final TField COUNTRY_FIELD_DESC = new TField("country", TType.STRING, (short)4);
    private static final TField CARRIER_CODE_FIELD_DESC = new TField("carrierCode", TType.STRING, (short)5);

    private Vector productIdList;
    private String language;
    private String country;
    private String carrierCode;

    // isset id assignments

    public getProductListWithCarrier_args() {
    }

    public getProductListWithCarrier_args(
      Vector productIdList,
      String language,
      String country,
      String carrierCode)
    {
      this();
      this.productIdList = productIdList;
      this.language = language;
      this.country = country;
      this.carrierCode = carrierCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductListWithCarrier_args(getProductListWithCarrier_args other) {
      if (other.isSetProductIdList()) {
        Vector __this__productIdList = new Vector();
        for (Enumeration other_enum = other.productIdList.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__productIdList.addElement(other_element);
        }
        this.productIdList = __this__productIdList;
      }
      if (other.isSetLanguage()) {
        this.language = other.language;
      }
      if (other.isSetCountry()) {
        this.country = other.country;
      }
      if (other.isSetCarrierCode()) {
        this.carrierCode = other.carrierCode;
      }
    }

    public getProductListWithCarrier_args deepCopy() {
      return new getProductListWithCarrier_args(this);
    }

    public void clear() {
      this.productIdList = null;
      this.language = null;
      this.country = null;
      this.carrierCode = null;
    }

    public int getProductIdListSize() {
      return (this.productIdList == null) ? 0 : this.productIdList.size();
    }

    public Enumeration getProductIdListEnumeration() {
      return (this.productIdList == null) ? null : this.productIdList.elements();
    }

    public void addToProductIdList(String elem) {
      if (this.productIdList == null) {
        this.productIdList = new Vector();
      }
      this.productIdList.addElement(elem);
    }

    public Vector getProductIdList() {
      return this.productIdList;
    }

    public void setProductIdList(Vector productIdList) {
      this.productIdList = productIdList;
    }

    public void unsetProductIdList() {
      this.productIdList = null;
    }

    /** Returns true if field productIdList is set (has been assigned a value) and false otherwise */
    public boolean isSetProductIdList() {
      return this.productIdList != null;
    }

    public void setProductIdListIsSet(boolean value) {
      if (!value) {
        this.productIdList = null;
      }
    }

    public String getLanguage() {
      return this.language;
    }

    public void setLanguage(String language) {
      this.language = language;
    }

    public void unsetLanguage() {
      this.language = null;
    }

    /** Returns true if field language is set (has been assigned a value) and false otherwise */
    public boolean isSetLanguage() {
      return this.language != null;
    }

    public void setLanguageIsSet(boolean value) {
      if (!value) {
        this.language = null;
      }
    }

    public String getCountry() {
      return this.country;
    }

    public void setCountry(String country) {
      this.country = country;
    }

    public void unsetCountry() {
      this.country = null;
    }

    /** Returns true if field country is set (has been assigned a value) and false otherwise */
    public boolean isSetCountry() {
      return this.country != null;
    }

    public void setCountryIsSet(boolean value) {
      if (!value) {
        this.country = null;
      }
    }

    public String getCarrierCode() {
      return this.carrierCode;
    }

    public void setCarrierCode(String carrierCode) {
      this.carrierCode = carrierCode;
    }

    public void unsetCarrierCode() {
      this.carrierCode = null;
    }

    /** Returns true if field carrierCode is set (has been assigned a value) and false otherwise */
    public boolean isSetCarrierCode() {
      return this.carrierCode != null;
    }

    public void setCarrierCodeIsSet(boolean value) {
      if (!value) {
        this.carrierCode = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductListWithCarrier_args)
        return this.equals((getProductListWithCarrier_args)that);
      return false;
    }

    public boolean equals(getProductListWithCarrier_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_productIdList = true && this.isSetProductIdList();
      boolean that_present_productIdList = true && that.isSetProductIdList();
      if (this_present_productIdList || that_present_productIdList) {
        if (!(this_present_productIdList && that_present_productIdList))
          return false;
        if (!this.productIdList.equals(that.productIdList))
          return false;
      }

      boolean this_present_language = true && this.isSetLanguage();
      boolean that_present_language = true && that.isSetLanguage();
      if (this_present_language || that_present_language) {
        if (!(this_present_language && that_present_language))
          return false;
        if (!this.language.equals(that.language))
          return false;
      }

      boolean this_present_country = true && this.isSetCountry();
      boolean that_present_country = true && that.isSetCountry();
      if (this_present_country || that_present_country) {
        if (!(this_present_country && that_present_country))
          return false;
        if (!this.country.equals(that.country))
          return false;
      }

      boolean this_present_carrierCode = true && this.isSetCarrierCode();
      boolean that_present_carrierCode = true && that.isSetCarrierCode();
      if (this_present_carrierCode || that_present_carrierCode) {
        if (!(this_present_carrierCode && that_present_carrierCode))
          return false;
        if (!this.carrierCode.equals(that.carrierCode))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getProductListWithCarrier_args other = (getProductListWithCarrier_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetProductIdList(), other.isSetProductIdList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProductIdList()) {
        lastComparison = TBaseHelper.compareTo(this.productIdList, other.productIdList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLanguage(), other.isSetLanguage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLanguage()) {
        lastComparison = TBaseHelper.compareTo(this.language, other.language);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCountry(), other.isSetCountry());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountry()) {
        lastComparison = TBaseHelper.compareTo(this.country, other.country);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCarrierCode(), other.isSetCarrierCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCarrierCode()) {
        lastComparison = TBaseHelper.compareTo(this.carrierCode, other.carrierCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // PRODUCT_ID_LIST
            if (field.type == TType.LIST) {
              {
                TList _list761 = iprot.readListBegin();
                this.productIdList = new Vector(_list761.size);
                for (int _i762 = 0; _i762 < _list761.size; ++_i762)
                {
                  String _elem763;
                  _elem763 = iprot.readString();
                  this.productIdList.addElement(_elem763);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // LANGUAGE
            if (field.type == TType.STRING) {
              this.language = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // COUNTRY
            if (field.type == TType.STRING) {
              this.country = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // CARRIER_CODE
            if (field.type == TType.STRING) {
              this.carrierCode = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.productIdList != null) {
        oprot.writeFieldBegin(PRODUCT_ID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.productIdList.size()));
          for (Enumeration _iter764_enum = this.productIdList.elements(); _iter764_enum.hasMoreElements(); )           {
            String _iter764 = (String)_iter764_enum.nextElement();
            oprot.writeString(_iter764);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(this.language);
        oprot.writeFieldEnd();
      }
      if (this.country != null) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeString(this.country);
        oprot.writeFieldEnd();
      }
      if (this.carrierCode != null) {
        oprot.writeFieldBegin(CARRIER_CODE_FIELD_DESC);
        oprot.writeString(this.carrierCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getProductListWithCarrier_args(");
      boolean first = true;

      sb.append("productIdList:");
      if (this.productIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.productIdList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("country:");
      if (this.country == null) {
        sb.append("null");
      } else {
        sb.append(this.country);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("carrierCode:");
      if (this.carrierCode == null) {
        sb.append("null");
      } else {
        sb.append(this.carrierCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getProductListWithCarrier_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getProductListWithCarrier_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private ProductList success;
    private TalkException e;

    // isset id assignments

    public getProductListWithCarrier_result() {
    }

    public getProductListWithCarrier_result(
      ProductList success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductListWithCarrier_result(getProductListWithCarrier_result other) {
      if (other.isSetSuccess()) {
        this.success = new ProductList(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getProductListWithCarrier_result deepCopy() {
      return new getProductListWithCarrier_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ProductList getSuccess() {
      return this.success;
    }

    public void setSuccess(ProductList success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductListWithCarrier_result)
        return this.equals((getProductListWithCarrier_result)that);
      return false;
    }

    public boolean equals(getProductListWithCarrier_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getProductListWithCarrier_result other = (getProductListWithCarrier_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new ProductList();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getProductListWithCarrier_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getProductWithCarrier_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getProductWithCarrier_args");

    private static final TField PACKAGE_ID_FIELD_DESC = new TField("packageID", TType.I64, (short)2);
    private static final TField LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, (short)3);
    private static final TField COUNTRY_FIELD_DESC = new TField("country", TType.STRING, (short)4);
    private static final TField CARRIER_CODE_FIELD_DESC = new TField("carrierCode", TType.STRING, (short)5);

    private long packageID;
    private String language;
    private String country;
    private String carrierCode;

    // isset id assignments
    private static final int __PACKAGEID_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getProductWithCarrier_args() {
    }

    public getProductWithCarrier_args(
      long packageID,
      String language,
      String country,
      String carrierCode)
    {
      this();
      this.packageID = packageID;
      setPackageIDIsSet(true);
      this.language = language;
      this.country = country;
      this.carrierCode = carrierCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductWithCarrier_args(getProductWithCarrier_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.packageID = other.packageID;
      if (other.isSetLanguage()) {
        this.language = other.language;
      }
      if (other.isSetCountry()) {
        this.country = other.country;
      }
      if (other.isSetCarrierCode()) {
        this.carrierCode = other.carrierCode;
      }
    }

    public getProductWithCarrier_args deepCopy() {
      return new getProductWithCarrier_args(this);
    }

    public void clear() {
      setPackageIDIsSet(false);
      this.packageID = 0;
      this.language = null;
      this.country = null;
      this.carrierCode = null;
    }

    public long getPackageID() {
      return this.packageID;
    }

    public void setPackageID(long packageID) {
      this.packageID = packageID;
      setPackageIDIsSet(true);
    }

    public void unsetPackageID() {
      __isset_vector[__PACKAGEID_ISSET_ID] = false;
    }

    /** Returns true if field packageID is set (has been assigned a value) and false otherwise */
    public boolean isSetPackageID() {
      return __isset_vector[__PACKAGEID_ISSET_ID];
    }

    public void setPackageIDIsSet(boolean value) {
      __isset_vector[__PACKAGEID_ISSET_ID] = value;
    }

    public String getLanguage() {
      return this.language;
    }

    public void setLanguage(String language) {
      this.language = language;
    }

    public void unsetLanguage() {
      this.language = null;
    }

    /** Returns true if field language is set (has been assigned a value) and false otherwise */
    public boolean isSetLanguage() {
      return this.language != null;
    }

    public void setLanguageIsSet(boolean value) {
      if (!value) {
        this.language = null;
      }
    }

    public String getCountry() {
      return this.country;
    }

    public void setCountry(String country) {
      this.country = country;
    }

    public void unsetCountry() {
      this.country = null;
    }

    /** Returns true if field country is set (has been assigned a value) and false otherwise */
    public boolean isSetCountry() {
      return this.country != null;
    }

    public void setCountryIsSet(boolean value) {
      if (!value) {
        this.country = null;
      }
    }

    public String getCarrierCode() {
      return this.carrierCode;
    }

    public void setCarrierCode(String carrierCode) {
      this.carrierCode = carrierCode;
    }

    public void unsetCarrierCode() {
      this.carrierCode = null;
    }

    /** Returns true if field carrierCode is set (has been assigned a value) and false otherwise */
    public boolean isSetCarrierCode() {
      return this.carrierCode != null;
    }

    public void setCarrierCodeIsSet(boolean value) {
      if (!value) {
        this.carrierCode = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductWithCarrier_args)
        return this.equals((getProductWithCarrier_args)that);
      return false;
    }

    public boolean equals(getProductWithCarrier_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_packageID = true;
      boolean that_present_packageID = true;
      if (this_present_packageID || that_present_packageID) {
        if (!(this_present_packageID && that_present_packageID))
          return false;
        if (this.packageID != that.packageID)
          return false;
      }

      boolean this_present_language = true && this.isSetLanguage();
      boolean that_present_language = true && that.isSetLanguage();
      if (this_present_language || that_present_language) {
        if (!(this_present_language && that_present_language))
          return false;
        if (!this.language.equals(that.language))
          return false;
      }

      boolean this_present_country = true && this.isSetCountry();
      boolean that_present_country = true && that.isSetCountry();
      if (this_present_country || that_present_country) {
        if (!(this_present_country && that_present_country))
          return false;
        if (!this.country.equals(that.country))
          return false;
      }

      boolean this_present_carrierCode = true && this.isSetCarrierCode();
      boolean that_present_carrierCode = true && that.isSetCarrierCode();
      if (this_present_carrierCode || that_present_carrierCode) {
        if (!(this_present_carrierCode && that_present_carrierCode))
          return false;
        if (!this.carrierCode.equals(that.carrierCode))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getProductWithCarrier_args other = (getProductWithCarrier_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetPackageID(), other.isSetPackageID());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPackageID()) {
        lastComparison = TBaseHelper.compareTo(this.packageID, other.packageID);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLanguage(), other.isSetLanguage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLanguage()) {
        lastComparison = TBaseHelper.compareTo(this.language, other.language);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCountry(), other.isSetCountry());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountry()) {
        lastComparison = TBaseHelper.compareTo(this.country, other.country);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCarrierCode(), other.isSetCarrierCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCarrierCode()) {
        lastComparison = TBaseHelper.compareTo(this.carrierCode, other.carrierCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // PACKAGE_ID
            if (field.type == TType.I64) {
              this.packageID = iprot.readI64();
              setPackageIDIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // LANGUAGE
            if (field.type == TType.STRING) {
              this.language = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // COUNTRY
            if (field.type == TType.STRING) {
              this.country = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // CARRIER_CODE
            if (field.type == TType.STRING) {
              this.carrierCode = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PACKAGE_ID_FIELD_DESC);
      oprot.writeI64(this.packageID);
      oprot.writeFieldEnd();
      if (this.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(this.language);
        oprot.writeFieldEnd();
      }
      if (this.country != null) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeString(this.country);
        oprot.writeFieldEnd();
      }
      if (this.carrierCode != null) {
        oprot.writeFieldBegin(CARRIER_CODE_FIELD_DESC);
        oprot.writeString(this.carrierCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getProductWithCarrier_args(");
      boolean first = true;

      sb.append("packageID:");
      sb.append(this.packageID);
      first = false;
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("country:");
      if (this.country == null) {
        sb.append("null");
      } else {
        sb.append(this.country);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("carrierCode:");
      if (this.carrierCode == null) {
        sb.append("null");
      } else {
        sb.append(this.carrierCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getProductWithCarrier_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getProductWithCarrier_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Product success;
    private TalkException e;

    // isset id assignments

    public getProductWithCarrier_result() {
    }

    public getProductWithCarrier_result(
      Product success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProductWithCarrier_result(getProductWithCarrier_result other) {
      if (other.isSetSuccess()) {
        this.success = new Product(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getProductWithCarrier_result deepCopy() {
      return new getProductWithCarrier_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Product getSuccess() {
      return this.success;
    }

    public void setSuccess(Product success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProductWithCarrier_result)
        return this.equals((getProductWithCarrier_result)that);
      return false;
    }

    public boolean equals(getProductWithCarrier_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getProductWithCarrier_result other = (getProductWithCarrier_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Product();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getProductWithCarrier_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPurchaseHistory_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPurchaseHistory_args");

    private static final TField START_FIELD_DESC = new TField("start", TType.I64, (short)2);
    private static final TField SIZE_FIELD_DESC = new TField("size", TType.I32, (short)3);
    private static final TField LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, (short)4);
    private static final TField COUNTRY_FIELD_DESC = new TField("country", TType.STRING, (short)5);

    private long start;
    private int size;
    private String language;
    private String country;

    // isset id assignments
    private static final int __START_ISSET_ID = 0;
    private static final int __SIZE_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public getPurchaseHistory_args() {
    }

    public getPurchaseHistory_args(
      long start,
      int size,
      String language,
      String country)
    {
      this();
      this.start = start;
      setStartIsSet(true);
      this.size = size;
      setSizeIsSet(true);
      this.language = language;
      this.country = country;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPurchaseHistory_args(getPurchaseHistory_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.start = other.start;
      this.size = other.size;
      if (other.isSetLanguage()) {
        this.language = other.language;
      }
      if (other.isSetCountry()) {
        this.country = other.country;
      }
    }

    public getPurchaseHistory_args deepCopy() {
      return new getPurchaseHistory_args(this);
    }

    public void clear() {
      setStartIsSet(false);
      this.start = 0;
      setSizeIsSet(false);
      this.size = 0;
      this.language = null;
      this.country = null;
    }

    public long getStart() {
      return this.start;
    }

    public void setStart(long start) {
      this.start = start;
      setStartIsSet(true);
    }

    public void unsetStart() {
      __isset_vector[__START_ISSET_ID] = false;
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return __isset_vector[__START_ISSET_ID];
    }

    public void setStartIsSet(boolean value) {
      __isset_vector[__START_ISSET_ID] = value;
    }

    public int getSize() {
      return this.size;
    }

    public void setSize(int size) {
      this.size = size;
      setSizeIsSet(true);
    }

    public void unsetSize() {
      __isset_vector[__SIZE_ISSET_ID] = false;
    }

    /** Returns true if field size is set (has been assigned a value) and false otherwise */
    public boolean isSetSize() {
      return __isset_vector[__SIZE_ISSET_ID];
    }

    public void setSizeIsSet(boolean value) {
      __isset_vector[__SIZE_ISSET_ID] = value;
    }

    public String getLanguage() {
      return this.language;
    }

    public void setLanguage(String language) {
      this.language = language;
    }

    public void unsetLanguage() {
      this.language = null;
    }

    /** Returns true if field language is set (has been assigned a value) and false otherwise */
    public boolean isSetLanguage() {
      return this.language != null;
    }

    public void setLanguageIsSet(boolean value) {
      if (!value) {
        this.language = null;
      }
    }

    public String getCountry() {
      return this.country;
    }

    public void setCountry(String country) {
      this.country = country;
    }

    public void unsetCountry() {
      this.country = null;
    }

    /** Returns true if field country is set (has been assigned a value) and false otherwise */
    public boolean isSetCountry() {
      return this.country != null;
    }

    public void setCountryIsSet(boolean value) {
      if (!value) {
        this.country = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPurchaseHistory_args)
        return this.equals((getPurchaseHistory_args)that);
      return false;
    }

    public boolean equals(getPurchaseHistory_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_size = true;
      boolean that_present_size = true;
      if (this_present_size || that_present_size) {
        if (!(this_present_size && that_present_size))
          return false;
        if (this.size != that.size)
          return false;
      }

      boolean this_present_language = true && this.isSetLanguage();
      boolean that_present_language = true && that.isSetLanguage();
      if (this_present_language || that_present_language) {
        if (!(this_present_language && that_present_language))
          return false;
        if (!this.language.equals(that.language))
          return false;
      }

      boolean this_present_country = true && this.isSetCountry();
      boolean that_present_country = true && that.isSetCountry();
      if (this_present_country || that_present_country) {
        if (!(this_present_country && that_present_country))
          return false;
        if (!this.country.equals(that.country))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPurchaseHistory_args other = (getPurchaseHistory_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetStart(), other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSize(), other.isSetSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSize()) {
        lastComparison = TBaseHelper.compareTo(this.size, other.size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLanguage(), other.isSetLanguage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLanguage()) {
        lastComparison = TBaseHelper.compareTo(this.language, other.language);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCountry(), other.isSetCountry());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountry()) {
        lastComparison = TBaseHelper.compareTo(this.country, other.country);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // START
            if (field.type == TType.I64) {
              this.start = iprot.readI64();
              setStartIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SIZE
            if (field.type == TType.I32) {
              this.size = iprot.readI32();
              setSizeIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // LANGUAGE
            if (field.type == TType.STRING) {
              this.language = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // COUNTRY
            if (field.type == TType.STRING) {
              this.country = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(START_FIELD_DESC);
      oprot.writeI64(this.start);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIZE_FIELD_DESC);
      oprot.writeI32(this.size);
      oprot.writeFieldEnd();
      if (this.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(this.language);
        oprot.writeFieldEnd();
      }
      if (this.country != null) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeString(this.country);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPurchaseHistory_args(");
      boolean first = true;

      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("size:");
      sb.append(this.size);
      first = false;
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("country:");
      if (this.country == null) {
        sb.append("null");
      } else {
        sb.append(this.country);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPurchaseHistory_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPurchaseHistory_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private ProductList success;
    private TalkException e;

    // isset id assignments

    public getPurchaseHistory_result() {
    }

    public getPurchaseHistory_result(
      ProductList success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPurchaseHistory_result(getPurchaseHistory_result other) {
      if (other.isSetSuccess()) {
        this.success = new ProductList(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getPurchaseHistory_result deepCopy() {
      return new getPurchaseHistory_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ProductList getSuccess() {
      return this.success;
    }

    public void setSuccess(ProductList success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPurchaseHistory_result)
        return this.equals((getPurchaseHistory_result)that);
      return false;
    }

    public boolean equals(getPurchaseHistory_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPurchaseHistory_result other = (getPurchaseHistory_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new ProductList();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPurchaseHistory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getTotalBalance_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getTotalBalance_args");

    private static final TField APP_STORE_CODE_FIELD_DESC = new TField("appStoreCode", TType.I32, (short)2);

    private PaymentType appStoreCode;

    // isset id assignments

    public getTotalBalance_args() {
    }

    public getTotalBalance_args(
      PaymentType appStoreCode)
    {
      this();
      this.appStoreCode = appStoreCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTotalBalance_args(getTotalBalance_args other) {
      if (other.isSetAppStoreCode()) {
        this.appStoreCode = other.appStoreCode;
      }
    }

    public getTotalBalance_args deepCopy() {
      return new getTotalBalance_args(this);
    }

    public void clear() {
      this.appStoreCode = null;
    }

    /**
     * 
     * @see PaymentType
     */
    public PaymentType getAppStoreCode() {
      return this.appStoreCode;
    }

    /**
     * 
     * @see PaymentType
     */
    public void setAppStoreCode(PaymentType appStoreCode) {
      this.appStoreCode = appStoreCode;
    }

    public void unsetAppStoreCode() {
      this.appStoreCode = null;
    }

    /** Returns true if field appStoreCode is set (has been assigned a value) and false otherwise */
    public boolean isSetAppStoreCode() {
      return this.appStoreCode != null;
    }

    public void setAppStoreCodeIsSet(boolean value) {
      if (!value) {
        this.appStoreCode = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTotalBalance_args)
        return this.equals((getTotalBalance_args)that);
      return false;
    }

    public boolean equals(getTotalBalance_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_appStoreCode = true && this.isSetAppStoreCode();
      boolean that_present_appStoreCode = true && that.isSetAppStoreCode();
      if (this_present_appStoreCode || that_present_appStoreCode) {
        if (!(this_present_appStoreCode && that_present_appStoreCode))
          return false;
        if (!this.appStoreCode.equals(that.appStoreCode))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getTotalBalance_args other = (getTotalBalance_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAppStoreCode(), other.isSetAppStoreCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppStoreCode()) {
        lastComparison = TBaseHelper.compareTo(this.appStoreCode, other.appStoreCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // APP_STORE_CODE
            if (field.type == TType.I32) {
              this.appStoreCode = PaymentType.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.appStoreCode != null) {
        oprot.writeFieldBegin(APP_STORE_CODE_FIELD_DESC);
        oprot.writeI32(this.appStoreCode.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getTotalBalance_args(");
      boolean first = true;

      sb.append("appStoreCode:");
      if (this.appStoreCode == null) {
        sb.append("null");
      } else {
        sb.append(this.appStoreCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getTotalBalance_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getTotalBalance_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Coin success;
    private TalkException e;

    // isset id assignments

    public getTotalBalance_result() {
    }

    public getTotalBalance_result(
      Coin success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTotalBalance_result(getTotalBalance_result other) {
      if (other.isSetSuccess()) {
        this.success = new Coin(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getTotalBalance_result deepCopy() {
      return new getTotalBalance_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Coin getSuccess() {
      return this.success;
    }

    public void setSuccess(Coin success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTotalBalance_result)
        return this.equals((getTotalBalance_result)that);
      return false;
    }

    public boolean equals(getTotalBalance_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getTotalBalance_result other = (getTotalBalance_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Coin();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getTotalBalance_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class notifyDownloaded_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("notifyDownloaded_args");

    private static final TField PACKAGE_ID_FIELD_DESC = new TField("packageId", TType.I64, (short)2);
    private static final TField LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, (short)3);

    private long packageId;
    private String language;

    // isset id assignments
    private static final int __PACKAGEID_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public notifyDownloaded_args() {
    }

    public notifyDownloaded_args(
      long packageId,
      String language)
    {
      this();
      this.packageId = packageId;
      setPackageIdIsSet(true);
      this.language = language;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyDownloaded_args(notifyDownloaded_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.packageId = other.packageId;
      if (other.isSetLanguage()) {
        this.language = other.language;
      }
    }

    public notifyDownloaded_args deepCopy() {
      return new notifyDownloaded_args(this);
    }

    public void clear() {
      setPackageIdIsSet(false);
      this.packageId = 0;
      this.language = null;
    }

    public long getPackageId() {
      return this.packageId;
    }

    public void setPackageId(long packageId) {
      this.packageId = packageId;
      setPackageIdIsSet(true);
    }

    public void unsetPackageId() {
      __isset_vector[__PACKAGEID_ISSET_ID] = false;
    }

    /** Returns true if field packageId is set (has been assigned a value) and false otherwise */
    public boolean isSetPackageId() {
      return __isset_vector[__PACKAGEID_ISSET_ID];
    }

    public void setPackageIdIsSet(boolean value) {
      __isset_vector[__PACKAGEID_ISSET_ID] = value;
    }

    public String getLanguage() {
      return this.language;
    }

    public void setLanguage(String language) {
      this.language = language;
    }

    public void unsetLanguage() {
      this.language = null;
    }

    /** Returns true if field language is set (has been assigned a value) and false otherwise */
    public boolean isSetLanguage() {
      return this.language != null;
    }

    public void setLanguageIsSet(boolean value) {
      if (!value) {
        this.language = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyDownloaded_args)
        return this.equals((notifyDownloaded_args)that);
      return false;
    }

    public boolean equals(notifyDownloaded_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_packageId = true;
      boolean that_present_packageId = true;
      if (this_present_packageId || that_present_packageId) {
        if (!(this_present_packageId && that_present_packageId))
          return false;
        if (this.packageId != that.packageId)
          return false;
      }

      boolean this_present_language = true && this.isSetLanguage();
      boolean that_present_language = true && that.isSetLanguage();
      if (this_present_language || that_present_language) {
        if (!(this_present_language && that_present_language))
          return false;
        if (!this.language.equals(that.language))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      notifyDownloaded_args other = (notifyDownloaded_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetPackageId(), other.isSetPackageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPackageId()) {
        lastComparison = TBaseHelper.compareTo(this.packageId, other.packageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLanguage(), other.isSetLanguage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLanguage()) {
        lastComparison = TBaseHelper.compareTo(this.language, other.language);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // PACKAGE_ID
            if (field.type == TType.I64) {
              this.packageId = iprot.readI64();
              setPackageIdIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // LANGUAGE
            if (field.type == TType.STRING) {
              this.language = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PACKAGE_ID_FIELD_DESC);
      oprot.writeI64(this.packageId);
      oprot.writeFieldEnd();
      if (this.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(this.language);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("notifyDownloaded_args(");
      boolean first = true;

      sb.append("packageId:");
      sb.append(this.packageId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class notifyDownloaded_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("notifyDownloaded_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I64, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private long success;
    private TalkException e;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public notifyDownloaded_result() {
    }

    public notifyDownloaded_result(
      long success,
      TalkException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyDownloaded_result(notifyDownloaded_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public notifyDownloaded_result deepCopy() {
      return new notifyDownloaded_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public void setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyDownloaded_result)
        return this.equals((notifyDownloaded_result)that);
      return false;
    }

    public boolean equals(notifyDownloaded_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      notifyDownloaded_result other = (notifyDownloaded_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("notifyDownloaded_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class reserveCoinPurchase_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("reserveCoinPurchase_args");

    private static final TField REQUEST_FIELD_DESC = new TField("request", TType.STRUCT, (short)2);

    private CoinPurchaseReservation request;

    // isset id assignments

    public reserveCoinPurchase_args() {
    }

    public reserveCoinPurchase_args(
      CoinPurchaseReservation request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reserveCoinPurchase_args(reserveCoinPurchase_args other) {
      if (other.isSetRequest()) {
        this.request = new CoinPurchaseReservation(other.request);
      }
    }

    public reserveCoinPurchase_args deepCopy() {
      return new reserveCoinPurchase_args(this);
    }

    public void clear() {
      this.request = null;
    }

    public CoinPurchaseReservation getRequest() {
      return this.request;
    }

    public void setRequest(CoinPurchaseReservation request) {
      this.request = request;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reserveCoinPurchase_args)
        return this.equals((reserveCoinPurchase_args)that);
      return false;
    }

    public boolean equals(reserveCoinPurchase_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      reserveCoinPurchase_args other = (reserveCoinPurchase_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = this.request.compareTo(other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // REQUEST
            if (field.type == TType.STRUCT) {
              this.request = new CoinPurchaseReservation();
              this.request.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.request != null) {
        oprot.writeFieldBegin(REQUEST_FIELD_DESC);
        this.request.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("reserveCoinPurchase_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class reserveCoinPurchase_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("reserveCoinPurchase_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private PaymentReservationResult success;
    private TalkException e;

    // isset id assignments

    public reserveCoinPurchase_result() {
    }

    public reserveCoinPurchase_result(
      PaymentReservationResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reserveCoinPurchase_result(reserveCoinPurchase_result other) {
      if (other.isSetSuccess()) {
        this.success = new PaymentReservationResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public reserveCoinPurchase_result deepCopy() {
      return new reserveCoinPurchase_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public PaymentReservationResult getSuccess() {
      return this.success;
    }

    public void setSuccess(PaymentReservationResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reserveCoinPurchase_result)
        return this.equals((reserveCoinPurchase_result)that);
      return false;
    }

    public boolean equals(reserveCoinPurchase_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      reserveCoinPurchase_result other = (reserveCoinPurchase_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new PaymentReservationResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("reserveCoinPurchase_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class reservePayment_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("reservePayment_args");

    private static final TField PAYMENT_RESERVATION_FIELD_DESC = new TField("paymentReservation", TType.STRUCT, (short)2);

    private PaymentReservation paymentReservation;

    // isset id assignments

    public reservePayment_args() {
    }

    public reservePayment_args(
      PaymentReservation paymentReservation)
    {
      this();
      this.paymentReservation = paymentReservation;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reservePayment_args(reservePayment_args other) {
      if (other.isSetPaymentReservation()) {
        this.paymentReservation = new PaymentReservation(other.paymentReservation);
      }
    }

    public reservePayment_args deepCopy() {
      return new reservePayment_args(this);
    }

    public void clear() {
      this.paymentReservation = null;
    }

    public PaymentReservation getPaymentReservation() {
      return this.paymentReservation;
    }

    public void setPaymentReservation(PaymentReservation paymentReservation) {
      this.paymentReservation = paymentReservation;
    }

    public void unsetPaymentReservation() {
      this.paymentReservation = null;
    }

    /** Returns true if field paymentReservation is set (has been assigned a value) and false otherwise */
    public boolean isSetPaymentReservation() {
      return this.paymentReservation != null;
    }

    public void setPaymentReservationIsSet(boolean value) {
      if (!value) {
        this.paymentReservation = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reservePayment_args)
        return this.equals((reservePayment_args)that);
      return false;
    }

    public boolean equals(reservePayment_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_paymentReservation = true && this.isSetPaymentReservation();
      boolean that_present_paymentReservation = true && that.isSetPaymentReservation();
      if (this_present_paymentReservation || that_present_paymentReservation) {
        if (!(this_present_paymentReservation && that_present_paymentReservation))
          return false;
        if (!this.paymentReservation.equals(that.paymentReservation))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      reservePayment_args other = (reservePayment_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetPaymentReservation(), other.isSetPaymentReservation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaymentReservation()) {
        lastComparison = this.paymentReservation.compareTo(other.paymentReservation);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // PAYMENT_RESERVATION
            if (field.type == TType.STRUCT) {
              this.paymentReservation = new PaymentReservation();
              this.paymentReservation.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.paymentReservation != null) {
        oprot.writeFieldBegin(PAYMENT_RESERVATION_FIELD_DESC);
        this.paymentReservation.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("reservePayment_args(");
      boolean first = true;

      sb.append("paymentReservation:");
      if (this.paymentReservation == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentReservation);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class reservePayment_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("reservePayment_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private PaymentReservationResult success;
    private TalkException e;

    // isset id assignments

    public reservePayment_result() {
    }

    public reservePayment_result(
      PaymentReservationResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reservePayment_result(reservePayment_result other) {
      if (other.isSetSuccess()) {
        this.success = new PaymentReservationResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public reservePayment_result deepCopy() {
      return new reservePayment_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public PaymentReservationResult getSuccess() {
      return this.success;
    }

    public void setSuccess(PaymentReservationResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reservePayment_result)
        return this.equals((reservePayment_result)that);
      return false;
    }

    public boolean equals(reservePayment_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      reservePayment_result other = (reservePayment_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new PaymentReservationResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("reservePayment_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
