/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class SquareEventNotifiedMarkAsRead implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("SquareEventNotifiedMarkAsRead");

  private static final TField SQUARE_CHAT_MID_FIELD_DESC = new TField("squareChatMid", TType.STRING, (short)1);
  private static final TField S_MEMBER_MID_FIELD_DESC = new TField("sMemberMid", TType.STRING, (short)2);
  private static final TField MESSAGE_ID_FIELD_DESC = new TField("messageId", TType.STRING, (short)4);

  private String squareChatMid;
  private String sMemberMid;
  private String messageId;

  // isset id assignments

  public SquareEventNotifiedMarkAsRead() {
  }

  public SquareEventNotifiedMarkAsRead(
    String squareChatMid,
    String sMemberMid,
    String messageId)
  {
    this();
    this.squareChatMid = squareChatMid;
    this.sMemberMid = sMemberMid;
    this.messageId = messageId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SquareEventNotifiedMarkAsRead(SquareEventNotifiedMarkAsRead other) {
    if (other.isSetSquareChatMid()) {
      this.squareChatMid = other.squareChatMid;
    }
    if (other.isSetSMemberMid()) {
      this.sMemberMid = other.sMemberMid;
    }
    if (other.isSetMessageId()) {
      this.messageId = other.messageId;
    }
  }

  public SquareEventNotifiedMarkAsRead deepCopy() {
    return new SquareEventNotifiedMarkAsRead(this);
  }

  public void clear() {
    this.squareChatMid = null;
    this.sMemberMid = null;
    this.messageId = null;
  }

  public String getSquareChatMid() {
    return this.squareChatMid;
  }

  public void setSquareChatMid(String squareChatMid) {
    this.squareChatMid = squareChatMid;
  }

  public void unsetSquareChatMid() {
    this.squareChatMid = null;
  }

  /** Returns true if field squareChatMid is set (has been assigned a value) and false otherwise */
  public boolean isSetSquareChatMid() {
    return this.squareChatMid != null;
  }

  public void setSquareChatMidIsSet(boolean value) {
    if (!value) {
      this.squareChatMid = null;
    }
  }

  public String getSMemberMid() {
    return this.sMemberMid;
  }

  public void setSMemberMid(String sMemberMid) {
    this.sMemberMid = sMemberMid;
  }

  public void unsetSMemberMid() {
    this.sMemberMid = null;
  }

  /** Returns true if field sMemberMid is set (has been assigned a value) and false otherwise */
  public boolean isSetSMemberMid() {
    return this.sMemberMid != null;
  }

  public void setSMemberMidIsSet(boolean value) {
    if (!value) {
      this.sMemberMid = null;
    }
  }

  public String getMessageId() {
    return this.messageId;
  }

  public void setMessageId(String messageId) {
    this.messageId = messageId;
  }

  public void unsetMessageId() {
    this.messageId = null;
  }

  /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageId() {
    return this.messageId != null;
  }

  public void setMessageIdIsSet(boolean value) {
    if (!value) {
      this.messageId = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SquareEventNotifiedMarkAsRead)
      return this.equals((SquareEventNotifiedMarkAsRead)that);
    return false;
  }

  public boolean equals(SquareEventNotifiedMarkAsRead that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_squareChatMid = true && this.isSetSquareChatMid();
    boolean that_present_squareChatMid = true && that.isSetSquareChatMid();
    if (this_present_squareChatMid || that_present_squareChatMid) {
      if (!(this_present_squareChatMid && that_present_squareChatMid))
        return false;
      if (!this.squareChatMid.equals(that.squareChatMid))
        return false;
    }

    boolean this_present_sMemberMid = true && this.isSetSMemberMid();
    boolean that_present_sMemberMid = true && that.isSetSMemberMid();
    if (this_present_sMemberMid || that_present_sMemberMid) {
      if (!(this_present_sMemberMid && that_present_sMemberMid))
        return false;
      if (!this.sMemberMid.equals(that.sMemberMid))
        return false;
    }

    boolean this_present_messageId = true && this.isSetMessageId();
    boolean that_present_messageId = true && that.isSetMessageId();
    if (this_present_messageId || that_present_messageId) {
      if (!(this_present_messageId && that_present_messageId))
        return false;
      if (!this.messageId.equals(that.messageId))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    SquareEventNotifiedMarkAsRead other = (SquareEventNotifiedMarkAsRead)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetSquareChatMid(), other.isSetSquareChatMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSquareChatMid()) {
      lastComparison = TBaseHelper.compareTo(this.squareChatMid, other.squareChatMid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSMemberMid(), other.isSetSMemberMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSMemberMid()) {
      lastComparison = TBaseHelper.compareTo(this.sMemberMid, other.sMemberMid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetMessageId(), other.isSetMessageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageId()) {
      lastComparison = TBaseHelper.compareTo(this.messageId, other.messageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // SQUARE_CHAT_MID
          if (field.type == TType.STRING) {
            this.squareChatMid = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // S_MEMBER_MID
          if (field.type == TType.STRING) {
            this.sMemberMid = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // MESSAGE_ID
          if (field.type == TType.STRING) {
            this.messageId = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.squareChatMid != null) {
      oprot.writeFieldBegin(SQUARE_CHAT_MID_FIELD_DESC);
      oprot.writeString(this.squareChatMid);
      oprot.writeFieldEnd();
    }
    if (this.sMemberMid != null) {
      oprot.writeFieldBegin(S_MEMBER_MID_FIELD_DESC);
      oprot.writeString(this.sMemberMid);
      oprot.writeFieldEnd();
    }
    if (this.messageId != null) {
      oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
      oprot.writeString(this.messageId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("SquareEventNotifiedMarkAsRead(");
    boolean first = true;

    sb.append("squareChatMid:");
    if (this.squareChatMid == null) {
      sb.append("null");
    } else {
      sb.append(this.squareChatMid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sMemberMid:");
    if (this.sMemberMid == null) {
      sb.append("null");
    } else {
      sb.append(this.sMemberMid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("messageId:");
    if (this.messageId == null) {
      sb.append("null");
    } else {
      sb.append(this.messageId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

