/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class UpdateSquareRequest implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("UpdateSquareRequest");

  private static final TField UPDATED_ATTRS_FIELD_DESC = new TField("updatedAttrs", TType.SET, (short)2);
  private static final TField SQUARE_FIELD_DESC = new TField("square", TType.STRUCT, (short)3);

  private Hashtable updatedAttrs;
  private Square square;

  // isset id assignments

  public UpdateSquareRequest() {
  }

  public UpdateSquareRequest(
    Hashtable updatedAttrs,
    Square square)
  {
    this();
    this.updatedAttrs = updatedAttrs;
    this.square = square;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UpdateSquareRequest(UpdateSquareRequest other) {
    if (other.isSetUpdatedAttrs()) {
      Hashtable __this__updatedAttrs = new Hashtable();
      for (Enumeration other_enum = other.updatedAttrs.elements(); other_enum.hasMoreElements(); ) {
        SquareAttribute other_element = (SquareAttribute)other_enum.nextElement();
        __this__updatedAttrs.addElement(other_element);
      }
      this.updatedAttrs = __this__updatedAttrs;
    }
    if (other.isSetSquare()) {
      this.square = new Square(other.square);
    }
  }

  public UpdateSquareRequest deepCopy() {
    return new UpdateSquareRequest(this);
  }

  public void clear() {
    this.updatedAttrs = null;
    this.square = null;
  }

  public int getUpdatedAttrsSize() {
    return (this.updatedAttrs == null) ? 0 : this.updatedAttrs.size();
  }

  public Enumeration getUpdatedAttrsEnumeration() {
    return (this.updatedAttrs == null) ? null : this.updatedAttrs.elements();
  }

  public void addToUpdatedAttrs(SquareAttribute elem) {
    if (this.updatedAttrs == null) {
      this.updatedAttrs = new Hashtable();
    }
    this.updatedAttrs.put(elem, elem);
  }

  public Hashtable getUpdatedAttrs() {
    return this.updatedAttrs;
  }

  public void setUpdatedAttrs(Hashtable updatedAttrs) {
    this.updatedAttrs = updatedAttrs;
  }

  public void unsetUpdatedAttrs() {
    this.updatedAttrs = null;
  }

  /** Returns true if field updatedAttrs is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdatedAttrs() {
    return this.updatedAttrs != null;
  }

  public void setUpdatedAttrsIsSet(boolean value) {
    if (!value) {
      this.updatedAttrs = null;
    }
  }

  public Square getSquare() {
    return this.square;
  }

  public void setSquare(Square square) {
    this.square = square;
  }

  public void unsetSquare() {
    this.square = null;
  }

  /** Returns true if field square is set (has been assigned a value) and false otherwise */
  public boolean isSetSquare() {
    return this.square != null;
  }

  public void setSquareIsSet(boolean value) {
    if (!value) {
      this.square = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UpdateSquareRequest)
      return this.equals((UpdateSquareRequest)that);
    return false;
  }

  public boolean equals(UpdateSquareRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_updatedAttrs = true && this.isSetUpdatedAttrs();
    boolean that_present_updatedAttrs = true && that.isSetUpdatedAttrs();
    if (this_present_updatedAttrs || that_present_updatedAttrs) {
      if (!(this_present_updatedAttrs && that_present_updatedAttrs))
        return false;
      if (!this.updatedAttrs.equals(that.updatedAttrs))
        return false;
    }

    boolean this_present_square = true && this.isSetSquare();
    boolean that_present_square = true && that.isSetSquare();
    if (this_present_square || that_present_square) {
      if (!(this_present_square && that_present_square))
        return false;
      if (!this.square.equals(that.square))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    UpdateSquareRequest other = (UpdateSquareRequest)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetUpdatedAttrs(), other.isSetUpdatedAttrs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdatedAttrs()) {
      lastComparison = TBaseHelper.compareTo(this.updatedAttrs, other.updatedAttrs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSquare(), other.isSetSquare());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSquare()) {
      lastComparison = this.square.compareTo(other.square);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 2: // UPDATED_ATTRS
          if (field.type == TType.SET) {
            {
              TSet _set382 = iprot.readSetBegin();
              this.updatedAttrs = new Hashtable(2*_set382.size);
              for (int _i383 = 0; _i383 < _set382.size; ++_i383)
              {
                SquareAttribute _elem384;
                _elem384 = SquareAttribute.findByValue(iprot.readI32());
                this.updatedAttrs.put(_elem384, _elem384);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SQUARE
          if (field.type == TType.STRUCT) {
            this.square = new Square();
            this.square.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.updatedAttrs != null) {
      oprot.writeFieldBegin(UPDATED_ATTRS_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.I32, this.updatedAttrs.size()));
        for (Enumeration _iter385_enum = this.updatedAttrs.keys(); _iter385_enum.hasMoreElements(); )         {
          SquareAttribute _iter385 = (SquareAttribute)_iter385_enum.nextElement();
          oprot.writeI32(_iter385.getValue());
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.square != null) {
      oprot.writeFieldBegin(SQUARE_FIELD_DESC);
      this.square.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("UpdateSquareRequest(");
    boolean first = true;

    sb.append("updatedAttrs:");
    if (this.updatedAttrs == null) {
      sb.append("null");
    } else {
      sb.append(this.updatedAttrs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("square:");
    if (this.square == null) {
      sb.append("null");
    } else {
      sb.append(this.square);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

