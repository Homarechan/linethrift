/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class InviteToSquareChatRequest implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("InviteToSquareChatRequest");

  private static final TField INVITEE_MIDS_FIELD_DESC = new TField("inviteeMids", TType.LIST, (short)1);
  private static final TField SQUARE_CHAT_MID_FIELD_DESC = new TField("squareChatMid", TType.STRING, (short)2);

  private Vector inviteeMids;
  private String squareChatMid;

  // isset id assignments

  public InviteToSquareChatRequest() {
  }

  public InviteToSquareChatRequest(
    Vector inviteeMids,
    String squareChatMid)
  {
    this();
    this.inviteeMids = inviteeMids;
    this.squareChatMid = squareChatMid;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InviteToSquareChatRequest(InviteToSquareChatRequest other) {
    if (other.isSetInviteeMids()) {
      Vector __this__inviteeMids = new Vector();
      for (Enumeration other_enum = other.inviteeMids.elements(); other_enum.hasMoreElements(); ) {
        String other_element = (String)other_enum.nextElement();
        __this__inviteeMids.addElement(other_element);
      }
      this.inviteeMids = __this__inviteeMids;
    }
    if (other.isSetSquareChatMid()) {
      this.squareChatMid = other.squareChatMid;
    }
  }

  public InviteToSquareChatRequest deepCopy() {
    return new InviteToSquareChatRequest(this);
  }

  public void clear() {
    this.inviteeMids = null;
    this.squareChatMid = null;
  }

  public int getInviteeMidsSize() {
    return (this.inviteeMids == null) ? 0 : this.inviteeMids.size();
  }

  public Enumeration getInviteeMidsEnumeration() {
    return (this.inviteeMids == null) ? null : this.inviteeMids.elements();
  }

  public void addToInviteeMids(String elem) {
    if (this.inviteeMids == null) {
      this.inviteeMids = new Vector();
    }
    this.inviteeMids.addElement(elem);
  }

  public Vector getInviteeMids() {
    return this.inviteeMids;
  }

  public void setInviteeMids(Vector inviteeMids) {
    this.inviteeMids = inviteeMids;
  }

  public void unsetInviteeMids() {
    this.inviteeMids = null;
  }

  /** Returns true if field inviteeMids is set (has been assigned a value) and false otherwise */
  public boolean isSetInviteeMids() {
    return this.inviteeMids != null;
  }

  public void setInviteeMidsIsSet(boolean value) {
    if (!value) {
      this.inviteeMids = null;
    }
  }

  public String getSquareChatMid() {
    return this.squareChatMid;
  }

  public void setSquareChatMid(String squareChatMid) {
    this.squareChatMid = squareChatMid;
  }

  public void unsetSquareChatMid() {
    this.squareChatMid = null;
  }

  /** Returns true if field squareChatMid is set (has been assigned a value) and false otherwise */
  public boolean isSetSquareChatMid() {
    return this.squareChatMid != null;
  }

  public void setSquareChatMidIsSet(boolean value) {
    if (!value) {
      this.squareChatMid = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof InviteToSquareChatRequest)
      return this.equals((InviteToSquareChatRequest)that);
    return false;
  }

  public boolean equals(InviteToSquareChatRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_inviteeMids = true && this.isSetInviteeMids();
    boolean that_present_inviteeMids = true && that.isSetInviteeMids();
    if (this_present_inviteeMids || that_present_inviteeMids) {
      if (!(this_present_inviteeMids && that_present_inviteeMids))
        return false;
      if (!this.inviteeMids.equals(that.inviteeMids))
        return false;
    }

    boolean this_present_squareChatMid = true && this.isSetSquareChatMid();
    boolean that_present_squareChatMid = true && that.isSetSquareChatMid();
    if (this_present_squareChatMid || that_present_squareChatMid) {
      if (!(this_present_squareChatMid && that_present_squareChatMid))
        return false;
      if (!this.squareChatMid.equals(that.squareChatMid))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    InviteToSquareChatRequest other = (InviteToSquareChatRequest)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetInviteeMids(), other.isSetInviteeMids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInviteeMids()) {
      lastComparison = TBaseHelper.compareTo(this.inviteeMids, other.inviteeMids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSquareChatMid(), other.isSetSquareChatMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSquareChatMid()) {
      lastComparison = TBaseHelper.compareTo(this.squareChatMid, other.squareChatMid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // INVITEE_MIDS
          if (field.type == TType.LIST) {
            {
              TList _list357 = iprot.readListBegin();
              this.inviteeMids = new Vector(_list357.size);
              for (int _i358 = 0; _i358 < _list357.size; ++_i358)
              {
                String _elem359;
                _elem359 = iprot.readString();
                this.inviteeMids.addElement(_elem359);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SQUARE_CHAT_MID
          if (field.type == TType.STRING) {
            this.squareChatMid = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.inviteeMids != null) {
      oprot.writeFieldBegin(INVITEE_MIDS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.inviteeMids.size()));
        for (Enumeration _iter360_enum = this.inviteeMids.elements(); _iter360_enum.hasMoreElements(); )         {
          String _iter360 = (String)_iter360_enum.nextElement();
          oprot.writeString(_iter360);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.squareChatMid != null) {
      oprot.writeFieldBegin(SQUARE_CHAT_MID_FIELD_DESC);
      oprot.writeString(this.squareChatMid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("InviteToSquareChatRequest(");
    boolean first = true;

    sb.append("inviteeMids:");
    if (this.inviteeMids == null) {
      sb.append("null");
    } else {
      sb.append(this.inviteeMids);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("squareChatMid:");
    if (this.squareChatMid == null) {
      sb.append("null");
    } else {
      sb.append(this.squareChatMid);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

