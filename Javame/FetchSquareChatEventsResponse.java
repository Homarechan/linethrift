/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class FetchSquareChatEventsResponse implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("FetchSquareChatEventsResponse");

  private static final TField SUBSCRIPTION_FIELD_DESC = new TField("subscription", TType.STRUCT, (short)1);
  private static final TField EVENTS_FIELD_DESC = new TField("events", TType.LIST, (short)2);
  private static final TField SYNC_TOKEN_FIELD_DESC = new TField("syncToken", TType.STRING, (short)3);
  private static final TField CONTINUATION_TOKEN_FIELD_DESC = new TField("continuationToken", TType.STRING, (short)4);

  private SubscriptionState subscription;
  private Vector events;
  private String syncToken;
  private String continuationToken;

  // isset id assignments

  public FetchSquareChatEventsResponse() {
  }

  public FetchSquareChatEventsResponse(
    SubscriptionState subscription,
    Vector events,
    String syncToken,
    String continuationToken)
  {
    this();
    this.subscription = subscription;
    this.events = events;
    this.syncToken = syncToken;
    this.continuationToken = continuationToken;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FetchSquareChatEventsResponse(FetchSquareChatEventsResponse other) {
    if (other.isSetSubscription()) {
      this.subscription = new SubscriptionState(other.subscription);
    }
    if (other.isSetEvents()) {
      Vector __this__events = new Vector();
      for (Enumeration other_enum = other.events.elements(); other_enum.hasMoreElements(); ) {
        SquareEvent other_element = (SquareEvent)other_enum.nextElement();
        __this__events.addElement(new SquareEvent(other_element));
      }
      this.events = __this__events;
    }
    if (other.isSetSyncToken()) {
      this.syncToken = other.syncToken;
    }
    if (other.isSetContinuationToken()) {
      this.continuationToken = other.continuationToken;
    }
  }

  public FetchSquareChatEventsResponse deepCopy() {
    return new FetchSquareChatEventsResponse(this);
  }

  public void clear() {
    this.subscription = null;
    this.events = null;
    this.syncToken = null;
    this.continuationToken = null;
  }

  public SubscriptionState getSubscription() {
    return this.subscription;
  }

  public void setSubscription(SubscriptionState subscription) {
    this.subscription = subscription;
  }

  public void unsetSubscription() {
    this.subscription = null;
  }

  /** Returns true if field subscription is set (has been assigned a value) and false otherwise */
  public boolean isSetSubscription() {
    return this.subscription != null;
  }

  public void setSubscriptionIsSet(boolean value) {
    if (!value) {
      this.subscription = null;
    }
  }

  public int getEventsSize() {
    return (this.events == null) ? 0 : this.events.size();
  }

  public Enumeration getEventsEnumeration() {
    return (this.events == null) ? null : this.events.elements();
  }

  public void addToEvents(SquareEvent elem) {
    if (this.events == null) {
      this.events = new Vector();
    }
    this.events.addElement(elem);
  }

  public Vector getEvents() {
    return this.events;
  }

  public void setEvents(Vector events) {
    this.events = events;
  }

  public void unsetEvents() {
    this.events = null;
  }

  /** Returns true if field events is set (has been assigned a value) and false otherwise */
  public boolean isSetEvents() {
    return this.events != null;
  }

  public void setEventsIsSet(boolean value) {
    if (!value) {
      this.events = null;
    }
  }

  public String getSyncToken() {
    return this.syncToken;
  }

  public void setSyncToken(String syncToken) {
    this.syncToken = syncToken;
  }

  public void unsetSyncToken() {
    this.syncToken = null;
  }

  /** Returns true if field syncToken is set (has been assigned a value) and false otherwise */
  public boolean isSetSyncToken() {
    return this.syncToken != null;
  }

  public void setSyncTokenIsSet(boolean value) {
    if (!value) {
      this.syncToken = null;
    }
  }

  public String getContinuationToken() {
    return this.continuationToken;
  }

  public void setContinuationToken(String continuationToken) {
    this.continuationToken = continuationToken;
  }

  public void unsetContinuationToken() {
    this.continuationToken = null;
  }

  /** Returns true if field continuationToken is set (has been assigned a value) and false otherwise */
  public boolean isSetContinuationToken() {
    return this.continuationToken != null;
  }

  public void setContinuationTokenIsSet(boolean value) {
    if (!value) {
      this.continuationToken = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FetchSquareChatEventsResponse)
      return this.equals((FetchSquareChatEventsResponse)that);
    return false;
  }

  public boolean equals(FetchSquareChatEventsResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_subscription = true && this.isSetSubscription();
    boolean that_present_subscription = true && that.isSetSubscription();
    if (this_present_subscription || that_present_subscription) {
      if (!(this_present_subscription && that_present_subscription))
        return false;
      if (!this.subscription.equals(that.subscription))
        return false;
    }

    boolean this_present_events = true && this.isSetEvents();
    boolean that_present_events = true && that.isSetEvents();
    if (this_present_events || that_present_events) {
      if (!(this_present_events && that_present_events))
        return false;
      if (!this.events.equals(that.events))
        return false;
    }

    boolean this_present_syncToken = true && this.isSetSyncToken();
    boolean that_present_syncToken = true && that.isSetSyncToken();
    if (this_present_syncToken || that_present_syncToken) {
      if (!(this_present_syncToken && that_present_syncToken))
        return false;
      if (!this.syncToken.equals(that.syncToken))
        return false;
    }

    boolean this_present_continuationToken = true && this.isSetContinuationToken();
    boolean that_present_continuationToken = true && that.isSetContinuationToken();
    if (this_present_continuationToken || that_present_continuationToken) {
      if (!(this_present_continuationToken && that_present_continuationToken))
        return false;
      if (!this.continuationToken.equals(that.continuationToken))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    FetchSquareChatEventsResponse other = (FetchSquareChatEventsResponse)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetSubscription(), other.isSetSubscription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubscription()) {
      lastComparison = this.subscription.compareTo(other.subscription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetEvents(), other.isSetEvents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvents()) {
      lastComparison = TBaseHelper.compareTo(this.events, other.events);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSyncToken(), other.isSetSyncToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSyncToken()) {
      lastComparison = TBaseHelper.compareTo(this.syncToken, other.syncToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetContinuationToken(), other.isSetContinuationToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContinuationToken()) {
      lastComparison = TBaseHelper.compareTo(this.continuationToken, other.continuationToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // SUBSCRIPTION
          if (field.type == TType.STRUCT) {
            this.subscription = new SubscriptionState();
            this.subscription.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // EVENTS
          if (field.type == TType.LIST) {
            {
              TList _list349 = iprot.readListBegin();
              this.events = new Vector(_list349.size);
              for (int _i350 = 0; _i350 < _list349.size; ++_i350)
              {
                SquareEvent _elem351;
                _elem351 = new SquareEvent();
                _elem351.read(iprot);
                this.events.addElement(_elem351);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SYNC_TOKEN
          if (field.type == TType.STRING) {
            this.syncToken = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // CONTINUATION_TOKEN
          if (field.type == TType.STRING) {
            this.continuationToken = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.subscription != null) {
      oprot.writeFieldBegin(SUBSCRIPTION_FIELD_DESC);
      this.subscription.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.events != null) {
      oprot.writeFieldBegin(EVENTS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.events.size()));
        for (Enumeration _iter352_enum = this.events.elements(); _iter352_enum.hasMoreElements(); )         {
          SquareEvent _iter352 = (SquareEvent)_iter352_enum.nextElement();
          _iter352.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.syncToken != null) {
      oprot.writeFieldBegin(SYNC_TOKEN_FIELD_DESC);
      oprot.writeString(this.syncToken);
      oprot.writeFieldEnd();
    }
    if (this.continuationToken != null) {
      oprot.writeFieldBegin(CONTINUATION_TOKEN_FIELD_DESC);
      oprot.writeString(this.continuationToken);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("FetchSquareChatEventsResponse(");
    boolean first = true;

    sb.append("subscription:");
    if (this.subscription == null) {
      sb.append("null");
    } else {
      sb.append(this.subscription);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("events:");
    if (this.events == null) {
      sb.append("null");
    } else {
      sb.append(this.events);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("syncToken:");
    if (this.syncToken == null) {
      sb.append("null");
    } else {
      sb.append(this.syncToken);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("continuationToken:");
    if (this.continuationToken == null) {
      sb.append("null");
    } else {
      sb.append(this.continuationToken);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

