/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class ChannelToken implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("ChannelToken");

  private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)1);
  private static final TField OBS_TOKEN_FIELD_DESC = new TField("obsToken", TType.STRING, (short)2);
  private static final TField EXPIRATION_FIELD_DESC = new TField("expiration", TType.I64, (short)3);
  private static final TField REFRESH_TOKEN_FIELD_DESC = new TField("refreshToken", TType.STRING, (short)4);
  private static final TField CHANNEL_ACCESS_TOKEN_FIELD_DESC = new TField("channelAccessToken", TType.STRING, (short)5);

  private String token;
  private String obsToken;
  private long expiration;
  private String refreshToken;
  private String channelAccessToken;

  // isset id assignments
  private static final int __EXPIRATION_ISSET_ID = 0;
  private boolean[] __isset_vector = new boolean[1];

  public ChannelToken() {
  }

  public ChannelToken(
    String token,
    String obsToken,
    long expiration,
    String refreshToken,
    String channelAccessToken)
  {
    this();
    this.token = token;
    this.obsToken = obsToken;
    this.expiration = expiration;
    setExpirationIsSet(true);
    this.refreshToken = refreshToken;
    this.channelAccessToken = channelAccessToken;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChannelToken(ChannelToken other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    if (other.isSetToken()) {
      this.token = other.token;
    }
    if (other.isSetObsToken()) {
      this.obsToken = other.obsToken;
    }
    this.expiration = other.expiration;
    if (other.isSetRefreshToken()) {
      this.refreshToken = other.refreshToken;
    }
    if (other.isSetChannelAccessToken()) {
      this.channelAccessToken = other.channelAccessToken;
    }
  }

  public ChannelToken deepCopy() {
    return new ChannelToken(this);
  }

  public void clear() {
    this.token = null;
    this.obsToken = null;
    setExpirationIsSet(false);
    this.expiration = 0;
    this.refreshToken = null;
    this.channelAccessToken = null;
  }

  public String getToken() {
    return this.token;
  }

  public void setToken(String token) {
    this.token = token;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  public String getObsToken() {
    return this.obsToken;
  }

  public void setObsToken(String obsToken) {
    this.obsToken = obsToken;
  }

  public void unsetObsToken() {
    this.obsToken = null;
  }

  /** Returns true if field obsToken is set (has been assigned a value) and false otherwise */
  public boolean isSetObsToken() {
    return this.obsToken != null;
  }

  public void setObsTokenIsSet(boolean value) {
    if (!value) {
      this.obsToken = null;
    }
  }

  public long getExpiration() {
    return this.expiration;
  }

  public void setExpiration(long expiration) {
    this.expiration = expiration;
    setExpirationIsSet(true);
  }

  public void unsetExpiration() {
    __isset_vector[__EXPIRATION_ISSET_ID] = false;
  }

  /** Returns true if field expiration is set (has been assigned a value) and false otherwise */
  public boolean isSetExpiration() {
    return __isset_vector[__EXPIRATION_ISSET_ID];
  }

  public void setExpirationIsSet(boolean value) {
    __isset_vector[__EXPIRATION_ISSET_ID] = value;
  }

  public String getRefreshToken() {
    return this.refreshToken;
  }

  public void setRefreshToken(String refreshToken) {
    this.refreshToken = refreshToken;
  }

  public void unsetRefreshToken() {
    this.refreshToken = null;
  }

  /** Returns true if field refreshToken is set (has been assigned a value) and false otherwise */
  public boolean isSetRefreshToken() {
    return this.refreshToken != null;
  }

  public void setRefreshTokenIsSet(boolean value) {
    if (!value) {
      this.refreshToken = null;
    }
  }

  public String getChannelAccessToken() {
    return this.channelAccessToken;
  }

  public void setChannelAccessToken(String channelAccessToken) {
    this.channelAccessToken = channelAccessToken;
  }

  public void unsetChannelAccessToken() {
    this.channelAccessToken = null;
  }

  /** Returns true if field channelAccessToken is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelAccessToken() {
    return this.channelAccessToken != null;
  }

  public void setChannelAccessTokenIsSet(boolean value) {
    if (!value) {
      this.channelAccessToken = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ChannelToken)
      return this.equals((ChannelToken)that);
    return false;
  }

  public boolean equals(ChannelToken that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_obsToken = true && this.isSetObsToken();
    boolean that_present_obsToken = true && that.isSetObsToken();
    if (this_present_obsToken || that_present_obsToken) {
      if (!(this_present_obsToken && that_present_obsToken))
        return false;
      if (!this.obsToken.equals(that.obsToken))
        return false;
    }

    boolean this_present_expiration = true;
    boolean that_present_expiration = true;
    if (this_present_expiration || that_present_expiration) {
      if (!(this_present_expiration && that_present_expiration))
        return false;
      if (this.expiration != that.expiration)
        return false;
    }

    boolean this_present_refreshToken = true && this.isSetRefreshToken();
    boolean that_present_refreshToken = true && that.isSetRefreshToken();
    if (this_present_refreshToken || that_present_refreshToken) {
      if (!(this_present_refreshToken && that_present_refreshToken))
        return false;
      if (!this.refreshToken.equals(that.refreshToken))
        return false;
    }

    boolean this_present_channelAccessToken = true && this.isSetChannelAccessToken();
    boolean that_present_channelAccessToken = true && that.isSetChannelAccessToken();
    if (this_present_channelAccessToken || that_present_channelAccessToken) {
      if (!(this_present_channelAccessToken && that_present_channelAccessToken))
        return false;
      if (!this.channelAccessToken.equals(that.channelAccessToken))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    ChannelToken other = (ChannelToken)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetToken(), other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetObsToken(), other.isSetObsToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetObsToken()) {
      lastComparison = TBaseHelper.compareTo(this.obsToken, other.obsToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetExpiration(), other.isSetExpiration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpiration()) {
      lastComparison = TBaseHelper.compareTo(this.expiration, other.expiration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetRefreshToken(), other.isSetRefreshToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRefreshToken()) {
      lastComparison = TBaseHelper.compareTo(this.refreshToken, other.refreshToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetChannelAccessToken(), other.isSetChannelAccessToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelAccessToken()) {
      lastComparison = TBaseHelper.compareTo(this.channelAccessToken, other.channelAccessToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // TOKEN
          if (field.type == TType.STRING) {
            this.token = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // OBS_TOKEN
          if (field.type == TType.STRING) {
            this.obsToken = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // EXPIRATION
          if (field.type == TType.I64) {
            this.expiration = iprot.readI64();
            setExpirationIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // REFRESH_TOKEN
          if (field.type == TType.STRING) {
            this.refreshToken = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // CHANNEL_ACCESS_TOKEN
          if (field.type == TType.STRING) {
            this.channelAccessToken = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.token != null) {
      oprot.writeFieldBegin(TOKEN_FIELD_DESC);
      oprot.writeString(this.token);
      oprot.writeFieldEnd();
    }
    if (this.obsToken != null) {
      oprot.writeFieldBegin(OBS_TOKEN_FIELD_DESC);
      oprot.writeString(this.obsToken);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(EXPIRATION_FIELD_DESC);
    oprot.writeI64(this.expiration);
    oprot.writeFieldEnd();
    if (this.refreshToken != null) {
      oprot.writeFieldBegin(REFRESH_TOKEN_FIELD_DESC);
      oprot.writeString(this.refreshToken);
      oprot.writeFieldEnd();
    }
    if (this.channelAccessToken != null) {
      oprot.writeFieldBegin(CHANNEL_ACCESS_TOKEN_FIELD_DESC);
      oprot.writeString(this.channelAccessToken);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("ChannelToken(");
    boolean first = true;

    sb.append("token:");
    if (this.token == null) {
      sb.append("null");
    } else {
      sb.append(this.token);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("obsToken:");
    if (this.obsToken == null) {
      sb.append("null");
    } else {
      sb.append(this.obsToken);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expiration:");
    sb.append(this.expiration);
    first = false;
    if (!first) sb.append(", ");
    sb.append("refreshToken:");
    if (this.refreshToken == null) {
      sb.append("null");
    } else {
      sb.append(this.refreshToken);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("channelAccessToken:");
    if (this.channelAccessToken == null) {
      sb.append("null");
    } else {
      sb.append(this.channelAccessToken);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

