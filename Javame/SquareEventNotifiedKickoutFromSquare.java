/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class SquareEventNotifiedKickoutFromSquare implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("SquareEventNotifiedKickoutFromSquare");

  private static final TField SQUARE_CHAT_MID_FIELD_DESC = new TField("squareChatMid", TType.STRING, (short)1);
  private static final TField KICKEES_FIELD_DESC = new TField("kickees", TType.LIST, (short)2);

  private String squareChatMid;
  private Vector kickees;

  // isset id assignments

  public SquareEventNotifiedKickoutFromSquare() {
  }

  public SquareEventNotifiedKickoutFromSquare(
    String squareChatMid,
    Vector kickees)
  {
    this();
    this.squareChatMid = squareChatMid;
    this.kickees = kickees;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SquareEventNotifiedKickoutFromSquare(SquareEventNotifiedKickoutFromSquare other) {
    if (other.isSetSquareChatMid()) {
      this.squareChatMid = other.squareChatMid;
    }
    if (other.isSetKickees()) {
      Vector __this__kickees = new Vector();
      for (Enumeration other_enum = other.kickees.elements(); other_enum.hasMoreElements(); ) {
        SquareMember other_element = (SquareMember)other_enum.nextElement();
        __this__kickees.addElement(new SquareMember(other_element));
      }
      this.kickees = __this__kickees;
    }
  }

  public SquareEventNotifiedKickoutFromSquare deepCopy() {
    return new SquareEventNotifiedKickoutFromSquare(this);
  }

  public void clear() {
    this.squareChatMid = null;
    this.kickees = null;
  }

  public String getSquareChatMid() {
    return this.squareChatMid;
  }

  public void setSquareChatMid(String squareChatMid) {
    this.squareChatMid = squareChatMid;
  }

  public void unsetSquareChatMid() {
    this.squareChatMid = null;
  }

  /** Returns true if field squareChatMid is set (has been assigned a value) and false otherwise */
  public boolean isSetSquareChatMid() {
    return this.squareChatMid != null;
  }

  public void setSquareChatMidIsSet(boolean value) {
    if (!value) {
      this.squareChatMid = null;
    }
  }

  public int getKickeesSize() {
    return (this.kickees == null) ? 0 : this.kickees.size();
  }

  public Enumeration getKickeesEnumeration() {
    return (this.kickees == null) ? null : this.kickees.elements();
  }

  public void addToKickees(SquareMember elem) {
    if (this.kickees == null) {
      this.kickees = new Vector();
    }
    this.kickees.addElement(elem);
  }

  public Vector getKickees() {
    return this.kickees;
  }

  public void setKickees(Vector kickees) {
    this.kickees = kickees;
  }

  public void unsetKickees() {
    this.kickees = null;
  }

  /** Returns true if field kickees is set (has been assigned a value) and false otherwise */
  public boolean isSetKickees() {
    return this.kickees != null;
  }

  public void setKickeesIsSet(boolean value) {
    if (!value) {
      this.kickees = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SquareEventNotifiedKickoutFromSquare)
      return this.equals((SquareEventNotifiedKickoutFromSquare)that);
    return false;
  }

  public boolean equals(SquareEventNotifiedKickoutFromSquare that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_squareChatMid = true && this.isSetSquareChatMid();
    boolean that_present_squareChatMid = true && that.isSetSquareChatMid();
    if (this_present_squareChatMid || that_present_squareChatMid) {
      if (!(this_present_squareChatMid && that_present_squareChatMid))
        return false;
      if (!this.squareChatMid.equals(that.squareChatMid))
        return false;
    }

    boolean this_present_kickees = true && this.isSetKickees();
    boolean that_present_kickees = true && that.isSetKickees();
    if (this_present_kickees || that_present_kickees) {
      if (!(this_present_kickees && that_present_kickees))
        return false;
      if (!this.kickees.equals(that.kickees))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    SquareEventNotifiedKickoutFromSquare other = (SquareEventNotifiedKickoutFromSquare)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetSquareChatMid(), other.isSetSquareChatMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSquareChatMid()) {
      lastComparison = TBaseHelper.compareTo(this.squareChatMid, other.squareChatMid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetKickees(), other.isSetKickees());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKickees()) {
      lastComparison = TBaseHelper.compareTo(this.kickees, other.kickees);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // SQUARE_CHAT_MID
          if (field.type == TType.STRING) {
            this.squareChatMid = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // KICKEES
          if (field.type == TType.LIST) {
            {
              TList _list341 = iprot.readListBegin();
              this.kickees = new Vector(_list341.size);
              for (int _i342 = 0; _i342 < _list341.size; ++_i342)
              {
                SquareMember _elem343;
                _elem343 = new SquareMember();
                _elem343.read(iprot);
                this.kickees.addElement(_elem343);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.squareChatMid != null) {
      oprot.writeFieldBegin(SQUARE_CHAT_MID_FIELD_DESC);
      oprot.writeString(this.squareChatMid);
      oprot.writeFieldEnd();
    }
    if (this.kickees != null) {
      oprot.writeFieldBegin(KICKEES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.kickees.size()));
        for (Enumeration _iter344_enum = this.kickees.elements(); _iter344_enum.hasMoreElements(); )         {
          SquareMember _iter344 = (SquareMember)_iter344_enum.nextElement();
          _iter344.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("SquareEventNotifiedKickoutFromSquare(");
    boolean first = true;

    sb.append("squareChatMid:");
    if (this.squareChatMid == null) {
      sb.append("null");
    } else {
      sb.append(this.squareChatMid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("kickees:");
    if (this.kickees == null) {
      sb.append("null");
    } else {
      sb.append(this.kickees);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

