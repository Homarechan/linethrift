/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class SyncParamContact implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("SyncParamContact");

  private static final TField SYNC_PARAM_MID_FIELD_DESC = new TField("syncParamMid", TType.STRUCT, (short)1);
  private static final TField CONTACT_STATUS_FIELD_DESC = new TField("contactStatus", TType.I32, (short)2);

  private SyncParamMid syncParamMid;
  private ContactStatus contactStatus;

  // isset id assignments

  public SyncParamContact() {
  }

  public SyncParamContact(
    SyncParamMid syncParamMid,
    ContactStatus contactStatus)
  {
    this();
    this.syncParamMid = syncParamMid;
    this.contactStatus = contactStatus;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SyncParamContact(SyncParamContact other) {
    if (other.isSetSyncParamMid()) {
      this.syncParamMid = new SyncParamMid(other.syncParamMid);
    }
    if (other.isSetContactStatus()) {
      this.contactStatus = other.contactStatus;
    }
  }

  public SyncParamContact deepCopy() {
    return new SyncParamContact(this);
  }

  public void clear() {
    this.syncParamMid = null;
    this.contactStatus = null;
  }

  public SyncParamMid getSyncParamMid() {
    return this.syncParamMid;
  }

  public void setSyncParamMid(SyncParamMid syncParamMid) {
    this.syncParamMid = syncParamMid;
  }

  public void unsetSyncParamMid() {
    this.syncParamMid = null;
  }

  /** Returns true if field syncParamMid is set (has been assigned a value) and false otherwise */
  public boolean isSetSyncParamMid() {
    return this.syncParamMid != null;
  }

  public void setSyncParamMidIsSet(boolean value) {
    if (!value) {
      this.syncParamMid = null;
    }
  }

  /**
   * 
   * @see ContactStatus
   */
  public ContactStatus getContactStatus() {
    return this.contactStatus;
  }

  /**
   * 
   * @see ContactStatus
   */
  public void setContactStatus(ContactStatus contactStatus) {
    this.contactStatus = contactStatus;
  }

  public void unsetContactStatus() {
    this.contactStatus = null;
  }

  /** Returns true if field contactStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetContactStatus() {
    return this.contactStatus != null;
  }

  public void setContactStatusIsSet(boolean value) {
    if (!value) {
      this.contactStatus = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SyncParamContact)
      return this.equals((SyncParamContact)that);
    return false;
  }

  public boolean equals(SyncParamContact that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_syncParamMid = true && this.isSetSyncParamMid();
    boolean that_present_syncParamMid = true && that.isSetSyncParamMid();
    if (this_present_syncParamMid || that_present_syncParamMid) {
      if (!(this_present_syncParamMid && that_present_syncParamMid))
        return false;
      if (!this.syncParamMid.equals(that.syncParamMid))
        return false;
    }

    boolean this_present_contactStatus = true && this.isSetContactStatus();
    boolean that_present_contactStatus = true && that.isSetContactStatus();
    if (this_present_contactStatus || that_present_contactStatus) {
      if (!(this_present_contactStatus && that_present_contactStatus))
        return false;
      if (!this.contactStatus.equals(that.contactStatus))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    SyncParamContact other = (SyncParamContact)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetSyncParamMid(), other.isSetSyncParamMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSyncParamMid()) {
      lastComparison = this.syncParamMid.compareTo(other.syncParamMid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetContactStatus(), other.isSetContactStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContactStatus()) {
      lastComparison = TBaseHelper.compareTo(this.contactStatus, other.contactStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // SYNC_PARAM_MID
          if (field.type == TType.STRUCT) {
            this.syncParamMid = new SyncParamMid();
            this.syncParamMid.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // CONTACT_STATUS
          if (field.type == TType.I32) {
            this.contactStatus = ContactStatus.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.syncParamMid != null) {
      oprot.writeFieldBegin(SYNC_PARAM_MID_FIELD_DESC);
      this.syncParamMid.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.contactStatus != null) {
      oprot.writeFieldBegin(CONTACT_STATUS_FIELD_DESC);
      oprot.writeI32(this.contactStatus.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("SyncParamContact(");
    boolean first = true;

    sb.append("syncParamMid:");
    if (this.syncParamMid == null) {
      sb.append("null");
    } else {
      sb.append(this.syncParamMid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contactStatus:");
    if (this.contactStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.contactStatus);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

