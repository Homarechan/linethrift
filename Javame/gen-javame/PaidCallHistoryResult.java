/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class PaidCallHistoryResult implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("PaidCallHistoryResult");

  private static final TField HISTORYS_FIELD_DESC = new TField("historys", TType.LIST, (short)1);
  private static final TField HAS_NEXT_FIELD_DESC = new TField("hasNext", TType.BOOL, (short)2);

  private Vector historys;
  private boolean hasNext;

  // isset id assignments
  private static final int __HASNEXT_ISSET_ID = 0;
  private boolean[] __isset_vector = new boolean[1];

  public PaidCallHistoryResult() {
  }

  public PaidCallHistoryResult(
    Vector historys,
    boolean hasNext)
  {
    this();
    this.historys = historys;
    this.hasNext = hasNext;
    setHasNextIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PaidCallHistoryResult(PaidCallHistoryResult other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    if (other.isSetHistorys()) {
      Vector __this__historys = new Vector();
      for (Enumeration other_enum = other.historys.elements(); other_enum.hasMoreElements(); ) {
        PaidCallHistory other_element = (PaidCallHistory)other_enum.nextElement();
        __this__historys.addElement(new PaidCallHistory(other_element));
      }
      this.historys = __this__historys;
    }
    this.hasNext = other.hasNext;
  }

  public PaidCallHistoryResult deepCopy() {
    return new PaidCallHistoryResult(this);
  }

  public void clear() {
    this.historys = null;
    setHasNextIsSet(false);
    this.hasNext = false;
  }

  public int getHistorysSize() {
    return (this.historys == null) ? 0 : this.historys.size();
  }

  public Enumeration getHistorysEnumeration() {
    return (this.historys == null) ? null : this.historys.elements();
  }

  public void addToHistorys(PaidCallHistory elem) {
    if (this.historys == null) {
      this.historys = new Vector();
    }
    this.historys.addElement(elem);
  }

  public Vector getHistorys() {
    return this.historys;
  }

  public void setHistorys(Vector historys) {
    this.historys = historys;
  }

  public void unsetHistorys() {
    this.historys = null;
  }

  /** Returns true if field historys is set (has been assigned a value) and false otherwise */
  public boolean isSetHistorys() {
    return this.historys != null;
  }

  public void setHistorysIsSet(boolean value) {
    if (!value) {
      this.historys = null;
    }
  }

  public boolean isHasNext() {
    return this.hasNext;
  }

  public void setHasNext(boolean hasNext) {
    this.hasNext = hasNext;
    setHasNextIsSet(true);
  }

  public void unsetHasNext() {
    __isset_vector[__HASNEXT_ISSET_ID] = false;
  }

  /** Returns true if field hasNext is set (has been assigned a value) and false otherwise */
  public boolean isSetHasNext() {
    return __isset_vector[__HASNEXT_ISSET_ID];
  }

  public void setHasNextIsSet(boolean value) {
    __isset_vector[__HASNEXT_ISSET_ID] = value;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PaidCallHistoryResult)
      return this.equals((PaidCallHistoryResult)that);
    return false;
  }

  public boolean equals(PaidCallHistoryResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_historys = true && this.isSetHistorys();
    boolean that_present_historys = true && that.isSetHistorys();
    if (this_present_historys || that_present_historys) {
      if (!(this_present_historys && that_present_historys))
        return false;
      if (!this.historys.equals(that.historys))
        return false;
    }

    boolean this_present_hasNext = true;
    boolean that_present_hasNext = true;
    if (this_present_hasNext || that_present_hasNext) {
      if (!(this_present_hasNext && that_present_hasNext))
        return false;
      if (this.hasNext != that.hasNext)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    PaidCallHistoryResult other = (PaidCallHistoryResult)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetHistorys(), other.isSetHistorys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHistorys()) {
      lastComparison = TBaseHelper.compareTo(this.historys, other.historys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetHasNext(), other.isSetHasNext());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasNext()) {
      lastComparison = TBaseHelper.compareTo(this.hasNext, other.hasNext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // HISTORYS
          if (field.type == TType.LIST) {
            {
              TList _list16 = iprot.readListBegin();
              this.historys = new Vector(_list16.size);
              for (int _i17 = 0; _i17 < _list16.size; ++_i17)
              {
                PaidCallHistory _elem18;
                _elem18 = new PaidCallHistory();
                _elem18.read(iprot);
                this.historys.addElement(_elem18);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // HAS_NEXT
          if (field.type == TType.BOOL) {
            this.hasNext = iprot.readBool();
            setHasNextIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.historys != null) {
      oprot.writeFieldBegin(HISTORYS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.historys.size()));
        for (Enumeration _iter19_enum = this.historys.elements(); _iter19_enum.hasMoreElements(); )         {
          PaidCallHistory _iter19 = (PaidCallHistory)_iter19_enum.nextElement();
          _iter19.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(HAS_NEXT_FIELD_DESC);
    oprot.writeBool(this.hasNext);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("PaidCallHistoryResult(");
    boolean first = true;

    sb.append("historys:");
    if (this.historys == null) {
      sb.append("null");
    } else {
      sb.append(this.historys);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasNext:");
    sb.append(this.hasNext);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

