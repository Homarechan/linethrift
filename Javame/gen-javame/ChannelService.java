/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class ChannelService {

  public interface Iface {

    public OTPResult issueOTP(String channelId) throws ChannelException, TException;

    public ChannelToken approveChannelAndIssueChannelToken(String channelId) throws ChannelException, TException;

    public String approveChannelAndIssueRequestToken(String channelId, String otpId) throws ChannelException, TException;

    public NotificationFetchResult fetchNotificationItems(long localRev) throws ChannelException, TException;

    public ApprovedChannelInfos getApprovedChannels(long lastSynced, String locale) throws ChannelException, TException;

    public ChannelInfo getChannelInfo(String channelId, String locale) throws ChannelException, TException;

    public ChannelNotificationSetting getChannelNotificationSetting(String channelId, String locale) throws ChannelException, TException;

    public Vector getChannelNotificationSettings(String locale) throws ChannelException, TException;

    public ChannelInfos getChannels(long lastSynced, String locale) throws ChannelException, TException;

    public ChannelDomains getDomains(long lastSynced) throws ChannelException, TException;

    public FriendChannelMatricesResponse getFriendChannelMatrices(Vector channelIds) throws ChannelException, TException;

    public boolean updateChannelSettings(ChannelSettings channelSettings) throws ChannelException, TException;

    public ChannelDomains getCommonDomains(long lastSynced) throws ChannelException, TException;

    public int getNotificationBadgeCount(long localRev) throws ChannelException, TException;

    public ChannelToken issueChannelToken(String channelId) throws ChannelException, TException;

    public String issueRequestToken(String channelId, String otpId) throws ChannelException, TException;

    public RequestTokenResponse issueRequestTokenWithAuthScheme(String channelId, String otpId, Vector authScheme, String returnUrl) throws ChannelException, TException;

    public String issueRequestTokenForAutoLogin(String channelId, String otpId, String redirectUrl) throws ChannelException, TException;

    public Vector getUpdatedChannelIds(Vector channelIds) throws ChannelException, TException;

    public String reserveCoinUse(CoinUseReservation request, String locale) throws ChannelException, TException;

    public void revokeChannel(String channelId) throws ChannelException, TException;

    public ChannelSyncDatas syncChannelData(long lastSynced, String locale) throws ChannelException, TException;

    public void updateChannelNotificationSetting(Vector setting) throws ChannelException, TException;

  }

  public static class Client implements TServiceClient, Iface {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public OTPResult issueOTP(String channelId) throws ChannelException, TException
    {
      send_issueOTP(channelId);
      return recv_issueOTP();
    }

    public void send_issueOTP(String channelId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("issueOTP", TMessageType.CALL, ++seqid_));
      issueOTP_args args = new issueOTP_args();
      args.setChannelId(channelId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public OTPResult recv_issueOTP() throws ChannelException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "issueOTP failed: out of sequence response");
      }
      issueOTP_result result = new issueOTP_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "issueOTP failed: unknown result");
    }

    public ChannelToken approveChannelAndIssueChannelToken(String channelId) throws ChannelException, TException
    {
      send_approveChannelAndIssueChannelToken(channelId);
      return recv_approveChannelAndIssueChannelToken();
    }

    public void send_approveChannelAndIssueChannelToken(String channelId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("approveChannelAndIssueChannelToken", TMessageType.CALL, ++seqid_));
      approveChannelAndIssueChannelToken_args args = new approveChannelAndIssueChannelToken_args();
      args.setChannelId(channelId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ChannelToken recv_approveChannelAndIssueChannelToken() throws ChannelException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "approveChannelAndIssueChannelToken failed: out of sequence response");
      }
      approveChannelAndIssueChannelToken_result result = new approveChannelAndIssueChannelToken_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "approveChannelAndIssueChannelToken failed: unknown result");
    }

    public String approveChannelAndIssueRequestToken(String channelId, String otpId) throws ChannelException, TException
    {
      send_approveChannelAndIssueRequestToken(channelId, otpId);
      return recv_approveChannelAndIssueRequestToken();
    }

    public void send_approveChannelAndIssueRequestToken(String channelId, String otpId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("approveChannelAndIssueRequestToken", TMessageType.CALL, ++seqid_));
      approveChannelAndIssueRequestToken_args args = new approveChannelAndIssueRequestToken_args();
      args.setChannelId(channelId);
      args.setOtpId(otpId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_approveChannelAndIssueRequestToken() throws ChannelException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "approveChannelAndIssueRequestToken failed: out of sequence response");
      }
      approveChannelAndIssueRequestToken_result result = new approveChannelAndIssueRequestToken_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "approveChannelAndIssueRequestToken failed: unknown result");
    }

    public NotificationFetchResult fetchNotificationItems(long localRev) throws ChannelException, TException
    {
      send_fetchNotificationItems(localRev);
      return recv_fetchNotificationItems();
    }

    public void send_fetchNotificationItems(long localRev) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("fetchNotificationItems", TMessageType.CALL, ++seqid_));
      fetchNotificationItems_args args = new fetchNotificationItems_args();
      args.setLocalRev(localRev);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public NotificationFetchResult recv_fetchNotificationItems() throws ChannelException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "fetchNotificationItems failed: out of sequence response");
      }
      fetchNotificationItems_result result = new fetchNotificationItems_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "fetchNotificationItems failed: unknown result");
    }

    public ApprovedChannelInfos getApprovedChannels(long lastSynced, String locale) throws ChannelException, TException
    {
      send_getApprovedChannels(lastSynced, locale);
      return recv_getApprovedChannels();
    }

    public void send_getApprovedChannels(long lastSynced, String locale) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getApprovedChannels", TMessageType.CALL, ++seqid_));
      getApprovedChannels_args args = new getApprovedChannels_args();
      args.setLastSynced(lastSynced);
      args.setLocale(locale);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ApprovedChannelInfos recv_getApprovedChannels() throws ChannelException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getApprovedChannels failed: out of sequence response");
      }
      getApprovedChannels_result result = new getApprovedChannels_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getApprovedChannels failed: unknown result");
    }

    public ChannelInfo getChannelInfo(String channelId, String locale) throws ChannelException, TException
    {
      send_getChannelInfo(channelId, locale);
      return recv_getChannelInfo();
    }

    public void send_getChannelInfo(String channelId, String locale) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getChannelInfo", TMessageType.CALL, ++seqid_));
      getChannelInfo_args args = new getChannelInfo_args();
      args.setChannelId(channelId);
      args.setLocale(locale);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ChannelInfo recv_getChannelInfo() throws ChannelException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getChannelInfo failed: out of sequence response");
      }
      getChannelInfo_result result = new getChannelInfo_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getChannelInfo failed: unknown result");
    }

    public ChannelNotificationSetting getChannelNotificationSetting(String channelId, String locale) throws ChannelException, TException
    {
      send_getChannelNotificationSetting(channelId, locale);
      return recv_getChannelNotificationSetting();
    }

    public void send_getChannelNotificationSetting(String channelId, String locale) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getChannelNotificationSetting", TMessageType.CALL, ++seqid_));
      getChannelNotificationSetting_args args = new getChannelNotificationSetting_args();
      args.setChannelId(channelId);
      args.setLocale(locale);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ChannelNotificationSetting recv_getChannelNotificationSetting() throws ChannelException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getChannelNotificationSetting failed: out of sequence response");
      }
      getChannelNotificationSetting_result result = new getChannelNotificationSetting_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getChannelNotificationSetting failed: unknown result");
    }

    public Vector getChannelNotificationSettings(String locale) throws ChannelException, TException
    {
      send_getChannelNotificationSettings(locale);
      return recv_getChannelNotificationSettings();
    }

    public void send_getChannelNotificationSettings(String locale) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getChannelNotificationSettings", TMessageType.CALL, ++seqid_));
      getChannelNotificationSettings_args args = new getChannelNotificationSettings_args();
      args.setLocale(locale);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getChannelNotificationSettings() throws ChannelException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getChannelNotificationSettings failed: out of sequence response");
      }
      getChannelNotificationSettings_result result = new getChannelNotificationSettings_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getChannelNotificationSettings failed: unknown result");
    }

    public ChannelInfos getChannels(long lastSynced, String locale) throws ChannelException, TException
    {
      send_getChannels(lastSynced, locale);
      return recv_getChannels();
    }

    public void send_getChannels(long lastSynced, String locale) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getChannels", TMessageType.CALL, ++seqid_));
      getChannels_args args = new getChannels_args();
      args.setLastSynced(lastSynced);
      args.setLocale(locale);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ChannelInfos recv_getChannels() throws ChannelException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getChannels failed: out of sequence response");
      }
      getChannels_result result = new getChannels_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getChannels failed: unknown result");
    }

    public ChannelDomains getDomains(long lastSynced) throws ChannelException, TException
    {
      send_getDomains(lastSynced);
      return recv_getDomains();
    }

    public void send_getDomains(long lastSynced) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getDomains", TMessageType.CALL, ++seqid_));
      getDomains_args args = new getDomains_args();
      args.setLastSynced(lastSynced);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ChannelDomains recv_getDomains() throws ChannelException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getDomains failed: out of sequence response");
      }
      getDomains_result result = new getDomains_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getDomains failed: unknown result");
    }

    public FriendChannelMatricesResponse getFriendChannelMatrices(Vector channelIds) throws ChannelException, TException
    {
      send_getFriendChannelMatrices(channelIds);
      return recv_getFriendChannelMatrices();
    }

    public void send_getFriendChannelMatrices(Vector channelIds) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getFriendChannelMatrices", TMessageType.CALL, ++seqid_));
      getFriendChannelMatrices_args args = new getFriendChannelMatrices_args();
      args.setChannelIds(channelIds);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public FriendChannelMatricesResponse recv_getFriendChannelMatrices() throws ChannelException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getFriendChannelMatrices failed: out of sequence response");
      }
      getFriendChannelMatrices_result result = new getFriendChannelMatrices_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getFriendChannelMatrices failed: unknown result");
    }

    public boolean updateChannelSettings(ChannelSettings channelSettings) throws ChannelException, TException
    {
      send_updateChannelSettings(channelSettings);
      return recv_updateChannelSettings();
    }

    public void send_updateChannelSettings(ChannelSettings channelSettings) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateChannelSettings", TMessageType.CALL, ++seqid_));
      updateChannelSettings_args args = new updateChannelSettings_args();
      args.setChannelSettings(channelSettings);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_updateChannelSettings() throws ChannelException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateChannelSettings failed: out of sequence response");
      }
      updateChannelSettings_result result = new updateChannelSettings_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "updateChannelSettings failed: unknown result");
    }

    public ChannelDomains getCommonDomains(long lastSynced) throws ChannelException, TException
    {
      send_getCommonDomains(lastSynced);
      return recv_getCommonDomains();
    }

    public void send_getCommonDomains(long lastSynced) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getCommonDomains", TMessageType.CALL, ++seqid_));
      getCommonDomains_args args = new getCommonDomains_args();
      args.setLastSynced(lastSynced);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ChannelDomains recv_getCommonDomains() throws ChannelException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getCommonDomains failed: out of sequence response");
      }
      getCommonDomains_result result = new getCommonDomains_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getCommonDomains failed: unknown result");
    }

    public int getNotificationBadgeCount(long localRev) throws ChannelException, TException
    {
      send_getNotificationBadgeCount(localRev);
      return recv_getNotificationBadgeCount();
    }

    public void send_getNotificationBadgeCount(long localRev) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getNotificationBadgeCount", TMessageType.CALL, ++seqid_));
      getNotificationBadgeCount_args args = new getNotificationBadgeCount_args();
      args.setLocalRev(localRev);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public int recv_getNotificationBadgeCount() throws ChannelException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getNotificationBadgeCount failed: out of sequence response");
      }
      getNotificationBadgeCount_result result = new getNotificationBadgeCount_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getNotificationBadgeCount failed: unknown result");
    }

    public ChannelToken issueChannelToken(String channelId) throws ChannelException, TException
    {
      send_issueChannelToken(channelId);
      return recv_issueChannelToken();
    }

    public void send_issueChannelToken(String channelId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("issueChannelToken", TMessageType.CALL, ++seqid_));
      issueChannelToken_args args = new issueChannelToken_args();
      args.setChannelId(channelId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ChannelToken recv_issueChannelToken() throws ChannelException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "issueChannelToken failed: out of sequence response");
      }
      issueChannelToken_result result = new issueChannelToken_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "issueChannelToken failed: unknown result");
    }

    public String issueRequestToken(String channelId, String otpId) throws ChannelException, TException
    {
      send_issueRequestToken(channelId, otpId);
      return recv_issueRequestToken();
    }

    public void send_issueRequestToken(String channelId, String otpId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("issueRequestToken", TMessageType.CALL, ++seqid_));
      issueRequestToken_args args = new issueRequestToken_args();
      args.setChannelId(channelId);
      args.setOtpId(otpId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_issueRequestToken() throws ChannelException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "issueRequestToken failed: out of sequence response");
      }
      issueRequestToken_result result = new issueRequestToken_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "issueRequestToken failed: unknown result");
    }

    public RequestTokenResponse issueRequestTokenWithAuthScheme(String channelId, String otpId, Vector authScheme, String returnUrl) throws ChannelException, TException
    {
      send_issueRequestTokenWithAuthScheme(channelId, otpId, authScheme, returnUrl);
      return recv_issueRequestTokenWithAuthScheme();
    }

    public void send_issueRequestTokenWithAuthScheme(String channelId, String otpId, Vector authScheme, String returnUrl) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("issueRequestTokenWithAuthScheme", TMessageType.CALL, ++seqid_));
      issueRequestTokenWithAuthScheme_args args = new issueRequestTokenWithAuthScheme_args();
      args.setChannelId(channelId);
      args.setOtpId(otpId);
      args.setAuthScheme(authScheme);
      args.setReturnUrl(returnUrl);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public RequestTokenResponse recv_issueRequestTokenWithAuthScheme() throws ChannelException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "issueRequestTokenWithAuthScheme failed: out of sequence response");
      }
      issueRequestTokenWithAuthScheme_result result = new issueRequestTokenWithAuthScheme_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "issueRequestTokenWithAuthScheme failed: unknown result");
    }

    public String issueRequestTokenForAutoLogin(String channelId, String otpId, String redirectUrl) throws ChannelException, TException
    {
      send_issueRequestTokenForAutoLogin(channelId, otpId, redirectUrl);
      return recv_issueRequestTokenForAutoLogin();
    }

    public void send_issueRequestTokenForAutoLogin(String channelId, String otpId, String redirectUrl) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("issueRequestTokenForAutoLogin", TMessageType.CALL, ++seqid_));
      issueRequestTokenForAutoLogin_args args = new issueRequestTokenForAutoLogin_args();
      args.setChannelId(channelId);
      args.setOtpId(otpId);
      args.setRedirectUrl(redirectUrl);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_issueRequestTokenForAutoLogin() throws ChannelException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "issueRequestTokenForAutoLogin failed: out of sequence response");
      }
      issueRequestTokenForAutoLogin_result result = new issueRequestTokenForAutoLogin_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "issueRequestTokenForAutoLogin failed: unknown result");
    }

    public Vector getUpdatedChannelIds(Vector channelIds) throws ChannelException, TException
    {
      send_getUpdatedChannelIds(channelIds);
      return recv_getUpdatedChannelIds();
    }

    public void send_getUpdatedChannelIds(Vector channelIds) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getUpdatedChannelIds", TMessageType.CALL, ++seqid_));
      getUpdatedChannelIds_args args = new getUpdatedChannelIds_args();
      args.setChannelIds(channelIds);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getUpdatedChannelIds() throws ChannelException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getUpdatedChannelIds failed: out of sequence response");
      }
      getUpdatedChannelIds_result result = new getUpdatedChannelIds_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getUpdatedChannelIds failed: unknown result");
    }

    public String reserveCoinUse(CoinUseReservation request, String locale) throws ChannelException, TException
    {
      send_reserveCoinUse(request, locale);
      return recv_reserveCoinUse();
    }

    public void send_reserveCoinUse(CoinUseReservation request, String locale) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("reserveCoinUse", TMessageType.CALL, ++seqid_));
      reserveCoinUse_args args = new reserveCoinUse_args();
      args.setRequest(request);
      args.setLocale(locale);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_reserveCoinUse() throws ChannelException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "reserveCoinUse failed: out of sequence response");
      }
      reserveCoinUse_result result = new reserveCoinUse_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "reserveCoinUse failed: unknown result");
    }

    public void revokeChannel(String channelId) throws ChannelException, TException
    {
      send_revokeChannel(channelId);
      recv_revokeChannel();
    }

    public void send_revokeChannel(String channelId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("revokeChannel", TMessageType.CALL, ++seqid_));
      revokeChannel_args args = new revokeChannel_args();
      args.setChannelId(channelId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_revokeChannel() throws ChannelException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "revokeChannel failed: out of sequence response");
      }
      revokeChannel_result result = new revokeChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public ChannelSyncDatas syncChannelData(long lastSynced, String locale) throws ChannelException, TException
    {
      send_syncChannelData(lastSynced, locale);
      return recv_syncChannelData();
    }

    public void send_syncChannelData(long lastSynced, String locale) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("syncChannelData", TMessageType.CALL, ++seqid_));
      syncChannelData_args args = new syncChannelData_args();
      args.setLastSynced(lastSynced);
      args.setLocale(locale);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ChannelSyncDatas recv_syncChannelData() throws ChannelException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "syncChannelData failed: out of sequence response");
      }
      syncChannelData_result result = new syncChannelData_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "syncChannelData failed: unknown result");
    }

    public void updateChannelNotificationSetting(Vector setting) throws ChannelException, TException
    {
      send_updateChannelNotificationSetting(setting);
      recv_updateChannelNotificationSetting();
    }

    public void send_updateChannelNotificationSetting(Vector setting) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateChannelNotificationSetting", TMessageType.CALL, ++seqid_));
      updateChannelNotificationSetting_args args = new updateChannelNotificationSetting_args();
      args.setSetting(setting);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_updateChannelNotificationSetting() throws ChannelException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateChannelNotificationSetting failed: out of sequence response");
      }
      updateChannelNotificationSetting_result result = new updateChannelNotificationSetting_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

  }
  public static class Processor implements TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("issueOTP", new issueOTP());
      processMap_.put("approveChannelAndIssueChannelToken", new approveChannelAndIssueChannelToken());
      processMap_.put("approveChannelAndIssueRequestToken", new approveChannelAndIssueRequestToken());
      processMap_.put("fetchNotificationItems", new fetchNotificationItems());
      processMap_.put("getApprovedChannels", new getApprovedChannels());
      processMap_.put("getChannelInfo", new getChannelInfo());
      processMap_.put("getChannelNotificationSetting", new getChannelNotificationSetting());
      processMap_.put("getChannelNotificationSettings", new getChannelNotificationSettings());
      processMap_.put("getChannels", new getChannels());
      processMap_.put("getDomains", new getDomains());
      processMap_.put("getFriendChannelMatrices", new getFriendChannelMatrices());
      processMap_.put("updateChannelSettings", new updateChannelSettings());
      processMap_.put("getCommonDomains", new getCommonDomains());
      processMap_.put("getNotificationBadgeCount", new getNotificationBadgeCount());
      processMap_.put("issueChannelToken", new issueChannelToken());
      processMap_.put("issueRequestToken", new issueRequestToken());
      processMap_.put("issueRequestTokenWithAuthScheme", new issueRequestTokenWithAuthScheme());
      processMap_.put("issueRequestTokenForAutoLogin", new issueRequestTokenForAutoLogin());
      processMap_.put("getUpdatedChannelIds", new getUpdatedChannelIds());
      processMap_.put("reserveCoinUse", new reserveCoinUse());
      processMap_.put("revokeChannel", new revokeChannel());
      processMap_.put("syncChannelData", new syncChannelData());
      processMap_.put("updateChannelNotificationSetting", new updateChannelNotificationSetting());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final Hashtable processMap_ = new Hashtable();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = (ProcessFunction)processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class issueOTP implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        issueOTP_args args = new issueOTP_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("issueOTP", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        issueOTP_result result = new issueOTP_result();
        try {
          result.success = iface_.issueOTP(args.channelId);
        } catch (ChannelException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing issueOTP");
          oprot.writeMessageBegin(new TMessage("issueOTP", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("issueOTP", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class approveChannelAndIssueChannelToken implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        approveChannelAndIssueChannelToken_args args = new approveChannelAndIssueChannelToken_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("approveChannelAndIssueChannelToken", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        approveChannelAndIssueChannelToken_result result = new approveChannelAndIssueChannelToken_result();
        try {
          result.success = iface_.approveChannelAndIssueChannelToken(args.channelId);
        } catch (ChannelException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing approveChannelAndIssueChannelToken");
          oprot.writeMessageBegin(new TMessage("approveChannelAndIssueChannelToken", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("approveChannelAndIssueChannelToken", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class approveChannelAndIssueRequestToken implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        approveChannelAndIssueRequestToken_args args = new approveChannelAndIssueRequestToken_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("approveChannelAndIssueRequestToken", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        approveChannelAndIssueRequestToken_result result = new approveChannelAndIssueRequestToken_result();
        try {
          result.success = iface_.approveChannelAndIssueRequestToken(args.channelId, args.otpId);
        } catch (ChannelException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing approveChannelAndIssueRequestToken");
          oprot.writeMessageBegin(new TMessage("approveChannelAndIssueRequestToken", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("approveChannelAndIssueRequestToken", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class fetchNotificationItems implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        fetchNotificationItems_args args = new fetchNotificationItems_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("fetchNotificationItems", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        fetchNotificationItems_result result = new fetchNotificationItems_result();
        try {
          result.success = iface_.fetchNotificationItems(args.localRev);
        } catch (ChannelException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing fetchNotificationItems");
          oprot.writeMessageBegin(new TMessage("fetchNotificationItems", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("fetchNotificationItems", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getApprovedChannels implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getApprovedChannels_args args = new getApprovedChannels_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getApprovedChannels", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getApprovedChannels_result result = new getApprovedChannels_result();
        try {
          result.success = iface_.getApprovedChannels(args.lastSynced, args.locale);
        } catch (ChannelException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getApprovedChannels");
          oprot.writeMessageBegin(new TMessage("getApprovedChannels", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getApprovedChannels", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getChannelInfo implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getChannelInfo_args args = new getChannelInfo_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getChannelInfo", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getChannelInfo_result result = new getChannelInfo_result();
        try {
          result.success = iface_.getChannelInfo(args.channelId, args.locale);
        } catch (ChannelException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getChannelInfo");
          oprot.writeMessageBegin(new TMessage("getChannelInfo", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getChannelInfo", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getChannelNotificationSetting implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getChannelNotificationSetting_args args = new getChannelNotificationSetting_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getChannelNotificationSetting", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getChannelNotificationSetting_result result = new getChannelNotificationSetting_result();
        try {
          result.success = iface_.getChannelNotificationSetting(args.channelId, args.locale);
        } catch (ChannelException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getChannelNotificationSetting");
          oprot.writeMessageBegin(new TMessage("getChannelNotificationSetting", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getChannelNotificationSetting", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getChannelNotificationSettings implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getChannelNotificationSettings_args args = new getChannelNotificationSettings_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getChannelNotificationSettings", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getChannelNotificationSettings_result result = new getChannelNotificationSettings_result();
        try {
          result.success = iface_.getChannelNotificationSettings(args.locale);
        } catch (ChannelException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getChannelNotificationSettings");
          oprot.writeMessageBegin(new TMessage("getChannelNotificationSettings", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getChannelNotificationSettings", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getChannels implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getChannels_args args = new getChannels_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getChannels", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getChannels_result result = new getChannels_result();
        try {
          result.success = iface_.getChannels(args.lastSynced, args.locale);
        } catch (ChannelException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getChannels");
          oprot.writeMessageBegin(new TMessage("getChannels", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getChannels", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getDomains implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getDomains_args args = new getDomains_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getDomains", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getDomains_result result = new getDomains_result();
        try {
          result.success = iface_.getDomains(args.lastSynced);
        } catch (ChannelException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getDomains");
          oprot.writeMessageBegin(new TMessage("getDomains", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getDomains", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getFriendChannelMatrices implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getFriendChannelMatrices_args args = new getFriendChannelMatrices_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getFriendChannelMatrices", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getFriendChannelMatrices_result result = new getFriendChannelMatrices_result();
        try {
          result.success = iface_.getFriendChannelMatrices(args.channelIds);
        } catch (ChannelException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getFriendChannelMatrices");
          oprot.writeMessageBegin(new TMessage("getFriendChannelMatrices", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getFriendChannelMatrices", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateChannelSettings implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateChannelSettings_args args = new updateChannelSettings_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateChannelSettings", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateChannelSettings_result result = new updateChannelSettings_result();
        try {
          result.success = iface_.updateChannelSettings(args.channelSettings);
          result.setSuccessIsSet(true);
        } catch (ChannelException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateChannelSettings");
          oprot.writeMessageBegin(new TMessage("updateChannelSettings", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateChannelSettings", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getCommonDomains implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getCommonDomains_args args = new getCommonDomains_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getCommonDomains", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getCommonDomains_result result = new getCommonDomains_result();
        try {
          result.success = iface_.getCommonDomains(args.lastSynced);
        } catch (ChannelException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getCommonDomains");
          oprot.writeMessageBegin(new TMessage("getCommonDomains", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getCommonDomains", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getNotificationBadgeCount implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getNotificationBadgeCount_args args = new getNotificationBadgeCount_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getNotificationBadgeCount", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getNotificationBadgeCount_result result = new getNotificationBadgeCount_result();
        try {
          result.success = iface_.getNotificationBadgeCount(args.localRev);
          result.setSuccessIsSet(true);
        } catch (ChannelException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getNotificationBadgeCount");
          oprot.writeMessageBegin(new TMessage("getNotificationBadgeCount", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getNotificationBadgeCount", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class issueChannelToken implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        issueChannelToken_args args = new issueChannelToken_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("issueChannelToken", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        issueChannelToken_result result = new issueChannelToken_result();
        try {
          result.success = iface_.issueChannelToken(args.channelId);
        } catch (ChannelException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing issueChannelToken");
          oprot.writeMessageBegin(new TMessage("issueChannelToken", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("issueChannelToken", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class issueRequestToken implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        issueRequestToken_args args = new issueRequestToken_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("issueRequestToken", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        issueRequestToken_result result = new issueRequestToken_result();
        try {
          result.success = iface_.issueRequestToken(args.channelId, args.otpId);
        } catch (ChannelException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing issueRequestToken");
          oprot.writeMessageBegin(new TMessage("issueRequestToken", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("issueRequestToken", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class issueRequestTokenWithAuthScheme implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        issueRequestTokenWithAuthScheme_args args = new issueRequestTokenWithAuthScheme_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("issueRequestTokenWithAuthScheme", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        issueRequestTokenWithAuthScheme_result result = new issueRequestTokenWithAuthScheme_result();
        try {
          result.success = iface_.issueRequestTokenWithAuthScheme(args.channelId, args.otpId, args.authScheme, args.returnUrl);
        } catch (ChannelException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing issueRequestTokenWithAuthScheme");
          oprot.writeMessageBegin(new TMessage("issueRequestTokenWithAuthScheme", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("issueRequestTokenWithAuthScheme", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class issueRequestTokenForAutoLogin implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        issueRequestTokenForAutoLogin_args args = new issueRequestTokenForAutoLogin_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("issueRequestTokenForAutoLogin", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        issueRequestTokenForAutoLogin_result result = new issueRequestTokenForAutoLogin_result();
        try {
          result.success = iface_.issueRequestTokenForAutoLogin(args.channelId, args.otpId, args.redirectUrl);
        } catch (ChannelException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing issueRequestTokenForAutoLogin");
          oprot.writeMessageBegin(new TMessage("issueRequestTokenForAutoLogin", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("issueRequestTokenForAutoLogin", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getUpdatedChannelIds implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getUpdatedChannelIds_args args = new getUpdatedChannelIds_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getUpdatedChannelIds", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getUpdatedChannelIds_result result = new getUpdatedChannelIds_result();
        try {
          result.success = iface_.getUpdatedChannelIds(args.channelIds);
        } catch (ChannelException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getUpdatedChannelIds");
          oprot.writeMessageBegin(new TMessage("getUpdatedChannelIds", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getUpdatedChannelIds", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class reserveCoinUse implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        reserveCoinUse_args args = new reserveCoinUse_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("reserveCoinUse", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        reserveCoinUse_result result = new reserveCoinUse_result();
        try {
          result.success = iface_.reserveCoinUse(args.request, args.locale);
        } catch (ChannelException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing reserveCoinUse");
          oprot.writeMessageBegin(new TMessage("reserveCoinUse", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("reserveCoinUse", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class revokeChannel implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        revokeChannel_args args = new revokeChannel_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("revokeChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        revokeChannel_result result = new revokeChannel_result();
        try {
          iface_.revokeChannel(args.channelId);
        } catch (ChannelException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing revokeChannel");
          oprot.writeMessageBegin(new TMessage("revokeChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("revokeChannel", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class syncChannelData implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        syncChannelData_args args = new syncChannelData_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("syncChannelData", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        syncChannelData_result result = new syncChannelData_result();
        try {
          result.success = iface_.syncChannelData(args.lastSynced, args.locale);
        } catch (ChannelException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing syncChannelData");
          oprot.writeMessageBegin(new TMessage("syncChannelData", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("syncChannelData", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateChannelNotificationSetting implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateChannelNotificationSetting_args args = new updateChannelNotificationSetting_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateChannelNotificationSetting", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateChannelNotificationSetting_result result = new updateChannelNotificationSetting_result();
        try {
          iface_.updateChannelNotificationSetting(args.setting);
        } catch (ChannelException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateChannelNotificationSetting");
          oprot.writeMessageBegin(new TMessage("updateChannelNotificationSetting", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateChannelNotificationSetting", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class issueOTP_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("issueOTP_args");

    private static final TField CHANNEL_ID_FIELD_DESC = new TField("channelId", TType.STRING, (short)2);

    private String channelId;

    // isset id assignments

    public issueOTP_args() {
    }

    public issueOTP_args(
      String channelId)
    {
      this();
      this.channelId = channelId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issueOTP_args(issueOTP_args other) {
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
    }

    public issueOTP_args deepCopy() {
      return new issueOTP_args(this);
    }

    public void clear() {
      this.channelId = null;
    }

    public String getChannelId() {
      return this.channelId;
    }

    public void setChannelId(String channelId) {
      this.channelId = channelId;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof issueOTP_args)
        return this.equals((issueOTP_args)that);
      return false;
    }

    public boolean equals(issueOTP_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      issueOTP_args other = (issueOTP_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetChannelId(), other.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = TBaseHelper.compareTo(this.channelId, other.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // CHANNEL_ID
            if (field.type == TType.STRING) {
              this.channelId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.channelId != null) {
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeString(this.channelId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("issueOTP_args(");
      boolean first = true;

      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class issueOTP_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("issueOTP_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private OTPResult success;
    private ChannelException e;

    // isset id assignments

    public issueOTP_result() {
    }

    public issueOTP_result(
      OTPResult success,
      ChannelException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issueOTP_result(issueOTP_result other) {
      if (other.isSetSuccess()) {
        this.success = new OTPResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public issueOTP_result deepCopy() {
      return new issueOTP_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public OTPResult getSuccess() {
      return this.success;
    }

    public void setSuccess(OTPResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof issueOTP_result)
        return this.equals((issueOTP_result)that);
      return false;
    }

    public boolean equals(issueOTP_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      issueOTP_result other = (issueOTP_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new OTPResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new ChannelException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("issueOTP_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class approveChannelAndIssueChannelToken_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("approveChannelAndIssueChannelToken_args");

    private static final TField CHANNEL_ID_FIELD_DESC = new TField("channelId", TType.STRING, (short)1);

    private String channelId;

    // isset id assignments

    public approveChannelAndIssueChannelToken_args() {
    }

    public approveChannelAndIssueChannelToken_args(
      String channelId)
    {
      this();
      this.channelId = channelId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public approveChannelAndIssueChannelToken_args(approveChannelAndIssueChannelToken_args other) {
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
    }

    public approveChannelAndIssueChannelToken_args deepCopy() {
      return new approveChannelAndIssueChannelToken_args(this);
    }

    public void clear() {
      this.channelId = null;
    }

    public String getChannelId() {
      return this.channelId;
    }

    public void setChannelId(String channelId) {
      this.channelId = channelId;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof approveChannelAndIssueChannelToken_args)
        return this.equals((approveChannelAndIssueChannelToken_args)that);
      return false;
    }

    public boolean equals(approveChannelAndIssueChannelToken_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      approveChannelAndIssueChannelToken_args other = (approveChannelAndIssueChannelToken_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetChannelId(), other.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = TBaseHelper.compareTo(this.channelId, other.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // CHANNEL_ID
            if (field.type == TType.STRING) {
              this.channelId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.channelId != null) {
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeString(this.channelId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("approveChannelAndIssueChannelToken_args(");
      boolean first = true;

      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class approveChannelAndIssueChannelToken_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("approveChannelAndIssueChannelToken_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private ChannelToken success;
    private ChannelException e;

    // isset id assignments

    public approveChannelAndIssueChannelToken_result() {
    }

    public approveChannelAndIssueChannelToken_result(
      ChannelToken success,
      ChannelException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public approveChannelAndIssueChannelToken_result(approveChannelAndIssueChannelToken_result other) {
      if (other.isSetSuccess()) {
        this.success = new ChannelToken(other.success);
      }
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public approveChannelAndIssueChannelToken_result deepCopy() {
      return new approveChannelAndIssueChannelToken_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ChannelToken getSuccess() {
      return this.success;
    }

    public void setSuccess(ChannelToken success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof approveChannelAndIssueChannelToken_result)
        return this.equals((approveChannelAndIssueChannelToken_result)that);
      return false;
    }

    public boolean equals(approveChannelAndIssueChannelToken_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      approveChannelAndIssueChannelToken_result other = (approveChannelAndIssueChannelToken_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new ChannelToken();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new ChannelException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("approveChannelAndIssueChannelToken_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class approveChannelAndIssueRequestToken_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("approveChannelAndIssueRequestToken_args");

    private static final TField CHANNEL_ID_FIELD_DESC = new TField("channelId", TType.STRING, (short)1);
    private static final TField OTP_ID_FIELD_DESC = new TField("otpId", TType.STRING, (short)2);

    private String channelId;
    private String otpId;

    // isset id assignments

    public approveChannelAndIssueRequestToken_args() {
    }

    public approveChannelAndIssueRequestToken_args(
      String channelId,
      String otpId)
    {
      this();
      this.channelId = channelId;
      this.otpId = otpId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public approveChannelAndIssueRequestToken_args(approveChannelAndIssueRequestToken_args other) {
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
      if (other.isSetOtpId()) {
        this.otpId = other.otpId;
      }
    }

    public approveChannelAndIssueRequestToken_args deepCopy() {
      return new approveChannelAndIssueRequestToken_args(this);
    }

    public void clear() {
      this.channelId = null;
      this.otpId = null;
    }

    public String getChannelId() {
      return this.channelId;
    }

    public void setChannelId(String channelId) {
      this.channelId = channelId;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public String getOtpId() {
      return this.otpId;
    }

    public void setOtpId(String otpId) {
      this.otpId = otpId;
    }

    public void unsetOtpId() {
      this.otpId = null;
    }

    /** Returns true if field otpId is set (has been assigned a value) and false otherwise */
    public boolean isSetOtpId() {
      return this.otpId != null;
    }

    public void setOtpIdIsSet(boolean value) {
      if (!value) {
        this.otpId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof approveChannelAndIssueRequestToken_args)
        return this.equals((approveChannelAndIssueRequestToken_args)that);
      return false;
    }

    public boolean equals(approveChannelAndIssueRequestToken_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      boolean this_present_otpId = true && this.isSetOtpId();
      boolean that_present_otpId = true && that.isSetOtpId();
      if (this_present_otpId || that_present_otpId) {
        if (!(this_present_otpId && that_present_otpId))
          return false;
        if (!this.otpId.equals(that.otpId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      approveChannelAndIssueRequestToken_args other = (approveChannelAndIssueRequestToken_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetChannelId(), other.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = TBaseHelper.compareTo(this.channelId, other.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetOtpId(), other.isSetOtpId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOtpId()) {
        lastComparison = TBaseHelper.compareTo(this.otpId, other.otpId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // CHANNEL_ID
            if (field.type == TType.STRING) {
              this.channelId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // OTP_ID
            if (field.type == TType.STRING) {
              this.otpId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.channelId != null) {
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeString(this.channelId);
        oprot.writeFieldEnd();
      }
      if (this.otpId != null) {
        oprot.writeFieldBegin(OTP_ID_FIELD_DESC);
        oprot.writeString(this.otpId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("approveChannelAndIssueRequestToken_args(");
      boolean first = true;

      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("otpId:");
      if (this.otpId == null) {
        sb.append("null");
      } else {
        sb.append(this.otpId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class approveChannelAndIssueRequestToken_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("approveChannelAndIssueRequestToken_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private ChannelException e;

    // isset id assignments

    public approveChannelAndIssueRequestToken_result() {
    }

    public approveChannelAndIssueRequestToken_result(
      String success,
      ChannelException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public approveChannelAndIssueRequestToken_result(approveChannelAndIssueRequestToken_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public approveChannelAndIssueRequestToken_result deepCopy() {
      return new approveChannelAndIssueRequestToken_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof approveChannelAndIssueRequestToken_result)
        return this.equals((approveChannelAndIssueRequestToken_result)that);
      return false;
    }

    public boolean equals(approveChannelAndIssueRequestToken_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      approveChannelAndIssueRequestToken_result other = (approveChannelAndIssueRequestToken_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new ChannelException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("approveChannelAndIssueRequestToken_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class fetchNotificationItems_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("fetchNotificationItems_args");

    private static final TField LOCAL_REV_FIELD_DESC = new TField("localRev", TType.I64, (short)2);

    private long localRev;

    // isset id assignments
    private static final int __LOCALREV_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public fetchNotificationItems_args() {
    }

    public fetchNotificationItems_args(
      long localRev)
    {
      this();
      this.localRev = localRev;
      setLocalRevIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchNotificationItems_args(fetchNotificationItems_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.localRev = other.localRev;
    }

    public fetchNotificationItems_args deepCopy() {
      return new fetchNotificationItems_args(this);
    }

    public void clear() {
      setLocalRevIsSet(false);
      this.localRev = 0;
    }

    public long getLocalRev() {
      return this.localRev;
    }

    public void setLocalRev(long localRev) {
      this.localRev = localRev;
      setLocalRevIsSet(true);
    }

    public void unsetLocalRev() {
      __isset_vector[__LOCALREV_ISSET_ID] = false;
    }

    /** Returns true if field localRev is set (has been assigned a value) and false otherwise */
    public boolean isSetLocalRev() {
      return __isset_vector[__LOCALREV_ISSET_ID];
    }

    public void setLocalRevIsSet(boolean value) {
      __isset_vector[__LOCALREV_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchNotificationItems_args)
        return this.equals((fetchNotificationItems_args)that);
      return false;
    }

    public boolean equals(fetchNotificationItems_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_localRev = true;
      boolean that_present_localRev = true;
      if (this_present_localRev || that_present_localRev) {
        if (!(this_present_localRev && that_present_localRev))
          return false;
        if (this.localRev != that.localRev)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      fetchNotificationItems_args other = (fetchNotificationItems_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetLocalRev(), other.isSetLocalRev());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocalRev()) {
        lastComparison = TBaseHelper.compareTo(this.localRev, other.localRev);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // LOCAL_REV
            if (field.type == TType.I64) {
              this.localRev = iprot.readI64();
              setLocalRevIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LOCAL_REV_FIELD_DESC);
      oprot.writeI64(this.localRev);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("fetchNotificationItems_args(");
      boolean first = true;

      sb.append("localRev:");
      sb.append(this.localRev);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class fetchNotificationItems_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("fetchNotificationItems_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private NotificationFetchResult success;
    private ChannelException e;

    // isset id assignments

    public fetchNotificationItems_result() {
    }

    public fetchNotificationItems_result(
      NotificationFetchResult success,
      ChannelException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchNotificationItems_result(fetchNotificationItems_result other) {
      if (other.isSetSuccess()) {
        this.success = new NotificationFetchResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public fetchNotificationItems_result deepCopy() {
      return new fetchNotificationItems_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public NotificationFetchResult getSuccess() {
      return this.success;
    }

    public void setSuccess(NotificationFetchResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchNotificationItems_result)
        return this.equals((fetchNotificationItems_result)that);
      return false;
    }

    public boolean equals(fetchNotificationItems_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      fetchNotificationItems_result other = (fetchNotificationItems_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new NotificationFetchResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new ChannelException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("fetchNotificationItems_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getApprovedChannels_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getApprovedChannels_args");

    private static final TField LAST_SYNCED_FIELD_DESC = new TField("lastSynced", TType.I64, (short)2);
    private static final TField LOCALE_FIELD_DESC = new TField("locale", TType.STRING, (short)3);

    private long lastSynced;
    private String locale;

    // isset id assignments
    private static final int __LASTSYNCED_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getApprovedChannels_args() {
    }

    public getApprovedChannels_args(
      long lastSynced,
      String locale)
    {
      this();
      this.lastSynced = lastSynced;
      setLastSyncedIsSet(true);
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApprovedChannels_args(getApprovedChannels_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.lastSynced = other.lastSynced;
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public getApprovedChannels_args deepCopy() {
      return new getApprovedChannels_args(this);
    }

    public void clear() {
      setLastSyncedIsSet(false);
      this.lastSynced = 0;
      this.locale = null;
    }

    public long getLastSynced() {
      return this.lastSynced;
    }

    public void setLastSynced(long lastSynced) {
      this.lastSynced = lastSynced;
      setLastSyncedIsSet(true);
    }

    public void unsetLastSynced() {
      __isset_vector[__LASTSYNCED_ISSET_ID] = false;
    }

    /** Returns true if field lastSynced is set (has been assigned a value) and false otherwise */
    public boolean isSetLastSynced() {
      return __isset_vector[__LASTSYNCED_ISSET_ID];
    }

    public void setLastSyncedIsSet(boolean value) {
      __isset_vector[__LASTSYNCED_ISSET_ID] = value;
    }

    public String getLocale() {
      return this.locale;
    }

    public void setLocale(String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApprovedChannels_args)
        return this.equals((getApprovedChannels_args)that);
      return false;
    }

    public boolean equals(getApprovedChannels_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_lastSynced = true;
      boolean that_present_lastSynced = true;
      if (this_present_lastSynced || that_present_lastSynced) {
        if (!(this_present_lastSynced && that_present_lastSynced))
          return false;
        if (this.lastSynced != that.lastSynced)
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getApprovedChannels_args other = (getApprovedChannels_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetLastSynced(), other.isSetLastSynced());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastSynced()) {
        lastComparison = TBaseHelper.compareTo(this.lastSynced, other.lastSynced);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLocale(), other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // LAST_SYNCED
            if (field.type == TType.I64) {
              this.lastSynced = iprot.readI64();
              setLastSyncedIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // LOCALE
            if (field.type == TType.STRING) {
              this.locale = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LAST_SYNCED_FIELD_DESC);
      oprot.writeI64(this.lastSynced);
      oprot.writeFieldEnd();
      if (this.locale != null) {
        oprot.writeFieldBegin(LOCALE_FIELD_DESC);
        oprot.writeString(this.locale);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getApprovedChannels_args(");
      boolean first = true;

      sb.append("lastSynced:");
      sb.append(this.lastSynced);
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getApprovedChannels_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getApprovedChannels_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private ApprovedChannelInfos success;
    private ChannelException e;

    // isset id assignments

    public getApprovedChannels_result() {
    }

    public getApprovedChannels_result(
      ApprovedChannelInfos success,
      ChannelException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getApprovedChannels_result(getApprovedChannels_result other) {
      if (other.isSetSuccess()) {
        this.success = new ApprovedChannelInfos(other.success);
      }
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public getApprovedChannels_result deepCopy() {
      return new getApprovedChannels_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ApprovedChannelInfos getSuccess() {
      return this.success;
    }

    public void setSuccess(ApprovedChannelInfos success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getApprovedChannels_result)
        return this.equals((getApprovedChannels_result)that);
      return false;
    }

    public boolean equals(getApprovedChannels_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getApprovedChannels_result other = (getApprovedChannels_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new ApprovedChannelInfos();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new ChannelException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getApprovedChannels_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getChannelInfo_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getChannelInfo_args");

    private static final TField CHANNEL_ID_FIELD_DESC = new TField("channelId", TType.STRING, (short)2);
    private static final TField LOCALE_FIELD_DESC = new TField("locale", TType.STRING, (short)3);

    private String channelId;
    private String locale;

    // isset id assignments

    public getChannelInfo_args() {
    }

    public getChannelInfo_args(
      String channelId,
      String locale)
    {
      this();
      this.channelId = channelId;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getChannelInfo_args(getChannelInfo_args other) {
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public getChannelInfo_args deepCopy() {
      return new getChannelInfo_args(this);
    }

    public void clear() {
      this.channelId = null;
      this.locale = null;
    }

    public String getChannelId() {
      return this.channelId;
    }

    public void setChannelId(String channelId) {
      this.channelId = channelId;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public String getLocale() {
      return this.locale;
    }

    public void setLocale(String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getChannelInfo_args)
        return this.equals((getChannelInfo_args)that);
      return false;
    }

    public boolean equals(getChannelInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getChannelInfo_args other = (getChannelInfo_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetChannelId(), other.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = TBaseHelper.compareTo(this.channelId, other.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLocale(), other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // CHANNEL_ID
            if (field.type == TType.STRING) {
              this.channelId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // LOCALE
            if (field.type == TType.STRING) {
              this.locale = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.channelId != null) {
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeString(this.channelId);
        oprot.writeFieldEnd();
      }
      if (this.locale != null) {
        oprot.writeFieldBegin(LOCALE_FIELD_DESC);
        oprot.writeString(this.locale);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getChannelInfo_args(");
      boolean first = true;

      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getChannelInfo_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getChannelInfo_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private ChannelInfo success;
    private ChannelException e;

    // isset id assignments

    public getChannelInfo_result() {
    }

    public getChannelInfo_result(
      ChannelInfo success,
      ChannelException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getChannelInfo_result(getChannelInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new ChannelInfo(other.success);
      }
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public getChannelInfo_result deepCopy() {
      return new getChannelInfo_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ChannelInfo getSuccess() {
      return this.success;
    }

    public void setSuccess(ChannelInfo success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getChannelInfo_result)
        return this.equals((getChannelInfo_result)that);
      return false;
    }

    public boolean equals(getChannelInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getChannelInfo_result other = (getChannelInfo_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new ChannelInfo();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new ChannelException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getChannelInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getChannelNotificationSetting_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getChannelNotificationSetting_args");

    private static final TField CHANNEL_ID_FIELD_DESC = new TField("channelId", TType.STRING, (short)1);
    private static final TField LOCALE_FIELD_DESC = new TField("locale", TType.STRING, (short)2);

    private String channelId;
    private String locale;

    // isset id assignments

    public getChannelNotificationSetting_args() {
    }

    public getChannelNotificationSetting_args(
      String channelId,
      String locale)
    {
      this();
      this.channelId = channelId;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getChannelNotificationSetting_args(getChannelNotificationSetting_args other) {
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public getChannelNotificationSetting_args deepCopy() {
      return new getChannelNotificationSetting_args(this);
    }

    public void clear() {
      this.channelId = null;
      this.locale = null;
    }

    public String getChannelId() {
      return this.channelId;
    }

    public void setChannelId(String channelId) {
      this.channelId = channelId;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public String getLocale() {
      return this.locale;
    }

    public void setLocale(String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getChannelNotificationSetting_args)
        return this.equals((getChannelNotificationSetting_args)that);
      return false;
    }

    public boolean equals(getChannelNotificationSetting_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getChannelNotificationSetting_args other = (getChannelNotificationSetting_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetChannelId(), other.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = TBaseHelper.compareTo(this.channelId, other.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLocale(), other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // CHANNEL_ID
            if (field.type == TType.STRING) {
              this.channelId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // LOCALE
            if (field.type == TType.STRING) {
              this.locale = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.channelId != null) {
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeString(this.channelId);
        oprot.writeFieldEnd();
      }
      if (this.locale != null) {
        oprot.writeFieldBegin(LOCALE_FIELD_DESC);
        oprot.writeString(this.locale);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getChannelNotificationSetting_args(");
      boolean first = true;

      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getChannelNotificationSetting_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getChannelNotificationSetting_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private ChannelNotificationSetting success;
    private ChannelException e;

    // isset id assignments

    public getChannelNotificationSetting_result() {
    }

    public getChannelNotificationSetting_result(
      ChannelNotificationSetting success,
      ChannelException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getChannelNotificationSetting_result(getChannelNotificationSetting_result other) {
      if (other.isSetSuccess()) {
        this.success = new ChannelNotificationSetting(other.success);
      }
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public getChannelNotificationSetting_result deepCopy() {
      return new getChannelNotificationSetting_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ChannelNotificationSetting getSuccess() {
      return this.success;
    }

    public void setSuccess(ChannelNotificationSetting success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getChannelNotificationSetting_result)
        return this.equals((getChannelNotificationSetting_result)that);
      return false;
    }

    public boolean equals(getChannelNotificationSetting_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getChannelNotificationSetting_result other = (getChannelNotificationSetting_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new ChannelNotificationSetting();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new ChannelException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getChannelNotificationSetting_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getChannelNotificationSettings_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getChannelNotificationSettings_args");

    private static final TField LOCALE_FIELD_DESC = new TField("locale", TType.STRING, (short)1);

    private String locale;

    // isset id assignments

    public getChannelNotificationSettings_args() {
    }

    public getChannelNotificationSettings_args(
      String locale)
    {
      this();
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getChannelNotificationSettings_args(getChannelNotificationSettings_args other) {
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public getChannelNotificationSettings_args deepCopy() {
      return new getChannelNotificationSettings_args(this);
    }

    public void clear() {
      this.locale = null;
    }

    public String getLocale() {
      return this.locale;
    }

    public void setLocale(String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getChannelNotificationSettings_args)
        return this.equals((getChannelNotificationSettings_args)that);
      return false;
    }

    public boolean equals(getChannelNotificationSettings_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getChannelNotificationSettings_args other = (getChannelNotificationSettings_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetLocale(), other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // LOCALE
            if (field.type == TType.STRING) {
              this.locale = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.locale != null) {
        oprot.writeFieldBegin(LOCALE_FIELD_DESC);
        oprot.writeString(this.locale);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getChannelNotificationSettings_args(");
      boolean first = true;

      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getChannelNotificationSettings_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getChannelNotificationSettings_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private ChannelException e;

    // isset id assignments

    public getChannelNotificationSettings_result() {
    }

    public getChannelNotificationSettings_result(
      Vector success,
      ChannelException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getChannelNotificationSettings_result(getChannelNotificationSettings_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          ChannelNotificationSetting other_element = (ChannelNotificationSetting)other_enum.nextElement();
          __this__success.addElement(new ChannelNotificationSetting(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public getChannelNotificationSettings_result deepCopy() {
      return new getChannelNotificationSettings_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(ChannelNotificationSetting elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getChannelNotificationSettings_result)
        return this.equals((getChannelNotificationSettings_result)that);
      return false;
    }

    public boolean equals(getChannelNotificationSettings_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getChannelNotificationSettings_result other = (getChannelNotificationSettings_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list717 = iprot.readListBegin();
                this.success = new Vector(_list717.size);
                for (int _i718 = 0; _i718 < _list717.size; ++_i718)
                {
                  ChannelNotificationSetting _elem719;
                  _elem719 = new ChannelNotificationSetting();
                  _elem719.read(iprot);
                  this.success.addElement(_elem719);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new ChannelException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter720_enum = this.success.elements(); _iter720_enum.hasMoreElements(); )           {
            ChannelNotificationSetting _iter720 = (ChannelNotificationSetting)_iter720_enum.nextElement();
            _iter720.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getChannelNotificationSettings_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getChannels_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getChannels_args");

    private static final TField LAST_SYNCED_FIELD_DESC = new TField("lastSynced", TType.I64, (short)2);
    private static final TField LOCALE_FIELD_DESC = new TField("locale", TType.STRING, (short)3);

    private long lastSynced;
    private String locale;

    // isset id assignments
    private static final int __LASTSYNCED_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getChannels_args() {
    }

    public getChannels_args(
      long lastSynced,
      String locale)
    {
      this();
      this.lastSynced = lastSynced;
      setLastSyncedIsSet(true);
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getChannels_args(getChannels_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.lastSynced = other.lastSynced;
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public getChannels_args deepCopy() {
      return new getChannels_args(this);
    }

    public void clear() {
      setLastSyncedIsSet(false);
      this.lastSynced = 0;
      this.locale = null;
    }

    public long getLastSynced() {
      return this.lastSynced;
    }

    public void setLastSynced(long lastSynced) {
      this.lastSynced = lastSynced;
      setLastSyncedIsSet(true);
    }

    public void unsetLastSynced() {
      __isset_vector[__LASTSYNCED_ISSET_ID] = false;
    }

    /** Returns true if field lastSynced is set (has been assigned a value) and false otherwise */
    public boolean isSetLastSynced() {
      return __isset_vector[__LASTSYNCED_ISSET_ID];
    }

    public void setLastSyncedIsSet(boolean value) {
      __isset_vector[__LASTSYNCED_ISSET_ID] = value;
    }

    public String getLocale() {
      return this.locale;
    }

    public void setLocale(String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getChannels_args)
        return this.equals((getChannels_args)that);
      return false;
    }

    public boolean equals(getChannels_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_lastSynced = true;
      boolean that_present_lastSynced = true;
      if (this_present_lastSynced || that_present_lastSynced) {
        if (!(this_present_lastSynced && that_present_lastSynced))
          return false;
        if (this.lastSynced != that.lastSynced)
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getChannels_args other = (getChannels_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetLastSynced(), other.isSetLastSynced());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastSynced()) {
        lastComparison = TBaseHelper.compareTo(this.lastSynced, other.lastSynced);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLocale(), other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // LAST_SYNCED
            if (field.type == TType.I64) {
              this.lastSynced = iprot.readI64();
              setLastSyncedIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // LOCALE
            if (field.type == TType.STRING) {
              this.locale = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LAST_SYNCED_FIELD_DESC);
      oprot.writeI64(this.lastSynced);
      oprot.writeFieldEnd();
      if (this.locale != null) {
        oprot.writeFieldBegin(LOCALE_FIELD_DESC);
        oprot.writeString(this.locale);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getChannels_args(");
      boolean first = true;

      sb.append("lastSynced:");
      sb.append(this.lastSynced);
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getChannels_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getChannels_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private ChannelInfos success;
    private ChannelException e;

    // isset id assignments

    public getChannels_result() {
    }

    public getChannels_result(
      ChannelInfos success,
      ChannelException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getChannels_result(getChannels_result other) {
      if (other.isSetSuccess()) {
        this.success = new ChannelInfos(other.success);
      }
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public getChannels_result deepCopy() {
      return new getChannels_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ChannelInfos getSuccess() {
      return this.success;
    }

    public void setSuccess(ChannelInfos success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getChannels_result)
        return this.equals((getChannels_result)that);
      return false;
    }

    public boolean equals(getChannels_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getChannels_result other = (getChannels_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new ChannelInfos();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new ChannelException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getChannels_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getDomains_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getDomains_args");

    private static final TField LAST_SYNCED_FIELD_DESC = new TField("lastSynced", TType.I64, (short)2);

    private long lastSynced;

    // isset id assignments
    private static final int __LASTSYNCED_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getDomains_args() {
    }

    public getDomains_args(
      long lastSynced)
    {
      this();
      this.lastSynced = lastSynced;
      setLastSyncedIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDomains_args(getDomains_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.lastSynced = other.lastSynced;
    }

    public getDomains_args deepCopy() {
      return new getDomains_args(this);
    }

    public void clear() {
      setLastSyncedIsSet(false);
      this.lastSynced = 0;
    }

    public long getLastSynced() {
      return this.lastSynced;
    }

    public void setLastSynced(long lastSynced) {
      this.lastSynced = lastSynced;
      setLastSyncedIsSet(true);
    }

    public void unsetLastSynced() {
      __isset_vector[__LASTSYNCED_ISSET_ID] = false;
    }

    /** Returns true if field lastSynced is set (has been assigned a value) and false otherwise */
    public boolean isSetLastSynced() {
      return __isset_vector[__LASTSYNCED_ISSET_ID];
    }

    public void setLastSyncedIsSet(boolean value) {
      __isset_vector[__LASTSYNCED_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDomains_args)
        return this.equals((getDomains_args)that);
      return false;
    }

    public boolean equals(getDomains_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_lastSynced = true;
      boolean that_present_lastSynced = true;
      if (this_present_lastSynced || that_present_lastSynced) {
        if (!(this_present_lastSynced && that_present_lastSynced))
          return false;
        if (this.lastSynced != that.lastSynced)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getDomains_args other = (getDomains_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetLastSynced(), other.isSetLastSynced());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastSynced()) {
        lastComparison = TBaseHelper.compareTo(this.lastSynced, other.lastSynced);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // LAST_SYNCED
            if (field.type == TType.I64) {
              this.lastSynced = iprot.readI64();
              setLastSyncedIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LAST_SYNCED_FIELD_DESC);
      oprot.writeI64(this.lastSynced);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getDomains_args(");
      boolean first = true;

      sb.append("lastSynced:");
      sb.append(this.lastSynced);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getDomains_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getDomains_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private ChannelDomains success;
    private ChannelException e;

    // isset id assignments

    public getDomains_result() {
    }

    public getDomains_result(
      ChannelDomains success,
      ChannelException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDomains_result(getDomains_result other) {
      if (other.isSetSuccess()) {
        this.success = new ChannelDomains(other.success);
      }
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public getDomains_result deepCopy() {
      return new getDomains_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ChannelDomains getSuccess() {
      return this.success;
    }

    public void setSuccess(ChannelDomains success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDomains_result)
        return this.equals((getDomains_result)that);
      return false;
    }

    public boolean equals(getDomains_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getDomains_result other = (getDomains_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new ChannelDomains();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new ChannelException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getDomains_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getFriendChannelMatrices_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getFriendChannelMatrices_args");

    private static final TField CHANNEL_IDS_FIELD_DESC = new TField("channelIds", TType.LIST, (short)1);

    private Vector channelIds;

    // isset id assignments

    public getFriendChannelMatrices_args() {
    }

    public getFriendChannelMatrices_args(
      Vector channelIds)
    {
      this();
      this.channelIds = channelIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFriendChannelMatrices_args(getFriendChannelMatrices_args other) {
      if (other.isSetChannelIds()) {
        Vector __this__channelIds = new Vector();
        for (Enumeration other_enum = other.channelIds.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__channelIds.addElement(other_element);
        }
        this.channelIds = __this__channelIds;
      }
    }

    public getFriendChannelMatrices_args deepCopy() {
      return new getFriendChannelMatrices_args(this);
    }

    public void clear() {
      this.channelIds = null;
    }

    public int getChannelIdsSize() {
      return (this.channelIds == null) ? 0 : this.channelIds.size();
    }

    public Enumeration getChannelIdsEnumeration() {
      return (this.channelIds == null) ? null : this.channelIds.elements();
    }

    public void addToChannelIds(String elem) {
      if (this.channelIds == null) {
        this.channelIds = new Vector();
      }
      this.channelIds.addElement(elem);
    }

    public Vector getChannelIds() {
      return this.channelIds;
    }

    public void setChannelIds(Vector channelIds) {
      this.channelIds = channelIds;
    }

    public void unsetChannelIds() {
      this.channelIds = null;
    }

    /** Returns true if field channelIds is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelIds() {
      return this.channelIds != null;
    }

    public void setChannelIdsIsSet(boolean value) {
      if (!value) {
        this.channelIds = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFriendChannelMatrices_args)
        return this.equals((getFriendChannelMatrices_args)that);
      return false;
    }

    public boolean equals(getFriendChannelMatrices_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_channelIds = true && this.isSetChannelIds();
      boolean that_present_channelIds = true && that.isSetChannelIds();
      if (this_present_channelIds || that_present_channelIds) {
        if (!(this_present_channelIds && that_present_channelIds))
          return false;
        if (!this.channelIds.equals(that.channelIds))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getFriendChannelMatrices_args other = (getFriendChannelMatrices_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetChannelIds(), other.isSetChannelIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelIds()) {
        lastComparison = TBaseHelper.compareTo(this.channelIds, other.channelIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // CHANNEL_IDS
            if (field.type == TType.LIST) {
              {
                TList _list721 = iprot.readListBegin();
                this.channelIds = new Vector(_list721.size);
                for (int _i722 = 0; _i722 < _list721.size; ++_i722)
                {
                  String _elem723;
                  _elem723 = iprot.readString();
                  this.channelIds.addElement(_elem723);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.channelIds != null) {
        oprot.writeFieldBegin(CHANNEL_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.channelIds.size()));
          for (Enumeration _iter724_enum = this.channelIds.elements(); _iter724_enum.hasMoreElements(); )           {
            String _iter724 = (String)_iter724_enum.nextElement();
            oprot.writeString(_iter724);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getFriendChannelMatrices_args(");
      boolean first = true;

      sb.append("channelIds:");
      if (this.channelIds == null) {
        sb.append("null");
      } else {
        sb.append(this.channelIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getFriendChannelMatrices_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getFriendChannelMatrices_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private FriendChannelMatricesResponse success;
    private ChannelException e;

    // isset id assignments

    public getFriendChannelMatrices_result() {
    }

    public getFriendChannelMatrices_result(
      FriendChannelMatricesResponse success,
      ChannelException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFriendChannelMatrices_result(getFriendChannelMatrices_result other) {
      if (other.isSetSuccess()) {
        this.success = new FriendChannelMatricesResponse(other.success);
      }
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public getFriendChannelMatrices_result deepCopy() {
      return new getFriendChannelMatrices_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public FriendChannelMatricesResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(FriendChannelMatricesResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFriendChannelMatrices_result)
        return this.equals((getFriendChannelMatrices_result)that);
      return false;
    }

    public boolean equals(getFriendChannelMatrices_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getFriendChannelMatrices_result other = (getFriendChannelMatrices_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new FriendChannelMatricesResponse();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new ChannelException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getFriendChannelMatrices_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateChannelSettings_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateChannelSettings_args");

    private static final TField CHANNEL_SETTINGS_FIELD_DESC = new TField("channelSettings", TType.STRUCT, (short)1);

    private ChannelSettings channelSettings;

    // isset id assignments

    public updateChannelSettings_args() {
    }

    public updateChannelSettings_args(
      ChannelSettings channelSettings)
    {
      this();
      this.channelSettings = channelSettings;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateChannelSettings_args(updateChannelSettings_args other) {
      if (other.isSetChannelSettings()) {
        this.channelSettings = new ChannelSettings(other.channelSettings);
      }
    }

    public updateChannelSettings_args deepCopy() {
      return new updateChannelSettings_args(this);
    }

    public void clear() {
      this.channelSettings = null;
    }

    public ChannelSettings getChannelSettings() {
      return this.channelSettings;
    }

    public void setChannelSettings(ChannelSettings channelSettings) {
      this.channelSettings = channelSettings;
    }

    public void unsetChannelSettings() {
      this.channelSettings = null;
    }

    /** Returns true if field channelSettings is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelSettings() {
      return this.channelSettings != null;
    }

    public void setChannelSettingsIsSet(boolean value) {
      if (!value) {
        this.channelSettings = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateChannelSettings_args)
        return this.equals((updateChannelSettings_args)that);
      return false;
    }

    public boolean equals(updateChannelSettings_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_channelSettings = true && this.isSetChannelSettings();
      boolean that_present_channelSettings = true && that.isSetChannelSettings();
      if (this_present_channelSettings || that_present_channelSettings) {
        if (!(this_present_channelSettings && that_present_channelSettings))
          return false;
        if (!this.channelSettings.equals(that.channelSettings))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateChannelSettings_args other = (updateChannelSettings_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetChannelSettings(), other.isSetChannelSettings());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelSettings()) {
        lastComparison = this.channelSettings.compareTo(other.channelSettings);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // CHANNEL_SETTINGS
            if (field.type == TType.STRUCT) {
              this.channelSettings = new ChannelSettings();
              this.channelSettings.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.channelSettings != null) {
        oprot.writeFieldBegin(CHANNEL_SETTINGS_FIELD_DESC);
        this.channelSettings.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateChannelSettings_args(");
      boolean first = true;

      sb.append("channelSettings:");
      if (this.channelSettings == null) {
        sb.append("null");
      } else {
        sb.append(this.channelSettings);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateChannelSettings_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateChannelSettings_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private boolean success;
    private ChannelException e;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public updateChannelSettings_result() {
    }

    public updateChannelSettings_result(
      boolean success,
      ChannelException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateChannelSettings_result(updateChannelSettings_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public updateChannelSettings_result deepCopy() {
      return new updateChannelSettings_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateChannelSettings_result)
        return this.equals((updateChannelSettings_result)that);
      return false;
    }

    public boolean equals(updateChannelSettings_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateChannelSettings_result other = (updateChannelSettings_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new ChannelException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateChannelSettings_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getCommonDomains_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getCommonDomains_args");

    private static final TField LAST_SYNCED_FIELD_DESC = new TField("lastSynced", TType.I64, (short)1);

    private long lastSynced;

    // isset id assignments
    private static final int __LASTSYNCED_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getCommonDomains_args() {
    }

    public getCommonDomains_args(
      long lastSynced)
    {
      this();
      this.lastSynced = lastSynced;
      setLastSyncedIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCommonDomains_args(getCommonDomains_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.lastSynced = other.lastSynced;
    }

    public getCommonDomains_args deepCopy() {
      return new getCommonDomains_args(this);
    }

    public void clear() {
      setLastSyncedIsSet(false);
      this.lastSynced = 0;
    }

    public long getLastSynced() {
      return this.lastSynced;
    }

    public void setLastSynced(long lastSynced) {
      this.lastSynced = lastSynced;
      setLastSyncedIsSet(true);
    }

    public void unsetLastSynced() {
      __isset_vector[__LASTSYNCED_ISSET_ID] = false;
    }

    /** Returns true if field lastSynced is set (has been assigned a value) and false otherwise */
    public boolean isSetLastSynced() {
      return __isset_vector[__LASTSYNCED_ISSET_ID];
    }

    public void setLastSyncedIsSet(boolean value) {
      __isset_vector[__LASTSYNCED_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCommonDomains_args)
        return this.equals((getCommonDomains_args)that);
      return false;
    }

    public boolean equals(getCommonDomains_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_lastSynced = true;
      boolean that_present_lastSynced = true;
      if (this_present_lastSynced || that_present_lastSynced) {
        if (!(this_present_lastSynced && that_present_lastSynced))
          return false;
        if (this.lastSynced != that.lastSynced)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getCommonDomains_args other = (getCommonDomains_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetLastSynced(), other.isSetLastSynced());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastSynced()) {
        lastComparison = TBaseHelper.compareTo(this.lastSynced, other.lastSynced);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // LAST_SYNCED
            if (field.type == TType.I64) {
              this.lastSynced = iprot.readI64();
              setLastSyncedIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LAST_SYNCED_FIELD_DESC);
      oprot.writeI64(this.lastSynced);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getCommonDomains_args(");
      boolean first = true;

      sb.append("lastSynced:");
      sb.append(this.lastSynced);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getCommonDomains_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getCommonDomains_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private ChannelDomains success;
    private ChannelException e;

    // isset id assignments

    public getCommonDomains_result() {
    }

    public getCommonDomains_result(
      ChannelDomains success,
      ChannelException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCommonDomains_result(getCommonDomains_result other) {
      if (other.isSetSuccess()) {
        this.success = new ChannelDomains(other.success);
      }
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public getCommonDomains_result deepCopy() {
      return new getCommonDomains_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ChannelDomains getSuccess() {
      return this.success;
    }

    public void setSuccess(ChannelDomains success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCommonDomains_result)
        return this.equals((getCommonDomains_result)that);
      return false;
    }

    public boolean equals(getCommonDomains_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getCommonDomains_result other = (getCommonDomains_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new ChannelDomains();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new ChannelException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getCommonDomains_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNotificationBadgeCount_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getNotificationBadgeCount_args");

    private static final TField LOCAL_REV_FIELD_DESC = new TField("localRev", TType.I64, (short)2);

    private long localRev;

    // isset id assignments
    private static final int __LOCALREV_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getNotificationBadgeCount_args() {
    }

    public getNotificationBadgeCount_args(
      long localRev)
    {
      this();
      this.localRev = localRev;
      setLocalRevIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNotificationBadgeCount_args(getNotificationBadgeCount_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.localRev = other.localRev;
    }

    public getNotificationBadgeCount_args deepCopy() {
      return new getNotificationBadgeCount_args(this);
    }

    public void clear() {
      setLocalRevIsSet(false);
      this.localRev = 0;
    }

    public long getLocalRev() {
      return this.localRev;
    }

    public void setLocalRev(long localRev) {
      this.localRev = localRev;
      setLocalRevIsSet(true);
    }

    public void unsetLocalRev() {
      __isset_vector[__LOCALREV_ISSET_ID] = false;
    }

    /** Returns true if field localRev is set (has been assigned a value) and false otherwise */
    public boolean isSetLocalRev() {
      return __isset_vector[__LOCALREV_ISSET_ID];
    }

    public void setLocalRevIsSet(boolean value) {
      __isset_vector[__LOCALREV_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNotificationBadgeCount_args)
        return this.equals((getNotificationBadgeCount_args)that);
      return false;
    }

    public boolean equals(getNotificationBadgeCount_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_localRev = true;
      boolean that_present_localRev = true;
      if (this_present_localRev || that_present_localRev) {
        if (!(this_present_localRev && that_present_localRev))
          return false;
        if (this.localRev != that.localRev)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getNotificationBadgeCount_args other = (getNotificationBadgeCount_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetLocalRev(), other.isSetLocalRev());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocalRev()) {
        lastComparison = TBaseHelper.compareTo(this.localRev, other.localRev);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // LOCAL_REV
            if (field.type == TType.I64) {
              this.localRev = iprot.readI64();
              setLocalRevIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LOCAL_REV_FIELD_DESC);
      oprot.writeI64(this.localRev);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getNotificationBadgeCount_args(");
      boolean first = true;

      sb.append("localRev:");
      sb.append(this.localRev);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getNotificationBadgeCount_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getNotificationBadgeCount_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private int success;
    private ChannelException e;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getNotificationBadgeCount_result() {
    }

    public getNotificationBadgeCount_result(
      int success,
      ChannelException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNotificationBadgeCount_result(getNotificationBadgeCount_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public getNotificationBadgeCount_result deepCopy() {
      return new getNotificationBadgeCount_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public void setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNotificationBadgeCount_result)
        return this.equals((getNotificationBadgeCount_result)that);
      return false;
    }

    public boolean equals(getNotificationBadgeCount_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getNotificationBadgeCount_result other = (getNotificationBadgeCount_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = iprot.readI32();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new ChannelException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getNotificationBadgeCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class issueChannelToken_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("issueChannelToken_args");

    private static final TField CHANNEL_ID_FIELD_DESC = new TField("channelId", TType.STRING, (short)1);

    private String channelId;

    // isset id assignments

    public issueChannelToken_args() {
    }

    public issueChannelToken_args(
      String channelId)
    {
      this();
      this.channelId = channelId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issueChannelToken_args(issueChannelToken_args other) {
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
    }

    public issueChannelToken_args deepCopy() {
      return new issueChannelToken_args(this);
    }

    public void clear() {
      this.channelId = null;
    }

    public String getChannelId() {
      return this.channelId;
    }

    public void setChannelId(String channelId) {
      this.channelId = channelId;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof issueChannelToken_args)
        return this.equals((issueChannelToken_args)that);
      return false;
    }

    public boolean equals(issueChannelToken_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      issueChannelToken_args other = (issueChannelToken_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetChannelId(), other.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = TBaseHelper.compareTo(this.channelId, other.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // CHANNEL_ID
            if (field.type == TType.STRING) {
              this.channelId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.channelId != null) {
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeString(this.channelId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("issueChannelToken_args(");
      boolean first = true;

      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class issueChannelToken_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("issueChannelToken_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private ChannelToken success;
    private ChannelException e;

    // isset id assignments

    public issueChannelToken_result() {
    }

    public issueChannelToken_result(
      ChannelToken success,
      ChannelException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issueChannelToken_result(issueChannelToken_result other) {
      if (other.isSetSuccess()) {
        this.success = new ChannelToken(other.success);
      }
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public issueChannelToken_result deepCopy() {
      return new issueChannelToken_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ChannelToken getSuccess() {
      return this.success;
    }

    public void setSuccess(ChannelToken success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof issueChannelToken_result)
        return this.equals((issueChannelToken_result)that);
      return false;
    }

    public boolean equals(issueChannelToken_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      issueChannelToken_result other = (issueChannelToken_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new ChannelToken();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new ChannelException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("issueChannelToken_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class issueRequestToken_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("issueRequestToken_args");

    private static final TField CHANNEL_ID_FIELD_DESC = new TField("channelId", TType.STRING, (short)1);
    private static final TField OTP_ID_FIELD_DESC = new TField("otpId", TType.STRING, (short)2);

    private String channelId;
    private String otpId;

    // isset id assignments

    public issueRequestToken_args() {
    }

    public issueRequestToken_args(
      String channelId,
      String otpId)
    {
      this();
      this.channelId = channelId;
      this.otpId = otpId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issueRequestToken_args(issueRequestToken_args other) {
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
      if (other.isSetOtpId()) {
        this.otpId = other.otpId;
      }
    }

    public issueRequestToken_args deepCopy() {
      return new issueRequestToken_args(this);
    }

    public void clear() {
      this.channelId = null;
      this.otpId = null;
    }

    public String getChannelId() {
      return this.channelId;
    }

    public void setChannelId(String channelId) {
      this.channelId = channelId;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public String getOtpId() {
      return this.otpId;
    }

    public void setOtpId(String otpId) {
      this.otpId = otpId;
    }

    public void unsetOtpId() {
      this.otpId = null;
    }

    /** Returns true if field otpId is set (has been assigned a value) and false otherwise */
    public boolean isSetOtpId() {
      return this.otpId != null;
    }

    public void setOtpIdIsSet(boolean value) {
      if (!value) {
        this.otpId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof issueRequestToken_args)
        return this.equals((issueRequestToken_args)that);
      return false;
    }

    public boolean equals(issueRequestToken_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      boolean this_present_otpId = true && this.isSetOtpId();
      boolean that_present_otpId = true && that.isSetOtpId();
      if (this_present_otpId || that_present_otpId) {
        if (!(this_present_otpId && that_present_otpId))
          return false;
        if (!this.otpId.equals(that.otpId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      issueRequestToken_args other = (issueRequestToken_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetChannelId(), other.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = TBaseHelper.compareTo(this.channelId, other.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetOtpId(), other.isSetOtpId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOtpId()) {
        lastComparison = TBaseHelper.compareTo(this.otpId, other.otpId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // CHANNEL_ID
            if (field.type == TType.STRING) {
              this.channelId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // OTP_ID
            if (field.type == TType.STRING) {
              this.otpId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.channelId != null) {
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeString(this.channelId);
        oprot.writeFieldEnd();
      }
      if (this.otpId != null) {
        oprot.writeFieldBegin(OTP_ID_FIELD_DESC);
        oprot.writeString(this.otpId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("issueRequestToken_args(");
      boolean first = true;

      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("otpId:");
      if (this.otpId == null) {
        sb.append("null");
      } else {
        sb.append(this.otpId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class issueRequestToken_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("issueRequestToken_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private ChannelException e;

    // isset id assignments

    public issueRequestToken_result() {
    }

    public issueRequestToken_result(
      String success,
      ChannelException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issueRequestToken_result(issueRequestToken_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public issueRequestToken_result deepCopy() {
      return new issueRequestToken_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof issueRequestToken_result)
        return this.equals((issueRequestToken_result)that);
      return false;
    }

    public boolean equals(issueRequestToken_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      issueRequestToken_result other = (issueRequestToken_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new ChannelException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("issueRequestToken_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class issueRequestTokenWithAuthScheme_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("issueRequestTokenWithAuthScheme_args");

    private static final TField CHANNEL_ID_FIELD_DESC = new TField("channelId", TType.STRING, (short)1);
    private static final TField OTP_ID_FIELD_DESC = new TField("otpId", TType.STRING, (short)2);
    private static final TField AUTH_SCHEME_FIELD_DESC = new TField("authScheme", TType.LIST, (short)3);
    private static final TField RETURN_URL_FIELD_DESC = new TField("returnUrl", TType.STRING, (short)4);

    private String channelId;
    private String otpId;
    private Vector authScheme;
    private String returnUrl;

    // isset id assignments

    public issueRequestTokenWithAuthScheme_args() {
    }

    public issueRequestTokenWithAuthScheme_args(
      String channelId,
      String otpId,
      Vector authScheme,
      String returnUrl)
    {
      this();
      this.channelId = channelId;
      this.otpId = otpId;
      this.authScheme = authScheme;
      this.returnUrl = returnUrl;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issueRequestTokenWithAuthScheme_args(issueRequestTokenWithAuthScheme_args other) {
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
      if (other.isSetOtpId()) {
        this.otpId = other.otpId;
      }
      if (other.isSetAuthScheme()) {
        Vector __this__authScheme = new Vector();
        for (Enumeration other_enum = other.authScheme.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__authScheme.addElement(other_element);
        }
        this.authScheme = __this__authScheme;
      }
      if (other.isSetReturnUrl()) {
        this.returnUrl = other.returnUrl;
      }
    }

    public issueRequestTokenWithAuthScheme_args deepCopy() {
      return new issueRequestTokenWithAuthScheme_args(this);
    }

    public void clear() {
      this.channelId = null;
      this.otpId = null;
      this.authScheme = null;
      this.returnUrl = null;
    }

    public String getChannelId() {
      return this.channelId;
    }

    public void setChannelId(String channelId) {
      this.channelId = channelId;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public String getOtpId() {
      return this.otpId;
    }

    public void setOtpId(String otpId) {
      this.otpId = otpId;
    }

    public void unsetOtpId() {
      this.otpId = null;
    }

    /** Returns true if field otpId is set (has been assigned a value) and false otherwise */
    public boolean isSetOtpId() {
      return this.otpId != null;
    }

    public void setOtpIdIsSet(boolean value) {
      if (!value) {
        this.otpId = null;
      }
    }

    public int getAuthSchemeSize() {
      return (this.authScheme == null) ? 0 : this.authScheme.size();
    }

    public Enumeration getAuthSchemeEnumeration() {
      return (this.authScheme == null) ? null : this.authScheme.elements();
    }

    public void addToAuthScheme(String elem) {
      if (this.authScheme == null) {
        this.authScheme = new Vector();
      }
      this.authScheme.addElement(elem);
    }

    public Vector getAuthScheme() {
      return this.authScheme;
    }

    public void setAuthScheme(Vector authScheme) {
      this.authScheme = authScheme;
    }

    public void unsetAuthScheme() {
      this.authScheme = null;
    }

    /** Returns true if field authScheme is set (has been assigned a value) and false otherwise */
    public boolean isSetAuthScheme() {
      return this.authScheme != null;
    }

    public void setAuthSchemeIsSet(boolean value) {
      if (!value) {
        this.authScheme = null;
      }
    }

    public String getReturnUrl() {
      return this.returnUrl;
    }

    public void setReturnUrl(String returnUrl) {
      this.returnUrl = returnUrl;
    }

    public void unsetReturnUrl() {
      this.returnUrl = null;
    }

    /** Returns true if field returnUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetReturnUrl() {
      return this.returnUrl != null;
    }

    public void setReturnUrlIsSet(boolean value) {
      if (!value) {
        this.returnUrl = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof issueRequestTokenWithAuthScheme_args)
        return this.equals((issueRequestTokenWithAuthScheme_args)that);
      return false;
    }

    public boolean equals(issueRequestTokenWithAuthScheme_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      boolean this_present_otpId = true && this.isSetOtpId();
      boolean that_present_otpId = true && that.isSetOtpId();
      if (this_present_otpId || that_present_otpId) {
        if (!(this_present_otpId && that_present_otpId))
          return false;
        if (!this.otpId.equals(that.otpId))
          return false;
      }

      boolean this_present_authScheme = true && this.isSetAuthScheme();
      boolean that_present_authScheme = true && that.isSetAuthScheme();
      if (this_present_authScheme || that_present_authScheme) {
        if (!(this_present_authScheme && that_present_authScheme))
          return false;
        if (!this.authScheme.equals(that.authScheme))
          return false;
      }

      boolean this_present_returnUrl = true && this.isSetReturnUrl();
      boolean that_present_returnUrl = true && that.isSetReturnUrl();
      if (this_present_returnUrl || that_present_returnUrl) {
        if (!(this_present_returnUrl && that_present_returnUrl))
          return false;
        if (!this.returnUrl.equals(that.returnUrl))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      issueRequestTokenWithAuthScheme_args other = (issueRequestTokenWithAuthScheme_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetChannelId(), other.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = TBaseHelper.compareTo(this.channelId, other.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetOtpId(), other.isSetOtpId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOtpId()) {
        lastComparison = TBaseHelper.compareTo(this.otpId, other.otpId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetAuthScheme(), other.isSetAuthScheme());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuthScheme()) {
        lastComparison = TBaseHelper.compareTo(this.authScheme, other.authScheme);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetReturnUrl(), other.isSetReturnUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReturnUrl()) {
        lastComparison = TBaseHelper.compareTo(this.returnUrl, other.returnUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // CHANNEL_ID
            if (field.type == TType.STRING) {
              this.channelId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // OTP_ID
            if (field.type == TType.STRING) {
              this.otpId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // AUTH_SCHEME
            if (field.type == TType.LIST) {
              {
                TList _list725 = iprot.readListBegin();
                this.authScheme = new Vector(_list725.size);
                for (int _i726 = 0; _i726 < _list725.size; ++_i726)
                {
                  String _elem727;
                  _elem727 = iprot.readString();
                  this.authScheme.addElement(_elem727);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // RETURN_URL
            if (field.type == TType.STRING) {
              this.returnUrl = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.channelId != null) {
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeString(this.channelId);
        oprot.writeFieldEnd();
      }
      if (this.otpId != null) {
        oprot.writeFieldBegin(OTP_ID_FIELD_DESC);
        oprot.writeString(this.otpId);
        oprot.writeFieldEnd();
      }
      if (this.authScheme != null) {
        oprot.writeFieldBegin(AUTH_SCHEME_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.authScheme.size()));
          for (Enumeration _iter728_enum = this.authScheme.elements(); _iter728_enum.hasMoreElements(); )           {
            String _iter728 = (String)_iter728_enum.nextElement();
            oprot.writeString(_iter728);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.returnUrl != null) {
        oprot.writeFieldBegin(RETURN_URL_FIELD_DESC);
        oprot.writeString(this.returnUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("issueRequestTokenWithAuthScheme_args(");
      boolean first = true;

      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("otpId:");
      if (this.otpId == null) {
        sb.append("null");
      } else {
        sb.append(this.otpId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("authScheme:");
      if (this.authScheme == null) {
        sb.append("null");
      } else {
        sb.append(this.authScheme);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("returnUrl:");
      if (this.returnUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.returnUrl);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class issueRequestTokenWithAuthScheme_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("issueRequestTokenWithAuthScheme_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private RequestTokenResponse success;
    private ChannelException e;

    // isset id assignments

    public issueRequestTokenWithAuthScheme_result() {
    }

    public issueRequestTokenWithAuthScheme_result(
      RequestTokenResponse success,
      ChannelException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issueRequestTokenWithAuthScheme_result(issueRequestTokenWithAuthScheme_result other) {
      if (other.isSetSuccess()) {
        this.success = new RequestTokenResponse(other.success);
      }
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public issueRequestTokenWithAuthScheme_result deepCopy() {
      return new issueRequestTokenWithAuthScheme_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public RequestTokenResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(RequestTokenResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof issueRequestTokenWithAuthScheme_result)
        return this.equals((issueRequestTokenWithAuthScheme_result)that);
      return false;
    }

    public boolean equals(issueRequestTokenWithAuthScheme_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      issueRequestTokenWithAuthScheme_result other = (issueRequestTokenWithAuthScheme_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new RequestTokenResponse();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new ChannelException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("issueRequestTokenWithAuthScheme_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class issueRequestTokenForAutoLogin_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("issueRequestTokenForAutoLogin_args");

    private static final TField CHANNEL_ID_FIELD_DESC = new TField("channelId", TType.STRING, (short)2);
    private static final TField OTP_ID_FIELD_DESC = new TField("otpId", TType.STRING, (short)3);
    private static final TField REDIRECT_URL_FIELD_DESC = new TField("redirectUrl", TType.STRING, (short)4);

    private String channelId;
    private String otpId;
    private String redirectUrl;

    // isset id assignments

    public issueRequestTokenForAutoLogin_args() {
    }

    public issueRequestTokenForAutoLogin_args(
      String channelId,
      String otpId,
      String redirectUrl)
    {
      this();
      this.channelId = channelId;
      this.otpId = otpId;
      this.redirectUrl = redirectUrl;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issueRequestTokenForAutoLogin_args(issueRequestTokenForAutoLogin_args other) {
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
      if (other.isSetOtpId()) {
        this.otpId = other.otpId;
      }
      if (other.isSetRedirectUrl()) {
        this.redirectUrl = other.redirectUrl;
      }
    }

    public issueRequestTokenForAutoLogin_args deepCopy() {
      return new issueRequestTokenForAutoLogin_args(this);
    }

    public void clear() {
      this.channelId = null;
      this.otpId = null;
      this.redirectUrl = null;
    }

    public String getChannelId() {
      return this.channelId;
    }

    public void setChannelId(String channelId) {
      this.channelId = channelId;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public String getOtpId() {
      return this.otpId;
    }

    public void setOtpId(String otpId) {
      this.otpId = otpId;
    }

    public void unsetOtpId() {
      this.otpId = null;
    }

    /** Returns true if field otpId is set (has been assigned a value) and false otherwise */
    public boolean isSetOtpId() {
      return this.otpId != null;
    }

    public void setOtpIdIsSet(boolean value) {
      if (!value) {
        this.otpId = null;
      }
    }

    public String getRedirectUrl() {
      return this.redirectUrl;
    }

    public void setRedirectUrl(String redirectUrl) {
      this.redirectUrl = redirectUrl;
    }

    public void unsetRedirectUrl() {
      this.redirectUrl = null;
    }

    /** Returns true if field redirectUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetRedirectUrl() {
      return this.redirectUrl != null;
    }

    public void setRedirectUrlIsSet(boolean value) {
      if (!value) {
        this.redirectUrl = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof issueRequestTokenForAutoLogin_args)
        return this.equals((issueRequestTokenForAutoLogin_args)that);
      return false;
    }

    public boolean equals(issueRequestTokenForAutoLogin_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      boolean this_present_otpId = true && this.isSetOtpId();
      boolean that_present_otpId = true && that.isSetOtpId();
      if (this_present_otpId || that_present_otpId) {
        if (!(this_present_otpId && that_present_otpId))
          return false;
        if (!this.otpId.equals(that.otpId))
          return false;
      }

      boolean this_present_redirectUrl = true && this.isSetRedirectUrl();
      boolean that_present_redirectUrl = true && that.isSetRedirectUrl();
      if (this_present_redirectUrl || that_present_redirectUrl) {
        if (!(this_present_redirectUrl && that_present_redirectUrl))
          return false;
        if (!this.redirectUrl.equals(that.redirectUrl))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      issueRequestTokenForAutoLogin_args other = (issueRequestTokenForAutoLogin_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetChannelId(), other.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = TBaseHelper.compareTo(this.channelId, other.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetOtpId(), other.isSetOtpId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOtpId()) {
        lastComparison = TBaseHelper.compareTo(this.otpId, other.otpId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetRedirectUrl(), other.isSetRedirectUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRedirectUrl()) {
        lastComparison = TBaseHelper.compareTo(this.redirectUrl, other.redirectUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // CHANNEL_ID
            if (field.type == TType.STRING) {
              this.channelId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // OTP_ID
            if (field.type == TType.STRING) {
              this.otpId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // REDIRECT_URL
            if (field.type == TType.STRING) {
              this.redirectUrl = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.channelId != null) {
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeString(this.channelId);
        oprot.writeFieldEnd();
      }
      if (this.otpId != null) {
        oprot.writeFieldBegin(OTP_ID_FIELD_DESC);
        oprot.writeString(this.otpId);
        oprot.writeFieldEnd();
      }
      if (this.redirectUrl != null) {
        oprot.writeFieldBegin(REDIRECT_URL_FIELD_DESC);
        oprot.writeString(this.redirectUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("issueRequestTokenForAutoLogin_args(");
      boolean first = true;

      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("otpId:");
      if (this.otpId == null) {
        sb.append("null");
      } else {
        sb.append(this.otpId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("redirectUrl:");
      if (this.redirectUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.redirectUrl);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class issueRequestTokenForAutoLogin_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("issueRequestTokenForAutoLogin_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private ChannelException e;

    // isset id assignments

    public issueRequestTokenForAutoLogin_result() {
    }

    public issueRequestTokenForAutoLogin_result(
      String success,
      ChannelException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issueRequestTokenForAutoLogin_result(issueRequestTokenForAutoLogin_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public issueRequestTokenForAutoLogin_result deepCopy() {
      return new issueRequestTokenForAutoLogin_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof issueRequestTokenForAutoLogin_result)
        return this.equals((issueRequestTokenForAutoLogin_result)that);
      return false;
    }

    public boolean equals(issueRequestTokenForAutoLogin_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      issueRequestTokenForAutoLogin_result other = (issueRequestTokenForAutoLogin_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new ChannelException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("issueRequestTokenForAutoLogin_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUpdatedChannelIds_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUpdatedChannelIds_args");

    private static final TField CHANNEL_IDS_FIELD_DESC = new TField("channelIds", TType.LIST, (short)1);

    private Vector channelIds;

    // isset id assignments

    public getUpdatedChannelIds_args() {
    }

    public getUpdatedChannelIds_args(
      Vector channelIds)
    {
      this();
      this.channelIds = channelIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUpdatedChannelIds_args(getUpdatedChannelIds_args other) {
      if (other.isSetChannelIds()) {
        Vector __this__channelIds = new Vector();
        for (Enumeration other_enum = other.channelIds.elements(); other_enum.hasMoreElements(); ) {
          ChannelIdWithLastUpdated other_element = (ChannelIdWithLastUpdated)other_enum.nextElement();
          __this__channelIds.addElement(new ChannelIdWithLastUpdated(other_element));
        }
        this.channelIds = __this__channelIds;
      }
    }

    public getUpdatedChannelIds_args deepCopy() {
      return new getUpdatedChannelIds_args(this);
    }

    public void clear() {
      this.channelIds = null;
    }

    public int getChannelIdsSize() {
      return (this.channelIds == null) ? 0 : this.channelIds.size();
    }

    public Enumeration getChannelIdsEnumeration() {
      return (this.channelIds == null) ? null : this.channelIds.elements();
    }

    public void addToChannelIds(ChannelIdWithLastUpdated elem) {
      if (this.channelIds == null) {
        this.channelIds = new Vector();
      }
      this.channelIds.addElement(elem);
    }

    public Vector getChannelIds() {
      return this.channelIds;
    }

    public void setChannelIds(Vector channelIds) {
      this.channelIds = channelIds;
    }

    public void unsetChannelIds() {
      this.channelIds = null;
    }

    /** Returns true if field channelIds is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelIds() {
      return this.channelIds != null;
    }

    public void setChannelIdsIsSet(boolean value) {
      if (!value) {
        this.channelIds = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUpdatedChannelIds_args)
        return this.equals((getUpdatedChannelIds_args)that);
      return false;
    }

    public boolean equals(getUpdatedChannelIds_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_channelIds = true && this.isSetChannelIds();
      boolean that_present_channelIds = true && that.isSetChannelIds();
      if (this_present_channelIds || that_present_channelIds) {
        if (!(this_present_channelIds && that_present_channelIds))
          return false;
        if (!this.channelIds.equals(that.channelIds))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUpdatedChannelIds_args other = (getUpdatedChannelIds_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetChannelIds(), other.isSetChannelIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelIds()) {
        lastComparison = TBaseHelper.compareTo(this.channelIds, other.channelIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // CHANNEL_IDS
            if (field.type == TType.LIST) {
              {
                TList _list729 = iprot.readListBegin();
                this.channelIds = new Vector(_list729.size);
                for (int _i730 = 0; _i730 < _list729.size; ++_i730)
                {
                  ChannelIdWithLastUpdated _elem731;
                  _elem731 = new ChannelIdWithLastUpdated();
                  _elem731.read(iprot);
                  this.channelIds.addElement(_elem731);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.channelIds != null) {
        oprot.writeFieldBegin(CHANNEL_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.channelIds.size()));
          for (Enumeration _iter732_enum = this.channelIds.elements(); _iter732_enum.hasMoreElements(); )           {
            ChannelIdWithLastUpdated _iter732 = (ChannelIdWithLastUpdated)_iter732_enum.nextElement();
            _iter732.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUpdatedChannelIds_args(");
      boolean first = true;

      sb.append("channelIds:");
      if (this.channelIds == null) {
        sb.append("null");
      } else {
        sb.append(this.channelIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUpdatedChannelIds_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUpdatedChannelIds_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private ChannelException e;

    // isset id assignments

    public getUpdatedChannelIds_result() {
    }

    public getUpdatedChannelIds_result(
      Vector success,
      ChannelException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUpdatedChannelIds_result(getUpdatedChannelIds_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public getUpdatedChannelIds_result deepCopy() {
      return new getUpdatedChannelIds_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUpdatedChannelIds_result)
        return this.equals((getUpdatedChannelIds_result)that);
      return false;
    }

    public boolean equals(getUpdatedChannelIds_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUpdatedChannelIds_result other = (getUpdatedChannelIds_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list733 = iprot.readListBegin();
                this.success = new Vector(_list733.size);
                for (int _i734 = 0; _i734 < _list733.size; ++_i734)
                {
                  String _elem735;
                  _elem735 = iprot.readString();
                  this.success.addElement(_elem735);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new ChannelException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter736_enum = this.success.elements(); _iter736_enum.hasMoreElements(); )           {
            String _iter736 = (String)_iter736_enum.nextElement();
            oprot.writeString(_iter736);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUpdatedChannelIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class reserveCoinUse_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("reserveCoinUse_args");

    private static final TField REQUEST_FIELD_DESC = new TField("request", TType.STRUCT, (short)2);
    private static final TField LOCALE_FIELD_DESC = new TField("locale", TType.STRING, (short)3);

    private CoinUseReservation request;
    private String locale;

    // isset id assignments

    public reserveCoinUse_args() {
    }

    public reserveCoinUse_args(
      CoinUseReservation request,
      String locale)
    {
      this();
      this.request = request;
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reserveCoinUse_args(reserveCoinUse_args other) {
      if (other.isSetRequest()) {
        this.request = new CoinUseReservation(other.request);
      }
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public reserveCoinUse_args deepCopy() {
      return new reserveCoinUse_args(this);
    }

    public void clear() {
      this.request = null;
      this.locale = null;
    }

    public CoinUseReservation getRequest() {
      return this.request;
    }

    public void setRequest(CoinUseReservation request) {
      this.request = request;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public String getLocale() {
      return this.locale;
    }

    public void setLocale(String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reserveCoinUse_args)
        return this.equals((reserveCoinUse_args)that);
      return false;
    }

    public boolean equals(reserveCoinUse_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      reserveCoinUse_args other = (reserveCoinUse_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = this.request.compareTo(other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLocale(), other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // REQUEST
            if (field.type == TType.STRUCT) {
              this.request = new CoinUseReservation();
              this.request.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // LOCALE
            if (field.type == TType.STRING) {
              this.locale = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.request != null) {
        oprot.writeFieldBegin(REQUEST_FIELD_DESC);
        this.request.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.locale != null) {
        oprot.writeFieldBegin(LOCALE_FIELD_DESC);
        oprot.writeString(this.locale);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("reserveCoinUse_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class reserveCoinUse_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("reserveCoinUse_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private ChannelException e;

    // isset id assignments

    public reserveCoinUse_result() {
    }

    public reserveCoinUse_result(
      String success,
      ChannelException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reserveCoinUse_result(reserveCoinUse_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public reserveCoinUse_result deepCopy() {
      return new reserveCoinUse_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reserveCoinUse_result)
        return this.equals((reserveCoinUse_result)that);
      return false;
    }

    public boolean equals(reserveCoinUse_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      reserveCoinUse_result other = (reserveCoinUse_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new ChannelException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("reserveCoinUse_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class revokeChannel_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("revokeChannel_args");

    private static final TField CHANNEL_ID_FIELD_DESC = new TField("channelId", TType.STRING, (short)1);

    private String channelId;

    // isset id assignments

    public revokeChannel_args() {
    }

    public revokeChannel_args(
      String channelId)
    {
      this();
      this.channelId = channelId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public revokeChannel_args(revokeChannel_args other) {
      if (other.isSetChannelId()) {
        this.channelId = other.channelId;
      }
    }

    public revokeChannel_args deepCopy() {
      return new revokeChannel_args(this);
    }

    public void clear() {
      this.channelId = null;
    }

    public String getChannelId() {
      return this.channelId;
    }

    public void setChannelId(String channelId) {
      this.channelId = channelId;
    }

    public void unsetChannelId() {
      this.channelId = null;
    }

    /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
    public boolean isSetChannelId() {
      return this.channelId != null;
    }

    public void setChannelIdIsSet(boolean value) {
      if (!value) {
        this.channelId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof revokeChannel_args)
        return this.equals((revokeChannel_args)that);
      return false;
    }

    public boolean equals(revokeChannel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_channelId = true && this.isSetChannelId();
      boolean that_present_channelId = true && that.isSetChannelId();
      if (this_present_channelId || that_present_channelId) {
        if (!(this_present_channelId && that_present_channelId))
          return false;
        if (!this.channelId.equals(that.channelId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      revokeChannel_args other = (revokeChannel_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetChannelId(), other.isSetChannelId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChannelId()) {
        lastComparison = TBaseHelper.compareTo(this.channelId, other.channelId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // CHANNEL_ID
            if (field.type == TType.STRING) {
              this.channelId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.channelId != null) {
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeString(this.channelId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("revokeChannel_args(");
      boolean first = true;

      sb.append("channelId:");
      if (this.channelId == null) {
        sb.append("null");
      } else {
        sb.append(this.channelId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class revokeChannel_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("revokeChannel_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private ChannelException e;

    // isset id assignments

    public revokeChannel_result() {
    }

    public revokeChannel_result(
      ChannelException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public revokeChannel_result(revokeChannel_result other) {
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public revokeChannel_result deepCopy() {
      return new revokeChannel_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof revokeChannel_result)
        return this.equals((revokeChannel_result)that);
      return false;
    }

    public boolean equals(revokeChannel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      revokeChannel_result other = (revokeChannel_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new ChannelException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("revokeChannel_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class syncChannelData_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("syncChannelData_args");

    private static final TField LAST_SYNCED_FIELD_DESC = new TField("lastSynced", TType.I64, (short)2);
    private static final TField LOCALE_FIELD_DESC = new TField("locale", TType.STRING, (short)3);

    private long lastSynced;
    private String locale;

    // isset id assignments
    private static final int __LASTSYNCED_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public syncChannelData_args() {
    }

    public syncChannelData_args(
      long lastSynced,
      String locale)
    {
      this();
      this.lastSynced = lastSynced;
      setLastSyncedIsSet(true);
      this.locale = locale;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public syncChannelData_args(syncChannelData_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.lastSynced = other.lastSynced;
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
    }

    public syncChannelData_args deepCopy() {
      return new syncChannelData_args(this);
    }

    public void clear() {
      setLastSyncedIsSet(false);
      this.lastSynced = 0;
      this.locale = null;
    }

    public long getLastSynced() {
      return this.lastSynced;
    }

    public void setLastSynced(long lastSynced) {
      this.lastSynced = lastSynced;
      setLastSyncedIsSet(true);
    }

    public void unsetLastSynced() {
      __isset_vector[__LASTSYNCED_ISSET_ID] = false;
    }

    /** Returns true if field lastSynced is set (has been assigned a value) and false otherwise */
    public boolean isSetLastSynced() {
      return __isset_vector[__LASTSYNCED_ISSET_ID];
    }

    public void setLastSyncedIsSet(boolean value) {
      __isset_vector[__LASTSYNCED_ISSET_ID] = value;
    }

    public String getLocale() {
      return this.locale;
    }

    public void setLocale(String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof syncChannelData_args)
        return this.equals((syncChannelData_args)that);
      return false;
    }

    public boolean equals(syncChannelData_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_lastSynced = true;
      boolean that_present_lastSynced = true;
      if (this_present_lastSynced || that_present_lastSynced) {
        if (!(this_present_lastSynced && that_present_lastSynced))
          return false;
        if (this.lastSynced != that.lastSynced)
          return false;
      }

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      syncChannelData_args other = (syncChannelData_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetLastSynced(), other.isSetLastSynced());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastSynced()) {
        lastComparison = TBaseHelper.compareTo(this.lastSynced, other.lastSynced);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLocale(), other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // LAST_SYNCED
            if (field.type == TType.I64) {
              this.lastSynced = iprot.readI64();
              setLastSyncedIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // LOCALE
            if (field.type == TType.STRING) {
              this.locale = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LAST_SYNCED_FIELD_DESC);
      oprot.writeI64(this.lastSynced);
      oprot.writeFieldEnd();
      if (this.locale != null) {
        oprot.writeFieldBegin(LOCALE_FIELD_DESC);
        oprot.writeString(this.locale);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("syncChannelData_args(");
      boolean first = true;

      sb.append("lastSynced:");
      sb.append(this.lastSynced);
      first = false;
      if (!first) sb.append(", ");
      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class syncChannelData_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("syncChannelData_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private ChannelSyncDatas success;
    private ChannelException e;

    // isset id assignments

    public syncChannelData_result() {
    }

    public syncChannelData_result(
      ChannelSyncDatas success,
      ChannelException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public syncChannelData_result(syncChannelData_result other) {
      if (other.isSetSuccess()) {
        this.success = new ChannelSyncDatas(other.success);
      }
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public syncChannelData_result deepCopy() {
      return new syncChannelData_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ChannelSyncDatas getSuccess() {
      return this.success;
    }

    public void setSuccess(ChannelSyncDatas success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof syncChannelData_result)
        return this.equals((syncChannelData_result)that);
      return false;
    }

    public boolean equals(syncChannelData_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      syncChannelData_result other = (syncChannelData_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new ChannelSyncDatas();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new ChannelException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("syncChannelData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateChannelNotificationSetting_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateChannelNotificationSetting_args");

    private static final TField SETTING_FIELD_DESC = new TField("setting", TType.LIST, (short)1);

    private Vector setting;

    // isset id assignments

    public updateChannelNotificationSetting_args() {
    }

    public updateChannelNotificationSetting_args(
      Vector setting)
    {
      this();
      this.setting = setting;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateChannelNotificationSetting_args(updateChannelNotificationSetting_args other) {
      if (other.isSetSetting()) {
        Vector __this__setting = new Vector();
        for (Enumeration other_enum = other.setting.elements(); other_enum.hasMoreElements(); ) {
          ChannelNotificationSetting other_element = (ChannelNotificationSetting)other_enum.nextElement();
          __this__setting.addElement(new ChannelNotificationSetting(other_element));
        }
        this.setting = __this__setting;
      }
    }

    public updateChannelNotificationSetting_args deepCopy() {
      return new updateChannelNotificationSetting_args(this);
    }

    public void clear() {
      this.setting = null;
    }

    public int getSettingSize() {
      return (this.setting == null) ? 0 : this.setting.size();
    }

    public Enumeration getSettingEnumeration() {
      return (this.setting == null) ? null : this.setting.elements();
    }

    public void addToSetting(ChannelNotificationSetting elem) {
      if (this.setting == null) {
        this.setting = new Vector();
      }
      this.setting.addElement(elem);
    }

    public Vector getSetting() {
      return this.setting;
    }

    public void setSetting(Vector setting) {
      this.setting = setting;
    }

    public void unsetSetting() {
      this.setting = null;
    }

    /** Returns true if field setting is set (has been assigned a value) and false otherwise */
    public boolean isSetSetting() {
      return this.setting != null;
    }

    public void setSettingIsSet(boolean value) {
      if (!value) {
        this.setting = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateChannelNotificationSetting_args)
        return this.equals((updateChannelNotificationSetting_args)that);
      return false;
    }

    public boolean equals(updateChannelNotificationSetting_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_setting = true && this.isSetSetting();
      boolean that_present_setting = true && that.isSetSetting();
      if (this_present_setting || that_present_setting) {
        if (!(this_present_setting && that_present_setting))
          return false;
        if (!this.setting.equals(that.setting))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateChannelNotificationSetting_args other = (updateChannelNotificationSetting_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSetting(), other.isSetSetting());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSetting()) {
        lastComparison = TBaseHelper.compareTo(this.setting, other.setting);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SETTING
            if (field.type == TType.LIST) {
              {
                TList _list737 = iprot.readListBegin();
                this.setting = new Vector(_list737.size);
                for (int _i738 = 0; _i738 < _list737.size; ++_i738)
                {
                  ChannelNotificationSetting _elem739;
                  _elem739 = new ChannelNotificationSetting();
                  _elem739.read(iprot);
                  this.setting.addElement(_elem739);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.setting != null) {
        oprot.writeFieldBegin(SETTING_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.setting.size()));
          for (Enumeration _iter740_enum = this.setting.elements(); _iter740_enum.hasMoreElements(); )           {
            ChannelNotificationSetting _iter740 = (ChannelNotificationSetting)_iter740_enum.nextElement();
            _iter740.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateChannelNotificationSetting_args(");
      boolean first = true;

      sb.append("setting:");
      if (this.setting == null) {
        sb.append("null");
      } else {
        sb.append(this.setting);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateChannelNotificationSetting_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateChannelNotificationSetting_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private ChannelException e;

    // isset id assignments

    public updateChannelNotificationSetting_result() {
    }

    public updateChannelNotificationSetting_result(
      ChannelException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateChannelNotificationSetting_result(updateChannelNotificationSetting_result other) {
      if (other.isSetE()) {
        this.e = new ChannelException(other.e);
      }
    }

    public updateChannelNotificationSetting_result deepCopy() {
      return new updateChannelNotificationSetting_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public ChannelException getE() {
      return this.e;
    }

    public void setE(ChannelException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateChannelNotificationSetting_result)
        return this.equals((updateChannelNotificationSetting_result)that);
      return false;
    }

    public boolean equals(updateChannelNotificationSetting_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateChannelNotificationSetting_result other = (updateChannelNotificationSetting_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new ChannelException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateChannelNotificationSetting_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
