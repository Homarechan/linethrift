/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class CoinHistoryCondition implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("CoinHistoryCondition");

  private static final TField START_FIELD_DESC = new TField("start", TType.I64, (short)1);
  private static final TField SIZE_FIELD_DESC = new TField("size", TType.I32, (short)2);
  private static final TField LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, (short)3);
  private static final TField EDDT_FIELD_DESC = new TField("eddt", TType.STRING, (short)4);
  private static final TField APP_STORE_CODE_FIELD_DESC = new TField("appStoreCode", TType.I32, (short)5);

  private long start;
  private int size;
  private String language;
  private String eddt;
  private PaymentType appStoreCode;

  // isset id assignments
  private static final int __START_ISSET_ID = 0;
  private static final int __SIZE_ISSET_ID = 1;
  private boolean[] __isset_vector = new boolean[2];

  public CoinHistoryCondition() {
  }

  public CoinHistoryCondition(
    long start,
    int size,
    String language,
    String eddt,
    PaymentType appStoreCode)
  {
    this();
    this.start = start;
    setStartIsSet(true);
    this.size = size;
    setSizeIsSet(true);
    this.language = language;
    this.eddt = eddt;
    this.appStoreCode = appStoreCode;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CoinHistoryCondition(CoinHistoryCondition other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    this.start = other.start;
    this.size = other.size;
    if (other.isSetLanguage()) {
      this.language = other.language;
    }
    if (other.isSetEddt()) {
      this.eddt = other.eddt;
    }
    if (other.isSetAppStoreCode()) {
      this.appStoreCode = other.appStoreCode;
    }
  }

  public CoinHistoryCondition deepCopy() {
    return new CoinHistoryCondition(this);
  }

  public void clear() {
    setStartIsSet(false);
    this.start = 0;
    setSizeIsSet(false);
    this.size = 0;
    this.language = null;
    this.eddt = null;
    this.appStoreCode = null;
  }

  public long getStart() {
    return this.start;
  }

  public void setStart(long start) {
    this.start = start;
    setStartIsSet(true);
  }

  public void unsetStart() {
    __isset_vector[__START_ISSET_ID] = false;
  }

  /** Returns true if field start is set (has been assigned a value) and false otherwise */
  public boolean isSetStart() {
    return __isset_vector[__START_ISSET_ID];
  }

  public void setStartIsSet(boolean value) {
    __isset_vector[__START_ISSET_ID] = value;
  }

  public int getSize() {
    return this.size;
  }

  public void setSize(int size) {
    this.size = size;
    setSizeIsSet(true);
  }

  public void unsetSize() {
    __isset_vector[__SIZE_ISSET_ID] = false;
  }

  /** Returns true if field size is set (has been assigned a value) and false otherwise */
  public boolean isSetSize() {
    return __isset_vector[__SIZE_ISSET_ID];
  }

  public void setSizeIsSet(boolean value) {
    __isset_vector[__SIZE_ISSET_ID] = value;
  }

  public String getLanguage() {
    return this.language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }

  public void unsetLanguage() {
    this.language = null;
  }

  /** Returns true if field language is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguage() {
    return this.language != null;
  }

  public void setLanguageIsSet(boolean value) {
    if (!value) {
      this.language = null;
    }
  }

  public String getEddt() {
    return this.eddt;
  }

  public void setEddt(String eddt) {
    this.eddt = eddt;
  }

  public void unsetEddt() {
    this.eddt = null;
  }

  /** Returns true if field eddt is set (has been assigned a value) and false otherwise */
  public boolean isSetEddt() {
    return this.eddt != null;
  }

  public void setEddtIsSet(boolean value) {
    if (!value) {
      this.eddt = null;
    }
  }

  /**
   * 
   * @see PaymentType
   */
  public PaymentType getAppStoreCode() {
    return this.appStoreCode;
  }

  /**
   * 
   * @see PaymentType
   */
  public void setAppStoreCode(PaymentType appStoreCode) {
    this.appStoreCode = appStoreCode;
  }

  public void unsetAppStoreCode() {
    this.appStoreCode = null;
  }

  /** Returns true if field appStoreCode is set (has been assigned a value) and false otherwise */
  public boolean isSetAppStoreCode() {
    return this.appStoreCode != null;
  }

  public void setAppStoreCodeIsSet(boolean value) {
    if (!value) {
      this.appStoreCode = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CoinHistoryCondition)
      return this.equals((CoinHistoryCondition)that);
    return false;
  }

  public boolean equals(CoinHistoryCondition that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_start = true;
    boolean that_present_start = true;
    if (this_present_start || that_present_start) {
      if (!(this_present_start && that_present_start))
        return false;
      if (this.start != that.start)
        return false;
    }

    boolean this_present_size = true;
    boolean that_present_size = true;
    if (this_present_size || that_present_size) {
      if (!(this_present_size && that_present_size))
        return false;
      if (this.size != that.size)
        return false;
    }

    boolean this_present_language = true && this.isSetLanguage();
    boolean that_present_language = true && that.isSetLanguage();
    if (this_present_language || that_present_language) {
      if (!(this_present_language && that_present_language))
        return false;
      if (!this.language.equals(that.language))
        return false;
    }

    boolean this_present_eddt = true && this.isSetEddt();
    boolean that_present_eddt = true && that.isSetEddt();
    if (this_present_eddt || that_present_eddt) {
      if (!(this_present_eddt && that_present_eddt))
        return false;
      if (!this.eddt.equals(that.eddt))
        return false;
    }

    boolean this_present_appStoreCode = true && this.isSetAppStoreCode();
    boolean that_present_appStoreCode = true && that.isSetAppStoreCode();
    if (this_present_appStoreCode || that_present_appStoreCode) {
      if (!(this_present_appStoreCode && that_present_appStoreCode))
        return false;
      if (!this.appStoreCode.equals(that.appStoreCode))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    CoinHistoryCondition other = (CoinHistoryCondition)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetStart(), other.isSetStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart()) {
      lastComparison = TBaseHelper.compareTo(this.start, other.start);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSize(), other.isSetSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSize()) {
      lastComparison = TBaseHelper.compareTo(this.size, other.size);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetLanguage(), other.isSetLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguage()) {
      lastComparison = TBaseHelper.compareTo(this.language, other.language);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetEddt(), other.isSetEddt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEddt()) {
      lastComparison = TBaseHelper.compareTo(this.eddt, other.eddt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetAppStoreCode(), other.isSetAppStoreCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppStoreCode()) {
      lastComparison = TBaseHelper.compareTo(this.appStoreCode, other.appStoreCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // START
          if (field.type == TType.I64) {
            this.start = iprot.readI64();
            setStartIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SIZE
          if (field.type == TType.I32) {
            this.size = iprot.readI32();
            setSizeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // LANGUAGE
          if (field.type == TType.STRING) {
            this.language = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // EDDT
          if (field.type == TType.STRING) {
            this.eddt = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // APP_STORE_CODE
          if (field.type == TType.I32) {
            this.appStoreCode = PaymentType.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(START_FIELD_DESC);
    oprot.writeI64(this.start);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SIZE_FIELD_DESC);
    oprot.writeI32(this.size);
    oprot.writeFieldEnd();
    if (this.language != null) {
      oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
      oprot.writeString(this.language);
      oprot.writeFieldEnd();
    }
    if (this.eddt != null) {
      oprot.writeFieldBegin(EDDT_FIELD_DESC);
      oprot.writeString(this.eddt);
      oprot.writeFieldEnd();
    }
    if (this.appStoreCode != null) {
      oprot.writeFieldBegin(APP_STORE_CODE_FIELD_DESC);
      oprot.writeI32(this.appStoreCode.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("CoinHistoryCondition(");
    boolean first = true;

    sb.append("start:");
    sb.append(this.start);
    first = false;
    if (!first) sb.append(", ");
    sb.append("size:");
    sb.append(this.size);
    first = false;
    if (!first) sb.append(", ");
    sb.append("language:");
    if (this.language == null) {
      sb.append("null");
    } else {
      sb.append(this.language);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eddt:");
    if (this.eddt == null) {
      sb.append("null");
    } else {
      sb.append(this.eddt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appStoreCode:");
    if (this.appStoreCode == null) {
      sb.append("null");
    } else {
      sb.append(this.appStoreCode);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

