/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class LoginSession implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("LoginSession");

  private static final TField TOKEN_KEY_FIELD_DESC = new TField("tokenKey", TType.STRING, (short)1);
  private static final TField EXPIRATION_TIME_FIELD_DESC = new TField("expirationTime", TType.I64, (short)3);
  private static final TField APPLICATION_TYPE_FIELD_DESC = new TField("applicationType", TType.I32, (short)11);
  private static final TField SYSTEM_NAME_FIELD_DESC = new TField("systemName", TType.STRING, (short)12);
  private static final TField ACCESS_LOCATION_FIELD_DESC = new TField("accessLocation", TType.STRING, (short)22);

  private String tokenKey;
  private long expirationTime;
  private ApplicationType applicationType;
  private String systemName;
  private String accessLocation;

  // isset id assignments
  private static final int __EXPIRATIONTIME_ISSET_ID = 0;
  private boolean[] __isset_vector = new boolean[1];

  public LoginSession() {
  }

  public LoginSession(
    String tokenKey,
    long expirationTime,
    ApplicationType applicationType,
    String systemName,
    String accessLocation)
  {
    this();
    this.tokenKey = tokenKey;
    this.expirationTime = expirationTime;
    setExpirationTimeIsSet(true);
    this.applicationType = applicationType;
    this.systemName = systemName;
    this.accessLocation = accessLocation;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LoginSession(LoginSession other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    if (other.isSetTokenKey()) {
      this.tokenKey = other.tokenKey;
    }
    this.expirationTime = other.expirationTime;
    if (other.isSetApplicationType()) {
      this.applicationType = other.applicationType;
    }
    if (other.isSetSystemName()) {
      this.systemName = other.systemName;
    }
    if (other.isSetAccessLocation()) {
      this.accessLocation = other.accessLocation;
    }
  }

  public LoginSession deepCopy() {
    return new LoginSession(this);
  }

  public void clear() {
    this.tokenKey = null;
    setExpirationTimeIsSet(false);
    this.expirationTime = 0;
    this.applicationType = null;
    this.systemName = null;
    this.accessLocation = null;
  }

  public String getTokenKey() {
    return this.tokenKey;
  }

  public void setTokenKey(String tokenKey) {
    this.tokenKey = tokenKey;
  }

  public void unsetTokenKey() {
    this.tokenKey = null;
  }

  /** Returns true if field tokenKey is set (has been assigned a value) and false otherwise */
  public boolean isSetTokenKey() {
    return this.tokenKey != null;
  }

  public void setTokenKeyIsSet(boolean value) {
    if (!value) {
      this.tokenKey = null;
    }
  }

  public long getExpirationTime() {
    return this.expirationTime;
  }

  public void setExpirationTime(long expirationTime) {
    this.expirationTime = expirationTime;
    setExpirationTimeIsSet(true);
  }

  public void unsetExpirationTime() {
    __isset_vector[__EXPIRATIONTIME_ISSET_ID] = false;
  }

  /** Returns true if field expirationTime is set (has been assigned a value) and false otherwise */
  public boolean isSetExpirationTime() {
    return __isset_vector[__EXPIRATIONTIME_ISSET_ID];
  }

  public void setExpirationTimeIsSet(boolean value) {
    __isset_vector[__EXPIRATIONTIME_ISSET_ID] = value;
  }

  /**
   * 
   * @see ApplicationType
   */
  public ApplicationType getApplicationType() {
    return this.applicationType;
  }

  /**
   * 
   * @see ApplicationType
   */
  public void setApplicationType(ApplicationType applicationType) {
    this.applicationType = applicationType;
  }

  public void unsetApplicationType() {
    this.applicationType = null;
  }

  /** Returns true if field applicationType is set (has been assigned a value) and false otherwise */
  public boolean isSetApplicationType() {
    return this.applicationType != null;
  }

  public void setApplicationTypeIsSet(boolean value) {
    if (!value) {
      this.applicationType = null;
    }
  }

  public String getSystemName() {
    return this.systemName;
  }

  public void setSystemName(String systemName) {
    this.systemName = systemName;
  }

  public void unsetSystemName() {
    this.systemName = null;
  }

  /** Returns true if field systemName is set (has been assigned a value) and false otherwise */
  public boolean isSetSystemName() {
    return this.systemName != null;
  }

  public void setSystemNameIsSet(boolean value) {
    if (!value) {
      this.systemName = null;
    }
  }

  public String getAccessLocation() {
    return this.accessLocation;
  }

  public void setAccessLocation(String accessLocation) {
    this.accessLocation = accessLocation;
  }

  public void unsetAccessLocation() {
    this.accessLocation = null;
  }

  /** Returns true if field accessLocation is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessLocation() {
    return this.accessLocation != null;
  }

  public void setAccessLocationIsSet(boolean value) {
    if (!value) {
      this.accessLocation = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LoginSession)
      return this.equals((LoginSession)that);
    return false;
  }

  public boolean equals(LoginSession that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tokenKey = true && this.isSetTokenKey();
    boolean that_present_tokenKey = true && that.isSetTokenKey();
    if (this_present_tokenKey || that_present_tokenKey) {
      if (!(this_present_tokenKey && that_present_tokenKey))
        return false;
      if (!this.tokenKey.equals(that.tokenKey))
        return false;
    }

    boolean this_present_expirationTime = true;
    boolean that_present_expirationTime = true;
    if (this_present_expirationTime || that_present_expirationTime) {
      if (!(this_present_expirationTime && that_present_expirationTime))
        return false;
      if (this.expirationTime != that.expirationTime)
        return false;
    }

    boolean this_present_applicationType = true && this.isSetApplicationType();
    boolean that_present_applicationType = true && that.isSetApplicationType();
    if (this_present_applicationType || that_present_applicationType) {
      if (!(this_present_applicationType && that_present_applicationType))
        return false;
      if (!this.applicationType.equals(that.applicationType))
        return false;
    }

    boolean this_present_systemName = true && this.isSetSystemName();
    boolean that_present_systemName = true && that.isSetSystemName();
    if (this_present_systemName || that_present_systemName) {
      if (!(this_present_systemName && that_present_systemName))
        return false;
      if (!this.systemName.equals(that.systemName))
        return false;
    }

    boolean this_present_accessLocation = true && this.isSetAccessLocation();
    boolean that_present_accessLocation = true && that.isSetAccessLocation();
    if (this_present_accessLocation || that_present_accessLocation) {
      if (!(this_present_accessLocation && that_present_accessLocation))
        return false;
      if (!this.accessLocation.equals(that.accessLocation))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    LoginSession other = (LoginSession)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetTokenKey(), other.isSetTokenKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTokenKey()) {
      lastComparison = TBaseHelper.compareTo(this.tokenKey, other.tokenKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetExpirationTime(), other.isSetExpirationTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpirationTime()) {
      lastComparison = TBaseHelper.compareTo(this.expirationTime, other.expirationTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetApplicationType(), other.isSetApplicationType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplicationType()) {
      lastComparison = TBaseHelper.compareTo(this.applicationType, other.applicationType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSystemName(), other.isSetSystemName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSystemName()) {
      lastComparison = TBaseHelper.compareTo(this.systemName, other.systemName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetAccessLocation(), other.isSetAccessLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessLocation()) {
      lastComparison = TBaseHelper.compareTo(this.accessLocation, other.accessLocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // TOKEN_KEY
          if (field.type == TType.STRING) {
            this.tokenKey = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // EXPIRATION_TIME
          if (field.type == TType.I64) {
            this.expirationTime = iprot.readI64();
            setExpirationTimeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // APPLICATION_TYPE
          if (field.type == TType.I32) {
            this.applicationType = ApplicationType.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // SYSTEM_NAME
          if (field.type == TType.STRING) {
            this.systemName = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 22: // ACCESS_LOCATION
          if (field.type == TType.STRING) {
            this.accessLocation = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.tokenKey != null) {
      oprot.writeFieldBegin(TOKEN_KEY_FIELD_DESC);
      oprot.writeString(this.tokenKey);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(EXPIRATION_TIME_FIELD_DESC);
    oprot.writeI64(this.expirationTime);
    oprot.writeFieldEnd();
    if (this.applicationType != null) {
      oprot.writeFieldBegin(APPLICATION_TYPE_FIELD_DESC);
      oprot.writeI32(this.applicationType.getValue());
      oprot.writeFieldEnd();
    }
    if (this.systemName != null) {
      oprot.writeFieldBegin(SYSTEM_NAME_FIELD_DESC);
      oprot.writeString(this.systemName);
      oprot.writeFieldEnd();
    }
    if (this.accessLocation != null) {
      oprot.writeFieldBegin(ACCESS_LOCATION_FIELD_DESC);
      oprot.writeString(this.accessLocation);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("LoginSession(");
    boolean first = true;

    sb.append("tokenKey:");
    if (this.tokenKey == null) {
      sb.append("null");
    } else {
      sb.append(this.tokenKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("expirationTime:");
    sb.append(this.expirationTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("applicationType:");
    if (this.applicationType == null) {
      sb.append("null");
    } else {
      sb.append(this.applicationType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("systemName:");
    if (this.systemName == null) {
      sb.append("null");
    } else {
      sb.append(this.systemName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accessLocation:");
    if (this.accessLocation == null) {
      sb.append("null");
    } else {
      sb.append(this.accessLocation);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

