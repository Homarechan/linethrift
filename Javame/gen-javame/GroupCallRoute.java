/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class GroupCallRoute implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("GroupCallRoute");

  private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)1);
  private static final TField CSCF_FIELD_DESC = new TField("cscf", TType.STRUCT, (short)2);
  private static final TField MIX_FIELD_DESC = new TField("mix", TType.STRUCT, (short)3);

  private String token;
  private CallHost cscf;
  private CallHost mix;

  // isset id assignments

  public GroupCallRoute() {
  }

  public GroupCallRoute(
    String token,
    CallHost cscf,
    CallHost mix)
  {
    this();
    this.token = token;
    this.cscf = cscf;
    this.mix = mix;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GroupCallRoute(GroupCallRoute other) {
    if (other.isSetToken()) {
      this.token = other.token;
    }
    if (other.isSetCscf()) {
      this.cscf = new CallHost(other.cscf);
    }
    if (other.isSetMix()) {
      this.mix = new CallHost(other.mix);
    }
  }

  public GroupCallRoute deepCopy() {
    return new GroupCallRoute(this);
  }

  public void clear() {
    this.token = null;
    this.cscf = null;
    this.mix = null;
  }

  public String getToken() {
    return this.token;
  }

  public void setToken(String token) {
    this.token = token;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  public CallHost getCscf() {
    return this.cscf;
  }

  public void setCscf(CallHost cscf) {
    this.cscf = cscf;
  }

  public void unsetCscf() {
    this.cscf = null;
  }

  /** Returns true if field cscf is set (has been assigned a value) and false otherwise */
  public boolean isSetCscf() {
    return this.cscf != null;
  }

  public void setCscfIsSet(boolean value) {
    if (!value) {
      this.cscf = null;
    }
  }

  public CallHost getMix() {
    return this.mix;
  }

  public void setMix(CallHost mix) {
    this.mix = mix;
  }

  public void unsetMix() {
    this.mix = null;
  }

  /** Returns true if field mix is set (has been assigned a value) and false otherwise */
  public boolean isSetMix() {
    return this.mix != null;
  }

  public void setMixIsSet(boolean value) {
    if (!value) {
      this.mix = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GroupCallRoute)
      return this.equals((GroupCallRoute)that);
    return false;
  }

  public boolean equals(GroupCallRoute that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_cscf = true && this.isSetCscf();
    boolean that_present_cscf = true && that.isSetCscf();
    if (this_present_cscf || that_present_cscf) {
      if (!(this_present_cscf && that_present_cscf))
        return false;
      if (!this.cscf.equals(that.cscf))
        return false;
    }

    boolean this_present_mix = true && this.isSetMix();
    boolean that_present_mix = true && that.isSetMix();
    if (this_present_mix || that_present_mix) {
      if (!(this_present_mix && that_present_mix))
        return false;
      if (!this.mix.equals(that.mix))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    GroupCallRoute other = (GroupCallRoute)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetToken(), other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetCscf(), other.isSetCscf());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCscf()) {
      lastComparison = this.cscf.compareTo(other.cscf);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetMix(), other.isSetMix());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMix()) {
      lastComparison = this.mix.compareTo(other.mix);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // TOKEN
          if (field.type == TType.STRING) {
            this.token = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // CSCF
          if (field.type == TType.STRUCT) {
            this.cscf = new CallHost();
            this.cscf.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // MIX
          if (field.type == TType.STRUCT) {
            this.mix = new CallHost();
            this.mix.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.token != null) {
      oprot.writeFieldBegin(TOKEN_FIELD_DESC);
      oprot.writeString(this.token);
      oprot.writeFieldEnd();
    }
    if (this.cscf != null) {
      oprot.writeFieldBegin(CSCF_FIELD_DESC);
      this.cscf.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.mix != null) {
      oprot.writeFieldBegin(MIX_FIELD_DESC);
      this.mix.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("GroupCallRoute(");
    boolean first = true;

    sb.append("token:");
    if (this.token == null) {
      sb.append("null");
    } else {
      sb.append(this.token);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cscf:");
    if (this.cscf == null) {
      sb.append("null");
    } else {
      sb.append(this.cscf);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mix:");
    if (this.mix == null) {
      sb.append("null");
    } else {
      sb.append(this.mix);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

