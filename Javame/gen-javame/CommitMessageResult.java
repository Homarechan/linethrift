/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class CommitMessageResult implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("CommitMessageResult");

  private static final TField MESSAGE_FIELD_DESC = new TField("message", TType.STRUCT, (short)1);
  private static final TField CODE_FIELD_DESC = new TField("code", TType.I32, (short)2);
  private static final TField REASON_FIELD_DESC = new TField("reason", TType.STRING, (short)3);
  private static final TField SUCCESS_COUNT_FIELD_DESC = new TField("successCount", TType.I64, (short)4);
  private static final TField FAIL_COUNT_FIELD_DESC = new TField("failCount", TType.I64, (short)5);
  private static final TField UNREGISTER_COUNT_FIELD_DESC = new TField("unregisterCount", TType.I64, (short)6);
  private static final TField BLOCK_COUNT_FIELD_DESC = new TField("blockCount", TType.I64, (short)7);

  private Message message;
  private CommitMessageResultCode code;
  private String reason;
  private long successCount;
  private long failCount;
  private long unregisterCount;
  private long blockCount;

  // isset id assignments
  private static final int __SUCCESSCOUNT_ISSET_ID = 0;
  private static final int __FAILCOUNT_ISSET_ID = 1;
  private static final int __UNREGISTERCOUNT_ISSET_ID = 2;
  private static final int __BLOCKCOUNT_ISSET_ID = 3;
  private boolean[] __isset_vector = new boolean[4];

  public CommitMessageResult() {
  }

  public CommitMessageResult(
    Message message,
    CommitMessageResultCode code,
    String reason,
    long successCount,
    long failCount,
    long unregisterCount,
    long blockCount)
  {
    this();
    this.message = message;
    this.code = code;
    this.reason = reason;
    this.successCount = successCount;
    setSuccessCountIsSet(true);
    this.failCount = failCount;
    setFailCountIsSet(true);
    this.unregisterCount = unregisterCount;
    setUnregisterCountIsSet(true);
    this.blockCount = blockCount;
    setBlockCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CommitMessageResult(CommitMessageResult other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    if (other.isSetCode()) {
      this.code = other.code;
    }
    if (other.isSetReason()) {
      this.reason = other.reason;
    }
    this.successCount = other.successCount;
    this.failCount = other.failCount;
    this.unregisterCount = other.unregisterCount;
    this.blockCount = other.blockCount;
  }

  public CommitMessageResult deepCopy() {
    return new CommitMessageResult(this);
  }

  public void clear() {
    this.message = null;
    this.code = null;
    this.reason = null;
    setSuccessCountIsSet(false);
    this.successCount = 0;
    setFailCountIsSet(false);
    this.failCount = 0;
    setUnregisterCountIsSet(false);
    this.unregisterCount = 0;
    setBlockCountIsSet(false);
    this.blockCount = 0;
  }

  public Message getMessage() {
    return this.message;
  }

  public void setMessage(Message message) {
    this.message = message;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  /**
   * 
   * @see CommitMessageResultCode
   */
  public CommitMessageResultCode getCode() {
    return this.code;
  }

  /**
   * 
   * @see CommitMessageResultCode
   */
  public void setCode(CommitMessageResultCode code) {
    this.code = code;
  }

  public void unsetCode() {
    this.code = null;
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return this.code != null;
  }

  public void setCodeIsSet(boolean value) {
    if (!value) {
      this.code = null;
    }
  }

  public String getReason() {
    return this.reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }

  public void unsetReason() {
    this.reason = null;
  }

  /** Returns true if field reason is set (has been assigned a value) and false otherwise */
  public boolean isSetReason() {
    return this.reason != null;
  }

  public void setReasonIsSet(boolean value) {
    if (!value) {
      this.reason = null;
    }
  }

  public long getSuccessCount() {
    return this.successCount;
  }

  public void setSuccessCount(long successCount) {
    this.successCount = successCount;
    setSuccessCountIsSet(true);
  }

  public void unsetSuccessCount() {
    __isset_vector[__SUCCESSCOUNT_ISSET_ID] = false;
  }

  /** Returns true if field successCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccessCount() {
    return __isset_vector[__SUCCESSCOUNT_ISSET_ID];
  }

  public void setSuccessCountIsSet(boolean value) {
    __isset_vector[__SUCCESSCOUNT_ISSET_ID] = value;
  }

  public long getFailCount() {
    return this.failCount;
  }

  public void setFailCount(long failCount) {
    this.failCount = failCount;
    setFailCountIsSet(true);
  }

  public void unsetFailCount() {
    __isset_vector[__FAILCOUNT_ISSET_ID] = false;
  }

  /** Returns true if field failCount is set (has been assigned a value) and false otherwise */
  public boolean isSetFailCount() {
    return __isset_vector[__FAILCOUNT_ISSET_ID];
  }

  public void setFailCountIsSet(boolean value) {
    __isset_vector[__FAILCOUNT_ISSET_ID] = value;
  }

  public long getUnregisterCount() {
    return this.unregisterCount;
  }

  public void setUnregisterCount(long unregisterCount) {
    this.unregisterCount = unregisterCount;
    setUnregisterCountIsSet(true);
  }

  public void unsetUnregisterCount() {
    __isset_vector[__UNREGISTERCOUNT_ISSET_ID] = false;
  }

  /** Returns true if field unregisterCount is set (has been assigned a value) and false otherwise */
  public boolean isSetUnregisterCount() {
    return __isset_vector[__UNREGISTERCOUNT_ISSET_ID];
  }

  public void setUnregisterCountIsSet(boolean value) {
    __isset_vector[__UNREGISTERCOUNT_ISSET_ID] = value;
  }

  public long getBlockCount() {
    return this.blockCount;
  }

  public void setBlockCount(long blockCount) {
    this.blockCount = blockCount;
    setBlockCountIsSet(true);
  }

  public void unsetBlockCount() {
    __isset_vector[__BLOCKCOUNT_ISSET_ID] = false;
  }

  /** Returns true if field blockCount is set (has been assigned a value) and false otherwise */
  public boolean isSetBlockCount() {
    return __isset_vector[__BLOCKCOUNT_ISSET_ID];
  }

  public void setBlockCountIsSet(boolean value) {
    __isset_vector[__BLOCKCOUNT_ISSET_ID] = value;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CommitMessageResult)
      return this.equals((CommitMessageResult)that);
    return false;
  }

  public boolean equals(CommitMessageResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_code = true && this.isSetCode();
    boolean that_present_code = true && that.isSetCode();
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (!this.code.equals(that.code))
        return false;
    }

    boolean this_present_reason = true && this.isSetReason();
    boolean that_present_reason = true && that.isSetReason();
    if (this_present_reason || that_present_reason) {
      if (!(this_present_reason && that_present_reason))
        return false;
      if (!this.reason.equals(that.reason))
        return false;
    }

    boolean this_present_successCount = true;
    boolean that_present_successCount = true;
    if (this_present_successCount || that_present_successCount) {
      if (!(this_present_successCount && that_present_successCount))
        return false;
      if (this.successCount != that.successCount)
        return false;
    }

    boolean this_present_failCount = true;
    boolean that_present_failCount = true;
    if (this_present_failCount || that_present_failCount) {
      if (!(this_present_failCount && that_present_failCount))
        return false;
      if (this.failCount != that.failCount)
        return false;
    }

    boolean this_present_unregisterCount = true;
    boolean that_present_unregisterCount = true;
    if (this_present_unregisterCount || that_present_unregisterCount) {
      if (!(this_present_unregisterCount && that_present_unregisterCount))
        return false;
      if (this.unregisterCount != that.unregisterCount)
        return false;
    }

    boolean this_present_blockCount = true;
    boolean that_present_blockCount = true;
    if (this_present_blockCount || that_present_blockCount) {
      if (!(this_present_blockCount && that_present_blockCount))
        return false;
      if (this.blockCount != that.blockCount)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    CommitMessageResult other = (CommitMessageResult)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetMessage(), other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetCode(), other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = TBaseHelper.compareTo(this.code, other.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetReason(), other.isSetReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReason()) {
      lastComparison = TBaseHelper.compareTo(this.reason, other.reason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSuccessCount(), other.isSetSuccessCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccessCount()) {
      lastComparison = TBaseHelper.compareTo(this.successCount, other.successCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetFailCount(), other.isSetFailCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailCount()) {
      lastComparison = TBaseHelper.compareTo(this.failCount, other.failCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetUnregisterCount(), other.isSetUnregisterCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnregisterCount()) {
      lastComparison = TBaseHelper.compareTo(this.unregisterCount, other.unregisterCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetBlockCount(), other.isSetBlockCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlockCount()) {
      lastComparison = TBaseHelper.compareTo(this.blockCount, other.blockCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // MESSAGE
          if (field.type == TType.STRUCT) {
            this.message = new Message();
            this.message.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // CODE
          if (field.type == TType.I32) {
            this.code = CommitMessageResultCode.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // REASON
          if (field.type == TType.STRING) {
            this.reason = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // SUCCESS_COUNT
          if (field.type == TType.I64) {
            this.successCount = iprot.readI64();
            setSuccessCountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // FAIL_COUNT
          if (field.type == TType.I64) {
            this.failCount = iprot.readI64();
            setFailCountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // UNREGISTER_COUNT
          if (field.type == TType.I64) {
            this.unregisterCount = iprot.readI64();
            setUnregisterCountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // BLOCK_COUNT
          if (field.type == TType.I64) {
            this.blockCount = iprot.readI64();
            setBlockCountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.message != null) {
      oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
      this.message.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.code != null) {
      oprot.writeFieldBegin(CODE_FIELD_DESC);
      oprot.writeI32(this.code.getValue());
      oprot.writeFieldEnd();
    }
    if (this.reason != null) {
      oprot.writeFieldBegin(REASON_FIELD_DESC);
      oprot.writeString(this.reason);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SUCCESS_COUNT_FIELD_DESC);
    oprot.writeI64(this.successCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(FAIL_COUNT_FIELD_DESC);
    oprot.writeI64(this.failCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(UNREGISTER_COUNT_FIELD_DESC);
    oprot.writeI64(this.unregisterCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(BLOCK_COUNT_FIELD_DESC);
    oprot.writeI64(this.blockCount);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("CommitMessageResult(");
    boolean first = true;

    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("code:");
    if (this.code == null) {
      sb.append("null");
    } else {
      sb.append(this.code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reason:");
    if (this.reason == null) {
      sb.append("null");
    } else {
      sb.append(this.reason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("successCount:");
    sb.append(this.successCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("failCount:");
    sb.append(this.failCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unregisterCount:");
    sb.append(this.unregisterCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("blockCount:");
    sb.append(this.blockCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

