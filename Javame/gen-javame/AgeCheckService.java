/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class AgeCheckService {

  public interface Iface {

    public UserAgeType checkUserAge(CarrierCode carrier, String sessionId, String verifier, int standardAge) throws TalkException, TException;

    public AgeCheckDocomoResult checkUserAgeWithDocomo(String openIdRedirectUrl, int standardAge, String verifier) throws TalkException, TException;

    public String retrieveOpenIdAuthUrlWithDocomo() throws TalkException, TException;

    public AgeCheckRequestResult retrieveRequestToken(CarrierCode carrier) throws TalkException, TException;

  }

  public static class Client implements TServiceClient, Iface {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public UserAgeType checkUserAge(CarrierCode carrier, String sessionId, String verifier, int standardAge) throws TalkException, TException
    {
      send_checkUserAge(carrier, sessionId, verifier, standardAge);
      return recv_checkUserAge();
    }

    public void send_checkUserAge(CarrierCode carrier, String sessionId, String verifier, int standardAge) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("checkUserAge", TMessageType.CALL, ++seqid_));
      checkUserAge_args args = new checkUserAge_args();
      args.setCarrier(carrier);
      args.setSessionId(sessionId);
      args.setVerifier(verifier);
      args.setStandardAge(standardAge);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public UserAgeType recv_checkUserAge() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "checkUserAge failed: out of sequence response");
      }
      checkUserAge_result result = new checkUserAge_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "checkUserAge failed: unknown result");
    }

    public AgeCheckDocomoResult checkUserAgeWithDocomo(String openIdRedirectUrl, int standardAge, String verifier) throws TalkException, TException
    {
      send_checkUserAgeWithDocomo(openIdRedirectUrl, standardAge, verifier);
      return recv_checkUserAgeWithDocomo();
    }

    public void send_checkUserAgeWithDocomo(String openIdRedirectUrl, int standardAge, String verifier) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("checkUserAgeWithDocomo", TMessageType.CALL, ++seqid_));
      checkUserAgeWithDocomo_args args = new checkUserAgeWithDocomo_args();
      args.setOpenIdRedirectUrl(openIdRedirectUrl);
      args.setStandardAge(standardAge);
      args.setVerifier(verifier);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public AgeCheckDocomoResult recv_checkUserAgeWithDocomo() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "checkUserAgeWithDocomo failed: out of sequence response");
      }
      checkUserAgeWithDocomo_result result = new checkUserAgeWithDocomo_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "checkUserAgeWithDocomo failed: unknown result");
    }

    public String retrieveOpenIdAuthUrlWithDocomo() throws TalkException, TException
    {
      send_retrieveOpenIdAuthUrlWithDocomo();
      return recv_retrieveOpenIdAuthUrlWithDocomo();
    }

    public void send_retrieveOpenIdAuthUrlWithDocomo() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("retrieveOpenIdAuthUrlWithDocomo", TMessageType.CALL, ++seqid_));
      retrieveOpenIdAuthUrlWithDocomo_args args = new retrieveOpenIdAuthUrlWithDocomo_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_retrieveOpenIdAuthUrlWithDocomo() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "retrieveOpenIdAuthUrlWithDocomo failed: out of sequence response");
      }
      retrieveOpenIdAuthUrlWithDocomo_result result = new retrieveOpenIdAuthUrlWithDocomo_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "retrieveOpenIdAuthUrlWithDocomo failed: unknown result");
    }

    public AgeCheckRequestResult retrieveRequestToken(CarrierCode carrier) throws TalkException, TException
    {
      send_retrieveRequestToken(carrier);
      return recv_retrieveRequestToken();
    }

    public void send_retrieveRequestToken(CarrierCode carrier) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("retrieveRequestToken", TMessageType.CALL, ++seqid_));
      retrieveRequestToken_args args = new retrieveRequestToken_args();
      args.setCarrier(carrier);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public AgeCheckRequestResult recv_retrieveRequestToken() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "retrieveRequestToken failed: out of sequence response");
      }
      retrieveRequestToken_result result = new retrieveRequestToken_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "retrieveRequestToken failed: unknown result");
    }

  }
  public static class Processor implements TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("checkUserAge", new checkUserAge());
      processMap_.put("checkUserAgeWithDocomo", new checkUserAgeWithDocomo());
      processMap_.put("retrieveOpenIdAuthUrlWithDocomo", new retrieveOpenIdAuthUrlWithDocomo());
      processMap_.put("retrieveRequestToken", new retrieveRequestToken());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final Hashtable processMap_ = new Hashtable();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = (ProcessFunction)processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class checkUserAge implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        checkUserAge_args args = new checkUserAge_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("checkUserAge", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        checkUserAge_result result = new checkUserAge_result();
        try {
          result.success = iface_.checkUserAge(args.carrier, args.sessionId, args.verifier, args.standardAge);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing checkUserAge");
          oprot.writeMessageBegin(new TMessage("checkUserAge", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("checkUserAge", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class checkUserAgeWithDocomo implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        checkUserAgeWithDocomo_args args = new checkUserAgeWithDocomo_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("checkUserAgeWithDocomo", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        checkUserAgeWithDocomo_result result = new checkUserAgeWithDocomo_result();
        try {
          result.success = iface_.checkUserAgeWithDocomo(args.openIdRedirectUrl, args.standardAge, args.verifier);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing checkUserAgeWithDocomo");
          oprot.writeMessageBegin(new TMessage("checkUserAgeWithDocomo", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("checkUserAgeWithDocomo", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class retrieveOpenIdAuthUrlWithDocomo implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        retrieveOpenIdAuthUrlWithDocomo_args args = new retrieveOpenIdAuthUrlWithDocomo_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("retrieveOpenIdAuthUrlWithDocomo", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        retrieveOpenIdAuthUrlWithDocomo_result result = new retrieveOpenIdAuthUrlWithDocomo_result();
        try {
          result.success = iface_.retrieveOpenIdAuthUrlWithDocomo();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing retrieveOpenIdAuthUrlWithDocomo");
          oprot.writeMessageBegin(new TMessage("retrieveOpenIdAuthUrlWithDocomo", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("retrieveOpenIdAuthUrlWithDocomo", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class retrieveRequestToken implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        retrieveRequestToken_args args = new retrieveRequestToken_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("retrieveRequestToken", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        retrieveRequestToken_result result = new retrieveRequestToken_result();
        try {
          result.success = iface_.retrieveRequestToken(args.carrier);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing retrieveRequestToken");
          oprot.writeMessageBegin(new TMessage("retrieveRequestToken", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("retrieveRequestToken", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class checkUserAge_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("checkUserAge_args");

    private static final TField CARRIER_FIELD_DESC = new TField("carrier", TType.I32, (short)2);
    private static final TField SESSION_ID_FIELD_DESC = new TField("sessionId", TType.STRING, (short)3);
    private static final TField VERIFIER_FIELD_DESC = new TField("verifier", TType.STRING, (short)4);
    private static final TField STANDARD_AGE_FIELD_DESC = new TField("standardAge", TType.I32, (short)5);

    private CarrierCode carrier;
    private String sessionId;
    private String verifier;
    private int standardAge;

    // isset id assignments
    private static final int __STANDARDAGE_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public checkUserAge_args() {
    }

    public checkUserAge_args(
      CarrierCode carrier,
      String sessionId,
      String verifier,
      int standardAge)
    {
      this();
      this.carrier = carrier;
      this.sessionId = sessionId;
      this.verifier = verifier;
      this.standardAge = standardAge;
      setStandardAgeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkUserAge_args(checkUserAge_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetCarrier()) {
        this.carrier = other.carrier;
      }
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
      if (other.isSetVerifier()) {
        this.verifier = other.verifier;
      }
      this.standardAge = other.standardAge;
    }

    public checkUserAge_args deepCopy() {
      return new checkUserAge_args(this);
    }

    public void clear() {
      this.carrier = null;
      this.sessionId = null;
      this.verifier = null;
      setStandardAgeIsSet(false);
      this.standardAge = 0;
    }

    /**
     * 
     * @see CarrierCode
     */
    public CarrierCode getCarrier() {
      return this.carrier;
    }

    /**
     * 
     * @see CarrierCode
     */
    public void setCarrier(CarrierCode carrier) {
      this.carrier = carrier;
    }

    public void unsetCarrier() {
      this.carrier = null;
    }

    /** Returns true if field carrier is set (has been assigned a value) and false otherwise */
    public boolean isSetCarrier() {
      return this.carrier != null;
    }

    public void setCarrierIsSet(boolean value) {
      if (!value) {
        this.carrier = null;
      }
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public void setSessionId(String sessionId) {
      this.sessionId = sessionId;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public String getVerifier() {
      return this.verifier;
    }

    public void setVerifier(String verifier) {
      this.verifier = verifier;
    }

    public void unsetVerifier() {
      this.verifier = null;
    }

    /** Returns true if field verifier is set (has been assigned a value) and false otherwise */
    public boolean isSetVerifier() {
      return this.verifier != null;
    }

    public void setVerifierIsSet(boolean value) {
      if (!value) {
        this.verifier = null;
      }
    }

    public int getStandardAge() {
      return this.standardAge;
    }

    public void setStandardAge(int standardAge) {
      this.standardAge = standardAge;
      setStandardAgeIsSet(true);
    }

    public void unsetStandardAge() {
      __isset_vector[__STANDARDAGE_ISSET_ID] = false;
    }

    /** Returns true if field standardAge is set (has been assigned a value) and false otherwise */
    public boolean isSetStandardAge() {
      return __isset_vector[__STANDARDAGE_ISSET_ID];
    }

    public void setStandardAgeIsSet(boolean value) {
      __isset_vector[__STANDARDAGE_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkUserAge_args)
        return this.equals((checkUserAge_args)that);
      return false;
    }

    public boolean equals(checkUserAge_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_carrier = true && this.isSetCarrier();
      boolean that_present_carrier = true && that.isSetCarrier();
      if (this_present_carrier || that_present_carrier) {
        if (!(this_present_carrier && that_present_carrier))
          return false;
        if (!this.carrier.equals(that.carrier))
          return false;
      }

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      boolean this_present_verifier = true && this.isSetVerifier();
      boolean that_present_verifier = true && that.isSetVerifier();
      if (this_present_verifier || that_present_verifier) {
        if (!(this_present_verifier && that_present_verifier))
          return false;
        if (!this.verifier.equals(that.verifier))
          return false;
      }

      boolean this_present_standardAge = true;
      boolean that_present_standardAge = true;
      if (this_present_standardAge || that_present_standardAge) {
        if (!(this_present_standardAge && that_present_standardAge))
          return false;
        if (this.standardAge != that.standardAge)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      checkUserAge_args other = (checkUserAge_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetCarrier(), other.isSetCarrier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCarrier()) {
        lastComparison = TBaseHelper.compareTo(this.carrier, other.carrier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSessionId(), other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetVerifier(), other.isSetVerifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVerifier()) {
        lastComparison = TBaseHelper.compareTo(this.verifier, other.verifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetStandardAge(), other.isSetStandardAge());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStandardAge()) {
        lastComparison = TBaseHelper.compareTo(this.standardAge, other.standardAge);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // CARRIER
            if (field.type == TType.I32) {
              this.carrier = CarrierCode.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SESSION_ID
            if (field.type == TType.STRING) {
              this.sessionId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // VERIFIER
            if (field.type == TType.STRING) {
              this.verifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // STANDARD_AGE
            if (field.type == TType.I32) {
              this.standardAge = iprot.readI32();
              setStandardAgeIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.carrier != null) {
        oprot.writeFieldBegin(CARRIER_FIELD_DESC);
        oprot.writeI32(this.carrier.getValue());
        oprot.writeFieldEnd();
      }
      if (this.sessionId != null) {
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeString(this.sessionId);
        oprot.writeFieldEnd();
      }
      if (this.verifier != null) {
        oprot.writeFieldBegin(VERIFIER_FIELD_DESC);
        oprot.writeString(this.verifier);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STANDARD_AGE_FIELD_DESC);
      oprot.writeI32(this.standardAge);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("checkUserAge_args(");
      boolean first = true;

      sb.append("carrier:");
      if (this.carrier == null) {
        sb.append("null");
      } else {
        sb.append(this.carrier);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("verifier:");
      if (this.verifier == null) {
        sb.append("null");
      } else {
        sb.append(this.verifier);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("standardAge:");
      sb.append(this.standardAge);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class checkUserAge_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("checkUserAge_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private UserAgeType success;
    private TalkException e;

    // isset id assignments

    public checkUserAge_result() {
    }

    public checkUserAge_result(
      UserAgeType success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkUserAge_result(checkUserAge_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public checkUserAge_result deepCopy() {
      return new checkUserAge_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    /**
     * 
     * @see UserAgeType
     */
    public UserAgeType getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see UserAgeType
     */
    public void setSuccess(UserAgeType success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkUserAge_result)
        return this.equals((checkUserAge_result)that);
      return false;
    }

    public boolean equals(checkUserAge_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      checkUserAge_result other = (checkUserAge_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = UserAgeType.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success.getValue());
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("checkUserAge_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class checkUserAgeWithDocomo_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("checkUserAgeWithDocomo_args");

    private static final TField OPEN_ID_REDIRECT_URL_FIELD_DESC = new TField("openIdRedirectUrl", TType.STRING, (short)2);
    private static final TField STANDARD_AGE_FIELD_DESC = new TField("standardAge", TType.I32, (short)3);
    private static final TField VERIFIER_FIELD_DESC = new TField("verifier", TType.STRING, (short)4);

    private String openIdRedirectUrl;
    private int standardAge;
    private String verifier;

    // isset id assignments
    private static final int __STANDARDAGE_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public checkUserAgeWithDocomo_args() {
    }

    public checkUserAgeWithDocomo_args(
      String openIdRedirectUrl,
      int standardAge,
      String verifier)
    {
      this();
      this.openIdRedirectUrl = openIdRedirectUrl;
      this.standardAge = standardAge;
      setStandardAgeIsSet(true);
      this.verifier = verifier;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkUserAgeWithDocomo_args(checkUserAgeWithDocomo_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetOpenIdRedirectUrl()) {
        this.openIdRedirectUrl = other.openIdRedirectUrl;
      }
      this.standardAge = other.standardAge;
      if (other.isSetVerifier()) {
        this.verifier = other.verifier;
      }
    }

    public checkUserAgeWithDocomo_args deepCopy() {
      return new checkUserAgeWithDocomo_args(this);
    }

    public void clear() {
      this.openIdRedirectUrl = null;
      setStandardAgeIsSet(false);
      this.standardAge = 0;
      this.verifier = null;
    }

    public String getOpenIdRedirectUrl() {
      return this.openIdRedirectUrl;
    }

    public void setOpenIdRedirectUrl(String openIdRedirectUrl) {
      this.openIdRedirectUrl = openIdRedirectUrl;
    }

    public void unsetOpenIdRedirectUrl() {
      this.openIdRedirectUrl = null;
    }

    /** Returns true if field openIdRedirectUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetOpenIdRedirectUrl() {
      return this.openIdRedirectUrl != null;
    }

    public void setOpenIdRedirectUrlIsSet(boolean value) {
      if (!value) {
        this.openIdRedirectUrl = null;
      }
    }

    public int getStandardAge() {
      return this.standardAge;
    }

    public void setStandardAge(int standardAge) {
      this.standardAge = standardAge;
      setStandardAgeIsSet(true);
    }

    public void unsetStandardAge() {
      __isset_vector[__STANDARDAGE_ISSET_ID] = false;
    }

    /** Returns true if field standardAge is set (has been assigned a value) and false otherwise */
    public boolean isSetStandardAge() {
      return __isset_vector[__STANDARDAGE_ISSET_ID];
    }

    public void setStandardAgeIsSet(boolean value) {
      __isset_vector[__STANDARDAGE_ISSET_ID] = value;
    }

    public String getVerifier() {
      return this.verifier;
    }

    public void setVerifier(String verifier) {
      this.verifier = verifier;
    }

    public void unsetVerifier() {
      this.verifier = null;
    }

    /** Returns true if field verifier is set (has been assigned a value) and false otherwise */
    public boolean isSetVerifier() {
      return this.verifier != null;
    }

    public void setVerifierIsSet(boolean value) {
      if (!value) {
        this.verifier = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkUserAgeWithDocomo_args)
        return this.equals((checkUserAgeWithDocomo_args)that);
      return false;
    }

    public boolean equals(checkUserAgeWithDocomo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_openIdRedirectUrl = true && this.isSetOpenIdRedirectUrl();
      boolean that_present_openIdRedirectUrl = true && that.isSetOpenIdRedirectUrl();
      if (this_present_openIdRedirectUrl || that_present_openIdRedirectUrl) {
        if (!(this_present_openIdRedirectUrl && that_present_openIdRedirectUrl))
          return false;
        if (!this.openIdRedirectUrl.equals(that.openIdRedirectUrl))
          return false;
      }

      boolean this_present_standardAge = true;
      boolean that_present_standardAge = true;
      if (this_present_standardAge || that_present_standardAge) {
        if (!(this_present_standardAge && that_present_standardAge))
          return false;
        if (this.standardAge != that.standardAge)
          return false;
      }

      boolean this_present_verifier = true && this.isSetVerifier();
      boolean that_present_verifier = true && that.isSetVerifier();
      if (this_present_verifier || that_present_verifier) {
        if (!(this_present_verifier && that_present_verifier))
          return false;
        if (!this.verifier.equals(that.verifier))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      checkUserAgeWithDocomo_args other = (checkUserAgeWithDocomo_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetOpenIdRedirectUrl(), other.isSetOpenIdRedirectUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOpenIdRedirectUrl()) {
        lastComparison = TBaseHelper.compareTo(this.openIdRedirectUrl, other.openIdRedirectUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetStandardAge(), other.isSetStandardAge());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStandardAge()) {
        lastComparison = TBaseHelper.compareTo(this.standardAge, other.standardAge);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetVerifier(), other.isSetVerifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVerifier()) {
        lastComparison = TBaseHelper.compareTo(this.verifier, other.verifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // OPEN_ID_REDIRECT_URL
            if (field.type == TType.STRING) {
              this.openIdRedirectUrl = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // STANDARD_AGE
            if (field.type == TType.I32) {
              this.standardAge = iprot.readI32();
              setStandardAgeIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // VERIFIER
            if (field.type == TType.STRING) {
              this.verifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.openIdRedirectUrl != null) {
        oprot.writeFieldBegin(OPEN_ID_REDIRECT_URL_FIELD_DESC);
        oprot.writeString(this.openIdRedirectUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STANDARD_AGE_FIELD_DESC);
      oprot.writeI32(this.standardAge);
      oprot.writeFieldEnd();
      if (this.verifier != null) {
        oprot.writeFieldBegin(VERIFIER_FIELD_DESC);
        oprot.writeString(this.verifier);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("checkUserAgeWithDocomo_args(");
      boolean first = true;

      sb.append("openIdRedirectUrl:");
      if (this.openIdRedirectUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.openIdRedirectUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("standardAge:");
      sb.append(this.standardAge);
      first = false;
      if (!first) sb.append(", ");
      sb.append("verifier:");
      if (this.verifier == null) {
        sb.append("null");
      } else {
        sb.append(this.verifier);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class checkUserAgeWithDocomo_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("checkUserAgeWithDocomo_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private AgeCheckDocomoResult success;
    private TalkException e;

    // isset id assignments

    public checkUserAgeWithDocomo_result() {
    }

    public checkUserAgeWithDocomo_result(
      AgeCheckDocomoResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkUserAgeWithDocomo_result(checkUserAgeWithDocomo_result other) {
      if (other.isSetSuccess()) {
        this.success = new AgeCheckDocomoResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public checkUserAgeWithDocomo_result deepCopy() {
      return new checkUserAgeWithDocomo_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public AgeCheckDocomoResult getSuccess() {
      return this.success;
    }

    public void setSuccess(AgeCheckDocomoResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkUserAgeWithDocomo_result)
        return this.equals((checkUserAgeWithDocomo_result)that);
      return false;
    }

    public boolean equals(checkUserAgeWithDocomo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      checkUserAgeWithDocomo_result other = (checkUserAgeWithDocomo_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new AgeCheckDocomoResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("checkUserAgeWithDocomo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class retrieveOpenIdAuthUrlWithDocomo_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("retrieveOpenIdAuthUrlWithDocomo_args");


    public retrieveOpenIdAuthUrlWithDocomo_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveOpenIdAuthUrlWithDocomo_args(retrieveOpenIdAuthUrlWithDocomo_args other) {
    }

    public retrieveOpenIdAuthUrlWithDocomo_args deepCopy() {
      return new retrieveOpenIdAuthUrlWithDocomo_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveOpenIdAuthUrlWithDocomo_args)
        return this.equals((retrieveOpenIdAuthUrlWithDocomo_args)that);
      return false;
    }

    public boolean equals(retrieveOpenIdAuthUrlWithDocomo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      retrieveOpenIdAuthUrlWithDocomo_args other = (retrieveOpenIdAuthUrlWithDocomo_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("retrieveOpenIdAuthUrlWithDocomo_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class retrieveOpenIdAuthUrlWithDocomo_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("retrieveOpenIdAuthUrlWithDocomo_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public retrieveOpenIdAuthUrlWithDocomo_result() {
    }

    public retrieveOpenIdAuthUrlWithDocomo_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveOpenIdAuthUrlWithDocomo_result(retrieveOpenIdAuthUrlWithDocomo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public retrieveOpenIdAuthUrlWithDocomo_result deepCopy() {
      return new retrieveOpenIdAuthUrlWithDocomo_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveOpenIdAuthUrlWithDocomo_result)
        return this.equals((retrieveOpenIdAuthUrlWithDocomo_result)that);
      return false;
    }

    public boolean equals(retrieveOpenIdAuthUrlWithDocomo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      retrieveOpenIdAuthUrlWithDocomo_result other = (retrieveOpenIdAuthUrlWithDocomo_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("retrieveOpenIdAuthUrlWithDocomo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class retrieveRequestToken_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("retrieveRequestToken_args");

    private static final TField CARRIER_FIELD_DESC = new TField("carrier", TType.I32, (short)2);

    private CarrierCode carrier;

    // isset id assignments

    public retrieveRequestToken_args() {
    }

    public retrieveRequestToken_args(
      CarrierCode carrier)
    {
      this();
      this.carrier = carrier;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveRequestToken_args(retrieveRequestToken_args other) {
      if (other.isSetCarrier()) {
        this.carrier = other.carrier;
      }
    }

    public retrieveRequestToken_args deepCopy() {
      return new retrieveRequestToken_args(this);
    }

    public void clear() {
      this.carrier = null;
    }

    /**
     * 
     * @see CarrierCode
     */
    public CarrierCode getCarrier() {
      return this.carrier;
    }

    /**
     * 
     * @see CarrierCode
     */
    public void setCarrier(CarrierCode carrier) {
      this.carrier = carrier;
    }

    public void unsetCarrier() {
      this.carrier = null;
    }

    /** Returns true if field carrier is set (has been assigned a value) and false otherwise */
    public boolean isSetCarrier() {
      return this.carrier != null;
    }

    public void setCarrierIsSet(boolean value) {
      if (!value) {
        this.carrier = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveRequestToken_args)
        return this.equals((retrieveRequestToken_args)that);
      return false;
    }

    public boolean equals(retrieveRequestToken_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_carrier = true && this.isSetCarrier();
      boolean that_present_carrier = true && that.isSetCarrier();
      if (this_present_carrier || that_present_carrier) {
        if (!(this_present_carrier && that_present_carrier))
          return false;
        if (!this.carrier.equals(that.carrier))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      retrieveRequestToken_args other = (retrieveRequestToken_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetCarrier(), other.isSetCarrier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCarrier()) {
        lastComparison = TBaseHelper.compareTo(this.carrier, other.carrier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // CARRIER
            if (field.type == TType.I32) {
              this.carrier = CarrierCode.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.carrier != null) {
        oprot.writeFieldBegin(CARRIER_FIELD_DESC);
        oprot.writeI32(this.carrier.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("retrieveRequestToken_args(");
      boolean first = true;

      sb.append("carrier:");
      if (this.carrier == null) {
        sb.append("null");
      } else {
        sb.append(this.carrier);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class retrieveRequestToken_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("retrieveRequestToken_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private AgeCheckRequestResult success;
    private TalkException e;

    // isset id assignments

    public retrieveRequestToken_result() {
    }

    public retrieveRequestToken_result(
      AgeCheckRequestResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveRequestToken_result(retrieveRequestToken_result other) {
      if (other.isSetSuccess()) {
        this.success = new AgeCheckRequestResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public retrieveRequestToken_result deepCopy() {
      return new retrieveRequestToken_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public AgeCheckRequestResult getSuccess() {
      return this.success;
    }

    public void setSuccess(AgeCheckRequestResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveRequestToken_result)
        return this.equals((retrieveRequestToken_result)that);
      return false;
    }

    public boolean equals(retrieveRequestToken_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      retrieveRequestToken_result other = (retrieveRequestToken_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new AgeCheckRequestResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("retrieveRequestToken_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
