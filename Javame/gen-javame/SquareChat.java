/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class SquareChat implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("SquareChat");

  private static final TField SQUARE_CHAT_MID_FIELD_DESC = new TField("squareChatMid", TType.STRING, (short)1);
  private static final TField SQUARE_MID_FIELD_DESC = new TField("squareMid", TType.STRING, (short)2);
  private static final TField TYPE_FIELD_DESC = new TField("type", TType.I32, (short)3);
  private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)4);
  private static final TField CHAT_IMAGE_OBS_HASH_FIELD_DESC = new TField("chatImageObsHash", TType.STRING, (short)5);
  private static final TField SQUARE_CHAT_REVISION_FIELD_DESC = new TField("squareChatRevision", TType.I64, (short)6);
  private static final TField MAX_MEMBER_COUNT_FIELD_DESC = new TField("maxMemberCount", TType.I32, (short)7);
  private static final TField STATE_FIELD_DESC = new TField("state", TType.I32, (short)8);

  private String squareChatMid;
  private String squareMid;
  private SquareChatType type;
  private String name;
  private String chatImageObsHash;
  private long squareChatRevision;
  private int maxMemberCount;
  private SquareChatState state;

  // isset id assignments
  private static final int __SQUARECHATREVISION_ISSET_ID = 0;
  private static final int __MAXMEMBERCOUNT_ISSET_ID = 1;
  private boolean[] __isset_vector = new boolean[2];

  public SquareChat() {
  }

  public SquareChat(
    String squareChatMid,
    String squareMid,
    SquareChatType type,
    String name,
    String chatImageObsHash,
    long squareChatRevision,
    int maxMemberCount,
    SquareChatState state)
  {
    this();
    this.squareChatMid = squareChatMid;
    this.squareMid = squareMid;
    this.type = type;
    this.name = name;
    this.chatImageObsHash = chatImageObsHash;
    this.squareChatRevision = squareChatRevision;
    setSquareChatRevisionIsSet(true);
    this.maxMemberCount = maxMemberCount;
    setMaxMemberCountIsSet(true);
    this.state = state;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SquareChat(SquareChat other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    if (other.isSetSquareChatMid()) {
      this.squareChatMid = other.squareChatMid;
    }
    if (other.isSetSquareMid()) {
      this.squareMid = other.squareMid;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetChatImageObsHash()) {
      this.chatImageObsHash = other.chatImageObsHash;
    }
    this.squareChatRevision = other.squareChatRevision;
    this.maxMemberCount = other.maxMemberCount;
    if (other.isSetState()) {
      this.state = other.state;
    }
  }

  public SquareChat deepCopy() {
    return new SquareChat(this);
  }

  public void clear() {
    this.squareChatMid = null;
    this.squareMid = null;
    this.type = null;
    this.name = null;
    this.chatImageObsHash = null;
    setSquareChatRevisionIsSet(false);
    this.squareChatRevision = 0;
    setMaxMemberCountIsSet(false);
    this.maxMemberCount = 0;
    this.state = null;
  }

  public String getSquareChatMid() {
    return this.squareChatMid;
  }

  public void setSquareChatMid(String squareChatMid) {
    this.squareChatMid = squareChatMid;
  }

  public void unsetSquareChatMid() {
    this.squareChatMid = null;
  }

  /** Returns true if field squareChatMid is set (has been assigned a value) and false otherwise */
  public boolean isSetSquareChatMid() {
    return this.squareChatMid != null;
  }

  public void setSquareChatMidIsSet(boolean value) {
    if (!value) {
      this.squareChatMid = null;
    }
  }

  public String getSquareMid() {
    return this.squareMid;
  }

  public void setSquareMid(String squareMid) {
    this.squareMid = squareMid;
  }

  public void unsetSquareMid() {
    this.squareMid = null;
  }

  /** Returns true if field squareMid is set (has been assigned a value) and false otherwise */
  public boolean isSetSquareMid() {
    return this.squareMid != null;
  }

  public void setSquareMidIsSet(boolean value) {
    if (!value) {
      this.squareMid = null;
    }
  }

  /**
   * 
   * @see SquareChatType
   */
  public SquareChatType getType() {
    return this.type;
  }

  /**
   * 
   * @see SquareChatType
   */
  public void setType(SquareChatType type) {
    this.type = type;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getChatImageObsHash() {
    return this.chatImageObsHash;
  }

  public void setChatImageObsHash(String chatImageObsHash) {
    this.chatImageObsHash = chatImageObsHash;
  }

  public void unsetChatImageObsHash() {
    this.chatImageObsHash = null;
  }

  /** Returns true if field chatImageObsHash is set (has been assigned a value) and false otherwise */
  public boolean isSetChatImageObsHash() {
    return this.chatImageObsHash != null;
  }

  public void setChatImageObsHashIsSet(boolean value) {
    if (!value) {
      this.chatImageObsHash = null;
    }
  }

  public long getSquareChatRevision() {
    return this.squareChatRevision;
  }

  public void setSquareChatRevision(long squareChatRevision) {
    this.squareChatRevision = squareChatRevision;
    setSquareChatRevisionIsSet(true);
  }

  public void unsetSquareChatRevision() {
    __isset_vector[__SQUARECHATREVISION_ISSET_ID] = false;
  }

  /** Returns true if field squareChatRevision is set (has been assigned a value) and false otherwise */
  public boolean isSetSquareChatRevision() {
    return __isset_vector[__SQUARECHATREVISION_ISSET_ID];
  }

  public void setSquareChatRevisionIsSet(boolean value) {
    __isset_vector[__SQUARECHATREVISION_ISSET_ID] = value;
  }

  public int getMaxMemberCount() {
    return this.maxMemberCount;
  }

  public void setMaxMemberCount(int maxMemberCount) {
    this.maxMemberCount = maxMemberCount;
    setMaxMemberCountIsSet(true);
  }

  public void unsetMaxMemberCount() {
    __isset_vector[__MAXMEMBERCOUNT_ISSET_ID] = false;
  }

  /** Returns true if field maxMemberCount is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxMemberCount() {
    return __isset_vector[__MAXMEMBERCOUNT_ISSET_ID];
  }

  public void setMaxMemberCountIsSet(boolean value) {
    __isset_vector[__MAXMEMBERCOUNT_ISSET_ID] = value;
  }

  /**
   * 
   * @see SquareChatState
   */
  public SquareChatState getState() {
    return this.state;
  }

  /**
   * 
   * @see SquareChatState
   */
  public void setState(SquareChatState state) {
    this.state = state;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SquareChat)
      return this.equals((SquareChat)that);
    return false;
  }

  public boolean equals(SquareChat that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_squareChatMid = true && this.isSetSquareChatMid();
    boolean that_present_squareChatMid = true && that.isSetSquareChatMid();
    if (this_present_squareChatMid || that_present_squareChatMid) {
      if (!(this_present_squareChatMid && that_present_squareChatMid))
        return false;
      if (!this.squareChatMid.equals(that.squareChatMid))
        return false;
    }

    boolean this_present_squareMid = true && this.isSetSquareMid();
    boolean that_present_squareMid = true && that.isSetSquareMid();
    if (this_present_squareMid || that_present_squareMid) {
      if (!(this_present_squareMid && that_present_squareMid))
        return false;
      if (!this.squareMid.equals(that.squareMid))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_chatImageObsHash = true && this.isSetChatImageObsHash();
    boolean that_present_chatImageObsHash = true && that.isSetChatImageObsHash();
    if (this_present_chatImageObsHash || that_present_chatImageObsHash) {
      if (!(this_present_chatImageObsHash && that_present_chatImageObsHash))
        return false;
      if (!this.chatImageObsHash.equals(that.chatImageObsHash))
        return false;
    }

    boolean this_present_squareChatRevision = true;
    boolean that_present_squareChatRevision = true;
    if (this_present_squareChatRevision || that_present_squareChatRevision) {
      if (!(this_present_squareChatRevision && that_present_squareChatRevision))
        return false;
      if (this.squareChatRevision != that.squareChatRevision)
        return false;
    }

    boolean this_present_maxMemberCount = true;
    boolean that_present_maxMemberCount = true;
    if (this_present_maxMemberCount || that_present_maxMemberCount) {
      if (!(this_present_maxMemberCount && that_present_maxMemberCount))
        return false;
      if (this.maxMemberCount != that.maxMemberCount)
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    SquareChat other = (SquareChat)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetSquareChatMid(), other.isSetSquareChatMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSquareChatMid()) {
      lastComparison = TBaseHelper.compareTo(this.squareChatMid, other.squareChatMid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSquareMid(), other.isSetSquareMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSquareMid()) {
      lastComparison = TBaseHelper.compareTo(this.squareMid, other.squareMid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetType(), other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetName(), other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetChatImageObsHash(), other.isSetChatImageObsHash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChatImageObsHash()) {
      lastComparison = TBaseHelper.compareTo(this.chatImageObsHash, other.chatImageObsHash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSquareChatRevision(), other.isSetSquareChatRevision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSquareChatRevision()) {
      lastComparison = TBaseHelper.compareTo(this.squareChatRevision, other.squareChatRevision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetMaxMemberCount(), other.isSetMaxMemberCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxMemberCount()) {
      lastComparison = TBaseHelper.compareTo(this.maxMemberCount, other.maxMemberCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetState(), other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // SQUARE_CHAT_MID
          if (field.type == TType.STRING) {
            this.squareChatMid = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SQUARE_MID
          if (field.type == TType.STRING) {
            this.squareMid = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // TYPE
          if (field.type == TType.I32) {
            this.type = SquareChatType.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // NAME
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // CHAT_IMAGE_OBS_HASH
          if (field.type == TType.STRING) {
            this.chatImageObsHash = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // SQUARE_CHAT_REVISION
          if (field.type == TType.I64) {
            this.squareChatRevision = iprot.readI64();
            setSquareChatRevisionIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // MAX_MEMBER_COUNT
          if (field.type == TType.I32) {
            this.maxMemberCount = iprot.readI32();
            setMaxMemberCountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // STATE
          if (field.type == TType.I32) {
            this.state = SquareChatState.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.squareChatMid != null) {
      oprot.writeFieldBegin(SQUARE_CHAT_MID_FIELD_DESC);
      oprot.writeString(this.squareChatMid);
      oprot.writeFieldEnd();
    }
    if (this.squareMid != null) {
      oprot.writeFieldBegin(SQUARE_MID_FIELD_DESC);
      oprot.writeString(this.squareMid);
      oprot.writeFieldEnd();
    }
    if (this.type != null) {
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(this.type.getValue());
      oprot.writeFieldEnd();
    }
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.chatImageObsHash != null) {
      oprot.writeFieldBegin(CHAT_IMAGE_OBS_HASH_FIELD_DESC);
      oprot.writeString(this.chatImageObsHash);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SQUARE_CHAT_REVISION_FIELD_DESC);
    oprot.writeI64(this.squareChatRevision);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(MAX_MEMBER_COUNT_FIELD_DESC);
    oprot.writeI32(this.maxMemberCount);
    oprot.writeFieldEnd();
    if (this.state != null) {
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeI32(this.state.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("SquareChat(");
    boolean first = true;

    sb.append("squareChatMid:");
    if (this.squareChatMid == null) {
      sb.append("null");
    } else {
      sb.append(this.squareChatMid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("squareMid:");
    if (this.squareMid == null) {
      sb.append("null");
    } else {
      sb.append(this.squareMid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chatImageObsHash:");
    if (this.chatImageObsHash == null) {
      sb.append("null");
    } else {
      sb.append(this.chatImageObsHash);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("squareChatRevision:");
    sb.append(this.squareChatRevision);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxMemberCount:");
    sb.append(this.maxMemberCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

