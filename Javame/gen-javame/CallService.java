/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class CallService {

  public interface Iface {

    public UserStatus getUserStatus(String mid) throws TalkException, TException;

    public void updateProfileAttributeForChannel(ProfileAttribute profileAttribute, String value) throws TalkException, TException;

    public void updateExtendedProfileAttribute(ExtendedProfileAttribute attr, ExtendedProfile extendedProfile) throws TalkException, TException;

    public Vector getAllSimpleChannelContacts(boolean statusSticonFallbackDisabled) throws TalkException, TException;

    public Hashtable getUserIdentities() throws TalkException, TException;

    public PaidCallDialing markPaidCallAd(String dialedNumber, String language, boolean disableCallerId) throws TalkException, TException;

    public boolean isGroupMember(String groupId) throws TalkException, TException;

    public PhoneInfoForChannel getPhoneInfoFromPhoneNumber(String region, String phoneNumber) throws TalkException, TException;

    public PaidCallRedeemResult redeemPaidCallVoucher(String serial, String language) throws TalkException, TException;

    public Hashtable getPreferredDisplayName(Vector mids) throws TalkException, TException;

    public Vector getContactsForChannel(Vector ids) throws TalkException, TException;

    public Vector getCallCreditProducts(PaymentType appStoreCode, PaymentPgType pgCode, String country, String language) throws TalkException, TException;

    public Vector getCompactContacts(long lastModifiedTimestamp) throws TalkException, TException;

    public void notifyNotiCenterEvent(NotiCenterEventData event) throws TalkException, TException;

    public boolean isInContact(String mid) throws TalkException, TException;

    public Vector lookupGroupMembers(String groupId, Vector mids) throws TalkException, TException;

    public Room getRoomInformation(String roomMid) throws TalkException, TException;

    public GroupCall getGroupCall(String chatMid) throws TalkException, TException;

    public boolean isAllowSecondaryDeviceLogin() throws TalkException, TException;

    public SimpleChannelClient getPrimaryClientForChannel() throws TalkException, TException;

    public Room createRoomWithBuddy(int reqSeq, String buddyMid, Vector contactIds) throws TalkException, TException;

    public String getDisplayName(String mid) throws TalkException, TException;

    public PaidCallMetadataResult getPaidCallMetadata(String language) throws TalkException, TException;

    public String getMid() throws TalkException, TException;

    public String getUserCountryForBilling(String country, String remoteIp) throws TalkException, TException;

    public Vector getFavoriteGroupIdsForChannel() throws TalkException, TException;

    public PaidCallHistoryResult getPaidCallHistory(long start, int size, String language) throws TalkException, TException;

    public void sendPinCodeOperation(String verifier) throws TalkException, TException;

    public void inviteIntoGroupCall(String chatMid, Vector memberMids, GroupCallMediaType mediaType) throws TalkException, TException;

    public Vector getFriendMids() throws TalkException, TException;

    public MetaProfile getMetaProfile() throws TalkException, TException;

    public Message sendMessageForChannel(Message message) throws TalkException, TException;

    public long activeBuddySubscriberCount() throws TalkException, TException;

    public CoinHistoryResult getCallCreditPurchaseHistory(CoinHistoryCondition request) throws TalkException, TException;

    public boolean isRoomMember(String roomId) throws TalkException, TException;

    public Message sendSystemOAMessage(Message message) throws TalkException, TException;

    public PaidCallResponse acquirePaidCallRoute(PaidCallType paidCallType, String dialedNumber, String language, String networkCode, boolean disableCallerId, String referer, String adSessionId) throws TalkException, TException;

    public Vector getGroupsForChannel(Vector groupIds) throws TalkException, TException;

    public long getUserCreateTime() throws TalkException, TException;

    public String registerChannelCP(String cpId, String registerPassword) throws TalkException, TException;

    public PaymentReservationResult reserveCallCreditPurchase(CoinPurchaseReservation request) throws TalkException, TException;

    public Vector acquirePaidCallCurrencyExchangeRate(String language) throws TalkException, TException;

    public Vector getRoomMemberMidsForAppPlatform(String roomId) throws TalkException, TException;

    public Vector getPaidCallBalanceList(String language) throws TalkException, TException;

    public Hashtable getPersonalInfos(Hashtable requiredPersonalInfos) throws TalkException, TException;

    public Vector getPrimaryClientsForChannel(Vector userMids) throws TalkException, TException;

    public ContactTransition addBuddyToContact(String buddyMid) throws TalkException, TException;

    public Vector getGroupMemberMidsForAppPlatform(String groupId) throws TalkException, TException;

    public String getUserLanguage() throws TalkException, TException;

    public PaidCallResponse lookupPaidCall(String dialedNumber, String language, String referer) throws TalkException, TException;

    public ExtendedProfile getExtendedProfile() throws TalkException, TException;

    public Hashtable getReverseCompactContacts(Vector ids) throws TalkException, TException;

    public PaidCallAdResult getPaidCallAdStatus() throws TalkException, TException;

    public Contact findContactByUseridWithoutAbuseBlockForChannel(String userid) throws TalkException, TException;

    public Vector getGroupMemberMids(String groupId) throws TalkException, TException;

    public Message sendMessageWithoutRelationship(Message message) throws TalkException, TException;

    public Hashtable displayBuddySubscriberCountInBulk(Vector mids) throws TalkException, TException;

    public Vector lookupRoomMembers(String roomId, Vector mids) throws TalkException, TException;

    public Vector getFavoriteMidsForChannel() throws TalkException, TException;

    public Vector getAllContactIdsForChannel() throws TalkException, TException;

    public long displayBuddySubscriberCount() throws TalkException, TException;

    public Profile getProfileForChannel() throws TalkException, TException;

    public Vector getUserTickets(Vector userMids) throws TalkException, TException;

    public Vector getOAFriendMids() throws TalkException, TException;

    public Vector searchPaidCallUserRate(String countryCode, String language) throws TalkException, TException;

    public Vector getJoinedGroupIdsForChannel() throws TalkException, TException;

    public GroupCallRoute acquireGroupCallRoute(String chatMid, GroupCallMediaType mediaType) throws TalkException, TException;

    public Vector getUserMidsWhoAddedMe() throws TalkException, TException;

    public IdentityCredential getIdentityCredential() throws TalkException, TException;

    public void addOperationForChannel(OpType opType, String param1, String param2, String param3) throws TalkException, TException;

    public Vector getSimpleChannelContacts(Vector ids, boolean statusSticonFallbackDisabled) throws TalkException, TException;

    public long getUserLastSentMessageTimeStamp(String mid) throws TalkException, TException;

  }

  public static class Client implements TServiceClient, Iface {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public UserStatus getUserStatus(String mid) throws TalkException, TException
    {
      send_getUserStatus(mid);
      return recv_getUserStatus();
    }

    public void send_getUserStatus(String mid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getUserStatus", TMessageType.CALL, ++seqid_));
      getUserStatus_args args = new getUserStatus_args();
      args.setMid(mid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public UserStatus recv_getUserStatus() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getUserStatus failed: out of sequence response");
      }
      getUserStatus_result result = new getUserStatus_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getUserStatus failed: unknown result");
    }

    public void updateProfileAttributeForChannel(ProfileAttribute profileAttribute, String value) throws TalkException, TException
    {
      send_updateProfileAttributeForChannel(profileAttribute, value);
      recv_updateProfileAttributeForChannel();
    }

    public void send_updateProfileAttributeForChannel(ProfileAttribute profileAttribute, String value) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateProfileAttributeForChannel", TMessageType.CALL, ++seqid_));
      updateProfileAttributeForChannel_args args = new updateProfileAttributeForChannel_args();
      args.setProfileAttribute(profileAttribute);
      args.setValue(value);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_updateProfileAttributeForChannel() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateProfileAttributeForChannel failed: out of sequence response");
      }
      updateProfileAttributeForChannel_result result = new updateProfileAttributeForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void updateExtendedProfileAttribute(ExtendedProfileAttribute attr, ExtendedProfile extendedProfile) throws TalkException, TException
    {
      send_updateExtendedProfileAttribute(attr, extendedProfile);
      recv_updateExtendedProfileAttribute();
    }

    public void send_updateExtendedProfileAttribute(ExtendedProfileAttribute attr, ExtendedProfile extendedProfile) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateExtendedProfileAttribute", TMessageType.CALL, ++seqid_));
      updateExtendedProfileAttribute_args args = new updateExtendedProfileAttribute_args();
      args.setAttr(attr);
      args.setExtendedProfile(extendedProfile);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_updateExtendedProfileAttribute() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateExtendedProfileAttribute failed: out of sequence response");
      }
      updateExtendedProfileAttribute_result result = new updateExtendedProfileAttribute_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public Vector getAllSimpleChannelContacts(boolean statusSticonFallbackDisabled) throws TalkException, TException
    {
      send_getAllSimpleChannelContacts(statusSticonFallbackDisabled);
      return recv_getAllSimpleChannelContacts();
    }

    public void send_getAllSimpleChannelContacts(boolean statusSticonFallbackDisabled) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getAllSimpleChannelContacts", TMessageType.CALL, ++seqid_));
      getAllSimpleChannelContacts_args args = new getAllSimpleChannelContacts_args();
      args.setStatusSticonFallbackDisabled(statusSticonFallbackDisabled);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getAllSimpleChannelContacts() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getAllSimpleChannelContacts failed: out of sequence response");
      }
      getAllSimpleChannelContacts_result result = new getAllSimpleChannelContacts_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getAllSimpleChannelContacts failed: unknown result");
    }

    public Hashtable getUserIdentities() throws TalkException, TException
    {
      send_getUserIdentities();
      return recv_getUserIdentities();
    }

    public void send_getUserIdentities() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getUserIdentities", TMessageType.CALL, ++seqid_));
      getUserIdentities_args args = new getUserIdentities_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Hashtable recv_getUserIdentities() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getUserIdentities failed: out of sequence response");
      }
      getUserIdentities_result result = new getUserIdentities_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getUserIdentities failed: unknown result");
    }

    public PaidCallDialing markPaidCallAd(String dialedNumber, String language, boolean disableCallerId) throws TalkException, TException
    {
      send_markPaidCallAd(dialedNumber, language, disableCallerId);
      return recv_markPaidCallAd();
    }

    public void send_markPaidCallAd(String dialedNumber, String language, boolean disableCallerId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("markPaidCallAd", TMessageType.CALL, ++seqid_));
      markPaidCallAd_args args = new markPaidCallAd_args();
      args.setDialedNumber(dialedNumber);
      args.setLanguage(language);
      args.setDisableCallerId(disableCallerId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public PaidCallDialing recv_markPaidCallAd() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "markPaidCallAd failed: out of sequence response");
      }
      markPaidCallAd_result result = new markPaidCallAd_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "markPaidCallAd failed: unknown result");
    }

    public boolean isGroupMember(String groupId) throws TalkException, TException
    {
      send_isGroupMember(groupId);
      return recv_isGroupMember();
    }

    public void send_isGroupMember(String groupId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("isGroupMember", TMessageType.CALL, ++seqid_));
      isGroupMember_args args = new isGroupMember_args();
      args.setGroupId(groupId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_isGroupMember() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "isGroupMember failed: out of sequence response");
      }
      isGroupMember_result result = new isGroupMember_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "isGroupMember failed: unknown result");
    }

    public PhoneInfoForChannel getPhoneInfoFromPhoneNumber(String region, String phoneNumber) throws TalkException, TException
    {
      send_getPhoneInfoFromPhoneNumber(region, phoneNumber);
      return recv_getPhoneInfoFromPhoneNumber();
    }

    public void send_getPhoneInfoFromPhoneNumber(String region, String phoneNumber) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getPhoneInfoFromPhoneNumber", TMessageType.CALL, ++seqid_));
      getPhoneInfoFromPhoneNumber_args args = new getPhoneInfoFromPhoneNumber_args();
      args.setRegion(region);
      args.setPhoneNumber(phoneNumber);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public PhoneInfoForChannel recv_getPhoneInfoFromPhoneNumber() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getPhoneInfoFromPhoneNumber failed: out of sequence response");
      }
      getPhoneInfoFromPhoneNumber_result result = new getPhoneInfoFromPhoneNumber_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getPhoneInfoFromPhoneNumber failed: unknown result");
    }

    public PaidCallRedeemResult redeemPaidCallVoucher(String serial, String language) throws TalkException, TException
    {
      send_redeemPaidCallVoucher(serial, language);
      return recv_redeemPaidCallVoucher();
    }

    public void send_redeemPaidCallVoucher(String serial, String language) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("redeemPaidCallVoucher", TMessageType.CALL, ++seqid_));
      redeemPaidCallVoucher_args args = new redeemPaidCallVoucher_args();
      args.setSerial(serial);
      args.setLanguage(language);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public PaidCallRedeemResult recv_redeemPaidCallVoucher() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "redeemPaidCallVoucher failed: out of sequence response");
      }
      redeemPaidCallVoucher_result result = new redeemPaidCallVoucher_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "redeemPaidCallVoucher failed: unknown result");
    }

    public Hashtable getPreferredDisplayName(Vector mids) throws TalkException, TException
    {
      send_getPreferredDisplayName(mids);
      return recv_getPreferredDisplayName();
    }

    public void send_getPreferredDisplayName(Vector mids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getPreferredDisplayName", TMessageType.CALL, ++seqid_));
      getPreferredDisplayName_args args = new getPreferredDisplayName_args();
      args.setMids(mids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Hashtable recv_getPreferredDisplayName() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getPreferredDisplayName failed: out of sequence response");
      }
      getPreferredDisplayName_result result = new getPreferredDisplayName_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getPreferredDisplayName failed: unknown result");
    }

    public Vector getContactsForChannel(Vector ids) throws TalkException, TException
    {
      send_getContactsForChannel(ids);
      return recv_getContactsForChannel();
    }

    public void send_getContactsForChannel(Vector ids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getContactsForChannel", TMessageType.CALL, ++seqid_));
      getContactsForChannel_args args = new getContactsForChannel_args();
      args.setIds(ids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getContactsForChannel() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getContactsForChannel failed: out of sequence response");
      }
      getContactsForChannel_result result = new getContactsForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getContactsForChannel failed: unknown result");
    }

    public Vector getCallCreditProducts(PaymentType appStoreCode, PaymentPgType pgCode, String country, String language) throws TalkException, TException
    {
      send_getCallCreditProducts(appStoreCode, pgCode, country, language);
      return recv_getCallCreditProducts();
    }

    public void send_getCallCreditProducts(PaymentType appStoreCode, PaymentPgType pgCode, String country, String language) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getCallCreditProducts", TMessageType.CALL, ++seqid_));
      getCallCreditProducts_args args = new getCallCreditProducts_args();
      args.setAppStoreCode(appStoreCode);
      args.setPgCode(pgCode);
      args.setCountry(country);
      args.setLanguage(language);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getCallCreditProducts() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getCallCreditProducts failed: out of sequence response");
      }
      getCallCreditProducts_result result = new getCallCreditProducts_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getCallCreditProducts failed: unknown result");
    }

    public Vector getCompactContacts(long lastModifiedTimestamp) throws TalkException, TException
    {
      send_getCompactContacts(lastModifiedTimestamp);
      return recv_getCompactContacts();
    }

    public void send_getCompactContacts(long lastModifiedTimestamp) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getCompactContacts", TMessageType.CALL, ++seqid_));
      getCompactContacts_args args = new getCompactContacts_args();
      args.setLastModifiedTimestamp(lastModifiedTimestamp);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getCompactContacts() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getCompactContacts failed: out of sequence response");
      }
      getCompactContacts_result result = new getCompactContacts_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getCompactContacts failed: unknown result");
    }

    public void notifyNotiCenterEvent(NotiCenterEventData event) throws TalkException, TException
    {
      send_notifyNotiCenterEvent(event);
      recv_notifyNotiCenterEvent();
    }

    public void send_notifyNotiCenterEvent(NotiCenterEventData event) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("notifyNotiCenterEvent", TMessageType.CALL, ++seqid_));
      notifyNotiCenterEvent_args args = new notifyNotiCenterEvent_args();
      args.setEvent(event);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_notifyNotiCenterEvent() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "notifyNotiCenterEvent failed: out of sequence response");
      }
      notifyNotiCenterEvent_result result = new notifyNotiCenterEvent_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public boolean isInContact(String mid) throws TalkException, TException
    {
      send_isInContact(mid);
      return recv_isInContact();
    }

    public void send_isInContact(String mid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("isInContact", TMessageType.CALL, ++seqid_));
      isInContact_args args = new isInContact_args();
      args.setMid(mid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_isInContact() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "isInContact failed: out of sequence response");
      }
      isInContact_result result = new isInContact_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "isInContact failed: unknown result");
    }

    public Vector lookupGroupMembers(String groupId, Vector mids) throws TalkException, TException
    {
      send_lookupGroupMembers(groupId, mids);
      return recv_lookupGroupMembers();
    }

    public void send_lookupGroupMembers(String groupId, Vector mids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lookupGroupMembers", TMessageType.CALL, ++seqid_));
      lookupGroupMembers_args args = new lookupGroupMembers_args();
      args.setGroupId(groupId);
      args.setMids(mids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_lookupGroupMembers() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lookupGroupMembers failed: out of sequence response");
      }
      lookupGroupMembers_result result = new lookupGroupMembers_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lookupGroupMembers failed: unknown result");
    }

    public Room getRoomInformation(String roomMid) throws TalkException, TException
    {
      send_getRoomInformation(roomMid);
      return recv_getRoomInformation();
    }

    public void send_getRoomInformation(String roomMid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getRoomInformation", TMessageType.CALL, ++seqid_));
      getRoomInformation_args args = new getRoomInformation_args();
      args.setRoomMid(roomMid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Room recv_getRoomInformation() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getRoomInformation failed: out of sequence response");
      }
      getRoomInformation_result result = new getRoomInformation_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getRoomInformation failed: unknown result");
    }

    public GroupCall getGroupCall(String chatMid) throws TalkException, TException
    {
      send_getGroupCall(chatMid);
      return recv_getGroupCall();
    }

    public void send_getGroupCall(String chatMid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getGroupCall", TMessageType.CALL, ++seqid_));
      getGroupCall_args args = new getGroupCall_args();
      args.setChatMid(chatMid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public GroupCall recv_getGroupCall() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getGroupCall failed: out of sequence response");
      }
      getGroupCall_result result = new getGroupCall_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getGroupCall failed: unknown result");
    }

    public boolean isAllowSecondaryDeviceLogin() throws TalkException, TException
    {
      send_isAllowSecondaryDeviceLogin();
      return recv_isAllowSecondaryDeviceLogin();
    }

    public void send_isAllowSecondaryDeviceLogin() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("isAllowSecondaryDeviceLogin", TMessageType.CALL, ++seqid_));
      isAllowSecondaryDeviceLogin_args args = new isAllowSecondaryDeviceLogin_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_isAllowSecondaryDeviceLogin() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "isAllowSecondaryDeviceLogin failed: out of sequence response");
      }
      isAllowSecondaryDeviceLogin_result result = new isAllowSecondaryDeviceLogin_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "isAllowSecondaryDeviceLogin failed: unknown result");
    }

    public SimpleChannelClient getPrimaryClientForChannel() throws TalkException, TException
    {
      send_getPrimaryClientForChannel();
      return recv_getPrimaryClientForChannel();
    }

    public void send_getPrimaryClientForChannel() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getPrimaryClientForChannel", TMessageType.CALL, ++seqid_));
      getPrimaryClientForChannel_args args = new getPrimaryClientForChannel_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public SimpleChannelClient recv_getPrimaryClientForChannel() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getPrimaryClientForChannel failed: out of sequence response");
      }
      getPrimaryClientForChannel_result result = new getPrimaryClientForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getPrimaryClientForChannel failed: unknown result");
    }

    public Room createRoomWithBuddy(int reqSeq, String buddyMid, Vector contactIds) throws TalkException, TException
    {
      send_createRoomWithBuddy(reqSeq, buddyMid, contactIds);
      return recv_createRoomWithBuddy();
    }

    public void send_createRoomWithBuddy(int reqSeq, String buddyMid, Vector contactIds) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("createRoomWithBuddy", TMessageType.CALL, ++seqid_));
      createRoomWithBuddy_args args = new createRoomWithBuddy_args();
      args.setReqSeq(reqSeq);
      args.setBuddyMid(buddyMid);
      args.setContactIds(contactIds);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Room recv_createRoomWithBuddy() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "createRoomWithBuddy failed: out of sequence response");
      }
      createRoomWithBuddy_result result = new createRoomWithBuddy_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "createRoomWithBuddy failed: unknown result");
    }

    public String getDisplayName(String mid) throws TalkException, TException
    {
      send_getDisplayName(mid);
      return recv_getDisplayName();
    }

    public void send_getDisplayName(String mid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getDisplayName", TMessageType.CALL, ++seqid_));
      getDisplayName_args args = new getDisplayName_args();
      args.setMid(mid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getDisplayName() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getDisplayName failed: out of sequence response");
      }
      getDisplayName_result result = new getDisplayName_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getDisplayName failed: unknown result");
    }

    public PaidCallMetadataResult getPaidCallMetadata(String language) throws TalkException, TException
    {
      send_getPaidCallMetadata(language);
      return recv_getPaidCallMetadata();
    }

    public void send_getPaidCallMetadata(String language) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getPaidCallMetadata", TMessageType.CALL, ++seqid_));
      getPaidCallMetadata_args args = new getPaidCallMetadata_args();
      args.setLanguage(language);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public PaidCallMetadataResult recv_getPaidCallMetadata() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getPaidCallMetadata failed: out of sequence response");
      }
      getPaidCallMetadata_result result = new getPaidCallMetadata_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getPaidCallMetadata failed: unknown result");
    }

    public String getMid() throws TalkException, TException
    {
      send_getMid();
      return recv_getMid();
    }

    public void send_getMid() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getMid", TMessageType.CALL, ++seqid_));
      getMid_args args = new getMid_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getMid() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getMid failed: out of sequence response");
      }
      getMid_result result = new getMid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getMid failed: unknown result");
    }

    public String getUserCountryForBilling(String country, String remoteIp) throws TalkException, TException
    {
      send_getUserCountryForBilling(country, remoteIp);
      return recv_getUserCountryForBilling();
    }

    public void send_getUserCountryForBilling(String country, String remoteIp) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getUserCountryForBilling", TMessageType.CALL, ++seqid_));
      getUserCountryForBilling_args args = new getUserCountryForBilling_args();
      args.setCountry(country);
      args.setRemoteIp(remoteIp);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getUserCountryForBilling() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getUserCountryForBilling failed: out of sequence response");
      }
      getUserCountryForBilling_result result = new getUserCountryForBilling_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getUserCountryForBilling failed: unknown result");
    }

    public Vector getFavoriteGroupIdsForChannel() throws TalkException, TException
    {
      send_getFavoriteGroupIdsForChannel();
      return recv_getFavoriteGroupIdsForChannel();
    }

    public void send_getFavoriteGroupIdsForChannel() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getFavoriteGroupIdsForChannel", TMessageType.CALL, ++seqid_));
      getFavoriteGroupIdsForChannel_args args = new getFavoriteGroupIdsForChannel_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getFavoriteGroupIdsForChannel() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getFavoriteGroupIdsForChannel failed: out of sequence response");
      }
      getFavoriteGroupIdsForChannel_result result = new getFavoriteGroupIdsForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getFavoriteGroupIdsForChannel failed: unknown result");
    }

    public PaidCallHistoryResult getPaidCallHistory(long start, int size, String language) throws TalkException, TException
    {
      send_getPaidCallHistory(start, size, language);
      return recv_getPaidCallHistory();
    }

    public void send_getPaidCallHistory(long start, int size, String language) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getPaidCallHistory", TMessageType.CALL, ++seqid_));
      getPaidCallHistory_args args = new getPaidCallHistory_args();
      args.setStart(start);
      args.setSize(size);
      args.setLanguage(language);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public PaidCallHistoryResult recv_getPaidCallHistory() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getPaidCallHistory failed: out of sequence response");
      }
      getPaidCallHistory_result result = new getPaidCallHistory_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getPaidCallHistory failed: unknown result");
    }

    public void sendPinCodeOperation(String verifier) throws TalkException, TException
    {
      send_sendPinCodeOperation(verifier);
      recv_sendPinCodeOperation();
    }

    public void send_sendPinCodeOperation(String verifier) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("sendPinCodeOperation", TMessageType.CALL, ++seqid_));
      sendPinCodeOperation_args args = new sendPinCodeOperation_args();
      args.setVerifier(verifier);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_sendPinCodeOperation() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "sendPinCodeOperation failed: out of sequence response");
      }
      sendPinCodeOperation_result result = new sendPinCodeOperation_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void inviteIntoGroupCall(String chatMid, Vector memberMids, GroupCallMediaType mediaType) throws TalkException, TException
    {
      send_inviteIntoGroupCall(chatMid, memberMids, mediaType);
      recv_inviteIntoGroupCall();
    }

    public void send_inviteIntoGroupCall(String chatMid, Vector memberMids, GroupCallMediaType mediaType) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("inviteIntoGroupCall", TMessageType.CALL, ++seqid_));
      inviteIntoGroupCall_args args = new inviteIntoGroupCall_args();
      args.setChatMid(chatMid);
      args.setMemberMids(memberMids);
      args.setMediaType(mediaType);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_inviteIntoGroupCall() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "inviteIntoGroupCall failed: out of sequence response");
      }
      inviteIntoGroupCall_result result = new inviteIntoGroupCall_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public Vector getFriendMids() throws TalkException, TException
    {
      send_getFriendMids();
      return recv_getFriendMids();
    }

    public void send_getFriendMids() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getFriendMids", TMessageType.CALL, ++seqid_));
      getFriendMids_args args = new getFriendMids_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getFriendMids() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getFriendMids failed: out of sequence response");
      }
      getFriendMids_result result = new getFriendMids_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getFriendMids failed: unknown result");
    }

    public MetaProfile getMetaProfile() throws TalkException, TException
    {
      send_getMetaProfile();
      return recv_getMetaProfile();
    }

    public void send_getMetaProfile() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getMetaProfile", TMessageType.CALL, ++seqid_));
      getMetaProfile_args args = new getMetaProfile_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public MetaProfile recv_getMetaProfile() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getMetaProfile failed: out of sequence response");
      }
      getMetaProfile_result result = new getMetaProfile_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getMetaProfile failed: unknown result");
    }

    public Message sendMessageForChannel(Message message) throws TalkException, TException
    {
      send_sendMessageForChannel(message);
      return recv_sendMessageForChannel();
    }

    public void send_sendMessageForChannel(Message message) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("sendMessageForChannel", TMessageType.CALL, ++seqid_));
      sendMessageForChannel_args args = new sendMessageForChannel_args();
      args.setMessage(message);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Message recv_sendMessageForChannel() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "sendMessageForChannel failed: out of sequence response");
      }
      sendMessageForChannel_result result = new sendMessageForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "sendMessageForChannel failed: unknown result");
    }

    public long activeBuddySubscriberCount() throws TalkException, TException
    {
      send_activeBuddySubscriberCount();
      return recv_activeBuddySubscriberCount();
    }

    public void send_activeBuddySubscriberCount() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("activeBuddySubscriberCount", TMessageType.CALL, ++seqid_));
      activeBuddySubscriberCount_args args = new activeBuddySubscriberCount_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public long recv_activeBuddySubscriberCount() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "activeBuddySubscriberCount failed: out of sequence response");
      }
      activeBuddySubscriberCount_result result = new activeBuddySubscriberCount_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "activeBuddySubscriberCount failed: unknown result");
    }

    public CoinHistoryResult getCallCreditPurchaseHistory(CoinHistoryCondition request) throws TalkException, TException
    {
      send_getCallCreditPurchaseHistory(request);
      return recv_getCallCreditPurchaseHistory();
    }

    public void send_getCallCreditPurchaseHistory(CoinHistoryCondition request) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getCallCreditPurchaseHistory", TMessageType.CALL, ++seqid_));
      getCallCreditPurchaseHistory_args args = new getCallCreditPurchaseHistory_args();
      args.setRequest(request);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public CoinHistoryResult recv_getCallCreditPurchaseHistory() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getCallCreditPurchaseHistory failed: out of sequence response");
      }
      getCallCreditPurchaseHistory_result result = new getCallCreditPurchaseHistory_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getCallCreditPurchaseHistory failed: unknown result");
    }

    public boolean isRoomMember(String roomId) throws TalkException, TException
    {
      send_isRoomMember(roomId);
      return recv_isRoomMember();
    }

    public void send_isRoomMember(String roomId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("isRoomMember", TMessageType.CALL, ++seqid_));
      isRoomMember_args args = new isRoomMember_args();
      args.setRoomId(roomId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_isRoomMember() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "isRoomMember failed: out of sequence response");
      }
      isRoomMember_result result = new isRoomMember_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "isRoomMember failed: unknown result");
    }

    public Message sendSystemOAMessage(Message message) throws TalkException, TException
    {
      send_sendSystemOAMessage(message);
      return recv_sendSystemOAMessage();
    }

    public void send_sendSystemOAMessage(Message message) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("sendSystemOAMessage", TMessageType.CALL, ++seqid_));
      sendSystemOAMessage_args args = new sendSystemOAMessage_args();
      args.setMessage(message);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Message recv_sendSystemOAMessage() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "sendSystemOAMessage failed: out of sequence response");
      }
      sendSystemOAMessage_result result = new sendSystemOAMessage_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "sendSystemOAMessage failed: unknown result");
    }

    public PaidCallResponse acquirePaidCallRoute(PaidCallType paidCallType, String dialedNumber, String language, String networkCode, boolean disableCallerId, String referer, String adSessionId) throws TalkException, TException
    {
      send_acquirePaidCallRoute(paidCallType, dialedNumber, language, networkCode, disableCallerId, referer, adSessionId);
      return recv_acquirePaidCallRoute();
    }

    public void send_acquirePaidCallRoute(PaidCallType paidCallType, String dialedNumber, String language, String networkCode, boolean disableCallerId, String referer, String adSessionId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("acquirePaidCallRoute", TMessageType.CALL, ++seqid_));
      acquirePaidCallRoute_args args = new acquirePaidCallRoute_args();
      args.setPaidCallType(paidCallType);
      args.setDialedNumber(dialedNumber);
      args.setLanguage(language);
      args.setNetworkCode(networkCode);
      args.setDisableCallerId(disableCallerId);
      args.setReferer(referer);
      args.setAdSessionId(adSessionId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public PaidCallResponse recv_acquirePaidCallRoute() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "acquirePaidCallRoute failed: out of sequence response");
      }
      acquirePaidCallRoute_result result = new acquirePaidCallRoute_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "acquirePaidCallRoute failed: unknown result");
    }

    public Vector getGroupsForChannel(Vector groupIds) throws TalkException, TException
    {
      send_getGroupsForChannel(groupIds);
      return recv_getGroupsForChannel();
    }

    public void send_getGroupsForChannel(Vector groupIds) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getGroupsForChannel", TMessageType.CALL, ++seqid_));
      getGroupsForChannel_args args = new getGroupsForChannel_args();
      args.setGroupIds(groupIds);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getGroupsForChannel() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getGroupsForChannel failed: out of sequence response");
      }
      getGroupsForChannel_result result = new getGroupsForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getGroupsForChannel failed: unknown result");
    }

    public long getUserCreateTime() throws TalkException, TException
    {
      send_getUserCreateTime();
      return recv_getUserCreateTime();
    }

    public void send_getUserCreateTime() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getUserCreateTime", TMessageType.CALL, ++seqid_));
      getUserCreateTime_args args = new getUserCreateTime_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public long recv_getUserCreateTime() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getUserCreateTime failed: out of sequence response");
      }
      getUserCreateTime_result result = new getUserCreateTime_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getUserCreateTime failed: unknown result");
    }

    public String registerChannelCP(String cpId, String registerPassword) throws TalkException, TException
    {
      send_registerChannelCP(cpId, registerPassword);
      return recv_registerChannelCP();
    }

    public void send_registerChannelCP(String cpId, String registerPassword) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("registerChannelCP", TMessageType.CALL, ++seqid_));
      registerChannelCP_args args = new registerChannelCP_args();
      args.setCpId(cpId);
      args.setRegisterPassword(registerPassword);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_registerChannelCP() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "registerChannelCP failed: out of sequence response");
      }
      registerChannelCP_result result = new registerChannelCP_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "registerChannelCP failed: unknown result");
    }

    public PaymentReservationResult reserveCallCreditPurchase(CoinPurchaseReservation request) throws TalkException, TException
    {
      send_reserveCallCreditPurchase(request);
      return recv_reserveCallCreditPurchase();
    }

    public void send_reserveCallCreditPurchase(CoinPurchaseReservation request) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("reserveCallCreditPurchase", TMessageType.CALL, ++seqid_));
      reserveCallCreditPurchase_args args = new reserveCallCreditPurchase_args();
      args.setRequest(request);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public PaymentReservationResult recv_reserveCallCreditPurchase() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "reserveCallCreditPurchase failed: out of sequence response");
      }
      reserveCallCreditPurchase_result result = new reserveCallCreditPurchase_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "reserveCallCreditPurchase failed: unknown result");
    }

    public Vector acquirePaidCallCurrencyExchangeRate(String language) throws TalkException, TException
    {
      send_acquirePaidCallCurrencyExchangeRate(language);
      return recv_acquirePaidCallCurrencyExchangeRate();
    }

    public void send_acquirePaidCallCurrencyExchangeRate(String language) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("acquirePaidCallCurrencyExchangeRate", TMessageType.CALL, ++seqid_));
      acquirePaidCallCurrencyExchangeRate_args args = new acquirePaidCallCurrencyExchangeRate_args();
      args.setLanguage(language);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_acquirePaidCallCurrencyExchangeRate() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "acquirePaidCallCurrencyExchangeRate failed: out of sequence response");
      }
      acquirePaidCallCurrencyExchangeRate_result result = new acquirePaidCallCurrencyExchangeRate_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "acquirePaidCallCurrencyExchangeRate failed: unknown result");
    }

    public Vector getRoomMemberMidsForAppPlatform(String roomId) throws TalkException, TException
    {
      send_getRoomMemberMidsForAppPlatform(roomId);
      return recv_getRoomMemberMidsForAppPlatform();
    }

    public void send_getRoomMemberMidsForAppPlatform(String roomId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getRoomMemberMidsForAppPlatform", TMessageType.CALL, ++seqid_));
      getRoomMemberMidsForAppPlatform_args args = new getRoomMemberMidsForAppPlatform_args();
      args.setRoomId(roomId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getRoomMemberMidsForAppPlatform() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getRoomMemberMidsForAppPlatform failed: out of sequence response");
      }
      getRoomMemberMidsForAppPlatform_result result = new getRoomMemberMidsForAppPlatform_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getRoomMemberMidsForAppPlatform failed: unknown result");
    }

    public Vector getPaidCallBalanceList(String language) throws TalkException, TException
    {
      send_getPaidCallBalanceList(language);
      return recv_getPaidCallBalanceList();
    }

    public void send_getPaidCallBalanceList(String language) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getPaidCallBalanceList", TMessageType.CALL, ++seqid_));
      getPaidCallBalanceList_args args = new getPaidCallBalanceList_args();
      args.setLanguage(language);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getPaidCallBalanceList() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getPaidCallBalanceList failed: out of sequence response");
      }
      getPaidCallBalanceList_result result = new getPaidCallBalanceList_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getPaidCallBalanceList failed: unknown result");
    }

    public Hashtable getPersonalInfos(Hashtable requiredPersonalInfos) throws TalkException, TException
    {
      send_getPersonalInfos(requiredPersonalInfos);
      return recv_getPersonalInfos();
    }

    public void send_getPersonalInfos(Hashtable requiredPersonalInfos) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getPersonalInfos", TMessageType.CALL, ++seqid_));
      getPersonalInfos_args args = new getPersonalInfos_args();
      args.setRequiredPersonalInfos(requiredPersonalInfos);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Hashtable recv_getPersonalInfos() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getPersonalInfos failed: out of sequence response");
      }
      getPersonalInfos_result result = new getPersonalInfos_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getPersonalInfos failed: unknown result");
    }

    public Vector getPrimaryClientsForChannel(Vector userMids) throws TalkException, TException
    {
      send_getPrimaryClientsForChannel(userMids);
      return recv_getPrimaryClientsForChannel();
    }

    public void send_getPrimaryClientsForChannel(Vector userMids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getPrimaryClientsForChannel", TMessageType.CALL, ++seqid_));
      getPrimaryClientsForChannel_args args = new getPrimaryClientsForChannel_args();
      args.setUserMids(userMids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getPrimaryClientsForChannel() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getPrimaryClientsForChannel failed: out of sequence response");
      }
      getPrimaryClientsForChannel_result result = new getPrimaryClientsForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getPrimaryClientsForChannel failed: unknown result");
    }

    public ContactTransition addBuddyToContact(String buddyMid) throws TalkException, TException
    {
      send_addBuddyToContact(buddyMid);
      return recv_addBuddyToContact();
    }

    public void send_addBuddyToContact(String buddyMid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("addBuddyToContact", TMessageType.CALL, ++seqid_));
      addBuddyToContact_args args = new addBuddyToContact_args();
      args.setBuddyMid(buddyMid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ContactTransition recv_addBuddyToContact() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "addBuddyToContact failed: out of sequence response");
      }
      addBuddyToContact_result result = new addBuddyToContact_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "addBuddyToContact failed: unknown result");
    }

    public Vector getGroupMemberMidsForAppPlatform(String groupId) throws TalkException, TException
    {
      send_getGroupMemberMidsForAppPlatform(groupId);
      return recv_getGroupMemberMidsForAppPlatform();
    }

    public void send_getGroupMemberMidsForAppPlatform(String groupId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getGroupMemberMidsForAppPlatform", TMessageType.CALL, ++seqid_));
      getGroupMemberMidsForAppPlatform_args args = new getGroupMemberMidsForAppPlatform_args();
      args.setGroupId(groupId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getGroupMemberMidsForAppPlatform() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getGroupMemberMidsForAppPlatform failed: out of sequence response");
      }
      getGroupMemberMidsForAppPlatform_result result = new getGroupMemberMidsForAppPlatform_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getGroupMemberMidsForAppPlatform failed: unknown result");
    }

    public String getUserLanguage() throws TalkException, TException
    {
      send_getUserLanguage();
      return recv_getUserLanguage();
    }

    public void send_getUserLanguage() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getUserLanguage", TMessageType.CALL, ++seqid_));
      getUserLanguage_args args = new getUserLanguage_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getUserLanguage() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getUserLanguage failed: out of sequence response");
      }
      getUserLanguage_result result = new getUserLanguage_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getUserLanguage failed: unknown result");
    }

    public PaidCallResponse lookupPaidCall(String dialedNumber, String language, String referer) throws TalkException, TException
    {
      send_lookupPaidCall(dialedNumber, language, referer);
      return recv_lookupPaidCall();
    }

    public void send_lookupPaidCall(String dialedNumber, String language, String referer) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lookupPaidCall", TMessageType.CALL, ++seqid_));
      lookupPaidCall_args args = new lookupPaidCall_args();
      args.setDialedNumber(dialedNumber);
      args.setLanguage(language);
      args.setReferer(referer);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public PaidCallResponse recv_lookupPaidCall() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lookupPaidCall failed: out of sequence response");
      }
      lookupPaidCall_result result = new lookupPaidCall_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lookupPaidCall failed: unknown result");
    }

    public ExtendedProfile getExtendedProfile() throws TalkException, TException
    {
      send_getExtendedProfile();
      return recv_getExtendedProfile();
    }

    public void send_getExtendedProfile() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getExtendedProfile", TMessageType.CALL, ++seqid_));
      getExtendedProfile_args args = new getExtendedProfile_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public ExtendedProfile recv_getExtendedProfile() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getExtendedProfile failed: out of sequence response");
      }
      getExtendedProfile_result result = new getExtendedProfile_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getExtendedProfile failed: unknown result");
    }

    public Hashtable getReverseCompactContacts(Vector ids) throws TalkException, TException
    {
      send_getReverseCompactContacts(ids);
      return recv_getReverseCompactContacts();
    }

    public void send_getReverseCompactContacts(Vector ids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getReverseCompactContacts", TMessageType.CALL, ++seqid_));
      getReverseCompactContacts_args args = new getReverseCompactContacts_args();
      args.setIds(ids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Hashtable recv_getReverseCompactContacts() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getReverseCompactContacts failed: out of sequence response");
      }
      getReverseCompactContacts_result result = new getReverseCompactContacts_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getReverseCompactContacts failed: unknown result");
    }

    public PaidCallAdResult getPaidCallAdStatus() throws TalkException, TException
    {
      send_getPaidCallAdStatus();
      return recv_getPaidCallAdStatus();
    }

    public void send_getPaidCallAdStatus() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getPaidCallAdStatus", TMessageType.CALL, ++seqid_));
      getPaidCallAdStatus_args args = new getPaidCallAdStatus_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public PaidCallAdResult recv_getPaidCallAdStatus() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getPaidCallAdStatus failed: out of sequence response");
      }
      getPaidCallAdStatus_result result = new getPaidCallAdStatus_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getPaidCallAdStatus failed: unknown result");
    }

    public Contact findContactByUseridWithoutAbuseBlockForChannel(String userid) throws TalkException, TException
    {
      send_findContactByUseridWithoutAbuseBlockForChannel(userid);
      return recv_findContactByUseridWithoutAbuseBlockForChannel();
    }

    public void send_findContactByUseridWithoutAbuseBlockForChannel(String userid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("findContactByUseridWithoutAbuseBlockForChannel", TMessageType.CALL, ++seqid_));
      findContactByUseridWithoutAbuseBlockForChannel_args args = new findContactByUseridWithoutAbuseBlockForChannel_args();
      args.setUserid(userid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Contact recv_findContactByUseridWithoutAbuseBlockForChannel() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "findContactByUseridWithoutAbuseBlockForChannel failed: out of sequence response");
      }
      findContactByUseridWithoutAbuseBlockForChannel_result result = new findContactByUseridWithoutAbuseBlockForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "findContactByUseridWithoutAbuseBlockForChannel failed: unknown result");
    }

    public Vector getGroupMemberMids(String groupId) throws TalkException, TException
    {
      send_getGroupMemberMids(groupId);
      return recv_getGroupMemberMids();
    }

    public void send_getGroupMemberMids(String groupId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getGroupMemberMids", TMessageType.CALL, ++seqid_));
      getGroupMemberMids_args args = new getGroupMemberMids_args();
      args.setGroupId(groupId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getGroupMemberMids() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getGroupMemberMids failed: out of sequence response");
      }
      getGroupMemberMids_result result = new getGroupMemberMids_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getGroupMemberMids failed: unknown result");
    }

    public Message sendMessageWithoutRelationship(Message message) throws TalkException, TException
    {
      send_sendMessageWithoutRelationship(message);
      return recv_sendMessageWithoutRelationship();
    }

    public void send_sendMessageWithoutRelationship(Message message) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("sendMessageWithoutRelationship", TMessageType.CALL, ++seqid_));
      sendMessageWithoutRelationship_args args = new sendMessageWithoutRelationship_args();
      args.setMessage(message);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Message recv_sendMessageWithoutRelationship() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "sendMessageWithoutRelationship failed: out of sequence response");
      }
      sendMessageWithoutRelationship_result result = new sendMessageWithoutRelationship_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "sendMessageWithoutRelationship failed: unknown result");
    }

    public Hashtable displayBuddySubscriberCountInBulk(Vector mids) throws TalkException, TException
    {
      send_displayBuddySubscriberCountInBulk(mids);
      return recv_displayBuddySubscriberCountInBulk();
    }

    public void send_displayBuddySubscriberCountInBulk(Vector mids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("displayBuddySubscriberCountInBulk", TMessageType.CALL, ++seqid_));
      displayBuddySubscriberCountInBulk_args args = new displayBuddySubscriberCountInBulk_args();
      args.setMids(mids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Hashtable recv_displayBuddySubscriberCountInBulk() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "displayBuddySubscriberCountInBulk failed: out of sequence response");
      }
      displayBuddySubscriberCountInBulk_result result = new displayBuddySubscriberCountInBulk_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "displayBuddySubscriberCountInBulk failed: unknown result");
    }

    public Vector lookupRoomMembers(String roomId, Vector mids) throws TalkException, TException
    {
      send_lookupRoomMembers(roomId, mids);
      return recv_lookupRoomMembers();
    }

    public void send_lookupRoomMembers(String roomId, Vector mids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("lookupRoomMembers", TMessageType.CALL, ++seqid_));
      lookupRoomMembers_args args = new lookupRoomMembers_args();
      args.setRoomId(roomId);
      args.setMids(mids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_lookupRoomMembers() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "lookupRoomMembers failed: out of sequence response");
      }
      lookupRoomMembers_result result = new lookupRoomMembers_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "lookupRoomMembers failed: unknown result");
    }

    public Vector getFavoriteMidsForChannel() throws TalkException, TException
    {
      send_getFavoriteMidsForChannel();
      return recv_getFavoriteMidsForChannel();
    }

    public void send_getFavoriteMidsForChannel() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getFavoriteMidsForChannel", TMessageType.CALL, ++seqid_));
      getFavoriteMidsForChannel_args args = new getFavoriteMidsForChannel_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getFavoriteMidsForChannel() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getFavoriteMidsForChannel failed: out of sequence response");
      }
      getFavoriteMidsForChannel_result result = new getFavoriteMidsForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getFavoriteMidsForChannel failed: unknown result");
    }

    public Vector getAllContactIdsForChannel() throws TalkException, TException
    {
      send_getAllContactIdsForChannel();
      return recv_getAllContactIdsForChannel();
    }

    public void send_getAllContactIdsForChannel() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getAllContactIdsForChannel", TMessageType.CALL, ++seqid_));
      getAllContactIdsForChannel_args args = new getAllContactIdsForChannel_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getAllContactIdsForChannel() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getAllContactIdsForChannel failed: out of sequence response");
      }
      getAllContactIdsForChannel_result result = new getAllContactIdsForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getAllContactIdsForChannel failed: unknown result");
    }

    public long displayBuddySubscriberCount() throws TalkException, TException
    {
      send_displayBuddySubscriberCount();
      return recv_displayBuddySubscriberCount();
    }

    public void send_displayBuddySubscriberCount() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("displayBuddySubscriberCount", TMessageType.CALL, ++seqid_));
      displayBuddySubscriberCount_args args = new displayBuddySubscriberCount_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public long recv_displayBuddySubscriberCount() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "displayBuddySubscriberCount failed: out of sequence response");
      }
      displayBuddySubscriberCount_result result = new displayBuddySubscriberCount_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "displayBuddySubscriberCount failed: unknown result");
    }

    public Profile getProfileForChannel() throws TalkException, TException
    {
      send_getProfileForChannel();
      return recv_getProfileForChannel();
    }

    public void send_getProfileForChannel() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getProfileForChannel", TMessageType.CALL, ++seqid_));
      getProfileForChannel_args args = new getProfileForChannel_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Profile recv_getProfileForChannel() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getProfileForChannel failed: out of sequence response");
      }
      getProfileForChannel_result result = new getProfileForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getProfileForChannel failed: unknown result");
    }

    public Vector getUserTickets(Vector userMids) throws TalkException, TException
    {
      send_getUserTickets(userMids);
      return recv_getUserTickets();
    }

    public void send_getUserTickets(Vector userMids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getUserTickets", TMessageType.CALL, ++seqid_));
      getUserTickets_args args = new getUserTickets_args();
      args.setUserMids(userMids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getUserTickets() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getUserTickets failed: out of sequence response");
      }
      getUserTickets_result result = new getUserTickets_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getUserTickets failed: unknown result");
    }

    public Vector getOAFriendMids() throws TalkException, TException
    {
      send_getOAFriendMids();
      return recv_getOAFriendMids();
    }

    public void send_getOAFriendMids() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getOAFriendMids", TMessageType.CALL, ++seqid_));
      getOAFriendMids_args args = new getOAFriendMids_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getOAFriendMids() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getOAFriendMids failed: out of sequence response");
      }
      getOAFriendMids_result result = new getOAFriendMids_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getOAFriendMids failed: unknown result");
    }

    public Vector searchPaidCallUserRate(String countryCode, String language) throws TalkException, TException
    {
      send_searchPaidCallUserRate(countryCode, language);
      return recv_searchPaidCallUserRate();
    }

    public void send_searchPaidCallUserRate(String countryCode, String language) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("searchPaidCallUserRate", TMessageType.CALL, ++seqid_));
      searchPaidCallUserRate_args args = new searchPaidCallUserRate_args();
      args.setCountryCode(countryCode);
      args.setLanguage(language);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_searchPaidCallUserRate() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "searchPaidCallUserRate failed: out of sequence response");
      }
      searchPaidCallUserRate_result result = new searchPaidCallUserRate_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "searchPaidCallUserRate failed: unknown result");
    }

    public Vector getJoinedGroupIdsForChannel() throws TalkException, TException
    {
      send_getJoinedGroupIdsForChannel();
      return recv_getJoinedGroupIdsForChannel();
    }

    public void send_getJoinedGroupIdsForChannel() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getJoinedGroupIdsForChannel", TMessageType.CALL, ++seqid_));
      getJoinedGroupIdsForChannel_args args = new getJoinedGroupIdsForChannel_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getJoinedGroupIdsForChannel() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getJoinedGroupIdsForChannel failed: out of sequence response");
      }
      getJoinedGroupIdsForChannel_result result = new getJoinedGroupIdsForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getJoinedGroupIdsForChannel failed: unknown result");
    }

    public GroupCallRoute acquireGroupCallRoute(String chatMid, GroupCallMediaType mediaType) throws TalkException, TException
    {
      send_acquireGroupCallRoute(chatMid, mediaType);
      return recv_acquireGroupCallRoute();
    }

    public void send_acquireGroupCallRoute(String chatMid, GroupCallMediaType mediaType) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("acquireGroupCallRoute", TMessageType.CALL, ++seqid_));
      acquireGroupCallRoute_args args = new acquireGroupCallRoute_args();
      args.setChatMid(chatMid);
      args.setMediaType(mediaType);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public GroupCallRoute recv_acquireGroupCallRoute() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "acquireGroupCallRoute failed: out of sequence response");
      }
      acquireGroupCallRoute_result result = new acquireGroupCallRoute_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "acquireGroupCallRoute failed: unknown result");
    }

    public Vector getUserMidsWhoAddedMe() throws TalkException, TException
    {
      send_getUserMidsWhoAddedMe();
      return recv_getUserMidsWhoAddedMe();
    }

    public void send_getUserMidsWhoAddedMe() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getUserMidsWhoAddedMe", TMessageType.CALL, ++seqid_));
      getUserMidsWhoAddedMe_args args = new getUserMidsWhoAddedMe_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getUserMidsWhoAddedMe() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getUserMidsWhoAddedMe failed: out of sequence response");
      }
      getUserMidsWhoAddedMe_result result = new getUserMidsWhoAddedMe_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getUserMidsWhoAddedMe failed: unknown result");
    }

    public IdentityCredential getIdentityCredential() throws TalkException, TException
    {
      send_getIdentityCredential();
      return recv_getIdentityCredential();
    }

    public void send_getIdentityCredential() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getIdentityCredential", TMessageType.CALL, ++seqid_));
      getIdentityCredential_args args = new getIdentityCredential_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public IdentityCredential recv_getIdentityCredential() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getIdentityCredential failed: out of sequence response");
      }
      getIdentityCredential_result result = new getIdentityCredential_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getIdentityCredential failed: unknown result");
    }

    public void addOperationForChannel(OpType opType, String param1, String param2, String param3) throws TalkException, TException
    {
      send_addOperationForChannel(opType, param1, param2, param3);
      recv_addOperationForChannel();
    }

    public void send_addOperationForChannel(OpType opType, String param1, String param2, String param3) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("addOperationForChannel", TMessageType.CALL, ++seqid_));
      addOperationForChannel_args args = new addOperationForChannel_args();
      args.setOpType(opType);
      args.setParam1(param1);
      args.setParam2(param2);
      args.setParam3(param3);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_addOperationForChannel() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "addOperationForChannel failed: out of sequence response");
      }
      addOperationForChannel_result result = new addOperationForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public Vector getSimpleChannelContacts(Vector ids, boolean statusSticonFallbackDisabled) throws TalkException, TException
    {
      send_getSimpleChannelContacts(ids, statusSticonFallbackDisabled);
      return recv_getSimpleChannelContacts();
    }

    public void send_getSimpleChannelContacts(Vector ids, boolean statusSticonFallbackDisabled) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getSimpleChannelContacts", TMessageType.CALL, ++seqid_));
      getSimpleChannelContacts_args args = new getSimpleChannelContacts_args();
      args.setIds(ids);
      args.setStatusSticonFallbackDisabled(statusSticonFallbackDisabled);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getSimpleChannelContacts() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getSimpleChannelContacts failed: out of sequence response");
      }
      getSimpleChannelContacts_result result = new getSimpleChannelContacts_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getSimpleChannelContacts failed: unknown result");
    }

    public long getUserLastSentMessageTimeStamp(String mid) throws TalkException, TException
    {
      send_getUserLastSentMessageTimeStamp(mid);
      return recv_getUserLastSentMessageTimeStamp();
    }

    public void send_getUserLastSentMessageTimeStamp(String mid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getUserLastSentMessageTimeStamp", TMessageType.CALL, ++seqid_));
      getUserLastSentMessageTimeStamp_args args = new getUserLastSentMessageTimeStamp_args();
      args.setMid(mid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public long recv_getUserLastSentMessageTimeStamp() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getUserLastSentMessageTimeStamp failed: out of sequence response");
      }
      getUserLastSentMessageTimeStamp_result result = new getUserLastSentMessageTimeStamp_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getUserLastSentMessageTimeStamp failed: unknown result");
    }

  }
  public static class Processor implements TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("getUserStatus", new getUserStatus());
      processMap_.put("updateProfileAttributeForChannel", new updateProfileAttributeForChannel());
      processMap_.put("updateExtendedProfileAttribute", new updateExtendedProfileAttribute());
      processMap_.put("getAllSimpleChannelContacts", new getAllSimpleChannelContacts());
      processMap_.put("getUserIdentities", new getUserIdentities());
      processMap_.put("markPaidCallAd", new markPaidCallAd());
      processMap_.put("isGroupMember", new isGroupMember());
      processMap_.put("getPhoneInfoFromPhoneNumber", new getPhoneInfoFromPhoneNumber());
      processMap_.put("redeemPaidCallVoucher", new redeemPaidCallVoucher());
      processMap_.put("getPreferredDisplayName", new getPreferredDisplayName());
      processMap_.put("getContactsForChannel", new getContactsForChannel());
      processMap_.put("getCallCreditProducts", new getCallCreditProducts());
      processMap_.put("getCompactContacts", new getCompactContacts());
      processMap_.put("notifyNotiCenterEvent", new notifyNotiCenterEvent());
      processMap_.put("isInContact", new isInContact());
      processMap_.put("lookupGroupMembers", new lookupGroupMembers());
      processMap_.put("getRoomInformation", new getRoomInformation());
      processMap_.put("getGroupCall", new getGroupCall());
      processMap_.put("isAllowSecondaryDeviceLogin", new isAllowSecondaryDeviceLogin());
      processMap_.put("getPrimaryClientForChannel", new getPrimaryClientForChannel());
      processMap_.put("createRoomWithBuddy", new createRoomWithBuddy());
      processMap_.put("getDisplayName", new getDisplayName());
      processMap_.put("getPaidCallMetadata", new getPaidCallMetadata());
      processMap_.put("getMid", new getMid());
      processMap_.put("getUserCountryForBilling", new getUserCountryForBilling());
      processMap_.put("getFavoriteGroupIdsForChannel", new getFavoriteGroupIdsForChannel());
      processMap_.put("getPaidCallHistory", new getPaidCallHistory());
      processMap_.put("sendPinCodeOperation", new sendPinCodeOperation());
      processMap_.put("inviteIntoGroupCall", new inviteIntoGroupCall());
      processMap_.put("getFriendMids", new getFriendMids());
      processMap_.put("getMetaProfile", new getMetaProfile());
      processMap_.put("sendMessageForChannel", new sendMessageForChannel());
      processMap_.put("activeBuddySubscriberCount", new activeBuddySubscriberCount());
      processMap_.put("getCallCreditPurchaseHistory", new getCallCreditPurchaseHistory());
      processMap_.put("isRoomMember", new isRoomMember());
      processMap_.put("sendSystemOAMessage", new sendSystemOAMessage());
      processMap_.put("acquirePaidCallRoute", new acquirePaidCallRoute());
      processMap_.put("getGroupsForChannel", new getGroupsForChannel());
      processMap_.put("getUserCreateTime", new getUserCreateTime());
      processMap_.put("registerChannelCP", new registerChannelCP());
      processMap_.put("reserveCallCreditPurchase", new reserveCallCreditPurchase());
      processMap_.put("acquirePaidCallCurrencyExchangeRate", new acquirePaidCallCurrencyExchangeRate());
      processMap_.put("getRoomMemberMidsForAppPlatform", new getRoomMemberMidsForAppPlatform());
      processMap_.put("getPaidCallBalanceList", new getPaidCallBalanceList());
      processMap_.put("getPersonalInfos", new getPersonalInfos());
      processMap_.put("getPrimaryClientsForChannel", new getPrimaryClientsForChannel());
      processMap_.put("addBuddyToContact", new addBuddyToContact());
      processMap_.put("getGroupMemberMidsForAppPlatform", new getGroupMemberMidsForAppPlatform());
      processMap_.put("getUserLanguage", new getUserLanguage());
      processMap_.put("lookupPaidCall", new lookupPaidCall());
      processMap_.put("getExtendedProfile", new getExtendedProfile());
      processMap_.put("getReverseCompactContacts", new getReverseCompactContacts());
      processMap_.put("getPaidCallAdStatus", new getPaidCallAdStatus());
      processMap_.put("findContactByUseridWithoutAbuseBlockForChannel", new findContactByUseridWithoutAbuseBlockForChannel());
      processMap_.put("getGroupMemberMids", new getGroupMemberMids());
      processMap_.put("sendMessageWithoutRelationship", new sendMessageWithoutRelationship());
      processMap_.put("displayBuddySubscriberCountInBulk", new displayBuddySubscriberCountInBulk());
      processMap_.put("lookupRoomMembers", new lookupRoomMembers());
      processMap_.put("getFavoriteMidsForChannel", new getFavoriteMidsForChannel());
      processMap_.put("getAllContactIdsForChannel", new getAllContactIdsForChannel());
      processMap_.put("displayBuddySubscriberCount", new displayBuddySubscriberCount());
      processMap_.put("getProfileForChannel", new getProfileForChannel());
      processMap_.put("getUserTickets", new getUserTickets());
      processMap_.put("getOAFriendMids", new getOAFriendMids());
      processMap_.put("searchPaidCallUserRate", new searchPaidCallUserRate());
      processMap_.put("getJoinedGroupIdsForChannel", new getJoinedGroupIdsForChannel());
      processMap_.put("acquireGroupCallRoute", new acquireGroupCallRoute());
      processMap_.put("getUserMidsWhoAddedMe", new getUserMidsWhoAddedMe());
      processMap_.put("getIdentityCredential", new getIdentityCredential());
      processMap_.put("addOperationForChannel", new addOperationForChannel());
      processMap_.put("getSimpleChannelContacts", new getSimpleChannelContacts());
      processMap_.put("getUserLastSentMessageTimeStamp", new getUserLastSentMessageTimeStamp());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final Hashtable processMap_ = new Hashtable();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = (ProcessFunction)processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class getUserStatus implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getUserStatus_args args = new getUserStatus_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getUserStatus", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getUserStatus_result result = new getUserStatus_result();
        try {
          result.success = iface_.getUserStatus(args.mid);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getUserStatus");
          oprot.writeMessageBegin(new TMessage("getUserStatus", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getUserStatus", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateProfileAttributeForChannel implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateProfileAttributeForChannel_args args = new updateProfileAttributeForChannel_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateProfileAttributeForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateProfileAttributeForChannel_result result = new updateProfileAttributeForChannel_result();
        try {
          iface_.updateProfileAttributeForChannel(args.profileAttribute, args.value);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateProfileAttributeForChannel");
          oprot.writeMessageBegin(new TMessage("updateProfileAttributeForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateProfileAttributeForChannel", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateExtendedProfileAttribute implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateExtendedProfileAttribute_args args = new updateExtendedProfileAttribute_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateExtendedProfileAttribute", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateExtendedProfileAttribute_result result = new updateExtendedProfileAttribute_result();
        try {
          iface_.updateExtendedProfileAttribute(args.attr, args.extendedProfile);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateExtendedProfileAttribute");
          oprot.writeMessageBegin(new TMessage("updateExtendedProfileAttribute", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateExtendedProfileAttribute", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getAllSimpleChannelContacts implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getAllSimpleChannelContacts_args args = new getAllSimpleChannelContacts_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getAllSimpleChannelContacts", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getAllSimpleChannelContacts_result result = new getAllSimpleChannelContacts_result();
        try {
          result.success = iface_.getAllSimpleChannelContacts(args.statusSticonFallbackDisabled);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getAllSimpleChannelContacts");
          oprot.writeMessageBegin(new TMessage("getAllSimpleChannelContacts", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getAllSimpleChannelContacts", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getUserIdentities implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getUserIdentities_args args = new getUserIdentities_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getUserIdentities", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getUserIdentities_result result = new getUserIdentities_result();
        try {
          result.success = iface_.getUserIdentities();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getUserIdentities");
          oprot.writeMessageBegin(new TMessage("getUserIdentities", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getUserIdentities", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class markPaidCallAd implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        markPaidCallAd_args args = new markPaidCallAd_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("markPaidCallAd", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        markPaidCallAd_result result = new markPaidCallAd_result();
        try {
          result.success = iface_.markPaidCallAd(args.dialedNumber, args.language, args.disableCallerId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing markPaidCallAd");
          oprot.writeMessageBegin(new TMessage("markPaidCallAd", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("markPaidCallAd", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class isGroupMember implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        isGroupMember_args args = new isGroupMember_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("isGroupMember", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        isGroupMember_result result = new isGroupMember_result();
        try {
          result.success = iface_.isGroupMember(args.groupId);
          result.setSuccessIsSet(true);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing isGroupMember");
          oprot.writeMessageBegin(new TMessage("isGroupMember", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("isGroupMember", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getPhoneInfoFromPhoneNumber implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getPhoneInfoFromPhoneNumber_args args = new getPhoneInfoFromPhoneNumber_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getPhoneInfoFromPhoneNumber", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getPhoneInfoFromPhoneNumber_result result = new getPhoneInfoFromPhoneNumber_result();
        try {
          result.success = iface_.getPhoneInfoFromPhoneNumber(args.region, args.phoneNumber);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getPhoneInfoFromPhoneNumber");
          oprot.writeMessageBegin(new TMessage("getPhoneInfoFromPhoneNumber", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getPhoneInfoFromPhoneNumber", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class redeemPaidCallVoucher implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        redeemPaidCallVoucher_args args = new redeemPaidCallVoucher_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("redeemPaidCallVoucher", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        redeemPaidCallVoucher_result result = new redeemPaidCallVoucher_result();
        try {
          result.success = iface_.redeemPaidCallVoucher(args.serial, args.language);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing redeemPaidCallVoucher");
          oprot.writeMessageBegin(new TMessage("redeemPaidCallVoucher", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("redeemPaidCallVoucher", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getPreferredDisplayName implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getPreferredDisplayName_args args = new getPreferredDisplayName_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getPreferredDisplayName", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getPreferredDisplayName_result result = new getPreferredDisplayName_result();
        try {
          result.success = iface_.getPreferredDisplayName(args.mids);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getPreferredDisplayName");
          oprot.writeMessageBegin(new TMessage("getPreferredDisplayName", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getPreferredDisplayName", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getContactsForChannel implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getContactsForChannel_args args = new getContactsForChannel_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getContactsForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getContactsForChannel_result result = new getContactsForChannel_result();
        try {
          result.success = iface_.getContactsForChannel(args.ids);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getContactsForChannel");
          oprot.writeMessageBegin(new TMessage("getContactsForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getContactsForChannel", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getCallCreditProducts implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getCallCreditProducts_args args = new getCallCreditProducts_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getCallCreditProducts", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getCallCreditProducts_result result = new getCallCreditProducts_result();
        try {
          result.success = iface_.getCallCreditProducts(args.appStoreCode, args.pgCode, args.country, args.language);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getCallCreditProducts");
          oprot.writeMessageBegin(new TMessage("getCallCreditProducts", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getCallCreditProducts", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getCompactContacts implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getCompactContacts_args args = new getCompactContacts_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getCompactContacts", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getCompactContacts_result result = new getCompactContacts_result();
        try {
          result.success = iface_.getCompactContacts(args.lastModifiedTimestamp);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getCompactContacts");
          oprot.writeMessageBegin(new TMessage("getCompactContacts", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getCompactContacts", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class notifyNotiCenterEvent implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        notifyNotiCenterEvent_args args = new notifyNotiCenterEvent_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("notifyNotiCenterEvent", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        notifyNotiCenterEvent_result result = new notifyNotiCenterEvent_result();
        try {
          iface_.notifyNotiCenterEvent(args.event);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing notifyNotiCenterEvent");
          oprot.writeMessageBegin(new TMessage("notifyNotiCenterEvent", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("notifyNotiCenterEvent", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class isInContact implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        isInContact_args args = new isInContact_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("isInContact", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        isInContact_result result = new isInContact_result();
        try {
          result.success = iface_.isInContact(args.mid);
          result.setSuccessIsSet(true);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing isInContact");
          oprot.writeMessageBegin(new TMessage("isInContact", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("isInContact", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lookupGroupMembers implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lookupGroupMembers_args args = new lookupGroupMembers_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lookupGroupMembers", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lookupGroupMembers_result result = new lookupGroupMembers_result();
        try {
          result.success = iface_.lookupGroupMembers(args.groupId, args.mids);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing lookupGroupMembers");
          oprot.writeMessageBegin(new TMessage("lookupGroupMembers", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("lookupGroupMembers", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getRoomInformation implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getRoomInformation_args args = new getRoomInformation_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getRoomInformation", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getRoomInformation_result result = new getRoomInformation_result();
        try {
          result.success = iface_.getRoomInformation(args.roomMid);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getRoomInformation");
          oprot.writeMessageBegin(new TMessage("getRoomInformation", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getRoomInformation", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getGroupCall implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getGroupCall_args args = new getGroupCall_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getGroupCall", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getGroupCall_result result = new getGroupCall_result();
        try {
          result.success = iface_.getGroupCall(args.chatMid);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getGroupCall");
          oprot.writeMessageBegin(new TMessage("getGroupCall", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getGroupCall", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class isAllowSecondaryDeviceLogin implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        isAllowSecondaryDeviceLogin_args args = new isAllowSecondaryDeviceLogin_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("isAllowSecondaryDeviceLogin", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        isAllowSecondaryDeviceLogin_result result = new isAllowSecondaryDeviceLogin_result();
        try {
          result.success = iface_.isAllowSecondaryDeviceLogin();
          result.setSuccessIsSet(true);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing isAllowSecondaryDeviceLogin");
          oprot.writeMessageBegin(new TMessage("isAllowSecondaryDeviceLogin", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("isAllowSecondaryDeviceLogin", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getPrimaryClientForChannel implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getPrimaryClientForChannel_args args = new getPrimaryClientForChannel_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getPrimaryClientForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getPrimaryClientForChannel_result result = new getPrimaryClientForChannel_result();
        try {
          result.success = iface_.getPrimaryClientForChannel();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getPrimaryClientForChannel");
          oprot.writeMessageBegin(new TMessage("getPrimaryClientForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getPrimaryClientForChannel", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class createRoomWithBuddy implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        createRoomWithBuddy_args args = new createRoomWithBuddy_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("createRoomWithBuddy", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        createRoomWithBuddy_result result = new createRoomWithBuddy_result();
        try {
          result.success = iface_.createRoomWithBuddy(args.reqSeq, args.buddyMid, args.contactIds);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing createRoomWithBuddy");
          oprot.writeMessageBegin(new TMessage("createRoomWithBuddy", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("createRoomWithBuddy", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getDisplayName implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getDisplayName_args args = new getDisplayName_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getDisplayName", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getDisplayName_result result = new getDisplayName_result();
        try {
          result.success = iface_.getDisplayName(args.mid);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getDisplayName");
          oprot.writeMessageBegin(new TMessage("getDisplayName", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getDisplayName", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getPaidCallMetadata implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getPaidCallMetadata_args args = new getPaidCallMetadata_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getPaidCallMetadata", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getPaidCallMetadata_result result = new getPaidCallMetadata_result();
        try {
          result.success = iface_.getPaidCallMetadata(args.language);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getPaidCallMetadata");
          oprot.writeMessageBegin(new TMessage("getPaidCallMetadata", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getPaidCallMetadata", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getMid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getMid_args args = new getMid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getMid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getMid_result result = new getMid_result();
        try {
          result.success = iface_.getMid();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getMid");
          oprot.writeMessageBegin(new TMessage("getMid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getMid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getUserCountryForBilling implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getUserCountryForBilling_args args = new getUserCountryForBilling_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getUserCountryForBilling", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getUserCountryForBilling_result result = new getUserCountryForBilling_result();
        try {
          result.success = iface_.getUserCountryForBilling(args.country, args.remoteIp);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getUserCountryForBilling");
          oprot.writeMessageBegin(new TMessage("getUserCountryForBilling", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getUserCountryForBilling", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getFavoriteGroupIdsForChannel implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getFavoriteGroupIdsForChannel_args args = new getFavoriteGroupIdsForChannel_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getFavoriteGroupIdsForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getFavoriteGroupIdsForChannel_result result = new getFavoriteGroupIdsForChannel_result();
        try {
          result.success = iface_.getFavoriteGroupIdsForChannel();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getFavoriteGroupIdsForChannel");
          oprot.writeMessageBegin(new TMessage("getFavoriteGroupIdsForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getFavoriteGroupIdsForChannel", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getPaidCallHistory implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getPaidCallHistory_args args = new getPaidCallHistory_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getPaidCallHistory", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getPaidCallHistory_result result = new getPaidCallHistory_result();
        try {
          result.success = iface_.getPaidCallHistory(args.start, args.size, args.language);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getPaidCallHistory");
          oprot.writeMessageBegin(new TMessage("getPaidCallHistory", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getPaidCallHistory", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class sendPinCodeOperation implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        sendPinCodeOperation_args args = new sendPinCodeOperation_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("sendPinCodeOperation", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        sendPinCodeOperation_result result = new sendPinCodeOperation_result();
        try {
          iface_.sendPinCodeOperation(args.verifier);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendPinCodeOperation");
          oprot.writeMessageBegin(new TMessage("sendPinCodeOperation", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("sendPinCodeOperation", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class inviteIntoGroupCall implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        inviteIntoGroupCall_args args = new inviteIntoGroupCall_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("inviteIntoGroupCall", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        inviteIntoGroupCall_result result = new inviteIntoGroupCall_result();
        try {
          iface_.inviteIntoGroupCall(args.chatMid, args.memberMids, args.mediaType);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing inviteIntoGroupCall");
          oprot.writeMessageBegin(new TMessage("inviteIntoGroupCall", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("inviteIntoGroupCall", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getFriendMids implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getFriendMids_args args = new getFriendMids_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getFriendMids", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getFriendMids_result result = new getFriendMids_result();
        try {
          result.success = iface_.getFriendMids();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getFriendMids");
          oprot.writeMessageBegin(new TMessage("getFriendMids", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getFriendMids", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getMetaProfile implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getMetaProfile_args args = new getMetaProfile_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getMetaProfile", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getMetaProfile_result result = new getMetaProfile_result();
        try {
          result.success = iface_.getMetaProfile();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getMetaProfile");
          oprot.writeMessageBegin(new TMessage("getMetaProfile", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getMetaProfile", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class sendMessageForChannel implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        sendMessageForChannel_args args = new sendMessageForChannel_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("sendMessageForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        sendMessageForChannel_result result = new sendMessageForChannel_result();
        try {
          result.success = iface_.sendMessageForChannel(args.message);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendMessageForChannel");
          oprot.writeMessageBegin(new TMessage("sendMessageForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("sendMessageForChannel", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class activeBuddySubscriberCount implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        activeBuddySubscriberCount_args args = new activeBuddySubscriberCount_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("activeBuddySubscriberCount", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        activeBuddySubscriberCount_result result = new activeBuddySubscriberCount_result();
        try {
          result.success = iface_.activeBuddySubscriberCount();
          result.setSuccessIsSet(true);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing activeBuddySubscriberCount");
          oprot.writeMessageBegin(new TMessage("activeBuddySubscriberCount", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("activeBuddySubscriberCount", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getCallCreditPurchaseHistory implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getCallCreditPurchaseHistory_args args = new getCallCreditPurchaseHistory_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getCallCreditPurchaseHistory", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getCallCreditPurchaseHistory_result result = new getCallCreditPurchaseHistory_result();
        try {
          result.success = iface_.getCallCreditPurchaseHistory(args.request);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getCallCreditPurchaseHistory");
          oprot.writeMessageBegin(new TMessage("getCallCreditPurchaseHistory", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getCallCreditPurchaseHistory", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class isRoomMember implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        isRoomMember_args args = new isRoomMember_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("isRoomMember", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        isRoomMember_result result = new isRoomMember_result();
        try {
          result.success = iface_.isRoomMember(args.roomId);
          result.setSuccessIsSet(true);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing isRoomMember");
          oprot.writeMessageBegin(new TMessage("isRoomMember", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("isRoomMember", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class sendSystemOAMessage implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        sendSystemOAMessage_args args = new sendSystemOAMessage_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("sendSystemOAMessage", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        sendSystemOAMessage_result result = new sendSystemOAMessage_result();
        try {
          result.success = iface_.sendSystemOAMessage(args.message);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendSystemOAMessage");
          oprot.writeMessageBegin(new TMessage("sendSystemOAMessage", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("sendSystemOAMessage", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class acquirePaidCallRoute implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        acquirePaidCallRoute_args args = new acquirePaidCallRoute_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("acquirePaidCallRoute", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        acquirePaidCallRoute_result result = new acquirePaidCallRoute_result();
        try {
          result.success = iface_.acquirePaidCallRoute(args.paidCallType, args.dialedNumber, args.language, args.networkCode, args.disableCallerId, args.referer, args.adSessionId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing acquirePaidCallRoute");
          oprot.writeMessageBegin(new TMessage("acquirePaidCallRoute", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("acquirePaidCallRoute", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getGroupsForChannel implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getGroupsForChannel_args args = new getGroupsForChannel_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getGroupsForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getGroupsForChannel_result result = new getGroupsForChannel_result();
        try {
          result.success = iface_.getGroupsForChannel(args.groupIds);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getGroupsForChannel");
          oprot.writeMessageBegin(new TMessage("getGroupsForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getGroupsForChannel", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getUserCreateTime implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getUserCreateTime_args args = new getUserCreateTime_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getUserCreateTime", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getUserCreateTime_result result = new getUserCreateTime_result();
        try {
          result.success = iface_.getUserCreateTime();
          result.setSuccessIsSet(true);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getUserCreateTime");
          oprot.writeMessageBegin(new TMessage("getUserCreateTime", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getUserCreateTime", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class registerChannelCP implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        registerChannelCP_args args = new registerChannelCP_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("registerChannelCP", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        registerChannelCP_result result = new registerChannelCP_result();
        try {
          result.success = iface_.registerChannelCP(args.cpId, args.registerPassword);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerChannelCP");
          oprot.writeMessageBegin(new TMessage("registerChannelCP", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("registerChannelCP", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class reserveCallCreditPurchase implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        reserveCallCreditPurchase_args args = new reserveCallCreditPurchase_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("reserveCallCreditPurchase", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        reserveCallCreditPurchase_result result = new reserveCallCreditPurchase_result();
        try {
          result.success = iface_.reserveCallCreditPurchase(args.request);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing reserveCallCreditPurchase");
          oprot.writeMessageBegin(new TMessage("reserveCallCreditPurchase", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("reserveCallCreditPurchase", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class acquirePaidCallCurrencyExchangeRate implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        acquirePaidCallCurrencyExchangeRate_args args = new acquirePaidCallCurrencyExchangeRate_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("acquirePaidCallCurrencyExchangeRate", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        acquirePaidCallCurrencyExchangeRate_result result = new acquirePaidCallCurrencyExchangeRate_result();
        try {
          result.success = iface_.acquirePaidCallCurrencyExchangeRate(args.language);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing acquirePaidCallCurrencyExchangeRate");
          oprot.writeMessageBegin(new TMessage("acquirePaidCallCurrencyExchangeRate", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("acquirePaidCallCurrencyExchangeRate", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getRoomMemberMidsForAppPlatform implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getRoomMemberMidsForAppPlatform_args args = new getRoomMemberMidsForAppPlatform_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getRoomMemberMidsForAppPlatform", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getRoomMemberMidsForAppPlatform_result result = new getRoomMemberMidsForAppPlatform_result();
        try {
          result.success = iface_.getRoomMemberMidsForAppPlatform(args.roomId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getRoomMemberMidsForAppPlatform");
          oprot.writeMessageBegin(new TMessage("getRoomMemberMidsForAppPlatform", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getRoomMemberMidsForAppPlatform", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getPaidCallBalanceList implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getPaidCallBalanceList_args args = new getPaidCallBalanceList_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getPaidCallBalanceList", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getPaidCallBalanceList_result result = new getPaidCallBalanceList_result();
        try {
          result.success = iface_.getPaidCallBalanceList(args.language);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getPaidCallBalanceList");
          oprot.writeMessageBegin(new TMessage("getPaidCallBalanceList", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getPaidCallBalanceList", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getPersonalInfos implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getPersonalInfos_args args = new getPersonalInfos_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getPersonalInfos", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getPersonalInfos_result result = new getPersonalInfos_result();
        try {
          result.success = iface_.getPersonalInfos(args.requiredPersonalInfos);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getPersonalInfos");
          oprot.writeMessageBegin(new TMessage("getPersonalInfos", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getPersonalInfos", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getPrimaryClientsForChannel implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getPrimaryClientsForChannel_args args = new getPrimaryClientsForChannel_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getPrimaryClientsForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getPrimaryClientsForChannel_result result = new getPrimaryClientsForChannel_result();
        try {
          result.success = iface_.getPrimaryClientsForChannel(args.userMids);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getPrimaryClientsForChannel");
          oprot.writeMessageBegin(new TMessage("getPrimaryClientsForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getPrimaryClientsForChannel", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class addBuddyToContact implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        addBuddyToContact_args args = new addBuddyToContact_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("addBuddyToContact", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        addBuddyToContact_result result = new addBuddyToContact_result();
        try {
          result.success = iface_.addBuddyToContact(args.buddyMid);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing addBuddyToContact");
          oprot.writeMessageBegin(new TMessage("addBuddyToContact", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("addBuddyToContact", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getGroupMemberMidsForAppPlatform implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getGroupMemberMidsForAppPlatform_args args = new getGroupMemberMidsForAppPlatform_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getGroupMemberMidsForAppPlatform", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getGroupMemberMidsForAppPlatform_result result = new getGroupMemberMidsForAppPlatform_result();
        try {
          result.success = iface_.getGroupMemberMidsForAppPlatform(args.groupId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getGroupMemberMidsForAppPlatform");
          oprot.writeMessageBegin(new TMessage("getGroupMemberMidsForAppPlatform", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getGroupMemberMidsForAppPlatform", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getUserLanguage implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getUserLanguage_args args = new getUserLanguage_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getUserLanguage", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getUserLanguage_result result = new getUserLanguage_result();
        try {
          result.success = iface_.getUserLanguage();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getUserLanguage");
          oprot.writeMessageBegin(new TMessage("getUserLanguage", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getUserLanguage", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lookupPaidCall implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lookupPaidCall_args args = new lookupPaidCall_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lookupPaidCall", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lookupPaidCall_result result = new lookupPaidCall_result();
        try {
          result.success = iface_.lookupPaidCall(args.dialedNumber, args.language, args.referer);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing lookupPaidCall");
          oprot.writeMessageBegin(new TMessage("lookupPaidCall", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("lookupPaidCall", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getExtendedProfile implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getExtendedProfile_args args = new getExtendedProfile_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getExtendedProfile", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getExtendedProfile_result result = new getExtendedProfile_result();
        try {
          result.success = iface_.getExtendedProfile();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getExtendedProfile");
          oprot.writeMessageBegin(new TMessage("getExtendedProfile", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getExtendedProfile", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getReverseCompactContacts implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getReverseCompactContacts_args args = new getReverseCompactContacts_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getReverseCompactContacts", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getReverseCompactContacts_result result = new getReverseCompactContacts_result();
        try {
          result.success = iface_.getReverseCompactContacts(args.ids);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getReverseCompactContacts");
          oprot.writeMessageBegin(new TMessage("getReverseCompactContacts", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getReverseCompactContacts", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getPaidCallAdStatus implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getPaidCallAdStatus_args args = new getPaidCallAdStatus_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getPaidCallAdStatus", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getPaidCallAdStatus_result result = new getPaidCallAdStatus_result();
        try {
          result.success = iface_.getPaidCallAdStatus();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getPaidCallAdStatus");
          oprot.writeMessageBegin(new TMessage("getPaidCallAdStatus", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getPaidCallAdStatus", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class findContactByUseridWithoutAbuseBlockForChannel implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        findContactByUseridWithoutAbuseBlockForChannel_args args = new findContactByUseridWithoutAbuseBlockForChannel_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("findContactByUseridWithoutAbuseBlockForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        findContactByUseridWithoutAbuseBlockForChannel_result result = new findContactByUseridWithoutAbuseBlockForChannel_result();
        try {
          result.success = iface_.findContactByUseridWithoutAbuseBlockForChannel(args.userid);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findContactByUseridWithoutAbuseBlockForChannel");
          oprot.writeMessageBegin(new TMessage("findContactByUseridWithoutAbuseBlockForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("findContactByUseridWithoutAbuseBlockForChannel", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getGroupMemberMids implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getGroupMemberMids_args args = new getGroupMemberMids_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getGroupMemberMids", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getGroupMemberMids_result result = new getGroupMemberMids_result();
        try {
          result.success = iface_.getGroupMemberMids(args.groupId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getGroupMemberMids");
          oprot.writeMessageBegin(new TMessage("getGroupMemberMids", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getGroupMemberMids", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class sendMessageWithoutRelationship implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        sendMessageWithoutRelationship_args args = new sendMessageWithoutRelationship_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("sendMessageWithoutRelationship", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        sendMessageWithoutRelationship_result result = new sendMessageWithoutRelationship_result();
        try {
          result.success = iface_.sendMessageWithoutRelationship(args.message);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendMessageWithoutRelationship");
          oprot.writeMessageBegin(new TMessage("sendMessageWithoutRelationship", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("sendMessageWithoutRelationship", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class displayBuddySubscriberCountInBulk implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        displayBuddySubscriberCountInBulk_args args = new displayBuddySubscriberCountInBulk_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("displayBuddySubscriberCountInBulk", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        displayBuddySubscriberCountInBulk_result result = new displayBuddySubscriberCountInBulk_result();
        try {
          result.success = iface_.displayBuddySubscriberCountInBulk(args.mids);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing displayBuddySubscriberCountInBulk");
          oprot.writeMessageBegin(new TMessage("displayBuddySubscriberCountInBulk", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("displayBuddySubscriberCountInBulk", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class lookupRoomMembers implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        lookupRoomMembers_args args = new lookupRoomMembers_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("lookupRoomMembers", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        lookupRoomMembers_result result = new lookupRoomMembers_result();
        try {
          result.success = iface_.lookupRoomMembers(args.roomId, args.mids);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing lookupRoomMembers");
          oprot.writeMessageBegin(new TMessage("lookupRoomMembers", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("lookupRoomMembers", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getFavoriteMidsForChannel implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getFavoriteMidsForChannel_args args = new getFavoriteMidsForChannel_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getFavoriteMidsForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getFavoriteMidsForChannel_result result = new getFavoriteMidsForChannel_result();
        try {
          result.success = iface_.getFavoriteMidsForChannel();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getFavoriteMidsForChannel");
          oprot.writeMessageBegin(new TMessage("getFavoriteMidsForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getFavoriteMidsForChannel", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getAllContactIdsForChannel implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getAllContactIdsForChannel_args args = new getAllContactIdsForChannel_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getAllContactIdsForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getAllContactIdsForChannel_result result = new getAllContactIdsForChannel_result();
        try {
          result.success = iface_.getAllContactIdsForChannel();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getAllContactIdsForChannel");
          oprot.writeMessageBegin(new TMessage("getAllContactIdsForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getAllContactIdsForChannel", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class displayBuddySubscriberCount implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        displayBuddySubscriberCount_args args = new displayBuddySubscriberCount_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("displayBuddySubscriberCount", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        displayBuddySubscriberCount_result result = new displayBuddySubscriberCount_result();
        try {
          result.success = iface_.displayBuddySubscriberCount();
          result.setSuccessIsSet(true);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing displayBuddySubscriberCount");
          oprot.writeMessageBegin(new TMessage("displayBuddySubscriberCount", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("displayBuddySubscriberCount", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getProfileForChannel implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getProfileForChannel_args args = new getProfileForChannel_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getProfileForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getProfileForChannel_result result = new getProfileForChannel_result();
        try {
          result.success = iface_.getProfileForChannel();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getProfileForChannel");
          oprot.writeMessageBegin(new TMessage("getProfileForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getProfileForChannel", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getUserTickets implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getUserTickets_args args = new getUserTickets_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getUserTickets", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getUserTickets_result result = new getUserTickets_result();
        try {
          result.success = iface_.getUserTickets(args.userMids);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getUserTickets");
          oprot.writeMessageBegin(new TMessage("getUserTickets", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getUserTickets", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getOAFriendMids implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getOAFriendMids_args args = new getOAFriendMids_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getOAFriendMids", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getOAFriendMids_result result = new getOAFriendMids_result();
        try {
          result.success = iface_.getOAFriendMids();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getOAFriendMids");
          oprot.writeMessageBegin(new TMessage("getOAFriendMids", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getOAFriendMids", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class searchPaidCallUserRate implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        searchPaidCallUserRate_args args = new searchPaidCallUserRate_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("searchPaidCallUserRate", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        searchPaidCallUserRate_result result = new searchPaidCallUserRate_result();
        try {
          result.success = iface_.searchPaidCallUserRate(args.countryCode, args.language);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing searchPaidCallUserRate");
          oprot.writeMessageBegin(new TMessage("searchPaidCallUserRate", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("searchPaidCallUserRate", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getJoinedGroupIdsForChannel implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getJoinedGroupIdsForChannel_args args = new getJoinedGroupIdsForChannel_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getJoinedGroupIdsForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getJoinedGroupIdsForChannel_result result = new getJoinedGroupIdsForChannel_result();
        try {
          result.success = iface_.getJoinedGroupIdsForChannel();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getJoinedGroupIdsForChannel");
          oprot.writeMessageBegin(new TMessage("getJoinedGroupIdsForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getJoinedGroupIdsForChannel", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class acquireGroupCallRoute implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        acquireGroupCallRoute_args args = new acquireGroupCallRoute_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("acquireGroupCallRoute", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        acquireGroupCallRoute_result result = new acquireGroupCallRoute_result();
        try {
          result.success = iface_.acquireGroupCallRoute(args.chatMid, args.mediaType);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing acquireGroupCallRoute");
          oprot.writeMessageBegin(new TMessage("acquireGroupCallRoute", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("acquireGroupCallRoute", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getUserMidsWhoAddedMe implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getUserMidsWhoAddedMe_args args = new getUserMidsWhoAddedMe_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getUserMidsWhoAddedMe", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getUserMidsWhoAddedMe_result result = new getUserMidsWhoAddedMe_result();
        try {
          result.success = iface_.getUserMidsWhoAddedMe();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getUserMidsWhoAddedMe");
          oprot.writeMessageBegin(new TMessage("getUserMidsWhoAddedMe", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getUserMidsWhoAddedMe", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getIdentityCredential implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getIdentityCredential_args args = new getIdentityCredential_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getIdentityCredential", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getIdentityCredential_result result = new getIdentityCredential_result();
        try {
          result.success = iface_.getIdentityCredential();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getIdentityCredential");
          oprot.writeMessageBegin(new TMessage("getIdentityCredential", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getIdentityCredential", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class addOperationForChannel implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        addOperationForChannel_args args = new addOperationForChannel_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("addOperationForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        addOperationForChannel_result result = new addOperationForChannel_result();
        try {
          iface_.addOperationForChannel(args.opType, args.param1, args.param2, args.param3);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing addOperationForChannel");
          oprot.writeMessageBegin(new TMessage("addOperationForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("addOperationForChannel", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getSimpleChannelContacts implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getSimpleChannelContacts_args args = new getSimpleChannelContacts_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getSimpleChannelContacts", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getSimpleChannelContacts_result result = new getSimpleChannelContacts_result();
        try {
          result.success = iface_.getSimpleChannelContacts(args.ids, args.statusSticonFallbackDisabled);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getSimpleChannelContacts");
          oprot.writeMessageBegin(new TMessage("getSimpleChannelContacts", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getSimpleChannelContacts", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getUserLastSentMessageTimeStamp implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getUserLastSentMessageTimeStamp_args args = new getUserLastSentMessageTimeStamp_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getUserLastSentMessageTimeStamp", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getUserLastSentMessageTimeStamp_result result = new getUserLastSentMessageTimeStamp_result();
        try {
          result.success = iface_.getUserLastSentMessageTimeStamp(args.mid);
          result.setSuccessIsSet(true);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getUserLastSentMessageTimeStamp");
          oprot.writeMessageBegin(new TMessage("getUserLastSentMessageTimeStamp", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getUserLastSentMessageTimeStamp", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class getUserStatus_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUserStatus_args");

    private static final TField MID_FIELD_DESC = new TField("mid", TType.STRING, (short)1);

    private String mid;

    // isset id assignments

    public getUserStatus_args() {
    }

    public getUserStatus_args(
      String mid)
    {
      this();
      this.mid = mid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserStatus_args(getUserStatus_args other) {
      if (other.isSetMid()) {
        this.mid = other.mid;
      }
    }

    public getUserStatus_args deepCopy() {
      return new getUserStatus_args(this);
    }

    public void clear() {
      this.mid = null;
    }

    public String getMid() {
      return this.mid;
    }

    public void setMid(String mid) {
      this.mid = mid;
    }

    public void unsetMid() {
      this.mid = null;
    }

    /** Returns true if field mid is set (has been assigned a value) and false otherwise */
    public boolean isSetMid() {
      return this.mid != null;
    }

    public void setMidIsSet(boolean value) {
      if (!value) {
        this.mid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserStatus_args)
        return this.equals((getUserStatus_args)that);
      return false;
    }

    public boolean equals(getUserStatus_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mid = true && this.isSetMid();
      boolean that_present_mid = true && that.isSetMid();
      if (this_present_mid || that_present_mid) {
        if (!(this_present_mid && that_present_mid))
          return false;
        if (!this.mid.equals(that.mid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUserStatus_args other = (getUserStatus_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetMid(), other.isSetMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMid()) {
        lastComparison = TBaseHelper.compareTo(this.mid, other.mid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MID
            if (field.type == TType.STRING) {
              this.mid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.mid != null) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeString(this.mid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUserStatus_args(");
      boolean first = true;

      sb.append("mid:");
      if (this.mid == null) {
        sb.append("null");
      } else {
        sb.append(this.mid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUserStatus_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUserStatus_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I32, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private UserStatus success;
    private TalkException e;

    // isset id assignments

    public getUserStatus_result() {
    }

    public getUserStatus_result(
      UserStatus success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserStatus_result(getUserStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getUserStatus_result deepCopy() {
      return new getUserStatus_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    /**
     * 
     * @see UserStatus
     */
    public UserStatus getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see UserStatus
     */
    public void setSuccess(UserStatus success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserStatus_result)
        return this.equals((getUserStatus_result)that);
      return false;
    }

    public boolean equals(getUserStatus_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUserStatus_result other = (getUserStatus_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I32) {
              this.success = UserStatus.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI32(this.success.getValue());
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUserStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateProfileAttributeForChannel_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateProfileAttributeForChannel_args");

    private static final TField PROFILE_ATTRIBUTE_FIELD_DESC = new TField("profileAttribute", TType.I32, (short)2);
    private static final TField VALUE_FIELD_DESC = new TField("value", TType.STRING, (short)3);

    private ProfileAttribute profileAttribute;
    private String value;

    // isset id assignments

    public updateProfileAttributeForChannel_args() {
    }

    public updateProfileAttributeForChannel_args(
      ProfileAttribute profileAttribute,
      String value)
    {
      this();
      this.profileAttribute = profileAttribute;
      this.value = value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProfileAttributeForChannel_args(updateProfileAttributeForChannel_args other) {
      if (other.isSetProfileAttribute()) {
        this.profileAttribute = other.profileAttribute;
      }
      if (other.isSetValue()) {
        this.value = other.value;
      }
    }

    public updateProfileAttributeForChannel_args deepCopy() {
      return new updateProfileAttributeForChannel_args(this);
    }

    public void clear() {
      this.profileAttribute = null;
      this.value = null;
    }

    /**
     * 
     * @see ProfileAttribute
     */
    public ProfileAttribute getProfileAttribute() {
      return this.profileAttribute;
    }

    /**
     * 
     * @see ProfileAttribute
     */
    public void setProfileAttribute(ProfileAttribute profileAttribute) {
      this.profileAttribute = profileAttribute;
    }

    public void unsetProfileAttribute() {
      this.profileAttribute = null;
    }

    /** Returns true if field profileAttribute is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileAttribute() {
      return this.profileAttribute != null;
    }

    public void setProfileAttributeIsSet(boolean value) {
      if (!value) {
        this.profileAttribute = null;
      }
    }

    public String getValue() {
      return this.value;
    }

    public void setValue(String value) {
      this.value = value;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProfileAttributeForChannel_args)
        return this.equals((updateProfileAttributeForChannel_args)that);
      return false;
    }

    public boolean equals(updateProfileAttributeForChannel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_profileAttribute = true && this.isSetProfileAttribute();
      boolean that_present_profileAttribute = true && that.isSetProfileAttribute();
      if (this_present_profileAttribute || that_present_profileAttribute) {
        if (!(this_present_profileAttribute && that_present_profileAttribute))
          return false;
        if (!this.profileAttribute.equals(that.profileAttribute))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateProfileAttributeForChannel_args other = (updateProfileAttributeForChannel_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetProfileAttribute(), other.isSetProfileAttribute());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileAttribute()) {
        lastComparison = TBaseHelper.compareTo(this.profileAttribute, other.profileAttribute);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetValue(), other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // PROFILE_ATTRIBUTE
            if (field.type == TType.I32) {
              this.profileAttribute = ProfileAttribute.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // VALUE
            if (field.type == TType.STRING) {
              this.value = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.profileAttribute != null) {
        oprot.writeFieldBegin(PROFILE_ATTRIBUTE_FIELD_DESC);
        oprot.writeI32(this.profileAttribute.getValue());
        oprot.writeFieldEnd();
      }
      if (this.value != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeString(this.value);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateProfileAttributeForChannel_args(");
      boolean first = true;

      sb.append("profileAttribute:");
      if (this.profileAttribute == null) {
        sb.append("null");
      } else {
        sb.append(this.profileAttribute);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateProfileAttributeForChannel_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateProfileAttributeForChannel_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public updateProfileAttributeForChannel_result() {
    }

    public updateProfileAttributeForChannel_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProfileAttributeForChannel_result(updateProfileAttributeForChannel_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public updateProfileAttributeForChannel_result deepCopy() {
      return new updateProfileAttributeForChannel_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProfileAttributeForChannel_result)
        return this.equals((updateProfileAttributeForChannel_result)that);
      return false;
    }

    public boolean equals(updateProfileAttributeForChannel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateProfileAttributeForChannel_result other = (updateProfileAttributeForChannel_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateProfileAttributeForChannel_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateExtendedProfileAttribute_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateExtendedProfileAttribute_args");

    private static final TField ATTR_FIELD_DESC = new TField("attr", TType.I32, (short)1);
    private static final TField EXTENDED_PROFILE_FIELD_DESC = new TField("extendedProfile", TType.STRUCT, (short)2);

    private ExtendedProfileAttribute attr;
    private ExtendedProfile extendedProfile;

    // isset id assignments

    public updateExtendedProfileAttribute_args() {
    }

    public updateExtendedProfileAttribute_args(
      ExtendedProfileAttribute attr,
      ExtendedProfile extendedProfile)
    {
      this();
      this.attr = attr;
      this.extendedProfile = extendedProfile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateExtendedProfileAttribute_args(updateExtendedProfileAttribute_args other) {
      if (other.isSetAttr()) {
        this.attr = other.attr;
      }
      if (other.isSetExtendedProfile()) {
        this.extendedProfile = new ExtendedProfile(other.extendedProfile);
      }
    }

    public updateExtendedProfileAttribute_args deepCopy() {
      return new updateExtendedProfileAttribute_args(this);
    }

    public void clear() {
      this.attr = null;
      this.extendedProfile = null;
    }

    /**
     * 
     * @see ExtendedProfileAttribute
     */
    public ExtendedProfileAttribute getAttr() {
      return this.attr;
    }

    /**
     * 
     * @see ExtendedProfileAttribute
     */
    public void setAttr(ExtendedProfileAttribute attr) {
      this.attr = attr;
    }

    public void unsetAttr() {
      this.attr = null;
    }

    /** Returns true if field attr is set (has been assigned a value) and false otherwise */
    public boolean isSetAttr() {
      return this.attr != null;
    }

    public void setAttrIsSet(boolean value) {
      if (!value) {
        this.attr = null;
      }
    }

    public ExtendedProfile getExtendedProfile() {
      return this.extendedProfile;
    }

    public void setExtendedProfile(ExtendedProfile extendedProfile) {
      this.extendedProfile = extendedProfile;
    }

    public void unsetExtendedProfile() {
      this.extendedProfile = null;
    }

    /** Returns true if field extendedProfile is set (has been assigned a value) and false otherwise */
    public boolean isSetExtendedProfile() {
      return this.extendedProfile != null;
    }

    public void setExtendedProfileIsSet(boolean value) {
      if (!value) {
        this.extendedProfile = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateExtendedProfileAttribute_args)
        return this.equals((updateExtendedProfileAttribute_args)that);
      return false;
    }

    public boolean equals(updateExtendedProfileAttribute_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_attr = true && this.isSetAttr();
      boolean that_present_attr = true && that.isSetAttr();
      if (this_present_attr || that_present_attr) {
        if (!(this_present_attr && that_present_attr))
          return false;
        if (!this.attr.equals(that.attr))
          return false;
      }

      boolean this_present_extendedProfile = true && this.isSetExtendedProfile();
      boolean that_present_extendedProfile = true && that.isSetExtendedProfile();
      if (this_present_extendedProfile || that_present_extendedProfile) {
        if (!(this_present_extendedProfile && that_present_extendedProfile))
          return false;
        if (!this.extendedProfile.equals(that.extendedProfile))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateExtendedProfileAttribute_args other = (updateExtendedProfileAttribute_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAttr(), other.isSetAttr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttr()) {
        lastComparison = TBaseHelper.compareTo(this.attr, other.attr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetExtendedProfile(), other.isSetExtendedProfile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExtendedProfile()) {
        lastComparison = this.extendedProfile.compareTo(other.extendedProfile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ATTR
            if (field.type == TType.I32) {
              this.attr = ExtendedProfileAttribute.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // EXTENDED_PROFILE
            if (field.type == TType.STRUCT) {
              this.extendedProfile = new ExtendedProfile();
              this.extendedProfile.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.attr != null) {
        oprot.writeFieldBegin(ATTR_FIELD_DESC);
        oprot.writeI32(this.attr.getValue());
        oprot.writeFieldEnd();
      }
      if (this.extendedProfile != null) {
        oprot.writeFieldBegin(EXTENDED_PROFILE_FIELD_DESC);
        this.extendedProfile.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateExtendedProfileAttribute_args(");
      boolean first = true;

      sb.append("attr:");
      if (this.attr == null) {
        sb.append("null");
      } else {
        sb.append(this.attr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("extendedProfile:");
      if (this.extendedProfile == null) {
        sb.append("null");
      } else {
        sb.append(this.extendedProfile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateExtendedProfileAttribute_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateExtendedProfileAttribute_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public updateExtendedProfileAttribute_result() {
    }

    public updateExtendedProfileAttribute_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateExtendedProfileAttribute_result(updateExtendedProfileAttribute_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public updateExtendedProfileAttribute_result deepCopy() {
      return new updateExtendedProfileAttribute_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateExtendedProfileAttribute_result)
        return this.equals((updateExtendedProfileAttribute_result)that);
      return false;
    }

    public boolean equals(updateExtendedProfileAttribute_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateExtendedProfileAttribute_result other = (updateExtendedProfileAttribute_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateExtendedProfileAttribute_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getAllSimpleChannelContacts_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getAllSimpleChannelContacts_args");

    private static final TField STATUS_STICON_FALLBACK_DISABLED_FIELD_DESC = new TField("statusSticonFallbackDisabled", TType.BOOL, (short)1);

    private boolean statusSticonFallbackDisabled;

    // isset id assignments
    private static final int __STATUSSTICONFALLBACKDISABLED_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getAllSimpleChannelContacts_args() {
    }

    public getAllSimpleChannelContacts_args(
      boolean statusSticonFallbackDisabled)
    {
      this();
      this.statusSticonFallbackDisabled = statusSticonFallbackDisabled;
      setStatusSticonFallbackDisabledIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllSimpleChannelContacts_args(getAllSimpleChannelContacts_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.statusSticonFallbackDisabled = other.statusSticonFallbackDisabled;
    }

    public getAllSimpleChannelContacts_args deepCopy() {
      return new getAllSimpleChannelContacts_args(this);
    }

    public void clear() {
      setStatusSticonFallbackDisabledIsSet(false);
      this.statusSticonFallbackDisabled = false;
    }

    public boolean isStatusSticonFallbackDisabled() {
      return this.statusSticonFallbackDisabled;
    }

    public void setStatusSticonFallbackDisabled(boolean statusSticonFallbackDisabled) {
      this.statusSticonFallbackDisabled = statusSticonFallbackDisabled;
      setStatusSticonFallbackDisabledIsSet(true);
    }

    public void unsetStatusSticonFallbackDisabled() {
      __isset_vector[__STATUSSTICONFALLBACKDISABLED_ISSET_ID] = false;
    }

    /** Returns true if field statusSticonFallbackDisabled is set (has been assigned a value) and false otherwise */
    public boolean isSetStatusSticonFallbackDisabled() {
      return __isset_vector[__STATUSSTICONFALLBACKDISABLED_ISSET_ID];
    }

    public void setStatusSticonFallbackDisabledIsSet(boolean value) {
      __isset_vector[__STATUSSTICONFALLBACKDISABLED_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllSimpleChannelContacts_args)
        return this.equals((getAllSimpleChannelContacts_args)that);
      return false;
    }

    public boolean equals(getAllSimpleChannelContacts_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_statusSticonFallbackDisabled = true;
      boolean that_present_statusSticonFallbackDisabled = true;
      if (this_present_statusSticonFallbackDisabled || that_present_statusSticonFallbackDisabled) {
        if (!(this_present_statusSticonFallbackDisabled && that_present_statusSticonFallbackDisabled))
          return false;
        if (this.statusSticonFallbackDisabled != that.statusSticonFallbackDisabled)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getAllSimpleChannelContacts_args other = (getAllSimpleChannelContacts_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetStatusSticonFallbackDisabled(), other.isSetStatusSticonFallbackDisabled());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatusSticonFallbackDisabled()) {
        lastComparison = TBaseHelper.compareTo(this.statusSticonFallbackDisabled, other.statusSticonFallbackDisabled);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // STATUS_STICON_FALLBACK_DISABLED
            if (field.type == TType.BOOL) {
              this.statusSticonFallbackDisabled = iprot.readBool();
              setStatusSticonFallbackDisabledIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(STATUS_STICON_FALLBACK_DISABLED_FIELD_DESC);
      oprot.writeBool(this.statusSticonFallbackDisabled);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getAllSimpleChannelContacts_args(");
      boolean first = true;

      sb.append("statusSticonFallbackDisabled:");
      sb.append(this.statusSticonFallbackDisabled);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getAllSimpleChannelContacts_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getAllSimpleChannelContacts_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getAllSimpleChannelContacts_result() {
    }

    public getAllSimpleChannelContacts_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllSimpleChannelContacts_result(getAllSimpleChannelContacts_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          SimpleChannelContact other_element = (SimpleChannelContact)other_enum.nextElement();
          __this__success.addElement(new SimpleChannelContact(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getAllSimpleChannelContacts_result deepCopy() {
      return new getAllSimpleChannelContacts_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(SimpleChannelContact elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllSimpleChannelContacts_result)
        return this.equals((getAllSimpleChannelContacts_result)that);
      return false;
    }

    public boolean equals(getAllSimpleChannelContacts_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getAllSimpleChannelContacts_result other = (getAllSimpleChannelContacts_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list1191 = iprot.readListBegin();
                this.success = new Vector(_list1191.size);
                for (int _i1192 = 0; _i1192 < _list1191.size; ++_i1192)
                {
                  SimpleChannelContact _elem1193;
                  _elem1193 = new SimpleChannelContact();
                  _elem1193.read(iprot);
                  this.success.addElement(_elem1193);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter1194_enum = this.success.elements(); _iter1194_enum.hasMoreElements(); )           {
            SimpleChannelContact _iter1194 = (SimpleChannelContact)_iter1194_enum.nextElement();
            _iter1194.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getAllSimpleChannelContacts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUserIdentities_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUserIdentities_args");


    public getUserIdentities_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserIdentities_args(getUserIdentities_args other) {
    }

    public getUserIdentities_args deepCopy() {
      return new getUserIdentities_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserIdentities_args)
        return this.equals((getUserIdentities_args)that);
      return false;
    }

    public boolean equals(getUserIdentities_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUserIdentities_args other = (getUserIdentities_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUserIdentities_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUserIdentities_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUserIdentities_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.MAP, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Hashtable success;
    private TalkException e;

    // isset id assignments

    public getUserIdentities_result() {
    }

    public getUserIdentities_result(
      Hashtable success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserIdentities_result(getUserIdentities_result other) {
      if (other.isSetSuccess()) {
        Hashtable __this__success = new Hashtable();
        for (Enumeration other_enum = other.success.keys(); other_enum.hasMoreElements(); ) {

          RegistrationType other_element_key = (RegistrationType)other_enum.nextElement();
          String other_element_value = (String)other.success.get(other_element_key);

          RegistrationType __this__success_copy_key = other_element_key;

          String __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getUserIdentities_result deepCopy() {
      return new getUserIdentities_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(RegistrationType key, String val) {
      if (this.success == null) {
        this.success = new Hashtable();
      }
      this.success.put(key, val);
    }

    public Hashtable getSuccess() {
      return this.success;
    }

    public void setSuccess(Hashtable success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserIdentities_result)
        return this.equals((getUserIdentities_result)that);
      return false;
    }

    public boolean equals(getUserIdentities_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUserIdentities_result other = (getUserIdentities_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.MAP) {
              {
                TMap _map1195 = iprot.readMapBegin();
                this.success = new Hashtable(2*_map1195.size);
                for (int _i1196 = 0; _i1196 < _map1195.size; ++_i1196)
                {
                  RegistrationType _key1197;
                  String _val1198;
                  _key1197 = RegistrationType.findByValue(iprot.readI32());
                  _val1198 = iprot.readString();
                  this.success.put(_key1197, _val1198);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.I32, TType.STRING, this.success.size()));
          for (Enumeration _iter1199_enum = this.success.keys(); _iter1199_enum.hasMoreElements(); )           {
            RegistrationType _iter1199 = (RegistrationType)_iter1199_enum.nextElement();
            oprot.writeI32(_iter1199.getValue());
            oprot.writeString(((String)this.success.get(_iter1199)));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUserIdentities_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class markPaidCallAd_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("markPaidCallAd_args");

    private static final TField DIALED_NUMBER_FIELD_DESC = new TField("dialedNumber", TType.STRING, (short)2);
    private static final TField LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, (short)3);
    private static final TField DISABLE_CALLER_ID_FIELD_DESC = new TField("disableCallerId", TType.BOOL, (short)4);

    private String dialedNumber;
    private String language;
    private boolean disableCallerId;

    // isset id assignments
    private static final int __DISABLECALLERID_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public markPaidCallAd_args() {
    }

    public markPaidCallAd_args(
      String dialedNumber,
      String language,
      boolean disableCallerId)
    {
      this();
      this.dialedNumber = dialedNumber;
      this.language = language;
      this.disableCallerId = disableCallerId;
      setDisableCallerIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public markPaidCallAd_args(markPaidCallAd_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetDialedNumber()) {
        this.dialedNumber = other.dialedNumber;
      }
      if (other.isSetLanguage()) {
        this.language = other.language;
      }
      this.disableCallerId = other.disableCallerId;
    }

    public markPaidCallAd_args deepCopy() {
      return new markPaidCallAd_args(this);
    }

    public void clear() {
      this.dialedNumber = null;
      this.language = null;
      setDisableCallerIdIsSet(false);
      this.disableCallerId = false;
    }

    public String getDialedNumber() {
      return this.dialedNumber;
    }

    public void setDialedNumber(String dialedNumber) {
      this.dialedNumber = dialedNumber;
    }

    public void unsetDialedNumber() {
      this.dialedNumber = null;
    }

    /** Returns true if field dialedNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetDialedNumber() {
      return this.dialedNumber != null;
    }

    public void setDialedNumberIsSet(boolean value) {
      if (!value) {
        this.dialedNumber = null;
      }
    }

    public String getLanguage() {
      return this.language;
    }

    public void setLanguage(String language) {
      this.language = language;
    }

    public void unsetLanguage() {
      this.language = null;
    }

    /** Returns true if field language is set (has been assigned a value) and false otherwise */
    public boolean isSetLanguage() {
      return this.language != null;
    }

    public void setLanguageIsSet(boolean value) {
      if (!value) {
        this.language = null;
      }
    }

    public boolean isDisableCallerId() {
      return this.disableCallerId;
    }

    public void setDisableCallerId(boolean disableCallerId) {
      this.disableCallerId = disableCallerId;
      setDisableCallerIdIsSet(true);
    }

    public void unsetDisableCallerId() {
      __isset_vector[__DISABLECALLERID_ISSET_ID] = false;
    }

    /** Returns true if field disableCallerId is set (has been assigned a value) and false otherwise */
    public boolean isSetDisableCallerId() {
      return __isset_vector[__DISABLECALLERID_ISSET_ID];
    }

    public void setDisableCallerIdIsSet(boolean value) {
      __isset_vector[__DISABLECALLERID_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof markPaidCallAd_args)
        return this.equals((markPaidCallAd_args)that);
      return false;
    }

    public boolean equals(markPaidCallAd_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_dialedNumber = true && this.isSetDialedNumber();
      boolean that_present_dialedNumber = true && that.isSetDialedNumber();
      if (this_present_dialedNumber || that_present_dialedNumber) {
        if (!(this_present_dialedNumber && that_present_dialedNumber))
          return false;
        if (!this.dialedNumber.equals(that.dialedNumber))
          return false;
      }

      boolean this_present_language = true && this.isSetLanguage();
      boolean that_present_language = true && that.isSetLanguage();
      if (this_present_language || that_present_language) {
        if (!(this_present_language && that_present_language))
          return false;
        if (!this.language.equals(that.language))
          return false;
      }

      boolean this_present_disableCallerId = true;
      boolean that_present_disableCallerId = true;
      if (this_present_disableCallerId || that_present_disableCallerId) {
        if (!(this_present_disableCallerId && that_present_disableCallerId))
          return false;
        if (this.disableCallerId != that.disableCallerId)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      markPaidCallAd_args other = (markPaidCallAd_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetDialedNumber(), other.isSetDialedNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDialedNumber()) {
        lastComparison = TBaseHelper.compareTo(this.dialedNumber, other.dialedNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLanguage(), other.isSetLanguage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLanguage()) {
        lastComparison = TBaseHelper.compareTo(this.language, other.language);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetDisableCallerId(), other.isSetDisableCallerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDisableCallerId()) {
        lastComparison = TBaseHelper.compareTo(this.disableCallerId, other.disableCallerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // DIALED_NUMBER
            if (field.type == TType.STRING) {
              this.dialedNumber = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // LANGUAGE
            if (field.type == TType.STRING) {
              this.language = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // DISABLE_CALLER_ID
            if (field.type == TType.BOOL) {
              this.disableCallerId = iprot.readBool();
              setDisableCallerIdIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.dialedNumber != null) {
        oprot.writeFieldBegin(DIALED_NUMBER_FIELD_DESC);
        oprot.writeString(this.dialedNumber);
        oprot.writeFieldEnd();
      }
      if (this.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(this.language);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DISABLE_CALLER_ID_FIELD_DESC);
      oprot.writeBool(this.disableCallerId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("markPaidCallAd_args(");
      boolean first = true;

      sb.append("dialedNumber:");
      if (this.dialedNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.dialedNumber);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("disableCallerId:");
      sb.append(this.disableCallerId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class markPaidCallAd_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("markPaidCallAd_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private PaidCallDialing success;
    private TalkException e;

    // isset id assignments

    public markPaidCallAd_result() {
    }

    public markPaidCallAd_result(
      PaidCallDialing success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public markPaidCallAd_result(markPaidCallAd_result other) {
      if (other.isSetSuccess()) {
        this.success = new PaidCallDialing(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public markPaidCallAd_result deepCopy() {
      return new markPaidCallAd_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public PaidCallDialing getSuccess() {
      return this.success;
    }

    public void setSuccess(PaidCallDialing success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof markPaidCallAd_result)
        return this.equals((markPaidCallAd_result)that);
      return false;
    }

    public boolean equals(markPaidCallAd_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      markPaidCallAd_result other = (markPaidCallAd_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new PaidCallDialing();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("markPaidCallAd_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class isGroupMember_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("isGroupMember_args");

    private static final TField GROUP_ID_FIELD_DESC = new TField("groupId", TType.STRING, (short)1);

    private String groupId;

    // isset id assignments

    public isGroupMember_args() {
    }

    public isGroupMember_args(
      String groupId)
    {
      this();
      this.groupId = groupId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isGroupMember_args(isGroupMember_args other) {
      if (other.isSetGroupId()) {
        this.groupId = other.groupId;
      }
    }

    public isGroupMember_args deepCopy() {
      return new isGroupMember_args(this);
    }

    public void clear() {
      this.groupId = null;
    }

    public String getGroupId() {
      return this.groupId;
    }

    public void setGroupId(String groupId) {
      this.groupId = groupId;
    }

    public void unsetGroupId() {
      this.groupId = null;
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return this.groupId != null;
    }

    public void setGroupIdIsSet(boolean value) {
      if (!value) {
        this.groupId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isGroupMember_args)
        return this.equals((isGroupMember_args)that);
      return false;
    }

    public boolean equals(isGroupMember_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_groupId = true && this.isSetGroupId();
      boolean that_present_groupId = true && that.isSetGroupId();
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (!this.groupId.equals(that.groupId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      isGroupMember_args other = (isGroupMember_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetGroupId(), other.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = TBaseHelper.compareTo(this.groupId, other.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // GROUP_ID
            if (field.type == TType.STRING) {
              this.groupId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.groupId != null) {
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeString(this.groupId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("isGroupMember_args(");
      boolean first = true;

      sb.append("groupId:");
      if (this.groupId == null) {
        sb.append("null");
      } else {
        sb.append(this.groupId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class isGroupMember_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("isGroupMember_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private boolean success;
    private TalkException e;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public isGroupMember_result() {
    }

    public isGroupMember_result(
      boolean success,
      TalkException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isGroupMember_result(isGroupMember_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public isGroupMember_result deepCopy() {
      return new isGroupMember_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isGroupMember_result)
        return this.equals((isGroupMember_result)that);
      return false;
    }

    public boolean equals(isGroupMember_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      isGroupMember_result other = (isGroupMember_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("isGroupMember_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPhoneInfoFromPhoneNumber_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPhoneInfoFromPhoneNumber_args");

    private static final TField REGION_FIELD_DESC = new TField("region", TType.STRING, (short)1);
    private static final TField PHONE_NUMBER_FIELD_DESC = new TField("phoneNumber", TType.STRING, (short)2);

    private String region;
    private String phoneNumber;

    // isset id assignments

    public getPhoneInfoFromPhoneNumber_args() {
    }

    public getPhoneInfoFromPhoneNumber_args(
      String region,
      String phoneNumber)
    {
      this();
      this.region = region;
      this.phoneNumber = phoneNumber;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPhoneInfoFromPhoneNumber_args(getPhoneInfoFromPhoneNumber_args other) {
      if (other.isSetRegion()) {
        this.region = other.region;
      }
      if (other.isSetPhoneNumber()) {
        this.phoneNumber = other.phoneNumber;
      }
    }

    public getPhoneInfoFromPhoneNumber_args deepCopy() {
      return new getPhoneInfoFromPhoneNumber_args(this);
    }

    public void clear() {
      this.region = null;
      this.phoneNumber = null;
    }

    public String getRegion() {
      return this.region;
    }

    public void setRegion(String region) {
      this.region = region;
    }

    public void unsetRegion() {
      this.region = null;
    }

    /** Returns true if field region is set (has been assigned a value) and false otherwise */
    public boolean isSetRegion() {
      return this.region != null;
    }

    public void setRegionIsSet(boolean value) {
      if (!value) {
        this.region = null;
      }
    }

    public String getPhoneNumber() {
      return this.phoneNumber;
    }

    public void setPhoneNumber(String phoneNumber) {
      this.phoneNumber = phoneNumber;
    }

    public void unsetPhoneNumber() {
      this.phoneNumber = null;
    }

    /** Returns true if field phoneNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetPhoneNumber() {
      return this.phoneNumber != null;
    }

    public void setPhoneNumberIsSet(boolean value) {
      if (!value) {
        this.phoneNumber = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPhoneInfoFromPhoneNumber_args)
        return this.equals((getPhoneInfoFromPhoneNumber_args)that);
      return false;
    }

    public boolean equals(getPhoneInfoFromPhoneNumber_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_region = true && this.isSetRegion();
      boolean that_present_region = true && that.isSetRegion();
      if (this_present_region || that_present_region) {
        if (!(this_present_region && that_present_region))
          return false;
        if (!this.region.equals(that.region))
          return false;
      }

      boolean this_present_phoneNumber = true && this.isSetPhoneNumber();
      boolean that_present_phoneNumber = true && that.isSetPhoneNumber();
      if (this_present_phoneNumber || that_present_phoneNumber) {
        if (!(this_present_phoneNumber && that_present_phoneNumber))
          return false;
        if (!this.phoneNumber.equals(that.phoneNumber))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPhoneInfoFromPhoneNumber_args other = (getPhoneInfoFromPhoneNumber_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRegion(), other.isSetRegion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegion()) {
        lastComparison = TBaseHelper.compareTo(this.region, other.region);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPhoneNumber(), other.isSetPhoneNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPhoneNumber()) {
        lastComparison = TBaseHelper.compareTo(this.phoneNumber, other.phoneNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REGION
            if (field.type == TType.STRING) {
              this.region = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // PHONE_NUMBER
            if (field.type == TType.STRING) {
              this.phoneNumber = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.region != null) {
        oprot.writeFieldBegin(REGION_FIELD_DESC);
        oprot.writeString(this.region);
        oprot.writeFieldEnd();
      }
      if (this.phoneNumber != null) {
        oprot.writeFieldBegin(PHONE_NUMBER_FIELD_DESC);
        oprot.writeString(this.phoneNumber);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPhoneInfoFromPhoneNumber_args(");
      boolean first = true;

      sb.append("region:");
      if (this.region == null) {
        sb.append("null");
      } else {
        sb.append(this.region);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("phoneNumber:");
      if (this.phoneNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.phoneNumber);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPhoneInfoFromPhoneNumber_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPhoneInfoFromPhoneNumber_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private PhoneInfoForChannel success;
    private TalkException e;

    // isset id assignments

    public getPhoneInfoFromPhoneNumber_result() {
    }

    public getPhoneInfoFromPhoneNumber_result(
      PhoneInfoForChannel success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPhoneInfoFromPhoneNumber_result(getPhoneInfoFromPhoneNumber_result other) {
      if (other.isSetSuccess()) {
        this.success = new PhoneInfoForChannel(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getPhoneInfoFromPhoneNumber_result deepCopy() {
      return new getPhoneInfoFromPhoneNumber_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public PhoneInfoForChannel getSuccess() {
      return this.success;
    }

    public void setSuccess(PhoneInfoForChannel success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPhoneInfoFromPhoneNumber_result)
        return this.equals((getPhoneInfoFromPhoneNumber_result)that);
      return false;
    }

    public boolean equals(getPhoneInfoFromPhoneNumber_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPhoneInfoFromPhoneNumber_result other = (getPhoneInfoFromPhoneNumber_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new PhoneInfoForChannel();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPhoneInfoFromPhoneNumber_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class redeemPaidCallVoucher_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("redeemPaidCallVoucher_args");

    private static final TField SERIAL_FIELD_DESC = new TField("serial", TType.STRING, (short)2);
    private static final TField LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, (short)3);

    private String serial;
    private String language;

    // isset id assignments

    public redeemPaidCallVoucher_args() {
    }

    public redeemPaidCallVoucher_args(
      String serial,
      String language)
    {
      this();
      this.serial = serial;
      this.language = language;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public redeemPaidCallVoucher_args(redeemPaidCallVoucher_args other) {
      if (other.isSetSerial()) {
        this.serial = other.serial;
      }
      if (other.isSetLanguage()) {
        this.language = other.language;
      }
    }

    public redeemPaidCallVoucher_args deepCopy() {
      return new redeemPaidCallVoucher_args(this);
    }

    public void clear() {
      this.serial = null;
      this.language = null;
    }

    public String getSerial() {
      return this.serial;
    }

    public void setSerial(String serial) {
      this.serial = serial;
    }

    public void unsetSerial() {
      this.serial = null;
    }

    /** Returns true if field serial is set (has been assigned a value) and false otherwise */
    public boolean isSetSerial() {
      return this.serial != null;
    }

    public void setSerialIsSet(boolean value) {
      if (!value) {
        this.serial = null;
      }
    }

    public String getLanguage() {
      return this.language;
    }

    public void setLanguage(String language) {
      this.language = language;
    }

    public void unsetLanguage() {
      this.language = null;
    }

    /** Returns true if field language is set (has been assigned a value) and false otherwise */
    public boolean isSetLanguage() {
      return this.language != null;
    }

    public void setLanguageIsSet(boolean value) {
      if (!value) {
        this.language = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof redeemPaidCallVoucher_args)
        return this.equals((redeemPaidCallVoucher_args)that);
      return false;
    }

    public boolean equals(redeemPaidCallVoucher_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_serial = true && this.isSetSerial();
      boolean that_present_serial = true && that.isSetSerial();
      if (this_present_serial || that_present_serial) {
        if (!(this_present_serial && that_present_serial))
          return false;
        if (!this.serial.equals(that.serial))
          return false;
      }

      boolean this_present_language = true && this.isSetLanguage();
      boolean that_present_language = true && that.isSetLanguage();
      if (this_present_language || that_present_language) {
        if (!(this_present_language && that_present_language))
          return false;
        if (!this.language.equals(that.language))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      redeemPaidCallVoucher_args other = (redeemPaidCallVoucher_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSerial(), other.isSetSerial());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSerial()) {
        lastComparison = TBaseHelper.compareTo(this.serial, other.serial);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLanguage(), other.isSetLanguage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLanguage()) {
        lastComparison = TBaseHelper.compareTo(this.language, other.language);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // SERIAL
            if (field.type == TType.STRING) {
              this.serial = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // LANGUAGE
            if (field.type == TType.STRING) {
              this.language = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.serial != null) {
        oprot.writeFieldBegin(SERIAL_FIELD_DESC);
        oprot.writeString(this.serial);
        oprot.writeFieldEnd();
      }
      if (this.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(this.language);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("redeemPaidCallVoucher_args(");
      boolean first = true;

      sb.append("serial:");
      if (this.serial == null) {
        sb.append("null");
      } else {
        sb.append(this.serial);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class redeemPaidCallVoucher_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("redeemPaidCallVoucher_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private PaidCallRedeemResult success;
    private TalkException e;

    // isset id assignments

    public redeemPaidCallVoucher_result() {
    }

    public redeemPaidCallVoucher_result(
      PaidCallRedeemResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public redeemPaidCallVoucher_result(redeemPaidCallVoucher_result other) {
      if (other.isSetSuccess()) {
        this.success = new PaidCallRedeemResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public redeemPaidCallVoucher_result deepCopy() {
      return new redeemPaidCallVoucher_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public PaidCallRedeemResult getSuccess() {
      return this.success;
    }

    public void setSuccess(PaidCallRedeemResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof redeemPaidCallVoucher_result)
        return this.equals((redeemPaidCallVoucher_result)that);
      return false;
    }

    public boolean equals(redeemPaidCallVoucher_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      redeemPaidCallVoucher_result other = (redeemPaidCallVoucher_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new PaidCallRedeemResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("redeemPaidCallVoucher_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPreferredDisplayName_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPreferredDisplayName_args");

    private static final TField MIDS_FIELD_DESC = new TField("mids", TType.LIST, (short)1);

    private Vector mids;

    // isset id assignments

    public getPreferredDisplayName_args() {
    }

    public getPreferredDisplayName_args(
      Vector mids)
    {
      this();
      this.mids = mids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPreferredDisplayName_args(getPreferredDisplayName_args other) {
      if (other.isSetMids()) {
        Vector __this__mids = new Vector();
        for (Enumeration other_enum = other.mids.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__mids.addElement(other_element);
        }
        this.mids = __this__mids;
      }
    }

    public getPreferredDisplayName_args deepCopy() {
      return new getPreferredDisplayName_args(this);
    }

    public void clear() {
      this.mids = null;
    }

    public int getMidsSize() {
      return (this.mids == null) ? 0 : this.mids.size();
    }

    public Enumeration getMidsEnumeration() {
      return (this.mids == null) ? null : this.mids.elements();
    }

    public void addToMids(String elem) {
      if (this.mids == null) {
        this.mids = new Vector();
      }
      this.mids.addElement(elem);
    }

    public Vector getMids() {
      return this.mids;
    }

    public void setMids(Vector mids) {
      this.mids = mids;
    }

    public void unsetMids() {
      this.mids = null;
    }

    /** Returns true if field mids is set (has been assigned a value) and false otherwise */
    public boolean isSetMids() {
      return this.mids != null;
    }

    public void setMidsIsSet(boolean value) {
      if (!value) {
        this.mids = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPreferredDisplayName_args)
        return this.equals((getPreferredDisplayName_args)that);
      return false;
    }

    public boolean equals(getPreferredDisplayName_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mids = true && this.isSetMids();
      boolean that_present_mids = true && that.isSetMids();
      if (this_present_mids || that_present_mids) {
        if (!(this_present_mids && that_present_mids))
          return false;
        if (!this.mids.equals(that.mids))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPreferredDisplayName_args other = (getPreferredDisplayName_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetMids(), other.isSetMids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMids()) {
        lastComparison = TBaseHelper.compareTo(this.mids, other.mids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MIDS
            if (field.type == TType.LIST) {
              {
                TList _list1200 = iprot.readListBegin();
                this.mids = new Vector(_list1200.size);
                for (int _i1201 = 0; _i1201 < _list1200.size; ++_i1201)
                {
                  String _elem1202;
                  _elem1202 = iprot.readString();
                  this.mids.addElement(_elem1202);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.mids != null) {
        oprot.writeFieldBegin(MIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.mids.size()));
          for (Enumeration _iter1203_enum = this.mids.elements(); _iter1203_enum.hasMoreElements(); )           {
            String _iter1203 = (String)_iter1203_enum.nextElement();
            oprot.writeString(_iter1203);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPreferredDisplayName_args(");
      boolean first = true;

      sb.append("mids:");
      if (this.mids == null) {
        sb.append("null");
      } else {
        sb.append(this.mids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPreferredDisplayName_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPreferredDisplayName_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.MAP, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Hashtable success;
    private TalkException e;

    // isset id assignments

    public getPreferredDisplayName_result() {
    }

    public getPreferredDisplayName_result(
      Hashtable success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPreferredDisplayName_result(getPreferredDisplayName_result other) {
      if (other.isSetSuccess()) {
        Hashtable __this__success = new Hashtable();
        for (Enumeration other_enum = other.success.keys(); other_enum.hasMoreElements(); ) {

          String other_element_key = (String)other_enum.nextElement();
          String other_element_value = (String)other.success.get(other_element_key);

          String __this__success_copy_key = other_element_key;

          String __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getPreferredDisplayName_result deepCopy() {
      return new getPreferredDisplayName_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, String val) {
      if (this.success == null) {
        this.success = new Hashtable();
      }
      this.success.put(key, val);
    }

    public Hashtable getSuccess() {
      return this.success;
    }

    public void setSuccess(Hashtable success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPreferredDisplayName_result)
        return this.equals((getPreferredDisplayName_result)that);
      return false;
    }

    public boolean equals(getPreferredDisplayName_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPreferredDisplayName_result other = (getPreferredDisplayName_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.MAP) {
              {
                TMap _map1204 = iprot.readMapBegin();
                this.success = new Hashtable(2*_map1204.size);
                for (int _i1205 = 0; _i1205 < _map1204.size; ++_i1205)
                {
                  String _key1206;
                  String _val1207;
                  _key1206 = iprot.readString();
                  _val1207 = iprot.readString();
                  this.success.put(_key1206, _val1207);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.success.size()));
          for (Enumeration _iter1208_enum = this.success.keys(); _iter1208_enum.hasMoreElements(); )           {
            String _iter1208 = (String)_iter1208_enum.nextElement();
            oprot.writeString(_iter1208);
            oprot.writeString(((String)this.success.get(_iter1208)));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPreferredDisplayName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getContactsForChannel_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getContactsForChannel_args");

    private static final TField IDS_FIELD_DESC = new TField("ids", TType.LIST, (short)2);

    private Vector ids;

    // isset id assignments

    public getContactsForChannel_args() {
    }

    public getContactsForChannel_args(
      Vector ids)
    {
      this();
      this.ids = ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getContactsForChannel_args(getContactsForChannel_args other) {
      if (other.isSetIds()) {
        Vector __this__ids = new Vector();
        for (Enumeration other_enum = other.ids.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__ids.addElement(other_element);
        }
        this.ids = __this__ids;
      }
    }

    public getContactsForChannel_args deepCopy() {
      return new getContactsForChannel_args(this);
    }

    public void clear() {
      this.ids = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public Enumeration getIdsEnumeration() {
      return (this.ids == null) ? null : this.ids.elements();
    }

    public void addToIds(String elem) {
      if (this.ids == null) {
        this.ids = new Vector();
      }
      this.ids.addElement(elem);
    }

    public Vector getIds() {
      return this.ids;
    }

    public void setIds(Vector ids) {
      this.ids = ids;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getContactsForChannel_args)
        return this.equals((getContactsForChannel_args)that);
      return false;
    }

    public boolean equals(getContactsForChannel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getContactsForChannel_args other = (getContactsForChannel_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetIds(), other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // IDS
            if (field.type == TType.LIST) {
              {
                TList _list1209 = iprot.readListBegin();
                this.ids = new Vector(_list1209.size);
                for (int _i1210 = 0; _i1210 < _list1209.size; ++_i1210)
                {
                  String _elem1211;
                  _elem1211 = iprot.readString();
                  this.ids.addElement(_elem1211);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.ids != null) {
        oprot.writeFieldBegin(IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.ids.size()));
          for (Enumeration _iter1212_enum = this.ids.elements(); _iter1212_enum.hasMoreElements(); )           {
            String _iter1212 = (String)_iter1212_enum.nextElement();
            oprot.writeString(_iter1212);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getContactsForChannel_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getContactsForChannel_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getContactsForChannel_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getContactsForChannel_result() {
    }

    public getContactsForChannel_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getContactsForChannel_result(getContactsForChannel_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          Contact other_element = (Contact)other_enum.nextElement();
          __this__success.addElement(new Contact(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getContactsForChannel_result deepCopy() {
      return new getContactsForChannel_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(Contact elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getContactsForChannel_result)
        return this.equals((getContactsForChannel_result)that);
      return false;
    }

    public boolean equals(getContactsForChannel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getContactsForChannel_result other = (getContactsForChannel_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list1213 = iprot.readListBegin();
                this.success = new Vector(_list1213.size);
                for (int _i1214 = 0; _i1214 < _list1213.size; ++_i1214)
                {
                  Contact _elem1215;
                  _elem1215 = new Contact();
                  _elem1215.read(iprot);
                  this.success.addElement(_elem1215);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter1216_enum = this.success.elements(); _iter1216_enum.hasMoreElements(); )           {
            Contact _iter1216 = (Contact)_iter1216_enum.nextElement();
            _iter1216.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getContactsForChannel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getCallCreditProducts_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getCallCreditProducts_args");

    private static final TField APP_STORE_CODE_FIELD_DESC = new TField("appStoreCode", TType.I32, (short)2);
    private static final TField PG_CODE_FIELD_DESC = new TField("pgCode", TType.I32, (short)3);
    private static final TField COUNTRY_FIELD_DESC = new TField("country", TType.STRING, (short)4);
    private static final TField LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, (short)5);

    private PaymentType appStoreCode;
    private PaymentPgType pgCode;
    private String country;
    private String language;

    // isset id assignments

    public getCallCreditProducts_args() {
    }

    public getCallCreditProducts_args(
      PaymentType appStoreCode,
      PaymentPgType pgCode,
      String country,
      String language)
    {
      this();
      this.appStoreCode = appStoreCode;
      this.pgCode = pgCode;
      this.country = country;
      this.language = language;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCallCreditProducts_args(getCallCreditProducts_args other) {
      if (other.isSetAppStoreCode()) {
        this.appStoreCode = other.appStoreCode;
      }
      if (other.isSetPgCode()) {
        this.pgCode = other.pgCode;
      }
      if (other.isSetCountry()) {
        this.country = other.country;
      }
      if (other.isSetLanguage()) {
        this.language = other.language;
      }
    }

    public getCallCreditProducts_args deepCopy() {
      return new getCallCreditProducts_args(this);
    }

    public void clear() {
      this.appStoreCode = null;
      this.pgCode = null;
      this.country = null;
      this.language = null;
    }

    /**
     * 
     * @see PaymentType
     */
    public PaymentType getAppStoreCode() {
      return this.appStoreCode;
    }

    /**
     * 
     * @see PaymentType
     */
    public void setAppStoreCode(PaymentType appStoreCode) {
      this.appStoreCode = appStoreCode;
    }

    public void unsetAppStoreCode() {
      this.appStoreCode = null;
    }

    /** Returns true if field appStoreCode is set (has been assigned a value) and false otherwise */
    public boolean isSetAppStoreCode() {
      return this.appStoreCode != null;
    }

    public void setAppStoreCodeIsSet(boolean value) {
      if (!value) {
        this.appStoreCode = null;
      }
    }

    /**
     * 
     * @see PaymentPgType
     */
    public PaymentPgType getPgCode() {
      return this.pgCode;
    }

    /**
     * 
     * @see PaymentPgType
     */
    public void setPgCode(PaymentPgType pgCode) {
      this.pgCode = pgCode;
    }

    public void unsetPgCode() {
      this.pgCode = null;
    }

    /** Returns true if field pgCode is set (has been assigned a value) and false otherwise */
    public boolean isSetPgCode() {
      return this.pgCode != null;
    }

    public void setPgCodeIsSet(boolean value) {
      if (!value) {
        this.pgCode = null;
      }
    }

    public String getCountry() {
      return this.country;
    }

    public void setCountry(String country) {
      this.country = country;
    }

    public void unsetCountry() {
      this.country = null;
    }

    /** Returns true if field country is set (has been assigned a value) and false otherwise */
    public boolean isSetCountry() {
      return this.country != null;
    }

    public void setCountryIsSet(boolean value) {
      if (!value) {
        this.country = null;
      }
    }

    public String getLanguage() {
      return this.language;
    }

    public void setLanguage(String language) {
      this.language = language;
    }

    public void unsetLanguage() {
      this.language = null;
    }

    /** Returns true if field language is set (has been assigned a value) and false otherwise */
    public boolean isSetLanguage() {
      return this.language != null;
    }

    public void setLanguageIsSet(boolean value) {
      if (!value) {
        this.language = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCallCreditProducts_args)
        return this.equals((getCallCreditProducts_args)that);
      return false;
    }

    public boolean equals(getCallCreditProducts_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_appStoreCode = true && this.isSetAppStoreCode();
      boolean that_present_appStoreCode = true && that.isSetAppStoreCode();
      if (this_present_appStoreCode || that_present_appStoreCode) {
        if (!(this_present_appStoreCode && that_present_appStoreCode))
          return false;
        if (!this.appStoreCode.equals(that.appStoreCode))
          return false;
      }

      boolean this_present_pgCode = true && this.isSetPgCode();
      boolean that_present_pgCode = true && that.isSetPgCode();
      if (this_present_pgCode || that_present_pgCode) {
        if (!(this_present_pgCode && that_present_pgCode))
          return false;
        if (!this.pgCode.equals(that.pgCode))
          return false;
      }

      boolean this_present_country = true && this.isSetCountry();
      boolean that_present_country = true && that.isSetCountry();
      if (this_present_country || that_present_country) {
        if (!(this_present_country && that_present_country))
          return false;
        if (!this.country.equals(that.country))
          return false;
      }

      boolean this_present_language = true && this.isSetLanguage();
      boolean that_present_language = true && that.isSetLanguage();
      if (this_present_language || that_present_language) {
        if (!(this_present_language && that_present_language))
          return false;
        if (!this.language.equals(that.language))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getCallCreditProducts_args other = (getCallCreditProducts_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetAppStoreCode(), other.isSetAppStoreCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAppStoreCode()) {
        lastComparison = TBaseHelper.compareTo(this.appStoreCode, other.appStoreCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPgCode(), other.isSetPgCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPgCode()) {
        lastComparison = TBaseHelper.compareTo(this.pgCode, other.pgCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCountry(), other.isSetCountry());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountry()) {
        lastComparison = TBaseHelper.compareTo(this.country, other.country);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLanguage(), other.isSetLanguage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLanguage()) {
        lastComparison = TBaseHelper.compareTo(this.language, other.language);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // APP_STORE_CODE
            if (field.type == TType.I32) {
              this.appStoreCode = PaymentType.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PG_CODE
            if (field.type == TType.I32) {
              this.pgCode = PaymentPgType.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // COUNTRY
            if (field.type == TType.STRING) {
              this.country = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // LANGUAGE
            if (field.type == TType.STRING) {
              this.language = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.appStoreCode != null) {
        oprot.writeFieldBegin(APP_STORE_CODE_FIELD_DESC);
        oprot.writeI32(this.appStoreCode.getValue());
        oprot.writeFieldEnd();
      }
      if (this.pgCode != null) {
        oprot.writeFieldBegin(PG_CODE_FIELD_DESC);
        oprot.writeI32(this.pgCode.getValue());
        oprot.writeFieldEnd();
      }
      if (this.country != null) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeString(this.country);
        oprot.writeFieldEnd();
      }
      if (this.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(this.language);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getCallCreditProducts_args(");
      boolean first = true;

      sb.append("appStoreCode:");
      if (this.appStoreCode == null) {
        sb.append("null");
      } else {
        sb.append(this.appStoreCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pgCode:");
      if (this.pgCode == null) {
        sb.append("null");
      } else {
        sb.append(this.pgCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("country:");
      if (this.country == null) {
        sb.append("null");
      } else {
        sb.append(this.country);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getCallCreditProducts_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getCallCreditProducts_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getCallCreditProducts_result() {
    }

    public getCallCreditProducts_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCallCreditProducts_result(getCallCreditProducts_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          CoinProductItem other_element = (CoinProductItem)other_enum.nextElement();
          __this__success.addElement(new CoinProductItem(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getCallCreditProducts_result deepCopy() {
      return new getCallCreditProducts_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(CoinProductItem elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCallCreditProducts_result)
        return this.equals((getCallCreditProducts_result)that);
      return false;
    }

    public boolean equals(getCallCreditProducts_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getCallCreditProducts_result other = (getCallCreditProducts_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list1217 = iprot.readListBegin();
                this.success = new Vector(_list1217.size);
                for (int _i1218 = 0; _i1218 < _list1217.size; ++_i1218)
                {
                  CoinProductItem _elem1219;
                  _elem1219 = new CoinProductItem();
                  _elem1219.read(iprot);
                  this.success.addElement(_elem1219);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter1220_enum = this.success.elements(); _iter1220_enum.hasMoreElements(); )           {
            CoinProductItem _iter1220 = (CoinProductItem)_iter1220_enum.nextElement();
            _iter1220.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getCallCreditProducts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getCompactContacts_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getCompactContacts_args");

    private static final TField LAST_MODIFIED_TIMESTAMP_FIELD_DESC = new TField("lastModifiedTimestamp", TType.I64, (short)2);

    private long lastModifiedTimestamp;

    // isset id assignments
    private static final int __LASTMODIFIEDTIMESTAMP_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getCompactContacts_args() {
    }

    public getCompactContacts_args(
      long lastModifiedTimestamp)
    {
      this();
      this.lastModifiedTimestamp = lastModifiedTimestamp;
      setLastModifiedTimestampIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCompactContacts_args(getCompactContacts_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.lastModifiedTimestamp = other.lastModifiedTimestamp;
    }

    public getCompactContacts_args deepCopy() {
      return new getCompactContacts_args(this);
    }

    public void clear() {
      setLastModifiedTimestampIsSet(false);
      this.lastModifiedTimestamp = 0;
    }

    public long getLastModifiedTimestamp() {
      return this.lastModifiedTimestamp;
    }

    public void setLastModifiedTimestamp(long lastModifiedTimestamp) {
      this.lastModifiedTimestamp = lastModifiedTimestamp;
      setLastModifiedTimestampIsSet(true);
    }

    public void unsetLastModifiedTimestamp() {
      __isset_vector[__LASTMODIFIEDTIMESTAMP_ISSET_ID] = false;
    }

    /** Returns true if field lastModifiedTimestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetLastModifiedTimestamp() {
      return __isset_vector[__LASTMODIFIEDTIMESTAMP_ISSET_ID];
    }

    public void setLastModifiedTimestampIsSet(boolean value) {
      __isset_vector[__LASTMODIFIEDTIMESTAMP_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCompactContacts_args)
        return this.equals((getCompactContacts_args)that);
      return false;
    }

    public boolean equals(getCompactContacts_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_lastModifiedTimestamp = true;
      boolean that_present_lastModifiedTimestamp = true;
      if (this_present_lastModifiedTimestamp || that_present_lastModifiedTimestamp) {
        if (!(this_present_lastModifiedTimestamp && that_present_lastModifiedTimestamp))
          return false;
        if (this.lastModifiedTimestamp != that.lastModifiedTimestamp)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getCompactContacts_args other = (getCompactContacts_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetLastModifiedTimestamp(), other.isSetLastModifiedTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastModifiedTimestamp()) {
        lastComparison = TBaseHelper.compareTo(this.lastModifiedTimestamp, other.lastModifiedTimestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // LAST_MODIFIED_TIMESTAMP
            if (field.type == TType.I64) {
              this.lastModifiedTimestamp = iprot.readI64();
              setLastModifiedTimestampIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LAST_MODIFIED_TIMESTAMP_FIELD_DESC);
      oprot.writeI64(this.lastModifiedTimestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getCompactContacts_args(");
      boolean first = true;

      sb.append("lastModifiedTimestamp:");
      sb.append(this.lastModifiedTimestamp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getCompactContacts_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getCompactContacts_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getCompactContacts_result() {
    }

    public getCompactContacts_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCompactContacts_result(getCompactContacts_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          CompactContact other_element = (CompactContact)other_enum.nextElement();
          __this__success.addElement(new CompactContact(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getCompactContacts_result deepCopy() {
      return new getCompactContacts_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(CompactContact elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCompactContacts_result)
        return this.equals((getCompactContacts_result)that);
      return false;
    }

    public boolean equals(getCompactContacts_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getCompactContacts_result other = (getCompactContacts_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list1221 = iprot.readListBegin();
                this.success = new Vector(_list1221.size);
                for (int _i1222 = 0; _i1222 < _list1221.size; ++_i1222)
                {
                  CompactContact _elem1223;
                  _elem1223 = new CompactContact();
                  _elem1223.read(iprot);
                  this.success.addElement(_elem1223);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter1224_enum = this.success.elements(); _iter1224_enum.hasMoreElements(); )           {
            CompactContact _iter1224 = (CompactContact)_iter1224_enum.nextElement();
            _iter1224.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getCompactContacts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class notifyNotiCenterEvent_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("notifyNotiCenterEvent_args");

    private static final TField EVENT_FIELD_DESC = new TField("event", TType.STRUCT, (short)1);

    private NotiCenterEventData event;

    // isset id assignments

    public notifyNotiCenterEvent_args() {
    }

    public notifyNotiCenterEvent_args(
      NotiCenterEventData event)
    {
      this();
      this.event = event;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyNotiCenterEvent_args(notifyNotiCenterEvent_args other) {
      if (other.isSetEvent()) {
        this.event = new NotiCenterEventData(other.event);
      }
    }

    public notifyNotiCenterEvent_args deepCopy() {
      return new notifyNotiCenterEvent_args(this);
    }

    public void clear() {
      this.event = null;
    }

    public NotiCenterEventData getEvent() {
      return this.event;
    }

    public void setEvent(NotiCenterEventData event) {
      this.event = event;
    }

    public void unsetEvent() {
      this.event = null;
    }

    /** Returns true if field event is set (has been assigned a value) and false otherwise */
    public boolean isSetEvent() {
      return this.event != null;
    }

    public void setEventIsSet(boolean value) {
      if (!value) {
        this.event = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyNotiCenterEvent_args)
        return this.equals((notifyNotiCenterEvent_args)that);
      return false;
    }

    public boolean equals(notifyNotiCenterEvent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_event = true && this.isSetEvent();
      boolean that_present_event = true && that.isSetEvent();
      if (this_present_event || that_present_event) {
        if (!(this_present_event && that_present_event))
          return false;
        if (!this.event.equals(that.event))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      notifyNotiCenterEvent_args other = (notifyNotiCenterEvent_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetEvent(), other.isSetEvent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEvent()) {
        lastComparison = this.event.compareTo(other.event);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // EVENT
            if (field.type == TType.STRUCT) {
              this.event = new NotiCenterEventData();
              this.event.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.event != null) {
        oprot.writeFieldBegin(EVENT_FIELD_DESC);
        this.event.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("notifyNotiCenterEvent_args(");
      boolean first = true;

      sb.append("event:");
      if (this.event == null) {
        sb.append("null");
      } else {
        sb.append(this.event);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class notifyNotiCenterEvent_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("notifyNotiCenterEvent_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public notifyNotiCenterEvent_result() {
    }

    public notifyNotiCenterEvent_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyNotiCenterEvent_result(notifyNotiCenterEvent_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public notifyNotiCenterEvent_result deepCopy() {
      return new notifyNotiCenterEvent_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyNotiCenterEvent_result)
        return this.equals((notifyNotiCenterEvent_result)that);
      return false;
    }

    public boolean equals(notifyNotiCenterEvent_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      notifyNotiCenterEvent_result other = (notifyNotiCenterEvent_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("notifyNotiCenterEvent_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class isInContact_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("isInContact_args");

    private static final TField MID_FIELD_DESC = new TField("mid", TType.STRING, (short)2);

    private String mid;

    // isset id assignments

    public isInContact_args() {
    }

    public isInContact_args(
      String mid)
    {
      this();
      this.mid = mid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isInContact_args(isInContact_args other) {
      if (other.isSetMid()) {
        this.mid = other.mid;
      }
    }

    public isInContact_args deepCopy() {
      return new isInContact_args(this);
    }

    public void clear() {
      this.mid = null;
    }

    public String getMid() {
      return this.mid;
    }

    public void setMid(String mid) {
      this.mid = mid;
    }

    public void unsetMid() {
      this.mid = null;
    }

    /** Returns true if field mid is set (has been assigned a value) and false otherwise */
    public boolean isSetMid() {
      return this.mid != null;
    }

    public void setMidIsSet(boolean value) {
      if (!value) {
        this.mid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isInContact_args)
        return this.equals((isInContact_args)that);
      return false;
    }

    public boolean equals(isInContact_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mid = true && this.isSetMid();
      boolean that_present_mid = true && that.isSetMid();
      if (this_present_mid || that_present_mid) {
        if (!(this_present_mid && that_present_mid))
          return false;
        if (!this.mid.equals(that.mid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      isInContact_args other = (isInContact_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetMid(), other.isSetMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMid()) {
        lastComparison = TBaseHelper.compareTo(this.mid, other.mid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // MID
            if (field.type == TType.STRING) {
              this.mid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.mid != null) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeString(this.mid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("isInContact_args(");
      boolean first = true;

      sb.append("mid:");
      if (this.mid == null) {
        sb.append("null");
      } else {
        sb.append(this.mid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class isInContact_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("isInContact_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private boolean success;
    private TalkException e;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public isInContact_result() {
    }

    public isInContact_result(
      boolean success,
      TalkException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isInContact_result(isInContact_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public isInContact_result deepCopy() {
      return new isInContact_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isInContact_result)
        return this.equals((isInContact_result)that);
      return false;
    }

    public boolean equals(isInContact_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      isInContact_result other = (isInContact_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("isInContact_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lookupGroupMembers_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("lookupGroupMembers_args");

    private static final TField GROUP_ID_FIELD_DESC = new TField("groupId", TType.STRING, (short)1);
    private static final TField MIDS_FIELD_DESC = new TField("mids", TType.LIST, (short)2);

    private String groupId;
    private Vector mids;

    // isset id assignments

    public lookupGroupMembers_args() {
    }

    public lookupGroupMembers_args(
      String groupId,
      Vector mids)
    {
      this();
      this.groupId = groupId;
      this.mids = mids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lookupGroupMembers_args(lookupGroupMembers_args other) {
      if (other.isSetGroupId()) {
        this.groupId = other.groupId;
      }
      if (other.isSetMids()) {
        Vector __this__mids = new Vector();
        for (Enumeration other_enum = other.mids.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__mids.addElement(other_element);
        }
        this.mids = __this__mids;
      }
    }

    public lookupGroupMembers_args deepCopy() {
      return new lookupGroupMembers_args(this);
    }

    public void clear() {
      this.groupId = null;
      this.mids = null;
    }

    public String getGroupId() {
      return this.groupId;
    }

    public void setGroupId(String groupId) {
      this.groupId = groupId;
    }

    public void unsetGroupId() {
      this.groupId = null;
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return this.groupId != null;
    }

    public void setGroupIdIsSet(boolean value) {
      if (!value) {
        this.groupId = null;
      }
    }

    public int getMidsSize() {
      return (this.mids == null) ? 0 : this.mids.size();
    }

    public Enumeration getMidsEnumeration() {
      return (this.mids == null) ? null : this.mids.elements();
    }

    public void addToMids(String elem) {
      if (this.mids == null) {
        this.mids = new Vector();
      }
      this.mids.addElement(elem);
    }

    public Vector getMids() {
      return this.mids;
    }

    public void setMids(Vector mids) {
      this.mids = mids;
    }

    public void unsetMids() {
      this.mids = null;
    }

    /** Returns true if field mids is set (has been assigned a value) and false otherwise */
    public boolean isSetMids() {
      return this.mids != null;
    }

    public void setMidsIsSet(boolean value) {
      if (!value) {
        this.mids = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lookupGroupMembers_args)
        return this.equals((lookupGroupMembers_args)that);
      return false;
    }

    public boolean equals(lookupGroupMembers_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_groupId = true && this.isSetGroupId();
      boolean that_present_groupId = true && that.isSetGroupId();
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (!this.groupId.equals(that.groupId))
          return false;
      }

      boolean this_present_mids = true && this.isSetMids();
      boolean that_present_mids = true && that.isSetMids();
      if (this_present_mids || that_present_mids) {
        if (!(this_present_mids && that_present_mids))
          return false;
        if (!this.mids.equals(that.mids))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      lookupGroupMembers_args other = (lookupGroupMembers_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetGroupId(), other.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = TBaseHelper.compareTo(this.groupId, other.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMids(), other.isSetMids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMids()) {
        lastComparison = TBaseHelper.compareTo(this.mids, other.mids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // GROUP_ID
            if (field.type == TType.STRING) {
              this.groupId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MIDS
            if (field.type == TType.LIST) {
              {
                TList _list1225 = iprot.readListBegin();
                this.mids = new Vector(_list1225.size);
                for (int _i1226 = 0; _i1226 < _list1225.size; ++_i1226)
                {
                  String _elem1227;
                  _elem1227 = iprot.readString();
                  this.mids.addElement(_elem1227);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.groupId != null) {
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeString(this.groupId);
        oprot.writeFieldEnd();
      }
      if (this.mids != null) {
        oprot.writeFieldBegin(MIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.mids.size()));
          for (Enumeration _iter1228_enum = this.mids.elements(); _iter1228_enum.hasMoreElements(); )           {
            String _iter1228 = (String)_iter1228_enum.nextElement();
            oprot.writeString(_iter1228);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("lookupGroupMembers_args(");
      boolean first = true;

      sb.append("groupId:");
      if (this.groupId == null) {
        sb.append("null");
      } else {
        sb.append(this.groupId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mids:");
      if (this.mids == null) {
        sb.append("null");
      } else {
        sb.append(this.mids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lookupGroupMembers_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("lookupGroupMembers_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public lookupGroupMembers_result() {
    }

    public lookupGroupMembers_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lookupGroupMembers_result(lookupGroupMembers_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          SimpleChannelContact other_element = (SimpleChannelContact)other_enum.nextElement();
          __this__success.addElement(new SimpleChannelContact(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public lookupGroupMembers_result deepCopy() {
      return new lookupGroupMembers_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(SimpleChannelContact elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lookupGroupMembers_result)
        return this.equals((lookupGroupMembers_result)that);
      return false;
    }

    public boolean equals(lookupGroupMembers_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      lookupGroupMembers_result other = (lookupGroupMembers_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list1229 = iprot.readListBegin();
                this.success = new Vector(_list1229.size);
                for (int _i1230 = 0; _i1230 < _list1229.size; ++_i1230)
                {
                  SimpleChannelContact _elem1231;
                  _elem1231 = new SimpleChannelContact();
                  _elem1231.read(iprot);
                  this.success.addElement(_elem1231);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter1232_enum = this.success.elements(); _iter1232_enum.hasMoreElements(); )           {
            SimpleChannelContact _iter1232 = (SimpleChannelContact)_iter1232_enum.nextElement();
            _iter1232.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("lookupGroupMembers_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getRoomInformation_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getRoomInformation_args");

    private static final TField ROOM_MID_FIELD_DESC = new TField("roomMid", TType.STRING, (short)1);

    private String roomMid;

    // isset id assignments

    public getRoomInformation_args() {
    }

    public getRoomInformation_args(
      String roomMid)
    {
      this();
      this.roomMid = roomMid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRoomInformation_args(getRoomInformation_args other) {
      if (other.isSetRoomMid()) {
        this.roomMid = other.roomMid;
      }
    }

    public getRoomInformation_args deepCopy() {
      return new getRoomInformation_args(this);
    }

    public void clear() {
      this.roomMid = null;
    }

    public String getRoomMid() {
      return this.roomMid;
    }

    public void setRoomMid(String roomMid) {
      this.roomMid = roomMid;
    }

    public void unsetRoomMid() {
      this.roomMid = null;
    }

    /** Returns true if field roomMid is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomMid() {
      return this.roomMid != null;
    }

    public void setRoomMidIsSet(boolean value) {
      if (!value) {
        this.roomMid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRoomInformation_args)
        return this.equals((getRoomInformation_args)that);
      return false;
    }

    public boolean equals(getRoomInformation_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_roomMid = true && this.isSetRoomMid();
      boolean that_present_roomMid = true && that.isSetRoomMid();
      if (this_present_roomMid || that_present_roomMid) {
        if (!(this_present_roomMid && that_present_roomMid))
          return false;
        if (!this.roomMid.equals(that.roomMid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getRoomInformation_args other = (getRoomInformation_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRoomMid(), other.isSetRoomMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomMid()) {
        lastComparison = TBaseHelper.compareTo(this.roomMid, other.roomMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ROOM_MID
            if (field.type == TType.STRING) {
              this.roomMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.roomMid != null) {
        oprot.writeFieldBegin(ROOM_MID_FIELD_DESC);
        oprot.writeString(this.roomMid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getRoomInformation_args(");
      boolean first = true;

      sb.append("roomMid:");
      if (this.roomMid == null) {
        sb.append("null");
      } else {
        sb.append(this.roomMid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getRoomInformation_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getRoomInformation_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Room success;
    private TalkException e;

    // isset id assignments

    public getRoomInformation_result() {
    }

    public getRoomInformation_result(
      Room success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRoomInformation_result(getRoomInformation_result other) {
      if (other.isSetSuccess()) {
        this.success = new Room(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getRoomInformation_result deepCopy() {
      return new getRoomInformation_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Room getSuccess() {
      return this.success;
    }

    public void setSuccess(Room success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRoomInformation_result)
        return this.equals((getRoomInformation_result)that);
      return false;
    }

    public boolean equals(getRoomInformation_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getRoomInformation_result other = (getRoomInformation_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Room();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getRoomInformation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getGroupCall_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getGroupCall_args");

    private static final TField CHAT_MID_FIELD_DESC = new TField("chatMid", TType.STRING, (short)2);

    private String chatMid;

    // isset id assignments

    public getGroupCall_args() {
    }

    public getGroupCall_args(
      String chatMid)
    {
      this();
      this.chatMid = chatMid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroupCall_args(getGroupCall_args other) {
      if (other.isSetChatMid()) {
        this.chatMid = other.chatMid;
      }
    }

    public getGroupCall_args deepCopy() {
      return new getGroupCall_args(this);
    }

    public void clear() {
      this.chatMid = null;
    }

    public String getChatMid() {
      return this.chatMid;
    }

    public void setChatMid(String chatMid) {
      this.chatMid = chatMid;
    }

    public void unsetChatMid() {
      this.chatMid = null;
    }

    /** Returns true if field chatMid is set (has been assigned a value) and false otherwise */
    public boolean isSetChatMid() {
      return this.chatMid != null;
    }

    public void setChatMidIsSet(boolean value) {
      if (!value) {
        this.chatMid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroupCall_args)
        return this.equals((getGroupCall_args)that);
      return false;
    }

    public boolean equals(getGroupCall_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_chatMid = true && this.isSetChatMid();
      boolean that_present_chatMid = true && that.isSetChatMid();
      if (this_present_chatMid || that_present_chatMid) {
        if (!(this_present_chatMid && that_present_chatMid))
          return false;
        if (!this.chatMid.equals(that.chatMid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getGroupCall_args other = (getGroupCall_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetChatMid(), other.isSetChatMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChatMid()) {
        lastComparison = TBaseHelper.compareTo(this.chatMid, other.chatMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // CHAT_MID
            if (field.type == TType.STRING) {
              this.chatMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.chatMid != null) {
        oprot.writeFieldBegin(CHAT_MID_FIELD_DESC);
        oprot.writeString(this.chatMid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getGroupCall_args(");
      boolean first = true;

      sb.append("chatMid:");
      if (this.chatMid == null) {
        sb.append("null");
      } else {
        sb.append(this.chatMid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getGroupCall_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getGroupCall_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private GroupCall success;
    private TalkException e;

    // isset id assignments

    public getGroupCall_result() {
    }

    public getGroupCall_result(
      GroupCall success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroupCall_result(getGroupCall_result other) {
      if (other.isSetSuccess()) {
        this.success = new GroupCall(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getGroupCall_result deepCopy() {
      return new getGroupCall_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public GroupCall getSuccess() {
      return this.success;
    }

    public void setSuccess(GroupCall success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroupCall_result)
        return this.equals((getGroupCall_result)that);
      return false;
    }

    public boolean equals(getGroupCall_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getGroupCall_result other = (getGroupCall_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new GroupCall();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getGroupCall_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class isAllowSecondaryDeviceLogin_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("isAllowSecondaryDeviceLogin_args");


    public isAllowSecondaryDeviceLogin_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isAllowSecondaryDeviceLogin_args(isAllowSecondaryDeviceLogin_args other) {
    }

    public isAllowSecondaryDeviceLogin_args deepCopy() {
      return new isAllowSecondaryDeviceLogin_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isAllowSecondaryDeviceLogin_args)
        return this.equals((isAllowSecondaryDeviceLogin_args)that);
      return false;
    }

    public boolean equals(isAllowSecondaryDeviceLogin_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      isAllowSecondaryDeviceLogin_args other = (isAllowSecondaryDeviceLogin_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("isAllowSecondaryDeviceLogin_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class isAllowSecondaryDeviceLogin_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("isAllowSecondaryDeviceLogin_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private boolean success;
    private TalkException e;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public isAllowSecondaryDeviceLogin_result() {
    }

    public isAllowSecondaryDeviceLogin_result(
      boolean success,
      TalkException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isAllowSecondaryDeviceLogin_result(isAllowSecondaryDeviceLogin_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public isAllowSecondaryDeviceLogin_result deepCopy() {
      return new isAllowSecondaryDeviceLogin_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isAllowSecondaryDeviceLogin_result)
        return this.equals((isAllowSecondaryDeviceLogin_result)that);
      return false;
    }

    public boolean equals(isAllowSecondaryDeviceLogin_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      isAllowSecondaryDeviceLogin_result other = (isAllowSecondaryDeviceLogin_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("isAllowSecondaryDeviceLogin_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPrimaryClientForChannel_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPrimaryClientForChannel_args");


    public getPrimaryClientForChannel_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPrimaryClientForChannel_args(getPrimaryClientForChannel_args other) {
    }

    public getPrimaryClientForChannel_args deepCopy() {
      return new getPrimaryClientForChannel_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPrimaryClientForChannel_args)
        return this.equals((getPrimaryClientForChannel_args)that);
      return false;
    }

    public boolean equals(getPrimaryClientForChannel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPrimaryClientForChannel_args other = (getPrimaryClientForChannel_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPrimaryClientForChannel_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPrimaryClientForChannel_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPrimaryClientForChannel_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private SimpleChannelClient success;
    private TalkException e;

    // isset id assignments

    public getPrimaryClientForChannel_result() {
    }

    public getPrimaryClientForChannel_result(
      SimpleChannelClient success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPrimaryClientForChannel_result(getPrimaryClientForChannel_result other) {
      if (other.isSetSuccess()) {
        this.success = new SimpleChannelClient(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getPrimaryClientForChannel_result deepCopy() {
      return new getPrimaryClientForChannel_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public SimpleChannelClient getSuccess() {
      return this.success;
    }

    public void setSuccess(SimpleChannelClient success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPrimaryClientForChannel_result)
        return this.equals((getPrimaryClientForChannel_result)that);
      return false;
    }

    public boolean equals(getPrimaryClientForChannel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPrimaryClientForChannel_result other = (getPrimaryClientForChannel_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new SimpleChannelClient();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPrimaryClientForChannel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createRoomWithBuddy_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("createRoomWithBuddy_args");

    private static final TField REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, (short)1);
    private static final TField BUDDY_MID_FIELD_DESC = new TField("buddyMid", TType.STRING, (short)2);
    private static final TField CONTACT_IDS_FIELD_DESC = new TField("contactIds", TType.LIST, (short)3);

    private int reqSeq;
    private String buddyMid;
    private Vector contactIds;

    // isset id assignments
    private static final int __REQSEQ_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public createRoomWithBuddy_args() {
    }

    public createRoomWithBuddy_args(
      int reqSeq,
      String buddyMid,
      Vector contactIds)
    {
      this();
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
      this.buddyMid = buddyMid;
      this.contactIds = contactIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createRoomWithBuddy_args(createRoomWithBuddy_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.reqSeq = other.reqSeq;
      if (other.isSetBuddyMid()) {
        this.buddyMid = other.buddyMid;
      }
      if (other.isSetContactIds()) {
        Vector __this__contactIds = new Vector();
        for (Enumeration other_enum = other.contactIds.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__contactIds.addElement(other_element);
        }
        this.contactIds = __this__contactIds;
      }
    }

    public createRoomWithBuddy_args deepCopy() {
      return new createRoomWithBuddy_args(this);
    }

    public void clear() {
      setReqSeqIsSet(false);
      this.reqSeq = 0;
      this.buddyMid = null;
      this.contactIds = null;
    }

    public int getReqSeq() {
      return this.reqSeq;
    }

    public void setReqSeq(int reqSeq) {
      this.reqSeq = reqSeq;
      setReqSeqIsSet(true);
    }

    public void unsetReqSeq() {
      __isset_vector[__REQSEQ_ISSET_ID] = false;
    }

    /** Returns true if field reqSeq is set (has been assigned a value) and false otherwise */
    public boolean isSetReqSeq() {
      return __isset_vector[__REQSEQ_ISSET_ID];
    }

    public void setReqSeqIsSet(boolean value) {
      __isset_vector[__REQSEQ_ISSET_ID] = value;
    }

    public String getBuddyMid() {
      return this.buddyMid;
    }

    public void setBuddyMid(String buddyMid) {
      this.buddyMid = buddyMid;
    }

    public void unsetBuddyMid() {
      this.buddyMid = null;
    }

    /** Returns true if field buddyMid is set (has been assigned a value) and false otherwise */
    public boolean isSetBuddyMid() {
      return this.buddyMid != null;
    }

    public void setBuddyMidIsSet(boolean value) {
      if (!value) {
        this.buddyMid = null;
      }
    }

    public int getContactIdsSize() {
      return (this.contactIds == null) ? 0 : this.contactIds.size();
    }

    public Enumeration getContactIdsEnumeration() {
      return (this.contactIds == null) ? null : this.contactIds.elements();
    }

    public void addToContactIds(String elem) {
      if (this.contactIds == null) {
        this.contactIds = new Vector();
      }
      this.contactIds.addElement(elem);
    }

    public Vector getContactIds() {
      return this.contactIds;
    }

    public void setContactIds(Vector contactIds) {
      this.contactIds = contactIds;
    }

    public void unsetContactIds() {
      this.contactIds = null;
    }

    /** Returns true if field contactIds is set (has been assigned a value) and false otherwise */
    public boolean isSetContactIds() {
      return this.contactIds != null;
    }

    public void setContactIdsIsSet(boolean value) {
      if (!value) {
        this.contactIds = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createRoomWithBuddy_args)
        return this.equals((createRoomWithBuddy_args)that);
      return false;
    }

    public boolean equals(createRoomWithBuddy_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_reqSeq = true;
      boolean that_present_reqSeq = true;
      if (this_present_reqSeq || that_present_reqSeq) {
        if (!(this_present_reqSeq && that_present_reqSeq))
          return false;
        if (this.reqSeq != that.reqSeq)
          return false;
      }

      boolean this_present_buddyMid = true && this.isSetBuddyMid();
      boolean that_present_buddyMid = true && that.isSetBuddyMid();
      if (this_present_buddyMid || that_present_buddyMid) {
        if (!(this_present_buddyMid && that_present_buddyMid))
          return false;
        if (!this.buddyMid.equals(that.buddyMid))
          return false;
      }

      boolean this_present_contactIds = true && this.isSetContactIds();
      boolean that_present_contactIds = true && that.isSetContactIds();
      if (this_present_contactIds || that_present_contactIds) {
        if (!(this_present_contactIds && that_present_contactIds))
          return false;
        if (!this.contactIds.equals(that.contactIds))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      createRoomWithBuddy_args other = (createRoomWithBuddy_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetReqSeq(), other.isSetReqSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReqSeq()) {
        lastComparison = TBaseHelper.compareTo(this.reqSeq, other.reqSeq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetBuddyMid(), other.isSetBuddyMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBuddyMid()) {
        lastComparison = TBaseHelper.compareTo(this.buddyMid, other.buddyMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetContactIds(), other.isSetContactIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContactIds()) {
        lastComparison = TBaseHelper.compareTo(this.contactIds, other.contactIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQ_SEQ
            if (field.type == TType.I32) {
              this.reqSeq = iprot.readI32();
              setReqSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // BUDDY_MID
            if (field.type == TType.STRING) {
              this.buddyMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // CONTACT_IDS
            if (field.type == TType.LIST) {
              {
                TList _list1233 = iprot.readListBegin();
                this.contactIds = new Vector(_list1233.size);
                for (int _i1234 = 0; _i1234 < _list1233.size; ++_i1234)
                {
                  String _elem1235;
                  _elem1235 = iprot.readString();
                  this.contactIds.addElement(_elem1235);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(REQ_SEQ_FIELD_DESC);
      oprot.writeI32(this.reqSeq);
      oprot.writeFieldEnd();
      if (this.buddyMid != null) {
        oprot.writeFieldBegin(BUDDY_MID_FIELD_DESC);
        oprot.writeString(this.buddyMid);
        oprot.writeFieldEnd();
      }
      if (this.contactIds != null) {
        oprot.writeFieldBegin(CONTACT_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.contactIds.size()));
          for (Enumeration _iter1236_enum = this.contactIds.elements(); _iter1236_enum.hasMoreElements(); )           {
            String _iter1236 = (String)_iter1236_enum.nextElement();
            oprot.writeString(_iter1236);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("createRoomWithBuddy_args(");
      boolean first = true;

      sb.append("reqSeq:");
      sb.append(this.reqSeq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("buddyMid:");
      if (this.buddyMid == null) {
        sb.append("null");
      } else {
        sb.append(this.buddyMid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("contactIds:");
      if (this.contactIds == null) {
        sb.append("null");
      } else {
        sb.append(this.contactIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class createRoomWithBuddy_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("createRoomWithBuddy_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Room success;
    private TalkException e;

    // isset id assignments

    public createRoomWithBuddy_result() {
    }

    public createRoomWithBuddy_result(
      Room success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createRoomWithBuddy_result(createRoomWithBuddy_result other) {
      if (other.isSetSuccess()) {
        this.success = new Room(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public createRoomWithBuddy_result deepCopy() {
      return new createRoomWithBuddy_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Room getSuccess() {
      return this.success;
    }

    public void setSuccess(Room success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof createRoomWithBuddy_result)
        return this.equals((createRoomWithBuddy_result)that);
      return false;
    }

    public boolean equals(createRoomWithBuddy_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      createRoomWithBuddy_result other = (createRoomWithBuddy_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Room();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("createRoomWithBuddy_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getDisplayName_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getDisplayName_args");

    private static final TField MID_FIELD_DESC = new TField("mid", TType.STRING, (short)2);

    private String mid;

    // isset id assignments

    public getDisplayName_args() {
    }

    public getDisplayName_args(
      String mid)
    {
      this();
      this.mid = mid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDisplayName_args(getDisplayName_args other) {
      if (other.isSetMid()) {
        this.mid = other.mid;
      }
    }

    public getDisplayName_args deepCopy() {
      return new getDisplayName_args(this);
    }

    public void clear() {
      this.mid = null;
    }

    public String getMid() {
      return this.mid;
    }

    public void setMid(String mid) {
      this.mid = mid;
    }

    public void unsetMid() {
      this.mid = null;
    }

    /** Returns true if field mid is set (has been assigned a value) and false otherwise */
    public boolean isSetMid() {
      return this.mid != null;
    }

    public void setMidIsSet(boolean value) {
      if (!value) {
        this.mid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDisplayName_args)
        return this.equals((getDisplayName_args)that);
      return false;
    }

    public boolean equals(getDisplayName_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mid = true && this.isSetMid();
      boolean that_present_mid = true && that.isSetMid();
      if (this_present_mid || that_present_mid) {
        if (!(this_present_mid && that_present_mid))
          return false;
        if (!this.mid.equals(that.mid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getDisplayName_args other = (getDisplayName_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetMid(), other.isSetMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMid()) {
        lastComparison = TBaseHelper.compareTo(this.mid, other.mid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // MID
            if (field.type == TType.STRING) {
              this.mid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.mid != null) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeString(this.mid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getDisplayName_args(");
      boolean first = true;

      sb.append("mid:");
      if (this.mid == null) {
        sb.append("null");
      } else {
        sb.append(this.mid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getDisplayName_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getDisplayName_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public getDisplayName_result() {
    }

    public getDisplayName_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDisplayName_result(getDisplayName_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getDisplayName_result deepCopy() {
      return new getDisplayName_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDisplayName_result)
        return this.equals((getDisplayName_result)that);
      return false;
    }

    public boolean equals(getDisplayName_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getDisplayName_result other = (getDisplayName_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getDisplayName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPaidCallMetadata_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPaidCallMetadata_args");

    private static final TField LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, (short)2);

    private String language;

    // isset id assignments

    public getPaidCallMetadata_args() {
    }

    public getPaidCallMetadata_args(
      String language)
    {
      this();
      this.language = language;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPaidCallMetadata_args(getPaidCallMetadata_args other) {
      if (other.isSetLanguage()) {
        this.language = other.language;
      }
    }

    public getPaidCallMetadata_args deepCopy() {
      return new getPaidCallMetadata_args(this);
    }

    public void clear() {
      this.language = null;
    }

    public String getLanguage() {
      return this.language;
    }

    public void setLanguage(String language) {
      this.language = language;
    }

    public void unsetLanguage() {
      this.language = null;
    }

    /** Returns true if field language is set (has been assigned a value) and false otherwise */
    public boolean isSetLanguage() {
      return this.language != null;
    }

    public void setLanguageIsSet(boolean value) {
      if (!value) {
        this.language = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPaidCallMetadata_args)
        return this.equals((getPaidCallMetadata_args)that);
      return false;
    }

    public boolean equals(getPaidCallMetadata_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_language = true && this.isSetLanguage();
      boolean that_present_language = true && that.isSetLanguage();
      if (this_present_language || that_present_language) {
        if (!(this_present_language && that_present_language))
          return false;
        if (!this.language.equals(that.language))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPaidCallMetadata_args other = (getPaidCallMetadata_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetLanguage(), other.isSetLanguage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLanguage()) {
        lastComparison = TBaseHelper.compareTo(this.language, other.language);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // LANGUAGE
            if (field.type == TType.STRING) {
              this.language = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(this.language);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPaidCallMetadata_args(");
      boolean first = true;

      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPaidCallMetadata_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPaidCallMetadata_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private PaidCallMetadataResult success;
    private TalkException e;

    // isset id assignments

    public getPaidCallMetadata_result() {
    }

    public getPaidCallMetadata_result(
      PaidCallMetadataResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPaidCallMetadata_result(getPaidCallMetadata_result other) {
      if (other.isSetSuccess()) {
        this.success = new PaidCallMetadataResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getPaidCallMetadata_result deepCopy() {
      return new getPaidCallMetadata_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public PaidCallMetadataResult getSuccess() {
      return this.success;
    }

    public void setSuccess(PaidCallMetadataResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPaidCallMetadata_result)
        return this.equals((getPaidCallMetadata_result)that);
      return false;
    }

    public boolean equals(getPaidCallMetadata_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPaidCallMetadata_result other = (getPaidCallMetadata_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new PaidCallMetadataResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPaidCallMetadata_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getMid_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getMid_args");


    public getMid_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMid_args(getMid_args other) {
    }

    public getMid_args deepCopy() {
      return new getMid_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMid_args)
        return this.equals((getMid_args)that);
      return false;
    }

    public boolean equals(getMid_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getMid_args other = (getMid_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getMid_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getMid_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getMid_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public getMid_result() {
    }

    public getMid_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMid_result(getMid_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getMid_result deepCopy() {
      return new getMid_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMid_result)
        return this.equals((getMid_result)that);
      return false;
    }

    public boolean equals(getMid_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getMid_result other = (getMid_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getMid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUserCountryForBilling_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUserCountryForBilling_args");

    private static final TField COUNTRY_FIELD_DESC = new TField("country", TType.STRING, (short)2);
    private static final TField REMOTE_IP_FIELD_DESC = new TField("remoteIp", TType.STRING, (short)3);

    private String country;
    private String remoteIp;

    // isset id assignments

    public getUserCountryForBilling_args() {
    }

    public getUserCountryForBilling_args(
      String country,
      String remoteIp)
    {
      this();
      this.country = country;
      this.remoteIp = remoteIp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserCountryForBilling_args(getUserCountryForBilling_args other) {
      if (other.isSetCountry()) {
        this.country = other.country;
      }
      if (other.isSetRemoteIp()) {
        this.remoteIp = other.remoteIp;
      }
    }

    public getUserCountryForBilling_args deepCopy() {
      return new getUserCountryForBilling_args(this);
    }

    public void clear() {
      this.country = null;
      this.remoteIp = null;
    }

    public String getCountry() {
      return this.country;
    }

    public void setCountry(String country) {
      this.country = country;
    }

    public void unsetCountry() {
      this.country = null;
    }

    /** Returns true if field country is set (has been assigned a value) and false otherwise */
    public boolean isSetCountry() {
      return this.country != null;
    }

    public void setCountryIsSet(boolean value) {
      if (!value) {
        this.country = null;
      }
    }

    public String getRemoteIp() {
      return this.remoteIp;
    }

    public void setRemoteIp(String remoteIp) {
      this.remoteIp = remoteIp;
    }

    public void unsetRemoteIp() {
      this.remoteIp = null;
    }

    /** Returns true if field remoteIp is set (has been assigned a value) and false otherwise */
    public boolean isSetRemoteIp() {
      return this.remoteIp != null;
    }

    public void setRemoteIpIsSet(boolean value) {
      if (!value) {
        this.remoteIp = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserCountryForBilling_args)
        return this.equals((getUserCountryForBilling_args)that);
      return false;
    }

    public boolean equals(getUserCountryForBilling_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_country = true && this.isSetCountry();
      boolean that_present_country = true && that.isSetCountry();
      if (this_present_country || that_present_country) {
        if (!(this_present_country && that_present_country))
          return false;
        if (!this.country.equals(that.country))
          return false;
      }

      boolean this_present_remoteIp = true && this.isSetRemoteIp();
      boolean that_present_remoteIp = true && that.isSetRemoteIp();
      if (this_present_remoteIp || that_present_remoteIp) {
        if (!(this_present_remoteIp && that_present_remoteIp))
          return false;
        if (!this.remoteIp.equals(that.remoteIp))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUserCountryForBilling_args other = (getUserCountryForBilling_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetCountry(), other.isSetCountry());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountry()) {
        lastComparison = TBaseHelper.compareTo(this.country, other.country);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetRemoteIp(), other.isSetRemoteIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRemoteIp()) {
        lastComparison = TBaseHelper.compareTo(this.remoteIp, other.remoteIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // COUNTRY
            if (field.type == TType.STRING) {
              this.country = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // REMOTE_IP
            if (field.type == TType.STRING) {
              this.remoteIp = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.country != null) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeString(this.country);
        oprot.writeFieldEnd();
      }
      if (this.remoteIp != null) {
        oprot.writeFieldBegin(REMOTE_IP_FIELD_DESC);
        oprot.writeString(this.remoteIp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUserCountryForBilling_args(");
      boolean first = true;

      sb.append("country:");
      if (this.country == null) {
        sb.append("null");
      } else {
        sb.append(this.country);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("remoteIp:");
      if (this.remoteIp == null) {
        sb.append("null");
      } else {
        sb.append(this.remoteIp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUserCountryForBilling_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUserCountryForBilling_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public getUserCountryForBilling_result() {
    }

    public getUserCountryForBilling_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserCountryForBilling_result(getUserCountryForBilling_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getUserCountryForBilling_result deepCopy() {
      return new getUserCountryForBilling_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserCountryForBilling_result)
        return this.equals((getUserCountryForBilling_result)that);
      return false;
    }

    public boolean equals(getUserCountryForBilling_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUserCountryForBilling_result other = (getUserCountryForBilling_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUserCountryForBilling_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getFavoriteGroupIdsForChannel_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getFavoriteGroupIdsForChannel_args");


    public getFavoriteGroupIdsForChannel_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFavoriteGroupIdsForChannel_args(getFavoriteGroupIdsForChannel_args other) {
    }

    public getFavoriteGroupIdsForChannel_args deepCopy() {
      return new getFavoriteGroupIdsForChannel_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFavoriteGroupIdsForChannel_args)
        return this.equals((getFavoriteGroupIdsForChannel_args)that);
      return false;
    }

    public boolean equals(getFavoriteGroupIdsForChannel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getFavoriteGroupIdsForChannel_args other = (getFavoriteGroupIdsForChannel_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getFavoriteGroupIdsForChannel_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getFavoriteGroupIdsForChannel_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getFavoriteGroupIdsForChannel_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getFavoriteGroupIdsForChannel_result() {
    }

    public getFavoriteGroupIdsForChannel_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFavoriteGroupIdsForChannel_result(getFavoriteGroupIdsForChannel_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getFavoriteGroupIdsForChannel_result deepCopy() {
      return new getFavoriteGroupIdsForChannel_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFavoriteGroupIdsForChannel_result)
        return this.equals((getFavoriteGroupIdsForChannel_result)that);
      return false;
    }

    public boolean equals(getFavoriteGroupIdsForChannel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getFavoriteGroupIdsForChannel_result other = (getFavoriteGroupIdsForChannel_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list1237 = iprot.readListBegin();
                this.success = new Vector(_list1237.size);
                for (int _i1238 = 0; _i1238 < _list1237.size; ++_i1238)
                {
                  String _elem1239;
                  _elem1239 = iprot.readString();
                  this.success.addElement(_elem1239);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter1240_enum = this.success.elements(); _iter1240_enum.hasMoreElements(); )           {
            String _iter1240 = (String)_iter1240_enum.nextElement();
            oprot.writeString(_iter1240);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getFavoriteGroupIdsForChannel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPaidCallHistory_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPaidCallHistory_args");

    private static final TField START_FIELD_DESC = new TField("start", TType.I64, (short)2);
    private static final TField SIZE_FIELD_DESC = new TField("size", TType.I32, (short)3);
    private static final TField LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, (short)4);

    private long start;
    private int size;
    private String language;

    // isset id assignments
    private static final int __START_ISSET_ID = 0;
    private static final int __SIZE_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public getPaidCallHistory_args() {
    }

    public getPaidCallHistory_args(
      long start,
      int size,
      String language)
    {
      this();
      this.start = start;
      setStartIsSet(true);
      this.size = size;
      setSizeIsSet(true);
      this.language = language;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPaidCallHistory_args(getPaidCallHistory_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.start = other.start;
      this.size = other.size;
      if (other.isSetLanguage()) {
        this.language = other.language;
      }
    }

    public getPaidCallHistory_args deepCopy() {
      return new getPaidCallHistory_args(this);
    }

    public void clear() {
      setStartIsSet(false);
      this.start = 0;
      setSizeIsSet(false);
      this.size = 0;
      this.language = null;
    }

    public long getStart() {
      return this.start;
    }

    public void setStart(long start) {
      this.start = start;
      setStartIsSet(true);
    }

    public void unsetStart() {
      __isset_vector[__START_ISSET_ID] = false;
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return __isset_vector[__START_ISSET_ID];
    }

    public void setStartIsSet(boolean value) {
      __isset_vector[__START_ISSET_ID] = value;
    }

    public int getSize() {
      return this.size;
    }

    public void setSize(int size) {
      this.size = size;
      setSizeIsSet(true);
    }

    public void unsetSize() {
      __isset_vector[__SIZE_ISSET_ID] = false;
    }

    /** Returns true if field size is set (has been assigned a value) and false otherwise */
    public boolean isSetSize() {
      return __isset_vector[__SIZE_ISSET_ID];
    }

    public void setSizeIsSet(boolean value) {
      __isset_vector[__SIZE_ISSET_ID] = value;
    }

    public String getLanguage() {
      return this.language;
    }

    public void setLanguage(String language) {
      this.language = language;
    }

    public void unsetLanguage() {
      this.language = null;
    }

    /** Returns true if field language is set (has been assigned a value) and false otherwise */
    public boolean isSetLanguage() {
      return this.language != null;
    }

    public void setLanguageIsSet(boolean value) {
      if (!value) {
        this.language = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPaidCallHistory_args)
        return this.equals((getPaidCallHistory_args)that);
      return false;
    }

    public boolean equals(getPaidCallHistory_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_size = true;
      boolean that_present_size = true;
      if (this_present_size || that_present_size) {
        if (!(this_present_size && that_present_size))
          return false;
        if (this.size != that.size)
          return false;
      }

      boolean this_present_language = true && this.isSetLanguage();
      boolean that_present_language = true && that.isSetLanguage();
      if (this_present_language || that_present_language) {
        if (!(this_present_language && that_present_language))
          return false;
        if (!this.language.equals(that.language))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPaidCallHistory_args other = (getPaidCallHistory_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetStart(), other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSize(), other.isSetSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSize()) {
        lastComparison = TBaseHelper.compareTo(this.size, other.size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLanguage(), other.isSetLanguage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLanguage()) {
        lastComparison = TBaseHelper.compareTo(this.language, other.language);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // START
            if (field.type == TType.I64) {
              this.start = iprot.readI64();
              setStartIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SIZE
            if (field.type == TType.I32) {
              this.size = iprot.readI32();
              setSizeIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // LANGUAGE
            if (field.type == TType.STRING) {
              this.language = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(START_FIELD_DESC);
      oprot.writeI64(this.start);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SIZE_FIELD_DESC);
      oprot.writeI32(this.size);
      oprot.writeFieldEnd();
      if (this.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(this.language);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPaidCallHistory_args(");
      boolean first = true;

      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("size:");
      sb.append(this.size);
      first = false;
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPaidCallHistory_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPaidCallHistory_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private PaidCallHistoryResult success;
    private TalkException e;

    // isset id assignments

    public getPaidCallHistory_result() {
    }

    public getPaidCallHistory_result(
      PaidCallHistoryResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPaidCallHistory_result(getPaidCallHistory_result other) {
      if (other.isSetSuccess()) {
        this.success = new PaidCallHistoryResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getPaidCallHistory_result deepCopy() {
      return new getPaidCallHistory_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public PaidCallHistoryResult getSuccess() {
      return this.success;
    }

    public void setSuccess(PaidCallHistoryResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPaidCallHistory_result)
        return this.equals((getPaidCallHistory_result)that);
      return false;
    }

    public boolean equals(getPaidCallHistory_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPaidCallHistory_result other = (getPaidCallHistory_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new PaidCallHistoryResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPaidCallHistory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendPinCodeOperation_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendPinCodeOperation_args");

    private static final TField VERIFIER_FIELD_DESC = new TField("verifier", TType.STRING, (short)1);

    private String verifier;

    // isset id assignments

    public sendPinCodeOperation_args() {
    }

    public sendPinCodeOperation_args(
      String verifier)
    {
      this();
      this.verifier = verifier;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendPinCodeOperation_args(sendPinCodeOperation_args other) {
      if (other.isSetVerifier()) {
        this.verifier = other.verifier;
      }
    }

    public sendPinCodeOperation_args deepCopy() {
      return new sendPinCodeOperation_args(this);
    }

    public void clear() {
      this.verifier = null;
    }

    public String getVerifier() {
      return this.verifier;
    }

    public void setVerifier(String verifier) {
      this.verifier = verifier;
    }

    public void unsetVerifier() {
      this.verifier = null;
    }

    /** Returns true if field verifier is set (has been assigned a value) and false otherwise */
    public boolean isSetVerifier() {
      return this.verifier != null;
    }

    public void setVerifierIsSet(boolean value) {
      if (!value) {
        this.verifier = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendPinCodeOperation_args)
        return this.equals((sendPinCodeOperation_args)that);
      return false;
    }

    public boolean equals(sendPinCodeOperation_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_verifier = true && this.isSetVerifier();
      boolean that_present_verifier = true && that.isSetVerifier();
      if (this_present_verifier || that_present_verifier) {
        if (!(this_present_verifier && that_present_verifier))
          return false;
        if (!this.verifier.equals(that.verifier))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendPinCodeOperation_args other = (sendPinCodeOperation_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetVerifier(), other.isSetVerifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVerifier()) {
        lastComparison = TBaseHelper.compareTo(this.verifier, other.verifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // VERIFIER
            if (field.type == TType.STRING) {
              this.verifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.verifier != null) {
        oprot.writeFieldBegin(VERIFIER_FIELD_DESC);
        oprot.writeString(this.verifier);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendPinCodeOperation_args(");
      boolean first = true;

      sb.append("verifier:");
      if (this.verifier == null) {
        sb.append("null");
      } else {
        sb.append(this.verifier);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendPinCodeOperation_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendPinCodeOperation_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public sendPinCodeOperation_result() {
    }

    public sendPinCodeOperation_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendPinCodeOperation_result(sendPinCodeOperation_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public sendPinCodeOperation_result deepCopy() {
      return new sendPinCodeOperation_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendPinCodeOperation_result)
        return this.equals((sendPinCodeOperation_result)that);
      return false;
    }

    public boolean equals(sendPinCodeOperation_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendPinCodeOperation_result other = (sendPinCodeOperation_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendPinCodeOperation_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class inviteIntoGroupCall_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("inviteIntoGroupCall_args");

    private static final TField CHAT_MID_FIELD_DESC = new TField("chatMid", TType.STRING, (short)2);
    private static final TField MEMBER_MIDS_FIELD_DESC = new TField("memberMids", TType.LIST, (short)3);
    private static final TField MEDIA_TYPE_FIELD_DESC = new TField("mediaType", TType.I32, (short)4);

    private String chatMid;
    private Vector memberMids;
    private GroupCallMediaType mediaType;

    // isset id assignments

    public inviteIntoGroupCall_args() {
    }

    public inviteIntoGroupCall_args(
      String chatMid,
      Vector memberMids,
      GroupCallMediaType mediaType)
    {
      this();
      this.chatMid = chatMid;
      this.memberMids = memberMids;
      this.mediaType = mediaType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public inviteIntoGroupCall_args(inviteIntoGroupCall_args other) {
      if (other.isSetChatMid()) {
        this.chatMid = other.chatMid;
      }
      if (other.isSetMemberMids()) {
        Vector __this__memberMids = new Vector();
        for (Enumeration other_enum = other.memberMids.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__memberMids.addElement(other_element);
        }
        this.memberMids = __this__memberMids;
      }
      if (other.isSetMediaType()) {
        this.mediaType = other.mediaType;
      }
    }

    public inviteIntoGroupCall_args deepCopy() {
      return new inviteIntoGroupCall_args(this);
    }

    public void clear() {
      this.chatMid = null;
      this.memberMids = null;
      this.mediaType = null;
    }

    public String getChatMid() {
      return this.chatMid;
    }

    public void setChatMid(String chatMid) {
      this.chatMid = chatMid;
    }

    public void unsetChatMid() {
      this.chatMid = null;
    }

    /** Returns true if field chatMid is set (has been assigned a value) and false otherwise */
    public boolean isSetChatMid() {
      return this.chatMid != null;
    }

    public void setChatMidIsSet(boolean value) {
      if (!value) {
        this.chatMid = null;
      }
    }

    public int getMemberMidsSize() {
      return (this.memberMids == null) ? 0 : this.memberMids.size();
    }

    public Enumeration getMemberMidsEnumeration() {
      return (this.memberMids == null) ? null : this.memberMids.elements();
    }

    public void addToMemberMids(String elem) {
      if (this.memberMids == null) {
        this.memberMids = new Vector();
      }
      this.memberMids.addElement(elem);
    }

    public Vector getMemberMids() {
      return this.memberMids;
    }

    public void setMemberMids(Vector memberMids) {
      this.memberMids = memberMids;
    }

    public void unsetMemberMids() {
      this.memberMids = null;
    }

    /** Returns true if field memberMids is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberMids() {
      return this.memberMids != null;
    }

    public void setMemberMidsIsSet(boolean value) {
      if (!value) {
        this.memberMids = null;
      }
    }

    /**
     * 
     * @see GroupCallMediaType
     */
    public GroupCallMediaType getMediaType() {
      return this.mediaType;
    }

    /**
     * 
     * @see GroupCallMediaType
     */
    public void setMediaType(GroupCallMediaType mediaType) {
      this.mediaType = mediaType;
    }

    public void unsetMediaType() {
      this.mediaType = null;
    }

    /** Returns true if field mediaType is set (has been assigned a value) and false otherwise */
    public boolean isSetMediaType() {
      return this.mediaType != null;
    }

    public void setMediaTypeIsSet(boolean value) {
      if (!value) {
        this.mediaType = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof inviteIntoGroupCall_args)
        return this.equals((inviteIntoGroupCall_args)that);
      return false;
    }

    public boolean equals(inviteIntoGroupCall_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_chatMid = true && this.isSetChatMid();
      boolean that_present_chatMid = true && that.isSetChatMid();
      if (this_present_chatMid || that_present_chatMid) {
        if (!(this_present_chatMid && that_present_chatMid))
          return false;
        if (!this.chatMid.equals(that.chatMid))
          return false;
      }

      boolean this_present_memberMids = true && this.isSetMemberMids();
      boolean that_present_memberMids = true && that.isSetMemberMids();
      if (this_present_memberMids || that_present_memberMids) {
        if (!(this_present_memberMids && that_present_memberMids))
          return false;
        if (!this.memberMids.equals(that.memberMids))
          return false;
      }

      boolean this_present_mediaType = true && this.isSetMediaType();
      boolean that_present_mediaType = true && that.isSetMediaType();
      if (this_present_mediaType || that_present_mediaType) {
        if (!(this_present_mediaType && that_present_mediaType))
          return false;
        if (!this.mediaType.equals(that.mediaType))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      inviteIntoGroupCall_args other = (inviteIntoGroupCall_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetChatMid(), other.isSetChatMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChatMid()) {
        lastComparison = TBaseHelper.compareTo(this.chatMid, other.chatMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMemberMids(), other.isSetMemberMids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberMids()) {
        lastComparison = TBaseHelper.compareTo(this.memberMids, other.memberMids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMediaType(), other.isSetMediaType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMediaType()) {
        lastComparison = TBaseHelper.compareTo(this.mediaType, other.mediaType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // CHAT_MID
            if (field.type == TType.STRING) {
              this.chatMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // MEMBER_MIDS
            if (field.type == TType.LIST) {
              {
                TList _list1241 = iprot.readListBegin();
                this.memberMids = new Vector(_list1241.size);
                for (int _i1242 = 0; _i1242 < _list1241.size; ++_i1242)
                {
                  String _elem1243;
                  _elem1243 = iprot.readString();
                  this.memberMids.addElement(_elem1243);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // MEDIA_TYPE
            if (field.type == TType.I32) {
              this.mediaType = GroupCallMediaType.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.chatMid != null) {
        oprot.writeFieldBegin(CHAT_MID_FIELD_DESC);
        oprot.writeString(this.chatMid);
        oprot.writeFieldEnd();
      }
      if (this.memberMids != null) {
        oprot.writeFieldBegin(MEMBER_MIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.memberMids.size()));
          for (Enumeration _iter1244_enum = this.memberMids.elements(); _iter1244_enum.hasMoreElements(); )           {
            String _iter1244 = (String)_iter1244_enum.nextElement();
            oprot.writeString(_iter1244);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.mediaType != null) {
        oprot.writeFieldBegin(MEDIA_TYPE_FIELD_DESC);
        oprot.writeI32(this.mediaType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("inviteIntoGroupCall_args(");
      boolean first = true;

      sb.append("chatMid:");
      if (this.chatMid == null) {
        sb.append("null");
      } else {
        sb.append(this.chatMid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("memberMids:");
      if (this.memberMids == null) {
        sb.append("null");
      } else {
        sb.append(this.memberMids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mediaType:");
      if (this.mediaType == null) {
        sb.append("null");
      } else {
        sb.append(this.mediaType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class inviteIntoGroupCall_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("inviteIntoGroupCall_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public inviteIntoGroupCall_result() {
    }

    public inviteIntoGroupCall_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public inviteIntoGroupCall_result(inviteIntoGroupCall_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public inviteIntoGroupCall_result deepCopy() {
      return new inviteIntoGroupCall_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof inviteIntoGroupCall_result)
        return this.equals((inviteIntoGroupCall_result)that);
      return false;
    }

    public boolean equals(inviteIntoGroupCall_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      inviteIntoGroupCall_result other = (inviteIntoGroupCall_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("inviteIntoGroupCall_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getFriendMids_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getFriendMids_args");


    public getFriendMids_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFriendMids_args(getFriendMids_args other) {
    }

    public getFriendMids_args deepCopy() {
      return new getFriendMids_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFriendMids_args)
        return this.equals((getFriendMids_args)that);
      return false;
    }

    public boolean equals(getFriendMids_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getFriendMids_args other = (getFriendMids_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getFriendMids_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getFriendMids_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getFriendMids_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getFriendMids_result() {
    }

    public getFriendMids_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFriendMids_result(getFriendMids_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getFriendMids_result deepCopy() {
      return new getFriendMids_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFriendMids_result)
        return this.equals((getFriendMids_result)that);
      return false;
    }

    public boolean equals(getFriendMids_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getFriendMids_result other = (getFriendMids_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list1245 = iprot.readListBegin();
                this.success = new Vector(_list1245.size);
                for (int _i1246 = 0; _i1246 < _list1245.size; ++_i1246)
                {
                  String _elem1247;
                  _elem1247 = iprot.readString();
                  this.success.addElement(_elem1247);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter1248_enum = this.success.elements(); _iter1248_enum.hasMoreElements(); )           {
            String _iter1248 = (String)_iter1248_enum.nextElement();
            oprot.writeString(_iter1248);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getFriendMids_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getMetaProfile_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getMetaProfile_args");


    public getMetaProfile_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMetaProfile_args(getMetaProfile_args other) {
    }

    public getMetaProfile_args deepCopy() {
      return new getMetaProfile_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMetaProfile_args)
        return this.equals((getMetaProfile_args)that);
      return false;
    }

    public boolean equals(getMetaProfile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getMetaProfile_args other = (getMetaProfile_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getMetaProfile_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getMetaProfile_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getMetaProfile_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private MetaProfile success;
    private TalkException e;

    // isset id assignments

    public getMetaProfile_result() {
    }

    public getMetaProfile_result(
      MetaProfile success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMetaProfile_result(getMetaProfile_result other) {
      if (other.isSetSuccess()) {
        this.success = new MetaProfile(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getMetaProfile_result deepCopy() {
      return new getMetaProfile_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public MetaProfile getSuccess() {
      return this.success;
    }

    public void setSuccess(MetaProfile success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMetaProfile_result)
        return this.equals((getMetaProfile_result)that);
      return false;
    }

    public boolean equals(getMetaProfile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getMetaProfile_result other = (getMetaProfile_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new MetaProfile();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getMetaProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendMessageForChannel_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendMessageForChannel_args");

    private static final TField MESSAGE_FIELD_DESC = new TField("message", TType.STRUCT, (short)2);

    private Message message;

    // isset id assignments

    public sendMessageForChannel_args() {
    }

    public sendMessageForChannel_args(
      Message message)
    {
      this();
      this.message = message;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMessageForChannel_args(sendMessageForChannel_args other) {
      if (other.isSetMessage()) {
        this.message = new Message(other.message);
      }
    }

    public sendMessageForChannel_args deepCopy() {
      return new sendMessageForChannel_args(this);
    }

    public void clear() {
      this.message = null;
    }

    public Message getMessage() {
      return this.message;
    }

    public void setMessage(Message message) {
      this.message = message;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /** Returns true if field message is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMessageForChannel_args)
        return this.equals((sendMessageForChannel_args)that);
      return false;
    }

    public boolean equals(sendMessageForChannel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendMessageForChannel_args other = (sendMessageForChannel_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetMessage(), other.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = this.message.compareTo(other.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // MESSAGE
            if (field.type == TType.STRUCT) {
              this.message = new Message();
              this.message.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        this.message.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendMessageForChannel_args(");
      boolean first = true;

      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendMessageForChannel_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendMessageForChannel_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Message success;
    private TalkException e;

    // isset id assignments

    public sendMessageForChannel_result() {
    }

    public sendMessageForChannel_result(
      Message success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMessageForChannel_result(sendMessageForChannel_result other) {
      if (other.isSetSuccess()) {
        this.success = new Message(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public sendMessageForChannel_result deepCopy() {
      return new sendMessageForChannel_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Message getSuccess() {
      return this.success;
    }

    public void setSuccess(Message success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMessageForChannel_result)
        return this.equals((sendMessageForChannel_result)that);
      return false;
    }

    public boolean equals(sendMessageForChannel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendMessageForChannel_result other = (sendMessageForChannel_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Message();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendMessageForChannel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class activeBuddySubscriberCount_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("activeBuddySubscriberCount_args");


    public activeBuddySubscriberCount_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activeBuddySubscriberCount_args(activeBuddySubscriberCount_args other) {
    }

    public activeBuddySubscriberCount_args deepCopy() {
      return new activeBuddySubscriberCount_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof activeBuddySubscriberCount_args)
        return this.equals((activeBuddySubscriberCount_args)that);
      return false;
    }

    public boolean equals(activeBuddySubscriberCount_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      activeBuddySubscriberCount_args other = (activeBuddySubscriberCount_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("activeBuddySubscriberCount_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class activeBuddySubscriberCount_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("activeBuddySubscriberCount_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I64, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private long success;
    private TalkException e;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public activeBuddySubscriberCount_result() {
    }

    public activeBuddySubscriberCount_result(
      long success,
      TalkException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activeBuddySubscriberCount_result(activeBuddySubscriberCount_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public activeBuddySubscriberCount_result deepCopy() {
      return new activeBuddySubscriberCount_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public void setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof activeBuddySubscriberCount_result)
        return this.equals((activeBuddySubscriberCount_result)that);
      return false;
    }

    public boolean equals(activeBuddySubscriberCount_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      activeBuddySubscriberCount_result other = (activeBuddySubscriberCount_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("activeBuddySubscriberCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getCallCreditPurchaseHistory_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getCallCreditPurchaseHistory_args");

    private static final TField REQUEST_FIELD_DESC = new TField("request", TType.STRUCT, (short)2);

    private CoinHistoryCondition request;

    // isset id assignments

    public getCallCreditPurchaseHistory_args() {
    }

    public getCallCreditPurchaseHistory_args(
      CoinHistoryCondition request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCallCreditPurchaseHistory_args(getCallCreditPurchaseHistory_args other) {
      if (other.isSetRequest()) {
        this.request = new CoinHistoryCondition(other.request);
      }
    }

    public getCallCreditPurchaseHistory_args deepCopy() {
      return new getCallCreditPurchaseHistory_args(this);
    }

    public void clear() {
      this.request = null;
    }

    public CoinHistoryCondition getRequest() {
      return this.request;
    }

    public void setRequest(CoinHistoryCondition request) {
      this.request = request;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCallCreditPurchaseHistory_args)
        return this.equals((getCallCreditPurchaseHistory_args)that);
      return false;
    }

    public boolean equals(getCallCreditPurchaseHistory_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getCallCreditPurchaseHistory_args other = (getCallCreditPurchaseHistory_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = this.request.compareTo(other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // REQUEST
            if (field.type == TType.STRUCT) {
              this.request = new CoinHistoryCondition();
              this.request.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.request != null) {
        oprot.writeFieldBegin(REQUEST_FIELD_DESC);
        this.request.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getCallCreditPurchaseHistory_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getCallCreditPurchaseHistory_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getCallCreditPurchaseHistory_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private CoinHistoryResult success;
    private TalkException e;

    // isset id assignments

    public getCallCreditPurchaseHistory_result() {
    }

    public getCallCreditPurchaseHistory_result(
      CoinHistoryResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCallCreditPurchaseHistory_result(getCallCreditPurchaseHistory_result other) {
      if (other.isSetSuccess()) {
        this.success = new CoinHistoryResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getCallCreditPurchaseHistory_result deepCopy() {
      return new getCallCreditPurchaseHistory_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public CoinHistoryResult getSuccess() {
      return this.success;
    }

    public void setSuccess(CoinHistoryResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCallCreditPurchaseHistory_result)
        return this.equals((getCallCreditPurchaseHistory_result)that);
      return false;
    }

    public boolean equals(getCallCreditPurchaseHistory_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getCallCreditPurchaseHistory_result other = (getCallCreditPurchaseHistory_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new CoinHistoryResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getCallCreditPurchaseHistory_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class isRoomMember_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("isRoomMember_args");

    private static final TField ROOM_ID_FIELD_DESC = new TField("roomId", TType.STRING, (short)1);

    private String roomId;

    // isset id assignments

    public isRoomMember_args() {
    }

    public isRoomMember_args(
      String roomId)
    {
      this();
      this.roomId = roomId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isRoomMember_args(isRoomMember_args other) {
      if (other.isSetRoomId()) {
        this.roomId = other.roomId;
      }
    }

    public isRoomMember_args deepCopy() {
      return new isRoomMember_args(this);
    }

    public void clear() {
      this.roomId = null;
    }

    public String getRoomId() {
      return this.roomId;
    }

    public void setRoomId(String roomId) {
      this.roomId = roomId;
    }

    public void unsetRoomId() {
      this.roomId = null;
    }

    /** Returns true if field roomId is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomId() {
      return this.roomId != null;
    }

    public void setRoomIdIsSet(boolean value) {
      if (!value) {
        this.roomId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isRoomMember_args)
        return this.equals((isRoomMember_args)that);
      return false;
    }

    public boolean equals(isRoomMember_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_roomId = true && this.isSetRoomId();
      boolean that_present_roomId = true && that.isSetRoomId();
      if (this_present_roomId || that_present_roomId) {
        if (!(this_present_roomId && that_present_roomId))
          return false;
        if (!this.roomId.equals(that.roomId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      isRoomMember_args other = (isRoomMember_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRoomId(), other.isSetRoomId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomId()) {
        lastComparison = TBaseHelper.compareTo(this.roomId, other.roomId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ROOM_ID
            if (field.type == TType.STRING) {
              this.roomId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.roomId != null) {
        oprot.writeFieldBegin(ROOM_ID_FIELD_DESC);
        oprot.writeString(this.roomId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("isRoomMember_args(");
      boolean first = true;

      sb.append("roomId:");
      if (this.roomId == null) {
        sb.append("null");
      } else {
        sb.append(this.roomId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class isRoomMember_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("isRoomMember_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private boolean success;
    private TalkException e;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public isRoomMember_result() {
    }

    public isRoomMember_result(
      boolean success,
      TalkException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isRoomMember_result(isRoomMember_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public isRoomMember_result deepCopy() {
      return new isRoomMember_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isRoomMember_result)
        return this.equals((isRoomMember_result)that);
      return false;
    }

    public boolean equals(isRoomMember_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      isRoomMember_result other = (isRoomMember_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("isRoomMember_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendSystemOAMessage_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendSystemOAMessage_args");

    private static final TField MESSAGE_FIELD_DESC = new TField("message", TType.STRUCT, (short)1);

    private Message message;

    // isset id assignments

    public sendSystemOAMessage_args() {
    }

    public sendSystemOAMessage_args(
      Message message)
    {
      this();
      this.message = message;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendSystemOAMessage_args(sendSystemOAMessage_args other) {
      if (other.isSetMessage()) {
        this.message = new Message(other.message);
      }
    }

    public sendSystemOAMessage_args deepCopy() {
      return new sendSystemOAMessage_args(this);
    }

    public void clear() {
      this.message = null;
    }

    public Message getMessage() {
      return this.message;
    }

    public void setMessage(Message message) {
      this.message = message;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /** Returns true if field message is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendSystemOAMessage_args)
        return this.equals((sendSystemOAMessage_args)that);
      return false;
    }

    public boolean equals(sendSystemOAMessage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendSystemOAMessage_args other = (sendSystemOAMessage_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetMessage(), other.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = this.message.compareTo(other.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MESSAGE
            if (field.type == TType.STRUCT) {
              this.message = new Message();
              this.message.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        this.message.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendSystemOAMessage_args(");
      boolean first = true;

      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendSystemOAMessage_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendSystemOAMessage_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Message success;
    private TalkException e;

    // isset id assignments

    public sendSystemOAMessage_result() {
    }

    public sendSystemOAMessage_result(
      Message success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendSystemOAMessage_result(sendSystemOAMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = new Message(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public sendSystemOAMessage_result deepCopy() {
      return new sendSystemOAMessage_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Message getSuccess() {
      return this.success;
    }

    public void setSuccess(Message success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendSystemOAMessage_result)
        return this.equals((sendSystemOAMessage_result)that);
      return false;
    }

    public boolean equals(sendSystemOAMessage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendSystemOAMessage_result other = (sendSystemOAMessage_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Message();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendSystemOAMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class acquirePaidCallRoute_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("acquirePaidCallRoute_args");

    private static final TField PAID_CALL_TYPE_FIELD_DESC = new TField("paidCallType", TType.I32, (short)2);
    private static final TField DIALED_NUMBER_FIELD_DESC = new TField("dialedNumber", TType.STRING, (short)3);
    private static final TField LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, (short)4);
    private static final TField NETWORK_CODE_FIELD_DESC = new TField("networkCode", TType.STRING, (short)5);
    private static final TField DISABLE_CALLER_ID_FIELD_DESC = new TField("disableCallerId", TType.BOOL, (short)6);
    private static final TField REFERER_FIELD_DESC = new TField("referer", TType.STRING, (short)7);
    private static final TField AD_SESSION_ID_FIELD_DESC = new TField("adSessionId", TType.STRING, (short)8);

    private PaidCallType paidCallType;
    private String dialedNumber;
    private String language;
    private String networkCode;
    private boolean disableCallerId;
    private String referer;
    private String adSessionId;

    // isset id assignments
    private static final int __DISABLECALLERID_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public acquirePaidCallRoute_args() {
    }

    public acquirePaidCallRoute_args(
      PaidCallType paidCallType,
      String dialedNumber,
      String language,
      String networkCode,
      boolean disableCallerId,
      String referer,
      String adSessionId)
    {
      this();
      this.paidCallType = paidCallType;
      this.dialedNumber = dialedNumber;
      this.language = language;
      this.networkCode = networkCode;
      this.disableCallerId = disableCallerId;
      setDisableCallerIdIsSet(true);
      this.referer = referer;
      this.adSessionId = adSessionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public acquirePaidCallRoute_args(acquirePaidCallRoute_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetPaidCallType()) {
        this.paidCallType = other.paidCallType;
      }
      if (other.isSetDialedNumber()) {
        this.dialedNumber = other.dialedNumber;
      }
      if (other.isSetLanguage()) {
        this.language = other.language;
      }
      if (other.isSetNetworkCode()) {
        this.networkCode = other.networkCode;
      }
      this.disableCallerId = other.disableCallerId;
      if (other.isSetReferer()) {
        this.referer = other.referer;
      }
      if (other.isSetAdSessionId()) {
        this.adSessionId = other.adSessionId;
      }
    }

    public acquirePaidCallRoute_args deepCopy() {
      return new acquirePaidCallRoute_args(this);
    }

    public void clear() {
      this.paidCallType = null;
      this.dialedNumber = null;
      this.language = null;
      this.networkCode = null;
      setDisableCallerIdIsSet(false);
      this.disableCallerId = false;
      this.referer = null;
      this.adSessionId = null;
    }

    /**
     * 
     * @see PaidCallType
     */
    public PaidCallType getPaidCallType() {
      return this.paidCallType;
    }

    /**
     * 
     * @see PaidCallType
     */
    public void setPaidCallType(PaidCallType paidCallType) {
      this.paidCallType = paidCallType;
    }

    public void unsetPaidCallType() {
      this.paidCallType = null;
    }

    /** Returns true if field paidCallType is set (has been assigned a value) and false otherwise */
    public boolean isSetPaidCallType() {
      return this.paidCallType != null;
    }

    public void setPaidCallTypeIsSet(boolean value) {
      if (!value) {
        this.paidCallType = null;
      }
    }

    public String getDialedNumber() {
      return this.dialedNumber;
    }

    public void setDialedNumber(String dialedNumber) {
      this.dialedNumber = dialedNumber;
    }

    public void unsetDialedNumber() {
      this.dialedNumber = null;
    }

    /** Returns true if field dialedNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetDialedNumber() {
      return this.dialedNumber != null;
    }

    public void setDialedNumberIsSet(boolean value) {
      if (!value) {
        this.dialedNumber = null;
      }
    }

    public String getLanguage() {
      return this.language;
    }

    public void setLanguage(String language) {
      this.language = language;
    }

    public void unsetLanguage() {
      this.language = null;
    }

    /** Returns true if field language is set (has been assigned a value) and false otherwise */
    public boolean isSetLanguage() {
      return this.language != null;
    }

    public void setLanguageIsSet(boolean value) {
      if (!value) {
        this.language = null;
      }
    }

    public String getNetworkCode() {
      return this.networkCode;
    }

    public void setNetworkCode(String networkCode) {
      this.networkCode = networkCode;
    }

    public void unsetNetworkCode() {
      this.networkCode = null;
    }

    /** Returns true if field networkCode is set (has been assigned a value) and false otherwise */
    public boolean isSetNetworkCode() {
      return this.networkCode != null;
    }

    public void setNetworkCodeIsSet(boolean value) {
      if (!value) {
        this.networkCode = null;
      }
    }

    public boolean isDisableCallerId() {
      return this.disableCallerId;
    }

    public void setDisableCallerId(boolean disableCallerId) {
      this.disableCallerId = disableCallerId;
      setDisableCallerIdIsSet(true);
    }

    public void unsetDisableCallerId() {
      __isset_vector[__DISABLECALLERID_ISSET_ID] = false;
    }

    /** Returns true if field disableCallerId is set (has been assigned a value) and false otherwise */
    public boolean isSetDisableCallerId() {
      return __isset_vector[__DISABLECALLERID_ISSET_ID];
    }

    public void setDisableCallerIdIsSet(boolean value) {
      __isset_vector[__DISABLECALLERID_ISSET_ID] = value;
    }

    public String getReferer() {
      return this.referer;
    }

    public void setReferer(String referer) {
      this.referer = referer;
    }

    public void unsetReferer() {
      this.referer = null;
    }

    /** Returns true if field referer is set (has been assigned a value) and false otherwise */
    public boolean isSetReferer() {
      return this.referer != null;
    }

    public void setRefererIsSet(boolean value) {
      if (!value) {
        this.referer = null;
      }
    }

    public String getAdSessionId() {
      return this.adSessionId;
    }

    public void setAdSessionId(String adSessionId) {
      this.adSessionId = adSessionId;
    }

    public void unsetAdSessionId() {
      this.adSessionId = null;
    }

    /** Returns true if field adSessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetAdSessionId() {
      return this.adSessionId != null;
    }

    public void setAdSessionIdIsSet(boolean value) {
      if (!value) {
        this.adSessionId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof acquirePaidCallRoute_args)
        return this.equals((acquirePaidCallRoute_args)that);
      return false;
    }

    public boolean equals(acquirePaidCallRoute_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_paidCallType = true && this.isSetPaidCallType();
      boolean that_present_paidCallType = true && that.isSetPaidCallType();
      if (this_present_paidCallType || that_present_paidCallType) {
        if (!(this_present_paidCallType && that_present_paidCallType))
          return false;
        if (!this.paidCallType.equals(that.paidCallType))
          return false;
      }

      boolean this_present_dialedNumber = true && this.isSetDialedNumber();
      boolean that_present_dialedNumber = true && that.isSetDialedNumber();
      if (this_present_dialedNumber || that_present_dialedNumber) {
        if (!(this_present_dialedNumber && that_present_dialedNumber))
          return false;
        if (!this.dialedNumber.equals(that.dialedNumber))
          return false;
      }

      boolean this_present_language = true && this.isSetLanguage();
      boolean that_present_language = true && that.isSetLanguage();
      if (this_present_language || that_present_language) {
        if (!(this_present_language && that_present_language))
          return false;
        if (!this.language.equals(that.language))
          return false;
      }

      boolean this_present_networkCode = true && this.isSetNetworkCode();
      boolean that_present_networkCode = true && that.isSetNetworkCode();
      if (this_present_networkCode || that_present_networkCode) {
        if (!(this_present_networkCode && that_present_networkCode))
          return false;
        if (!this.networkCode.equals(that.networkCode))
          return false;
      }

      boolean this_present_disableCallerId = true;
      boolean that_present_disableCallerId = true;
      if (this_present_disableCallerId || that_present_disableCallerId) {
        if (!(this_present_disableCallerId && that_present_disableCallerId))
          return false;
        if (this.disableCallerId != that.disableCallerId)
          return false;
      }

      boolean this_present_referer = true && this.isSetReferer();
      boolean that_present_referer = true && that.isSetReferer();
      if (this_present_referer || that_present_referer) {
        if (!(this_present_referer && that_present_referer))
          return false;
        if (!this.referer.equals(that.referer))
          return false;
      }

      boolean this_present_adSessionId = true && this.isSetAdSessionId();
      boolean that_present_adSessionId = true && that.isSetAdSessionId();
      if (this_present_adSessionId || that_present_adSessionId) {
        if (!(this_present_adSessionId && that_present_adSessionId))
          return false;
        if (!this.adSessionId.equals(that.adSessionId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      acquirePaidCallRoute_args other = (acquirePaidCallRoute_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetPaidCallType(), other.isSetPaidCallType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPaidCallType()) {
        lastComparison = TBaseHelper.compareTo(this.paidCallType, other.paidCallType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetDialedNumber(), other.isSetDialedNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDialedNumber()) {
        lastComparison = TBaseHelper.compareTo(this.dialedNumber, other.dialedNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLanguage(), other.isSetLanguage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLanguage()) {
        lastComparison = TBaseHelper.compareTo(this.language, other.language);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNetworkCode(), other.isSetNetworkCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNetworkCode()) {
        lastComparison = TBaseHelper.compareTo(this.networkCode, other.networkCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetDisableCallerId(), other.isSetDisableCallerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDisableCallerId()) {
        lastComparison = TBaseHelper.compareTo(this.disableCallerId, other.disableCallerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetReferer(), other.isSetReferer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReferer()) {
        lastComparison = TBaseHelper.compareTo(this.referer, other.referer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetAdSessionId(), other.isSetAdSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdSessionId()) {
        lastComparison = TBaseHelper.compareTo(this.adSessionId, other.adSessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // PAID_CALL_TYPE
            if (field.type == TType.I32) {
              this.paidCallType = PaidCallType.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // DIALED_NUMBER
            if (field.type == TType.STRING) {
              this.dialedNumber = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // LANGUAGE
            if (field.type == TType.STRING) {
              this.language = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // NETWORK_CODE
            if (field.type == TType.STRING) {
              this.networkCode = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // DISABLE_CALLER_ID
            if (field.type == TType.BOOL) {
              this.disableCallerId = iprot.readBool();
              setDisableCallerIdIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // REFERER
            if (field.type == TType.STRING) {
              this.referer = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 8: // AD_SESSION_ID
            if (field.type == TType.STRING) {
              this.adSessionId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.paidCallType != null) {
        oprot.writeFieldBegin(PAID_CALL_TYPE_FIELD_DESC);
        oprot.writeI32(this.paidCallType.getValue());
        oprot.writeFieldEnd();
      }
      if (this.dialedNumber != null) {
        oprot.writeFieldBegin(DIALED_NUMBER_FIELD_DESC);
        oprot.writeString(this.dialedNumber);
        oprot.writeFieldEnd();
      }
      if (this.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(this.language);
        oprot.writeFieldEnd();
      }
      if (this.networkCode != null) {
        oprot.writeFieldBegin(NETWORK_CODE_FIELD_DESC);
        oprot.writeString(this.networkCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(DISABLE_CALLER_ID_FIELD_DESC);
      oprot.writeBool(this.disableCallerId);
      oprot.writeFieldEnd();
      if (this.referer != null) {
        oprot.writeFieldBegin(REFERER_FIELD_DESC);
        oprot.writeString(this.referer);
        oprot.writeFieldEnd();
      }
      if (this.adSessionId != null) {
        oprot.writeFieldBegin(AD_SESSION_ID_FIELD_DESC);
        oprot.writeString(this.adSessionId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("acquirePaidCallRoute_args(");
      boolean first = true;

      sb.append("paidCallType:");
      if (this.paidCallType == null) {
        sb.append("null");
      } else {
        sb.append(this.paidCallType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dialedNumber:");
      if (this.dialedNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.dialedNumber);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("networkCode:");
      if (this.networkCode == null) {
        sb.append("null");
      } else {
        sb.append(this.networkCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("disableCallerId:");
      sb.append(this.disableCallerId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("referer:");
      if (this.referer == null) {
        sb.append("null");
      } else {
        sb.append(this.referer);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("adSessionId:");
      if (this.adSessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.adSessionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class acquirePaidCallRoute_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("acquirePaidCallRoute_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private PaidCallResponse success;
    private TalkException e;

    // isset id assignments

    public acquirePaidCallRoute_result() {
    }

    public acquirePaidCallRoute_result(
      PaidCallResponse success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public acquirePaidCallRoute_result(acquirePaidCallRoute_result other) {
      if (other.isSetSuccess()) {
        this.success = new PaidCallResponse(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public acquirePaidCallRoute_result deepCopy() {
      return new acquirePaidCallRoute_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public PaidCallResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(PaidCallResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof acquirePaidCallRoute_result)
        return this.equals((acquirePaidCallRoute_result)that);
      return false;
    }

    public boolean equals(acquirePaidCallRoute_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      acquirePaidCallRoute_result other = (acquirePaidCallRoute_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new PaidCallResponse();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("acquirePaidCallRoute_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getGroupsForChannel_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getGroupsForChannel_args");

    private static final TField GROUP_IDS_FIELD_DESC = new TField("groupIds", TType.LIST, (short)1);

    private Vector groupIds;

    // isset id assignments

    public getGroupsForChannel_args() {
    }

    public getGroupsForChannel_args(
      Vector groupIds)
    {
      this();
      this.groupIds = groupIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroupsForChannel_args(getGroupsForChannel_args other) {
      if (other.isSetGroupIds()) {
        Vector __this__groupIds = new Vector();
        for (Enumeration other_enum = other.groupIds.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__groupIds.addElement(other_element);
        }
        this.groupIds = __this__groupIds;
      }
    }

    public getGroupsForChannel_args deepCopy() {
      return new getGroupsForChannel_args(this);
    }

    public void clear() {
      this.groupIds = null;
    }

    public int getGroupIdsSize() {
      return (this.groupIds == null) ? 0 : this.groupIds.size();
    }

    public Enumeration getGroupIdsEnumeration() {
      return (this.groupIds == null) ? null : this.groupIds.elements();
    }

    public void addToGroupIds(String elem) {
      if (this.groupIds == null) {
        this.groupIds = new Vector();
      }
      this.groupIds.addElement(elem);
    }

    public Vector getGroupIds() {
      return this.groupIds;
    }

    public void setGroupIds(Vector groupIds) {
      this.groupIds = groupIds;
    }

    public void unsetGroupIds() {
      this.groupIds = null;
    }

    /** Returns true if field groupIds is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupIds() {
      return this.groupIds != null;
    }

    public void setGroupIdsIsSet(boolean value) {
      if (!value) {
        this.groupIds = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroupsForChannel_args)
        return this.equals((getGroupsForChannel_args)that);
      return false;
    }

    public boolean equals(getGroupsForChannel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_groupIds = true && this.isSetGroupIds();
      boolean that_present_groupIds = true && that.isSetGroupIds();
      if (this_present_groupIds || that_present_groupIds) {
        if (!(this_present_groupIds && that_present_groupIds))
          return false;
        if (!this.groupIds.equals(that.groupIds))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getGroupsForChannel_args other = (getGroupsForChannel_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetGroupIds(), other.isSetGroupIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupIds()) {
        lastComparison = TBaseHelper.compareTo(this.groupIds, other.groupIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // GROUP_IDS
            if (field.type == TType.LIST) {
              {
                TList _list1249 = iprot.readListBegin();
                this.groupIds = new Vector(_list1249.size);
                for (int _i1250 = 0; _i1250 < _list1249.size; ++_i1250)
                {
                  String _elem1251;
                  _elem1251 = iprot.readString();
                  this.groupIds.addElement(_elem1251);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.groupIds != null) {
        oprot.writeFieldBegin(GROUP_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.groupIds.size()));
          for (Enumeration _iter1252_enum = this.groupIds.elements(); _iter1252_enum.hasMoreElements(); )           {
            String _iter1252 = (String)_iter1252_enum.nextElement();
            oprot.writeString(_iter1252);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getGroupsForChannel_args(");
      boolean first = true;

      sb.append("groupIds:");
      if (this.groupIds == null) {
        sb.append("null");
      } else {
        sb.append(this.groupIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getGroupsForChannel_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getGroupsForChannel_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getGroupsForChannel_result() {
    }

    public getGroupsForChannel_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroupsForChannel_result(getGroupsForChannel_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          Group other_element = (Group)other_enum.nextElement();
          __this__success.addElement(new Group(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getGroupsForChannel_result deepCopy() {
      return new getGroupsForChannel_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(Group elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroupsForChannel_result)
        return this.equals((getGroupsForChannel_result)that);
      return false;
    }

    public boolean equals(getGroupsForChannel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getGroupsForChannel_result other = (getGroupsForChannel_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list1253 = iprot.readListBegin();
                this.success = new Vector(_list1253.size);
                for (int _i1254 = 0; _i1254 < _list1253.size; ++_i1254)
                {
                  Group _elem1255;
                  _elem1255 = new Group();
                  _elem1255.read(iprot);
                  this.success.addElement(_elem1255);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter1256_enum = this.success.elements(); _iter1256_enum.hasMoreElements(); )           {
            Group _iter1256 = (Group)_iter1256_enum.nextElement();
            _iter1256.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getGroupsForChannel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUserCreateTime_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUserCreateTime_args");


    public getUserCreateTime_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserCreateTime_args(getUserCreateTime_args other) {
    }

    public getUserCreateTime_args deepCopy() {
      return new getUserCreateTime_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserCreateTime_args)
        return this.equals((getUserCreateTime_args)that);
      return false;
    }

    public boolean equals(getUserCreateTime_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUserCreateTime_args other = (getUserCreateTime_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUserCreateTime_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUserCreateTime_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUserCreateTime_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I64, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private long success;
    private TalkException e;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getUserCreateTime_result() {
    }

    public getUserCreateTime_result(
      long success,
      TalkException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserCreateTime_result(getUserCreateTime_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getUserCreateTime_result deepCopy() {
      return new getUserCreateTime_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public void setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserCreateTime_result)
        return this.equals((getUserCreateTime_result)that);
      return false;
    }

    public boolean equals(getUserCreateTime_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUserCreateTime_result other = (getUserCreateTime_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUserCreateTime_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerChannelCP_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerChannelCP_args");

    private static final TField CP_ID_FIELD_DESC = new TField("cpId", TType.STRING, (short)2);
    private static final TField REGISTER_PASSWORD_FIELD_DESC = new TField("registerPassword", TType.STRING, (short)3);

    private String cpId;
    private String registerPassword;

    // isset id assignments

    public registerChannelCP_args() {
    }

    public registerChannelCP_args(
      String cpId,
      String registerPassword)
    {
      this();
      this.cpId = cpId;
      this.registerPassword = registerPassword;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerChannelCP_args(registerChannelCP_args other) {
      if (other.isSetCpId()) {
        this.cpId = other.cpId;
      }
      if (other.isSetRegisterPassword()) {
        this.registerPassword = other.registerPassword;
      }
    }

    public registerChannelCP_args deepCopy() {
      return new registerChannelCP_args(this);
    }

    public void clear() {
      this.cpId = null;
      this.registerPassword = null;
    }

    public String getCpId() {
      return this.cpId;
    }

    public void setCpId(String cpId) {
      this.cpId = cpId;
    }

    public void unsetCpId() {
      this.cpId = null;
    }

    /** Returns true if field cpId is set (has been assigned a value) and false otherwise */
    public boolean isSetCpId() {
      return this.cpId != null;
    }

    public void setCpIdIsSet(boolean value) {
      if (!value) {
        this.cpId = null;
      }
    }

    public String getRegisterPassword() {
      return this.registerPassword;
    }

    public void setRegisterPassword(String registerPassword) {
      this.registerPassword = registerPassword;
    }

    public void unsetRegisterPassword() {
      this.registerPassword = null;
    }

    /** Returns true if field registerPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetRegisterPassword() {
      return this.registerPassword != null;
    }

    public void setRegisterPasswordIsSet(boolean value) {
      if (!value) {
        this.registerPassword = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerChannelCP_args)
        return this.equals((registerChannelCP_args)that);
      return false;
    }

    public boolean equals(registerChannelCP_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cpId = true && this.isSetCpId();
      boolean that_present_cpId = true && that.isSetCpId();
      if (this_present_cpId || that_present_cpId) {
        if (!(this_present_cpId && that_present_cpId))
          return false;
        if (!this.cpId.equals(that.cpId))
          return false;
      }

      boolean this_present_registerPassword = true && this.isSetRegisterPassword();
      boolean that_present_registerPassword = true && that.isSetRegisterPassword();
      if (this_present_registerPassword || that_present_registerPassword) {
        if (!(this_present_registerPassword && that_present_registerPassword))
          return false;
        if (!this.registerPassword.equals(that.registerPassword))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerChannelCP_args other = (registerChannelCP_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetCpId(), other.isSetCpId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCpId()) {
        lastComparison = TBaseHelper.compareTo(this.cpId, other.cpId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetRegisterPassword(), other.isSetRegisterPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegisterPassword()) {
        lastComparison = TBaseHelper.compareTo(this.registerPassword, other.registerPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // CP_ID
            if (field.type == TType.STRING) {
              this.cpId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // REGISTER_PASSWORD
            if (field.type == TType.STRING) {
              this.registerPassword = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.cpId != null) {
        oprot.writeFieldBegin(CP_ID_FIELD_DESC);
        oprot.writeString(this.cpId);
        oprot.writeFieldEnd();
      }
      if (this.registerPassword != null) {
        oprot.writeFieldBegin(REGISTER_PASSWORD_FIELD_DESC);
        oprot.writeString(this.registerPassword);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerChannelCP_args(");
      boolean first = true;

      sb.append("cpId:");
      if (this.cpId == null) {
        sb.append("null");
      } else {
        sb.append(this.cpId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("registerPassword:");
      if (this.registerPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.registerPassword);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerChannelCP_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerChannelCP_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public registerChannelCP_result() {
    }

    public registerChannelCP_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerChannelCP_result(registerChannelCP_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public registerChannelCP_result deepCopy() {
      return new registerChannelCP_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerChannelCP_result)
        return this.equals((registerChannelCP_result)that);
      return false;
    }

    public boolean equals(registerChannelCP_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerChannelCP_result other = (registerChannelCP_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerChannelCP_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class reserveCallCreditPurchase_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("reserveCallCreditPurchase_args");

    private static final TField REQUEST_FIELD_DESC = new TField("request", TType.STRUCT, (short)2);

    private CoinPurchaseReservation request;

    // isset id assignments

    public reserveCallCreditPurchase_args() {
    }

    public reserveCallCreditPurchase_args(
      CoinPurchaseReservation request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reserveCallCreditPurchase_args(reserveCallCreditPurchase_args other) {
      if (other.isSetRequest()) {
        this.request = new CoinPurchaseReservation(other.request);
      }
    }

    public reserveCallCreditPurchase_args deepCopy() {
      return new reserveCallCreditPurchase_args(this);
    }

    public void clear() {
      this.request = null;
    }

    public CoinPurchaseReservation getRequest() {
      return this.request;
    }

    public void setRequest(CoinPurchaseReservation request) {
      this.request = request;
    }

    public void unsetRequest() {
      this.request = null;
    }

    /** Returns true if field request is set (has been assigned a value) and false otherwise */
    public boolean isSetRequest() {
      return this.request != null;
    }

    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reserveCallCreditPurchase_args)
        return this.equals((reserveCallCreditPurchase_args)that);
      return false;
    }

    public boolean equals(reserveCallCreditPurchase_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      reserveCallCreditPurchase_args other = (reserveCallCreditPurchase_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequest(), other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = this.request.compareTo(other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // REQUEST
            if (field.type == TType.STRUCT) {
              this.request = new CoinPurchaseReservation();
              this.request.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.request != null) {
        oprot.writeFieldBegin(REQUEST_FIELD_DESC);
        this.request.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("reserveCallCreditPurchase_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class reserveCallCreditPurchase_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("reserveCallCreditPurchase_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private PaymentReservationResult success;
    private TalkException e;

    // isset id assignments

    public reserveCallCreditPurchase_result() {
    }

    public reserveCallCreditPurchase_result(
      PaymentReservationResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reserveCallCreditPurchase_result(reserveCallCreditPurchase_result other) {
      if (other.isSetSuccess()) {
        this.success = new PaymentReservationResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public reserveCallCreditPurchase_result deepCopy() {
      return new reserveCallCreditPurchase_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public PaymentReservationResult getSuccess() {
      return this.success;
    }

    public void setSuccess(PaymentReservationResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reserveCallCreditPurchase_result)
        return this.equals((reserveCallCreditPurchase_result)that);
      return false;
    }

    public boolean equals(reserveCallCreditPurchase_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      reserveCallCreditPurchase_result other = (reserveCallCreditPurchase_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new PaymentReservationResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("reserveCallCreditPurchase_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class acquirePaidCallCurrencyExchangeRate_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("acquirePaidCallCurrencyExchangeRate_args");

    private static final TField LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, (short)2);

    private String language;

    // isset id assignments

    public acquirePaidCallCurrencyExchangeRate_args() {
    }

    public acquirePaidCallCurrencyExchangeRate_args(
      String language)
    {
      this();
      this.language = language;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public acquirePaidCallCurrencyExchangeRate_args(acquirePaidCallCurrencyExchangeRate_args other) {
      if (other.isSetLanguage()) {
        this.language = other.language;
      }
    }

    public acquirePaidCallCurrencyExchangeRate_args deepCopy() {
      return new acquirePaidCallCurrencyExchangeRate_args(this);
    }

    public void clear() {
      this.language = null;
    }

    public String getLanguage() {
      return this.language;
    }

    public void setLanguage(String language) {
      this.language = language;
    }

    public void unsetLanguage() {
      this.language = null;
    }

    /** Returns true if field language is set (has been assigned a value) and false otherwise */
    public boolean isSetLanguage() {
      return this.language != null;
    }

    public void setLanguageIsSet(boolean value) {
      if (!value) {
        this.language = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof acquirePaidCallCurrencyExchangeRate_args)
        return this.equals((acquirePaidCallCurrencyExchangeRate_args)that);
      return false;
    }

    public boolean equals(acquirePaidCallCurrencyExchangeRate_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_language = true && this.isSetLanguage();
      boolean that_present_language = true && that.isSetLanguage();
      if (this_present_language || that_present_language) {
        if (!(this_present_language && that_present_language))
          return false;
        if (!this.language.equals(that.language))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      acquirePaidCallCurrencyExchangeRate_args other = (acquirePaidCallCurrencyExchangeRate_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetLanguage(), other.isSetLanguage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLanguage()) {
        lastComparison = TBaseHelper.compareTo(this.language, other.language);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // LANGUAGE
            if (field.type == TType.STRING) {
              this.language = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(this.language);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("acquirePaidCallCurrencyExchangeRate_args(");
      boolean first = true;

      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class acquirePaidCallCurrencyExchangeRate_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("acquirePaidCallCurrencyExchangeRate_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public acquirePaidCallCurrencyExchangeRate_result() {
    }

    public acquirePaidCallCurrencyExchangeRate_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public acquirePaidCallCurrencyExchangeRate_result(acquirePaidCallCurrencyExchangeRate_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          PaidCallCurrencyExchangeRate other_element = (PaidCallCurrencyExchangeRate)other_enum.nextElement();
          __this__success.addElement(new PaidCallCurrencyExchangeRate(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public acquirePaidCallCurrencyExchangeRate_result deepCopy() {
      return new acquirePaidCallCurrencyExchangeRate_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(PaidCallCurrencyExchangeRate elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof acquirePaidCallCurrencyExchangeRate_result)
        return this.equals((acquirePaidCallCurrencyExchangeRate_result)that);
      return false;
    }

    public boolean equals(acquirePaidCallCurrencyExchangeRate_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      acquirePaidCallCurrencyExchangeRate_result other = (acquirePaidCallCurrencyExchangeRate_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list1257 = iprot.readListBegin();
                this.success = new Vector(_list1257.size);
                for (int _i1258 = 0; _i1258 < _list1257.size; ++_i1258)
                {
                  PaidCallCurrencyExchangeRate _elem1259;
                  _elem1259 = new PaidCallCurrencyExchangeRate();
                  _elem1259.read(iprot);
                  this.success.addElement(_elem1259);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter1260_enum = this.success.elements(); _iter1260_enum.hasMoreElements(); )           {
            PaidCallCurrencyExchangeRate _iter1260 = (PaidCallCurrencyExchangeRate)_iter1260_enum.nextElement();
            _iter1260.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("acquirePaidCallCurrencyExchangeRate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getRoomMemberMidsForAppPlatform_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getRoomMemberMidsForAppPlatform_args");

    private static final TField ROOM_ID_FIELD_DESC = new TField("roomId", TType.STRING, (short)1);

    private String roomId;

    // isset id assignments

    public getRoomMemberMidsForAppPlatform_args() {
    }

    public getRoomMemberMidsForAppPlatform_args(
      String roomId)
    {
      this();
      this.roomId = roomId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRoomMemberMidsForAppPlatform_args(getRoomMemberMidsForAppPlatform_args other) {
      if (other.isSetRoomId()) {
        this.roomId = other.roomId;
      }
    }

    public getRoomMemberMidsForAppPlatform_args deepCopy() {
      return new getRoomMemberMidsForAppPlatform_args(this);
    }

    public void clear() {
      this.roomId = null;
    }

    public String getRoomId() {
      return this.roomId;
    }

    public void setRoomId(String roomId) {
      this.roomId = roomId;
    }

    public void unsetRoomId() {
      this.roomId = null;
    }

    /** Returns true if field roomId is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomId() {
      return this.roomId != null;
    }

    public void setRoomIdIsSet(boolean value) {
      if (!value) {
        this.roomId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRoomMemberMidsForAppPlatform_args)
        return this.equals((getRoomMemberMidsForAppPlatform_args)that);
      return false;
    }

    public boolean equals(getRoomMemberMidsForAppPlatform_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_roomId = true && this.isSetRoomId();
      boolean that_present_roomId = true && that.isSetRoomId();
      if (this_present_roomId || that_present_roomId) {
        if (!(this_present_roomId && that_present_roomId))
          return false;
        if (!this.roomId.equals(that.roomId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getRoomMemberMidsForAppPlatform_args other = (getRoomMemberMidsForAppPlatform_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRoomId(), other.isSetRoomId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomId()) {
        lastComparison = TBaseHelper.compareTo(this.roomId, other.roomId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ROOM_ID
            if (field.type == TType.STRING) {
              this.roomId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.roomId != null) {
        oprot.writeFieldBegin(ROOM_ID_FIELD_DESC);
        oprot.writeString(this.roomId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getRoomMemberMidsForAppPlatform_args(");
      boolean first = true;

      sb.append("roomId:");
      if (this.roomId == null) {
        sb.append("null");
      } else {
        sb.append(this.roomId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getRoomMemberMidsForAppPlatform_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getRoomMemberMidsForAppPlatform_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getRoomMemberMidsForAppPlatform_result() {
    }

    public getRoomMemberMidsForAppPlatform_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRoomMemberMidsForAppPlatform_result(getRoomMemberMidsForAppPlatform_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getRoomMemberMidsForAppPlatform_result deepCopy() {
      return new getRoomMemberMidsForAppPlatform_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRoomMemberMidsForAppPlatform_result)
        return this.equals((getRoomMemberMidsForAppPlatform_result)that);
      return false;
    }

    public boolean equals(getRoomMemberMidsForAppPlatform_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getRoomMemberMidsForAppPlatform_result other = (getRoomMemberMidsForAppPlatform_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list1261 = iprot.readListBegin();
                this.success = new Vector(_list1261.size);
                for (int _i1262 = 0; _i1262 < _list1261.size; ++_i1262)
                {
                  String _elem1263;
                  _elem1263 = iprot.readString();
                  this.success.addElement(_elem1263);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter1264_enum = this.success.elements(); _iter1264_enum.hasMoreElements(); )           {
            String _iter1264 = (String)_iter1264_enum.nextElement();
            oprot.writeString(_iter1264);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getRoomMemberMidsForAppPlatform_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPaidCallBalanceList_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPaidCallBalanceList_args");

    private static final TField LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, (short)2);

    private String language;

    // isset id assignments

    public getPaidCallBalanceList_args() {
    }

    public getPaidCallBalanceList_args(
      String language)
    {
      this();
      this.language = language;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPaidCallBalanceList_args(getPaidCallBalanceList_args other) {
      if (other.isSetLanguage()) {
        this.language = other.language;
      }
    }

    public getPaidCallBalanceList_args deepCopy() {
      return new getPaidCallBalanceList_args(this);
    }

    public void clear() {
      this.language = null;
    }

    public String getLanguage() {
      return this.language;
    }

    public void setLanguage(String language) {
      this.language = language;
    }

    public void unsetLanguage() {
      this.language = null;
    }

    /** Returns true if field language is set (has been assigned a value) and false otherwise */
    public boolean isSetLanguage() {
      return this.language != null;
    }

    public void setLanguageIsSet(boolean value) {
      if (!value) {
        this.language = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPaidCallBalanceList_args)
        return this.equals((getPaidCallBalanceList_args)that);
      return false;
    }

    public boolean equals(getPaidCallBalanceList_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_language = true && this.isSetLanguage();
      boolean that_present_language = true && that.isSetLanguage();
      if (this_present_language || that_present_language) {
        if (!(this_present_language && that_present_language))
          return false;
        if (!this.language.equals(that.language))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPaidCallBalanceList_args other = (getPaidCallBalanceList_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetLanguage(), other.isSetLanguage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLanguage()) {
        lastComparison = TBaseHelper.compareTo(this.language, other.language);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // LANGUAGE
            if (field.type == TType.STRING) {
              this.language = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(this.language);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPaidCallBalanceList_args(");
      boolean first = true;

      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPaidCallBalanceList_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPaidCallBalanceList_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getPaidCallBalanceList_result() {
    }

    public getPaidCallBalanceList_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPaidCallBalanceList_result(getPaidCallBalanceList_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          PaidCallBalance other_element = (PaidCallBalance)other_enum.nextElement();
          __this__success.addElement(new PaidCallBalance(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getPaidCallBalanceList_result deepCopy() {
      return new getPaidCallBalanceList_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(PaidCallBalance elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPaidCallBalanceList_result)
        return this.equals((getPaidCallBalanceList_result)that);
      return false;
    }

    public boolean equals(getPaidCallBalanceList_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPaidCallBalanceList_result other = (getPaidCallBalanceList_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list1265 = iprot.readListBegin();
                this.success = new Vector(_list1265.size);
                for (int _i1266 = 0; _i1266 < _list1265.size; ++_i1266)
                {
                  PaidCallBalance _elem1267;
                  _elem1267 = new PaidCallBalance();
                  _elem1267.read(iprot);
                  this.success.addElement(_elem1267);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter1268_enum = this.success.elements(); _iter1268_enum.hasMoreElements(); )           {
            PaidCallBalance _iter1268 = (PaidCallBalance)_iter1268_enum.nextElement();
            _iter1268.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPaidCallBalanceList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPersonalInfos_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPersonalInfos_args");

    private static final TField REQUIRED_PERSONAL_INFOS_FIELD_DESC = new TField("requiredPersonalInfos", TType.SET, (short)1);

    private Hashtable requiredPersonalInfos;

    // isset id assignments

    public getPersonalInfos_args() {
    }

    public getPersonalInfos_args(
      Hashtable requiredPersonalInfos)
    {
      this();
      this.requiredPersonalInfos = requiredPersonalInfos;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPersonalInfos_args(getPersonalInfos_args other) {
      if (other.isSetRequiredPersonalInfos()) {
        Hashtable __this__requiredPersonalInfos = new Hashtable();
        for (Enumeration other_enum = other.requiredPersonalInfos.elements(); other_enum.hasMoreElements(); ) {
          PersonalInfo other_element = (PersonalInfo)other_enum.nextElement();
          __this__requiredPersonalInfos.addElement(other_element);
        }
        this.requiredPersonalInfos = __this__requiredPersonalInfos;
      }
    }

    public getPersonalInfos_args deepCopy() {
      return new getPersonalInfos_args(this);
    }

    public void clear() {
      this.requiredPersonalInfos = null;
    }

    public int getRequiredPersonalInfosSize() {
      return (this.requiredPersonalInfos == null) ? 0 : this.requiredPersonalInfos.size();
    }

    public Enumeration getRequiredPersonalInfosEnumeration() {
      return (this.requiredPersonalInfos == null) ? null : this.requiredPersonalInfos.elements();
    }

    public void addToRequiredPersonalInfos(PersonalInfo elem) {
      if (this.requiredPersonalInfos == null) {
        this.requiredPersonalInfos = new Hashtable();
      }
      this.requiredPersonalInfos.put(elem, elem);
    }

    public Hashtable getRequiredPersonalInfos() {
      return this.requiredPersonalInfos;
    }

    public void setRequiredPersonalInfos(Hashtable requiredPersonalInfos) {
      this.requiredPersonalInfos = requiredPersonalInfos;
    }

    public void unsetRequiredPersonalInfos() {
      this.requiredPersonalInfos = null;
    }

    /** Returns true if field requiredPersonalInfos is set (has been assigned a value) and false otherwise */
    public boolean isSetRequiredPersonalInfos() {
      return this.requiredPersonalInfos != null;
    }

    public void setRequiredPersonalInfosIsSet(boolean value) {
      if (!value) {
        this.requiredPersonalInfos = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPersonalInfos_args)
        return this.equals((getPersonalInfos_args)that);
      return false;
    }

    public boolean equals(getPersonalInfos_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requiredPersonalInfos = true && this.isSetRequiredPersonalInfos();
      boolean that_present_requiredPersonalInfos = true && that.isSetRequiredPersonalInfos();
      if (this_present_requiredPersonalInfos || that_present_requiredPersonalInfos) {
        if (!(this_present_requiredPersonalInfos && that_present_requiredPersonalInfos))
          return false;
        if (!this.requiredPersonalInfos.equals(that.requiredPersonalInfos))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPersonalInfos_args other = (getPersonalInfos_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequiredPersonalInfos(), other.isSetRequiredPersonalInfos());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequiredPersonalInfos()) {
        lastComparison = TBaseHelper.compareTo(this.requiredPersonalInfos, other.requiredPersonalInfos);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUIRED_PERSONAL_INFOS
            if (field.type == TType.SET) {
              {
                TSet _set1269 = iprot.readSetBegin();
                this.requiredPersonalInfos = new Hashtable(2*_set1269.size);
                for (int _i1270 = 0; _i1270 < _set1269.size; ++_i1270)
                {
                  PersonalInfo _elem1271;
                  _elem1271 = PersonalInfo.findByValue(iprot.readI32());
                  this.requiredPersonalInfos.put(_elem1271, _elem1271);
                }
                iprot.readSetEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requiredPersonalInfos != null) {
        oprot.writeFieldBegin(REQUIRED_PERSONAL_INFOS_FIELD_DESC);
        {
          oprot.writeSetBegin(new TSet(TType.I32, this.requiredPersonalInfos.size()));
          for (Enumeration _iter1272_enum = this.requiredPersonalInfos.keys(); _iter1272_enum.hasMoreElements(); )           {
            PersonalInfo _iter1272 = (PersonalInfo)_iter1272_enum.nextElement();
            oprot.writeI32(_iter1272.getValue());
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPersonalInfos_args(");
      boolean first = true;

      sb.append("requiredPersonalInfos:");
      if (this.requiredPersonalInfos == null) {
        sb.append("null");
      } else {
        sb.append(this.requiredPersonalInfos);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPersonalInfos_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPersonalInfos_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.MAP, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Hashtable success;
    private TalkException e;

    // isset id assignments

    public getPersonalInfos_result() {
    }

    public getPersonalInfos_result(
      Hashtable success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPersonalInfos_result(getPersonalInfos_result other) {
      if (other.isSetSuccess()) {
        Hashtable __this__success = new Hashtable();
        for (Enumeration other_enum = other.success.keys(); other_enum.hasMoreElements(); ) {

          PersonalInfo other_element_key = (PersonalInfo)other_enum.nextElement();
          String other_element_value = (String)other.success.get(other_element_key);

          PersonalInfo __this__success_copy_key = other_element_key;

          String __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getPersonalInfos_result deepCopy() {
      return new getPersonalInfos_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(PersonalInfo key, String val) {
      if (this.success == null) {
        this.success = new Hashtable();
      }
      this.success.put(key, val);
    }

    public Hashtable getSuccess() {
      return this.success;
    }

    public void setSuccess(Hashtable success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPersonalInfos_result)
        return this.equals((getPersonalInfos_result)that);
      return false;
    }

    public boolean equals(getPersonalInfos_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPersonalInfos_result other = (getPersonalInfos_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.MAP) {
              {
                TMap _map1273 = iprot.readMapBegin();
                this.success = new Hashtable(2*_map1273.size);
                for (int _i1274 = 0; _i1274 < _map1273.size; ++_i1274)
                {
                  PersonalInfo _key1275;
                  String _val1276;
                  _key1275 = PersonalInfo.findByValue(iprot.readI32());
                  _val1276 = iprot.readString();
                  this.success.put(_key1275, _val1276);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.I32, TType.STRING, this.success.size()));
          for (Enumeration _iter1277_enum = this.success.keys(); _iter1277_enum.hasMoreElements(); )           {
            PersonalInfo _iter1277 = (PersonalInfo)_iter1277_enum.nextElement();
            oprot.writeI32(_iter1277.getValue());
            oprot.writeString(((String)this.success.get(_iter1277)));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPersonalInfos_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPrimaryClientsForChannel_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPrimaryClientsForChannel_args");

    private static final TField USER_MIDS_FIELD_DESC = new TField("userMids", TType.LIST, (short)1);

    private Vector userMids;

    // isset id assignments

    public getPrimaryClientsForChannel_args() {
    }

    public getPrimaryClientsForChannel_args(
      Vector userMids)
    {
      this();
      this.userMids = userMids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPrimaryClientsForChannel_args(getPrimaryClientsForChannel_args other) {
      if (other.isSetUserMids()) {
        Vector __this__userMids = new Vector();
        for (Enumeration other_enum = other.userMids.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__userMids.addElement(other_element);
        }
        this.userMids = __this__userMids;
      }
    }

    public getPrimaryClientsForChannel_args deepCopy() {
      return new getPrimaryClientsForChannel_args(this);
    }

    public void clear() {
      this.userMids = null;
    }

    public int getUserMidsSize() {
      return (this.userMids == null) ? 0 : this.userMids.size();
    }

    public Enumeration getUserMidsEnumeration() {
      return (this.userMids == null) ? null : this.userMids.elements();
    }

    public void addToUserMids(String elem) {
      if (this.userMids == null) {
        this.userMids = new Vector();
      }
      this.userMids.addElement(elem);
    }

    public Vector getUserMids() {
      return this.userMids;
    }

    public void setUserMids(Vector userMids) {
      this.userMids = userMids;
    }

    public void unsetUserMids() {
      this.userMids = null;
    }

    /** Returns true if field userMids is set (has been assigned a value) and false otherwise */
    public boolean isSetUserMids() {
      return this.userMids != null;
    }

    public void setUserMidsIsSet(boolean value) {
      if (!value) {
        this.userMids = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPrimaryClientsForChannel_args)
        return this.equals((getPrimaryClientsForChannel_args)that);
      return false;
    }

    public boolean equals(getPrimaryClientsForChannel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userMids = true && this.isSetUserMids();
      boolean that_present_userMids = true && that.isSetUserMids();
      if (this_present_userMids || that_present_userMids) {
        if (!(this_present_userMids && that_present_userMids))
          return false;
        if (!this.userMids.equals(that.userMids))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPrimaryClientsForChannel_args other = (getPrimaryClientsForChannel_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetUserMids(), other.isSetUserMids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserMids()) {
        lastComparison = TBaseHelper.compareTo(this.userMids, other.userMids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // USER_MIDS
            if (field.type == TType.LIST) {
              {
                TList _list1278 = iprot.readListBegin();
                this.userMids = new Vector(_list1278.size);
                for (int _i1279 = 0; _i1279 < _list1278.size; ++_i1279)
                {
                  String _elem1280;
                  _elem1280 = iprot.readString();
                  this.userMids.addElement(_elem1280);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.userMids != null) {
        oprot.writeFieldBegin(USER_MIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.userMids.size()));
          for (Enumeration _iter1281_enum = this.userMids.elements(); _iter1281_enum.hasMoreElements(); )           {
            String _iter1281 = (String)_iter1281_enum.nextElement();
            oprot.writeString(_iter1281);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPrimaryClientsForChannel_args(");
      boolean first = true;

      sb.append("userMids:");
      if (this.userMids == null) {
        sb.append("null");
      } else {
        sb.append(this.userMids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPrimaryClientsForChannel_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPrimaryClientsForChannel_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getPrimaryClientsForChannel_result() {
    }

    public getPrimaryClientsForChannel_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPrimaryClientsForChannel_result(getPrimaryClientsForChannel_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          SimpleChannelClient other_element = (SimpleChannelClient)other_enum.nextElement();
          __this__success.addElement(new SimpleChannelClient(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getPrimaryClientsForChannel_result deepCopy() {
      return new getPrimaryClientsForChannel_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(SimpleChannelClient elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPrimaryClientsForChannel_result)
        return this.equals((getPrimaryClientsForChannel_result)that);
      return false;
    }

    public boolean equals(getPrimaryClientsForChannel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPrimaryClientsForChannel_result other = (getPrimaryClientsForChannel_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list1282 = iprot.readListBegin();
                this.success = new Vector(_list1282.size);
                for (int _i1283 = 0; _i1283 < _list1282.size; ++_i1283)
                {
                  SimpleChannelClient _elem1284;
                  _elem1284 = new SimpleChannelClient();
                  _elem1284.read(iprot);
                  this.success.addElement(_elem1284);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter1285_enum = this.success.elements(); _iter1285_enum.hasMoreElements(); )           {
            SimpleChannelClient _iter1285 = (SimpleChannelClient)_iter1285_enum.nextElement();
            _iter1285.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPrimaryClientsForChannel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class addBuddyToContact_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("addBuddyToContact_args");

    private static final TField BUDDY_MID_FIELD_DESC = new TField("buddyMid", TType.STRING, (short)1);

    private String buddyMid;

    // isset id assignments

    public addBuddyToContact_args() {
    }

    public addBuddyToContact_args(
      String buddyMid)
    {
      this();
      this.buddyMid = buddyMid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBuddyToContact_args(addBuddyToContact_args other) {
      if (other.isSetBuddyMid()) {
        this.buddyMid = other.buddyMid;
      }
    }

    public addBuddyToContact_args deepCopy() {
      return new addBuddyToContact_args(this);
    }

    public void clear() {
      this.buddyMid = null;
    }

    public String getBuddyMid() {
      return this.buddyMid;
    }

    public void setBuddyMid(String buddyMid) {
      this.buddyMid = buddyMid;
    }

    public void unsetBuddyMid() {
      this.buddyMid = null;
    }

    /** Returns true if field buddyMid is set (has been assigned a value) and false otherwise */
    public boolean isSetBuddyMid() {
      return this.buddyMid != null;
    }

    public void setBuddyMidIsSet(boolean value) {
      if (!value) {
        this.buddyMid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addBuddyToContact_args)
        return this.equals((addBuddyToContact_args)that);
      return false;
    }

    public boolean equals(addBuddyToContact_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_buddyMid = true && this.isSetBuddyMid();
      boolean that_present_buddyMid = true && that.isSetBuddyMid();
      if (this_present_buddyMid || that_present_buddyMid) {
        if (!(this_present_buddyMid && that_present_buddyMid))
          return false;
        if (!this.buddyMid.equals(that.buddyMid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      addBuddyToContact_args other = (addBuddyToContact_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetBuddyMid(), other.isSetBuddyMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBuddyMid()) {
        lastComparison = TBaseHelper.compareTo(this.buddyMid, other.buddyMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // BUDDY_MID
            if (field.type == TType.STRING) {
              this.buddyMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.buddyMid != null) {
        oprot.writeFieldBegin(BUDDY_MID_FIELD_DESC);
        oprot.writeString(this.buddyMid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("addBuddyToContact_args(");
      boolean first = true;

      sb.append("buddyMid:");
      if (this.buddyMid == null) {
        sb.append("null");
      } else {
        sb.append(this.buddyMid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class addBuddyToContact_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("addBuddyToContact_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private ContactTransition success;
    private TalkException e;

    // isset id assignments

    public addBuddyToContact_result() {
    }

    public addBuddyToContact_result(
      ContactTransition success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBuddyToContact_result(addBuddyToContact_result other) {
      if (other.isSetSuccess()) {
        this.success = new ContactTransition(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public addBuddyToContact_result deepCopy() {
      return new addBuddyToContact_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ContactTransition getSuccess() {
      return this.success;
    }

    public void setSuccess(ContactTransition success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addBuddyToContact_result)
        return this.equals((addBuddyToContact_result)that);
      return false;
    }

    public boolean equals(addBuddyToContact_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      addBuddyToContact_result other = (addBuddyToContact_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new ContactTransition();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("addBuddyToContact_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getGroupMemberMidsForAppPlatform_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getGroupMemberMidsForAppPlatform_args");

    private static final TField GROUP_ID_FIELD_DESC = new TField("groupId", TType.STRING, (short)1);

    private String groupId;

    // isset id assignments

    public getGroupMemberMidsForAppPlatform_args() {
    }

    public getGroupMemberMidsForAppPlatform_args(
      String groupId)
    {
      this();
      this.groupId = groupId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroupMemberMidsForAppPlatform_args(getGroupMemberMidsForAppPlatform_args other) {
      if (other.isSetGroupId()) {
        this.groupId = other.groupId;
      }
    }

    public getGroupMemberMidsForAppPlatform_args deepCopy() {
      return new getGroupMemberMidsForAppPlatform_args(this);
    }

    public void clear() {
      this.groupId = null;
    }

    public String getGroupId() {
      return this.groupId;
    }

    public void setGroupId(String groupId) {
      this.groupId = groupId;
    }

    public void unsetGroupId() {
      this.groupId = null;
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return this.groupId != null;
    }

    public void setGroupIdIsSet(boolean value) {
      if (!value) {
        this.groupId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroupMemberMidsForAppPlatform_args)
        return this.equals((getGroupMemberMidsForAppPlatform_args)that);
      return false;
    }

    public boolean equals(getGroupMemberMidsForAppPlatform_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_groupId = true && this.isSetGroupId();
      boolean that_present_groupId = true && that.isSetGroupId();
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (!this.groupId.equals(that.groupId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getGroupMemberMidsForAppPlatform_args other = (getGroupMemberMidsForAppPlatform_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetGroupId(), other.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = TBaseHelper.compareTo(this.groupId, other.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // GROUP_ID
            if (field.type == TType.STRING) {
              this.groupId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.groupId != null) {
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeString(this.groupId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getGroupMemberMidsForAppPlatform_args(");
      boolean first = true;

      sb.append("groupId:");
      if (this.groupId == null) {
        sb.append("null");
      } else {
        sb.append(this.groupId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getGroupMemberMidsForAppPlatform_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getGroupMemberMidsForAppPlatform_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getGroupMemberMidsForAppPlatform_result() {
    }

    public getGroupMemberMidsForAppPlatform_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroupMemberMidsForAppPlatform_result(getGroupMemberMidsForAppPlatform_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getGroupMemberMidsForAppPlatform_result deepCopy() {
      return new getGroupMemberMidsForAppPlatform_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroupMemberMidsForAppPlatform_result)
        return this.equals((getGroupMemberMidsForAppPlatform_result)that);
      return false;
    }

    public boolean equals(getGroupMemberMidsForAppPlatform_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getGroupMemberMidsForAppPlatform_result other = (getGroupMemberMidsForAppPlatform_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list1286 = iprot.readListBegin();
                this.success = new Vector(_list1286.size);
                for (int _i1287 = 0; _i1287 < _list1286.size; ++_i1287)
                {
                  String _elem1288;
                  _elem1288 = iprot.readString();
                  this.success.addElement(_elem1288);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter1289_enum = this.success.elements(); _iter1289_enum.hasMoreElements(); )           {
            String _iter1289 = (String)_iter1289_enum.nextElement();
            oprot.writeString(_iter1289);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getGroupMemberMidsForAppPlatform_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUserLanguage_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUserLanguage_args");


    public getUserLanguage_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserLanguage_args(getUserLanguage_args other) {
    }

    public getUserLanguage_args deepCopy() {
      return new getUserLanguage_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserLanguage_args)
        return this.equals((getUserLanguage_args)that);
      return false;
    }

    public boolean equals(getUserLanguage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUserLanguage_args other = (getUserLanguage_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUserLanguage_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUserLanguage_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUserLanguage_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public getUserLanguage_result() {
    }

    public getUserLanguage_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserLanguage_result(getUserLanguage_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getUserLanguage_result deepCopy() {
      return new getUserLanguage_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserLanguage_result)
        return this.equals((getUserLanguage_result)that);
      return false;
    }

    public boolean equals(getUserLanguage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUserLanguage_result other = (getUserLanguage_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUserLanguage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lookupPaidCall_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("lookupPaidCall_args");

    private static final TField DIALED_NUMBER_FIELD_DESC = new TField("dialedNumber", TType.STRING, (short)2);
    private static final TField LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, (short)3);
    private static final TField REFERER_FIELD_DESC = new TField("referer", TType.STRING, (short)4);

    private String dialedNumber;
    private String language;
    private String referer;

    // isset id assignments

    public lookupPaidCall_args() {
    }

    public lookupPaidCall_args(
      String dialedNumber,
      String language,
      String referer)
    {
      this();
      this.dialedNumber = dialedNumber;
      this.language = language;
      this.referer = referer;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lookupPaidCall_args(lookupPaidCall_args other) {
      if (other.isSetDialedNumber()) {
        this.dialedNumber = other.dialedNumber;
      }
      if (other.isSetLanguage()) {
        this.language = other.language;
      }
      if (other.isSetReferer()) {
        this.referer = other.referer;
      }
    }

    public lookupPaidCall_args deepCopy() {
      return new lookupPaidCall_args(this);
    }

    public void clear() {
      this.dialedNumber = null;
      this.language = null;
      this.referer = null;
    }

    public String getDialedNumber() {
      return this.dialedNumber;
    }

    public void setDialedNumber(String dialedNumber) {
      this.dialedNumber = dialedNumber;
    }

    public void unsetDialedNumber() {
      this.dialedNumber = null;
    }

    /** Returns true if field dialedNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetDialedNumber() {
      return this.dialedNumber != null;
    }

    public void setDialedNumberIsSet(boolean value) {
      if (!value) {
        this.dialedNumber = null;
      }
    }

    public String getLanguage() {
      return this.language;
    }

    public void setLanguage(String language) {
      this.language = language;
    }

    public void unsetLanguage() {
      this.language = null;
    }

    /** Returns true if field language is set (has been assigned a value) and false otherwise */
    public boolean isSetLanguage() {
      return this.language != null;
    }

    public void setLanguageIsSet(boolean value) {
      if (!value) {
        this.language = null;
      }
    }

    public String getReferer() {
      return this.referer;
    }

    public void setReferer(String referer) {
      this.referer = referer;
    }

    public void unsetReferer() {
      this.referer = null;
    }

    /** Returns true if field referer is set (has been assigned a value) and false otherwise */
    public boolean isSetReferer() {
      return this.referer != null;
    }

    public void setRefererIsSet(boolean value) {
      if (!value) {
        this.referer = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lookupPaidCall_args)
        return this.equals((lookupPaidCall_args)that);
      return false;
    }

    public boolean equals(lookupPaidCall_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_dialedNumber = true && this.isSetDialedNumber();
      boolean that_present_dialedNumber = true && that.isSetDialedNumber();
      if (this_present_dialedNumber || that_present_dialedNumber) {
        if (!(this_present_dialedNumber && that_present_dialedNumber))
          return false;
        if (!this.dialedNumber.equals(that.dialedNumber))
          return false;
      }

      boolean this_present_language = true && this.isSetLanguage();
      boolean that_present_language = true && that.isSetLanguage();
      if (this_present_language || that_present_language) {
        if (!(this_present_language && that_present_language))
          return false;
        if (!this.language.equals(that.language))
          return false;
      }

      boolean this_present_referer = true && this.isSetReferer();
      boolean that_present_referer = true && that.isSetReferer();
      if (this_present_referer || that_present_referer) {
        if (!(this_present_referer && that_present_referer))
          return false;
        if (!this.referer.equals(that.referer))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      lookupPaidCall_args other = (lookupPaidCall_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetDialedNumber(), other.isSetDialedNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDialedNumber()) {
        lastComparison = TBaseHelper.compareTo(this.dialedNumber, other.dialedNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLanguage(), other.isSetLanguage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLanguage()) {
        lastComparison = TBaseHelper.compareTo(this.language, other.language);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetReferer(), other.isSetReferer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReferer()) {
        lastComparison = TBaseHelper.compareTo(this.referer, other.referer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // DIALED_NUMBER
            if (field.type == TType.STRING) {
              this.dialedNumber = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // LANGUAGE
            if (field.type == TType.STRING) {
              this.language = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // REFERER
            if (field.type == TType.STRING) {
              this.referer = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.dialedNumber != null) {
        oprot.writeFieldBegin(DIALED_NUMBER_FIELD_DESC);
        oprot.writeString(this.dialedNumber);
        oprot.writeFieldEnd();
      }
      if (this.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(this.language);
        oprot.writeFieldEnd();
      }
      if (this.referer != null) {
        oprot.writeFieldBegin(REFERER_FIELD_DESC);
        oprot.writeString(this.referer);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("lookupPaidCall_args(");
      boolean first = true;

      sb.append("dialedNumber:");
      if (this.dialedNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.dialedNumber);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("referer:");
      if (this.referer == null) {
        sb.append("null");
      } else {
        sb.append(this.referer);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lookupPaidCall_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("lookupPaidCall_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private PaidCallResponse success;
    private TalkException e;

    // isset id assignments

    public lookupPaidCall_result() {
    }

    public lookupPaidCall_result(
      PaidCallResponse success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lookupPaidCall_result(lookupPaidCall_result other) {
      if (other.isSetSuccess()) {
        this.success = new PaidCallResponse(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public lookupPaidCall_result deepCopy() {
      return new lookupPaidCall_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public PaidCallResponse getSuccess() {
      return this.success;
    }

    public void setSuccess(PaidCallResponse success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lookupPaidCall_result)
        return this.equals((lookupPaidCall_result)that);
      return false;
    }

    public boolean equals(lookupPaidCall_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      lookupPaidCall_result other = (lookupPaidCall_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new PaidCallResponse();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("lookupPaidCall_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getExtendedProfile_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getExtendedProfile_args");


    public getExtendedProfile_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExtendedProfile_args(getExtendedProfile_args other) {
    }

    public getExtendedProfile_args deepCopy() {
      return new getExtendedProfile_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExtendedProfile_args)
        return this.equals((getExtendedProfile_args)that);
      return false;
    }

    public boolean equals(getExtendedProfile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getExtendedProfile_args other = (getExtendedProfile_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getExtendedProfile_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getExtendedProfile_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getExtendedProfile_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private ExtendedProfile success;
    private TalkException e;

    // isset id assignments

    public getExtendedProfile_result() {
    }

    public getExtendedProfile_result(
      ExtendedProfile success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getExtendedProfile_result(getExtendedProfile_result other) {
      if (other.isSetSuccess()) {
        this.success = new ExtendedProfile(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getExtendedProfile_result deepCopy() {
      return new getExtendedProfile_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ExtendedProfile getSuccess() {
      return this.success;
    }

    public void setSuccess(ExtendedProfile success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getExtendedProfile_result)
        return this.equals((getExtendedProfile_result)that);
      return false;
    }

    public boolean equals(getExtendedProfile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getExtendedProfile_result other = (getExtendedProfile_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new ExtendedProfile();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getExtendedProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getReverseCompactContacts_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getReverseCompactContacts_args");

    private static final TField IDS_FIELD_DESC = new TField("ids", TType.LIST, (short)1);

    private Vector ids;

    // isset id assignments

    public getReverseCompactContacts_args() {
    }

    public getReverseCompactContacts_args(
      Vector ids)
    {
      this();
      this.ids = ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReverseCompactContacts_args(getReverseCompactContacts_args other) {
      if (other.isSetIds()) {
        Vector __this__ids = new Vector();
        for (Enumeration other_enum = other.ids.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__ids.addElement(other_element);
        }
        this.ids = __this__ids;
      }
    }

    public getReverseCompactContacts_args deepCopy() {
      return new getReverseCompactContacts_args(this);
    }

    public void clear() {
      this.ids = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public Enumeration getIdsEnumeration() {
      return (this.ids == null) ? null : this.ids.elements();
    }

    public void addToIds(String elem) {
      if (this.ids == null) {
        this.ids = new Vector();
      }
      this.ids.addElement(elem);
    }

    public Vector getIds() {
      return this.ids;
    }

    public void setIds(Vector ids) {
      this.ids = ids;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getReverseCompactContacts_args)
        return this.equals((getReverseCompactContacts_args)that);
      return false;
    }

    public boolean equals(getReverseCompactContacts_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getReverseCompactContacts_args other = (getReverseCompactContacts_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetIds(), other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // IDS
            if (field.type == TType.LIST) {
              {
                TList _list1290 = iprot.readListBegin();
                this.ids = new Vector(_list1290.size);
                for (int _i1291 = 0; _i1291 < _list1290.size; ++_i1291)
                {
                  String _elem1292;
                  _elem1292 = iprot.readString();
                  this.ids.addElement(_elem1292);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.ids != null) {
        oprot.writeFieldBegin(IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.ids.size()));
          for (Enumeration _iter1293_enum = this.ids.elements(); _iter1293_enum.hasMoreElements(); )           {
            String _iter1293 = (String)_iter1293_enum.nextElement();
            oprot.writeString(_iter1293);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getReverseCompactContacts_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getReverseCompactContacts_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getReverseCompactContacts_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.MAP, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Hashtable success;
    private TalkException e;

    // isset id assignments

    public getReverseCompactContacts_result() {
    }

    public getReverseCompactContacts_result(
      Hashtable success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getReverseCompactContacts_result(getReverseCompactContacts_result other) {
      if (other.isSetSuccess()) {
        Hashtable __this__success = new Hashtable();
        for (Enumeration other_enum = other.success.keys(); other_enum.hasMoreElements(); ) {

          String other_element_key = (String)other_enum.nextElement();
          CompactContact other_element_value = (CompactContact)other.success.get(other_element_key);

          String __this__success_copy_key = other_element_key;

          CompactContact __this__success_copy_value = new CompactContact(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getReverseCompactContacts_result deepCopy() {
      return new getReverseCompactContacts_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, CompactContact val) {
      if (this.success == null) {
        this.success = new Hashtable();
      }
      this.success.put(key, val);
    }

    public Hashtable getSuccess() {
      return this.success;
    }

    public void setSuccess(Hashtable success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getReverseCompactContacts_result)
        return this.equals((getReverseCompactContacts_result)that);
      return false;
    }

    public boolean equals(getReverseCompactContacts_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getReverseCompactContacts_result other = (getReverseCompactContacts_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.MAP) {
              {
                TMap _map1294 = iprot.readMapBegin();
                this.success = new Hashtable(2*_map1294.size);
                for (int _i1295 = 0; _i1295 < _map1294.size; ++_i1295)
                {
                  String _key1296;
                  CompactContact _val1297;
                  _key1296 = iprot.readString();
                  _val1297 = new CompactContact();
                  _val1297.read(iprot);
                  this.success.put(_key1296, _val1297);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.success.size()));
          for (Enumeration _iter1298_enum = this.success.keys(); _iter1298_enum.hasMoreElements(); )           {
            String _iter1298 = (String)_iter1298_enum.nextElement();
            oprot.writeString(_iter1298);
            ((CompactContact)this.success.get(_iter1298)).write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getReverseCompactContacts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPaidCallAdStatus_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPaidCallAdStatus_args");


    public getPaidCallAdStatus_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPaidCallAdStatus_args(getPaidCallAdStatus_args other) {
    }

    public getPaidCallAdStatus_args deepCopy() {
      return new getPaidCallAdStatus_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPaidCallAdStatus_args)
        return this.equals((getPaidCallAdStatus_args)that);
      return false;
    }

    public boolean equals(getPaidCallAdStatus_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPaidCallAdStatus_args other = (getPaidCallAdStatus_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPaidCallAdStatus_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPaidCallAdStatus_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPaidCallAdStatus_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private PaidCallAdResult success;
    private TalkException e;

    // isset id assignments

    public getPaidCallAdStatus_result() {
    }

    public getPaidCallAdStatus_result(
      PaidCallAdResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPaidCallAdStatus_result(getPaidCallAdStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new PaidCallAdResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getPaidCallAdStatus_result deepCopy() {
      return new getPaidCallAdStatus_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public PaidCallAdResult getSuccess() {
      return this.success;
    }

    public void setSuccess(PaidCallAdResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPaidCallAdStatus_result)
        return this.equals((getPaidCallAdStatus_result)that);
      return false;
    }

    public boolean equals(getPaidCallAdStatus_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPaidCallAdStatus_result other = (getPaidCallAdStatus_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new PaidCallAdResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPaidCallAdStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findContactByUseridWithoutAbuseBlockForChannel_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findContactByUseridWithoutAbuseBlockForChannel_args");

    private static final TField USERID_FIELD_DESC = new TField("userid", TType.STRING, (short)2);

    private String userid;

    // isset id assignments

    public findContactByUseridWithoutAbuseBlockForChannel_args() {
    }

    public findContactByUseridWithoutAbuseBlockForChannel_args(
      String userid)
    {
      this();
      this.userid = userid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findContactByUseridWithoutAbuseBlockForChannel_args(findContactByUseridWithoutAbuseBlockForChannel_args other) {
      if (other.isSetUserid()) {
        this.userid = other.userid;
      }
    }

    public findContactByUseridWithoutAbuseBlockForChannel_args deepCopy() {
      return new findContactByUseridWithoutAbuseBlockForChannel_args(this);
    }

    public void clear() {
      this.userid = null;
    }

    public String getUserid() {
      return this.userid;
    }

    public void setUserid(String userid) {
      this.userid = userid;
    }

    public void unsetUserid() {
      this.userid = null;
    }

    /** Returns true if field userid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserid() {
      return this.userid != null;
    }

    public void setUseridIsSet(boolean value) {
      if (!value) {
        this.userid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findContactByUseridWithoutAbuseBlockForChannel_args)
        return this.equals((findContactByUseridWithoutAbuseBlockForChannel_args)that);
      return false;
    }

    public boolean equals(findContactByUseridWithoutAbuseBlockForChannel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userid = true && this.isSetUserid();
      boolean that_present_userid = true && that.isSetUserid();
      if (this_present_userid || that_present_userid) {
        if (!(this_present_userid && that_present_userid))
          return false;
        if (!this.userid.equals(that.userid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findContactByUseridWithoutAbuseBlockForChannel_args other = (findContactByUseridWithoutAbuseBlockForChannel_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetUserid(), other.isSetUserid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserid()) {
        lastComparison = TBaseHelper.compareTo(this.userid, other.userid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // USERID
            if (field.type == TType.STRING) {
              this.userid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.userid != null) {
        oprot.writeFieldBegin(USERID_FIELD_DESC);
        oprot.writeString(this.userid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findContactByUseridWithoutAbuseBlockForChannel_args(");
      boolean first = true;

      sb.append("userid:");
      if (this.userid == null) {
        sb.append("null");
      } else {
        sb.append(this.userid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findContactByUseridWithoutAbuseBlockForChannel_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findContactByUseridWithoutAbuseBlockForChannel_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Contact success;
    private TalkException e;

    // isset id assignments

    public findContactByUseridWithoutAbuseBlockForChannel_result() {
    }

    public findContactByUseridWithoutAbuseBlockForChannel_result(
      Contact success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findContactByUseridWithoutAbuseBlockForChannel_result(findContactByUseridWithoutAbuseBlockForChannel_result other) {
      if (other.isSetSuccess()) {
        this.success = new Contact(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public findContactByUseridWithoutAbuseBlockForChannel_result deepCopy() {
      return new findContactByUseridWithoutAbuseBlockForChannel_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Contact getSuccess() {
      return this.success;
    }

    public void setSuccess(Contact success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findContactByUseridWithoutAbuseBlockForChannel_result)
        return this.equals((findContactByUseridWithoutAbuseBlockForChannel_result)that);
      return false;
    }

    public boolean equals(findContactByUseridWithoutAbuseBlockForChannel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findContactByUseridWithoutAbuseBlockForChannel_result other = (findContactByUseridWithoutAbuseBlockForChannel_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Contact();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findContactByUseridWithoutAbuseBlockForChannel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getGroupMemberMids_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getGroupMemberMids_args");

    private static final TField GROUP_ID_FIELD_DESC = new TField("groupId", TType.STRING, (short)1);

    private String groupId;

    // isset id assignments

    public getGroupMemberMids_args() {
    }

    public getGroupMemberMids_args(
      String groupId)
    {
      this();
      this.groupId = groupId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroupMemberMids_args(getGroupMemberMids_args other) {
      if (other.isSetGroupId()) {
        this.groupId = other.groupId;
      }
    }

    public getGroupMemberMids_args deepCopy() {
      return new getGroupMemberMids_args(this);
    }

    public void clear() {
      this.groupId = null;
    }

    public String getGroupId() {
      return this.groupId;
    }

    public void setGroupId(String groupId) {
      this.groupId = groupId;
    }

    public void unsetGroupId() {
      this.groupId = null;
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return this.groupId != null;
    }

    public void setGroupIdIsSet(boolean value) {
      if (!value) {
        this.groupId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroupMemberMids_args)
        return this.equals((getGroupMemberMids_args)that);
      return false;
    }

    public boolean equals(getGroupMemberMids_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_groupId = true && this.isSetGroupId();
      boolean that_present_groupId = true && that.isSetGroupId();
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (!this.groupId.equals(that.groupId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getGroupMemberMids_args other = (getGroupMemberMids_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetGroupId(), other.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = TBaseHelper.compareTo(this.groupId, other.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // GROUP_ID
            if (field.type == TType.STRING) {
              this.groupId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.groupId != null) {
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeString(this.groupId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getGroupMemberMids_args(");
      boolean first = true;

      sb.append("groupId:");
      if (this.groupId == null) {
        sb.append("null");
      } else {
        sb.append(this.groupId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getGroupMemberMids_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getGroupMemberMids_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getGroupMemberMids_result() {
    }

    public getGroupMemberMids_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroupMemberMids_result(getGroupMemberMids_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getGroupMemberMids_result deepCopy() {
      return new getGroupMemberMids_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroupMemberMids_result)
        return this.equals((getGroupMemberMids_result)that);
      return false;
    }

    public boolean equals(getGroupMemberMids_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getGroupMemberMids_result other = (getGroupMemberMids_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list1299 = iprot.readListBegin();
                this.success = new Vector(_list1299.size);
                for (int _i1300 = 0; _i1300 < _list1299.size; ++_i1300)
                {
                  String _elem1301;
                  _elem1301 = iprot.readString();
                  this.success.addElement(_elem1301);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter1302_enum = this.success.elements(); _iter1302_enum.hasMoreElements(); )           {
            String _iter1302 = (String)_iter1302_enum.nextElement();
            oprot.writeString(_iter1302);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getGroupMemberMids_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendMessageWithoutRelationship_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendMessageWithoutRelationship_args");

    private static final TField MESSAGE_FIELD_DESC = new TField("message", TType.STRUCT, (short)2);

    private Message message;

    // isset id assignments

    public sendMessageWithoutRelationship_args() {
    }

    public sendMessageWithoutRelationship_args(
      Message message)
    {
      this();
      this.message = message;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMessageWithoutRelationship_args(sendMessageWithoutRelationship_args other) {
      if (other.isSetMessage()) {
        this.message = new Message(other.message);
      }
    }

    public sendMessageWithoutRelationship_args deepCopy() {
      return new sendMessageWithoutRelationship_args(this);
    }

    public void clear() {
      this.message = null;
    }

    public Message getMessage() {
      return this.message;
    }

    public void setMessage(Message message) {
      this.message = message;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /** Returns true if field message is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMessageWithoutRelationship_args)
        return this.equals((sendMessageWithoutRelationship_args)that);
      return false;
    }

    public boolean equals(sendMessageWithoutRelationship_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendMessageWithoutRelationship_args other = (sendMessageWithoutRelationship_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetMessage(), other.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = this.message.compareTo(other.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // MESSAGE
            if (field.type == TType.STRUCT) {
              this.message = new Message();
              this.message.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        this.message.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendMessageWithoutRelationship_args(");
      boolean first = true;

      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendMessageWithoutRelationship_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendMessageWithoutRelationship_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Message success;
    private TalkException e;

    // isset id assignments

    public sendMessageWithoutRelationship_result() {
    }

    public sendMessageWithoutRelationship_result(
      Message success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMessageWithoutRelationship_result(sendMessageWithoutRelationship_result other) {
      if (other.isSetSuccess()) {
        this.success = new Message(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public sendMessageWithoutRelationship_result deepCopy() {
      return new sendMessageWithoutRelationship_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Message getSuccess() {
      return this.success;
    }

    public void setSuccess(Message success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMessageWithoutRelationship_result)
        return this.equals((sendMessageWithoutRelationship_result)that);
      return false;
    }

    public boolean equals(sendMessageWithoutRelationship_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendMessageWithoutRelationship_result other = (sendMessageWithoutRelationship_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Message();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendMessageWithoutRelationship_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class displayBuddySubscriberCountInBulk_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("displayBuddySubscriberCountInBulk_args");

    private static final TField MIDS_FIELD_DESC = new TField("mids", TType.LIST, (short)1);

    private Vector mids;

    // isset id assignments

    public displayBuddySubscriberCountInBulk_args() {
    }

    public displayBuddySubscriberCountInBulk_args(
      Vector mids)
    {
      this();
      this.mids = mids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public displayBuddySubscriberCountInBulk_args(displayBuddySubscriberCountInBulk_args other) {
      if (other.isSetMids()) {
        Vector __this__mids = new Vector();
        for (Enumeration other_enum = other.mids.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__mids.addElement(other_element);
        }
        this.mids = __this__mids;
      }
    }

    public displayBuddySubscriberCountInBulk_args deepCopy() {
      return new displayBuddySubscriberCountInBulk_args(this);
    }

    public void clear() {
      this.mids = null;
    }

    public int getMidsSize() {
      return (this.mids == null) ? 0 : this.mids.size();
    }

    public Enumeration getMidsEnumeration() {
      return (this.mids == null) ? null : this.mids.elements();
    }

    public void addToMids(String elem) {
      if (this.mids == null) {
        this.mids = new Vector();
      }
      this.mids.addElement(elem);
    }

    public Vector getMids() {
      return this.mids;
    }

    public void setMids(Vector mids) {
      this.mids = mids;
    }

    public void unsetMids() {
      this.mids = null;
    }

    /** Returns true if field mids is set (has been assigned a value) and false otherwise */
    public boolean isSetMids() {
      return this.mids != null;
    }

    public void setMidsIsSet(boolean value) {
      if (!value) {
        this.mids = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof displayBuddySubscriberCountInBulk_args)
        return this.equals((displayBuddySubscriberCountInBulk_args)that);
      return false;
    }

    public boolean equals(displayBuddySubscriberCountInBulk_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mids = true && this.isSetMids();
      boolean that_present_mids = true && that.isSetMids();
      if (this_present_mids || that_present_mids) {
        if (!(this_present_mids && that_present_mids))
          return false;
        if (!this.mids.equals(that.mids))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      displayBuddySubscriberCountInBulk_args other = (displayBuddySubscriberCountInBulk_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetMids(), other.isSetMids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMids()) {
        lastComparison = TBaseHelper.compareTo(this.mids, other.mids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MIDS
            if (field.type == TType.LIST) {
              {
                TList _list1303 = iprot.readListBegin();
                this.mids = new Vector(_list1303.size);
                for (int _i1304 = 0; _i1304 < _list1303.size; ++_i1304)
                {
                  String _elem1305;
                  _elem1305 = iprot.readString();
                  this.mids.addElement(_elem1305);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.mids != null) {
        oprot.writeFieldBegin(MIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.mids.size()));
          for (Enumeration _iter1306_enum = this.mids.elements(); _iter1306_enum.hasMoreElements(); )           {
            String _iter1306 = (String)_iter1306_enum.nextElement();
            oprot.writeString(_iter1306);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("displayBuddySubscriberCountInBulk_args(");
      boolean first = true;

      sb.append("mids:");
      if (this.mids == null) {
        sb.append("null");
      } else {
        sb.append(this.mids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class displayBuddySubscriberCountInBulk_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("displayBuddySubscriberCountInBulk_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.MAP, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Hashtable success;
    private TalkException e;

    // isset id assignments

    public displayBuddySubscriberCountInBulk_result() {
    }

    public displayBuddySubscriberCountInBulk_result(
      Hashtable success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public displayBuddySubscriberCountInBulk_result(displayBuddySubscriberCountInBulk_result other) {
      if (other.isSetSuccess()) {
        Hashtable __this__success = new Hashtable();
        for (Enumeration other_enum = other.success.keys(); other_enum.hasMoreElements(); ) {

          String other_element_key = (String)other_enum.nextElement();
          Long other_element_value = (Long)other.success.get(other_element_key);

          String __this__success_copy_key = other_element_key;

          Long __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public displayBuddySubscriberCountInBulk_result deepCopy() {
      return new displayBuddySubscriberCountInBulk_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, Long val) {
      if (this.success == null) {
        this.success = new Hashtable();
      }
      this.success.put(key, val);
    }

    public Hashtable getSuccess() {
      return this.success;
    }

    public void setSuccess(Hashtable success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof displayBuddySubscriberCountInBulk_result)
        return this.equals((displayBuddySubscriberCountInBulk_result)that);
      return false;
    }

    public boolean equals(displayBuddySubscriberCountInBulk_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      displayBuddySubscriberCountInBulk_result other = (displayBuddySubscriberCountInBulk_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.MAP) {
              {
                TMap _map1307 = iprot.readMapBegin();
                this.success = new Hashtable(2*_map1307.size);
                for (int _i1308 = 0; _i1308 < _map1307.size; ++_i1308)
                {
                  String _key1309;
                  long _val1310;
                  _key1309 = iprot.readString();
                  _val1310 = iprot.readI64();
                  this.success.put(_key1309, new Long(_val1310));
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.I64, this.success.size()));
          for (Enumeration _iter1311_enum = this.success.keys(); _iter1311_enum.hasMoreElements(); )           {
            String _iter1311 = (String)_iter1311_enum.nextElement();
            oprot.writeString(_iter1311);
            oprot.writeI64(((Long)this.success.get(_iter1311)));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("displayBuddySubscriberCountInBulk_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lookupRoomMembers_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("lookupRoomMembers_args");

    private static final TField ROOM_ID_FIELD_DESC = new TField("roomId", TType.STRING, (short)1);
    private static final TField MIDS_FIELD_DESC = new TField("mids", TType.LIST, (short)2);

    private String roomId;
    private Vector mids;

    // isset id assignments

    public lookupRoomMembers_args() {
    }

    public lookupRoomMembers_args(
      String roomId,
      Vector mids)
    {
      this();
      this.roomId = roomId;
      this.mids = mids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lookupRoomMembers_args(lookupRoomMembers_args other) {
      if (other.isSetRoomId()) {
        this.roomId = other.roomId;
      }
      if (other.isSetMids()) {
        Vector __this__mids = new Vector();
        for (Enumeration other_enum = other.mids.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__mids.addElement(other_element);
        }
        this.mids = __this__mids;
      }
    }

    public lookupRoomMembers_args deepCopy() {
      return new lookupRoomMembers_args(this);
    }

    public void clear() {
      this.roomId = null;
      this.mids = null;
    }

    public String getRoomId() {
      return this.roomId;
    }

    public void setRoomId(String roomId) {
      this.roomId = roomId;
    }

    public void unsetRoomId() {
      this.roomId = null;
    }

    /** Returns true if field roomId is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomId() {
      return this.roomId != null;
    }

    public void setRoomIdIsSet(boolean value) {
      if (!value) {
        this.roomId = null;
      }
    }

    public int getMidsSize() {
      return (this.mids == null) ? 0 : this.mids.size();
    }

    public Enumeration getMidsEnumeration() {
      return (this.mids == null) ? null : this.mids.elements();
    }

    public void addToMids(String elem) {
      if (this.mids == null) {
        this.mids = new Vector();
      }
      this.mids.addElement(elem);
    }

    public Vector getMids() {
      return this.mids;
    }

    public void setMids(Vector mids) {
      this.mids = mids;
    }

    public void unsetMids() {
      this.mids = null;
    }

    /** Returns true if field mids is set (has been assigned a value) and false otherwise */
    public boolean isSetMids() {
      return this.mids != null;
    }

    public void setMidsIsSet(boolean value) {
      if (!value) {
        this.mids = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lookupRoomMembers_args)
        return this.equals((lookupRoomMembers_args)that);
      return false;
    }

    public boolean equals(lookupRoomMembers_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_roomId = true && this.isSetRoomId();
      boolean that_present_roomId = true && that.isSetRoomId();
      if (this_present_roomId || that_present_roomId) {
        if (!(this_present_roomId && that_present_roomId))
          return false;
        if (!this.roomId.equals(that.roomId))
          return false;
      }

      boolean this_present_mids = true && this.isSetMids();
      boolean that_present_mids = true && that.isSetMids();
      if (this_present_mids || that_present_mids) {
        if (!(this_present_mids && that_present_mids))
          return false;
        if (!this.mids.equals(that.mids))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      lookupRoomMembers_args other = (lookupRoomMembers_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRoomId(), other.isSetRoomId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomId()) {
        lastComparison = TBaseHelper.compareTo(this.roomId, other.roomId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMids(), other.isSetMids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMids()) {
        lastComparison = TBaseHelper.compareTo(this.mids, other.mids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ROOM_ID
            if (field.type == TType.STRING) {
              this.roomId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MIDS
            if (field.type == TType.LIST) {
              {
                TList _list1312 = iprot.readListBegin();
                this.mids = new Vector(_list1312.size);
                for (int _i1313 = 0; _i1313 < _list1312.size; ++_i1313)
                {
                  String _elem1314;
                  _elem1314 = iprot.readString();
                  this.mids.addElement(_elem1314);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.roomId != null) {
        oprot.writeFieldBegin(ROOM_ID_FIELD_DESC);
        oprot.writeString(this.roomId);
        oprot.writeFieldEnd();
      }
      if (this.mids != null) {
        oprot.writeFieldBegin(MIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.mids.size()));
          for (Enumeration _iter1315_enum = this.mids.elements(); _iter1315_enum.hasMoreElements(); )           {
            String _iter1315 = (String)_iter1315_enum.nextElement();
            oprot.writeString(_iter1315);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("lookupRoomMembers_args(");
      boolean first = true;

      sb.append("roomId:");
      if (this.roomId == null) {
        sb.append("null");
      } else {
        sb.append(this.roomId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mids:");
      if (this.mids == null) {
        sb.append("null");
      } else {
        sb.append(this.mids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class lookupRoomMembers_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("lookupRoomMembers_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public lookupRoomMembers_result() {
    }

    public lookupRoomMembers_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lookupRoomMembers_result(lookupRoomMembers_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          SimpleChannelContact other_element = (SimpleChannelContact)other_enum.nextElement();
          __this__success.addElement(new SimpleChannelContact(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public lookupRoomMembers_result deepCopy() {
      return new lookupRoomMembers_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(SimpleChannelContact elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof lookupRoomMembers_result)
        return this.equals((lookupRoomMembers_result)that);
      return false;
    }

    public boolean equals(lookupRoomMembers_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      lookupRoomMembers_result other = (lookupRoomMembers_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list1316 = iprot.readListBegin();
                this.success = new Vector(_list1316.size);
                for (int _i1317 = 0; _i1317 < _list1316.size; ++_i1317)
                {
                  SimpleChannelContact _elem1318;
                  _elem1318 = new SimpleChannelContact();
                  _elem1318.read(iprot);
                  this.success.addElement(_elem1318);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter1319_enum = this.success.elements(); _iter1319_enum.hasMoreElements(); )           {
            SimpleChannelContact _iter1319 = (SimpleChannelContact)_iter1319_enum.nextElement();
            _iter1319.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("lookupRoomMembers_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getFavoriteMidsForChannel_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getFavoriteMidsForChannel_args");


    public getFavoriteMidsForChannel_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFavoriteMidsForChannel_args(getFavoriteMidsForChannel_args other) {
    }

    public getFavoriteMidsForChannel_args deepCopy() {
      return new getFavoriteMidsForChannel_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFavoriteMidsForChannel_args)
        return this.equals((getFavoriteMidsForChannel_args)that);
      return false;
    }

    public boolean equals(getFavoriteMidsForChannel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getFavoriteMidsForChannel_args other = (getFavoriteMidsForChannel_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getFavoriteMidsForChannel_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getFavoriteMidsForChannel_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getFavoriteMidsForChannel_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getFavoriteMidsForChannel_result() {
    }

    public getFavoriteMidsForChannel_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFavoriteMidsForChannel_result(getFavoriteMidsForChannel_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getFavoriteMidsForChannel_result deepCopy() {
      return new getFavoriteMidsForChannel_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFavoriteMidsForChannel_result)
        return this.equals((getFavoriteMidsForChannel_result)that);
      return false;
    }

    public boolean equals(getFavoriteMidsForChannel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getFavoriteMidsForChannel_result other = (getFavoriteMidsForChannel_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list1320 = iprot.readListBegin();
                this.success = new Vector(_list1320.size);
                for (int _i1321 = 0; _i1321 < _list1320.size; ++_i1321)
                {
                  String _elem1322;
                  _elem1322 = iprot.readString();
                  this.success.addElement(_elem1322);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter1323_enum = this.success.elements(); _iter1323_enum.hasMoreElements(); )           {
            String _iter1323 = (String)_iter1323_enum.nextElement();
            oprot.writeString(_iter1323);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getFavoriteMidsForChannel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getAllContactIdsForChannel_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getAllContactIdsForChannel_args");


    public getAllContactIdsForChannel_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllContactIdsForChannel_args(getAllContactIdsForChannel_args other) {
    }

    public getAllContactIdsForChannel_args deepCopy() {
      return new getAllContactIdsForChannel_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllContactIdsForChannel_args)
        return this.equals((getAllContactIdsForChannel_args)that);
      return false;
    }

    public boolean equals(getAllContactIdsForChannel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getAllContactIdsForChannel_args other = (getAllContactIdsForChannel_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getAllContactIdsForChannel_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getAllContactIdsForChannel_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getAllContactIdsForChannel_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getAllContactIdsForChannel_result() {
    }

    public getAllContactIdsForChannel_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllContactIdsForChannel_result(getAllContactIdsForChannel_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getAllContactIdsForChannel_result deepCopy() {
      return new getAllContactIdsForChannel_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllContactIdsForChannel_result)
        return this.equals((getAllContactIdsForChannel_result)that);
      return false;
    }

    public boolean equals(getAllContactIdsForChannel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getAllContactIdsForChannel_result other = (getAllContactIdsForChannel_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list1324 = iprot.readListBegin();
                this.success = new Vector(_list1324.size);
                for (int _i1325 = 0; _i1325 < _list1324.size; ++_i1325)
                {
                  String _elem1326;
                  _elem1326 = iprot.readString();
                  this.success.addElement(_elem1326);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter1327_enum = this.success.elements(); _iter1327_enum.hasMoreElements(); )           {
            String _iter1327 = (String)_iter1327_enum.nextElement();
            oprot.writeString(_iter1327);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getAllContactIdsForChannel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class displayBuddySubscriberCount_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("displayBuddySubscriberCount_args");


    public displayBuddySubscriberCount_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public displayBuddySubscriberCount_args(displayBuddySubscriberCount_args other) {
    }

    public displayBuddySubscriberCount_args deepCopy() {
      return new displayBuddySubscriberCount_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof displayBuddySubscriberCount_args)
        return this.equals((displayBuddySubscriberCount_args)that);
      return false;
    }

    public boolean equals(displayBuddySubscriberCount_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      displayBuddySubscriberCount_args other = (displayBuddySubscriberCount_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("displayBuddySubscriberCount_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class displayBuddySubscriberCount_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("displayBuddySubscriberCount_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I64, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private long success;
    private TalkException e;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public displayBuddySubscriberCount_result() {
    }

    public displayBuddySubscriberCount_result(
      long success,
      TalkException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public displayBuddySubscriberCount_result(displayBuddySubscriberCount_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public displayBuddySubscriberCount_result deepCopy() {
      return new displayBuddySubscriberCount_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public void setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof displayBuddySubscriberCount_result)
        return this.equals((displayBuddySubscriberCount_result)that);
      return false;
    }

    public boolean equals(displayBuddySubscriberCount_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      displayBuddySubscriberCount_result other = (displayBuddySubscriberCount_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("displayBuddySubscriberCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getProfileForChannel_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getProfileForChannel_args");


    public getProfileForChannel_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfileForChannel_args(getProfileForChannel_args other) {
    }

    public getProfileForChannel_args deepCopy() {
      return new getProfileForChannel_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfileForChannel_args)
        return this.equals((getProfileForChannel_args)that);
      return false;
    }

    public boolean equals(getProfileForChannel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getProfileForChannel_args other = (getProfileForChannel_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getProfileForChannel_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getProfileForChannel_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getProfileForChannel_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Profile success;
    private TalkException e;

    // isset id assignments

    public getProfileForChannel_result() {
    }

    public getProfileForChannel_result(
      Profile success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfileForChannel_result(getProfileForChannel_result other) {
      if (other.isSetSuccess()) {
        this.success = new Profile(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getProfileForChannel_result deepCopy() {
      return new getProfileForChannel_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Profile getSuccess() {
      return this.success;
    }

    public void setSuccess(Profile success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfileForChannel_result)
        return this.equals((getProfileForChannel_result)that);
      return false;
    }

    public boolean equals(getProfileForChannel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getProfileForChannel_result other = (getProfileForChannel_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Profile();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getProfileForChannel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUserTickets_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUserTickets_args");

    private static final TField USER_MIDS_FIELD_DESC = new TField("userMids", TType.LIST, (short)1);

    private Vector userMids;

    // isset id assignments

    public getUserTickets_args() {
    }

    public getUserTickets_args(
      Vector userMids)
    {
      this();
      this.userMids = userMids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserTickets_args(getUserTickets_args other) {
      if (other.isSetUserMids()) {
        Vector __this__userMids = new Vector();
        for (Enumeration other_enum = other.userMids.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__userMids.addElement(other_element);
        }
        this.userMids = __this__userMids;
      }
    }

    public getUserTickets_args deepCopy() {
      return new getUserTickets_args(this);
    }

    public void clear() {
      this.userMids = null;
    }

    public int getUserMidsSize() {
      return (this.userMids == null) ? 0 : this.userMids.size();
    }

    public Enumeration getUserMidsEnumeration() {
      return (this.userMids == null) ? null : this.userMids.elements();
    }

    public void addToUserMids(String elem) {
      if (this.userMids == null) {
        this.userMids = new Vector();
      }
      this.userMids.addElement(elem);
    }

    public Vector getUserMids() {
      return this.userMids;
    }

    public void setUserMids(Vector userMids) {
      this.userMids = userMids;
    }

    public void unsetUserMids() {
      this.userMids = null;
    }

    /** Returns true if field userMids is set (has been assigned a value) and false otherwise */
    public boolean isSetUserMids() {
      return this.userMids != null;
    }

    public void setUserMidsIsSet(boolean value) {
      if (!value) {
        this.userMids = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserTickets_args)
        return this.equals((getUserTickets_args)that);
      return false;
    }

    public boolean equals(getUserTickets_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userMids = true && this.isSetUserMids();
      boolean that_present_userMids = true && that.isSetUserMids();
      if (this_present_userMids || that_present_userMids) {
        if (!(this_present_userMids && that_present_userMids))
          return false;
        if (!this.userMids.equals(that.userMids))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUserTickets_args other = (getUserTickets_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetUserMids(), other.isSetUserMids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserMids()) {
        lastComparison = TBaseHelper.compareTo(this.userMids, other.userMids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // USER_MIDS
            if (field.type == TType.LIST) {
              {
                TList _list1328 = iprot.readListBegin();
                this.userMids = new Vector(_list1328.size);
                for (int _i1329 = 0; _i1329 < _list1328.size; ++_i1329)
                {
                  String _elem1330;
                  _elem1330 = iprot.readString();
                  this.userMids.addElement(_elem1330);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.userMids != null) {
        oprot.writeFieldBegin(USER_MIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.userMids.size()));
          for (Enumeration _iter1331_enum = this.userMids.elements(); _iter1331_enum.hasMoreElements(); )           {
            String _iter1331 = (String)_iter1331_enum.nextElement();
            oprot.writeString(_iter1331);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUserTickets_args(");
      boolean first = true;

      sb.append("userMids:");
      if (this.userMids == null) {
        sb.append("null");
      } else {
        sb.append(this.userMids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUserTickets_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUserTickets_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getUserTickets_result() {
    }

    public getUserTickets_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserTickets_result(getUserTickets_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          UserTicketResponse other_element = (UserTicketResponse)other_enum.nextElement();
          __this__success.addElement(new UserTicketResponse(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getUserTickets_result deepCopy() {
      return new getUserTickets_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(UserTicketResponse elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserTickets_result)
        return this.equals((getUserTickets_result)that);
      return false;
    }

    public boolean equals(getUserTickets_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUserTickets_result other = (getUserTickets_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list1332 = iprot.readListBegin();
                this.success = new Vector(_list1332.size);
                for (int _i1333 = 0; _i1333 < _list1332.size; ++_i1333)
                {
                  UserTicketResponse _elem1334;
                  _elem1334 = new UserTicketResponse();
                  _elem1334.read(iprot);
                  this.success.addElement(_elem1334);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter1335_enum = this.success.elements(); _iter1335_enum.hasMoreElements(); )           {
            UserTicketResponse _iter1335 = (UserTicketResponse)_iter1335_enum.nextElement();
            _iter1335.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUserTickets_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getOAFriendMids_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getOAFriendMids_args");


    public getOAFriendMids_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOAFriendMids_args(getOAFriendMids_args other) {
    }

    public getOAFriendMids_args deepCopy() {
      return new getOAFriendMids_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOAFriendMids_args)
        return this.equals((getOAFriendMids_args)that);
      return false;
    }

    public boolean equals(getOAFriendMids_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getOAFriendMids_args other = (getOAFriendMids_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getOAFriendMids_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getOAFriendMids_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getOAFriendMids_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getOAFriendMids_result() {
    }

    public getOAFriendMids_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOAFriendMids_result(getOAFriendMids_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getOAFriendMids_result deepCopy() {
      return new getOAFriendMids_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getOAFriendMids_result)
        return this.equals((getOAFriendMids_result)that);
      return false;
    }

    public boolean equals(getOAFriendMids_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getOAFriendMids_result other = (getOAFriendMids_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list1336 = iprot.readListBegin();
                this.success = new Vector(_list1336.size);
                for (int _i1337 = 0; _i1337 < _list1336.size; ++_i1337)
                {
                  String _elem1338;
                  _elem1338 = iprot.readString();
                  this.success.addElement(_elem1338);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter1339_enum = this.success.elements(); _iter1339_enum.hasMoreElements(); )           {
            String _iter1339 = (String)_iter1339_enum.nextElement();
            oprot.writeString(_iter1339);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getOAFriendMids_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class searchPaidCallUserRate_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("searchPaidCallUserRate_args");

    private static final TField COUNTRY_CODE_FIELD_DESC = new TField("countryCode", TType.STRING, (short)2);
    private static final TField LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, (short)3);

    private String countryCode;
    private String language;

    // isset id assignments

    public searchPaidCallUserRate_args() {
    }

    public searchPaidCallUserRate_args(
      String countryCode,
      String language)
    {
      this();
      this.countryCode = countryCode;
      this.language = language;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchPaidCallUserRate_args(searchPaidCallUserRate_args other) {
      if (other.isSetCountryCode()) {
        this.countryCode = other.countryCode;
      }
      if (other.isSetLanguage()) {
        this.language = other.language;
      }
    }

    public searchPaidCallUserRate_args deepCopy() {
      return new searchPaidCallUserRate_args(this);
    }

    public void clear() {
      this.countryCode = null;
      this.language = null;
    }

    public String getCountryCode() {
      return this.countryCode;
    }

    public void setCountryCode(String countryCode) {
      this.countryCode = countryCode;
    }

    public void unsetCountryCode() {
      this.countryCode = null;
    }

    /** Returns true if field countryCode is set (has been assigned a value) and false otherwise */
    public boolean isSetCountryCode() {
      return this.countryCode != null;
    }

    public void setCountryCodeIsSet(boolean value) {
      if (!value) {
        this.countryCode = null;
      }
    }

    public String getLanguage() {
      return this.language;
    }

    public void setLanguage(String language) {
      this.language = language;
    }

    public void unsetLanguage() {
      this.language = null;
    }

    /** Returns true if field language is set (has been assigned a value) and false otherwise */
    public boolean isSetLanguage() {
      return this.language != null;
    }

    public void setLanguageIsSet(boolean value) {
      if (!value) {
        this.language = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchPaidCallUserRate_args)
        return this.equals((searchPaidCallUserRate_args)that);
      return false;
    }

    public boolean equals(searchPaidCallUserRate_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_countryCode = true && this.isSetCountryCode();
      boolean that_present_countryCode = true && that.isSetCountryCode();
      if (this_present_countryCode || that_present_countryCode) {
        if (!(this_present_countryCode && that_present_countryCode))
          return false;
        if (!this.countryCode.equals(that.countryCode))
          return false;
      }

      boolean this_present_language = true && this.isSetLanguage();
      boolean that_present_language = true && that.isSetLanguage();
      if (this_present_language || that_present_language) {
        if (!(this_present_language && that_present_language))
          return false;
        if (!this.language.equals(that.language))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      searchPaidCallUserRate_args other = (searchPaidCallUserRate_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetCountryCode(), other.isSetCountryCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountryCode()) {
        lastComparison = TBaseHelper.compareTo(this.countryCode, other.countryCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLanguage(), other.isSetLanguage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLanguage()) {
        lastComparison = TBaseHelper.compareTo(this.language, other.language);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // COUNTRY_CODE
            if (field.type == TType.STRING) {
              this.countryCode = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // LANGUAGE
            if (field.type == TType.STRING) {
              this.language = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.countryCode != null) {
        oprot.writeFieldBegin(COUNTRY_CODE_FIELD_DESC);
        oprot.writeString(this.countryCode);
        oprot.writeFieldEnd();
      }
      if (this.language != null) {
        oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
        oprot.writeString(this.language);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("searchPaidCallUserRate_args(");
      boolean first = true;

      sb.append("countryCode:");
      if (this.countryCode == null) {
        sb.append("null");
      } else {
        sb.append(this.countryCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("language:");
      if (this.language == null) {
        sb.append("null");
      } else {
        sb.append(this.language);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class searchPaidCallUserRate_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("searchPaidCallUserRate_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public searchPaidCallUserRate_result() {
    }

    public searchPaidCallUserRate_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchPaidCallUserRate_result(searchPaidCallUserRate_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          PaidCallUserRate other_element = (PaidCallUserRate)other_enum.nextElement();
          __this__success.addElement(new PaidCallUserRate(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public searchPaidCallUserRate_result deepCopy() {
      return new searchPaidCallUserRate_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(PaidCallUserRate elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchPaidCallUserRate_result)
        return this.equals((searchPaidCallUserRate_result)that);
      return false;
    }

    public boolean equals(searchPaidCallUserRate_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      searchPaidCallUserRate_result other = (searchPaidCallUserRate_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list1340 = iprot.readListBegin();
                this.success = new Vector(_list1340.size);
                for (int _i1341 = 0; _i1341 < _list1340.size; ++_i1341)
                {
                  PaidCallUserRate _elem1342;
                  _elem1342 = new PaidCallUserRate();
                  _elem1342.read(iprot);
                  this.success.addElement(_elem1342);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter1343_enum = this.success.elements(); _iter1343_enum.hasMoreElements(); )           {
            PaidCallUserRate _iter1343 = (PaidCallUserRate)_iter1343_enum.nextElement();
            _iter1343.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("searchPaidCallUserRate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getJoinedGroupIdsForChannel_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getJoinedGroupIdsForChannel_args");


    public getJoinedGroupIdsForChannel_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getJoinedGroupIdsForChannel_args(getJoinedGroupIdsForChannel_args other) {
    }

    public getJoinedGroupIdsForChannel_args deepCopy() {
      return new getJoinedGroupIdsForChannel_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getJoinedGroupIdsForChannel_args)
        return this.equals((getJoinedGroupIdsForChannel_args)that);
      return false;
    }

    public boolean equals(getJoinedGroupIdsForChannel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getJoinedGroupIdsForChannel_args other = (getJoinedGroupIdsForChannel_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getJoinedGroupIdsForChannel_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getJoinedGroupIdsForChannel_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getJoinedGroupIdsForChannel_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getJoinedGroupIdsForChannel_result() {
    }

    public getJoinedGroupIdsForChannel_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getJoinedGroupIdsForChannel_result(getJoinedGroupIdsForChannel_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getJoinedGroupIdsForChannel_result deepCopy() {
      return new getJoinedGroupIdsForChannel_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getJoinedGroupIdsForChannel_result)
        return this.equals((getJoinedGroupIdsForChannel_result)that);
      return false;
    }

    public boolean equals(getJoinedGroupIdsForChannel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getJoinedGroupIdsForChannel_result other = (getJoinedGroupIdsForChannel_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list1344 = iprot.readListBegin();
                this.success = new Vector(_list1344.size);
                for (int _i1345 = 0; _i1345 < _list1344.size; ++_i1345)
                {
                  String _elem1346;
                  _elem1346 = iprot.readString();
                  this.success.addElement(_elem1346);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter1347_enum = this.success.elements(); _iter1347_enum.hasMoreElements(); )           {
            String _iter1347 = (String)_iter1347_enum.nextElement();
            oprot.writeString(_iter1347);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getJoinedGroupIdsForChannel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class acquireGroupCallRoute_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("acquireGroupCallRoute_args");

    private static final TField CHAT_MID_FIELD_DESC = new TField("chatMid", TType.STRING, (short)2);
    private static final TField MEDIA_TYPE_FIELD_DESC = new TField("mediaType", TType.I32, (short)3);

    private String chatMid;
    private GroupCallMediaType mediaType;

    // isset id assignments

    public acquireGroupCallRoute_args() {
    }

    public acquireGroupCallRoute_args(
      String chatMid,
      GroupCallMediaType mediaType)
    {
      this();
      this.chatMid = chatMid;
      this.mediaType = mediaType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public acquireGroupCallRoute_args(acquireGroupCallRoute_args other) {
      if (other.isSetChatMid()) {
        this.chatMid = other.chatMid;
      }
      if (other.isSetMediaType()) {
        this.mediaType = other.mediaType;
      }
    }

    public acquireGroupCallRoute_args deepCopy() {
      return new acquireGroupCallRoute_args(this);
    }

    public void clear() {
      this.chatMid = null;
      this.mediaType = null;
    }

    public String getChatMid() {
      return this.chatMid;
    }

    public void setChatMid(String chatMid) {
      this.chatMid = chatMid;
    }

    public void unsetChatMid() {
      this.chatMid = null;
    }

    /** Returns true if field chatMid is set (has been assigned a value) and false otherwise */
    public boolean isSetChatMid() {
      return this.chatMid != null;
    }

    public void setChatMidIsSet(boolean value) {
      if (!value) {
        this.chatMid = null;
      }
    }

    /**
     * 
     * @see GroupCallMediaType
     */
    public GroupCallMediaType getMediaType() {
      return this.mediaType;
    }

    /**
     * 
     * @see GroupCallMediaType
     */
    public void setMediaType(GroupCallMediaType mediaType) {
      this.mediaType = mediaType;
    }

    public void unsetMediaType() {
      this.mediaType = null;
    }

    /** Returns true if field mediaType is set (has been assigned a value) and false otherwise */
    public boolean isSetMediaType() {
      return this.mediaType != null;
    }

    public void setMediaTypeIsSet(boolean value) {
      if (!value) {
        this.mediaType = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof acquireGroupCallRoute_args)
        return this.equals((acquireGroupCallRoute_args)that);
      return false;
    }

    public boolean equals(acquireGroupCallRoute_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_chatMid = true && this.isSetChatMid();
      boolean that_present_chatMid = true && that.isSetChatMid();
      if (this_present_chatMid || that_present_chatMid) {
        if (!(this_present_chatMid && that_present_chatMid))
          return false;
        if (!this.chatMid.equals(that.chatMid))
          return false;
      }

      boolean this_present_mediaType = true && this.isSetMediaType();
      boolean that_present_mediaType = true && that.isSetMediaType();
      if (this_present_mediaType || that_present_mediaType) {
        if (!(this_present_mediaType && that_present_mediaType))
          return false;
        if (!this.mediaType.equals(that.mediaType))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      acquireGroupCallRoute_args other = (acquireGroupCallRoute_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetChatMid(), other.isSetChatMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChatMid()) {
        lastComparison = TBaseHelper.compareTo(this.chatMid, other.chatMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMediaType(), other.isSetMediaType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMediaType()) {
        lastComparison = TBaseHelper.compareTo(this.mediaType, other.mediaType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // CHAT_MID
            if (field.type == TType.STRING) {
              this.chatMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // MEDIA_TYPE
            if (field.type == TType.I32) {
              this.mediaType = GroupCallMediaType.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.chatMid != null) {
        oprot.writeFieldBegin(CHAT_MID_FIELD_DESC);
        oprot.writeString(this.chatMid);
        oprot.writeFieldEnd();
      }
      if (this.mediaType != null) {
        oprot.writeFieldBegin(MEDIA_TYPE_FIELD_DESC);
        oprot.writeI32(this.mediaType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("acquireGroupCallRoute_args(");
      boolean first = true;

      sb.append("chatMid:");
      if (this.chatMid == null) {
        sb.append("null");
      } else {
        sb.append(this.chatMid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mediaType:");
      if (this.mediaType == null) {
        sb.append("null");
      } else {
        sb.append(this.mediaType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class acquireGroupCallRoute_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("acquireGroupCallRoute_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private GroupCallRoute success;
    private TalkException e;

    // isset id assignments

    public acquireGroupCallRoute_result() {
    }

    public acquireGroupCallRoute_result(
      GroupCallRoute success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public acquireGroupCallRoute_result(acquireGroupCallRoute_result other) {
      if (other.isSetSuccess()) {
        this.success = new GroupCallRoute(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public acquireGroupCallRoute_result deepCopy() {
      return new acquireGroupCallRoute_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public GroupCallRoute getSuccess() {
      return this.success;
    }

    public void setSuccess(GroupCallRoute success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof acquireGroupCallRoute_result)
        return this.equals((acquireGroupCallRoute_result)that);
      return false;
    }

    public boolean equals(acquireGroupCallRoute_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      acquireGroupCallRoute_result other = (acquireGroupCallRoute_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new GroupCallRoute();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("acquireGroupCallRoute_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUserMidsWhoAddedMe_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUserMidsWhoAddedMe_args");


    public getUserMidsWhoAddedMe_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserMidsWhoAddedMe_args(getUserMidsWhoAddedMe_args other) {
    }

    public getUserMidsWhoAddedMe_args deepCopy() {
      return new getUserMidsWhoAddedMe_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserMidsWhoAddedMe_args)
        return this.equals((getUserMidsWhoAddedMe_args)that);
      return false;
    }

    public boolean equals(getUserMidsWhoAddedMe_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUserMidsWhoAddedMe_args other = (getUserMidsWhoAddedMe_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUserMidsWhoAddedMe_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUserMidsWhoAddedMe_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUserMidsWhoAddedMe_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getUserMidsWhoAddedMe_result() {
    }

    public getUserMidsWhoAddedMe_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserMidsWhoAddedMe_result(getUserMidsWhoAddedMe_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getUserMidsWhoAddedMe_result deepCopy() {
      return new getUserMidsWhoAddedMe_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserMidsWhoAddedMe_result)
        return this.equals((getUserMidsWhoAddedMe_result)that);
      return false;
    }

    public boolean equals(getUserMidsWhoAddedMe_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUserMidsWhoAddedMe_result other = (getUserMidsWhoAddedMe_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list1348 = iprot.readListBegin();
                this.success = new Vector(_list1348.size);
                for (int _i1349 = 0; _i1349 < _list1348.size; ++_i1349)
                {
                  String _elem1350;
                  _elem1350 = iprot.readString();
                  this.success.addElement(_elem1350);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter1351_enum = this.success.elements(); _iter1351_enum.hasMoreElements(); )           {
            String _iter1351 = (String)_iter1351_enum.nextElement();
            oprot.writeString(_iter1351);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUserMidsWhoAddedMe_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getIdentityCredential_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getIdentityCredential_args");


    public getIdentityCredential_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getIdentityCredential_args(getIdentityCredential_args other) {
    }

    public getIdentityCredential_args deepCopy() {
      return new getIdentityCredential_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getIdentityCredential_args)
        return this.equals((getIdentityCredential_args)that);
      return false;
    }

    public boolean equals(getIdentityCredential_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getIdentityCredential_args other = (getIdentityCredential_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getIdentityCredential_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getIdentityCredential_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getIdentityCredential_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private IdentityCredential success;
    private TalkException e;

    // isset id assignments

    public getIdentityCredential_result() {
    }

    public getIdentityCredential_result(
      IdentityCredential success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getIdentityCredential_result(getIdentityCredential_result other) {
      if (other.isSetSuccess()) {
        this.success = new IdentityCredential(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getIdentityCredential_result deepCopy() {
      return new getIdentityCredential_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public IdentityCredential getSuccess() {
      return this.success;
    }

    public void setSuccess(IdentityCredential success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getIdentityCredential_result)
        return this.equals((getIdentityCredential_result)that);
      return false;
    }

    public boolean equals(getIdentityCredential_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getIdentityCredential_result other = (getIdentityCredential_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new IdentityCredential();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getIdentityCredential_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class addOperationForChannel_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("addOperationForChannel_args");

    private static final TField OP_TYPE_FIELD_DESC = new TField("opType", TType.I32, (short)1);
    private static final TField PARAM1_FIELD_DESC = new TField("param1", TType.STRING, (short)2);
    private static final TField PARAM2_FIELD_DESC = new TField("param2", TType.STRING, (short)3);
    private static final TField PARAM3_FIELD_DESC = new TField("param3", TType.STRING, (short)4);

    private OpType opType;
    private String param1;
    private String param2;
    private String param3;

    // isset id assignments

    public addOperationForChannel_args() {
    }

    public addOperationForChannel_args(
      OpType opType,
      String param1,
      String param2,
      String param3)
    {
      this();
      this.opType = opType;
      this.param1 = param1;
      this.param2 = param2;
      this.param3 = param3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOperationForChannel_args(addOperationForChannel_args other) {
      if (other.isSetOpType()) {
        this.opType = other.opType;
      }
      if (other.isSetParam1()) {
        this.param1 = other.param1;
      }
      if (other.isSetParam2()) {
        this.param2 = other.param2;
      }
      if (other.isSetParam3()) {
        this.param3 = other.param3;
      }
    }

    public addOperationForChannel_args deepCopy() {
      return new addOperationForChannel_args(this);
    }

    public void clear() {
      this.opType = null;
      this.param1 = null;
      this.param2 = null;
      this.param3 = null;
    }

    /**
     * 
     * @see OpType
     */
    public OpType getOpType() {
      return this.opType;
    }

    /**
     * 
     * @see OpType
     */
    public void setOpType(OpType opType) {
      this.opType = opType;
    }

    public void unsetOpType() {
      this.opType = null;
    }

    /** Returns true if field opType is set (has been assigned a value) and false otherwise */
    public boolean isSetOpType() {
      return this.opType != null;
    }

    public void setOpTypeIsSet(boolean value) {
      if (!value) {
        this.opType = null;
      }
    }

    public String getParam1() {
      return this.param1;
    }

    public void setParam1(String param1) {
      this.param1 = param1;
    }

    public void unsetParam1() {
      this.param1 = null;
    }

    /** Returns true if field param1 is set (has been assigned a value) and false otherwise */
    public boolean isSetParam1() {
      return this.param1 != null;
    }

    public void setParam1IsSet(boolean value) {
      if (!value) {
        this.param1 = null;
      }
    }

    public String getParam2() {
      return this.param2;
    }

    public void setParam2(String param2) {
      this.param2 = param2;
    }

    public void unsetParam2() {
      this.param2 = null;
    }

    /** Returns true if field param2 is set (has been assigned a value) and false otherwise */
    public boolean isSetParam2() {
      return this.param2 != null;
    }

    public void setParam2IsSet(boolean value) {
      if (!value) {
        this.param2 = null;
      }
    }

    public String getParam3() {
      return this.param3;
    }

    public void setParam3(String param3) {
      this.param3 = param3;
    }

    public void unsetParam3() {
      this.param3 = null;
    }

    /** Returns true if field param3 is set (has been assigned a value) and false otherwise */
    public boolean isSetParam3() {
      return this.param3 != null;
    }

    public void setParam3IsSet(boolean value) {
      if (!value) {
        this.param3 = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOperationForChannel_args)
        return this.equals((addOperationForChannel_args)that);
      return false;
    }

    public boolean equals(addOperationForChannel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_opType = true && this.isSetOpType();
      boolean that_present_opType = true && that.isSetOpType();
      if (this_present_opType || that_present_opType) {
        if (!(this_present_opType && that_present_opType))
          return false;
        if (!this.opType.equals(that.opType))
          return false;
      }

      boolean this_present_param1 = true && this.isSetParam1();
      boolean that_present_param1 = true && that.isSetParam1();
      if (this_present_param1 || that_present_param1) {
        if (!(this_present_param1 && that_present_param1))
          return false;
        if (!this.param1.equals(that.param1))
          return false;
      }

      boolean this_present_param2 = true && this.isSetParam2();
      boolean that_present_param2 = true && that.isSetParam2();
      if (this_present_param2 || that_present_param2) {
        if (!(this_present_param2 && that_present_param2))
          return false;
        if (!this.param2.equals(that.param2))
          return false;
      }

      boolean this_present_param3 = true && this.isSetParam3();
      boolean that_present_param3 = true && that.isSetParam3();
      if (this_present_param3 || that_present_param3) {
        if (!(this_present_param3 && that_present_param3))
          return false;
        if (!this.param3.equals(that.param3))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      addOperationForChannel_args other = (addOperationForChannel_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetOpType(), other.isSetOpType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOpType()) {
        lastComparison = TBaseHelper.compareTo(this.opType, other.opType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetParam1(), other.isSetParam1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam1()) {
        lastComparison = TBaseHelper.compareTo(this.param1, other.param1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetParam2(), other.isSetParam2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam2()) {
        lastComparison = TBaseHelper.compareTo(this.param2, other.param2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetParam3(), other.isSetParam3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam3()) {
        lastComparison = TBaseHelper.compareTo(this.param3, other.param3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // OP_TYPE
            if (field.type == TType.I32) {
              this.opType = OpType.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // PARAM1
            if (field.type == TType.STRING) {
              this.param1 = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PARAM2
            if (field.type == TType.STRING) {
              this.param2 = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // PARAM3
            if (field.type == TType.STRING) {
              this.param3 = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.opType != null) {
        oprot.writeFieldBegin(OP_TYPE_FIELD_DESC);
        oprot.writeI32(this.opType.getValue());
        oprot.writeFieldEnd();
      }
      if (this.param1 != null) {
        oprot.writeFieldBegin(PARAM1_FIELD_DESC);
        oprot.writeString(this.param1);
        oprot.writeFieldEnd();
      }
      if (this.param2 != null) {
        oprot.writeFieldBegin(PARAM2_FIELD_DESC);
        oprot.writeString(this.param2);
        oprot.writeFieldEnd();
      }
      if (this.param3 != null) {
        oprot.writeFieldBegin(PARAM3_FIELD_DESC);
        oprot.writeString(this.param3);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("addOperationForChannel_args(");
      boolean first = true;

      sb.append("opType:");
      if (this.opType == null) {
        sb.append("null");
      } else {
        sb.append(this.opType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("param1:");
      if (this.param1 == null) {
        sb.append("null");
      } else {
        sb.append(this.param1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("param2:");
      if (this.param2 == null) {
        sb.append("null");
      } else {
        sb.append(this.param2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("param3:");
      if (this.param3 == null) {
        sb.append("null");
      } else {
        sb.append(this.param3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class addOperationForChannel_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("addOperationForChannel_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public addOperationForChannel_result() {
    }

    public addOperationForChannel_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOperationForChannel_result(addOperationForChannel_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public addOperationForChannel_result deepCopy() {
      return new addOperationForChannel_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOperationForChannel_result)
        return this.equals((addOperationForChannel_result)that);
      return false;
    }

    public boolean equals(addOperationForChannel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      addOperationForChannel_result other = (addOperationForChannel_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("addOperationForChannel_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSimpleChannelContacts_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getSimpleChannelContacts_args");

    private static final TField IDS_FIELD_DESC = new TField("ids", TType.LIST, (short)1);
    private static final TField STATUS_STICON_FALLBACK_DISABLED_FIELD_DESC = new TField("statusSticonFallbackDisabled", TType.BOOL, (short)2);

    private Vector ids;
    private boolean statusSticonFallbackDisabled;

    // isset id assignments
    private static final int __STATUSSTICONFALLBACKDISABLED_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getSimpleChannelContacts_args() {
    }

    public getSimpleChannelContacts_args(
      Vector ids,
      boolean statusSticonFallbackDisabled)
    {
      this();
      this.ids = ids;
      this.statusSticonFallbackDisabled = statusSticonFallbackDisabled;
      setStatusSticonFallbackDisabledIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSimpleChannelContacts_args(getSimpleChannelContacts_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetIds()) {
        Vector __this__ids = new Vector();
        for (Enumeration other_enum = other.ids.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__ids.addElement(other_element);
        }
        this.ids = __this__ids;
      }
      this.statusSticonFallbackDisabled = other.statusSticonFallbackDisabled;
    }

    public getSimpleChannelContacts_args deepCopy() {
      return new getSimpleChannelContacts_args(this);
    }

    public void clear() {
      this.ids = null;
      setStatusSticonFallbackDisabledIsSet(false);
      this.statusSticonFallbackDisabled = false;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public Enumeration getIdsEnumeration() {
      return (this.ids == null) ? null : this.ids.elements();
    }

    public void addToIds(String elem) {
      if (this.ids == null) {
        this.ids = new Vector();
      }
      this.ids.addElement(elem);
    }

    public Vector getIds() {
      return this.ids;
    }

    public void setIds(Vector ids) {
      this.ids = ids;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public boolean isStatusSticonFallbackDisabled() {
      return this.statusSticonFallbackDisabled;
    }

    public void setStatusSticonFallbackDisabled(boolean statusSticonFallbackDisabled) {
      this.statusSticonFallbackDisabled = statusSticonFallbackDisabled;
      setStatusSticonFallbackDisabledIsSet(true);
    }

    public void unsetStatusSticonFallbackDisabled() {
      __isset_vector[__STATUSSTICONFALLBACKDISABLED_ISSET_ID] = false;
    }

    /** Returns true if field statusSticonFallbackDisabled is set (has been assigned a value) and false otherwise */
    public boolean isSetStatusSticonFallbackDisabled() {
      return __isset_vector[__STATUSSTICONFALLBACKDISABLED_ISSET_ID];
    }

    public void setStatusSticonFallbackDisabledIsSet(boolean value) {
      __isset_vector[__STATUSSTICONFALLBACKDISABLED_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSimpleChannelContacts_args)
        return this.equals((getSimpleChannelContacts_args)that);
      return false;
    }

    public boolean equals(getSimpleChannelContacts_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      boolean this_present_statusSticonFallbackDisabled = true;
      boolean that_present_statusSticonFallbackDisabled = true;
      if (this_present_statusSticonFallbackDisabled || that_present_statusSticonFallbackDisabled) {
        if (!(this_present_statusSticonFallbackDisabled && that_present_statusSticonFallbackDisabled))
          return false;
        if (this.statusSticonFallbackDisabled != that.statusSticonFallbackDisabled)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getSimpleChannelContacts_args other = (getSimpleChannelContacts_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetIds(), other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetStatusSticonFallbackDisabled(), other.isSetStatusSticonFallbackDisabled());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatusSticonFallbackDisabled()) {
        lastComparison = TBaseHelper.compareTo(this.statusSticonFallbackDisabled, other.statusSticonFallbackDisabled);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // IDS
            if (field.type == TType.LIST) {
              {
                TList _list1352 = iprot.readListBegin();
                this.ids = new Vector(_list1352.size);
                for (int _i1353 = 0; _i1353 < _list1352.size; ++_i1353)
                {
                  String _elem1354;
                  _elem1354 = iprot.readString();
                  this.ids.addElement(_elem1354);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // STATUS_STICON_FALLBACK_DISABLED
            if (field.type == TType.BOOL) {
              this.statusSticonFallbackDisabled = iprot.readBool();
              setStatusSticonFallbackDisabledIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.ids != null) {
        oprot.writeFieldBegin(IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.ids.size()));
          for (Enumeration _iter1355_enum = this.ids.elements(); _iter1355_enum.hasMoreElements(); )           {
            String _iter1355 = (String)_iter1355_enum.nextElement();
            oprot.writeString(_iter1355);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_STICON_FALLBACK_DISABLED_FIELD_DESC);
      oprot.writeBool(this.statusSticonFallbackDisabled);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getSimpleChannelContacts_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("statusSticonFallbackDisabled:");
      sb.append(this.statusSticonFallbackDisabled);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSimpleChannelContacts_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getSimpleChannelContacts_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getSimpleChannelContacts_result() {
    }

    public getSimpleChannelContacts_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSimpleChannelContacts_result(getSimpleChannelContacts_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          SimpleChannelContact other_element = (SimpleChannelContact)other_enum.nextElement();
          __this__success.addElement(new SimpleChannelContact(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getSimpleChannelContacts_result deepCopy() {
      return new getSimpleChannelContacts_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(SimpleChannelContact elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSimpleChannelContacts_result)
        return this.equals((getSimpleChannelContacts_result)that);
      return false;
    }

    public boolean equals(getSimpleChannelContacts_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getSimpleChannelContacts_result other = (getSimpleChannelContacts_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list1356 = iprot.readListBegin();
                this.success = new Vector(_list1356.size);
                for (int _i1357 = 0; _i1357 < _list1356.size; ++_i1357)
                {
                  SimpleChannelContact _elem1358;
                  _elem1358 = new SimpleChannelContact();
                  _elem1358.read(iprot);
                  this.success.addElement(_elem1358);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter1359_enum = this.success.elements(); _iter1359_enum.hasMoreElements(); )           {
            SimpleChannelContact _iter1359 = (SimpleChannelContact)_iter1359_enum.nextElement();
            _iter1359.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getSimpleChannelContacts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUserLastSentMessageTimeStamp_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUserLastSentMessageTimeStamp_args");

    private static final TField MID_FIELD_DESC = new TField("mid", TType.STRING, (short)1);

    private String mid;

    // isset id assignments

    public getUserLastSentMessageTimeStamp_args() {
    }

    public getUserLastSentMessageTimeStamp_args(
      String mid)
    {
      this();
      this.mid = mid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserLastSentMessageTimeStamp_args(getUserLastSentMessageTimeStamp_args other) {
      if (other.isSetMid()) {
        this.mid = other.mid;
      }
    }

    public getUserLastSentMessageTimeStamp_args deepCopy() {
      return new getUserLastSentMessageTimeStamp_args(this);
    }

    public void clear() {
      this.mid = null;
    }

    public String getMid() {
      return this.mid;
    }

    public void setMid(String mid) {
      this.mid = mid;
    }

    public void unsetMid() {
      this.mid = null;
    }

    /** Returns true if field mid is set (has been assigned a value) and false otherwise */
    public boolean isSetMid() {
      return this.mid != null;
    }

    public void setMidIsSet(boolean value) {
      if (!value) {
        this.mid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserLastSentMessageTimeStamp_args)
        return this.equals((getUserLastSentMessageTimeStamp_args)that);
      return false;
    }

    public boolean equals(getUserLastSentMessageTimeStamp_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mid = true && this.isSetMid();
      boolean that_present_mid = true && that.isSetMid();
      if (this_present_mid || that_present_mid) {
        if (!(this_present_mid && that_present_mid))
          return false;
        if (!this.mid.equals(that.mid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUserLastSentMessageTimeStamp_args other = (getUserLastSentMessageTimeStamp_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetMid(), other.isSetMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMid()) {
        lastComparison = TBaseHelper.compareTo(this.mid, other.mid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // MID
            if (field.type == TType.STRING) {
              this.mid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.mid != null) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeString(this.mid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUserLastSentMessageTimeStamp_args(");
      boolean first = true;

      sb.append("mid:");
      if (this.mid == null) {
        sb.append("null");
      } else {
        sb.append(this.mid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUserLastSentMessageTimeStamp_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUserLastSentMessageTimeStamp_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I64, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private long success;
    private TalkException e;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getUserLastSentMessageTimeStamp_result() {
    }

    public getUserLastSentMessageTimeStamp_result(
      long success,
      TalkException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserLastSentMessageTimeStamp_result(getUserLastSentMessageTimeStamp_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getUserLastSentMessageTimeStamp_result deepCopy() {
      return new getUserLastSentMessageTimeStamp_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public void setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserLastSentMessageTimeStamp_result)
        return this.equals((getUserLastSentMessageTimeStamp_result)that);
      return false;
    }

    public boolean equals(getUserLastSentMessageTimeStamp_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUserLastSentMessageTimeStamp_result other = (getUserLastSentMessageTimeStamp_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUserLastSentMessageTimeStamp_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
