/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class GetSquareChatAnnouncementsResponse implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("GetSquareChatAnnouncementsResponse");

  private static final TField ANNOUNCEMENTS_FIELD_DESC = new TField("announcements", TType.LIST, (short)1);

  private Vector announcements;

  // isset id assignments

  public GetSquareChatAnnouncementsResponse() {
  }

  public GetSquareChatAnnouncementsResponse(
    Vector announcements)
  {
    this();
    this.announcements = announcements;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetSquareChatAnnouncementsResponse(GetSquareChatAnnouncementsResponse other) {
    if (other.isSetAnnouncements()) {
      Vector __this__announcements = new Vector();
      for (Enumeration other_enum = other.announcements.elements(); other_enum.hasMoreElements(); ) {
        SquareChatAnnouncement other_element = (SquareChatAnnouncement)other_enum.nextElement();
        __this__announcements.addElement(new SquareChatAnnouncement(other_element));
      }
      this.announcements = __this__announcements;
    }
  }

  public GetSquareChatAnnouncementsResponse deepCopy() {
    return new GetSquareChatAnnouncementsResponse(this);
  }

  public void clear() {
    this.announcements = null;
  }

  public int getAnnouncementsSize() {
    return (this.announcements == null) ? 0 : this.announcements.size();
  }

  public Enumeration getAnnouncementsEnumeration() {
    return (this.announcements == null) ? null : this.announcements.elements();
  }

  public void addToAnnouncements(SquareChatAnnouncement elem) {
    if (this.announcements == null) {
      this.announcements = new Vector();
    }
    this.announcements.addElement(elem);
  }

  public Vector getAnnouncements() {
    return this.announcements;
  }

  public void setAnnouncements(Vector announcements) {
    this.announcements = announcements;
  }

  public void unsetAnnouncements() {
    this.announcements = null;
  }

  /** Returns true if field announcements is set (has been assigned a value) and false otherwise */
  public boolean isSetAnnouncements() {
    return this.announcements != null;
  }

  public void setAnnouncementsIsSet(boolean value) {
    if (!value) {
      this.announcements = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetSquareChatAnnouncementsResponse)
      return this.equals((GetSquareChatAnnouncementsResponse)that);
    return false;
  }

  public boolean equals(GetSquareChatAnnouncementsResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_announcements = true && this.isSetAnnouncements();
    boolean that_present_announcements = true && that.isSetAnnouncements();
    if (this_present_announcements || that_present_announcements) {
      if (!(this_present_announcements && that_present_announcements))
        return false;
      if (!this.announcements.equals(that.announcements))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    GetSquareChatAnnouncementsResponse other = (GetSquareChatAnnouncementsResponse)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetAnnouncements(), other.isSetAnnouncements());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnnouncements()) {
      lastComparison = TBaseHelper.compareTo(this.announcements, other.announcements);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ANNOUNCEMENTS
          if (field.type == TType.LIST) {
            {
              TList _list499 = iprot.readListBegin();
              this.announcements = new Vector(_list499.size);
              for (int _i500 = 0; _i500 < _list499.size; ++_i500)
              {
                SquareChatAnnouncement _elem501;
                _elem501 = new SquareChatAnnouncement();
                _elem501.read(iprot);
                this.announcements.addElement(_elem501);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.announcements != null) {
      oprot.writeFieldBegin(ANNOUNCEMENTS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.announcements.size()));
        for (Enumeration _iter502_enum = this.announcements.elements(); _iter502_enum.hasMoreElements(); )         {
          SquareChatAnnouncement _iter502 = (SquareChatAnnouncement)_iter502_enum.nextElement();
          _iter502.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("GetSquareChatAnnouncementsResponse(");
    boolean first = true;

    sb.append("announcements:");
    if (this.announcements == null) {
      sb.append("null");
    } else {
      sb.append(this.announcements);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

