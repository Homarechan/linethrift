/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class PaidCallUserRate implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("PaidCallUserRate");

  private static final TField COUNTRY_CODE_FIELD_DESC = new TField("countryCode", TType.STRING, (short)1);
  private static final TField RATE_FIELD_DESC = new TField("rate", TType.I32, (short)2);
  private static final TField RATE_DIVISION_FIELD_DESC = new TField("rateDivision", TType.STRING, (short)3);
  private static final TField RATE_NAME_FIELD_DESC = new TField("rateName", TType.STRING, (short)4);

  private String countryCode;
  private int rate;
  private String rateDivision;
  private String rateName;

  // isset id assignments
  private static final int __RATE_ISSET_ID = 0;
  private boolean[] __isset_vector = new boolean[1];

  public PaidCallUserRate() {
  }

  public PaidCallUserRate(
    String countryCode,
    int rate,
    String rateDivision,
    String rateName)
  {
    this();
    this.countryCode = countryCode;
    this.rate = rate;
    setRateIsSet(true);
    this.rateDivision = rateDivision;
    this.rateName = rateName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PaidCallUserRate(PaidCallUserRate other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    if (other.isSetCountryCode()) {
      this.countryCode = other.countryCode;
    }
    this.rate = other.rate;
    if (other.isSetRateDivision()) {
      this.rateDivision = other.rateDivision;
    }
    if (other.isSetRateName()) {
      this.rateName = other.rateName;
    }
  }

  public PaidCallUserRate deepCopy() {
    return new PaidCallUserRate(this);
  }

  public void clear() {
    this.countryCode = null;
    setRateIsSet(false);
    this.rate = 0;
    this.rateDivision = null;
    this.rateName = null;
  }

  public String getCountryCode() {
    return this.countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }

  public void unsetCountryCode() {
    this.countryCode = null;
  }

  /** Returns true if field countryCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCountryCode() {
    return this.countryCode != null;
  }

  public void setCountryCodeIsSet(boolean value) {
    if (!value) {
      this.countryCode = null;
    }
  }

  public int getRate() {
    return this.rate;
  }

  public void setRate(int rate) {
    this.rate = rate;
    setRateIsSet(true);
  }

  public void unsetRate() {
    __isset_vector[__RATE_ISSET_ID] = false;
  }

  /** Returns true if field rate is set (has been assigned a value) and false otherwise */
  public boolean isSetRate() {
    return __isset_vector[__RATE_ISSET_ID];
  }

  public void setRateIsSet(boolean value) {
    __isset_vector[__RATE_ISSET_ID] = value;
  }

  public String getRateDivision() {
    return this.rateDivision;
  }

  public void setRateDivision(String rateDivision) {
    this.rateDivision = rateDivision;
  }

  public void unsetRateDivision() {
    this.rateDivision = null;
  }

  /** Returns true if field rateDivision is set (has been assigned a value) and false otherwise */
  public boolean isSetRateDivision() {
    return this.rateDivision != null;
  }

  public void setRateDivisionIsSet(boolean value) {
    if (!value) {
      this.rateDivision = null;
    }
  }

  public String getRateName() {
    return this.rateName;
  }

  public void setRateName(String rateName) {
    this.rateName = rateName;
  }

  public void unsetRateName() {
    this.rateName = null;
  }

  /** Returns true if field rateName is set (has been assigned a value) and false otherwise */
  public boolean isSetRateName() {
    return this.rateName != null;
  }

  public void setRateNameIsSet(boolean value) {
    if (!value) {
      this.rateName = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PaidCallUserRate)
      return this.equals((PaidCallUserRate)that);
    return false;
  }

  public boolean equals(PaidCallUserRate that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_countryCode = true && this.isSetCountryCode();
    boolean that_present_countryCode = true && that.isSetCountryCode();
    if (this_present_countryCode || that_present_countryCode) {
      if (!(this_present_countryCode && that_present_countryCode))
        return false;
      if (!this.countryCode.equals(that.countryCode))
        return false;
    }

    boolean this_present_rate = true;
    boolean that_present_rate = true;
    if (this_present_rate || that_present_rate) {
      if (!(this_present_rate && that_present_rate))
        return false;
      if (this.rate != that.rate)
        return false;
    }

    boolean this_present_rateDivision = true && this.isSetRateDivision();
    boolean that_present_rateDivision = true && that.isSetRateDivision();
    if (this_present_rateDivision || that_present_rateDivision) {
      if (!(this_present_rateDivision && that_present_rateDivision))
        return false;
      if (!this.rateDivision.equals(that.rateDivision))
        return false;
    }

    boolean this_present_rateName = true && this.isSetRateName();
    boolean that_present_rateName = true && that.isSetRateName();
    if (this_present_rateName || that_present_rateName) {
      if (!(this_present_rateName && that_present_rateName))
        return false;
      if (!this.rateName.equals(that.rateName))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    PaidCallUserRate other = (PaidCallUserRate)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetCountryCode(), other.isSetCountryCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountryCode()) {
      lastComparison = TBaseHelper.compareTo(this.countryCode, other.countryCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetRate(), other.isSetRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRate()) {
      lastComparison = TBaseHelper.compareTo(this.rate, other.rate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetRateDivision(), other.isSetRateDivision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRateDivision()) {
      lastComparison = TBaseHelper.compareTo(this.rateDivision, other.rateDivision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetRateName(), other.isSetRateName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRateName()) {
      lastComparison = TBaseHelper.compareTo(this.rateName, other.rateName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // COUNTRY_CODE
          if (field.type == TType.STRING) {
            this.countryCode = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // RATE
          if (field.type == TType.I32) {
            this.rate = iprot.readI32();
            setRateIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // RATE_DIVISION
          if (field.type == TType.STRING) {
            this.rateDivision = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // RATE_NAME
          if (field.type == TType.STRING) {
            this.rateName = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.countryCode != null) {
      oprot.writeFieldBegin(COUNTRY_CODE_FIELD_DESC);
      oprot.writeString(this.countryCode);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(RATE_FIELD_DESC);
    oprot.writeI32(this.rate);
    oprot.writeFieldEnd();
    if (this.rateDivision != null) {
      oprot.writeFieldBegin(RATE_DIVISION_FIELD_DESC);
      oprot.writeString(this.rateDivision);
      oprot.writeFieldEnd();
    }
    if (this.rateName != null) {
      oprot.writeFieldBegin(RATE_NAME_FIELD_DESC);
      oprot.writeString(this.rateName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("PaidCallUserRate(");
    boolean first = true;

    sb.append("countryCode:");
    if (this.countryCode == null) {
      sb.append("null");
    } else {
      sb.append(this.countryCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rate:");
    sb.append(this.rate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rateDivision:");
    if (this.rateDivision == null) {
      sb.append("null");
    } else {
      sb.append(this.rateDivision);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rateName:");
    if (this.rateName == null) {
      sb.append("null");
    } else {
      sb.append(this.rateName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

