/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class GetJoinedSquaresResponse implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("GetJoinedSquaresResponse");

  private static final TField SQUARES_FIELD_DESC = new TField("squares", TType.LIST, (short)1);
  private static final TField MEMBERS_FIELD_DESC = new TField("members", TType.MAP, (short)2);
  private static final TField AUTHORITIES_FIELD_DESC = new TField("authorities", TType.MAP, (short)3);
  private static final TField STATUSES_FIELD_DESC = new TField("statuses", TType.MAP, (short)4);
  private static final TField CONTINUATION_TOKEN_FIELD_DESC = new TField("continuationToken", TType.STRING, (short)5);
  private static final TField NOTE_STATUSES_FIELD_DESC = new TField("noteStatuses", TType.MAP, (short)6);

  private Vector squares;
  private Hashtable members;
  private Hashtable authorities;
  private Hashtable statuses;
  private String continuationToken;
  private Hashtable noteStatuses;

  // isset id assignments

  public GetJoinedSquaresResponse() {
  }

  public GetJoinedSquaresResponse(
    Vector squares,
    Hashtable members,
    Hashtable authorities,
    Hashtable statuses,
    String continuationToken,
    Hashtable noteStatuses)
  {
    this();
    this.squares = squares;
    this.members = members;
    this.authorities = authorities;
    this.statuses = statuses;
    this.continuationToken = continuationToken;
    this.noteStatuses = noteStatuses;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetJoinedSquaresResponse(GetJoinedSquaresResponse other) {
    if (other.isSetSquares()) {
      Vector __this__squares = new Vector();
      for (Enumeration other_enum = other.squares.elements(); other_enum.hasMoreElements(); ) {
        Square other_element = (Square)other_enum.nextElement();
        __this__squares.addElement(new Square(other_element));
      }
      this.squares = __this__squares;
    }
    if (other.isSetMembers()) {
      Hashtable __this__members = new Hashtable();
      for (Enumeration other_enum = other.members.keys(); other_enum.hasMoreElements(); ) {

        String other_element_key = (String)other_enum.nextElement();
        SquareMember other_element_value = (SquareMember)other.members.get(other_element_key);

        String __this__members_copy_key = other_element_key;

        SquareMember __this__members_copy_value = new SquareMember(other_element_value);

        __this__members.put(__this__members_copy_key, __this__members_copy_value);
      }
      this.members = __this__members;
    }
    if (other.isSetAuthorities()) {
      Hashtable __this__authorities = new Hashtable();
      for (Enumeration other_enum = other.authorities.keys(); other_enum.hasMoreElements(); ) {

        String other_element_key = (String)other_enum.nextElement();
        SquareAuthority other_element_value = (SquareAuthority)other.authorities.get(other_element_key);

        String __this__authorities_copy_key = other_element_key;

        SquareAuthority __this__authorities_copy_value = new SquareAuthority(other_element_value);

        __this__authorities.put(__this__authorities_copy_key, __this__authorities_copy_value);
      }
      this.authorities = __this__authorities;
    }
    if (other.isSetStatuses()) {
      Hashtable __this__statuses = new Hashtable();
      for (Enumeration other_enum = other.statuses.keys(); other_enum.hasMoreElements(); ) {

        String other_element_key = (String)other_enum.nextElement();
        SquareStatus other_element_value = (SquareStatus)other.statuses.get(other_element_key);

        String __this__statuses_copy_key = other_element_key;

        SquareStatus __this__statuses_copy_value = new SquareStatus(other_element_value);

        __this__statuses.put(__this__statuses_copy_key, __this__statuses_copy_value);
      }
      this.statuses = __this__statuses;
    }
    if (other.isSetContinuationToken()) {
      this.continuationToken = other.continuationToken;
    }
    if (other.isSetNoteStatuses()) {
      Hashtable __this__noteStatuses = new Hashtable();
      for (Enumeration other_enum = other.noteStatuses.keys(); other_enum.hasMoreElements(); ) {

        String other_element_key = (String)other_enum.nextElement();
        NoteStatus other_element_value = (NoteStatus)other.noteStatuses.get(other_element_key);

        String __this__noteStatuses_copy_key = other_element_key;

        NoteStatus __this__noteStatuses_copy_value = new NoteStatus(other_element_value);

        __this__noteStatuses.put(__this__noteStatuses_copy_key, __this__noteStatuses_copy_value);
      }
      this.noteStatuses = __this__noteStatuses;
    }
  }

  public GetJoinedSquaresResponse deepCopy() {
    return new GetJoinedSquaresResponse(this);
  }

  public void clear() {
    this.squares = null;
    this.members = null;
    this.authorities = null;
    this.statuses = null;
    this.continuationToken = null;
    this.noteStatuses = null;
  }

  public int getSquaresSize() {
    return (this.squares == null) ? 0 : this.squares.size();
  }

  public Enumeration getSquaresEnumeration() {
    return (this.squares == null) ? null : this.squares.elements();
  }

  public void addToSquares(Square elem) {
    if (this.squares == null) {
      this.squares = new Vector();
    }
    this.squares.addElement(elem);
  }

  public Vector getSquares() {
    return this.squares;
  }

  public void setSquares(Vector squares) {
    this.squares = squares;
  }

  public void unsetSquares() {
    this.squares = null;
  }

  /** Returns true if field squares is set (has been assigned a value) and false otherwise */
  public boolean isSetSquares() {
    return this.squares != null;
  }

  public void setSquaresIsSet(boolean value) {
    if (!value) {
      this.squares = null;
    }
  }

  public int getMembersSize() {
    return (this.members == null) ? 0 : this.members.size();
  }

  public void putToMembers(String key, SquareMember val) {
    if (this.members == null) {
      this.members = new Hashtable();
    }
    this.members.put(key, val);
  }

  public Hashtable getMembers() {
    return this.members;
  }

  public void setMembers(Hashtable members) {
    this.members = members;
  }

  public void unsetMembers() {
    this.members = null;
  }

  /** Returns true if field members is set (has been assigned a value) and false otherwise */
  public boolean isSetMembers() {
    return this.members != null;
  }

  public void setMembersIsSet(boolean value) {
    if (!value) {
      this.members = null;
    }
  }

  public int getAuthoritiesSize() {
    return (this.authorities == null) ? 0 : this.authorities.size();
  }

  public void putToAuthorities(String key, SquareAuthority val) {
    if (this.authorities == null) {
      this.authorities = new Hashtable();
    }
    this.authorities.put(key, val);
  }

  public Hashtable getAuthorities() {
    return this.authorities;
  }

  public void setAuthorities(Hashtable authorities) {
    this.authorities = authorities;
  }

  public void unsetAuthorities() {
    this.authorities = null;
  }

  /** Returns true if field authorities is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorities() {
    return this.authorities != null;
  }

  public void setAuthoritiesIsSet(boolean value) {
    if (!value) {
      this.authorities = null;
    }
  }

  public int getStatusesSize() {
    return (this.statuses == null) ? 0 : this.statuses.size();
  }

  public void putToStatuses(String key, SquareStatus val) {
    if (this.statuses == null) {
      this.statuses = new Hashtable();
    }
    this.statuses.put(key, val);
  }

  public Hashtable getStatuses() {
    return this.statuses;
  }

  public void setStatuses(Hashtable statuses) {
    this.statuses = statuses;
  }

  public void unsetStatuses() {
    this.statuses = null;
  }

  /** Returns true if field statuses is set (has been assigned a value) and false otherwise */
  public boolean isSetStatuses() {
    return this.statuses != null;
  }

  public void setStatusesIsSet(boolean value) {
    if (!value) {
      this.statuses = null;
    }
  }

  public String getContinuationToken() {
    return this.continuationToken;
  }

  public void setContinuationToken(String continuationToken) {
    this.continuationToken = continuationToken;
  }

  public void unsetContinuationToken() {
    this.continuationToken = null;
  }

  /** Returns true if field continuationToken is set (has been assigned a value) and false otherwise */
  public boolean isSetContinuationToken() {
    return this.continuationToken != null;
  }

  public void setContinuationTokenIsSet(boolean value) {
    if (!value) {
      this.continuationToken = null;
    }
  }

  public int getNoteStatusesSize() {
    return (this.noteStatuses == null) ? 0 : this.noteStatuses.size();
  }

  public void putToNoteStatuses(String key, NoteStatus val) {
    if (this.noteStatuses == null) {
      this.noteStatuses = new Hashtable();
    }
    this.noteStatuses.put(key, val);
  }

  public Hashtable getNoteStatuses() {
    return this.noteStatuses;
  }

  public void setNoteStatuses(Hashtable noteStatuses) {
    this.noteStatuses = noteStatuses;
  }

  public void unsetNoteStatuses() {
    this.noteStatuses = null;
  }

  /** Returns true if field noteStatuses is set (has been assigned a value) and false otherwise */
  public boolean isSetNoteStatuses() {
    return this.noteStatuses != null;
  }

  public void setNoteStatusesIsSet(boolean value) {
    if (!value) {
      this.noteStatuses = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetJoinedSquaresResponse)
      return this.equals((GetJoinedSquaresResponse)that);
    return false;
  }

  public boolean equals(GetJoinedSquaresResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_squares = true && this.isSetSquares();
    boolean that_present_squares = true && that.isSetSquares();
    if (this_present_squares || that_present_squares) {
      if (!(this_present_squares && that_present_squares))
        return false;
      if (!this.squares.equals(that.squares))
        return false;
    }

    boolean this_present_members = true && this.isSetMembers();
    boolean that_present_members = true && that.isSetMembers();
    if (this_present_members || that_present_members) {
      if (!(this_present_members && that_present_members))
        return false;
      if (!this.members.equals(that.members))
        return false;
    }

    boolean this_present_authorities = true && this.isSetAuthorities();
    boolean that_present_authorities = true && that.isSetAuthorities();
    if (this_present_authorities || that_present_authorities) {
      if (!(this_present_authorities && that_present_authorities))
        return false;
      if (!this.authorities.equals(that.authorities))
        return false;
    }

    boolean this_present_statuses = true && this.isSetStatuses();
    boolean that_present_statuses = true && that.isSetStatuses();
    if (this_present_statuses || that_present_statuses) {
      if (!(this_present_statuses && that_present_statuses))
        return false;
      if (!this.statuses.equals(that.statuses))
        return false;
    }

    boolean this_present_continuationToken = true && this.isSetContinuationToken();
    boolean that_present_continuationToken = true && that.isSetContinuationToken();
    if (this_present_continuationToken || that_present_continuationToken) {
      if (!(this_present_continuationToken && that_present_continuationToken))
        return false;
      if (!this.continuationToken.equals(that.continuationToken))
        return false;
    }

    boolean this_present_noteStatuses = true && this.isSetNoteStatuses();
    boolean that_present_noteStatuses = true && that.isSetNoteStatuses();
    if (this_present_noteStatuses || that_present_noteStatuses) {
      if (!(this_present_noteStatuses && that_present_noteStatuses))
        return false;
      if (!this.noteStatuses.equals(that.noteStatuses))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    GetJoinedSquaresResponse other = (GetJoinedSquaresResponse)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetSquares(), other.isSetSquares());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSquares()) {
      lastComparison = TBaseHelper.compareTo(this.squares, other.squares);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetMembers(), other.isSetMembers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMembers()) {
      lastComparison = TBaseHelper.compareTo(this.members, other.members);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetAuthorities(), other.isSetAuthorities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorities()) {
      lastComparison = TBaseHelper.compareTo(this.authorities, other.authorities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetStatuses(), other.isSetStatuses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatuses()) {
      lastComparison = TBaseHelper.compareTo(this.statuses, other.statuses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetContinuationToken(), other.isSetContinuationToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContinuationToken()) {
      lastComparison = TBaseHelper.compareTo(this.continuationToken, other.continuationToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetNoteStatuses(), other.isSetNoteStatuses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoteStatuses()) {
      lastComparison = TBaseHelper.compareTo(this.noteStatuses, other.noteStatuses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // SQUARES
          if (field.type == TType.LIST) {
            {
              TList _list296 = iprot.readListBegin();
              this.squares = new Vector(_list296.size);
              for (int _i297 = 0; _i297 < _list296.size; ++_i297)
              {
                Square _elem298;
                _elem298 = new Square();
                _elem298.read(iprot);
                this.squares.addElement(_elem298);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // MEMBERS
          if (field.type == TType.MAP) {
            {
              TMap _map299 = iprot.readMapBegin();
              this.members = new Hashtable(2*_map299.size);
              for (int _i300 = 0; _i300 < _map299.size; ++_i300)
              {
                String _key301;
                SquareMember _val302;
                _key301 = iprot.readString();
                _val302 = new SquareMember();
                _val302.read(iprot);
                this.members.put(_key301, _val302);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // AUTHORITIES
          if (field.type == TType.MAP) {
            {
              TMap _map303 = iprot.readMapBegin();
              this.authorities = new Hashtable(2*_map303.size);
              for (int _i304 = 0; _i304 < _map303.size; ++_i304)
              {
                String _key305;
                SquareAuthority _val306;
                _key305 = iprot.readString();
                _val306 = new SquareAuthority();
                _val306.read(iprot);
                this.authorities.put(_key305, _val306);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // STATUSES
          if (field.type == TType.MAP) {
            {
              TMap _map307 = iprot.readMapBegin();
              this.statuses = new Hashtable(2*_map307.size);
              for (int _i308 = 0; _i308 < _map307.size; ++_i308)
              {
                String _key309;
                SquareStatus _val310;
                _key309 = iprot.readString();
                _val310 = new SquareStatus();
                _val310.read(iprot);
                this.statuses.put(_key309, _val310);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // CONTINUATION_TOKEN
          if (field.type == TType.STRING) {
            this.continuationToken = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // NOTE_STATUSES
          if (field.type == TType.MAP) {
            {
              TMap _map311 = iprot.readMapBegin();
              this.noteStatuses = new Hashtable(2*_map311.size);
              for (int _i312 = 0; _i312 < _map311.size; ++_i312)
              {
                String _key313;
                NoteStatus _val314;
                _key313 = iprot.readString();
                _val314 = new NoteStatus();
                _val314.read(iprot);
                this.noteStatuses.put(_key313, _val314);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.squares != null) {
      oprot.writeFieldBegin(SQUARES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.squares.size()));
        for (Enumeration _iter315_enum = this.squares.elements(); _iter315_enum.hasMoreElements(); )         {
          Square _iter315 = (Square)_iter315_enum.nextElement();
          _iter315.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.members != null) {
      oprot.writeFieldBegin(MEMBERS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.members.size()));
        for (Enumeration _iter316_enum = this.members.keys(); _iter316_enum.hasMoreElements(); )         {
          String _iter316 = (String)_iter316_enum.nextElement();
          oprot.writeString(_iter316);
          ((SquareMember)this.members.get(_iter316)).write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.authorities != null) {
      oprot.writeFieldBegin(AUTHORITIES_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.authorities.size()));
        for (Enumeration _iter317_enum = this.authorities.keys(); _iter317_enum.hasMoreElements(); )         {
          String _iter317 = (String)_iter317_enum.nextElement();
          oprot.writeString(_iter317);
          ((SquareAuthority)this.authorities.get(_iter317)).write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.statuses != null) {
      oprot.writeFieldBegin(STATUSES_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.statuses.size()));
        for (Enumeration _iter318_enum = this.statuses.keys(); _iter318_enum.hasMoreElements(); )         {
          String _iter318 = (String)_iter318_enum.nextElement();
          oprot.writeString(_iter318);
          ((SquareStatus)this.statuses.get(_iter318)).write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.continuationToken != null) {
      oprot.writeFieldBegin(CONTINUATION_TOKEN_FIELD_DESC);
      oprot.writeString(this.continuationToken);
      oprot.writeFieldEnd();
    }
    if (this.noteStatuses != null) {
      oprot.writeFieldBegin(NOTE_STATUSES_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.noteStatuses.size()));
        for (Enumeration _iter319_enum = this.noteStatuses.keys(); _iter319_enum.hasMoreElements(); )         {
          String _iter319 = (String)_iter319_enum.nextElement();
          oprot.writeString(_iter319);
          ((NoteStatus)this.noteStatuses.get(_iter319)).write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("GetJoinedSquaresResponse(");
    boolean first = true;

    sb.append("squares:");
    if (this.squares == null) {
      sb.append("null");
    } else {
      sb.append(this.squares);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("members:");
    if (this.members == null) {
      sb.append("null");
    } else {
      sb.append(this.members);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("authorities:");
    if (this.authorities == null) {
      sb.append("null");
    } else {
      sb.append(this.authorities);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("statuses:");
    if (this.statuses == null) {
      sb.append("null");
    } else {
      sb.append(this.statuses);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("continuationToken:");
    if (this.continuationToken == null) {
      sb.append("null");
    } else {
      sb.append(this.continuationToken);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("noteStatuses:");
    if (this.noteStatuses == null) {
      sb.append("null");
    } else {
      sb.append(this.noteStatuses);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

