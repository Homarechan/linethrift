/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class ChatRoomAnnouncementContents implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("ChatRoomAnnouncementContents");

  private static final TField DISPLAY_FIELDS_FIELD_DESC = new TField("displayFields", TType.I32, (short)1);
  private static final TField TEXT_FIELD_DESC = new TField("text", TType.STRING, (short)2);
  private static final TField LINK_FIELD_DESC = new TField("link", TType.STRING, (short)3);
  private static final TField THUMBNAIL_FIELD_DESC = new TField("thumbnail", TType.STRING, (short)4);

  private int displayFields;
  private String text;
  private String link;
  private String thumbnail;

  // isset id assignments
  private static final int __DISPLAYFIELDS_ISSET_ID = 0;
  private boolean[] __isset_vector = new boolean[1];

  public ChatRoomAnnouncementContents() {
  }

  public ChatRoomAnnouncementContents(
    int displayFields,
    String text,
    String link,
    String thumbnail)
  {
    this();
    this.displayFields = displayFields;
    setDisplayFieldsIsSet(true);
    this.text = text;
    this.link = link;
    this.thumbnail = thumbnail;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChatRoomAnnouncementContents(ChatRoomAnnouncementContents other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    this.displayFields = other.displayFields;
    if (other.isSetText()) {
      this.text = other.text;
    }
    if (other.isSetLink()) {
      this.link = other.link;
    }
    if (other.isSetThumbnail()) {
      this.thumbnail = other.thumbnail;
    }
  }

  public ChatRoomAnnouncementContents deepCopy() {
    return new ChatRoomAnnouncementContents(this);
  }

  public void clear() {
    setDisplayFieldsIsSet(false);
    this.displayFields = 0;
    this.text = null;
    this.link = null;
    this.thumbnail = null;
  }

  public int getDisplayFields() {
    return this.displayFields;
  }

  public void setDisplayFields(int displayFields) {
    this.displayFields = displayFields;
    setDisplayFieldsIsSet(true);
  }

  public void unsetDisplayFields() {
    __isset_vector[__DISPLAYFIELDS_ISSET_ID] = false;
  }

  /** Returns true if field displayFields is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayFields() {
    return __isset_vector[__DISPLAYFIELDS_ISSET_ID];
  }

  public void setDisplayFieldsIsSet(boolean value) {
    __isset_vector[__DISPLAYFIELDS_ISSET_ID] = value;
  }

  public String getText() {
    return this.text;
  }

  public void setText(String text) {
    this.text = text;
  }

  public void unsetText() {
    this.text = null;
  }

  /** Returns true if field text is set (has been assigned a value) and false otherwise */
  public boolean isSetText() {
    return this.text != null;
  }

  public void setTextIsSet(boolean value) {
    if (!value) {
      this.text = null;
    }
  }

  public String getLink() {
    return this.link;
  }

  public void setLink(String link) {
    this.link = link;
  }

  public void unsetLink() {
    this.link = null;
  }

  /** Returns true if field link is set (has been assigned a value) and false otherwise */
  public boolean isSetLink() {
    return this.link != null;
  }

  public void setLinkIsSet(boolean value) {
    if (!value) {
      this.link = null;
    }
  }

  public String getThumbnail() {
    return this.thumbnail;
  }

  public void setThumbnail(String thumbnail) {
    this.thumbnail = thumbnail;
  }

  public void unsetThumbnail() {
    this.thumbnail = null;
  }

  /** Returns true if field thumbnail is set (has been assigned a value) and false otherwise */
  public boolean isSetThumbnail() {
    return this.thumbnail != null;
  }

  public void setThumbnailIsSet(boolean value) {
    if (!value) {
      this.thumbnail = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ChatRoomAnnouncementContents)
      return this.equals((ChatRoomAnnouncementContents)that);
    return false;
  }

  public boolean equals(ChatRoomAnnouncementContents that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_displayFields = true;
    boolean that_present_displayFields = true;
    if (this_present_displayFields || that_present_displayFields) {
      if (!(this_present_displayFields && that_present_displayFields))
        return false;
      if (this.displayFields != that.displayFields)
        return false;
    }

    boolean this_present_text = true && this.isSetText();
    boolean that_present_text = true && that.isSetText();
    if (this_present_text || that_present_text) {
      if (!(this_present_text && that_present_text))
        return false;
      if (!this.text.equals(that.text))
        return false;
    }

    boolean this_present_link = true && this.isSetLink();
    boolean that_present_link = true && that.isSetLink();
    if (this_present_link || that_present_link) {
      if (!(this_present_link && that_present_link))
        return false;
      if (!this.link.equals(that.link))
        return false;
    }

    boolean this_present_thumbnail = true && this.isSetThumbnail();
    boolean that_present_thumbnail = true && that.isSetThumbnail();
    if (this_present_thumbnail || that_present_thumbnail) {
      if (!(this_present_thumbnail && that_present_thumbnail))
        return false;
      if (!this.thumbnail.equals(that.thumbnail))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    ChatRoomAnnouncementContents other = (ChatRoomAnnouncementContents)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetDisplayFields(), other.isSetDisplayFields());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayFields()) {
      lastComparison = TBaseHelper.compareTo(this.displayFields, other.displayFields);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetText(), other.isSetText());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetText()) {
      lastComparison = TBaseHelper.compareTo(this.text, other.text);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetLink(), other.isSetLink());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLink()) {
      lastComparison = TBaseHelper.compareTo(this.link, other.link);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetThumbnail(), other.isSetThumbnail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThumbnail()) {
      lastComparison = TBaseHelper.compareTo(this.thumbnail, other.thumbnail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // DISPLAY_FIELDS
          if (field.type == TType.I32) {
            this.displayFields = iprot.readI32();
            setDisplayFieldsIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // TEXT
          if (field.type == TType.STRING) {
            this.text = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // LINK
          if (field.type == TType.STRING) {
            this.link = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // THUMBNAIL
          if (field.type == TType.STRING) {
            this.thumbnail = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(DISPLAY_FIELDS_FIELD_DESC);
    oprot.writeI32(this.displayFields);
    oprot.writeFieldEnd();
    if (this.text != null) {
      oprot.writeFieldBegin(TEXT_FIELD_DESC);
      oprot.writeString(this.text);
      oprot.writeFieldEnd();
    }
    if (this.link != null) {
      oprot.writeFieldBegin(LINK_FIELD_DESC);
      oprot.writeString(this.link);
      oprot.writeFieldEnd();
    }
    if (this.thumbnail != null) {
      oprot.writeFieldBegin(THUMBNAIL_FIELD_DESC);
      oprot.writeString(this.thumbnail);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("ChatRoomAnnouncementContents(");
    boolean first = true;

    sb.append("displayFields:");
    sb.append(this.displayFields);
    first = false;
    if (!first) sb.append(", ");
    sb.append("text:");
    if (this.text == null) {
      sb.append("null");
    } else {
      sb.append(this.text);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("link:");
    if (this.link == null) {
      sb.append("null");
    } else {
      sb.append(this.link);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("thumbnail:");
    if (this.thumbnail == null) {
      sb.append("null");
    } else {
      sb.append(this.thumbnail);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

