/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class SearchSquaresResponse implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("SearchSquaresResponse");

  private static final TField SQUARES_FIELD_DESC = new TField("squares", TType.LIST, (short)1);
  private static final TField SQUARE_STATUSES_FIELD_DESC = new TField("squareStatuses", TType.MAP, (short)2);
  private static final TField MY_MEMBERSHIPS_FIELD_DESC = new TField("myMemberships", TType.MAP, (short)3);
  private static final TField CONTINUATION_TOKEN_FIELD_DESC = new TField("continuationToken", TType.STRING, (short)4);
  private static final TField NOTE_STATUSES_FIELD_DESC = new TField("noteStatuses", TType.MAP, (short)5);

  private Vector squares;
  private Hashtable squareStatuses;
  private Hashtable myMemberships;
  private String continuationToken;
  private Hashtable noteStatuses;

  // isset id assignments

  public SearchSquaresResponse() {
  }

  public SearchSquaresResponse(
    Vector squares,
    Hashtable squareStatuses,
    Hashtable myMemberships,
    String continuationToken,
    Hashtable noteStatuses)
  {
    this();
    this.squares = squares;
    this.squareStatuses = squareStatuses;
    this.myMemberships = myMemberships;
    this.continuationToken = continuationToken;
    this.noteStatuses = noteStatuses;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SearchSquaresResponse(SearchSquaresResponse other) {
    if (other.isSetSquares()) {
      Vector __this__squares = new Vector();
      for (Enumeration other_enum = other.squares.elements(); other_enum.hasMoreElements(); ) {
        Square other_element = (Square)other_enum.nextElement();
        __this__squares.addElement(new Square(other_element));
      }
      this.squares = __this__squares;
    }
    if (other.isSetSquareStatuses()) {
      Hashtable __this__squareStatuses = new Hashtable();
      for (Enumeration other_enum = other.squareStatuses.keys(); other_enum.hasMoreElements(); ) {

        String other_element_key = (String)other_enum.nextElement();
        SquareStatus other_element_value = (SquareStatus)other.squareStatuses.get(other_element_key);

        String __this__squareStatuses_copy_key = other_element_key;

        SquareStatus __this__squareStatuses_copy_value = new SquareStatus(other_element_value);

        __this__squareStatuses.put(__this__squareStatuses_copy_key, __this__squareStatuses_copy_value);
      }
      this.squareStatuses = __this__squareStatuses;
    }
    if (other.isSetMyMemberships()) {
      Hashtable __this__myMemberships = new Hashtable();
      for (Enumeration other_enum = other.myMemberships.keys(); other_enum.hasMoreElements(); ) {

        String other_element_key = (String)other_enum.nextElement();
        SquareMember other_element_value = (SquareMember)other.myMemberships.get(other_element_key);

        String __this__myMemberships_copy_key = other_element_key;

        SquareMember __this__myMemberships_copy_value = new SquareMember(other_element_value);

        __this__myMemberships.put(__this__myMemberships_copy_key, __this__myMemberships_copy_value);
      }
      this.myMemberships = __this__myMemberships;
    }
    if (other.isSetContinuationToken()) {
      this.continuationToken = other.continuationToken;
    }
    if (other.isSetNoteStatuses()) {
      Hashtable __this__noteStatuses = new Hashtable();
      for (Enumeration other_enum = other.noteStatuses.keys(); other_enum.hasMoreElements(); ) {

        String other_element_key = (String)other_enum.nextElement();
        NoteStatus other_element_value = (NoteStatus)other.noteStatuses.get(other_element_key);

        String __this__noteStatuses_copy_key = other_element_key;

        NoteStatus __this__noteStatuses_copy_value = new NoteStatus(other_element_value);

        __this__noteStatuses.put(__this__noteStatuses_copy_key, __this__noteStatuses_copy_value);
      }
      this.noteStatuses = __this__noteStatuses;
    }
  }

  public SearchSquaresResponse deepCopy() {
    return new SearchSquaresResponse(this);
  }

  public void clear() {
    this.squares = null;
    this.squareStatuses = null;
    this.myMemberships = null;
    this.continuationToken = null;
    this.noteStatuses = null;
  }

  public int getSquaresSize() {
    return (this.squares == null) ? 0 : this.squares.size();
  }

  public Enumeration getSquaresEnumeration() {
    return (this.squares == null) ? null : this.squares.elements();
  }

  public void addToSquares(Square elem) {
    if (this.squares == null) {
      this.squares = new Vector();
    }
    this.squares.addElement(elem);
  }

  public Vector getSquares() {
    return this.squares;
  }

  public void setSquares(Vector squares) {
    this.squares = squares;
  }

  public void unsetSquares() {
    this.squares = null;
  }

  /** Returns true if field squares is set (has been assigned a value) and false otherwise */
  public boolean isSetSquares() {
    return this.squares != null;
  }

  public void setSquaresIsSet(boolean value) {
    if (!value) {
      this.squares = null;
    }
  }

  public int getSquareStatusesSize() {
    return (this.squareStatuses == null) ? 0 : this.squareStatuses.size();
  }

  public void putToSquareStatuses(String key, SquareStatus val) {
    if (this.squareStatuses == null) {
      this.squareStatuses = new Hashtable();
    }
    this.squareStatuses.put(key, val);
  }

  public Hashtable getSquareStatuses() {
    return this.squareStatuses;
  }

  public void setSquareStatuses(Hashtable squareStatuses) {
    this.squareStatuses = squareStatuses;
  }

  public void unsetSquareStatuses() {
    this.squareStatuses = null;
  }

  /** Returns true if field squareStatuses is set (has been assigned a value) and false otherwise */
  public boolean isSetSquareStatuses() {
    return this.squareStatuses != null;
  }

  public void setSquareStatusesIsSet(boolean value) {
    if (!value) {
      this.squareStatuses = null;
    }
  }

  public int getMyMembershipsSize() {
    return (this.myMemberships == null) ? 0 : this.myMemberships.size();
  }

  public void putToMyMemberships(String key, SquareMember val) {
    if (this.myMemberships == null) {
      this.myMemberships = new Hashtable();
    }
    this.myMemberships.put(key, val);
  }

  public Hashtable getMyMemberships() {
    return this.myMemberships;
  }

  public void setMyMemberships(Hashtable myMemberships) {
    this.myMemberships = myMemberships;
  }

  public void unsetMyMemberships() {
    this.myMemberships = null;
  }

  /** Returns true if field myMemberships is set (has been assigned a value) and false otherwise */
  public boolean isSetMyMemberships() {
    return this.myMemberships != null;
  }

  public void setMyMembershipsIsSet(boolean value) {
    if (!value) {
      this.myMemberships = null;
    }
  }

  public String getContinuationToken() {
    return this.continuationToken;
  }

  public void setContinuationToken(String continuationToken) {
    this.continuationToken = continuationToken;
  }

  public void unsetContinuationToken() {
    this.continuationToken = null;
  }

  /** Returns true if field continuationToken is set (has been assigned a value) and false otherwise */
  public boolean isSetContinuationToken() {
    return this.continuationToken != null;
  }

  public void setContinuationTokenIsSet(boolean value) {
    if (!value) {
      this.continuationToken = null;
    }
  }

  public int getNoteStatusesSize() {
    return (this.noteStatuses == null) ? 0 : this.noteStatuses.size();
  }

  public void putToNoteStatuses(String key, NoteStatus val) {
    if (this.noteStatuses == null) {
      this.noteStatuses = new Hashtable();
    }
    this.noteStatuses.put(key, val);
  }

  public Hashtable getNoteStatuses() {
    return this.noteStatuses;
  }

  public void setNoteStatuses(Hashtable noteStatuses) {
    this.noteStatuses = noteStatuses;
  }

  public void unsetNoteStatuses() {
    this.noteStatuses = null;
  }

  /** Returns true if field noteStatuses is set (has been assigned a value) and false otherwise */
  public boolean isSetNoteStatuses() {
    return this.noteStatuses != null;
  }

  public void setNoteStatusesIsSet(boolean value) {
    if (!value) {
      this.noteStatuses = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SearchSquaresResponse)
      return this.equals((SearchSquaresResponse)that);
    return false;
  }

  public boolean equals(SearchSquaresResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_squares = true && this.isSetSquares();
    boolean that_present_squares = true && that.isSetSquares();
    if (this_present_squares || that_present_squares) {
      if (!(this_present_squares && that_present_squares))
        return false;
      if (!this.squares.equals(that.squares))
        return false;
    }

    boolean this_present_squareStatuses = true && this.isSetSquareStatuses();
    boolean that_present_squareStatuses = true && that.isSetSquareStatuses();
    if (this_present_squareStatuses || that_present_squareStatuses) {
      if (!(this_present_squareStatuses && that_present_squareStatuses))
        return false;
      if (!this.squareStatuses.equals(that.squareStatuses))
        return false;
    }

    boolean this_present_myMemberships = true && this.isSetMyMemberships();
    boolean that_present_myMemberships = true && that.isSetMyMemberships();
    if (this_present_myMemberships || that_present_myMemberships) {
      if (!(this_present_myMemberships && that_present_myMemberships))
        return false;
      if (!this.myMemberships.equals(that.myMemberships))
        return false;
    }

    boolean this_present_continuationToken = true && this.isSetContinuationToken();
    boolean that_present_continuationToken = true && that.isSetContinuationToken();
    if (this_present_continuationToken || that_present_continuationToken) {
      if (!(this_present_continuationToken && that_present_continuationToken))
        return false;
      if (!this.continuationToken.equals(that.continuationToken))
        return false;
    }

    boolean this_present_noteStatuses = true && this.isSetNoteStatuses();
    boolean that_present_noteStatuses = true && that.isSetNoteStatuses();
    if (this_present_noteStatuses || that_present_noteStatuses) {
      if (!(this_present_noteStatuses && that_present_noteStatuses))
        return false;
      if (!this.noteStatuses.equals(that.noteStatuses))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    SearchSquaresResponse other = (SearchSquaresResponse)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetSquares(), other.isSetSquares());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSquares()) {
      lastComparison = TBaseHelper.compareTo(this.squares, other.squares);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSquareStatuses(), other.isSetSquareStatuses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSquareStatuses()) {
      lastComparison = TBaseHelper.compareTo(this.squareStatuses, other.squareStatuses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetMyMemberships(), other.isSetMyMemberships());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyMemberships()) {
      lastComparison = TBaseHelper.compareTo(this.myMemberships, other.myMemberships);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetContinuationToken(), other.isSetContinuationToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContinuationToken()) {
      lastComparison = TBaseHelper.compareTo(this.continuationToken, other.continuationToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetNoteStatuses(), other.isSetNoteStatuses());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoteStatuses()) {
      lastComparison = TBaseHelper.compareTo(this.noteStatuses, other.noteStatuses);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // SQUARES
          if (field.type == TType.LIST) {
            {
              TList _list390 = iprot.readListBegin();
              this.squares = new Vector(_list390.size);
              for (int _i391 = 0; _i391 < _list390.size; ++_i391)
              {
                Square _elem392;
                _elem392 = new Square();
                _elem392.read(iprot);
                this.squares.addElement(_elem392);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SQUARE_STATUSES
          if (field.type == TType.MAP) {
            {
              TMap _map393 = iprot.readMapBegin();
              this.squareStatuses = new Hashtable(2*_map393.size);
              for (int _i394 = 0; _i394 < _map393.size; ++_i394)
              {
                String _key395;
                SquareStatus _val396;
                _key395 = iprot.readString();
                _val396 = new SquareStatus();
                _val396.read(iprot);
                this.squareStatuses.put(_key395, _val396);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // MY_MEMBERSHIPS
          if (field.type == TType.MAP) {
            {
              TMap _map397 = iprot.readMapBegin();
              this.myMemberships = new Hashtable(2*_map397.size);
              for (int _i398 = 0; _i398 < _map397.size; ++_i398)
              {
                String _key399;
                SquareMember _val400;
                _key399 = iprot.readString();
                _val400 = new SquareMember();
                _val400.read(iprot);
                this.myMemberships.put(_key399, _val400);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // CONTINUATION_TOKEN
          if (field.type == TType.STRING) {
            this.continuationToken = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // NOTE_STATUSES
          if (field.type == TType.MAP) {
            {
              TMap _map401 = iprot.readMapBegin();
              this.noteStatuses = new Hashtable(2*_map401.size);
              for (int _i402 = 0; _i402 < _map401.size; ++_i402)
              {
                String _key403;
                NoteStatus _val404;
                _key403 = iprot.readString();
                _val404 = new NoteStatus();
                _val404.read(iprot);
                this.noteStatuses.put(_key403, _val404);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.squares != null) {
      oprot.writeFieldBegin(SQUARES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.squares.size()));
        for (Enumeration _iter405_enum = this.squares.elements(); _iter405_enum.hasMoreElements(); )         {
          Square _iter405 = (Square)_iter405_enum.nextElement();
          _iter405.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.squareStatuses != null) {
      oprot.writeFieldBegin(SQUARE_STATUSES_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.squareStatuses.size()));
        for (Enumeration _iter406_enum = this.squareStatuses.keys(); _iter406_enum.hasMoreElements(); )         {
          String _iter406 = (String)_iter406_enum.nextElement();
          oprot.writeString(_iter406);
          ((SquareStatus)this.squareStatuses.get(_iter406)).write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.myMemberships != null) {
      oprot.writeFieldBegin(MY_MEMBERSHIPS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.myMemberships.size()));
        for (Enumeration _iter407_enum = this.myMemberships.keys(); _iter407_enum.hasMoreElements(); )         {
          String _iter407 = (String)_iter407_enum.nextElement();
          oprot.writeString(_iter407);
          ((SquareMember)this.myMemberships.get(_iter407)).write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.continuationToken != null) {
      oprot.writeFieldBegin(CONTINUATION_TOKEN_FIELD_DESC);
      oprot.writeString(this.continuationToken);
      oprot.writeFieldEnd();
    }
    if (this.noteStatuses != null) {
      oprot.writeFieldBegin(NOTE_STATUSES_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.noteStatuses.size()));
        for (Enumeration _iter408_enum = this.noteStatuses.keys(); _iter408_enum.hasMoreElements(); )         {
          String _iter408 = (String)_iter408_enum.nextElement();
          oprot.writeString(_iter408);
          ((NoteStatus)this.noteStatuses.get(_iter408)).write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("SearchSquaresResponse(");
    boolean first = true;

    sb.append("squares:");
    if (this.squares == null) {
      sb.append("null");
    } else {
      sb.append(this.squares);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("squareStatuses:");
    if (this.squareStatuses == null) {
      sb.append("null");
    } else {
      sb.append(this.squareStatuses);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("myMemberships:");
    if (this.myMemberships == null) {
      sb.append("null");
    } else {
      sb.append(this.myMemberships);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("continuationToken:");
    if (this.continuationToken == null) {
      sb.append("null");
    } else {
      sb.append(this.continuationToken);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("noteStatuses:");
    if (this.noteStatuses == null) {
      sb.append("null");
    } else {
      sb.append(this.noteStatuses);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

