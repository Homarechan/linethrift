/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class SpotItem implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("SpotItem");

  private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)2);
  private static final TField PHONE_FIELD_DESC = new TField("phone", TType.STRING, (short)3);
  private static final TField CATEGORY_FIELD_DESC = new TField("category", TType.I32, (short)4);
  private static final TField MID_FIELD_DESC = new TField("mid", TType.STRING, (short)5);
  private static final TField COUNTRY_AREA_CODE_FIELD_DESC = new TField("countryAreaCode", TType.STRING, (short)6);
  private static final TField FREE_PHONE_CALLABLE_FIELD_DESC = new TField("freePhoneCallable", TType.BOOL, (short)10);

  private String name;
  private String phone;
  private SpotCategory category;
  private String mid;
  private String countryAreaCode;
  private boolean freePhoneCallable;

  // isset id assignments
  private static final int __FREEPHONECALLABLE_ISSET_ID = 0;
  private boolean[] __isset_vector = new boolean[1];

  public SpotItem() {
  }

  public SpotItem(
    String name,
    String phone,
    SpotCategory category,
    String mid,
    String countryAreaCode,
    boolean freePhoneCallable)
  {
    this();
    this.name = name;
    this.phone = phone;
    this.category = category;
    this.mid = mid;
    this.countryAreaCode = countryAreaCode;
    this.freePhoneCallable = freePhoneCallable;
    setFreePhoneCallableIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SpotItem(SpotItem other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetCategory()) {
      this.category = other.category;
    }
    if (other.isSetMid()) {
      this.mid = other.mid;
    }
    if (other.isSetCountryAreaCode()) {
      this.countryAreaCode = other.countryAreaCode;
    }
    this.freePhoneCallable = other.freePhoneCallable;
  }

  public SpotItem deepCopy() {
    return new SpotItem(this);
  }

  public void clear() {
    this.name = null;
    this.phone = null;
    this.category = null;
    this.mid = null;
    this.countryAreaCode = null;
    setFreePhoneCallableIsSet(false);
    this.freePhoneCallable = false;
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getPhone() {
    return this.phone;
  }

  public void setPhone(String phone) {
    this.phone = phone;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  /**
   * 
   * @see SpotCategory
   */
  public SpotCategory getCategory() {
    return this.category;
  }

  /**
   * 
   * @see SpotCategory
   */
  public void setCategory(SpotCategory category) {
    this.category = category;
  }

  public void unsetCategory() {
    this.category = null;
  }

  /** Returns true if field category is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory() {
    return this.category != null;
  }

  public void setCategoryIsSet(boolean value) {
    if (!value) {
      this.category = null;
    }
  }

  public String getMid() {
    return this.mid;
  }

  public void setMid(String mid) {
    this.mid = mid;
  }

  public void unsetMid() {
    this.mid = null;
  }

  /** Returns true if field mid is set (has been assigned a value) and false otherwise */
  public boolean isSetMid() {
    return this.mid != null;
  }

  public void setMidIsSet(boolean value) {
    if (!value) {
      this.mid = null;
    }
  }

  public String getCountryAreaCode() {
    return this.countryAreaCode;
  }

  public void setCountryAreaCode(String countryAreaCode) {
    this.countryAreaCode = countryAreaCode;
  }

  public void unsetCountryAreaCode() {
    this.countryAreaCode = null;
  }

  /** Returns true if field countryAreaCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCountryAreaCode() {
    return this.countryAreaCode != null;
  }

  public void setCountryAreaCodeIsSet(boolean value) {
    if (!value) {
      this.countryAreaCode = null;
    }
  }

  public boolean isFreePhoneCallable() {
    return this.freePhoneCallable;
  }

  public void setFreePhoneCallable(boolean freePhoneCallable) {
    this.freePhoneCallable = freePhoneCallable;
    setFreePhoneCallableIsSet(true);
  }

  public void unsetFreePhoneCallable() {
    __isset_vector[__FREEPHONECALLABLE_ISSET_ID] = false;
  }

  /** Returns true if field freePhoneCallable is set (has been assigned a value) and false otherwise */
  public boolean isSetFreePhoneCallable() {
    return __isset_vector[__FREEPHONECALLABLE_ISSET_ID];
  }

  public void setFreePhoneCallableIsSet(boolean value) {
    __isset_vector[__FREEPHONECALLABLE_ISSET_ID] = value;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SpotItem)
      return this.equals((SpotItem)that);
    return false;
  }

  public boolean equals(SpotItem that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_category = true && this.isSetCategory();
    boolean that_present_category = true && that.isSetCategory();
    if (this_present_category || that_present_category) {
      if (!(this_present_category && that_present_category))
        return false;
      if (!this.category.equals(that.category))
        return false;
    }

    boolean this_present_mid = true && this.isSetMid();
    boolean that_present_mid = true && that.isSetMid();
    if (this_present_mid || that_present_mid) {
      if (!(this_present_mid && that_present_mid))
        return false;
      if (!this.mid.equals(that.mid))
        return false;
    }

    boolean this_present_countryAreaCode = true && this.isSetCountryAreaCode();
    boolean that_present_countryAreaCode = true && that.isSetCountryAreaCode();
    if (this_present_countryAreaCode || that_present_countryAreaCode) {
      if (!(this_present_countryAreaCode && that_present_countryAreaCode))
        return false;
      if (!this.countryAreaCode.equals(that.countryAreaCode))
        return false;
    }

    boolean this_present_freePhoneCallable = true;
    boolean that_present_freePhoneCallable = true;
    if (this_present_freePhoneCallable || that_present_freePhoneCallable) {
      if (!(this_present_freePhoneCallable && that_present_freePhoneCallable))
        return false;
      if (this.freePhoneCallable != that.freePhoneCallable)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    SpotItem other = (SpotItem)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetName(), other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetPhone(), other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetCategory(), other.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = TBaseHelper.compareTo(this.category, other.category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetMid(), other.isSetMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMid()) {
      lastComparison = TBaseHelper.compareTo(this.mid, other.mid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetCountryAreaCode(), other.isSetCountryAreaCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountryAreaCode()) {
      lastComparison = TBaseHelper.compareTo(this.countryAreaCode, other.countryAreaCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetFreePhoneCallable(), other.isSetFreePhoneCallable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFreePhoneCallable()) {
      lastComparison = TBaseHelper.compareTo(this.freePhoneCallable, other.freePhoneCallable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 2: // NAME
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // PHONE
          if (field.type == TType.STRING) {
            this.phone = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // CATEGORY
          if (field.type == TType.I32) {
            this.category = SpotCategory.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // MID
          if (field.type == TType.STRING) {
            this.mid = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // COUNTRY_AREA_CODE
          if (field.type == TType.STRING) {
            this.countryAreaCode = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // FREE_PHONE_CALLABLE
          if (field.type == TType.BOOL) {
            this.freePhoneCallable = iprot.readBool();
            setFreePhoneCallableIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.phone != null) {
      oprot.writeFieldBegin(PHONE_FIELD_DESC);
      oprot.writeString(this.phone);
      oprot.writeFieldEnd();
    }
    if (this.category != null) {
      oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
      oprot.writeI32(this.category.getValue());
      oprot.writeFieldEnd();
    }
    if (this.mid != null) {
      oprot.writeFieldBegin(MID_FIELD_DESC);
      oprot.writeString(this.mid);
      oprot.writeFieldEnd();
    }
    if (this.countryAreaCode != null) {
      oprot.writeFieldBegin(COUNTRY_AREA_CODE_FIELD_DESC);
      oprot.writeString(this.countryAreaCode);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(FREE_PHONE_CALLABLE_FIELD_DESC);
    oprot.writeBool(this.freePhoneCallable);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("SpotItem(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("category:");
    if (this.category == null) {
      sb.append("null");
    } else {
      sb.append(this.category);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mid:");
    if (this.mid == null) {
      sb.append("null");
    } else {
      sb.append(this.mid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("countryAreaCode:");
    if (this.countryAreaCode == null) {
      sb.append("null");
    } else {
      sb.append(this.countryAreaCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("freePhoneCallable:");
    sb.append(this.freePhoneCallable);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

