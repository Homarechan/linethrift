/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class LastReadMessageIds implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("LastReadMessageIds");

  private static final TField CHAT_ID_FIELD_DESC = new TField("chatId", TType.STRING, (short)1);
  private static final TField LAST_READ_MESSAGE_IDS_FIELD_DESC = new TField("lastReadMessageIds", TType.LIST, (short)2);

  private String chatId;
  private Vector lastReadMessageIds;

  // isset id assignments

  public LastReadMessageIds() {
  }

  public LastReadMessageIds(
    String chatId,
    Vector lastReadMessageIds)
  {
    this();
    this.chatId = chatId;
    this.lastReadMessageIds = lastReadMessageIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LastReadMessageIds(LastReadMessageIds other) {
    if (other.isSetChatId()) {
      this.chatId = other.chatId;
    }
    if (other.isSetLastReadMessageIds()) {
      Vector __this__lastReadMessageIds = new Vector();
      for (Enumeration other_enum = other.lastReadMessageIds.elements(); other_enum.hasMoreElements(); ) {
        LastReadMessageId other_element = (LastReadMessageId)other_enum.nextElement();
        __this__lastReadMessageIds.addElement(new LastReadMessageId(other_element));
      }
      this.lastReadMessageIds = __this__lastReadMessageIds;
    }
  }

  public LastReadMessageIds deepCopy() {
    return new LastReadMessageIds(this);
  }

  public void clear() {
    this.chatId = null;
    this.lastReadMessageIds = null;
  }

  public String getChatId() {
    return this.chatId;
  }

  public void setChatId(String chatId) {
    this.chatId = chatId;
  }

  public void unsetChatId() {
    this.chatId = null;
  }

  /** Returns true if field chatId is set (has been assigned a value) and false otherwise */
  public boolean isSetChatId() {
    return this.chatId != null;
  }

  public void setChatIdIsSet(boolean value) {
    if (!value) {
      this.chatId = null;
    }
  }

  public int getLastReadMessageIdsSize() {
    return (this.lastReadMessageIds == null) ? 0 : this.lastReadMessageIds.size();
  }

  public Enumeration getLastReadMessageIdsEnumeration() {
    return (this.lastReadMessageIds == null) ? null : this.lastReadMessageIds.elements();
  }

  public void addToLastReadMessageIds(LastReadMessageId elem) {
    if (this.lastReadMessageIds == null) {
      this.lastReadMessageIds = new Vector();
    }
    this.lastReadMessageIds.addElement(elem);
  }

  public Vector getLastReadMessageIds() {
    return this.lastReadMessageIds;
  }

  public void setLastReadMessageIds(Vector lastReadMessageIds) {
    this.lastReadMessageIds = lastReadMessageIds;
  }

  public void unsetLastReadMessageIds() {
    this.lastReadMessageIds = null;
  }

  /** Returns true if field lastReadMessageIds is set (has been assigned a value) and false otherwise */
  public boolean isSetLastReadMessageIds() {
    return this.lastReadMessageIds != null;
  }

  public void setLastReadMessageIdsIsSet(boolean value) {
    if (!value) {
      this.lastReadMessageIds = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LastReadMessageIds)
      return this.equals((LastReadMessageIds)that);
    return false;
  }

  public boolean equals(LastReadMessageIds that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_chatId = true && this.isSetChatId();
    boolean that_present_chatId = true && that.isSetChatId();
    if (this_present_chatId || that_present_chatId) {
      if (!(this_present_chatId && that_present_chatId))
        return false;
      if (!this.chatId.equals(that.chatId))
        return false;
    }

    boolean this_present_lastReadMessageIds = true && this.isSetLastReadMessageIds();
    boolean that_present_lastReadMessageIds = true && that.isSetLastReadMessageIds();
    if (this_present_lastReadMessageIds || that_present_lastReadMessageIds) {
      if (!(this_present_lastReadMessageIds && that_present_lastReadMessageIds))
        return false;
      if (!this.lastReadMessageIds.equals(that.lastReadMessageIds))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    LastReadMessageIds other = (LastReadMessageIds)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetChatId(), other.isSetChatId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChatId()) {
      lastComparison = TBaseHelper.compareTo(this.chatId, other.chatId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetLastReadMessageIds(), other.isSetLastReadMessageIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastReadMessageIds()) {
      lastComparison = TBaseHelper.compareTo(this.lastReadMessageIds, other.lastReadMessageIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // CHAT_ID
          if (field.type == TType.STRING) {
            this.chatId = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // LAST_READ_MESSAGE_IDS
          if (field.type == TType.LIST) {
            {
              TList _list149 = iprot.readListBegin();
              this.lastReadMessageIds = new Vector(_list149.size);
              for (int _i150 = 0; _i150 < _list149.size; ++_i150)
              {
                LastReadMessageId _elem151;
                _elem151 = new LastReadMessageId();
                _elem151.read(iprot);
                this.lastReadMessageIds.addElement(_elem151);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.chatId != null) {
      oprot.writeFieldBegin(CHAT_ID_FIELD_DESC);
      oprot.writeString(this.chatId);
      oprot.writeFieldEnd();
    }
    if (this.lastReadMessageIds != null) {
      oprot.writeFieldBegin(LAST_READ_MESSAGE_IDS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.lastReadMessageIds.size()));
        for (Enumeration _iter152_enum = this.lastReadMessageIds.elements(); _iter152_enum.hasMoreElements(); )         {
          LastReadMessageId _iter152 = (LastReadMessageId)_iter152_enum.nextElement();
          _iter152.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("LastReadMessageIds(");
    boolean first = true;

    sb.append("chatId:");
    if (this.chatId == null) {
      sb.append("null");
    } else {
      sb.append(this.chatId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastReadMessageIds:");
    if (this.lastReadMessageIds == null) {
      sb.append("null");
    } else {
      sb.append(this.lastReadMessageIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

