/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class NotificationFetchResult implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("NotificationFetchResult");

  private static final TField FETCH_MODE_FIELD_DESC = new TField("fetchMode", TType.I32, (short)1);
  private static final TField ITEM_LIST_FIELD_DESC = new TField("itemList", TType.LIST, (short)2);

  private NotificationItemFetchMode fetchMode;
  private Vector itemList;

  // isset id assignments

  public NotificationFetchResult() {
  }

  public NotificationFetchResult(
    NotificationItemFetchMode fetchMode,
    Vector itemList)
  {
    this();
    this.fetchMode = fetchMode;
    this.itemList = itemList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NotificationFetchResult(NotificationFetchResult other) {
    if (other.isSetFetchMode()) {
      this.fetchMode = other.fetchMode;
    }
    if (other.isSetItemList()) {
      Vector __this__itemList = new Vector();
      for (Enumeration other_enum = other.itemList.elements(); other_enum.hasMoreElements(); ) {
        NotificationItem other_element = (NotificationItem)other_enum.nextElement();
        __this__itemList.addElement(new NotificationItem(other_element));
      }
      this.itemList = __this__itemList;
    }
  }

  public NotificationFetchResult deepCopy() {
    return new NotificationFetchResult(this);
  }

  public void clear() {
    this.fetchMode = null;
    this.itemList = null;
  }

  /**
   * 
   * @see NotificationItemFetchMode
   */
  public NotificationItemFetchMode getFetchMode() {
    return this.fetchMode;
  }

  /**
   * 
   * @see NotificationItemFetchMode
   */
  public void setFetchMode(NotificationItemFetchMode fetchMode) {
    this.fetchMode = fetchMode;
  }

  public void unsetFetchMode() {
    this.fetchMode = null;
  }

  /** Returns true if field fetchMode is set (has been assigned a value) and false otherwise */
  public boolean isSetFetchMode() {
    return this.fetchMode != null;
  }

  public void setFetchModeIsSet(boolean value) {
    if (!value) {
      this.fetchMode = null;
    }
  }

  public int getItemListSize() {
    return (this.itemList == null) ? 0 : this.itemList.size();
  }

  public Enumeration getItemListEnumeration() {
    return (this.itemList == null) ? null : this.itemList.elements();
  }

  public void addToItemList(NotificationItem elem) {
    if (this.itemList == null) {
      this.itemList = new Vector();
    }
    this.itemList.addElement(elem);
  }

  public Vector getItemList() {
    return this.itemList;
  }

  public void setItemList(Vector itemList) {
    this.itemList = itemList;
  }

  public void unsetItemList() {
    this.itemList = null;
  }

  /** Returns true if field itemList is set (has been assigned a value) and false otherwise */
  public boolean isSetItemList() {
    return this.itemList != null;
  }

  public void setItemListIsSet(boolean value) {
    if (!value) {
      this.itemList = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NotificationFetchResult)
      return this.equals((NotificationFetchResult)that);
    return false;
  }

  public boolean equals(NotificationFetchResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_fetchMode = true && this.isSetFetchMode();
    boolean that_present_fetchMode = true && that.isSetFetchMode();
    if (this_present_fetchMode || that_present_fetchMode) {
      if (!(this_present_fetchMode && that_present_fetchMode))
        return false;
      if (!this.fetchMode.equals(that.fetchMode))
        return false;
    }

    boolean this_present_itemList = true && this.isSetItemList();
    boolean that_present_itemList = true && that.isSetItemList();
    if (this_present_itemList || that_present_itemList) {
      if (!(this_present_itemList && that_present_itemList))
        return false;
      if (!this.itemList.equals(that.itemList))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    NotificationFetchResult other = (NotificationFetchResult)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetFetchMode(), other.isSetFetchMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetchMode()) {
      lastComparison = TBaseHelper.compareTo(this.fetchMode, other.fetchMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetItemList(), other.isSetItemList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemList()) {
      lastComparison = TBaseHelper.compareTo(this.itemList, other.itemList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // FETCH_MODE
          if (field.type == TType.I32) {
            this.fetchMode = NotificationItemFetchMode.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ITEM_LIST
          if (field.type == TType.LIST) {
            {
              TList _list184 = iprot.readListBegin();
              this.itemList = new Vector(_list184.size);
              for (int _i185 = 0; _i185 < _list184.size; ++_i185)
              {
                NotificationItem _elem186;
                _elem186 = new NotificationItem();
                _elem186.read(iprot);
                this.itemList.addElement(_elem186);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.fetchMode != null) {
      oprot.writeFieldBegin(FETCH_MODE_FIELD_DESC);
      oprot.writeI32(this.fetchMode.getValue());
      oprot.writeFieldEnd();
    }
    if (this.itemList != null) {
      oprot.writeFieldBegin(ITEM_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.itemList.size()));
        for (Enumeration _iter187_enum = this.itemList.elements(); _iter187_enum.hasMoreElements(); )         {
          NotificationItem _iter187 = (NotificationItem)_iter187_enum.nextElement();
          _iter187.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("NotificationFetchResult(");
    boolean first = true;

    sb.append("fetchMode:");
    if (this.fetchMode == null) {
      sb.append("null");
    } else {
      sb.append(this.fetchMode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemList:");
    if (this.itemList == null) {
      sb.append("null");
    } else {
      sb.append(this.itemList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

