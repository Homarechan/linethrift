/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class SpotNearbyItem implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("SpotNearbyItem");

  private static final TField SPOT_ITEM_FIELD_DESC = new TField("spotItem", TType.STRUCT, (short)2);
  private static final TField LOCATION_FIELD_DESC = new TField("location", TType.STRUCT, (short)11);

  private SpotItem spotItem;
  private Location location;

  // isset id assignments

  public SpotNearbyItem() {
  }

  public SpotNearbyItem(
    SpotItem spotItem,
    Location location)
  {
    this();
    this.spotItem = spotItem;
    this.location = location;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SpotNearbyItem(SpotNearbyItem other) {
    if (other.isSetSpotItem()) {
      this.spotItem = new SpotItem(other.spotItem);
    }
    if (other.isSetLocation()) {
      this.location = new Location(other.location);
    }
  }

  public SpotNearbyItem deepCopy() {
    return new SpotNearbyItem(this);
  }

  public void clear() {
    this.spotItem = null;
    this.location = null;
  }

  public SpotItem getSpotItem() {
    return this.spotItem;
  }

  public void setSpotItem(SpotItem spotItem) {
    this.spotItem = spotItem;
  }

  public void unsetSpotItem() {
    this.spotItem = null;
  }

  /** Returns true if field spotItem is set (has been assigned a value) and false otherwise */
  public boolean isSetSpotItem() {
    return this.spotItem != null;
  }

  public void setSpotItemIsSet(boolean value) {
    if (!value) {
      this.spotItem = null;
    }
  }

  public Location getLocation() {
    return this.location;
  }

  public void setLocation(Location location) {
    this.location = location;
  }

  public void unsetLocation() {
    this.location = null;
  }

  /** Returns true if field location is set (has been assigned a value) and false otherwise */
  public boolean isSetLocation() {
    return this.location != null;
  }

  public void setLocationIsSet(boolean value) {
    if (!value) {
      this.location = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SpotNearbyItem)
      return this.equals((SpotNearbyItem)that);
    return false;
  }

  public boolean equals(SpotNearbyItem that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_spotItem = true && this.isSetSpotItem();
    boolean that_present_spotItem = true && that.isSetSpotItem();
    if (this_present_spotItem || that_present_spotItem) {
      if (!(this_present_spotItem && that_present_spotItem))
        return false;
      if (!this.spotItem.equals(that.spotItem))
        return false;
    }

    boolean this_present_location = true && this.isSetLocation();
    boolean that_present_location = true && that.isSetLocation();
    if (this_present_location || that_present_location) {
      if (!(this_present_location && that_present_location))
        return false;
      if (!this.location.equals(that.location))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    SpotNearbyItem other = (SpotNearbyItem)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetSpotItem(), other.isSetSpotItem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpotItem()) {
      lastComparison = this.spotItem.compareTo(other.spotItem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetLocation(), other.isSetLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocation()) {
      lastComparison = this.location.compareTo(other.location);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 2: // SPOT_ITEM
          if (field.type == TType.STRUCT) {
            this.spotItem = new SpotItem();
            this.spotItem.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // LOCATION
          if (field.type == TType.STRUCT) {
            this.location = new Location();
            this.location.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.spotItem != null) {
      oprot.writeFieldBegin(SPOT_ITEM_FIELD_DESC);
      this.spotItem.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.location != null) {
      oprot.writeFieldBegin(LOCATION_FIELD_DESC);
      this.location.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("SpotNearbyItem(");
    boolean first = true;

    sb.append("spotItem:");
    if (this.spotItem == null) {
      sb.append("null");
    } else {
      sb.append(this.spotItem);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("location:");
    if (this.location == null) {
      sb.append("null");
    } else {
      sb.append(this.location);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

