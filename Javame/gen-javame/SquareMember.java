/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class SquareMember implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("SquareMember");

  private static final TField SQUARE_MEMBER_MID_FIELD_DESC = new TField("squareMemberMid", TType.STRING, (short)1);
  private static final TField SQUARE_MID_FIELD_DESC = new TField("squareMid", TType.STRING, (short)2);
  private static final TField DISPLAY_NAME_FIELD_DESC = new TField("displayName", TType.STRING, (short)3);
  private static final TField PROFILE_IMAGE_OBS_HASH_FIELD_DESC = new TField("profileImageObsHash", TType.STRING, (short)4);
  private static final TField ABLE_TO_RECEIVE_MESSAGE_FIELD_DESC = new TField("ableToReceiveMessage", TType.BOOL, (short)5);
  private static final TField MEMBERSHIP_STATE_FIELD_DESC = new TField("membershipState", TType.I32, (short)7);
  private static final TField ROLE_FIELD_DESC = new TField("role", TType.I32, (short)8);
  private static final TField REVISION_FIELD_DESC = new TField("revision", TType.I64, (short)9);
  private static final TField PREFERENCE_FIELD_DESC = new TField("preference", TType.STRUCT, (short)10);
  private static final TField JOIN_MESSAGE_FIELD_DESC = new TField("joinMessage", TType.STRING, (short)11);

  private String squareMemberMid;
  private String squareMid;
  private String displayName;
  private String profileImageObsHash;
  private boolean ableToReceiveMessage;
  private SquareMembershipState membershipState;
  private SquareMemberRole role;
  private long revision;
  private SquarePreference preference;
  private String joinMessage;

  // isset id assignments
  private static final int __ABLETORECEIVEMESSAGE_ISSET_ID = 0;
  private static final int __REVISION_ISSET_ID = 1;
  private boolean[] __isset_vector = new boolean[2];

  public SquareMember() {
  }

  public SquareMember(
    String squareMemberMid,
    String squareMid,
    String displayName,
    String profileImageObsHash,
    boolean ableToReceiveMessage,
    SquareMembershipState membershipState,
    SquareMemberRole role,
    long revision,
    SquarePreference preference,
    String joinMessage)
  {
    this();
    this.squareMemberMid = squareMemberMid;
    this.squareMid = squareMid;
    this.displayName = displayName;
    this.profileImageObsHash = profileImageObsHash;
    this.ableToReceiveMessage = ableToReceiveMessage;
    setAbleToReceiveMessageIsSet(true);
    this.membershipState = membershipState;
    this.role = role;
    this.revision = revision;
    setRevisionIsSet(true);
    this.preference = preference;
    this.joinMessage = joinMessage;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SquareMember(SquareMember other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    if (other.isSetSquareMemberMid()) {
      this.squareMemberMid = other.squareMemberMid;
    }
    if (other.isSetSquareMid()) {
      this.squareMid = other.squareMid;
    }
    if (other.isSetDisplayName()) {
      this.displayName = other.displayName;
    }
    if (other.isSetProfileImageObsHash()) {
      this.profileImageObsHash = other.profileImageObsHash;
    }
    this.ableToReceiveMessage = other.ableToReceiveMessage;
    if (other.isSetMembershipState()) {
      this.membershipState = other.membershipState;
    }
    if (other.isSetRole()) {
      this.role = other.role;
    }
    this.revision = other.revision;
    if (other.isSetPreference()) {
      this.preference = new SquarePreference(other.preference);
    }
    if (other.isSetJoinMessage()) {
      this.joinMessage = other.joinMessage;
    }
  }

  public SquareMember deepCopy() {
    return new SquareMember(this);
  }

  public void clear() {
    this.squareMemberMid = null;
    this.squareMid = null;
    this.displayName = null;
    this.profileImageObsHash = null;
    setAbleToReceiveMessageIsSet(false);
    this.ableToReceiveMessage = false;
    this.membershipState = null;
    this.role = null;
    setRevisionIsSet(false);
    this.revision = 0;
    this.preference = null;
    this.joinMessage = null;
  }

  public String getSquareMemberMid() {
    return this.squareMemberMid;
  }

  public void setSquareMemberMid(String squareMemberMid) {
    this.squareMemberMid = squareMemberMid;
  }

  public void unsetSquareMemberMid() {
    this.squareMemberMid = null;
  }

  /** Returns true if field squareMemberMid is set (has been assigned a value) and false otherwise */
  public boolean isSetSquareMemberMid() {
    return this.squareMemberMid != null;
  }

  public void setSquareMemberMidIsSet(boolean value) {
    if (!value) {
      this.squareMemberMid = null;
    }
  }

  public String getSquareMid() {
    return this.squareMid;
  }

  public void setSquareMid(String squareMid) {
    this.squareMid = squareMid;
  }

  public void unsetSquareMid() {
    this.squareMid = null;
  }

  /** Returns true if field squareMid is set (has been assigned a value) and false otherwise */
  public boolean isSetSquareMid() {
    return this.squareMid != null;
  }

  public void setSquareMidIsSet(boolean value) {
    if (!value) {
      this.squareMid = null;
    }
  }

  public String getDisplayName() {
    return this.displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public void unsetDisplayName() {
    this.displayName = null;
  }

  /** Returns true if field displayName is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayName() {
    return this.displayName != null;
  }

  public void setDisplayNameIsSet(boolean value) {
    if (!value) {
      this.displayName = null;
    }
  }

  public String getProfileImageObsHash() {
    return this.profileImageObsHash;
  }

  public void setProfileImageObsHash(String profileImageObsHash) {
    this.profileImageObsHash = profileImageObsHash;
  }

  public void unsetProfileImageObsHash() {
    this.profileImageObsHash = null;
  }

  /** Returns true if field profileImageObsHash is set (has been assigned a value) and false otherwise */
  public boolean isSetProfileImageObsHash() {
    return this.profileImageObsHash != null;
  }

  public void setProfileImageObsHashIsSet(boolean value) {
    if (!value) {
      this.profileImageObsHash = null;
    }
  }

  public boolean isAbleToReceiveMessage() {
    return this.ableToReceiveMessage;
  }

  public void setAbleToReceiveMessage(boolean ableToReceiveMessage) {
    this.ableToReceiveMessage = ableToReceiveMessage;
    setAbleToReceiveMessageIsSet(true);
  }

  public void unsetAbleToReceiveMessage() {
    __isset_vector[__ABLETORECEIVEMESSAGE_ISSET_ID] = false;
  }

  /** Returns true if field ableToReceiveMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetAbleToReceiveMessage() {
    return __isset_vector[__ABLETORECEIVEMESSAGE_ISSET_ID];
  }

  public void setAbleToReceiveMessageIsSet(boolean value) {
    __isset_vector[__ABLETORECEIVEMESSAGE_ISSET_ID] = value;
  }

  /**
   * 
   * @see SquareMembershipState
   */
  public SquareMembershipState getMembershipState() {
    return this.membershipState;
  }

  /**
   * 
   * @see SquareMembershipState
   */
  public void setMembershipState(SquareMembershipState membershipState) {
    this.membershipState = membershipState;
  }

  public void unsetMembershipState() {
    this.membershipState = null;
  }

  /** Returns true if field membershipState is set (has been assigned a value) and false otherwise */
  public boolean isSetMembershipState() {
    return this.membershipState != null;
  }

  public void setMembershipStateIsSet(boolean value) {
    if (!value) {
      this.membershipState = null;
    }
  }

  /**
   * 
   * @see SquareMemberRole
   */
  public SquareMemberRole getRole() {
    return this.role;
  }

  /**
   * 
   * @see SquareMemberRole
   */
  public void setRole(SquareMemberRole role) {
    this.role = role;
  }

  public void unsetRole() {
    this.role = null;
  }

  /** Returns true if field role is set (has been assigned a value) and false otherwise */
  public boolean isSetRole() {
    return this.role != null;
  }

  public void setRoleIsSet(boolean value) {
    if (!value) {
      this.role = null;
    }
  }

  public long getRevision() {
    return this.revision;
  }

  public void setRevision(long revision) {
    this.revision = revision;
    setRevisionIsSet(true);
  }

  public void unsetRevision() {
    __isset_vector[__REVISION_ISSET_ID] = false;
  }

  /** Returns true if field revision is set (has been assigned a value) and false otherwise */
  public boolean isSetRevision() {
    return __isset_vector[__REVISION_ISSET_ID];
  }

  public void setRevisionIsSet(boolean value) {
    __isset_vector[__REVISION_ISSET_ID] = value;
  }

  public SquarePreference getPreference() {
    return this.preference;
  }

  public void setPreference(SquarePreference preference) {
    this.preference = preference;
  }

  public void unsetPreference() {
    this.preference = null;
  }

  /** Returns true if field preference is set (has been assigned a value) and false otherwise */
  public boolean isSetPreference() {
    return this.preference != null;
  }

  public void setPreferenceIsSet(boolean value) {
    if (!value) {
      this.preference = null;
    }
  }

  public String getJoinMessage() {
    return this.joinMessage;
  }

  public void setJoinMessage(String joinMessage) {
    this.joinMessage = joinMessage;
  }

  public void unsetJoinMessage() {
    this.joinMessage = null;
  }

  /** Returns true if field joinMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetJoinMessage() {
    return this.joinMessage != null;
  }

  public void setJoinMessageIsSet(boolean value) {
    if (!value) {
      this.joinMessage = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SquareMember)
      return this.equals((SquareMember)that);
    return false;
  }

  public boolean equals(SquareMember that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_squareMemberMid = true && this.isSetSquareMemberMid();
    boolean that_present_squareMemberMid = true && that.isSetSquareMemberMid();
    if (this_present_squareMemberMid || that_present_squareMemberMid) {
      if (!(this_present_squareMemberMid && that_present_squareMemberMid))
        return false;
      if (!this.squareMemberMid.equals(that.squareMemberMid))
        return false;
    }

    boolean this_present_squareMid = true && this.isSetSquareMid();
    boolean that_present_squareMid = true && that.isSetSquareMid();
    if (this_present_squareMid || that_present_squareMid) {
      if (!(this_present_squareMid && that_present_squareMid))
        return false;
      if (!this.squareMid.equals(that.squareMid))
        return false;
    }

    boolean this_present_displayName = true && this.isSetDisplayName();
    boolean that_present_displayName = true && that.isSetDisplayName();
    if (this_present_displayName || that_present_displayName) {
      if (!(this_present_displayName && that_present_displayName))
        return false;
      if (!this.displayName.equals(that.displayName))
        return false;
    }

    boolean this_present_profileImageObsHash = true && this.isSetProfileImageObsHash();
    boolean that_present_profileImageObsHash = true && that.isSetProfileImageObsHash();
    if (this_present_profileImageObsHash || that_present_profileImageObsHash) {
      if (!(this_present_profileImageObsHash && that_present_profileImageObsHash))
        return false;
      if (!this.profileImageObsHash.equals(that.profileImageObsHash))
        return false;
    }

    boolean this_present_ableToReceiveMessage = true;
    boolean that_present_ableToReceiveMessage = true;
    if (this_present_ableToReceiveMessage || that_present_ableToReceiveMessage) {
      if (!(this_present_ableToReceiveMessage && that_present_ableToReceiveMessage))
        return false;
      if (this.ableToReceiveMessage != that.ableToReceiveMessage)
        return false;
    }

    boolean this_present_membershipState = true && this.isSetMembershipState();
    boolean that_present_membershipState = true && that.isSetMembershipState();
    if (this_present_membershipState || that_present_membershipState) {
      if (!(this_present_membershipState && that_present_membershipState))
        return false;
      if (!this.membershipState.equals(that.membershipState))
        return false;
    }

    boolean this_present_role = true && this.isSetRole();
    boolean that_present_role = true && that.isSetRole();
    if (this_present_role || that_present_role) {
      if (!(this_present_role && that_present_role))
        return false;
      if (!this.role.equals(that.role))
        return false;
    }

    boolean this_present_revision = true;
    boolean that_present_revision = true;
    if (this_present_revision || that_present_revision) {
      if (!(this_present_revision && that_present_revision))
        return false;
      if (this.revision != that.revision)
        return false;
    }

    boolean this_present_preference = true && this.isSetPreference();
    boolean that_present_preference = true && that.isSetPreference();
    if (this_present_preference || that_present_preference) {
      if (!(this_present_preference && that_present_preference))
        return false;
      if (!this.preference.equals(that.preference))
        return false;
    }

    boolean this_present_joinMessage = true && this.isSetJoinMessage();
    boolean that_present_joinMessage = true && that.isSetJoinMessage();
    if (this_present_joinMessage || that_present_joinMessage) {
      if (!(this_present_joinMessage && that_present_joinMessage))
        return false;
      if (!this.joinMessage.equals(that.joinMessage))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    SquareMember other = (SquareMember)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetSquareMemberMid(), other.isSetSquareMemberMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSquareMemberMid()) {
      lastComparison = TBaseHelper.compareTo(this.squareMemberMid, other.squareMemberMid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSquareMid(), other.isSetSquareMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSquareMid()) {
      lastComparison = TBaseHelper.compareTo(this.squareMid, other.squareMid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetDisplayName(), other.isSetDisplayName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayName()) {
      lastComparison = TBaseHelper.compareTo(this.displayName, other.displayName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetProfileImageObsHash(), other.isSetProfileImageObsHash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfileImageObsHash()) {
      lastComparison = TBaseHelper.compareTo(this.profileImageObsHash, other.profileImageObsHash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetAbleToReceiveMessage(), other.isSetAbleToReceiveMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAbleToReceiveMessage()) {
      lastComparison = TBaseHelper.compareTo(this.ableToReceiveMessage, other.ableToReceiveMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetMembershipState(), other.isSetMembershipState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMembershipState()) {
      lastComparison = TBaseHelper.compareTo(this.membershipState, other.membershipState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetRole(), other.isSetRole());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRole()) {
      lastComparison = TBaseHelper.compareTo(this.role, other.role);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetRevision(), other.isSetRevision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRevision()) {
      lastComparison = TBaseHelper.compareTo(this.revision, other.revision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetPreference(), other.isSetPreference());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreference()) {
      lastComparison = this.preference.compareTo(other.preference);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetJoinMessage(), other.isSetJoinMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJoinMessage()) {
      lastComparison = TBaseHelper.compareTo(this.joinMessage, other.joinMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // SQUARE_MEMBER_MID
          if (field.type == TType.STRING) {
            this.squareMemberMid = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SQUARE_MID
          if (field.type == TType.STRING) {
            this.squareMid = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // DISPLAY_NAME
          if (field.type == TType.STRING) {
            this.displayName = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // PROFILE_IMAGE_OBS_HASH
          if (field.type == TType.STRING) {
            this.profileImageObsHash = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // ABLE_TO_RECEIVE_MESSAGE
          if (field.type == TType.BOOL) {
            this.ableToReceiveMessage = iprot.readBool();
            setAbleToReceiveMessageIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // MEMBERSHIP_STATE
          if (field.type == TType.I32) {
            this.membershipState = SquareMembershipState.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // ROLE
          if (field.type == TType.I32) {
            this.role = SquareMemberRole.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // REVISION
          if (field.type == TType.I64) {
            this.revision = iprot.readI64();
            setRevisionIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // PREFERENCE
          if (field.type == TType.STRUCT) {
            this.preference = new SquarePreference();
            this.preference.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // JOIN_MESSAGE
          if (field.type == TType.STRING) {
            this.joinMessage = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.squareMemberMid != null) {
      oprot.writeFieldBegin(SQUARE_MEMBER_MID_FIELD_DESC);
      oprot.writeString(this.squareMemberMid);
      oprot.writeFieldEnd();
    }
    if (this.squareMid != null) {
      oprot.writeFieldBegin(SQUARE_MID_FIELD_DESC);
      oprot.writeString(this.squareMid);
      oprot.writeFieldEnd();
    }
    if (this.displayName != null) {
      oprot.writeFieldBegin(DISPLAY_NAME_FIELD_DESC);
      oprot.writeString(this.displayName);
      oprot.writeFieldEnd();
    }
    if (this.profileImageObsHash != null) {
      oprot.writeFieldBegin(PROFILE_IMAGE_OBS_HASH_FIELD_DESC);
      oprot.writeString(this.profileImageObsHash);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(ABLE_TO_RECEIVE_MESSAGE_FIELD_DESC);
    oprot.writeBool(this.ableToReceiveMessage);
    oprot.writeFieldEnd();
    if (this.membershipState != null) {
      oprot.writeFieldBegin(MEMBERSHIP_STATE_FIELD_DESC);
      oprot.writeI32(this.membershipState.getValue());
      oprot.writeFieldEnd();
    }
    if (this.role != null) {
      oprot.writeFieldBegin(ROLE_FIELD_DESC);
      oprot.writeI32(this.role.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(REVISION_FIELD_DESC);
    oprot.writeI64(this.revision);
    oprot.writeFieldEnd();
    if (this.preference != null) {
      oprot.writeFieldBegin(PREFERENCE_FIELD_DESC);
      this.preference.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.joinMessage != null) {
      oprot.writeFieldBegin(JOIN_MESSAGE_FIELD_DESC);
      oprot.writeString(this.joinMessage);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("SquareMember(");
    boolean first = true;

    sb.append("squareMemberMid:");
    if (this.squareMemberMid == null) {
      sb.append("null");
    } else {
      sb.append(this.squareMemberMid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("squareMid:");
    if (this.squareMid == null) {
      sb.append("null");
    } else {
      sb.append(this.squareMid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("displayName:");
    if (this.displayName == null) {
      sb.append("null");
    } else {
      sb.append(this.displayName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("profileImageObsHash:");
    if (this.profileImageObsHash == null) {
      sb.append("null");
    } else {
      sb.append(this.profileImageObsHash);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ableToReceiveMessage:");
    sb.append(this.ableToReceiveMessage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("membershipState:");
    if (this.membershipState == null) {
      sb.append("null");
    } else {
      sb.append(this.membershipState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("role:");
    if (this.role == null) {
      sb.append("null");
    } else {
      sb.append(this.role);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("revision:");
    sb.append(this.revision);
    first = false;
    if (!first) sb.append(", ");
    sb.append("preference:");
    if (this.preference == null) {
      sb.append("null");
    } else {
      sb.append(this.preference);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("joinMessage:");
    if (this.joinMessage == null) {
      sb.append("null");
    } else {
      sb.append(this.joinMessage);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

