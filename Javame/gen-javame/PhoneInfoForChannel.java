/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class PhoneInfoForChannel implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("PhoneInfoForChannel");

  private static final TField MID_FIELD_DESC = new TField("mid", TType.STRING, (short)1);
  private static final TField NORMALIZED_PHONE_NUMBER_FIELD_DESC = new TField("normalizedPhoneNumber", TType.STRING, (short)2);
  private static final TField ALLOWED_TO_SEARCH_BY_PHONE_NUMBER_FIELD_DESC = new TField("allowedToSearchByPhoneNumber", TType.BOOL, (short)3);
  private static final TField ALLOWED_TO_RECEIVE_MESSAGE_FROM_NON_FRIEND_FIELD_DESC = new TField("allowedToReceiveMessageFromNonFriend", TType.BOOL, (short)4);
  private static final TField REGION_FIELD_DESC = new TField("region", TType.STRING, (short)5);

  private String mid;
  private String normalizedPhoneNumber;
  private boolean allowedToSearchByPhoneNumber;
  private boolean allowedToReceiveMessageFromNonFriend;
  private String region;

  // isset id assignments
  private static final int __ALLOWEDTOSEARCHBYPHONENUMBER_ISSET_ID = 0;
  private static final int __ALLOWEDTORECEIVEMESSAGEFROMNONFRIEND_ISSET_ID = 1;
  private boolean[] __isset_vector = new boolean[2];

  public PhoneInfoForChannel() {
  }

  public PhoneInfoForChannel(
    String mid,
    String normalizedPhoneNumber,
    boolean allowedToSearchByPhoneNumber,
    boolean allowedToReceiveMessageFromNonFriend,
    String region)
  {
    this();
    this.mid = mid;
    this.normalizedPhoneNumber = normalizedPhoneNumber;
    this.allowedToSearchByPhoneNumber = allowedToSearchByPhoneNumber;
    setAllowedToSearchByPhoneNumberIsSet(true);
    this.allowedToReceiveMessageFromNonFriend = allowedToReceiveMessageFromNonFriend;
    setAllowedToReceiveMessageFromNonFriendIsSet(true);
    this.region = region;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PhoneInfoForChannel(PhoneInfoForChannel other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    if (other.isSetMid()) {
      this.mid = other.mid;
    }
    if (other.isSetNormalizedPhoneNumber()) {
      this.normalizedPhoneNumber = other.normalizedPhoneNumber;
    }
    this.allowedToSearchByPhoneNumber = other.allowedToSearchByPhoneNumber;
    this.allowedToReceiveMessageFromNonFriend = other.allowedToReceiveMessageFromNonFriend;
    if (other.isSetRegion()) {
      this.region = other.region;
    }
  }

  public PhoneInfoForChannel deepCopy() {
    return new PhoneInfoForChannel(this);
  }

  public void clear() {
    this.mid = null;
    this.normalizedPhoneNumber = null;
    setAllowedToSearchByPhoneNumberIsSet(false);
    this.allowedToSearchByPhoneNumber = false;
    setAllowedToReceiveMessageFromNonFriendIsSet(false);
    this.allowedToReceiveMessageFromNonFriend = false;
    this.region = null;
  }

  public String getMid() {
    return this.mid;
  }

  public void setMid(String mid) {
    this.mid = mid;
  }

  public void unsetMid() {
    this.mid = null;
  }

  /** Returns true if field mid is set (has been assigned a value) and false otherwise */
  public boolean isSetMid() {
    return this.mid != null;
  }

  public void setMidIsSet(boolean value) {
    if (!value) {
      this.mid = null;
    }
  }

  public String getNormalizedPhoneNumber() {
    return this.normalizedPhoneNumber;
  }

  public void setNormalizedPhoneNumber(String normalizedPhoneNumber) {
    this.normalizedPhoneNumber = normalizedPhoneNumber;
  }

  public void unsetNormalizedPhoneNumber() {
    this.normalizedPhoneNumber = null;
  }

  /** Returns true if field normalizedPhoneNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetNormalizedPhoneNumber() {
    return this.normalizedPhoneNumber != null;
  }

  public void setNormalizedPhoneNumberIsSet(boolean value) {
    if (!value) {
      this.normalizedPhoneNumber = null;
    }
  }

  public boolean isAllowedToSearchByPhoneNumber() {
    return this.allowedToSearchByPhoneNumber;
  }

  public void setAllowedToSearchByPhoneNumber(boolean allowedToSearchByPhoneNumber) {
    this.allowedToSearchByPhoneNumber = allowedToSearchByPhoneNumber;
    setAllowedToSearchByPhoneNumberIsSet(true);
  }

  public void unsetAllowedToSearchByPhoneNumber() {
    __isset_vector[__ALLOWEDTOSEARCHBYPHONENUMBER_ISSET_ID] = false;
  }

  /** Returns true if field allowedToSearchByPhoneNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowedToSearchByPhoneNumber() {
    return __isset_vector[__ALLOWEDTOSEARCHBYPHONENUMBER_ISSET_ID];
  }

  public void setAllowedToSearchByPhoneNumberIsSet(boolean value) {
    __isset_vector[__ALLOWEDTOSEARCHBYPHONENUMBER_ISSET_ID] = value;
  }

  public boolean isAllowedToReceiveMessageFromNonFriend() {
    return this.allowedToReceiveMessageFromNonFriend;
  }

  public void setAllowedToReceiveMessageFromNonFriend(boolean allowedToReceiveMessageFromNonFriend) {
    this.allowedToReceiveMessageFromNonFriend = allowedToReceiveMessageFromNonFriend;
    setAllowedToReceiveMessageFromNonFriendIsSet(true);
  }

  public void unsetAllowedToReceiveMessageFromNonFriend() {
    __isset_vector[__ALLOWEDTORECEIVEMESSAGEFROMNONFRIEND_ISSET_ID] = false;
  }

  /** Returns true if field allowedToReceiveMessageFromNonFriend is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowedToReceiveMessageFromNonFriend() {
    return __isset_vector[__ALLOWEDTORECEIVEMESSAGEFROMNONFRIEND_ISSET_ID];
  }

  public void setAllowedToReceiveMessageFromNonFriendIsSet(boolean value) {
    __isset_vector[__ALLOWEDTORECEIVEMESSAGEFROMNONFRIEND_ISSET_ID] = value;
  }

  public String getRegion() {
    return this.region;
  }

  public void setRegion(String region) {
    this.region = region;
  }

  public void unsetRegion() {
    this.region = null;
  }

  /** Returns true if field region is set (has been assigned a value) and false otherwise */
  public boolean isSetRegion() {
    return this.region != null;
  }

  public void setRegionIsSet(boolean value) {
    if (!value) {
      this.region = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PhoneInfoForChannel)
      return this.equals((PhoneInfoForChannel)that);
    return false;
  }

  public boolean equals(PhoneInfoForChannel that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_mid = true && this.isSetMid();
    boolean that_present_mid = true && that.isSetMid();
    if (this_present_mid || that_present_mid) {
      if (!(this_present_mid && that_present_mid))
        return false;
      if (!this.mid.equals(that.mid))
        return false;
    }

    boolean this_present_normalizedPhoneNumber = true && this.isSetNormalizedPhoneNumber();
    boolean that_present_normalizedPhoneNumber = true && that.isSetNormalizedPhoneNumber();
    if (this_present_normalizedPhoneNumber || that_present_normalizedPhoneNumber) {
      if (!(this_present_normalizedPhoneNumber && that_present_normalizedPhoneNumber))
        return false;
      if (!this.normalizedPhoneNumber.equals(that.normalizedPhoneNumber))
        return false;
    }

    boolean this_present_allowedToSearchByPhoneNumber = true;
    boolean that_present_allowedToSearchByPhoneNumber = true;
    if (this_present_allowedToSearchByPhoneNumber || that_present_allowedToSearchByPhoneNumber) {
      if (!(this_present_allowedToSearchByPhoneNumber && that_present_allowedToSearchByPhoneNumber))
        return false;
      if (this.allowedToSearchByPhoneNumber != that.allowedToSearchByPhoneNumber)
        return false;
    }

    boolean this_present_allowedToReceiveMessageFromNonFriend = true;
    boolean that_present_allowedToReceiveMessageFromNonFriend = true;
    if (this_present_allowedToReceiveMessageFromNonFriend || that_present_allowedToReceiveMessageFromNonFriend) {
      if (!(this_present_allowedToReceiveMessageFromNonFriend && that_present_allowedToReceiveMessageFromNonFriend))
        return false;
      if (this.allowedToReceiveMessageFromNonFriend != that.allowedToReceiveMessageFromNonFriend)
        return false;
    }

    boolean this_present_region = true && this.isSetRegion();
    boolean that_present_region = true && that.isSetRegion();
    if (this_present_region || that_present_region) {
      if (!(this_present_region && that_present_region))
        return false;
      if (!this.region.equals(that.region))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    PhoneInfoForChannel other = (PhoneInfoForChannel)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetMid(), other.isSetMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMid()) {
      lastComparison = TBaseHelper.compareTo(this.mid, other.mid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetNormalizedPhoneNumber(), other.isSetNormalizedPhoneNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNormalizedPhoneNumber()) {
      lastComparison = TBaseHelper.compareTo(this.normalizedPhoneNumber, other.normalizedPhoneNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetAllowedToSearchByPhoneNumber(), other.isSetAllowedToSearchByPhoneNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowedToSearchByPhoneNumber()) {
      lastComparison = TBaseHelper.compareTo(this.allowedToSearchByPhoneNumber, other.allowedToSearchByPhoneNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetAllowedToReceiveMessageFromNonFriend(), other.isSetAllowedToReceiveMessageFromNonFriend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowedToReceiveMessageFromNonFriend()) {
      lastComparison = TBaseHelper.compareTo(this.allowedToReceiveMessageFromNonFriend, other.allowedToReceiveMessageFromNonFriend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetRegion(), other.isSetRegion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegion()) {
      lastComparison = TBaseHelper.compareTo(this.region, other.region);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // MID
          if (field.type == TType.STRING) {
            this.mid = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // NORMALIZED_PHONE_NUMBER
          if (field.type == TType.STRING) {
            this.normalizedPhoneNumber = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // ALLOWED_TO_SEARCH_BY_PHONE_NUMBER
          if (field.type == TType.BOOL) {
            this.allowedToSearchByPhoneNumber = iprot.readBool();
            setAllowedToSearchByPhoneNumberIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // ALLOWED_TO_RECEIVE_MESSAGE_FROM_NON_FRIEND
          if (field.type == TType.BOOL) {
            this.allowedToReceiveMessageFromNonFriend = iprot.readBool();
            setAllowedToReceiveMessageFromNonFriendIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // REGION
          if (field.type == TType.STRING) {
            this.region = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.mid != null) {
      oprot.writeFieldBegin(MID_FIELD_DESC);
      oprot.writeString(this.mid);
      oprot.writeFieldEnd();
    }
    if (this.normalizedPhoneNumber != null) {
      oprot.writeFieldBegin(NORMALIZED_PHONE_NUMBER_FIELD_DESC);
      oprot.writeString(this.normalizedPhoneNumber);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(ALLOWED_TO_SEARCH_BY_PHONE_NUMBER_FIELD_DESC);
    oprot.writeBool(this.allowedToSearchByPhoneNumber);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ALLOWED_TO_RECEIVE_MESSAGE_FROM_NON_FRIEND_FIELD_DESC);
    oprot.writeBool(this.allowedToReceiveMessageFromNonFriend);
    oprot.writeFieldEnd();
    if (this.region != null) {
      oprot.writeFieldBegin(REGION_FIELD_DESC);
      oprot.writeString(this.region);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("PhoneInfoForChannel(");
    boolean first = true;

    sb.append("mid:");
    if (this.mid == null) {
      sb.append("null");
    } else {
      sb.append(this.mid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("normalizedPhoneNumber:");
    if (this.normalizedPhoneNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.normalizedPhoneNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("allowedToSearchByPhoneNumber:");
    sb.append(this.allowedToSearchByPhoneNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("allowedToReceiveMessageFromNonFriend:");
    sb.append(this.allowedToReceiveMessageFromNonFriend);
    first = false;
    if (!first) sb.append(", ");
    sb.append("region:");
    if (this.region == null) {
      sb.append("null");
    } else {
      sb.append(this.region);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

