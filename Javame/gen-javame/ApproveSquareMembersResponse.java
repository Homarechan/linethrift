/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class ApproveSquareMembersResponse implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("ApproveSquareMembersResponse");

  private static final TField APPROVED_MEMBERS_FIELD_DESC = new TField("approvedMembers", TType.LIST, (short)1);
  private static final TField STATUS_FIELD_DESC = new TField("status", TType.STRUCT, (short)2);

  private Vector approvedMembers;
  private SquareStatus status;

  // isset id assignments

  public ApproveSquareMembersResponse() {
  }

  public ApproveSquareMembersResponse(
    Vector approvedMembers,
    SquareStatus status)
  {
    this();
    this.approvedMembers = approvedMembers;
    this.status = status;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ApproveSquareMembersResponse(ApproveSquareMembersResponse other) {
    if (other.isSetApprovedMembers()) {
      Vector __this__approvedMembers = new Vector();
      for (Enumeration other_enum = other.approvedMembers.elements(); other_enum.hasMoreElements(); ) {
        SquareMember other_element = (SquareMember)other_enum.nextElement();
        __this__approvedMembers.addElement(new SquareMember(other_element));
      }
      this.approvedMembers = __this__approvedMembers;
    }
    if (other.isSetStatus()) {
      this.status = new SquareStatus(other.status);
    }
  }

  public ApproveSquareMembersResponse deepCopy() {
    return new ApproveSquareMembersResponse(this);
  }

  public void clear() {
    this.approvedMembers = null;
    this.status = null;
  }

  public int getApprovedMembersSize() {
    return (this.approvedMembers == null) ? 0 : this.approvedMembers.size();
  }

  public Enumeration getApprovedMembersEnumeration() {
    return (this.approvedMembers == null) ? null : this.approvedMembers.elements();
  }

  public void addToApprovedMembers(SquareMember elem) {
    if (this.approvedMembers == null) {
      this.approvedMembers = new Vector();
    }
    this.approvedMembers.addElement(elem);
  }

  public Vector getApprovedMembers() {
    return this.approvedMembers;
  }

  public void setApprovedMembers(Vector approvedMembers) {
    this.approvedMembers = approvedMembers;
  }

  public void unsetApprovedMembers() {
    this.approvedMembers = null;
  }

  /** Returns true if field approvedMembers is set (has been assigned a value) and false otherwise */
  public boolean isSetApprovedMembers() {
    return this.approvedMembers != null;
  }

  public void setApprovedMembersIsSet(boolean value) {
    if (!value) {
      this.approvedMembers = null;
    }
  }

  public SquareStatus getStatus() {
    return this.status;
  }

  public void setStatus(SquareStatus status) {
    this.status = status;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ApproveSquareMembersResponse)
      return this.equals((ApproveSquareMembersResponse)that);
    return false;
  }

  public boolean equals(ApproveSquareMembersResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_approvedMembers = true && this.isSetApprovedMembers();
    boolean that_present_approvedMembers = true && that.isSetApprovedMembers();
    if (this_present_approvedMembers || that_present_approvedMembers) {
      if (!(this_present_approvedMembers && that_present_approvedMembers))
        return false;
      if (!this.approvedMembers.equals(that.approvedMembers))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    ApproveSquareMembersResponse other = (ApproveSquareMembersResponse)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetApprovedMembers(), other.isSetApprovedMembers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApprovedMembers()) {
      lastComparison = TBaseHelper.compareTo(this.approvedMembers, other.approvedMembers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetStatus(), other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = this.status.compareTo(other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // APPROVED_MEMBERS
          if (field.type == TType.LIST) {
            {
              TList _list284 = iprot.readListBegin();
              this.approvedMembers = new Vector(_list284.size);
              for (int _i285 = 0; _i285 < _list284.size; ++_i285)
              {
                SquareMember _elem286;
                _elem286 = new SquareMember();
                _elem286.read(iprot);
                this.approvedMembers.addElement(_elem286);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // STATUS
          if (field.type == TType.STRUCT) {
            this.status = new SquareStatus();
            this.status.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.approvedMembers != null) {
      oprot.writeFieldBegin(APPROVED_MEMBERS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.approvedMembers.size()));
        for (Enumeration _iter287_enum = this.approvedMembers.elements(); _iter287_enum.hasMoreElements(); )         {
          SquareMember _iter287 = (SquareMember)_iter287_enum.nextElement();
          _iter287.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.status != null) {
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      this.status.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("ApproveSquareMembersResponse(");
    boolean first = true;

    sb.append("approvedMembers:");
    if (this.approvedMembers == null) {
      sb.append("null");
    } else {
      sb.append(this.approvedMembers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

