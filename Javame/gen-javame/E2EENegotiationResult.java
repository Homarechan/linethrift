/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class E2EENegotiationResult implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("E2EENegotiationResult");

  private static final TField ALLOWED_TYPES_FIELD_DESC = new TField("allowedTypes", TType.SET, (short)1);
  private static final TField PUBLIC_KEY_FIELD_DESC = new TField("publicKey", TType.STRUCT, (short)2);

  private Hashtable allowedTypes;
  private E2EEPublicKey publicKey;

  // isset id assignments

  public E2EENegotiationResult() {
  }

  public E2EENegotiationResult(
    Hashtable allowedTypes,
    E2EEPublicKey publicKey)
  {
    this();
    this.allowedTypes = allowedTypes;
    this.publicKey = publicKey;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public E2EENegotiationResult(E2EENegotiationResult other) {
    if (other.isSetAllowedTypes()) {
      Hashtable __this__allowedTypes = new Hashtable();
      for (Enumeration other_enum = other.allowedTypes.elements(); other_enum.hasMoreElements(); ) {
        ContentType other_element = (ContentType)other_enum.nextElement();
        __this__allowedTypes.addElement(other_element);
      }
      this.allowedTypes = __this__allowedTypes;
    }
    if (other.isSetPublicKey()) {
      this.publicKey = new E2EEPublicKey(other.publicKey);
    }
  }

  public E2EENegotiationResult deepCopy() {
    return new E2EENegotiationResult(this);
  }

  public void clear() {
    this.allowedTypes = null;
    this.publicKey = null;
  }

  public int getAllowedTypesSize() {
    return (this.allowedTypes == null) ? 0 : this.allowedTypes.size();
  }

  public Enumeration getAllowedTypesEnumeration() {
    return (this.allowedTypes == null) ? null : this.allowedTypes.elements();
  }

  public void addToAllowedTypes(ContentType elem) {
    if (this.allowedTypes == null) {
      this.allowedTypes = new Hashtable();
    }
    this.allowedTypes.put(elem, elem);
  }

  public Hashtable getAllowedTypes() {
    return this.allowedTypes;
  }

  public void setAllowedTypes(Hashtable allowedTypes) {
    this.allowedTypes = allowedTypes;
  }

  public void unsetAllowedTypes() {
    this.allowedTypes = null;
  }

  /** Returns true if field allowedTypes is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowedTypes() {
    return this.allowedTypes != null;
  }

  public void setAllowedTypesIsSet(boolean value) {
    if (!value) {
      this.allowedTypes = null;
    }
  }

  public E2EEPublicKey getPublicKey() {
    return this.publicKey;
  }

  public void setPublicKey(E2EEPublicKey publicKey) {
    this.publicKey = publicKey;
  }

  public void unsetPublicKey() {
    this.publicKey = null;
  }

  /** Returns true if field publicKey is set (has been assigned a value) and false otherwise */
  public boolean isSetPublicKey() {
    return this.publicKey != null;
  }

  public void setPublicKeyIsSet(boolean value) {
    if (!value) {
      this.publicKey = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof E2EENegotiationResult)
      return this.equals((E2EENegotiationResult)that);
    return false;
  }

  public boolean equals(E2EENegotiationResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_allowedTypes = true && this.isSetAllowedTypes();
    boolean that_present_allowedTypes = true && that.isSetAllowedTypes();
    if (this_present_allowedTypes || that_present_allowedTypes) {
      if (!(this_present_allowedTypes && that_present_allowedTypes))
        return false;
      if (!this.allowedTypes.equals(that.allowedTypes))
        return false;
    }

    boolean this_present_publicKey = true && this.isSetPublicKey();
    boolean that_present_publicKey = true && that.isSetPublicKey();
    if (this_present_publicKey || that_present_publicKey) {
      if (!(this_present_publicKey && that_present_publicKey))
        return false;
      if (!this.publicKey.equals(that.publicKey))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    E2EENegotiationResult other = (E2EENegotiationResult)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetAllowedTypes(), other.isSetAllowedTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowedTypes()) {
      lastComparison = TBaseHelper.compareTo(this.allowedTypes, other.allowedTypes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetPublicKey(), other.isSetPublicKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublicKey()) {
      lastComparison = this.publicKey.compareTo(other.publicKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ALLOWED_TYPES
          if (field.type == TType.SET) {
            {
              TSet _set4 = iprot.readSetBegin();
              this.allowedTypes = new Hashtable(2*_set4.size);
              for (int _i5 = 0; _i5 < _set4.size; ++_i5)
              {
                ContentType _elem6;
                _elem6 = ContentType.findByValue(iprot.readI32());
                this.allowedTypes.put(_elem6, _elem6);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // PUBLIC_KEY
          if (field.type == TType.STRUCT) {
            this.publicKey = new E2EEPublicKey();
            this.publicKey.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.allowedTypes != null) {
      oprot.writeFieldBegin(ALLOWED_TYPES_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.I32, this.allowedTypes.size()));
        for (Enumeration _iter7_enum = this.allowedTypes.keys(); _iter7_enum.hasMoreElements(); )         {
          ContentType _iter7 = (ContentType)_iter7_enum.nextElement();
          oprot.writeI32(_iter7.getValue());
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.publicKey != null) {
      oprot.writeFieldBegin(PUBLIC_KEY_FIELD_DESC);
      this.publicKey.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("E2EENegotiationResult(");
    boolean first = true;

    sb.append("allowedTypes:");
    if (this.allowedTypes == null) {
      sb.append("null");
    } else {
      sb.append(this.allowedTypes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("publicKey:");
    if (this.publicKey == null) {
      sb.append("null");
    } else {
      sb.append(this.publicKey);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

