/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class ChannelApplicationProvidedService {

  public interface Iface {

    public long activeBuddySubscriberCount() throws TalkException, TException;

    public void addOperationForChannel(OpType opType, String param1, String param2, String param3) throws TalkException, TException;

    public long displayBuddySubscriberCount() throws TalkException, TException;

    public Contact findContactByUseridWithoutAbuseBlockForChannel(String userid) throws TalkException, TException;

    public Vector getAllContactIdsForChannel() throws TalkException, TException;

    public Vector getCompactContacts(long lastModifiedTimestamp) throws TalkException, TException;

    public Vector getContactsForChannel(Vector ids) throws TalkException, TException;

    public String getDisplayName(String mid) throws TalkException, TException;

    public Vector getFavoriteMidsForChannel() throws TalkException, TException;

    public Vector getFriendMids() throws TalkException, TException;

    public Vector getGroupMemberMids(String groupId) throws TalkException, TException;

    public Vector getGroupsForChannel(Vector groupIds) throws TalkException, TException;

    public IdentityCredential getIdentityCredential() throws TalkException, TException;

    public Vector getJoinedGroupIdsForChannel() throws TalkException, TException;

    public MetaProfile getMetaProfile() throws TalkException, TException;

    public String getMid() throws TalkException, TException;

    public SimpleChannelClient getPrimaryClientForChannel() throws TalkException, TException;

    public Profile getProfileForChannel() throws TalkException, TException;

    public Vector getSimpleChannelContacts(Vector ids) throws TalkException, TException;

    public String getUserCountryForBilling(String country, String remoteIp) throws TalkException, TException;

    public long getUserCreateTime() throws TalkException, TException;

    public Hashtable getUserIdentities() throws TalkException, TException;

    public String getUserLanguage() throws TalkException, TException;

    public Vector getUserMidsWhoAddedMe() throws TalkException, TException;

    public boolean isGroupMember(String groupId) throws TalkException, TException;

    public boolean isInContact(String mid) throws TalkException, TException;

    public String registerChannelCP(String cpId, String registerPassword) throws TalkException, TException;

    public void removeNotificationStatus(NotificationStatus notificationStatus) throws TalkException, TException;

    public Message sendMessageForChannel(Message message) throws TalkException, TException;

    public void sendPinCodeOperation(String verifier) throws TalkException, TException;

    public void updateProfileAttributeForChannel(ProfileAttribute profileAttribute, String value) throws TalkException, TException;

  }

  public static class Client implements TServiceClient, Iface {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public long activeBuddySubscriberCount() throws TalkException, TException
    {
      send_activeBuddySubscriberCount();
      return recv_activeBuddySubscriberCount();
    }

    public void send_activeBuddySubscriberCount() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("activeBuddySubscriberCount", TMessageType.CALL, ++seqid_));
      activeBuddySubscriberCount_args args = new activeBuddySubscriberCount_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public long recv_activeBuddySubscriberCount() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "activeBuddySubscriberCount failed: out of sequence response");
      }
      activeBuddySubscriberCount_result result = new activeBuddySubscriberCount_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "activeBuddySubscriberCount failed: unknown result");
    }

    public void addOperationForChannel(OpType opType, String param1, String param2, String param3) throws TalkException, TException
    {
      send_addOperationForChannel(opType, param1, param2, param3);
      recv_addOperationForChannel();
    }

    public void send_addOperationForChannel(OpType opType, String param1, String param2, String param3) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("addOperationForChannel", TMessageType.CALL, ++seqid_));
      addOperationForChannel_args args = new addOperationForChannel_args();
      args.setOpType(opType);
      args.setParam1(param1);
      args.setParam2(param2);
      args.setParam3(param3);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_addOperationForChannel() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "addOperationForChannel failed: out of sequence response");
      }
      addOperationForChannel_result result = new addOperationForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public long displayBuddySubscriberCount() throws TalkException, TException
    {
      send_displayBuddySubscriberCount();
      return recv_displayBuddySubscriberCount();
    }

    public void send_displayBuddySubscriberCount() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("displayBuddySubscriberCount", TMessageType.CALL, ++seqid_));
      displayBuddySubscriberCount_args args = new displayBuddySubscriberCount_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public long recv_displayBuddySubscriberCount() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "displayBuddySubscriberCount failed: out of sequence response");
      }
      displayBuddySubscriberCount_result result = new displayBuddySubscriberCount_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "displayBuddySubscriberCount failed: unknown result");
    }

    public Contact findContactByUseridWithoutAbuseBlockForChannel(String userid) throws TalkException, TException
    {
      send_findContactByUseridWithoutAbuseBlockForChannel(userid);
      return recv_findContactByUseridWithoutAbuseBlockForChannel();
    }

    public void send_findContactByUseridWithoutAbuseBlockForChannel(String userid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("findContactByUseridWithoutAbuseBlockForChannel", TMessageType.CALL, ++seqid_));
      findContactByUseridWithoutAbuseBlockForChannel_args args = new findContactByUseridWithoutAbuseBlockForChannel_args();
      args.setUserid(userid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Contact recv_findContactByUseridWithoutAbuseBlockForChannel() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "findContactByUseridWithoutAbuseBlockForChannel failed: out of sequence response");
      }
      findContactByUseridWithoutAbuseBlockForChannel_result result = new findContactByUseridWithoutAbuseBlockForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "findContactByUseridWithoutAbuseBlockForChannel failed: unknown result");
    }

    public Vector getAllContactIdsForChannel() throws TalkException, TException
    {
      send_getAllContactIdsForChannel();
      return recv_getAllContactIdsForChannel();
    }

    public void send_getAllContactIdsForChannel() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getAllContactIdsForChannel", TMessageType.CALL, ++seqid_));
      getAllContactIdsForChannel_args args = new getAllContactIdsForChannel_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getAllContactIdsForChannel() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getAllContactIdsForChannel failed: out of sequence response");
      }
      getAllContactIdsForChannel_result result = new getAllContactIdsForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getAllContactIdsForChannel failed: unknown result");
    }

    public Vector getCompactContacts(long lastModifiedTimestamp) throws TalkException, TException
    {
      send_getCompactContacts(lastModifiedTimestamp);
      return recv_getCompactContacts();
    }

    public void send_getCompactContacts(long lastModifiedTimestamp) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getCompactContacts", TMessageType.CALL, ++seqid_));
      getCompactContacts_args args = new getCompactContacts_args();
      args.setLastModifiedTimestamp(lastModifiedTimestamp);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getCompactContacts() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getCompactContacts failed: out of sequence response");
      }
      getCompactContacts_result result = new getCompactContacts_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getCompactContacts failed: unknown result");
    }

    public Vector getContactsForChannel(Vector ids) throws TalkException, TException
    {
      send_getContactsForChannel(ids);
      return recv_getContactsForChannel();
    }

    public void send_getContactsForChannel(Vector ids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getContactsForChannel", TMessageType.CALL, ++seqid_));
      getContactsForChannel_args args = new getContactsForChannel_args();
      args.setIds(ids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getContactsForChannel() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getContactsForChannel failed: out of sequence response");
      }
      getContactsForChannel_result result = new getContactsForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getContactsForChannel failed: unknown result");
    }

    public String getDisplayName(String mid) throws TalkException, TException
    {
      send_getDisplayName(mid);
      return recv_getDisplayName();
    }

    public void send_getDisplayName(String mid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getDisplayName", TMessageType.CALL, ++seqid_));
      getDisplayName_args args = new getDisplayName_args();
      args.setMid(mid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getDisplayName() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getDisplayName failed: out of sequence response");
      }
      getDisplayName_result result = new getDisplayName_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getDisplayName failed: unknown result");
    }

    public Vector getFavoriteMidsForChannel() throws TalkException, TException
    {
      send_getFavoriteMidsForChannel();
      return recv_getFavoriteMidsForChannel();
    }

    public void send_getFavoriteMidsForChannel() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getFavoriteMidsForChannel", TMessageType.CALL, ++seqid_));
      getFavoriteMidsForChannel_args args = new getFavoriteMidsForChannel_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getFavoriteMidsForChannel() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getFavoriteMidsForChannel failed: out of sequence response");
      }
      getFavoriteMidsForChannel_result result = new getFavoriteMidsForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getFavoriteMidsForChannel failed: unknown result");
    }

    public Vector getFriendMids() throws TalkException, TException
    {
      send_getFriendMids();
      return recv_getFriendMids();
    }

    public void send_getFriendMids() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getFriendMids", TMessageType.CALL, ++seqid_));
      getFriendMids_args args = new getFriendMids_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getFriendMids() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getFriendMids failed: out of sequence response");
      }
      getFriendMids_result result = new getFriendMids_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getFriendMids failed: unknown result");
    }

    public Vector getGroupMemberMids(String groupId) throws TalkException, TException
    {
      send_getGroupMemberMids(groupId);
      return recv_getGroupMemberMids();
    }

    public void send_getGroupMemberMids(String groupId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getGroupMemberMids", TMessageType.CALL, ++seqid_));
      getGroupMemberMids_args args = new getGroupMemberMids_args();
      args.setGroupId(groupId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getGroupMemberMids() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getGroupMemberMids failed: out of sequence response");
      }
      getGroupMemberMids_result result = new getGroupMemberMids_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getGroupMemberMids failed: unknown result");
    }

    public Vector getGroupsForChannel(Vector groupIds) throws TalkException, TException
    {
      send_getGroupsForChannel(groupIds);
      return recv_getGroupsForChannel();
    }

    public void send_getGroupsForChannel(Vector groupIds) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getGroupsForChannel", TMessageType.CALL, ++seqid_));
      getGroupsForChannel_args args = new getGroupsForChannel_args();
      args.setGroupIds(groupIds);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getGroupsForChannel() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getGroupsForChannel failed: out of sequence response");
      }
      getGroupsForChannel_result result = new getGroupsForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getGroupsForChannel failed: unknown result");
    }

    public IdentityCredential getIdentityCredential() throws TalkException, TException
    {
      send_getIdentityCredential();
      return recv_getIdentityCredential();
    }

    public void send_getIdentityCredential() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getIdentityCredential", TMessageType.CALL, ++seqid_));
      getIdentityCredential_args args = new getIdentityCredential_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public IdentityCredential recv_getIdentityCredential() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getIdentityCredential failed: out of sequence response");
      }
      getIdentityCredential_result result = new getIdentityCredential_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getIdentityCredential failed: unknown result");
    }

    public Vector getJoinedGroupIdsForChannel() throws TalkException, TException
    {
      send_getJoinedGroupIdsForChannel();
      return recv_getJoinedGroupIdsForChannel();
    }

    public void send_getJoinedGroupIdsForChannel() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getJoinedGroupIdsForChannel", TMessageType.CALL, ++seqid_));
      getJoinedGroupIdsForChannel_args args = new getJoinedGroupIdsForChannel_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getJoinedGroupIdsForChannel() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getJoinedGroupIdsForChannel failed: out of sequence response");
      }
      getJoinedGroupIdsForChannel_result result = new getJoinedGroupIdsForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getJoinedGroupIdsForChannel failed: unknown result");
    }

    public MetaProfile getMetaProfile() throws TalkException, TException
    {
      send_getMetaProfile();
      return recv_getMetaProfile();
    }

    public void send_getMetaProfile() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getMetaProfile", TMessageType.CALL, ++seqid_));
      getMetaProfile_args args = new getMetaProfile_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public MetaProfile recv_getMetaProfile() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getMetaProfile failed: out of sequence response");
      }
      getMetaProfile_result result = new getMetaProfile_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getMetaProfile failed: unknown result");
    }

    public String getMid() throws TalkException, TException
    {
      send_getMid();
      return recv_getMid();
    }

    public void send_getMid() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getMid", TMessageType.CALL, ++seqid_));
      getMid_args args = new getMid_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getMid() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getMid failed: out of sequence response");
      }
      getMid_result result = new getMid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getMid failed: unknown result");
    }

    public SimpleChannelClient getPrimaryClientForChannel() throws TalkException, TException
    {
      send_getPrimaryClientForChannel();
      return recv_getPrimaryClientForChannel();
    }

    public void send_getPrimaryClientForChannel() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getPrimaryClientForChannel", TMessageType.CALL, ++seqid_));
      getPrimaryClientForChannel_args args = new getPrimaryClientForChannel_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public SimpleChannelClient recv_getPrimaryClientForChannel() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getPrimaryClientForChannel failed: out of sequence response");
      }
      getPrimaryClientForChannel_result result = new getPrimaryClientForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getPrimaryClientForChannel failed: unknown result");
    }

    public Profile getProfileForChannel() throws TalkException, TException
    {
      send_getProfileForChannel();
      return recv_getProfileForChannel();
    }

    public void send_getProfileForChannel() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getProfileForChannel", TMessageType.CALL, ++seqid_));
      getProfileForChannel_args args = new getProfileForChannel_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Profile recv_getProfileForChannel() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getProfileForChannel failed: out of sequence response");
      }
      getProfileForChannel_result result = new getProfileForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getProfileForChannel failed: unknown result");
    }

    public Vector getSimpleChannelContacts(Vector ids) throws TalkException, TException
    {
      send_getSimpleChannelContacts(ids);
      return recv_getSimpleChannelContacts();
    }

    public void send_getSimpleChannelContacts(Vector ids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getSimpleChannelContacts", TMessageType.CALL, ++seqid_));
      getSimpleChannelContacts_args args = new getSimpleChannelContacts_args();
      args.setIds(ids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getSimpleChannelContacts() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getSimpleChannelContacts failed: out of sequence response");
      }
      getSimpleChannelContacts_result result = new getSimpleChannelContacts_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getSimpleChannelContacts failed: unknown result");
    }

    public String getUserCountryForBilling(String country, String remoteIp) throws TalkException, TException
    {
      send_getUserCountryForBilling(country, remoteIp);
      return recv_getUserCountryForBilling();
    }

    public void send_getUserCountryForBilling(String country, String remoteIp) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getUserCountryForBilling", TMessageType.CALL, ++seqid_));
      getUserCountryForBilling_args args = new getUserCountryForBilling_args();
      args.setCountry(country);
      args.setRemoteIp(remoteIp);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getUserCountryForBilling() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getUserCountryForBilling failed: out of sequence response");
      }
      getUserCountryForBilling_result result = new getUserCountryForBilling_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getUserCountryForBilling failed: unknown result");
    }

    public long getUserCreateTime() throws TalkException, TException
    {
      send_getUserCreateTime();
      return recv_getUserCreateTime();
    }

    public void send_getUserCreateTime() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getUserCreateTime", TMessageType.CALL, ++seqid_));
      getUserCreateTime_args args = new getUserCreateTime_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public long recv_getUserCreateTime() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getUserCreateTime failed: out of sequence response");
      }
      getUserCreateTime_result result = new getUserCreateTime_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getUserCreateTime failed: unknown result");
    }

    public Hashtable getUserIdentities() throws TalkException, TException
    {
      send_getUserIdentities();
      return recv_getUserIdentities();
    }

    public void send_getUserIdentities() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getUserIdentities", TMessageType.CALL, ++seqid_));
      getUserIdentities_args args = new getUserIdentities_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Hashtable recv_getUserIdentities() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getUserIdentities failed: out of sequence response");
      }
      getUserIdentities_result result = new getUserIdentities_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getUserIdentities failed: unknown result");
    }

    public String getUserLanguage() throws TalkException, TException
    {
      send_getUserLanguage();
      return recv_getUserLanguage();
    }

    public void send_getUserLanguage() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getUserLanguage", TMessageType.CALL, ++seqid_));
      getUserLanguage_args args = new getUserLanguage_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_getUserLanguage() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getUserLanguage failed: out of sequence response");
      }
      getUserLanguage_result result = new getUserLanguage_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getUserLanguage failed: unknown result");
    }

    public Vector getUserMidsWhoAddedMe() throws TalkException, TException
    {
      send_getUserMidsWhoAddedMe();
      return recv_getUserMidsWhoAddedMe();
    }

    public void send_getUserMidsWhoAddedMe() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getUserMidsWhoAddedMe", TMessageType.CALL, ++seqid_));
      getUserMidsWhoAddedMe_args args = new getUserMidsWhoAddedMe_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getUserMidsWhoAddedMe() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getUserMidsWhoAddedMe failed: out of sequence response");
      }
      getUserMidsWhoAddedMe_result result = new getUserMidsWhoAddedMe_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getUserMidsWhoAddedMe failed: unknown result");
    }

    public boolean isGroupMember(String groupId) throws TalkException, TException
    {
      send_isGroupMember(groupId);
      return recv_isGroupMember();
    }

    public void send_isGroupMember(String groupId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("isGroupMember", TMessageType.CALL, ++seqid_));
      isGroupMember_args args = new isGroupMember_args();
      args.setGroupId(groupId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_isGroupMember() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "isGroupMember failed: out of sequence response");
      }
      isGroupMember_result result = new isGroupMember_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "isGroupMember failed: unknown result");
    }

    public boolean isInContact(String mid) throws TalkException, TException
    {
      send_isInContact(mid);
      return recv_isInContact();
    }

    public void send_isInContact(String mid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("isInContact", TMessageType.CALL, ++seqid_));
      isInContact_args args = new isInContact_args();
      args.setMid(mid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_isInContact() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "isInContact failed: out of sequence response");
      }
      isInContact_result result = new isInContact_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "isInContact failed: unknown result");
    }

    public String registerChannelCP(String cpId, String registerPassword) throws TalkException, TException
    {
      send_registerChannelCP(cpId, registerPassword);
      return recv_registerChannelCP();
    }

    public void send_registerChannelCP(String cpId, String registerPassword) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("registerChannelCP", TMessageType.CALL, ++seqid_));
      registerChannelCP_args args = new registerChannelCP_args();
      args.setCpId(cpId);
      args.setRegisterPassword(registerPassword);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_registerChannelCP() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "registerChannelCP failed: out of sequence response");
      }
      registerChannelCP_result result = new registerChannelCP_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "registerChannelCP failed: unknown result");
    }

    public void removeNotificationStatus(NotificationStatus notificationStatus) throws TalkException, TException
    {
      send_removeNotificationStatus(notificationStatus);
      recv_removeNotificationStatus();
    }

    public void send_removeNotificationStatus(NotificationStatus notificationStatus) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("removeNotificationStatus", TMessageType.CALL, ++seqid_));
      removeNotificationStatus_args args = new removeNotificationStatus_args();
      args.setNotificationStatus(notificationStatus);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_removeNotificationStatus() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "removeNotificationStatus failed: out of sequence response");
      }
      removeNotificationStatus_result result = new removeNotificationStatus_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public Message sendMessageForChannel(Message message) throws TalkException, TException
    {
      send_sendMessageForChannel(message);
      return recv_sendMessageForChannel();
    }

    public void send_sendMessageForChannel(Message message) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("sendMessageForChannel", TMessageType.CALL, ++seqid_));
      sendMessageForChannel_args args = new sendMessageForChannel_args();
      args.setMessage(message);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Message recv_sendMessageForChannel() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "sendMessageForChannel failed: out of sequence response");
      }
      sendMessageForChannel_result result = new sendMessageForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "sendMessageForChannel failed: unknown result");
    }

    public void sendPinCodeOperation(String verifier) throws TalkException, TException
    {
      send_sendPinCodeOperation(verifier);
      recv_sendPinCodeOperation();
    }

    public void send_sendPinCodeOperation(String verifier) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("sendPinCodeOperation", TMessageType.CALL, ++seqid_));
      sendPinCodeOperation_args args = new sendPinCodeOperation_args();
      args.setVerifier(verifier);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_sendPinCodeOperation() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "sendPinCodeOperation failed: out of sequence response");
      }
      sendPinCodeOperation_result result = new sendPinCodeOperation_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void updateProfileAttributeForChannel(ProfileAttribute profileAttribute, String value) throws TalkException, TException
    {
      send_updateProfileAttributeForChannel(profileAttribute, value);
      recv_updateProfileAttributeForChannel();
    }

    public void send_updateProfileAttributeForChannel(ProfileAttribute profileAttribute, String value) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateProfileAttributeForChannel", TMessageType.CALL, ++seqid_));
      updateProfileAttributeForChannel_args args = new updateProfileAttributeForChannel_args();
      args.setProfileAttribute(profileAttribute);
      args.setValue(value);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_updateProfileAttributeForChannel() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateProfileAttributeForChannel failed: out of sequence response");
      }
      updateProfileAttributeForChannel_result result = new updateProfileAttributeForChannel_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

  }
  public static class Processor implements TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("activeBuddySubscriberCount", new activeBuddySubscriberCount());
      processMap_.put("addOperationForChannel", new addOperationForChannel());
      processMap_.put("displayBuddySubscriberCount", new displayBuddySubscriberCount());
      processMap_.put("findContactByUseridWithoutAbuseBlockForChannel", new findContactByUseridWithoutAbuseBlockForChannel());
      processMap_.put("getAllContactIdsForChannel", new getAllContactIdsForChannel());
      processMap_.put("getCompactContacts", new getCompactContacts());
      processMap_.put("getContactsForChannel", new getContactsForChannel());
      processMap_.put("getDisplayName", new getDisplayName());
      processMap_.put("getFavoriteMidsForChannel", new getFavoriteMidsForChannel());
      processMap_.put("getFriendMids", new getFriendMids());
      processMap_.put("getGroupMemberMids", new getGroupMemberMids());
      processMap_.put("getGroupsForChannel", new getGroupsForChannel());
      processMap_.put("getIdentityCredential", new getIdentityCredential());
      processMap_.put("getJoinedGroupIdsForChannel", new getJoinedGroupIdsForChannel());
      processMap_.put("getMetaProfile", new getMetaProfile());
      processMap_.put("getMid", new getMid());
      processMap_.put("getPrimaryClientForChannel", new getPrimaryClientForChannel());
      processMap_.put("getProfileForChannel", new getProfileForChannel());
      processMap_.put("getSimpleChannelContacts", new getSimpleChannelContacts());
      processMap_.put("getUserCountryForBilling", new getUserCountryForBilling());
      processMap_.put("getUserCreateTime", new getUserCreateTime());
      processMap_.put("getUserIdentities", new getUserIdentities());
      processMap_.put("getUserLanguage", new getUserLanguage());
      processMap_.put("getUserMidsWhoAddedMe", new getUserMidsWhoAddedMe());
      processMap_.put("isGroupMember", new isGroupMember());
      processMap_.put("isInContact", new isInContact());
      processMap_.put("registerChannelCP", new registerChannelCP());
      processMap_.put("removeNotificationStatus", new removeNotificationStatus());
      processMap_.put("sendMessageForChannel", new sendMessageForChannel());
      processMap_.put("sendPinCodeOperation", new sendPinCodeOperation());
      processMap_.put("updateProfileAttributeForChannel", new updateProfileAttributeForChannel());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final Hashtable processMap_ = new Hashtable();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = (ProcessFunction)processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class activeBuddySubscriberCount implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        activeBuddySubscriberCount_args args = new activeBuddySubscriberCount_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("activeBuddySubscriberCount", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        activeBuddySubscriberCount_result result = new activeBuddySubscriberCount_result();
        try {
          result.success = iface_.activeBuddySubscriberCount();
          result.setSuccessIsSet(true);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing activeBuddySubscriberCount");
          oprot.writeMessageBegin(new TMessage("activeBuddySubscriberCount", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("activeBuddySubscriberCount", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class addOperationForChannel implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        addOperationForChannel_args args = new addOperationForChannel_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("addOperationForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        addOperationForChannel_result result = new addOperationForChannel_result();
        try {
          iface_.addOperationForChannel(args.opType, args.param1, args.param2, args.param3);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing addOperationForChannel");
          oprot.writeMessageBegin(new TMessage("addOperationForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("addOperationForChannel", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class displayBuddySubscriberCount implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        displayBuddySubscriberCount_args args = new displayBuddySubscriberCount_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("displayBuddySubscriberCount", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        displayBuddySubscriberCount_result result = new displayBuddySubscriberCount_result();
        try {
          result.success = iface_.displayBuddySubscriberCount();
          result.setSuccessIsSet(true);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing displayBuddySubscriberCount");
          oprot.writeMessageBegin(new TMessage("displayBuddySubscriberCount", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("displayBuddySubscriberCount", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class findContactByUseridWithoutAbuseBlockForChannel implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        findContactByUseridWithoutAbuseBlockForChannel_args args = new findContactByUseridWithoutAbuseBlockForChannel_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("findContactByUseridWithoutAbuseBlockForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        findContactByUseridWithoutAbuseBlockForChannel_result result = new findContactByUseridWithoutAbuseBlockForChannel_result();
        try {
          result.success = iface_.findContactByUseridWithoutAbuseBlockForChannel(args.userid);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing findContactByUseridWithoutAbuseBlockForChannel");
          oprot.writeMessageBegin(new TMessage("findContactByUseridWithoutAbuseBlockForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("findContactByUseridWithoutAbuseBlockForChannel", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getAllContactIdsForChannel implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getAllContactIdsForChannel_args args = new getAllContactIdsForChannel_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getAllContactIdsForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getAllContactIdsForChannel_result result = new getAllContactIdsForChannel_result();
        try {
          result.success = iface_.getAllContactIdsForChannel();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getAllContactIdsForChannel");
          oprot.writeMessageBegin(new TMessage("getAllContactIdsForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getAllContactIdsForChannel", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getCompactContacts implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getCompactContacts_args args = new getCompactContacts_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getCompactContacts", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getCompactContacts_result result = new getCompactContacts_result();
        try {
          result.success = iface_.getCompactContacts(args.lastModifiedTimestamp);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getCompactContacts");
          oprot.writeMessageBegin(new TMessage("getCompactContacts", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getCompactContacts", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getContactsForChannel implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getContactsForChannel_args args = new getContactsForChannel_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getContactsForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getContactsForChannel_result result = new getContactsForChannel_result();
        try {
          result.success = iface_.getContactsForChannel(args.ids);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getContactsForChannel");
          oprot.writeMessageBegin(new TMessage("getContactsForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getContactsForChannel", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getDisplayName implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getDisplayName_args args = new getDisplayName_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getDisplayName", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getDisplayName_result result = new getDisplayName_result();
        try {
          result.success = iface_.getDisplayName(args.mid);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getDisplayName");
          oprot.writeMessageBegin(new TMessage("getDisplayName", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getDisplayName", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getFavoriteMidsForChannel implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getFavoriteMidsForChannel_args args = new getFavoriteMidsForChannel_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getFavoriteMidsForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getFavoriteMidsForChannel_result result = new getFavoriteMidsForChannel_result();
        try {
          result.success = iface_.getFavoriteMidsForChannel();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getFavoriteMidsForChannel");
          oprot.writeMessageBegin(new TMessage("getFavoriteMidsForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getFavoriteMidsForChannel", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getFriendMids implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getFriendMids_args args = new getFriendMids_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getFriendMids", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getFriendMids_result result = new getFriendMids_result();
        try {
          result.success = iface_.getFriendMids();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getFriendMids");
          oprot.writeMessageBegin(new TMessage("getFriendMids", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getFriendMids", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getGroupMemberMids implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getGroupMemberMids_args args = new getGroupMemberMids_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getGroupMemberMids", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getGroupMemberMids_result result = new getGroupMemberMids_result();
        try {
          result.success = iface_.getGroupMemberMids(args.groupId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getGroupMemberMids");
          oprot.writeMessageBegin(new TMessage("getGroupMemberMids", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getGroupMemberMids", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getGroupsForChannel implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getGroupsForChannel_args args = new getGroupsForChannel_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getGroupsForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getGroupsForChannel_result result = new getGroupsForChannel_result();
        try {
          result.success = iface_.getGroupsForChannel(args.groupIds);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getGroupsForChannel");
          oprot.writeMessageBegin(new TMessage("getGroupsForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getGroupsForChannel", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getIdentityCredential implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getIdentityCredential_args args = new getIdentityCredential_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getIdentityCredential", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getIdentityCredential_result result = new getIdentityCredential_result();
        try {
          result.success = iface_.getIdentityCredential();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getIdentityCredential");
          oprot.writeMessageBegin(new TMessage("getIdentityCredential", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getIdentityCredential", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getJoinedGroupIdsForChannel implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getJoinedGroupIdsForChannel_args args = new getJoinedGroupIdsForChannel_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getJoinedGroupIdsForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getJoinedGroupIdsForChannel_result result = new getJoinedGroupIdsForChannel_result();
        try {
          result.success = iface_.getJoinedGroupIdsForChannel();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getJoinedGroupIdsForChannel");
          oprot.writeMessageBegin(new TMessage("getJoinedGroupIdsForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getJoinedGroupIdsForChannel", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getMetaProfile implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getMetaProfile_args args = new getMetaProfile_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getMetaProfile", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getMetaProfile_result result = new getMetaProfile_result();
        try {
          result.success = iface_.getMetaProfile();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getMetaProfile");
          oprot.writeMessageBegin(new TMessage("getMetaProfile", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getMetaProfile", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getMid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getMid_args args = new getMid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getMid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getMid_result result = new getMid_result();
        try {
          result.success = iface_.getMid();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getMid");
          oprot.writeMessageBegin(new TMessage("getMid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getMid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getPrimaryClientForChannel implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getPrimaryClientForChannel_args args = new getPrimaryClientForChannel_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getPrimaryClientForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getPrimaryClientForChannel_result result = new getPrimaryClientForChannel_result();
        try {
          result.success = iface_.getPrimaryClientForChannel();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getPrimaryClientForChannel");
          oprot.writeMessageBegin(new TMessage("getPrimaryClientForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getPrimaryClientForChannel", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getProfileForChannel implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getProfileForChannel_args args = new getProfileForChannel_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getProfileForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getProfileForChannel_result result = new getProfileForChannel_result();
        try {
          result.success = iface_.getProfileForChannel();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getProfileForChannel");
          oprot.writeMessageBegin(new TMessage("getProfileForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getProfileForChannel", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getSimpleChannelContacts implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getSimpleChannelContacts_args args = new getSimpleChannelContacts_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getSimpleChannelContacts", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getSimpleChannelContacts_result result = new getSimpleChannelContacts_result();
        try {
          result.success = iface_.getSimpleChannelContacts(args.ids);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getSimpleChannelContacts");
          oprot.writeMessageBegin(new TMessage("getSimpleChannelContacts", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getSimpleChannelContacts", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getUserCountryForBilling implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getUserCountryForBilling_args args = new getUserCountryForBilling_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getUserCountryForBilling", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getUserCountryForBilling_result result = new getUserCountryForBilling_result();
        try {
          result.success = iface_.getUserCountryForBilling(args.country, args.remoteIp);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getUserCountryForBilling");
          oprot.writeMessageBegin(new TMessage("getUserCountryForBilling", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getUserCountryForBilling", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getUserCreateTime implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getUserCreateTime_args args = new getUserCreateTime_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getUserCreateTime", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getUserCreateTime_result result = new getUserCreateTime_result();
        try {
          result.success = iface_.getUserCreateTime();
          result.setSuccessIsSet(true);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getUserCreateTime");
          oprot.writeMessageBegin(new TMessage("getUserCreateTime", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getUserCreateTime", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getUserIdentities implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getUserIdentities_args args = new getUserIdentities_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getUserIdentities", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getUserIdentities_result result = new getUserIdentities_result();
        try {
          result.success = iface_.getUserIdentities();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getUserIdentities");
          oprot.writeMessageBegin(new TMessage("getUserIdentities", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getUserIdentities", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getUserLanguage implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getUserLanguage_args args = new getUserLanguage_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getUserLanguage", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getUserLanguage_result result = new getUserLanguage_result();
        try {
          result.success = iface_.getUserLanguage();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getUserLanguage");
          oprot.writeMessageBegin(new TMessage("getUserLanguage", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getUserLanguage", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getUserMidsWhoAddedMe implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getUserMidsWhoAddedMe_args args = new getUserMidsWhoAddedMe_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getUserMidsWhoAddedMe", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getUserMidsWhoAddedMe_result result = new getUserMidsWhoAddedMe_result();
        try {
          result.success = iface_.getUserMidsWhoAddedMe();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getUserMidsWhoAddedMe");
          oprot.writeMessageBegin(new TMessage("getUserMidsWhoAddedMe", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getUserMidsWhoAddedMe", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class isGroupMember implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        isGroupMember_args args = new isGroupMember_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("isGroupMember", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        isGroupMember_result result = new isGroupMember_result();
        try {
          result.success = iface_.isGroupMember(args.groupId);
          result.setSuccessIsSet(true);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing isGroupMember");
          oprot.writeMessageBegin(new TMessage("isGroupMember", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("isGroupMember", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class isInContact implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        isInContact_args args = new isInContact_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("isInContact", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        isInContact_result result = new isInContact_result();
        try {
          result.success = iface_.isInContact(args.mid);
          result.setSuccessIsSet(true);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing isInContact");
          oprot.writeMessageBegin(new TMessage("isInContact", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("isInContact", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class registerChannelCP implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        registerChannelCP_args args = new registerChannelCP_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("registerChannelCP", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        registerChannelCP_result result = new registerChannelCP_result();
        try {
          result.success = iface_.registerChannelCP(args.cpId, args.registerPassword);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerChannelCP");
          oprot.writeMessageBegin(new TMessage("registerChannelCP", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("registerChannelCP", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class removeNotificationStatus implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        removeNotificationStatus_args args = new removeNotificationStatus_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("removeNotificationStatus", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        removeNotificationStatus_result result = new removeNotificationStatus_result();
        try {
          iface_.removeNotificationStatus(args.notificationStatus);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing removeNotificationStatus");
          oprot.writeMessageBegin(new TMessage("removeNotificationStatus", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("removeNotificationStatus", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class sendMessageForChannel implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        sendMessageForChannel_args args = new sendMessageForChannel_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("sendMessageForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        sendMessageForChannel_result result = new sendMessageForChannel_result();
        try {
          result.success = iface_.sendMessageForChannel(args.message);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendMessageForChannel");
          oprot.writeMessageBegin(new TMessage("sendMessageForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("sendMessageForChannel", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class sendPinCodeOperation implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        sendPinCodeOperation_args args = new sendPinCodeOperation_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("sendPinCodeOperation", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        sendPinCodeOperation_result result = new sendPinCodeOperation_result();
        try {
          iface_.sendPinCodeOperation(args.verifier);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendPinCodeOperation");
          oprot.writeMessageBegin(new TMessage("sendPinCodeOperation", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("sendPinCodeOperation", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateProfileAttributeForChannel implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateProfileAttributeForChannel_args args = new updateProfileAttributeForChannel_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateProfileAttributeForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateProfileAttributeForChannel_result result = new updateProfileAttributeForChannel_result();
        try {
          iface_.updateProfileAttributeForChannel(args.profileAttribute, args.value);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateProfileAttributeForChannel");
          oprot.writeMessageBegin(new TMessage("updateProfileAttributeForChannel", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateProfileAttributeForChannel", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class activeBuddySubscriberCount_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("activeBuddySubscriberCount_args");


    public activeBuddySubscriberCount_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activeBuddySubscriberCount_args(activeBuddySubscriberCount_args other) {
    }

    public activeBuddySubscriberCount_args deepCopy() {
      return new activeBuddySubscriberCount_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof activeBuddySubscriberCount_args)
        return this.equals((activeBuddySubscriberCount_args)that);
      return false;
    }

    public boolean equals(activeBuddySubscriberCount_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      activeBuddySubscriberCount_args other = (activeBuddySubscriberCount_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("activeBuddySubscriberCount_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class activeBuddySubscriberCount_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("activeBuddySubscriberCount_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I64, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private long success;
    private TalkException e;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public activeBuddySubscriberCount_result() {
    }

    public activeBuddySubscriberCount_result(
      long success,
      TalkException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activeBuddySubscriberCount_result(activeBuddySubscriberCount_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public activeBuddySubscriberCount_result deepCopy() {
      return new activeBuddySubscriberCount_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public void setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof activeBuddySubscriberCount_result)
        return this.equals((activeBuddySubscriberCount_result)that);
      return false;
    }

    public boolean equals(activeBuddySubscriberCount_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      activeBuddySubscriberCount_result other = (activeBuddySubscriberCount_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("activeBuddySubscriberCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class addOperationForChannel_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("addOperationForChannel_args");

    private static final TField OP_TYPE_FIELD_DESC = new TField("opType", TType.I32, (short)1);
    private static final TField PARAM1_FIELD_DESC = new TField("param1", TType.STRING, (short)2);
    private static final TField PARAM2_FIELD_DESC = new TField("param2", TType.STRING, (short)3);
    private static final TField PARAM3_FIELD_DESC = new TField("param3", TType.STRING, (short)4);

    private OpType opType;
    private String param1;
    private String param2;
    private String param3;

    // isset id assignments

    public addOperationForChannel_args() {
    }

    public addOperationForChannel_args(
      OpType opType,
      String param1,
      String param2,
      String param3)
    {
      this();
      this.opType = opType;
      this.param1 = param1;
      this.param2 = param2;
      this.param3 = param3;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOperationForChannel_args(addOperationForChannel_args other) {
      if (other.isSetOpType()) {
        this.opType = other.opType;
      }
      if (other.isSetParam1()) {
        this.param1 = other.param1;
      }
      if (other.isSetParam2()) {
        this.param2 = other.param2;
      }
      if (other.isSetParam3()) {
        this.param3 = other.param3;
      }
    }

    public addOperationForChannel_args deepCopy() {
      return new addOperationForChannel_args(this);
    }

    public void clear() {
      this.opType = null;
      this.param1 = null;
      this.param2 = null;
      this.param3 = null;
    }

    /**
     * 
     * @see OpType
     */
    public OpType getOpType() {
      return this.opType;
    }

    /**
     * 
     * @see OpType
     */
    public void setOpType(OpType opType) {
      this.opType = opType;
    }

    public void unsetOpType() {
      this.opType = null;
    }

    /** Returns true if field opType is set (has been assigned a value) and false otherwise */
    public boolean isSetOpType() {
      return this.opType != null;
    }

    public void setOpTypeIsSet(boolean value) {
      if (!value) {
        this.opType = null;
      }
    }

    public String getParam1() {
      return this.param1;
    }

    public void setParam1(String param1) {
      this.param1 = param1;
    }

    public void unsetParam1() {
      this.param1 = null;
    }

    /** Returns true if field param1 is set (has been assigned a value) and false otherwise */
    public boolean isSetParam1() {
      return this.param1 != null;
    }

    public void setParam1IsSet(boolean value) {
      if (!value) {
        this.param1 = null;
      }
    }

    public String getParam2() {
      return this.param2;
    }

    public void setParam2(String param2) {
      this.param2 = param2;
    }

    public void unsetParam2() {
      this.param2 = null;
    }

    /** Returns true if field param2 is set (has been assigned a value) and false otherwise */
    public boolean isSetParam2() {
      return this.param2 != null;
    }

    public void setParam2IsSet(boolean value) {
      if (!value) {
        this.param2 = null;
      }
    }

    public String getParam3() {
      return this.param3;
    }

    public void setParam3(String param3) {
      this.param3 = param3;
    }

    public void unsetParam3() {
      this.param3 = null;
    }

    /** Returns true if field param3 is set (has been assigned a value) and false otherwise */
    public boolean isSetParam3() {
      return this.param3 != null;
    }

    public void setParam3IsSet(boolean value) {
      if (!value) {
        this.param3 = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOperationForChannel_args)
        return this.equals((addOperationForChannel_args)that);
      return false;
    }

    public boolean equals(addOperationForChannel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_opType = true && this.isSetOpType();
      boolean that_present_opType = true && that.isSetOpType();
      if (this_present_opType || that_present_opType) {
        if (!(this_present_opType && that_present_opType))
          return false;
        if (!this.opType.equals(that.opType))
          return false;
      }

      boolean this_present_param1 = true && this.isSetParam1();
      boolean that_present_param1 = true && that.isSetParam1();
      if (this_present_param1 || that_present_param1) {
        if (!(this_present_param1 && that_present_param1))
          return false;
        if (!this.param1.equals(that.param1))
          return false;
      }

      boolean this_present_param2 = true && this.isSetParam2();
      boolean that_present_param2 = true && that.isSetParam2();
      if (this_present_param2 || that_present_param2) {
        if (!(this_present_param2 && that_present_param2))
          return false;
        if (!this.param2.equals(that.param2))
          return false;
      }

      boolean this_present_param3 = true && this.isSetParam3();
      boolean that_present_param3 = true && that.isSetParam3();
      if (this_present_param3 || that_present_param3) {
        if (!(this_present_param3 && that_present_param3))
          return false;
        if (!this.param3.equals(that.param3))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      addOperationForChannel_args other = (addOperationForChannel_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetOpType(), other.isSetOpType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOpType()) {
        lastComparison = TBaseHelper.compareTo(this.opType, other.opType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetParam1(), other.isSetParam1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam1()) {
        lastComparison = TBaseHelper.compareTo(this.param1, other.param1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetParam2(), other.isSetParam2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam2()) {
        lastComparison = TBaseHelper.compareTo(this.param2, other.param2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetParam3(), other.isSetParam3());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParam3()) {
        lastComparison = TBaseHelper.compareTo(this.param3, other.param3);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // OP_TYPE
            if (field.type == TType.I32) {
              this.opType = OpType.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // PARAM1
            if (field.type == TType.STRING) {
              this.param1 = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PARAM2
            if (field.type == TType.STRING) {
              this.param2 = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // PARAM3
            if (field.type == TType.STRING) {
              this.param3 = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.opType != null) {
        oprot.writeFieldBegin(OP_TYPE_FIELD_DESC);
        oprot.writeI32(this.opType.getValue());
        oprot.writeFieldEnd();
      }
      if (this.param1 != null) {
        oprot.writeFieldBegin(PARAM1_FIELD_DESC);
        oprot.writeString(this.param1);
        oprot.writeFieldEnd();
      }
      if (this.param2 != null) {
        oprot.writeFieldBegin(PARAM2_FIELD_DESC);
        oprot.writeString(this.param2);
        oprot.writeFieldEnd();
      }
      if (this.param3 != null) {
        oprot.writeFieldBegin(PARAM3_FIELD_DESC);
        oprot.writeString(this.param3);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("addOperationForChannel_args(");
      boolean first = true;

      sb.append("opType:");
      if (this.opType == null) {
        sb.append("null");
      } else {
        sb.append(this.opType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("param1:");
      if (this.param1 == null) {
        sb.append("null");
      } else {
        sb.append(this.param1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("param2:");
      if (this.param2 == null) {
        sb.append("null");
      } else {
        sb.append(this.param2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("param3:");
      if (this.param3 == null) {
        sb.append("null");
      } else {
        sb.append(this.param3);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class addOperationForChannel_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("addOperationForChannel_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public addOperationForChannel_result() {
    }

    public addOperationForChannel_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addOperationForChannel_result(addOperationForChannel_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public addOperationForChannel_result deepCopy() {
      return new addOperationForChannel_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addOperationForChannel_result)
        return this.equals((addOperationForChannel_result)that);
      return false;
    }

    public boolean equals(addOperationForChannel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      addOperationForChannel_result other = (addOperationForChannel_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("addOperationForChannel_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class displayBuddySubscriberCount_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("displayBuddySubscriberCount_args");


    public displayBuddySubscriberCount_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public displayBuddySubscriberCount_args(displayBuddySubscriberCount_args other) {
    }

    public displayBuddySubscriberCount_args deepCopy() {
      return new displayBuddySubscriberCount_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof displayBuddySubscriberCount_args)
        return this.equals((displayBuddySubscriberCount_args)that);
      return false;
    }

    public boolean equals(displayBuddySubscriberCount_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      displayBuddySubscriberCount_args other = (displayBuddySubscriberCount_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("displayBuddySubscriberCount_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class displayBuddySubscriberCount_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("displayBuddySubscriberCount_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I64, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private long success;
    private TalkException e;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public displayBuddySubscriberCount_result() {
    }

    public displayBuddySubscriberCount_result(
      long success,
      TalkException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public displayBuddySubscriberCount_result(displayBuddySubscriberCount_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public displayBuddySubscriberCount_result deepCopy() {
      return new displayBuddySubscriberCount_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public void setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof displayBuddySubscriberCount_result)
        return this.equals((displayBuddySubscriberCount_result)that);
      return false;
    }

    public boolean equals(displayBuddySubscriberCount_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      displayBuddySubscriberCount_result other = (displayBuddySubscriberCount_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("displayBuddySubscriberCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findContactByUseridWithoutAbuseBlockForChannel_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findContactByUseridWithoutAbuseBlockForChannel_args");

    private static final TField USERID_FIELD_DESC = new TField("userid", TType.STRING, (short)2);

    private String userid;

    // isset id assignments

    public findContactByUseridWithoutAbuseBlockForChannel_args() {
    }

    public findContactByUseridWithoutAbuseBlockForChannel_args(
      String userid)
    {
      this();
      this.userid = userid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findContactByUseridWithoutAbuseBlockForChannel_args(findContactByUseridWithoutAbuseBlockForChannel_args other) {
      if (other.isSetUserid()) {
        this.userid = other.userid;
      }
    }

    public findContactByUseridWithoutAbuseBlockForChannel_args deepCopy() {
      return new findContactByUseridWithoutAbuseBlockForChannel_args(this);
    }

    public void clear() {
      this.userid = null;
    }

    public String getUserid() {
      return this.userid;
    }

    public void setUserid(String userid) {
      this.userid = userid;
    }

    public void unsetUserid() {
      this.userid = null;
    }

    /** Returns true if field userid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserid() {
      return this.userid != null;
    }

    public void setUseridIsSet(boolean value) {
      if (!value) {
        this.userid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findContactByUseridWithoutAbuseBlockForChannel_args)
        return this.equals((findContactByUseridWithoutAbuseBlockForChannel_args)that);
      return false;
    }

    public boolean equals(findContactByUseridWithoutAbuseBlockForChannel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userid = true && this.isSetUserid();
      boolean that_present_userid = true && that.isSetUserid();
      if (this_present_userid || that_present_userid) {
        if (!(this_present_userid && that_present_userid))
          return false;
        if (!this.userid.equals(that.userid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findContactByUseridWithoutAbuseBlockForChannel_args other = (findContactByUseridWithoutAbuseBlockForChannel_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetUserid(), other.isSetUserid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserid()) {
        lastComparison = TBaseHelper.compareTo(this.userid, other.userid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // USERID
            if (field.type == TType.STRING) {
              this.userid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.userid != null) {
        oprot.writeFieldBegin(USERID_FIELD_DESC);
        oprot.writeString(this.userid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findContactByUseridWithoutAbuseBlockForChannel_args(");
      boolean first = true;

      sb.append("userid:");
      if (this.userid == null) {
        sb.append("null");
      } else {
        sb.append(this.userid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class findContactByUseridWithoutAbuseBlockForChannel_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("findContactByUseridWithoutAbuseBlockForChannel_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Contact success;
    private TalkException e;

    // isset id assignments

    public findContactByUseridWithoutAbuseBlockForChannel_result() {
    }

    public findContactByUseridWithoutAbuseBlockForChannel_result(
      Contact success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findContactByUseridWithoutAbuseBlockForChannel_result(findContactByUseridWithoutAbuseBlockForChannel_result other) {
      if (other.isSetSuccess()) {
        this.success = new Contact(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public findContactByUseridWithoutAbuseBlockForChannel_result deepCopy() {
      return new findContactByUseridWithoutAbuseBlockForChannel_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Contact getSuccess() {
      return this.success;
    }

    public void setSuccess(Contact success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findContactByUseridWithoutAbuseBlockForChannel_result)
        return this.equals((findContactByUseridWithoutAbuseBlockForChannel_result)that);
      return false;
    }

    public boolean equals(findContactByUseridWithoutAbuseBlockForChannel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      findContactByUseridWithoutAbuseBlockForChannel_result other = (findContactByUseridWithoutAbuseBlockForChannel_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Contact();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("findContactByUseridWithoutAbuseBlockForChannel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getAllContactIdsForChannel_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getAllContactIdsForChannel_args");


    public getAllContactIdsForChannel_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllContactIdsForChannel_args(getAllContactIdsForChannel_args other) {
    }

    public getAllContactIdsForChannel_args deepCopy() {
      return new getAllContactIdsForChannel_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllContactIdsForChannel_args)
        return this.equals((getAllContactIdsForChannel_args)that);
      return false;
    }

    public boolean equals(getAllContactIdsForChannel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getAllContactIdsForChannel_args other = (getAllContactIdsForChannel_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getAllContactIdsForChannel_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getAllContactIdsForChannel_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getAllContactIdsForChannel_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getAllContactIdsForChannel_result() {
    }

    public getAllContactIdsForChannel_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllContactIdsForChannel_result(getAllContactIdsForChannel_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getAllContactIdsForChannel_result deepCopy() {
      return new getAllContactIdsForChannel_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllContactIdsForChannel_result)
        return this.equals((getAllContactIdsForChannel_result)that);
      return false;
    }

    public boolean equals(getAllContactIdsForChannel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getAllContactIdsForChannel_result other = (getAllContactIdsForChannel_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list660 = iprot.readListBegin();
                this.success = new Vector(_list660.size);
                for (int _i661 = 0; _i661 < _list660.size; ++_i661)
                {
                  String _elem662;
                  _elem662 = iprot.readString();
                  this.success.addElement(_elem662);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter663_enum = this.success.elements(); _iter663_enum.hasMoreElements(); )           {
            String _iter663 = (String)_iter663_enum.nextElement();
            oprot.writeString(_iter663);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getAllContactIdsForChannel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getCompactContacts_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getCompactContacts_args");

    private static final TField LAST_MODIFIED_TIMESTAMP_FIELD_DESC = new TField("lastModifiedTimestamp", TType.I64, (short)2);

    private long lastModifiedTimestamp;

    // isset id assignments
    private static final int __LASTMODIFIEDTIMESTAMP_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getCompactContacts_args() {
    }

    public getCompactContacts_args(
      long lastModifiedTimestamp)
    {
      this();
      this.lastModifiedTimestamp = lastModifiedTimestamp;
      setLastModifiedTimestampIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCompactContacts_args(getCompactContacts_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.lastModifiedTimestamp = other.lastModifiedTimestamp;
    }

    public getCompactContacts_args deepCopy() {
      return new getCompactContacts_args(this);
    }

    public void clear() {
      setLastModifiedTimestampIsSet(false);
      this.lastModifiedTimestamp = 0;
    }

    public long getLastModifiedTimestamp() {
      return this.lastModifiedTimestamp;
    }

    public void setLastModifiedTimestamp(long lastModifiedTimestamp) {
      this.lastModifiedTimestamp = lastModifiedTimestamp;
      setLastModifiedTimestampIsSet(true);
    }

    public void unsetLastModifiedTimestamp() {
      __isset_vector[__LASTMODIFIEDTIMESTAMP_ISSET_ID] = false;
    }

    /** Returns true if field lastModifiedTimestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetLastModifiedTimestamp() {
      return __isset_vector[__LASTMODIFIEDTIMESTAMP_ISSET_ID];
    }

    public void setLastModifiedTimestampIsSet(boolean value) {
      __isset_vector[__LASTMODIFIEDTIMESTAMP_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCompactContacts_args)
        return this.equals((getCompactContacts_args)that);
      return false;
    }

    public boolean equals(getCompactContacts_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_lastModifiedTimestamp = true;
      boolean that_present_lastModifiedTimestamp = true;
      if (this_present_lastModifiedTimestamp || that_present_lastModifiedTimestamp) {
        if (!(this_present_lastModifiedTimestamp && that_present_lastModifiedTimestamp))
          return false;
        if (this.lastModifiedTimestamp != that.lastModifiedTimestamp)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getCompactContacts_args other = (getCompactContacts_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetLastModifiedTimestamp(), other.isSetLastModifiedTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastModifiedTimestamp()) {
        lastComparison = TBaseHelper.compareTo(this.lastModifiedTimestamp, other.lastModifiedTimestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // LAST_MODIFIED_TIMESTAMP
            if (field.type == TType.I64) {
              this.lastModifiedTimestamp = iprot.readI64();
              setLastModifiedTimestampIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LAST_MODIFIED_TIMESTAMP_FIELD_DESC);
      oprot.writeI64(this.lastModifiedTimestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getCompactContacts_args(");
      boolean first = true;

      sb.append("lastModifiedTimestamp:");
      sb.append(this.lastModifiedTimestamp);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getCompactContacts_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getCompactContacts_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getCompactContacts_result() {
    }

    public getCompactContacts_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCompactContacts_result(getCompactContacts_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          CompactContact other_element = (CompactContact)other_enum.nextElement();
          __this__success.addElement(new CompactContact(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getCompactContacts_result deepCopy() {
      return new getCompactContacts_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(CompactContact elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getCompactContacts_result)
        return this.equals((getCompactContacts_result)that);
      return false;
    }

    public boolean equals(getCompactContacts_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getCompactContacts_result other = (getCompactContacts_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list664 = iprot.readListBegin();
                this.success = new Vector(_list664.size);
                for (int _i665 = 0; _i665 < _list664.size; ++_i665)
                {
                  CompactContact _elem666;
                  _elem666 = new CompactContact();
                  _elem666.read(iprot);
                  this.success.addElement(_elem666);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter667_enum = this.success.elements(); _iter667_enum.hasMoreElements(); )           {
            CompactContact _iter667 = (CompactContact)_iter667_enum.nextElement();
            _iter667.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getCompactContacts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getContactsForChannel_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getContactsForChannel_args");

    private static final TField IDS_FIELD_DESC = new TField("ids", TType.LIST, (short)2);

    private Vector ids;

    // isset id assignments

    public getContactsForChannel_args() {
    }

    public getContactsForChannel_args(
      Vector ids)
    {
      this();
      this.ids = ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getContactsForChannel_args(getContactsForChannel_args other) {
      if (other.isSetIds()) {
        Vector __this__ids = new Vector();
        for (Enumeration other_enum = other.ids.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__ids.addElement(other_element);
        }
        this.ids = __this__ids;
      }
    }

    public getContactsForChannel_args deepCopy() {
      return new getContactsForChannel_args(this);
    }

    public void clear() {
      this.ids = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public Enumeration getIdsEnumeration() {
      return (this.ids == null) ? null : this.ids.elements();
    }

    public void addToIds(String elem) {
      if (this.ids == null) {
        this.ids = new Vector();
      }
      this.ids.addElement(elem);
    }

    public Vector getIds() {
      return this.ids;
    }

    public void setIds(Vector ids) {
      this.ids = ids;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getContactsForChannel_args)
        return this.equals((getContactsForChannel_args)that);
      return false;
    }

    public boolean equals(getContactsForChannel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getContactsForChannel_args other = (getContactsForChannel_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetIds(), other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // IDS
            if (field.type == TType.LIST) {
              {
                TList _list668 = iprot.readListBegin();
                this.ids = new Vector(_list668.size);
                for (int _i669 = 0; _i669 < _list668.size; ++_i669)
                {
                  String _elem670;
                  _elem670 = iprot.readString();
                  this.ids.addElement(_elem670);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.ids != null) {
        oprot.writeFieldBegin(IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.ids.size()));
          for (Enumeration _iter671_enum = this.ids.elements(); _iter671_enum.hasMoreElements(); )           {
            String _iter671 = (String)_iter671_enum.nextElement();
            oprot.writeString(_iter671);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getContactsForChannel_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getContactsForChannel_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getContactsForChannel_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getContactsForChannel_result() {
    }

    public getContactsForChannel_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getContactsForChannel_result(getContactsForChannel_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          Contact other_element = (Contact)other_enum.nextElement();
          __this__success.addElement(new Contact(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getContactsForChannel_result deepCopy() {
      return new getContactsForChannel_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(Contact elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getContactsForChannel_result)
        return this.equals((getContactsForChannel_result)that);
      return false;
    }

    public boolean equals(getContactsForChannel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getContactsForChannel_result other = (getContactsForChannel_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list672 = iprot.readListBegin();
                this.success = new Vector(_list672.size);
                for (int _i673 = 0; _i673 < _list672.size; ++_i673)
                {
                  Contact _elem674;
                  _elem674 = new Contact();
                  _elem674.read(iprot);
                  this.success.addElement(_elem674);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter675_enum = this.success.elements(); _iter675_enum.hasMoreElements(); )           {
            Contact _iter675 = (Contact)_iter675_enum.nextElement();
            _iter675.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getContactsForChannel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getDisplayName_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getDisplayName_args");

    private static final TField MID_FIELD_DESC = new TField("mid", TType.STRING, (short)2);

    private String mid;

    // isset id assignments

    public getDisplayName_args() {
    }

    public getDisplayName_args(
      String mid)
    {
      this();
      this.mid = mid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDisplayName_args(getDisplayName_args other) {
      if (other.isSetMid()) {
        this.mid = other.mid;
      }
    }

    public getDisplayName_args deepCopy() {
      return new getDisplayName_args(this);
    }

    public void clear() {
      this.mid = null;
    }

    public String getMid() {
      return this.mid;
    }

    public void setMid(String mid) {
      this.mid = mid;
    }

    public void unsetMid() {
      this.mid = null;
    }

    /** Returns true if field mid is set (has been assigned a value) and false otherwise */
    public boolean isSetMid() {
      return this.mid != null;
    }

    public void setMidIsSet(boolean value) {
      if (!value) {
        this.mid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDisplayName_args)
        return this.equals((getDisplayName_args)that);
      return false;
    }

    public boolean equals(getDisplayName_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mid = true && this.isSetMid();
      boolean that_present_mid = true && that.isSetMid();
      if (this_present_mid || that_present_mid) {
        if (!(this_present_mid && that_present_mid))
          return false;
        if (!this.mid.equals(that.mid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getDisplayName_args other = (getDisplayName_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetMid(), other.isSetMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMid()) {
        lastComparison = TBaseHelper.compareTo(this.mid, other.mid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // MID
            if (field.type == TType.STRING) {
              this.mid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.mid != null) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeString(this.mid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getDisplayName_args(");
      boolean first = true;

      sb.append("mid:");
      if (this.mid == null) {
        sb.append("null");
      } else {
        sb.append(this.mid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getDisplayName_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getDisplayName_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public getDisplayName_result() {
    }

    public getDisplayName_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDisplayName_result(getDisplayName_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getDisplayName_result deepCopy() {
      return new getDisplayName_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getDisplayName_result)
        return this.equals((getDisplayName_result)that);
      return false;
    }

    public boolean equals(getDisplayName_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getDisplayName_result other = (getDisplayName_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getDisplayName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getFavoriteMidsForChannel_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getFavoriteMidsForChannel_args");


    public getFavoriteMidsForChannel_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFavoriteMidsForChannel_args(getFavoriteMidsForChannel_args other) {
    }

    public getFavoriteMidsForChannel_args deepCopy() {
      return new getFavoriteMidsForChannel_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFavoriteMidsForChannel_args)
        return this.equals((getFavoriteMidsForChannel_args)that);
      return false;
    }

    public boolean equals(getFavoriteMidsForChannel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getFavoriteMidsForChannel_args other = (getFavoriteMidsForChannel_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getFavoriteMidsForChannel_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getFavoriteMidsForChannel_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getFavoriteMidsForChannel_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getFavoriteMidsForChannel_result() {
    }

    public getFavoriteMidsForChannel_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFavoriteMidsForChannel_result(getFavoriteMidsForChannel_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getFavoriteMidsForChannel_result deepCopy() {
      return new getFavoriteMidsForChannel_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFavoriteMidsForChannel_result)
        return this.equals((getFavoriteMidsForChannel_result)that);
      return false;
    }

    public boolean equals(getFavoriteMidsForChannel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getFavoriteMidsForChannel_result other = (getFavoriteMidsForChannel_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list676 = iprot.readListBegin();
                this.success = new Vector(_list676.size);
                for (int _i677 = 0; _i677 < _list676.size; ++_i677)
                {
                  String _elem678;
                  _elem678 = iprot.readString();
                  this.success.addElement(_elem678);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter679_enum = this.success.elements(); _iter679_enum.hasMoreElements(); )           {
            String _iter679 = (String)_iter679_enum.nextElement();
            oprot.writeString(_iter679);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getFavoriteMidsForChannel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getFriendMids_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getFriendMids_args");


    public getFriendMids_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFriendMids_args(getFriendMids_args other) {
    }

    public getFriendMids_args deepCopy() {
      return new getFriendMids_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFriendMids_args)
        return this.equals((getFriendMids_args)that);
      return false;
    }

    public boolean equals(getFriendMids_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getFriendMids_args other = (getFriendMids_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getFriendMids_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getFriendMids_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getFriendMids_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getFriendMids_result() {
    }

    public getFriendMids_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFriendMids_result(getFriendMids_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getFriendMids_result deepCopy() {
      return new getFriendMids_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFriendMids_result)
        return this.equals((getFriendMids_result)that);
      return false;
    }

    public boolean equals(getFriendMids_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getFriendMids_result other = (getFriendMids_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list680 = iprot.readListBegin();
                this.success = new Vector(_list680.size);
                for (int _i681 = 0; _i681 < _list680.size; ++_i681)
                {
                  String _elem682;
                  _elem682 = iprot.readString();
                  this.success.addElement(_elem682);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter683_enum = this.success.elements(); _iter683_enum.hasMoreElements(); )           {
            String _iter683 = (String)_iter683_enum.nextElement();
            oprot.writeString(_iter683);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getFriendMids_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getGroupMemberMids_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getGroupMemberMids_args");

    private static final TField GROUP_ID_FIELD_DESC = new TField("groupId", TType.STRING, (short)1);

    private String groupId;

    // isset id assignments

    public getGroupMemberMids_args() {
    }

    public getGroupMemberMids_args(
      String groupId)
    {
      this();
      this.groupId = groupId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroupMemberMids_args(getGroupMemberMids_args other) {
      if (other.isSetGroupId()) {
        this.groupId = other.groupId;
      }
    }

    public getGroupMemberMids_args deepCopy() {
      return new getGroupMemberMids_args(this);
    }

    public void clear() {
      this.groupId = null;
    }

    public String getGroupId() {
      return this.groupId;
    }

    public void setGroupId(String groupId) {
      this.groupId = groupId;
    }

    public void unsetGroupId() {
      this.groupId = null;
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return this.groupId != null;
    }

    public void setGroupIdIsSet(boolean value) {
      if (!value) {
        this.groupId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroupMemberMids_args)
        return this.equals((getGroupMemberMids_args)that);
      return false;
    }

    public boolean equals(getGroupMemberMids_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_groupId = true && this.isSetGroupId();
      boolean that_present_groupId = true && that.isSetGroupId();
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (!this.groupId.equals(that.groupId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getGroupMemberMids_args other = (getGroupMemberMids_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetGroupId(), other.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = TBaseHelper.compareTo(this.groupId, other.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // GROUP_ID
            if (field.type == TType.STRING) {
              this.groupId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.groupId != null) {
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeString(this.groupId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getGroupMemberMids_args(");
      boolean first = true;

      sb.append("groupId:");
      if (this.groupId == null) {
        sb.append("null");
      } else {
        sb.append(this.groupId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getGroupMemberMids_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getGroupMemberMids_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getGroupMemberMids_result() {
    }

    public getGroupMemberMids_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroupMemberMids_result(getGroupMemberMids_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getGroupMemberMids_result deepCopy() {
      return new getGroupMemberMids_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroupMemberMids_result)
        return this.equals((getGroupMemberMids_result)that);
      return false;
    }

    public boolean equals(getGroupMemberMids_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getGroupMemberMids_result other = (getGroupMemberMids_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list684 = iprot.readListBegin();
                this.success = new Vector(_list684.size);
                for (int _i685 = 0; _i685 < _list684.size; ++_i685)
                {
                  String _elem686;
                  _elem686 = iprot.readString();
                  this.success.addElement(_elem686);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter687_enum = this.success.elements(); _iter687_enum.hasMoreElements(); )           {
            String _iter687 = (String)_iter687_enum.nextElement();
            oprot.writeString(_iter687);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getGroupMemberMids_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getGroupsForChannel_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getGroupsForChannel_args");

    private static final TField GROUP_IDS_FIELD_DESC = new TField("groupIds", TType.LIST, (short)1);

    private Vector groupIds;

    // isset id assignments

    public getGroupsForChannel_args() {
    }

    public getGroupsForChannel_args(
      Vector groupIds)
    {
      this();
      this.groupIds = groupIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroupsForChannel_args(getGroupsForChannel_args other) {
      if (other.isSetGroupIds()) {
        Vector __this__groupIds = new Vector();
        for (Enumeration other_enum = other.groupIds.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__groupIds.addElement(other_element);
        }
        this.groupIds = __this__groupIds;
      }
    }

    public getGroupsForChannel_args deepCopy() {
      return new getGroupsForChannel_args(this);
    }

    public void clear() {
      this.groupIds = null;
    }

    public int getGroupIdsSize() {
      return (this.groupIds == null) ? 0 : this.groupIds.size();
    }

    public Enumeration getGroupIdsEnumeration() {
      return (this.groupIds == null) ? null : this.groupIds.elements();
    }

    public void addToGroupIds(String elem) {
      if (this.groupIds == null) {
        this.groupIds = new Vector();
      }
      this.groupIds.addElement(elem);
    }

    public Vector getGroupIds() {
      return this.groupIds;
    }

    public void setGroupIds(Vector groupIds) {
      this.groupIds = groupIds;
    }

    public void unsetGroupIds() {
      this.groupIds = null;
    }

    /** Returns true if field groupIds is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupIds() {
      return this.groupIds != null;
    }

    public void setGroupIdsIsSet(boolean value) {
      if (!value) {
        this.groupIds = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroupsForChannel_args)
        return this.equals((getGroupsForChannel_args)that);
      return false;
    }

    public boolean equals(getGroupsForChannel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_groupIds = true && this.isSetGroupIds();
      boolean that_present_groupIds = true && that.isSetGroupIds();
      if (this_present_groupIds || that_present_groupIds) {
        if (!(this_present_groupIds && that_present_groupIds))
          return false;
        if (!this.groupIds.equals(that.groupIds))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getGroupsForChannel_args other = (getGroupsForChannel_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetGroupIds(), other.isSetGroupIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupIds()) {
        lastComparison = TBaseHelper.compareTo(this.groupIds, other.groupIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // GROUP_IDS
            if (field.type == TType.LIST) {
              {
                TList _list688 = iprot.readListBegin();
                this.groupIds = new Vector(_list688.size);
                for (int _i689 = 0; _i689 < _list688.size; ++_i689)
                {
                  String _elem690;
                  _elem690 = iprot.readString();
                  this.groupIds.addElement(_elem690);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.groupIds != null) {
        oprot.writeFieldBegin(GROUP_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.groupIds.size()));
          for (Enumeration _iter691_enum = this.groupIds.elements(); _iter691_enum.hasMoreElements(); )           {
            String _iter691 = (String)_iter691_enum.nextElement();
            oprot.writeString(_iter691);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getGroupsForChannel_args(");
      boolean first = true;

      sb.append("groupIds:");
      if (this.groupIds == null) {
        sb.append("null");
      } else {
        sb.append(this.groupIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getGroupsForChannel_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getGroupsForChannel_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getGroupsForChannel_result() {
    }

    public getGroupsForChannel_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getGroupsForChannel_result(getGroupsForChannel_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          Group other_element = (Group)other_enum.nextElement();
          __this__success.addElement(new Group(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getGroupsForChannel_result deepCopy() {
      return new getGroupsForChannel_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(Group elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getGroupsForChannel_result)
        return this.equals((getGroupsForChannel_result)that);
      return false;
    }

    public boolean equals(getGroupsForChannel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getGroupsForChannel_result other = (getGroupsForChannel_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list692 = iprot.readListBegin();
                this.success = new Vector(_list692.size);
                for (int _i693 = 0; _i693 < _list692.size; ++_i693)
                {
                  Group _elem694;
                  _elem694 = new Group();
                  _elem694.read(iprot);
                  this.success.addElement(_elem694);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter695_enum = this.success.elements(); _iter695_enum.hasMoreElements(); )           {
            Group _iter695 = (Group)_iter695_enum.nextElement();
            _iter695.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getGroupsForChannel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getIdentityCredential_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getIdentityCredential_args");


    public getIdentityCredential_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getIdentityCredential_args(getIdentityCredential_args other) {
    }

    public getIdentityCredential_args deepCopy() {
      return new getIdentityCredential_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getIdentityCredential_args)
        return this.equals((getIdentityCredential_args)that);
      return false;
    }

    public boolean equals(getIdentityCredential_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getIdentityCredential_args other = (getIdentityCredential_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getIdentityCredential_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getIdentityCredential_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getIdentityCredential_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private IdentityCredential success;
    private TalkException e;

    // isset id assignments

    public getIdentityCredential_result() {
    }

    public getIdentityCredential_result(
      IdentityCredential success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getIdentityCredential_result(getIdentityCredential_result other) {
      if (other.isSetSuccess()) {
        this.success = new IdentityCredential(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getIdentityCredential_result deepCopy() {
      return new getIdentityCredential_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public IdentityCredential getSuccess() {
      return this.success;
    }

    public void setSuccess(IdentityCredential success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getIdentityCredential_result)
        return this.equals((getIdentityCredential_result)that);
      return false;
    }

    public boolean equals(getIdentityCredential_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getIdentityCredential_result other = (getIdentityCredential_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new IdentityCredential();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getIdentityCredential_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getJoinedGroupIdsForChannel_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getJoinedGroupIdsForChannel_args");


    public getJoinedGroupIdsForChannel_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getJoinedGroupIdsForChannel_args(getJoinedGroupIdsForChannel_args other) {
    }

    public getJoinedGroupIdsForChannel_args deepCopy() {
      return new getJoinedGroupIdsForChannel_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getJoinedGroupIdsForChannel_args)
        return this.equals((getJoinedGroupIdsForChannel_args)that);
      return false;
    }

    public boolean equals(getJoinedGroupIdsForChannel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getJoinedGroupIdsForChannel_args other = (getJoinedGroupIdsForChannel_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getJoinedGroupIdsForChannel_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getJoinedGroupIdsForChannel_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getJoinedGroupIdsForChannel_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getJoinedGroupIdsForChannel_result() {
    }

    public getJoinedGroupIdsForChannel_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getJoinedGroupIdsForChannel_result(getJoinedGroupIdsForChannel_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getJoinedGroupIdsForChannel_result deepCopy() {
      return new getJoinedGroupIdsForChannel_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getJoinedGroupIdsForChannel_result)
        return this.equals((getJoinedGroupIdsForChannel_result)that);
      return false;
    }

    public boolean equals(getJoinedGroupIdsForChannel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getJoinedGroupIdsForChannel_result other = (getJoinedGroupIdsForChannel_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list696 = iprot.readListBegin();
                this.success = new Vector(_list696.size);
                for (int _i697 = 0; _i697 < _list696.size; ++_i697)
                {
                  String _elem698;
                  _elem698 = iprot.readString();
                  this.success.addElement(_elem698);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter699_enum = this.success.elements(); _iter699_enum.hasMoreElements(); )           {
            String _iter699 = (String)_iter699_enum.nextElement();
            oprot.writeString(_iter699);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getJoinedGroupIdsForChannel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getMetaProfile_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getMetaProfile_args");


    public getMetaProfile_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMetaProfile_args(getMetaProfile_args other) {
    }

    public getMetaProfile_args deepCopy() {
      return new getMetaProfile_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMetaProfile_args)
        return this.equals((getMetaProfile_args)that);
      return false;
    }

    public boolean equals(getMetaProfile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getMetaProfile_args other = (getMetaProfile_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getMetaProfile_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getMetaProfile_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getMetaProfile_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private MetaProfile success;
    private TalkException e;

    // isset id assignments

    public getMetaProfile_result() {
    }

    public getMetaProfile_result(
      MetaProfile success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMetaProfile_result(getMetaProfile_result other) {
      if (other.isSetSuccess()) {
        this.success = new MetaProfile(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getMetaProfile_result deepCopy() {
      return new getMetaProfile_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public MetaProfile getSuccess() {
      return this.success;
    }

    public void setSuccess(MetaProfile success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMetaProfile_result)
        return this.equals((getMetaProfile_result)that);
      return false;
    }

    public boolean equals(getMetaProfile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getMetaProfile_result other = (getMetaProfile_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new MetaProfile();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getMetaProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getMid_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getMid_args");


    public getMid_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMid_args(getMid_args other) {
    }

    public getMid_args deepCopy() {
      return new getMid_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMid_args)
        return this.equals((getMid_args)that);
      return false;
    }

    public boolean equals(getMid_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getMid_args other = (getMid_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getMid_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getMid_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getMid_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public getMid_result() {
    }

    public getMid_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMid_result(getMid_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getMid_result deepCopy() {
      return new getMid_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMid_result)
        return this.equals((getMid_result)that);
      return false;
    }

    public boolean equals(getMid_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getMid_result other = (getMid_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getMid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPrimaryClientForChannel_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPrimaryClientForChannel_args");


    public getPrimaryClientForChannel_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPrimaryClientForChannel_args(getPrimaryClientForChannel_args other) {
    }

    public getPrimaryClientForChannel_args deepCopy() {
      return new getPrimaryClientForChannel_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPrimaryClientForChannel_args)
        return this.equals((getPrimaryClientForChannel_args)that);
      return false;
    }

    public boolean equals(getPrimaryClientForChannel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPrimaryClientForChannel_args other = (getPrimaryClientForChannel_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPrimaryClientForChannel_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getPrimaryClientForChannel_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getPrimaryClientForChannel_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private SimpleChannelClient success;
    private TalkException e;

    // isset id assignments

    public getPrimaryClientForChannel_result() {
    }

    public getPrimaryClientForChannel_result(
      SimpleChannelClient success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPrimaryClientForChannel_result(getPrimaryClientForChannel_result other) {
      if (other.isSetSuccess()) {
        this.success = new SimpleChannelClient(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getPrimaryClientForChannel_result deepCopy() {
      return new getPrimaryClientForChannel_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public SimpleChannelClient getSuccess() {
      return this.success;
    }

    public void setSuccess(SimpleChannelClient success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getPrimaryClientForChannel_result)
        return this.equals((getPrimaryClientForChannel_result)that);
      return false;
    }

    public boolean equals(getPrimaryClientForChannel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getPrimaryClientForChannel_result other = (getPrimaryClientForChannel_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new SimpleChannelClient();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getPrimaryClientForChannel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getProfileForChannel_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getProfileForChannel_args");


    public getProfileForChannel_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfileForChannel_args(getProfileForChannel_args other) {
    }

    public getProfileForChannel_args deepCopy() {
      return new getProfileForChannel_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfileForChannel_args)
        return this.equals((getProfileForChannel_args)that);
      return false;
    }

    public boolean equals(getProfileForChannel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getProfileForChannel_args other = (getProfileForChannel_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getProfileForChannel_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getProfileForChannel_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getProfileForChannel_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Profile success;
    private TalkException e;

    // isset id assignments

    public getProfileForChannel_result() {
    }

    public getProfileForChannel_result(
      Profile success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfileForChannel_result(getProfileForChannel_result other) {
      if (other.isSetSuccess()) {
        this.success = new Profile(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getProfileForChannel_result deepCopy() {
      return new getProfileForChannel_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Profile getSuccess() {
      return this.success;
    }

    public void setSuccess(Profile success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfileForChannel_result)
        return this.equals((getProfileForChannel_result)that);
      return false;
    }

    public boolean equals(getProfileForChannel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getProfileForChannel_result other = (getProfileForChannel_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Profile();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getProfileForChannel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSimpleChannelContacts_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getSimpleChannelContacts_args");

    private static final TField IDS_FIELD_DESC = new TField("ids", TType.LIST, (short)1);

    private Vector ids;

    // isset id assignments

    public getSimpleChannelContacts_args() {
    }

    public getSimpleChannelContacts_args(
      Vector ids)
    {
      this();
      this.ids = ids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSimpleChannelContacts_args(getSimpleChannelContacts_args other) {
      if (other.isSetIds()) {
        Vector __this__ids = new Vector();
        for (Enumeration other_enum = other.ids.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__ids.addElement(other_element);
        }
        this.ids = __this__ids;
      }
    }

    public getSimpleChannelContacts_args deepCopy() {
      return new getSimpleChannelContacts_args(this);
    }

    public void clear() {
      this.ids = null;
    }

    public int getIdsSize() {
      return (this.ids == null) ? 0 : this.ids.size();
    }

    public Enumeration getIdsEnumeration() {
      return (this.ids == null) ? null : this.ids.elements();
    }

    public void addToIds(String elem) {
      if (this.ids == null) {
        this.ids = new Vector();
      }
      this.ids.addElement(elem);
    }

    public Vector getIds() {
      return this.ids;
    }

    public void setIds(Vector ids) {
      this.ids = ids;
    }

    public void unsetIds() {
      this.ids = null;
    }

    /** Returns true if field ids is set (has been assigned a value) and false otherwise */
    public boolean isSetIds() {
      return this.ids != null;
    }

    public void setIdsIsSet(boolean value) {
      if (!value) {
        this.ids = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSimpleChannelContacts_args)
        return this.equals((getSimpleChannelContacts_args)that);
      return false;
    }

    public boolean equals(getSimpleChannelContacts_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_ids = true && this.isSetIds();
      boolean that_present_ids = true && that.isSetIds();
      if (this_present_ids || that_present_ids) {
        if (!(this_present_ids && that_present_ids))
          return false;
        if (!this.ids.equals(that.ids))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getSimpleChannelContacts_args other = (getSimpleChannelContacts_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetIds(), other.isSetIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIds()) {
        lastComparison = TBaseHelper.compareTo(this.ids, other.ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // IDS
            if (field.type == TType.LIST) {
              {
                TList _list700 = iprot.readListBegin();
                this.ids = new Vector(_list700.size);
                for (int _i701 = 0; _i701 < _list700.size; ++_i701)
                {
                  String _elem702;
                  _elem702 = iprot.readString();
                  this.ids.addElement(_elem702);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.ids != null) {
        oprot.writeFieldBegin(IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.ids.size()));
          for (Enumeration _iter703_enum = this.ids.elements(); _iter703_enum.hasMoreElements(); )           {
            String _iter703 = (String)_iter703_enum.nextElement();
            oprot.writeString(_iter703);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getSimpleChannelContacts_args(");
      boolean first = true;

      sb.append("ids:");
      if (this.ids == null) {
        sb.append("null");
      } else {
        sb.append(this.ids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSimpleChannelContacts_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getSimpleChannelContacts_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getSimpleChannelContacts_result() {
    }

    public getSimpleChannelContacts_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSimpleChannelContacts_result(getSimpleChannelContacts_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          SimpleChannelContact other_element = (SimpleChannelContact)other_enum.nextElement();
          __this__success.addElement(new SimpleChannelContact(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getSimpleChannelContacts_result deepCopy() {
      return new getSimpleChannelContacts_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(SimpleChannelContact elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSimpleChannelContacts_result)
        return this.equals((getSimpleChannelContacts_result)that);
      return false;
    }

    public boolean equals(getSimpleChannelContacts_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getSimpleChannelContacts_result other = (getSimpleChannelContacts_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list704 = iprot.readListBegin();
                this.success = new Vector(_list704.size);
                for (int _i705 = 0; _i705 < _list704.size; ++_i705)
                {
                  SimpleChannelContact _elem706;
                  _elem706 = new SimpleChannelContact();
                  _elem706.read(iprot);
                  this.success.addElement(_elem706);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter707_enum = this.success.elements(); _iter707_enum.hasMoreElements(); )           {
            SimpleChannelContact _iter707 = (SimpleChannelContact)_iter707_enum.nextElement();
            _iter707.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getSimpleChannelContacts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUserCountryForBilling_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUserCountryForBilling_args");

    private static final TField COUNTRY_FIELD_DESC = new TField("country", TType.STRING, (short)2);
    private static final TField REMOTE_IP_FIELD_DESC = new TField("remoteIp", TType.STRING, (short)3);

    private String country;
    private String remoteIp;

    // isset id assignments

    public getUserCountryForBilling_args() {
    }

    public getUserCountryForBilling_args(
      String country,
      String remoteIp)
    {
      this();
      this.country = country;
      this.remoteIp = remoteIp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserCountryForBilling_args(getUserCountryForBilling_args other) {
      if (other.isSetCountry()) {
        this.country = other.country;
      }
      if (other.isSetRemoteIp()) {
        this.remoteIp = other.remoteIp;
      }
    }

    public getUserCountryForBilling_args deepCopy() {
      return new getUserCountryForBilling_args(this);
    }

    public void clear() {
      this.country = null;
      this.remoteIp = null;
    }

    public String getCountry() {
      return this.country;
    }

    public void setCountry(String country) {
      this.country = country;
    }

    public void unsetCountry() {
      this.country = null;
    }

    /** Returns true if field country is set (has been assigned a value) and false otherwise */
    public boolean isSetCountry() {
      return this.country != null;
    }

    public void setCountryIsSet(boolean value) {
      if (!value) {
        this.country = null;
      }
    }

    public String getRemoteIp() {
      return this.remoteIp;
    }

    public void setRemoteIp(String remoteIp) {
      this.remoteIp = remoteIp;
    }

    public void unsetRemoteIp() {
      this.remoteIp = null;
    }

    /** Returns true if field remoteIp is set (has been assigned a value) and false otherwise */
    public boolean isSetRemoteIp() {
      return this.remoteIp != null;
    }

    public void setRemoteIpIsSet(boolean value) {
      if (!value) {
        this.remoteIp = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserCountryForBilling_args)
        return this.equals((getUserCountryForBilling_args)that);
      return false;
    }

    public boolean equals(getUserCountryForBilling_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_country = true && this.isSetCountry();
      boolean that_present_country = true && that.isSetCountry();
      if (this_present_country || that_present_country) {
        if (!(this_present_country && that_present_country))
          return false;
        if (!this.country.equals(that.country))
          return false;
      }

      boolean this_present_remoteIp = true && this.isSetRemoteIp();
      boolean that_present_remoteIp = true && that.isSetRemoteIp();
      if (this_present_remoteIp || that_present_remoteIp) {
        if (!(this_present_remoteIp && that_present_remoteIp))
          return false;
        if (!this.remoteIp.equals(that.remoteIp))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUserCountryForBilling_args other = (getUserCountryForBilling_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetCountry(), other.isSetCountry());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountry()) {
        lastComparison = TBaseHelper.compareTo(this.country, other.country);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetRemoteIp(), other.isSetRemoteIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRemoteIp()) {
        lastComparison = TBaseHelper.compareTo(this.remoteIp, other.remoteIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // COUNTRY
            if (field.type == TType.STRING) {
              this.country = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // REMOTE_IP
            if (field.type == TType.STRING) {
              this.remoteIp = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.country != null) {
        oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
        oprot.writeString(this.country);
        oprot.writeFieldEnd();
      }
      if (this.remoteIp != null) {
        oprot.writeFieldBegin(REMOTE_IP_FIELD_DESC);
        oprot.writeString(this.remoteIp);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUserCountryForBilling_args(");
      boolean first = true;

      sb.append("country:");
      if (this.country == null) {
        sb.append("null");
      } else {
        sb.append(this.country);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("remoteIp:");
      if (this.remoteIp == null) {
        sb.append("null");
      } else {
        sb.append(this.remoteIp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUserCountryForBilling_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUserCountryForBilling_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public getUserCountryForBilling_result() {
    }

    public getUserCountryForBilling_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserCountryForBilling_result(getUserCountryForBilling_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getUserCountryForBilling_result deepCopy() {
      return new getUserCountryForBilling_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserCountryForBilling_result)
        return this.equals((getUserCountryForBilling_result)that);
      return false;
    }

    public boolean equals(getUserCountryForBilling_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUserCountryForBilling_result other = (getUserCountryForBilling_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUserCountryForBilling_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUserCreateTime_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUserCreateTime_args");


    public getUserCreateTime_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserCreateTime_args(getUserCreateTime_args other) {
    }

    public getUserCreateTime_args deepCopy() {
      return new getUserCreateTime_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserCreateTime_args)
        return this.equals((getUserCreateTime_args)that);
      return false;
    }

    public boolean equals(getUserCreateTime_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUserCreateTime_args other = (getUserCreateTime_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUserCreateTime_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUserCreateTime_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUserCreateTime_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I64, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private long success;
    private TalkException e;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getUserCreateTime_result() {
    }

    public getUserCreateTime_result(
      long success,
      TalkException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserCreateTime_result(getUserCreateTime_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getUserCreateTime_result deepCopy() {
      return new getUserCreateTime_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public void setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserCreateTime_result)
        return this.equals((getUserCreateTime_result)that);
      return false;
    }

    public boolean equals(getUserCreateTime_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUserCreateTime_result other = (getUserCreateTime_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUserCreateTime_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUserIdentities_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUserIdentities_args");


    public getUserIdentities_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserIdentities_args(getUserIdentities_args other) {
    }

    public getUserIdentities_args deepCopy() {
      return new getUserIdentities_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserIdentities_args)
        return this.equals((getUserIdentities_args)that);
      return false;
    }

    public boolean equals(getUserIdentities_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUserIdentities_args other = (getUserIdentities_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUserIdentities_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUserIdentities_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUserIdentities_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.MAP, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Hashtable success;
    private TalkException e;

    // isset id assignments

    public getUserIdentities_result() {
    }

    public getUserIdentities_result(
      Hashtable success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserIdentities_result(getUserIdentities_result other) {
      if (other.isSetSuccess()) {
        Hashtable __this__success = new Hashtable();
        for (Enumeration other_enum = other.success.keys(); other_enum.hasMoreElements(); ) {

          RegistrationType other_element_key = (RegistrationType)other_enum.nextElement();
          String other_element_value = (String)other.success.get(other_element_key);

          RegistrationType __this__success_copy_key = other_element_key;

          String __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getUserIdentities_result deepCopy() {
      return new getUserIdentities_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(RegistrationType key, String val) {
      if (this.success == null) {
        this.success = new Hashtable();
      }
      this.success.put(key, val);
    }

    public Hashtable getSuccess() {
      return this.success;
    }

    public void setSuccess(Hashtable success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserIdentities_result)
        return this.equals((getUserIdentities_result)that);
      return false;
    }

    public boolean equals(getUserIdentities_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUserIdentities_result other = (getUserIdentities_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.MAP) {
              {
                TMap _map708 = iprot.readMapBegin();
                this.success = new Hashtable(2*_map708.size);
                for (int _i709 = 0; _i709 < _map708.size; ++_i709)
                {
                  RegistrationType _key710;
                  String _val711;
                  _key710 = RegistrationType.findByValue(iprot.readI32());
                  _val711 = iprot.readString();
                  this.success.put(_key710, _val711);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.I32, TType.STRING, this.success.size()));
          for (Enumeration _iter712_enum = this.success.keys(); _iter712_enum.hasMoreElements(); )           {
            RegistrationType _iter712 = (RegistrationType)_iter712_enum.nextElement();
            oprot.writeI32(_iter712.getValue());
            oprot.writeString(((String)this.success.get(_iter712)));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUserIdentities_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUserLanguage_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUserLanguage_args");


    public getUserLanguage_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserLanguage_args(getUserLanguage_args other) {
    }

    public getUserLanguage_args deepCopy() {
      return new getUserLanguage_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserLanguage_args)
        return this.equals((getUserLanguage_args)that);
      return false;
    }

    public boolean equals(getUserLanguage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUserLanguage_args other = (getUserLanguage_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUserLanguage_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUserLanguage_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUserLanguage_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public getUserLanguage_result() {
    }

    public getUserLanguage_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserLanguage_result(getUserLanguage_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getUserLanguage_result deepCopy() {
      return new getUserLanguage_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserLanguage_result)
        return this.equals((getUserLanguage_result)that);
      return false;
    }

    public boolean equals(getUserLanguage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUserLanguage_result other = (getUserLanguage_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUserLanguage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUserMidsWhoAddedMe_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUserMidsWhoAddedMe_args");


    public getUserMidsWhoAddedMe_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserMidsWhoAddedMe_args(getUserMidsWhoAddedMe_args other) {
    }

    public getUserMidsWhoAddedMe_args deepCopy() {
      return new getUserMidsWhoAddedMe_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserMidsWhoAddedMe_args)
        return this.equals((getUserMidsWhoAddedMe_args)that);
      return false;
    }

    public boolean equals(getUserMidsWhoAddedMe_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUserMidsWhoAddedMe_args other = (getUserMidsWhoAddedMe_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUserMidsWhoAddedMe_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUserMidsWhoAddedMe_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUserMidsWhoAddedMe_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getUserMidsWhoAddedMe_result() {
    }

    public getUserMidsWhoAddedMe_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserMidsWhoAddedMe_result(getUserMidsWhoAddedMe_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getUserMidsWhoAddedMe_result deepCopy() {
      return new getUserMidsWhoAddedMe_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserMidsWhoAddedMe_result)
        return this.equals((getUserMidsWhoAddedMe_result)that);
      return false;
    }

    public boolean equals(getUserMidsWhoAddedMe_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUserMidsWhoAddedMe_result other = (getUserMidsWhoAddedMe_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list713 = iprot.readListBegin();
                this.success = new Vector(_list713.size);
                for (int _i714 = 0; _i714 < _list713.size; ++_i714)
                {
                  String _elem715;
                  _elem715 = iprot.readString();
                  this.success.addElement(_elem715);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter716_enum = this.success.elements(); _iter716_enum.hasMoreElements(); )           {
            String _iter716 = (String)_iter716_enum.nextElement();
            oprot.writeString(_iter716);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUserMidsWhoAddedMe_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class isGroupMember_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("isGroupMember_args");

    private static final TField GROUP_ID_FIELD_DESC = new TField("groupId", TType.STRING, (short)1);

    private String groupId;

    // isset id assignments

    public isGroupMember_args() {
    }

    public isGroupMember_args(
      String groupId)
    {
      this();
      this.groupId = groupId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isGroupMember_args(isGroupMember_args other) {
      if (other.isSetGroupId()) {
        this.groupId = other.groupId;
      }
    }

    public isGroupMember_args deepCopy() {
      return new isGroupMember_args(this);
    }

    public void clear() {
      this.groupId = null;
    }

    public String getGroupId() {
      return this.groupId;
    }

    public void setGroupId(String groupId) {
      this.groupId = groupId;
    }

    public void unsetGroupId() {
      this.groupId = null;
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return this.groupId != null;
    }

    public void setGroupIdIsSet(boolean value) {
      if (!value) {
        this.groupId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isGroupMember_args)
        return this.equals((isGroupMember_args)that);
      return false;
    }

    public boolean equals(isGroupMember_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_groupId = true && this.isSetGroupId();
      boolean that_present_groupId = true && that.isSetGroupId();
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (!this.groupId.equals(that.groupId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      isGroupMember_args other = (isGroupMember_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetGroupId(), other.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = TBaseHelper.compareTo(this.groupId, other.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // GROUP_ID
            if (field.type == TType.STRING) {
              this.groupId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.groupId != null) {
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeString(this.groupId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("isGroupMember_args(");
      boolean first = true;

      sb.append("groupId:");
      if (this.groupId == null) {
        sb.append("null");
      } else {
        sb.append(this.groupId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class isGroupMember_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("isGroupMember_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private boolean success;
    private TalkException e;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public isGroupMember_result() {
    }

    public isGroupMember_result(
      boolean success,
      TalkException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isGroupMember_result(isGroupMember_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public isGroupMember_result deepCopy() {
      return new isGroupMember_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isGroupMember_result)
        return this.equals((isGroupMember_result)that);
      return false;
    }

    public boolean equals(isGroupMember_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      isGroupMember_result other = (isGroupMember_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("isGroupMember_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class isInContact_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("isInContact_args");

    private static final TField MID_FIELD_DESC = new TField("mid", TType.STRING, (short)2);

    private String mid;

    // isset id assignments

    public isInContact_args() {
    }

    public isInContact_args(
      String mid)
    {
      this();
      this.mid = mid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isInContact_args(isInContact_args other) {
      if (other.isSetMid()) {
        this.mid = other.mid;
      }
    }

    public isInContact_args deepCopy() {
      return new isInContact_args(this);
    }

    public void clear() {
      this.mid = null;
    }

    public String getMid() {
      return this.mid;
    }

    public void setMid(String mid) {
      this.mid = mid;
    }

    public void unsetMid() {
      this.mid = null;
    }

    /** Returns true if field mid is set (has been assigned a value) and false otherwise */
    public boolean isSetMid() {
      return this.mid != null;
    }

    public void setMidIsSet(boolean value) {
      if (!value) {
        this.mid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isInContact_args)
        return this.equals((isInContact_args)that);
      return false;
    }

    public boolean equals(isInContact_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mid = true && this.isSetMid();
      boolean that_present_mid = true && that.isSetMid();
      if (this_present_mid || that_present_mid) {
        if (!(this_present_mid && that_present_mid))
          return false;
        if (!this.mid.equals(that.mid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      isInContact_args other = (isInContact_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetMid(), other.isSetMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMid()) {
        lastComparison = TBaseHelper.compareTo(this.mid, other.mid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // MID
            if (field.type == TType.STRING) {
              this.mid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.mid != null) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeString(this.mid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("isInContact_args(");
      boolean first = true;

      sb.append("mid:");
      if (this.mid == null) {
        sb.append("null");
      } else {
        sb.append(this.mid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class isInContact_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("isInContact_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private boolean success;
    private TalkException e;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public isInContact_result() {
    }

    public isInContact_result(
      boolean success,
      TalkException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isInContact_result(isInContact_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public isInContact_result deepCopy() {
      return new isInContact_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isInContact_result)
        return this.equals((isInContact_result)that);
      return false;
    }

    public boolean equals(isInContact_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      isInContact_result other = (isInContact_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("isInContact_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerChannelCP_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerChannelCP_args");

    private static final TField CP_ID_FIELD_DESC = new TField("cpId", TType.STRING, (short)2);
    private static final TField REGISTER_PASSWORD_FIELD_DESC = new TField("registerPassword", TType.STRING, (short)3);

    private String cpId;
    private String registerPassword;

    // isset id assignments

    public registerChannelCP_args() {
    }

    public registerChannelCP_args(
      String cpId,
      String registerPassword)
    {
      this();
      this.cpId = cpId;
      this.registerPassword = registerPassword;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerChannelCP_args(registerChannelCP_args other) {
      if (other.isSetCpId()) {
        this.cpId = other.cpId;
      }
      if (other.isSetRegisterPassword()) {
        this.registerPassword = other.registerPassword;
      }
    }

    public registerChannelCP_args deepCopy() {
      return new registerChannelCP_args(this);
    }

    public void clear() {
      this.cpId = null;
      this.registerPassword = null;
    }

    public String getCpId() {
      return this.cpId;
    }

    public void setCpId(String cpId) {
      this.cpId = cpId;
    }

    public void unsetCpId() {
      this.cpId = null;
    }

    /** Returns true if field cpId is set (has been assigned a value) and false otherwise */
    public boolean isSetCpId() {
      return this.cpId != null;
    }

    public void setCpIdIsSet(boolean value) {
      if (!value) {
        this.cpId = null;
      }
    }

    public String getRegisterPassword() {
      return this.registerPassword;
    }

    public void setRegisterPassword(String registerPassword) {
      this.registerPassword = registerPassword;
    }

    public void unsetRegisterPassword() {
      this.registerPassword = null;
    }

    /** Returns true if field registerPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetRegisterPassword() {
      return this.registerPassword != null;
    }

    public void setRegisterPasswordIsSet(boolean value) {
      if (!value) {
        this.registerPassword = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerChannelCP_args)
        return this.equals((registerChannelCP_args)that);
      return false;
    }

    public boolean equals(registerChannelCP_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cpId = true && this.isSetCpId();
      boolean that_present_cpId = true && that.isSetCpId();
      if (this_present_cpId || that_present_cpId) {
        if (!(this_present_cpId && that_present_cpId))
          return false;
        if (!this.cpId.equals(that.cpId))
          return false;
      }

      boolean this_present_registerPassword = true && this.isSetRegisterPassword();
      boolean that_present_registerPassword = true && that.isSetRegisterPassword();
      if (this_present_registerPassword || that_present_registerPassword) {
        if (!(this_present_registerPassword && that_present_registerPassword))
          return false;
        if (!this.registerPassword.equals(that.registerPassword))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerChannelCP_args other = (registerChannelCP_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetCpId(), other.isSetCpId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCpId()) {
        lastComparison = TBaseHelper.compareTo(this.cpId, other.cpId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetRegisterPassword(), other.isSetRegisterPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegisterPassword()) {
        lastComparison = TBaseHelper.compareTo(this.registerPassword, other.registerPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // CP_ID
            if (field.type == TType.STRING) {
              this.cpId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // REGISTER_PASSWORD
            if (field.type == TType.STRING) {
              this.registerPassword = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.cpId != null) {
        oprot.writeFieldBegin(CP_ID_FIELD_DESC);
        oprot.writeString(this.cpId);
        oprot.writeFieldEnd();
      }
      if (this.registerPassword != null) {
        oprot.writeFieldBegin(REGISTER_PASSWORD_FIELD_DESC);
        oprot.writeString(this.registerPassword);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerChannelCP_args(");
      boolean first = true;

      sb.append("cpId:");
      if (this.cpId == null) {
        sb.append("null");
      } else {
        sb.append(this.cpId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("registerPassword:");
      if (this.registerPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.registerPassword);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerChannelCP_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerChannelCP_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public registerChannelCP_result() {
    }

    public registerChannelCP_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerChannelCP_result(registerChannelCP_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public registerChannelCP_result deepCopy() {
      return new registerChannelCP_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerChannelCP_result)
        return this.equals((registerChannelCP_result)that);
      return false;
    }

    public boolean equals(registerChannelCP_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerChannelCP_result other = (registerChannelCP_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerChannelCP_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class removeNotificationStatus_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("removeNotificationStatus_args");

    private static final TField NOTIFICATION_STATUS_FIELD_DESC = new TField("notificationStatus", TType.I32, (short)2);

    private NotificationStatus notificationStatus;

    // isset id assignments

    public removeNotificationStatus_args() {
    }

    public removeNotificationStatus_args(
      NotificationStatus notificationStatus)
    {
      this();
      this.notificationStatus = notificationStatus;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeNotificationStatus_args(removeNotificationStatus_args other) {
      if (other.isSetNotificationStatus()) {
        this.notificationStatus = other.notificationStatus;
      }
    }

    public removeNotificationStatus_args deepCopy() {
      return new removeNotificationStatus_args(this);
    }

    public void clear() {
      this.notificationStatus = null;
    }

    /**
     * 
     * @see NotificationStatus
     */
    public NotificationStatus getNotificationStatus() {
      return this.notificationStatus;
    }

    /**
     * 
     * @see NotificationStatus
     */
    public void setNotificationStatus(NotificationStatus notificationStatus) {
      this.notificationStatus = notificationStatus;
    }

    public void unsetNotificationStatus() {
      this.notificationStatus = null;
    }

    /** Returns true if field notificationStatus is set (has been assigned a value) and false otherwise */
    public boolean isSetNotificationStatus() {
      return this.notificationStatus != null;
    }

    public void setNotificationStatusIsSet(boolean value) {
      if (!value) {
        this.notificationStatus = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeNotificationStatus_args)
        return this.equals((removeNotificationStatus_args)that);
      return false;
    }

    public boolean equals(removeNotificationStatus_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_notificationStatus = true && this.isSetNotificationStatus();
      boolean that_present_notificationStatus = true && that.isSetNotificationStatus();
      if (this_present_notificationStatus || that_present_notificationStatus) {
        if (!(this_present_notificationStatus && that_present_notificationStatus))
          return false;
        if (!this.notificationStatus.equals(that.notificationStatus))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      removeNotificationStatus_args other = (removeNotificationStatus_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetNotificationStatus(), other.isSetNotificationStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotificationStatus()) {
        lastComparison = TBaseHelper.compareTo(this.notificationStatus, other.notificationStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // NOTIFICATION_STATUS
            if (field.type == TType.I32) {
              this.notificationStatus = NotificationStatus.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.notificationStatus != null) {
        oprot.writeFieldBegin(NOTIFICATION_STATUS_FIELD_DESC);
        oprot.writeI32(this.notificationStatus.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("removeNotificationStatus_args(");
      boolean first = true;

      sb.append("notificationStatus:");
      if (this.notificationStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.notificationStatus);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class removeNotificationStatus_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("removeNotificationStatus_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public removeNotificationStatus_result() {
    }

    public removeNotificationStatus_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeNotificationStatus_result(removeNotificationStatus_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public removeNotificationStatus_result deepCopy() {
      return new removeNotificationStatus_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeNotificationStatus_result)
        return this.equals((removeNotificationStatus_result)that);
      return false;
    }

    public boolean equals(removeNotificationStatus_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      removeNotificationStatus_result other = (removeNotificationStatus_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("removeNotificationStatus_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendMessageForChannel_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendMessageForChannel_args");

    private static final TField MESSAGE_FIELD_DESC = new TField("message", TType.STRUCT, (short)2);

    private Message message;

    // isset id assignments

    public sendMessageForChannel_args() {
    }

    public sendMessageForChannel_args(
      Message message)
    {
      this();
      this.message = message;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMessageForChannel_args(sendMessageForChannel_args other) {
      if (other.isSetMessage()) {
        this.message = new Message(other.message);
      }
    }

    public sendMessageForChannel_args deepCopy() {
      return new sendMessageForChannel_args(this);
    }

    public void clear() {
      this.message = null;
    }

    public Message getMessage() {
      return this.message;
    }

    public void setMessage(Message message) {
      this.message = message;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /** Returns true if field message is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMessageForChannel_args)
        return this.equals((sendMessageForChannel_args)that);
      return false;
    }

    public boolean equals(sendMessageForChannel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendMessageForChannel_args other = (sendMessageForChannel_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetMessage(), other.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = this.message.compareTo(other.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // MESSAGE
            if (field.type == TType.STRUCT) {
              this.message = new Message();
              this.message.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        this.message.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendMessageForChannel_args(");
      boolean first = true;

      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendMessageForChannel_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendMessageForChannel_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Message success;
    private TalkException e;

    // isset id assignments

    public sendMessageForChannel_result() {
    }

    public sendMessageForChannel_result(
      Message success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMessageForChannel_result(sendMessageForChannel_result other) {
      if (other.isSetSuccess()) {
        this.success = new Message(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public sendMessageForChannel_result deepCopy() {
      return new sendMessageForChannel_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Message getSuccess() {
      return this.success;
    }

    public void setSuccess(Message success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMessageForChannel_result)
        return this.equals((sendMessageForChannel_result)that);
      return false;
    }

    public boolean equals(sendMessageForChannel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendMessageForChannel_result other = (sendMessageForChannel_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Message();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendMessageForChannel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendPinCodeOperation_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendPinCodeOperation_args");

    private static final TField VERIFIER_FIELD_DESC = new TField("verifier", TType.STRING, (short)1);

    private String verifier;

    // isset id assignments

    public sendPinCodeOperation_args() {
    }

    public sendPinCodeOperation_args(
      String verifier)
    {
      this();
      this.verifier = verifier;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendPinCodeOperation_args(sendPinCodeOperation_args other) {
      if (other.isSetVerifier()) {
        this.verifier = other.verifier;
      }
    }

    public sendPinCodeOperation_args deepCopy() {
      return new sendPinCodeOperation_args(this);
    }

    public void clear() {
      this.verifier = null;
    }

    public String getVerifier() {
      return this.verifier;
    }

    public void setVerifier(String verifier) {
      this.verifier = verifier;
    }

    public void unsetVerifier() {
      this.verifier = null;
    }

    /** Returns true if field verifier is set (has been assigned a value) and false otherwise */
    public boolean isSetVerifier() {
      return this.verifier != null;
    }

    public void setVerifierIsSet(boolean value) {
      if (!value) {
        this.verifier = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendPinCodeOperation_args)
        return this.equals((sendPinCodeOperation_args)that);
      return false;
    }

    public boolean equals(sendPinCodeOperation_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_verifier = true && this.isSetVerifier();
      boolean that_present_verifier = true && that.isSetVerifier();
      if (this_present_verifier || that_present_verifier) {
        if (!(this_present_verifier && that_present_verifier))
          return false;
        if (!this.verifier.equals(that.verifier))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendPinCodeOperation_args other = (sendPinCodeOperation_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetVerifier(), other.isSetVerifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVerifier()) {
        lastComparison = TBaseHelper.compareTo(this.verifier, other.verifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // VERIFIER
            if (field.type == TType.STRING) {
              this.verifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.verifier != null) {
        oprot.writeFieldBegin(VERIFIER_FIELD_DESC);
        oprot.writeString(this.verifier);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendPinCodeOperation_args(");
      boolean first = true;

      sb.append("verifier:");
      if (this.verifier == null) {
        sb.append("null");
      } else {
        sb.append(this.verifier);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendPinCodeOperation_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendPinCodeOperation_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public sendPinCodeOperation_result() {
    }

    public sendPinCodeOperation_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendPinCodeOperation_result(sendPinCodeOperation_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public sendPinCodeOperation_result deepCopy() {
      return new sendPinCodeOperation_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendPinCodeOperation_result)
        return this.equals((sendPinCodeOperation_result)that);
      return false;
    }

    public boolean equals(sendPinCodeOperation_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendPinCodeOperation_result other = (sendPinCodeOperation_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendPinCodeOperation_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateProfileAttributeForChannel_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateProfileAttributeForChannel_args");

    private static final TField PROFILE_ATTRIBUTE_FIELD_DESC = new TField("profileAttribute", TType.I32, (short)2);
    private static final TField VALUE_FIELD_DESC = new TField("value", TType.STRING, (short)3);

    private ProfileAttribute profileAttribute;
    private String value;

    // isset id assignments

    public updateProfileAttributeForChannel_args() {
    }

    public updateProfileAttributeForChannel_args(
      ProfileAttribute profileAttribute,
      String value)
    {
      this();
      this.profileAttribute = profileAttribute;
      this.value = value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProfileAttributeForChannel_args(updateProfileAttributeForChannel_args other) {
      if (other.isSetProfileAttribute()) {
        this.profileAttribute = other.profileAttribute;
      }
      if (other.isSetValue()) {
        this.value = other.value;
      }
    }

    public updateProfileAttributeForChannel_args deepCopy() {
      return new updateProfileAttributeForChannel_args(this);
    }

    public void clear() {
      this.profileAttribute = null;
      this.value = null;
    }

    /**
     * 
     * @see ProfileAttribute
     */
    public ProfileAttribute getProfileAttribute() {
      return this.profileAttribute;
    }

    /**
     * 
     * @see ProfileAttribute
     */
    public void setProfileAttribute(ProfileAttribute profileAttribute) {
      this.profileAttribute = profileAttribute;
    }

    public void unsetProfileAttribute() {
      this.profileAttribute = null;
    }

    /** Returns true if field profileAttribute is set (has been assigned a value) and false otherwise */
    public boolean isSetProfileAttribute() {
      return this.profileAttribute != null;
    }

    public void setProfileAttributeIsSet(boolean value) {
      if (!value) {
        this.profileAttribute = null;
      }
    }

    public String getValue() {
      return this.value;
    }

    public void setValue(String value) {
      this.value = value;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProfileAttributeForChannel_args)
        return this.equals((updateProfileAttributeForChannel_args)that);
      return false;
    }

    public boolean equals(updateProfileAttributeForChannel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_profileAttribute = true && this.isSetProfileAttribute();
      boolean that_present_profileAttribute = true && that.isSetProfileAttribute();
      if (this_present_profileAttribute || that_present_profileAttribute) {
        if (!(this_present_profileAttribute && that_present_profileAttribute))
          return false;
        if (!this.profileAttribute.equals(that.profileAttribute))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateProfileAttributeForChannel_args other = (updateProfileAttributeForChannel_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetProfileAttribute(), other.isSetProfileAttribute());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProfileAttribute()) {
        lastComparison = TBaseHelper.compareTo(this.profileAttribute, other.profileAttribute);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetValue(), other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // PROFILE_ATTRIBUTE
            if (field.type == TType.I32) {
              this.profileAttribute = ProfileAttribute.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // VALUE
            if (field.type == TType.STRING) {
              this.value = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.profileAttribute != null) {
        oprot.writeFieldBegin(PROFILE_ATTRIBUTE_FIELD_DESC);
        oprot.writeI32(this.profileAttribute.getValue());
        oprot.writeFieldEnd();
      }
      if (this.value != null) {
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeString(this.value);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateProfileAttributeForChannel_args(");
      boolean first = true;

      sb.append("profileAttribute:");
      if (this.profileAttribute == null) {
        sb.append("null");
      } else {
        sb.append(this.profileAttribute);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateProfileAttributeForChannel_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateProfileAttributeForChannel_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public updateProfileAttributeForChannel_result() {
    }

    public updateProfileAttributeForChannel_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProfileAttributeForChannel_result(updateProfileAttributeForChannel_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public updateProfileAttributeForChannel_result deepCopy() {
      return new updateProfileAttributeForChannel_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProfileAttributeForChannel_result)
        return this.equals((updateProfileAttributeForChannel_result)that);
      return false;
    }

    public boolean equals(updateProfileAttributeForChannel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateProfileAttributeForChannel_result other = (updateProfileAttributeForChannel_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateProfileAttributeForChannel_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
