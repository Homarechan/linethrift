/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class PaidCallResponse implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("PaidCallResponse");

  private static final TField HOST_FIELD_DESC = new TField("host", TType.STRUCT, (short)1);
  private static final TField DIALING_FIELD_DESC = new TField("dialing", TType.STRUCT, (short)2);
  private static final TField TOKEN_FIELD_DESC = new TField("token", TType.STRING, (short)3);
  private static final TField SPOT_ITEMS_FIELD_DESC = new TField("spotItems", TType.LIST, (short)4);

  private CallHost host;
  private PaidCallDialing dialing;
  private String token;
  private Vector spotItems;

  // isset id assignments

  public PaidCallResponse() {
  }

  public PaidCallResponse(
    CallHost host,
    PaidCallDialing dialing,
    String token,
    Vector spotItems)
  {
    this();
    this.host = host;
    this.dialing = dialing;
    this.token = token;
    this.spotItems = spotItems;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PaidCallResponse(PaidCallResponse other) {
    if (other.isSetHost()) {
      this.host = new CallHost(other.host);
    }
    if (other.isSetDialing()) {
      this.dialing = new PaidCallDialing(other.dialing);
    }
    if (other.isSetToken()) {
      this.token = other.token;
    }
    if (other.isSetSpotItems()) {
      Vector __this__spotItems = new Vector();
      for (Enumeration other_enum = other.spotItems.elements(); other_enum.hasMoreElements(); ) {
        SpotItem other_element = (SpotItem)other_enum.nextElement();
        __this__spotItems.addElement(new SpotItem(other_element));
      }
      this.spotItems = __this__spotItems;
    }
  }

  public PaidCallResponse deepCopy() {
    return new PaidCallResponse(this);
  }

  public void clear() {
    this.host = null;
    this.dialing = null;
    this.token = null;
    this.spotItems = null;
  }

  public CallHost getHost() {
    return this.host;
  }

  public void setHost(CallHost host) {
    this.host = host;
  }

  public void unsetHost() {
    this.host = null;
  }

  /** Returns true if field host is set (has been assigned a value) and false otherwise */
  public boolean isSetHost() {
    return this.host != null;
  }

  public void setHostIsSet(boolean value) {
    if (!value) {
      this.host = null;
    }
  }

  public PaidCallDialing getDialing() {
    return this.dialing;
  }

  public void setDialing(PaidCallDialing dialing) {
    this.dialing = dialing;
  }

  public void unsetDialing() {
    this.dialing = null;
  }

  /** Returns true if field dialing is set (has been assigned a value) and false otherwise */
  public boolean isSetDialing() {
    return this.dialing != null;
  }

  public void setDialingIsSet(boolean value) {
    if (!value) {
      this.dialing = null;
    }
  }

  public String getToken() {
    return this.token;
  }

  public void setToken(String token) {
    this.token = token;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  public int getSpotItemsSize() {
    return (this.spotItems == null) ? 0 : this.spotItems.size();
  }

  public Enumeration getSpotItemsEnumeration() {
    return (this.spotItems == null) ? null : this.spotItems.elements();
  }

  public void addToSpotItems(SpotItem elem) {
    if (this.spotItems == null) {
      this.spotItems = new Vector();
    }
    this.spotItems.addElement(elem);
  }

  public Vector getSpotItems() {
    return this.spotItems;
  }

  public void setSpotItems(Vector spotItems) {
    this.spotItems = spotItems;
  }

  public void unsetSpotItems() {
    this.spotItems = null;
  }

  /** Returns true if field spotItems is set (has been assigned a value) and false otherwise */
  public boolean isSetSpotItems() {
    return this.spotItems != null;
  }

  public void setSpotItemsIsSet(boolean value) {
    if (!value) {
      this.spotItems = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PaidCallResponse)
      return this.equals((PaidCallResponse)that);
    return false;
  }

  public boolean equals(PaidCallResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_host = true && this.isSetHost();
    boolean that_present_host = true && that.isSetHost();
    if (this_present_host || that_present_host) {
      if (!(this_present_host && that_present_host))
        return false;
      if (!this.host.equals(that.host))
        return false;
    }

    boolean this_present_dialing = true && this.isSetDialing();
    boolean that_present_dialing = true && that.isSetDialing();
    if (this_present_dialing || that_present_dialing) {
      if (!(this_present_dialing && that_present_dialing))
        return false;
      if (!this.dialing.equals(that.dialing))
        return false;
    }

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_spotItems = true && this.isSetSpotItems();
    boolean that_present_spotItems = true && that.isSetSpotItems();
    if (this_present_spotItems || that_present_spotItems) {
      if (!(this_present_spotItems && that_present_spotItems))
        return false;
      if (!this.spotItems.equals(that.spotItems))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    PaidCallResponse other = (PaidCallResponse)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetHost(), other.isSetHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHost()) {
      lastComparison = this.host.compareTo(other.host);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetDialing(), other.isSetDialing());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDialing()) {
      lastComparison = this.dialing.compareTo(other.dialing);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetToken(), other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSpotItems(), other.isSetSpotItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpotItems()) {
      lastComparison = TBaseHelper.compareTo(this.spotItems, other.spotItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // HOST
          if (field.type == TType.STRUCT) {
            this.host = new CallHost();
            this.host.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // DIALING
          if (field.type == TType.STRUCT) {
            this.dialing = new PaidCallDialing();
            this.dialing.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // TOKEN
          if (field.type == TType.STRING) {
            this.token = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // SPOT_ITEMS
          if (field.type == TType.LIST) {
            {
              TList _list32 = iprot.readListBegin();
              this.spotItems = new Vector(_list32.size);
              for (int _i33 = 0; _i33 < _list32.size; ++_i33)
              {
                SpotItem _elem34;
                _elem34 = new SpotItem();
                _elem34.read(iprot);
                this.spotItems.addElement(_elem34);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.host != null) {
      oprot.writeFieldBegin(HOST_FIELD_DESC);
      this.host.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.dialing != null) {
      oprot.writeFieldBegin(DIALING_FIELD_DESC);
      this.dialing.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.token != null) {
      oprot.writeFieldBegin(TOKEN_FIELD_DESC);
      oprot.writeString(this.token);
      oprot.writeFieldEnd();
    }
    if (this.spotItems != null) {
      oprot.writeFieldBegin(SPOT_ITEMS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.spotItems.size()));
        for (Enumeration _iter35_enum = this.spotItems.elements(); _iter35_enum.hasMoreElements(); )         {
          SpotItem _iter35 = (SpotItem)_iter35_enum.nextElement();
          _iter35.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("PaidCallResponse(");
    boolean first = true;

    sb.append("host:");
    if (this.host == null) {
      sb.append("null");
    } else {
      sb.append(this.host);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dialing:");
    if (this.dialing == null) {
      sb.append("null");
    } else {
      sb.append(this.dialing);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("token:");
    if (this.token == null) {
      sb.append("null");
    } else {
      sb.append(this.token);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("spotItems:");
    if (this.spotItems == null) {
      sb.append("null");
    } else {
      sb.append(this.spotItems);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

