/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class EmailConfirmation implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("EmailConfirmation");

  private static final TField USE_PASSWORD_SET_FIELD_DESC = new TField("usePasswordSet", TType.BOOL, (short)1);
  private static final TField EMAIL_FIELD_DESC = new TField("email", TType.STRING, (short)2);
  private static final TField PASSWORD_FIELD_DESC = new TField("password", TType.STRING, (short)3);
  private static final TField IGNORE_DUPLICATION_FIELD_DESC = new TField("ignoreDuplication", TType.BOOL, (short)4);

  private boolean usePasswordSet;
  private String email;
  private String password;
  private boolean ignoreDuplication;

  // isset id assignments
  private static final int __USEPASSWORDSET_ISSET_ID = 0;
  private static final int __IGNOREDUPLICATION_ISSET_ID = 1;
  private boolean[] __isset_vector = new boolean[2];

  public EmailConfirmation() {
  }

  public EmailConfirmation(
    boolean usePasswordSet,
    String email,
    String password,
    boolean ignoreDuplication)
  {
    this();
    this.usePasswordSet = usePasswordSet;
    setUsePasswordSetIsSet(true);
    this.email = email;
    this.password = password;
    this.ignoreDuplication = ignoreDuplication;
    setIgnoreDuplicationIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EmailConfirmation(EmailConfirmation other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    this.usePasswordSet = other.usePasswordSet;
    if (other.isSetEmail()) {
      this.email = other.email;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    this.ignoreDuplication = other.ignoreDuplication;
  }

  public EmailConfirmation deepCopy() {
    return new EmailConfirmation(this);
  }

  public void clear() {
    setUsePasswordSetIsSet(false);
    this.usePasswordSet = false;
    this.email = null;
    this.password = null;
    setIgnoreDuplicationIsSet(false);
    this.ignoreDuplication = false;
  }

  public boolean isUsePasswordSet() {
    return this.usePasswordSet;
  }

  public void setUsePasswordSet(boolean usePasswordSet) {
    this.usePasswordSet = usePasswordSet;
    setUsePasswordSetIsSet(true);
  }

  public void unsetUsePasswordSet() {
    __isset_vector[__USEPASSWORDSET_ISSET_ID] = false;
  }

  /** Returns true if field usePasswordSet is set (has been assigned a value) and false otherwise */
  public boolean isSetUsePasswordSet() {
    return __isset_vector[__USEPASSWORDSET_ISSET_ID];
  }

  public void setUsePasswordSetIsSet(boolean value) {
    __isset_vector[__USEPASSWORDSET_ISSET_ID] = value;
  }

  public String getEmail() {
    return this.email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public void unsetEmail() {
    this.email = null;
  }

  /** Returns true if field email is set (has been assigned a value) and false otherwise */
  public boolean isSetEmail() {
    return this.email != null;
  }

  public void setEmailIsSet(boolean value) {
    if (!value) {
      this.email = null;
    }
  }

  public String getPassword() {
    return this.password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public boolean isIgnoreDuplication() {
    return this.ignoreDuplication;
  }

  public void setIgnoreDuplication(boolean ignoreDuplication) {
    this.ignoreDuplication = ignoreDuplication;
    setIgnoreDuplicationIsSet(true);
  }

  public void unsetIgnoreDuplication() {
    __isset_vector[__IGNOREDUPLICATION_ISSET_ID] = false;
  }

  /** Returns true if field ignoreDuplication is set (has been assigned a value) and false otherwise */
  public boolean isSetIgnoreDuplication() {
    return __isset_vector[__IGNOREDUPLICATION_ISSET_ID];
  }

  public void setIgnoreDuplicationIsSet(boolean value) {
    __isset_vector[__IGNOREDUPLICATION_ISSET_ID] = value;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EmailConfirmation)
      return this.equals((EmailConfirmation)that);
    return false;
  }

  public boolean equals(EmailConfirmation that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_usePasswordSet = true;
    boolean that_present_usePasswordSet = true;
    if (this_present_usePasswordSet || that_present_usePasswordSet) {
      if (!(this_present_usePasswordSet && that_present_usePasswordSet))
        return false;
      if (this.usePasswordSet != that.usePasswordSet)
        return false;
    }

    boolean this_present_email = true && this.isSetEmail();
    boolean that_present_email = true && that.isSetEmail();
    if (this_present_email || that_present_email) {
      if (!(this_present_email && that_present_email))
        return false;
      if (!this.email.equals(that.email))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_ignoreDuplication = true;
    boolean that_present_ignoreDuplication = true;
    if (this_present_ignoreDuplication || that_present_ignoreDuplication) {
      if (!(this_present_ignoreDuplication && that_present_ignoreDuplication))
        return false;
      if (this.ignoreDuplication != that.ignoreDuplication)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    EmailConfirmation other = (EmailConfirmation)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetUsePasswordSet(), other.isSetUsePasswordSet());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsePasswordSet()) {
      lastComparison = TBaseHelper.compareTo(this.usePasswordSet, other.usePasswordSet);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetEmail(), other.isSetEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmail()) {
      lastComparison = TBaseHelper.compareTo(this.email, other.email);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetPassword(), other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetIgnoreDuplication(), other.isSetIgnoreDuplication());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIgnoreDuplication()) {
      lastComparison = TBaseHelper.compareTo(this.ignoreDuplication, other.ignoreDuplication);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // USE_PASSWORD_SET
          if (field.type == TType.BOOL) {
            this.usePasswordSet = iprot.readBool();
            setUsePasswordSetIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // EMAIL
          if (field.type == TType.STRING) {
            this.email = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // PASSWORD
          if (field.type == TType.STRING) {
            this.password = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // IGNORE_DUPLICATION
          if (field.type == TType.BOOL) {
            this.ignoreDuplication = iprot.readBool();
            setIgnoreDuplicationIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(USE_PASSWORD_SET_FIELD_DESC);
    oprot.writeBool(this.usePasswordSet);
    oprot.writeFieldEnd();
    if (this.email != null) {
      oprot.writeFieldBegin(EMAIL_FIELD_DESC);
      oprot.writeString(this.email);
      oprot.writeFieldEnd();
    }
    if (this.password != null) {
      oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
      oprot.writeString(this.password);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(IGNORE_DUPLICATION_FIELD_DESC);
    oprot.writeBool(this.ignoreDuplication);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("EmailConfirmation(");
    boolean first = true;

    sb.append("usePasswordSet:");
    sb.append(this.usePasswordSet);
    first = false;
    if (!first) sb.append(", ");
    sb.append("email:");
    if (this.email == null) {
      sb.append("null");
    } else {
      sb.append(this.email);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("password:");
    if (this.password == null) {
      sb.append("null");
    } else {
      sb.append(this.password);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ignoreDuplication:");
    sb.append(this.ignoreDuplication);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

