/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class FindSquareByInvitationTicketRequest implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("FindSquareByInvitationTicketRequest");

  private static final TField INVITATION_TICKET_FIELD_DESC = new TField("invitationTicket", TType.STRING, (short)2);

  private String invitationTicket;

  // isset id assignments

  public FindSquareByInvitationTicketRequest() {
  }

  public FindSquareByInvitationTicketRequest(
    String invitationTicket)
  {
    this();
    this.invitationTicket = invitationTicket;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FindSquareByInvitationTicketRequest(FindSquareByInvitationTicketRequest other) {
    if (other.isSetInvitationTicket()) {
      this.invitationTicket = other.invitationTicket;
    }
  }

  public FindSquareByInvitationTicketRequest deepCopy() {
    return new FindSquareByInvitationTicketRequest(this);
  }

  public void clear() {
    this.invitationTicket = null;
  }

  public String getInvitationTicket() {
    return this.invitationTicket;
  }

  public void setInvitationTicket(String invitationTicket) {
    this.invitationTicket = invitationTicket;
  }

  public void unsetInvitationTicket() {
    this.invitationTicket = null;
  }

  /** Returns true if field invitationTicket is set (has been assigned a value) and false otherwise */
  public boolean isSetInvitationTicket() {
    return this.invitationTicket != null;
  }

  public void setInvitationTicketIsSet(boolean value) {
    if (!value) {
      this.invitationTicket = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FindSquareByInvitationTicketRequest)
      return this.equals((FindSquareByInvitationTicketRequest)that);
    return false;
  }

  public boolean equals(FindSquareByInvitationTicketRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_invitationTicket = true && this.isSetInvitationTicket();
    boolean that_present_invitationTicket = true && that.isSetInvitationTicket();
    if (this_present_invitationTicket || that_present_invitationTicket) {
      if (!(this_present_invitationTicket && that_present_invitationTicket))
        return false;
      if (!this.invitationTicket.equals(that.invitationTicket))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    FindSquareByInvitationTicketRequest other = (FindSquareByInvitationTicketRequest)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetInvitationTicket(), other.isSetInvitationTicket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvitationTicket()) {
      lastComparison = TBaseHelper.compareTo(this.invitationTicket, other.invitationTicket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 2: // INVITATION_TICKET
          if (field.type == TType.STRING) {
            this.invitationTicket = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.invitationTicket != null) {
      oprot.writeFieldBegin(INVITATION_TICKET_FIELD_DESC);
      oprot.writeString(this.invitationTicket);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("FindSquareByInvitationTicketRequest(");
    boolean first = true;

    sb.append("invitationTicket:");
    if (this.invitationTicket == null) {
      sb.append("null");
    } else {
      sb.append(this.invitationTicket);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

