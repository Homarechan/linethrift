/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class SyncScope implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("SyncScope");

  private static final TField SYNC_PROFILE_FIELD_DESC = new TField("syncProfile", TType.BOOL, (short)1);
  private static final TField SYNC_SETTINGS_FIELD_DESC = new TField("syncSettings", TType.BOOL, (short)2);
  private static final TField SYNC_STICKER_FIELD_DESC = new TField("syncSticker", TType.BOOL, (short)3);
  private static final TField SYNC_THEME_SHOP_FIELD_DESC = new TField("syncThemeShop", TType.BOOL, (short)4);
  private static final TField CONTACT_FIELD_DESC = new TField("contact", TType.STRUCT, (short)10);
  private static final TField GROUP_FIELD_DESC = new TField("group", TType.STRUCT, (short)11);
  private static final TField ROOM_FIELD_DESC = new TField("room", TType.STRUCT, (short)12);
  private static final TField CHAT_FIELD_DESC = new TField("chat", TType.STRUCT, (short)13);

  private boolean syncProfile;
  private boolean syncSettings;
  private boolean syncSticker;
  private boolean syncThemeShop;
  private SyncRelations contact;
  private SyncRelations group;
  private SyncRelations room;
  private SyncRelations chat;

  // isset id assignments
  private static final int __SYNCPROFILE_ISSET_ID = 0;
  private static final int __SYNCSETTINGS_ISSET_ID = 1;
  private static final int __SYNCSTICKER_ISSET_ID = 2;
  private static final int __SYNCTHEMESHOP_ISSET_ID = 3;
  private boolean[] __isset_vector = new boolean[4];

  public SyncScope() {
  }

  public SyncScope(
    boolean syncProfile,
    boolean syncSettings,
    boolean syncSticker,
    boolean syncThemeShop,
    SyncRelations contact,
    SyncRelations group,
    SyncRelations room,
    SyncRelations chat)
  {
    this();
    this.syncProfile = syncProfile;
    setSyncProfileIsSet(true);
    this.syncSettings = syncSettings;
    setSyncSettingsIsSet(true);
    this.syncSticker = syncSticker;
    setSyncStickerIsSet(true);
    this.syncThemeShop = syncThemeShop;
    setSyncThemeShopIsSet(true);
    this.contact = contact;
    this.group = group;
    this.room = room;
    this.chat = chat;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SyncScope(SyncScope other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    this.syncProfile = other.syncProfile;
    this.syncSettings = other.syncSettings;
    this.syncSticker = other.syncSticker;
    this.syncThemeShop = other.syncThemeShop;
    if (other.isSetContact()) {
      this.contact = new SyncRelations(other.contact);
    }
    if (other.isSetGroup()) {
      this.group = new SyncRelations(other.group);
    }
    if (other.isSetRoom()) {
      this.room = new SyncRelations(other.room);
    }
    if (other.isSetChat()) {
      this.chat = new SyncRelations(other.chat);
    }
  }

  public SyncScope deepCopy() {
    return new SyncScope(this);
  }

  public void clear() {
    setSyncProfileIsSet(false);
    this.syncProfile = false;
    setSyncSettingsIsSet(false);
    this.syncSettings = false;
    setSyncStickerIsSet(false);
    this.syncSticker = false;
    setSyncThemeShopIsSet(false);
    this.syncThemeShop = false;
    this.contact = null;
    this.group = null;
    this.room = null;
    this.chat = null;
  }

  public boolean isSyncProfile() {
    return this.syncProfile;
  }

  public void setSyncProfile(boolean syncProfile) {
    this.syncProfile = syncProfile;
    setSyncProfileIsSet(true);
  }

  public void unsetSyncProfile() {
    __isset_vector[__SYNCPROFILE_ISSET_ID] = false;
  }

  /** Returns true if field syncProfile is set (has been assigned a value) and false otherwise */
  public boolean isSetSyncProfile() {
    return __isset_vector[__SYNCPROFILE_ISSET_ID];
  }

  public void setSyncProfileIsSet(boolean value) {
    __isset_vector[__SYNCPROFILE_ISSET_ID] = value;
  }

  public boolean isSyncSettings() {
    return this.syncSettings;
  }

  public void setSyncSettings(boolean syncSettings) {
    this.syncSettings = syncSettings;
    setSyncSettingsIsSet(true);
  }

  public void unsetSyncSettings() {
    __isset_vector[__SYNCSETTINGS_ISSET_ID] = false;
  }

  /** Returns true if field syncSettings is set (has been assigned a value) and false otherwise */
  public boolean isSetSyncSettings() {
    return __isset_vector[__SYNCSETTINGS_ISSET_ID];
  }

  public void setSyncSettingsIsSet(boolean value) {
    __isset_vector[__SYNCSETTINGS_ISSET_ID] = value;
  }

  public boolean isSyncSticker() {
    return this.syncSticker;
  }

  public void setSyncSticker(boolean syncSticker) {
    this.syncSticker = syncSticker;
    setSyncStickerIsSet(true);
  }

  public void unsetSyncSticker() {
    __isset_vector[__SYNCSTICKER_ISSET_ID] = false;
  }

  /** Returns true if field syncSticker is set (has been assigned a value) and false otherwise */
  public boolean isSetSyncSticker() {
    return __isset_vector[__SYNCSTICKER_ISSET_ID];
  }

  public void setSyncStickerIsSet(boolean value) {
    __isset_vector[__SYNCSTICKER_ISSET_ID] = value;
  }

  public boolean isSyncThemeShop() {
    return this.syncThemeShop;
  }

  public void setSyncThemeShop(boolean syncThemeShop) {
    this.syncThemeShop = syncThemeShop;
    setSyncThemeShopIsSet(true);
  }

  public void unsetSyncThemeShop() {
    __isset_vector[__SYNCTHEMESHOP_ISSET_ID] = false;
  }

  /** Returns true if field syncThemeShop is set (has been assigned a value) and false otherwise */
  public boolean isSetSyncThemeShop() {
    return __isset_vector[__SYNCTHEMESHOP_ISSET_ID];
  }

  public void setSyncThemeShopIsSet(boolean value) {
    __isset_vector[__SYNCTHEMESHOP_ISSET_ID] = value;
  }

  public SyncRelations getContact() {
    return this.contact;
  }

  public void setContact(SyncRelations contact) {
    this.contact = contact;
  }

  public void unsetContact() {
    this.contact = null;
  }

  /** Returns true if field contact is set (has been assigned a value) and false otherwise */
  public boolean isSetContact() {
    return this.contact != null;
  }

  public void setContactIsSet(boolean value) {
    if (!value) {
      this.contact = null;
    }
  }

  public SyncRelations getGroup() {
    return this.group;
  }

  public void setGroup(SyncRelations group) {
    this.group = group;
  }

  public void unsetGroup() {
    this.group = null;
  }

  /** Returns true if field group is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup() {
    return this.group != null;
  }

  public void setGroupIsSet(boolean value) {
    if (!value) {
      this.group = null;
    }
  }

  public SyncRelations getRoom() {
    return this.room;
  }

  public void setRoom(SyncRelations room) {
    this.room = room;
  }

  public void unsetRoom() {
    this.room = null;
  }

  /** Returns true if field room is set (has been assigned a value) and false otherwise */
  public boolean isSetRoom() {
    return this.room != null;
  }

  public void setRoomIsSet(boolean value) {
    if (!value) {
      this.room = null;
    }
  }

  public SyncRelations getChat() {
    return this.chat;
  }

  public void setChat(SyncRelations chat) {
    this.chat = chat;
  }

  public void unsetChat() {
    this.chat = null;
  }

  /** Returns true if field chat is set (has been assigned a value) and false otherwise */
  public boolean isSetChat() {
    return this.chat != null;
  }

  public void setChatIsSet(boolean value) {
    if (!value) {
      this.chat = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SyncScope)
      return this.equals((SyncScope)that);
    return false;
  }

  public boolean equals(SyncScope that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_syncProfile = true;
    boolean that_present_syncProfile = true;
    if (this_present_syncProfile || that_present_syncProfile) {
      if (!(this_present_syncProfile && that_present_syncProfile))
        return false;
      if (this.syncProfile != that.syncProfile)
        return false;
    }

    boolean this_present_syncSettings = true;
    boolean that_present_syncSettings = true;
    if (this_present_syncSettings || that_present_syncSettings) {
      if (!(this_present_syncSettings && that_present_syncSettings))
        return false;
      if (this.syncSettings != that.syncSettings)
        return false;
    }

    boolean this_present_syncSticker = true;
    boolean that_present_syncSticker = true;
    if (this_present_syncSticker || that_present_syncSticker) {
      if (!(this_present_syncSticker && that_present_syncSticker))
        return false;
      if (this.syncSticker != that.syncSticker)
        return false;
    }

    boolean this_present_syncThemeShop = true;
    boolean that_present_syncThemeShop = true;
    if (this_present_syncThemeShop || that_present_syncThemeShop) {
      if (!(this_present_syncThemeShop && that_present_syncThemeShop))
        return false;
      if (this.syncThemeShop != that.syncThemeShop)
        return false;
    }

    boolean this_present_contact = true && this.isSetContact();
    boolean that_present_contact = true && that.isSetContact();
    if (this_present_contact || that_present_contact) {
      if (!(this_present_contact && that_present_contact))
        return false;
      if (!this.contact.equals(that.contact))
        return false;
    }

    boolean this_present_group = true && this.isSetGroup();
    boolean that_present_group = true && that.isSetGroup();
    if (this_present_group || that_present_group) {
      if (!(this_present_group && that_present_group))
        return false;
      if (!this.group.equals(that.group))
        return false;
    }

    boolean this_present_room = true && this.isSetRoom();
    boolean that_present_room = true && that.isSetRoom();
    if (this_present_room || that_present_room) {
      if (!(this_present_room && that_present_room))
        return false;
      if (!this.room.equals(that.room))
        return false;
    }

    boolean this_present_chat = true && this.isSetChat();
    boolean that_present_chat = true && that.isSetChat();
    if (this_present_chat || that_present_chat) {
      if (!(this_present_chat && that_present_chat))
        return false;
      if (!this.chat.equals(that.chat))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    SyncScope other = (SyncScope)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetSyncProfile(), other.isSetSyncProfile());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSyncProfile()) {
      lastComparison = TBaseHelper.compareTo(this.syncProfile, other.syncProfile);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSyncSettings(), other.isSetSyncSettings());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSyncSettings()) {
      lastComparison = TBaseHelper.compareTo(this.syncSettings, other.syncSettings);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSyncSticker(), other.isSetSyncSticker());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSyncSticker()) {
      lastComparison = TBaseHelper.compareTo(this.syncSticker, other.syncSticker);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSyncThemeShop(), other.isSetSyncThemeShop());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSyncThemeShop()) {
      lastComparison = TBaseHelper.compareTo(this.syncThemeShop, other.syncThemeShop);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetContact(), other.isSetContact());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContact()) {
      lastComparison = this.contact.compareTo(other.contact);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetGroup(), other.isSetGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup()) {
      lastComparison = this.group.compareTo(other.group);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetRoom(), other.isSetRoom());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoom()) {
      lastComparison = this.room.compareTo(other.room);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetChat(), other.isSetChat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChat()) {
      lastComparison = this.chat.compareTo(other.chat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // SYNC_PROFILE
          if (field.type == TType.BOOL) {
            this.syncProfile = iprot.readBool();
            setSyncProfileIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SYNC_SETTINGS
          if (field.type == TType.BOOL) {
            this.syncSettings = iprot.readBool();
            setSyncSettingsIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SYNC_STICKER
          if (field.type == TType.BOOL) {
            this.syncSticker = iprot.readBool();
            setSyncStickerIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // SYNC_THEME_SHOP
          if (field.type == TType.BOOL) {
            this.syncThemeShop = iprot.readBool();
            setSyncThemeShopIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // CONTACT
          if (field.type == TType.STRUCT) {
            this.contact = new SyncRelations();
            this.contact.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // GROUP
          if (field.type == TType.STRUCT) {
            this.group = new SyncRelations();
            this.group.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // ROOM
          if (field.type == TType.STRUCT) {
            this.room = new SyncRelations();
            this.room.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // CHAT
          if (field.type == TType.STRUCT) {
            this.chat = new SyncRelations();
            this.chat.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(SYNC_PROFILE_FIELD_DESC);
    oprot.writeBool(this.syncProfile);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SYNC_SETTINGS_FIELD_DESC);
    oprot.writeBool(this.syncSettings);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SYNC_STICKER_FIELD_DESC);
    oprot.writeBool(this.syncSticker);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SYNC_THEME_SHOP_FIELD_DESC);
    oprot.writeBool(this.syncThemeShop);
    oprot.writeFieldEnd();
    if (this.contact != null) {
      oprot.writeFieldBegin(CONTACT_FIELD_DESC);
      this.contact.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.group != null) {
      oprot.writeFieldBegin(GROUP_FIELD_DESC);
      this.group.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.room != null) {
      oprot.writeFieldBegin(ROOM_FIELD_DESC);
      this.room.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.chat != null) {
      oprot.writeFieldBegin(CHAT_FIELD_DESC);
      this.chat.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("SyncScope(");
    boolean first = true;

    sb.append("syncProfile:");
    sb.append(this.syncProfile);
    first = false;
    if (!first) sb.append(", ");
    sb.append("syncSettings:");
    sb.append(this.syncSettings);
    first = false;
    if (!first) sb.append(", ");
    sb.append("syncSticker:");
    sb.append(this.syncSticker);
    first = false;
    if (!first) sb.append(", ");
    sb.append("syncThemeShop:");
    sb.append(this.syncThemeShop);
    first = false;
    if (!first) sb.append(", ");
    sb.append("contact:");
    if (this.contact == null) {
      sb.append("null");
    } else {
      sb.append(this.contact);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("group:");
    if (this.group == null) {
      sb.append("null");
    } else {
      sb.append(this.group);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("room:");
    if (this.room == null) {
      sb.append("null");
    } else {
      sb.append(this.room);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chat:");
    if (this.chat == null) {
      sb.append("null");
    } else {
      sb.append(this.chat);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

