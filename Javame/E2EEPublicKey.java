/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class E2EEPublicKey implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("E2EEPublicKey");

  private static final TField VERSION_FIELD_DESC = new TField("version", TType.I32, (short)1);
  private static final TField KEY_ID_FIELD_DESC = new TField("keyId", TType.I32, (short)2);
  private static final TField KEY_DATA_FIELD_DESC = new TField("keyData", TType.STRING, (short)4);
  private static final TField CREATED_TIME_FIELD_DESC = new TField("createdTime", TType.I64, (short)5);

  private int version;
  private int keyId;
  private byte[] keyData;
  private long createdTime;

  // isset id assignments
  private static final int __VERSION_ISSET_ID = 0;
  private static final int __KEYID_ISSET_ID = 1;
  private static final int __CREATEDTIME_ISSET_ID = 2;
  private boolean[] __isset_vector = new boolean[3];

  public E2EEPublicKey() {
  }

  public E2EEPublicKey(
    int version,
    int keyId,
    byte[] keyData,
    long createdTime)
  {
    this();
    this.version = version;
    setVersionIsSet(true);
    this.keyId = keyId;
    setKeyIdIsSet(true);
    this.keyData = keyData;
    this.createdTime = createdTime;
    setCreatedTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public E2EEPublicKey(E2EEPublicKey other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    this.version = other.version;
    this.keyId = other.keyId;
    if (other.isSetKeyData()) {
      this.keyData = new byte[other.keyData.length];
      System.arraycopy(other.keyData, 0, keyData, 0, other.keyData.length);
    }
    this.createdTime = other.createdTime;
  }

  public E2EEPublicKey deepCopy() {
    return new E2EEPublicKey(this);
  }

  public void clear() {
    setVersionIsSet(false);
    this.version = 0;
    setKeyIdIsSet(false);
    this.keyId = 0;
    this.keyData = null;
    setCreatedTimeIsSet(false);
    this.createdTime = 0;
  }

  public int getVersion() {
    return this.version;
  }

  public void setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
  }

  public void unsetVersion() {
    __isset_vector[__VERSION_ISSET_ID] = false;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return __isset_vector[__VERSION_ISSET_ID];
  }

  public void setVersionIsSet(boolean value) {
    __isset_vector[__VERSION_ISSET_ID] = value;
  }

  public int getKeyId() {
    return this.keyId;
  }

  public void setKeyId(int keyId) {
    this.keyId = keyId;
    setKeyIdIsSet(true);
  }

  public void unsetKeyId() {
    __isset_vector[__KEYID_ISSET_ID] = false;
  }

  /** Returns true if field keyId is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyId() {
    return __isset_vector[__KEYID_ISSET_ID];
  }

  public void setKeyIdIsSet(boolean value) {
    __isset_vector[__KEYID_ISSET_ID] = value;
  }

  public byte[] getKeyData() {
    return this.keyData;
  }

  public void setKeyData(byte[] keyData) {
    this.keyData = keyData;
  }

  public void unsetKeyData() {
    this.keyData = null;
  }

  /** Returns true if field keyData is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyData() {
    return this.keyData != null;
  }

  public void setKeyDataIsSet(boolean value) {
    if (!value) {
      this.keyData = null;
    }
  }

  public long getCreatedTime() {
    return this.createdTime;
  }

  public void setCreatedTime(long createdTime) {
    this.createdTime = createdTime;
    setCreatedTimeIsSet(true);
  }

  public void unsetCreatedTime() {
    __isset_vector[__CREATEDTIME_ISSET_ID] = false;
  }

  /** Returns true if field createdTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedTime() {
    return __isset_vector[__CREATEDTIME_ISSET_ID];
  }

  public void setCreatedTimeIsSet(boolean value) {
    __isset_vector[__CREATEDTIME_ISSET_ID] = value;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof E2EEPublicKey)
      return this.equals((E2EEPublicKey)that);
    return false;
  }

  public boolean equals(E2EEPublicKey that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_keyId = true;
    boolean that_present_keyId = true;
    if (this_present_keyId || that_present_keyId) {
      if (!(this_present_keyId && that_present_keyId))
        return false;
      if (this.keyId != that.keyId)
        return false;
    }

    boolean this_present_keyData = true && this.isSetKeyData();
    boolean that_present_keyData = true && that.isSetKeyData();
    if (this_present_keyData || that_present_keyData) {
      if (!(this_present_keyData && that_present_keyData))
        return false;
      if (TBaseHelper.compareTo(this.keyData, that.keyData) != 0)
        return false;
    }

    boolean this_present_createdTime = true;
    boolean that_present_createdTime = true;
    if (this_present_createdTime || that_present_createdTime) {
      if (!(this_present_createdTime && that_present_createdTime))
        return false;
      if (this.createdTime != that.createdTime)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    E2EEPublicKey other = (E2EEPublicKey)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetVersion(), other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetKeyId(), other.isSetKeyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyId()) {
      lastComparison = TBaseHelper.compareTo(this.keyId, other.keyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetKeyData(), other.isSetKeyData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyData()) {
      lastComparison = TBaseHelper.compareTo(this.keyData, other.keyData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetCreatedTime(), other.isSetCreatedTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedTime()) {
      lastComparison = TBaseHelper.compareTo(this.createdTime, other.createdTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // VERSION
          if (field.type == TType.I32) {
            this.version = iprot.readI32();
            setVersionIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // KEY_ID
          if (field.type == TType.I32) {
            this.keyId = iprot.readI32();
            setKeyIdIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // KEY_DATA
          if (field.type == TType.STRING) {
            this.keyData = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // CREATED_TIME
          if (field.type == TType.I64) {
            this.createdTime = iprot.readI64();
            setCreatedTimeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(VERSION_FIELD_DESC);
    oprot.writeI32(this.version);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(KEY_ID_FIELD_DESC);
    oprot.writeI32(this.keyId);
    oprot.writeFieldEnd();
    if (this.keyData != null) {
      oprot.writeFieldBegin(KEY_DATA_FIELD_DESC);
      oprot.writeBinary(this.keyData);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(CREATED_TIME_FIELD_DESC);
    oprot.writeI64(this.createdTime);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("E2EEPublicKey(");
    boolean first = true;

    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("keyId:");
    sb.append(this.keyId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("keyData:");
    if (this.keyData == null) {
      sb.append("null");
    } else {
      TBaseHelper.toString(this.keyData, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createdTime:");
    sb.append(this.createdTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

