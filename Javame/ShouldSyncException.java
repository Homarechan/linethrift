/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class ShouldSyncException extends Exception implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("ShouldSyncException");

  private static final TField SYNC_OP_REVISION_FIELD_DESC = new TField("syncOpRevision", TType.I64, (short)1);
  private static final TField SYNC_SCOPE_FIELD_DESC = new TField("syncScope", TType.STRUCT, (short)2);
  private static final TField SYNC_REASON_FIELD_DESC = new TField("syncReason", TType.I32, (short)3);
  private static final TField MESSAGE_FIELD_DESC = new TField("message", TType.STRING, (short)4);

  private long syncOpRevision;
  private SyncScope syncScope;
  private SyncTriggerReason syncReason;
  private String message;

  // isset id assignments
  private static final int __SYNCOPREVISION_ISSET_ID = 0;
  private boolean[] __isset_vector = new boolean[1];

  public ShouldSyncException() {
  }

  public ShouldSyncException(
    long syncOpRevision,
    SyncScope syncScope,
    SyncTriggerReason syncReason,
    String message)
  {
    this();
    this.syncOpRevision = syncOpRevision;
    setSyncOpRevisionIsSet(true);
    this.syncScope = syncScope;
    this.syncReason = syncReason;
    this.message = message;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ShouldSyncException(ShouldSyncException other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    this.syncOpRevision = other.syncOpRevision;
    if (other.isSetSyncScope()) {
      this.syncScope = new SyncScope(other.syncScope);
    }
    if (other.isSetSyncReason()) {
      this.syncReason = other.syncReason;
    }
    if (other.isSetMessage()) {
      this.message = other.message;
    }
  }

  public ShouldSyncException deepCopy() {
    return new ShouldSyncException(this);
  }

  public void clear() {
    setSyncOpRevisionIsSet(false);
    this.syncOpRevision = 0;
    this.syncScope = null;
    this.syncReason = null;
    this.message = null;
  }

  public long getSyncOpRevision() {
    return this.syncOpRevision;
  }

  public void setSyncOpRevision(long syncOpRevision) {
    this.syncOpRevision = syncOpRevision;
    setSyncOpRevisionIsSet(true);
  }

  public void unsetSyncOpRevision() {
    __isset_vector[__SYNCOPREVISION_ISSET_ID] = false;
  }

  /** Returns true if field syncOpRevision is set (has been assigned a value) and false otherwise */
  public boolean isSetSyncOpRevision() {
    return __isset_vector[__SYNCOPREVISION_ISSET_ID];
  }

  public void setSyncOpRevisionIsSet(boolean value) {
    __isset_vector[__SYNCOPREVISION_ISSET_ID] = value;
  }

  public SyncScope getSyncScope() {
    return this.syncScope;
  }

  public void setSyncScope(SyncScope syncScope) {
    this.syncScope = syncScope;
  }

  public void unsetSyncScope() {
    this.syncScope = null;
  }

  /** Returns true if field syncScope is set (has been assigned a value) and false otherwise */
  public boolean isSetSyncScope() {
    return this.syncScope != null;
  }

  public void setSyncScopeIsSet(boolean value) {
    if (!value) {
      this.syncScope = null;
    }
  }

  /**
   * 
   * @see SyncTriggerReason
   */
  public SyncTriggerReason getSyncReason() {
    return this.syncReason;
  }

  /**
   * 
   * @see SyncTriggerReason
   */
  public void setSyncReason(SyncTriggerReason syncReason) {
    this.syncReason = syncReason;
  }

  public void unsetSyncReason() {
    this.syncReason = null;
  }

  /** Returns true if field syncReason is set (has been assigned a value) and false otherwise */
  public boolean isSetSyncReason() {
    return this.syncReason != null;
  }

  public void setSyncReasonIsSet(boolean value) {
    if (!value) {
      this.syncReason = null;
    }
  }

  public String getMessage() {
    return this.message;
  }

  public void setMessage(String message) {
    this.message = message;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ShouldSyncException)
      return this.equals((ShouldSyncException)that);
    return false;
  }

  public boolean equals(ShouldSyncException that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_syncOpRevision = true;
    boolean that_present_syncOpRevision = true;
    if (this_present_syncOpRevision || that_present_syncOpRevision) {
      if (!(this_present_syncOpRevision && that_present_syncOpRevision))
        return false;
      if (this.syncOpRevision != that.syncOpRevision)
        return false;
    }

    boolean this_present_syncScope = true && this.isSetSyncScope();
    boolean that_present_syncScope = true && that.isSetSyncScope();
    if (this_present_syncScope || that_present_syncScope) {
      if (!(this_present_syncScope && that_present_syncScope))
        return false;
      if (!this.syncScope.equals(that.syncScope))
        return false;
    }

    boolean this_present_syncReason = true && this.isSetSyncReason();
    boolean that_present_syncReason = true && that.isSetSyncReason();
    if (this_present_syncReason || that_present_syncReason) {
      if (!(this_present_syncReason && that_present_syncReason))
        return false;
      if (!this.syncReason.equals(that.syncReason))
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    ShouldSyncException other = (ShouldSyncException)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetSyncOpRevision(), other.isSetSyncOpRevision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSyncOpRevision()) {
      lastComparison = TBaseHelper.compareTo(this.syncOpRevision, other.syncOpRevision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSyncScope(), other.isSetSyncScope());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSyncScope()) {
      lastComparison = this.syncScope.compareTo(other.syncScope);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSyncReason(), other.isSetSyncReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSyncReason()) {
      lastComparison = TBaseHelper.compareTo(this.syncReason, other.syncReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetMessage(), other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // SYNC_OP_REVISION
          if (field.type == TType.I64) {
            this.syncOpRevision = iprot.readI64();
            setSyncOpRevisionIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // SYNC_SCOPE
          if (field.type == TType.STRUCT) {
            this.syncScope = new SyncScope();
            this.syncScope.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SYNC_REASON
          if (field.type == TType.I32) {
            this.syncReason = SyncTriggerReason.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // MESSAGE
          if (field.type == TType.STRING) {
            this.message = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(SYNC_OP_REVISION_FIELD_DESC);
    oprot.writeI64(this.syncOpRevision);
    oprot.writeFieldEnd();
    if (this.syncScope != null) {
      oprot.writeFieldBegin(SYNC_SCOPE_FIELD_DESC);
      this.syncScope.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.syncReason != null) {
      oprot.writeFieldBegin(SYNC_REASON_FIELD_DESC);
      oprot.writeI32(this.syncReason.getValue());
      oprot.writeFieldEnd();
    }
    if (this.message != null) {
      oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
      oprot.writeString(this.message);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("ShouldSyncException(");
    boolean first = true;

    sb.append("syncOpRevision:");
    sb.append(this.syncOpRevision);
    first = false;
    if (!first) sb.append(", ");
    sb.append("syncScope:");
    if (this.syncScope == null) {
      sb.append("null");
    } else {
      sb.append(this.syncScope);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("syncReason:");
    if (this.syncReason == null) {
      sb.append("null");
    } else {
      sb.append(this.syncReason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

