/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class MessageService {

  public interface Iface {

    public MessageOperations fetchMessageOperations(long localRevision, long lastOpTimestamp, int count) throws TalkException, TException;

    public LastReadMessageIds getLastReadMessageIds(String chatId) throws TalkException, TException;

    public Vector multiGetLastReadMessageIds(Vector chatIds) throws TalkException, TException;

  }

  public static class Client implements TServiceClient, Iface {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public MessageOperations fetchMessageOperations(long localRevision, long lastOpTimestamp, int count) throws TalkException, TException
    {
      send_fetchMessageOperations(localRevision, lastOpTimestamp, count);
      return recv_fetchMessageOperations();
    }

    public void send_fetchMessageOperations(long localRevision, long lastOpTimestamp, int count) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("fetchMessageOperations", TMessageType.CALL, ++seqid_));
      fetchMessageOperations_args args = new fetchMessageOperations_args();
      args.setLocalRevision(localRevision);
      args.setLastOpTimestamp(lastOpTimestamp);
      args.setCount(count);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public MessageOperations recv_fetchMessageOperations() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "fetchMessageOperations failed: out of sequence response");
      }
      fetchMessageOperations_result result = new fetchMessageOperations_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "fetchMessageOperations failed: unknown result");
    }

    public LastReadMessageIds getLastReadMessageIds(String chatId) throws TalkException, TException
    {
      send_getLastReadMessageIds(chatId);
      return recv_getLastReadMessageIds();
    }

    public void send_getLastReadMessageIds(String chatId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getLastReadMessageIds", TMessageType.CALL, ++seqid_));
      getLastReadMessageIds_args args = new getLastReadMessageIds_args();
      args.setChatId(chatId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public LastReadMessageIds recv_getLastReadMessageIds() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getLastReadMessageIds failed: out of sequence response");
      }
      getLastReadMessageIds_result result = new getLastReadMessageIds_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getLastReadMessageIds failed: unknown result");
    }

    public Vector multiGetLastReadMessageIds(Vector chatIds) throws TalkException, TException
    {
      send_multiGetLastReadMessageIds(chatIds);
      return recv_multiGetLastReadMessageIds();
    }

    public void send_multiGetLastReadMessageIds(Vector chatIds) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("multiGetLastReadMessageIds", TMessageType.CALL, ++seqid_));
      multiGetLastReadMessageIds_args args = new multiGetLastReadMessageIds_args();
      args.setChatIds(chatIds);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_multiGetLastReadMessageIds() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "multiGetLastReadMessageIds failed: out of sequence response");
      }
      multiGetLastReadMessageIds_result result = new multiGetLastReadMessageIds_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "multiGetLastReadMessageIds failed: unknown result");
    }

  }
  public static class Processor implements TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("fetchMessageOperations", new fetchMessageOperations());
      processMap_.put("getLastReadMessageIds", new getLastReadMessageIds());
      processMap_.put("multiGetLastReadMessageIds", new multiGetLastReadMessageIds());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final Hashtable processMap_ = new Hashtable();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = (ProcessFunction)processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class fetchMessageOperations implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        fetchMessageOperations_args args = new fetchMessageOperations_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("fetchMessageOperations", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        fetchMessageOperations_result result = new fetchMessageOperations_result();
        try {
          result.success = iface_.fetchMessageOperations(args.localRevision, args.lastOpTimestamp, args.count);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing fetchMessageOperations");
          oprot.writeMessageBegin(new TMessage("fetchMessageOperations", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("fetchMessageOperations", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getLastReadMessageIds implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getLastReadMessageIds_args args = new getLastReadMessageIds_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getLastReadMessageIds", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getLastReadMessageIds_result result = new getLastReadMessageIds_result();
        try {
          result.success = iface_.getLastReadMessageIds(args.chatId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getLastReadMessageIds");
          oprot.writeMessageBegin(new TMessage("getLastReadMessageIds", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getLastReadMessageIds", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class multiGetLastReadMessageIds implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        multiGetLastReadMessageIds_args args = new multiGetLastReadMessageIds_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("multiGetLastReadMessageIds", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        multiGetLastReadMessageIds_result result = new multiGetLastReadMessageIds_result();
        try {
          result.success = iface_.multiGetLastReadMessageIds(args.chatIds);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing multiGetLastReadMessageIds");
          oprot.writeMessageBegin(new TMessage("multiGetLastReadMessageIds", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("multiGetLastReadMessageIds", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class fetchMessageOperations_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("fetchMessageOperations_args");

    private static final TField LOCAL_REVISION_FIELD_DESC = new TField("localRevision", TType.I64, (short)2);
    private static final TField LAST_OP_TIMESTAMP_FIELD_DESC = new TField("lastOpTimestamp", TType.I64, (short)3);
    private static final TField COUNT_FIELD_DESC = new TField("count", TType.I32, (short)4);

    private long localRevision;
    private long lastOpTimestamp;
    private int count;

    // isset id assignments
    private static final int __LOCALREVISION_ISSET_ID = 0;
    private static final int __LASTOPTIMESTAMP_ISSET_ID = 1;
    private static final int __COUNT_ISSET_ID = 2;
    private boolean[] __isset_vector = new boolean[3];

    public fetchMessageOperations_args() {
    }

    public fetchMessageOperations_args(
      long localRevision,
      long lastOpTimestamp,
      int count)
    {
      this();
      this.localRevision = localRevision;
      setLocalRevisionIsSet(true);
      this.lastOpTimestamp = lastOpTimestamp;
      setLastOpTimestampIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchMessageOperations_args(fetchMessageOperations_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.localRevision = other.localRevision;
      this.lastOpTimestamp = other.lastOpTimestamp;
      this.count = other.count;
    }

    public fetchMessageOperations_args deepCopy() {
      return new fetchMessageOperations_args(this);
    }

    public void clear() {
      setLocalRevisionIsSet(false);
      this.localRevision = 0;
      setLastOpTimestampIsSet(false);
      this.lastOpTimestamp = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public long getLocalRevision() {
      return this.localRevision;
    }

    public void setLocalRevision(long localRevision) {
      this.localRevision = localRevision;
      setLocalRevisionIsSet(true);
    }

    public void unsetLocalRevision() {
      __isset_vector[__LOCALREVISION_ISSET_ID] = false;
    }

    /** Returns true if field localRevision is set (has been assigned a value) and false otherwise */
    public boolean isSetLocalRevision() {
      return __isset_vector[__LOCALREVISION_ISSET_ID];
    }

    public void setLocalRevisionIsSet(boolean value) {
      __isset_vector[__LOCALREVISION_ISSET_ID] = value;
    }

    public long getLastOpTimestamp() {
      return this.lastOpTimestamp;
    }

    public void setLastOpTimestamp(long lastOpTimestamp) {
      this.lastOpTimestamp = lastOpTimestamp;
      setLastOpTimestampIsSet(true);
    }

    public void unsetLastOpTimestamp() {
      __isset_vector[__LASTOPTIMESTAMP_ISSET_ID] = false;
    }

    /** Returns true if field lastOpTimestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetLastOpTimestamp() {
      return __isset_vector[__LASTOPTIMESTAMP_ISSET_ID];
    }

    public void setLastOpTimestampIsSet(boolean value) {
      __isset_vector[__LASTOPTIMESTAMP_ISSET_ID] = value;
    }

    public int getCount() {
      return this.count;
    }

    public void setCount(int count) {
      this.count = count;
      setCountIsSet(true);
    }

    public void unsetCount() {
      __isset_vector[__COUNT_ISSET_ID] = false;
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return __isset_vector[__COUNT_ISSET_ID];
    }

    public void setCountIsSet(boolean value) {
      __isset_vector[__COUNT_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchMessageOperations_args)
        return this.equals((fetchMessageOperations_args)that);
      return false;
    }

    public boolean equals(fetchMessageOperations_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_localRevision = true;
      boolean that_present_localRevision = true;
      if (this_present_localRevision || that_present_localRevision) {
        if (!(this_present_localRevision && that_present_localRevision))
          return false;
        if (this.localRevision != that.localRevision)
          return false;
      }

      boolean this_present_lastOpTimestamp = true;
      boolean that_present_lastOpTimestamp = true;
      if (this_present_lastOpTimestamp || that_present_lastOpTimestamp) {
        if (!(this_present_lastOpTimestamp && that_present_lastOpTimestamp))
          return false;
        if (this.lastOpTimestamp != that.lastOpTimestamp)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      fetchMessageOperations_args other = (fetchMessageOperations_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetLocalRevision(), other.isSetLocalRevision());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocalRevision()) {
        lastComparison = TBaseHelper.compareTo(this.localRevision, other.localRevision);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLastOpTimestamp(), other.isSetLastOpTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastOpTimestamp()) {
        lastComparison = TBaseHelper.compareTo(this.lastOpTimestamp, other.lastOpTimestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCount(), other.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = TBaseHelper.compareTo(this.count, other.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // LOCAL_REVISION
            if (field.type == TType.I64) {
              this.localRevision = iprot.readI64();
              setLocalRevisionIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // LAST_OP_TIMESTAMP
            if (field.type == TType.I64) {
              this.lastOpTimestamp = iprot.readI64();
              setLastOpTimestampIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // COUNT
            if (field.type == TType.I32) {
              this.count = iprot.readI32();
              setCountIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LOCAL_REVISION_FIELD_DESC);
      oprot.writeI64(this.localRevision);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_OP_TIMESTAMP_FIELD_DESC);
      oprot.writeI64(this.lastOpTimestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(COUNT_FIELD_DESC);
      oprot.writeI32(this.count);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("fetchMessageOperations_args(");
      boolean first = true;

      sb.append("localRevision:");
      sb.append(this.localRevision);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lastOpTimestamp:");
      sb.append(this.lastOpTimestamp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class fetchMessageOperations_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("fetchMessageOperations_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private MessageOperations success;
    private TalkException e;

    // isset id assignments

    public fetchMessageOperations_result() {
    }

    public fetchMessageOperations_result(
      MessageOperations success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchMessageOperations_result(fetchMessageOperations_result other) {
      if (other.isSetSuccess()) {
        this.success = new MessageOperations(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public fetchMessageOperations_result deepCopy() {
      return new fetchMessageOperations_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public MessageOperations getSuccess() {
      return this.success;
    }

    public void setSuccess(MessageOperations success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchMessageOperations_result)
        return this.equals((fetchMessageOperations_result)that);
      return false;
    }

    public boolean equals(fetchMessageOperations_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      fetchMessageOperations_result other = (fetchMessageOperations_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new MessageOperations();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("fetchMessageOperations_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getLastReadMessageIds_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getLastReadMessageIds_args");

    private static final TField CHAT_ID_FIELD_DESC = new TField("chatId", TType.STRING, (short)2);

    private String chatId;

    // isset id assignments

    public getLastReadMessageIds_args() {
    }

    public getLastReadMessageIds_args(
      String chatId)
    {
      this();
      this.chatId = chatId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLastReadMessageIds_args(getLastReadMessageIds_args other) {
      if (other.isSetChatId()) {
        this.chatId = other.chatId;
      }
    }

    public getLastReadMessageIds_args deepCopy() {
      return new getLastReadMessageIds_args(this);
    }

    public void clear() {
      this.chatId = null;
    }

    public String getChatId() {
      return this.chatId;
    }

    public void setChatId(String chatId) {
      this.chatId = chatId;
    }

    public void unsetChatId() {
      this.chatId = null;
    }

    /** Returns true if field chatId is set (has been assigned a value) and false otherwise */
    public boolean isSetChatId() {
      return this.chatId != null;
    }

    public void setChatIdIsSet(boolean value) {
      if (!value) {
        this.chatId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLastReadMessageIds_args)
        return this.equals((getLastReadMessageIds_args)that);
      return false;
    }

    public boolean equals(getLastReadMessageIds_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_chatId = true && this.isSetChatId();
      boolean that_present_chatId = true && that.isSetChatId();
      if (this_present_chatId || that_present_chatId) {
        if (!(this_present_chatId && that_present_chatId))
          return false;
        if (!this.chatId.equals(that.chatId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getLastReadMessageIds_args other = (getLastReadMessageIds_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetChatId(), other.isSetChatId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChatId()) {
        lastComparison = TBaseHelper.compareTo(this.chatId, other.chatId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // CHAT_ID
            if (field.type == TType.STRING) {
              this.chatId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.chatId != null) {
        oprot.writeFieldBegin(CHAT_ID_FIELD_DESC);
        oprot.writeString(this.chatId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getLastReadMessageIds_args(");
      boolean first = true;

      sb.append("chatId:");
      if (this.chatId == null) {
        sb.append("null");
      } else {
        sb.append(this.chatId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getLastReadMessageIds_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getLastReadMessageIds_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private LastReadMessageIds success;
    private TalkException e;

    // isset id assignments

    public getLastReadMessageIds_result() {
    }

    public getLastReadMessageIds_result(
      LastReadMessageIds success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLastReadMessageIds_result(getLastReadMessageIds_result other) {
      if (other.isSetSuccess()) {
        this.success = new LastReadMessageIds(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getLastReadMessageIds_result deepCopy() {
      return new getLastReadMessageIds_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public LastReadMessageIds getSuccess() {
      return this.success;
    }

    public void setSuccess(LastReadMessageIds success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLastReadMessageIds_result)
        return this.equals((getLastReadMessageIds_result)that);
      return false;
    }

    public boolean equals(getLastReadMessageIds_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getLastReadMessageIds_result other = (getLastReadMessageIds_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new LastReadMessageIds();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getLastReadMessageIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class multiGetLastReadMessageIds_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("multiGetLastReadMessageIds_args");

    private static final TField CHAT_IDS_FIELD_DESC = new TField("chatIds", TType.LIST, (short)2);

    private Vector chatIds;

    // isset id assignments

    public multiGetLastReadMessageIds_args() {
    }

    public multiGetLastReadMessageIds_args(
      Vector chatIds)
    {
      this();
      this.chatIds = chatIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiGetLastReadMessageIds_args(multiGetLastReadMessageIds_args other) {
      if (other.isSetChatIds()) {
        Vector __this__chatIds = new Vector();
        for (Enumeration other_enum = other.chatIds.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__chatIds.addElement(other_element);
        }
        this.chatIds = __this__chatIds;
      }
    }

    public multiGetLastReadMessageIds_args deepCopy() {
      return new multiGetLastReadMessageIds_args(this);
    }

    public void clear() {
      this.chatIds = null;
    }

    public int getChatIdsSize() {
      return (this.chatIds == null) ? 0 : this.chatIds.size();
    }

    public Enumeration getChatIdsEnumeration() {
      return (this.chatIds == null) ? null : this.chatIds.elements();
    }

    public void addToChatIds(String elem) {
      if (this.chatIds == null) {
        this.chatIds = new Vector();
      }
      this.chatIds.addElement(elem);
    }

    public Vector getChatIds() {
      return this.chatIds;
    }

    public void setChatIds(Vector chatIds) {
      this.chatIds = chatIds;
    }

    public void unsetChatIds() {
      this.chatIds = null;
    }

    /** Returns true if field chatIds is set (has been assigned a value) and false otherwise */
    public boolean isSetChatIds() {
      return this.chatIds != null;
    }

    public void setChatIdsIsSet(boolean value) {
      if (!value) {
        this.chatIds = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multiGetLastReadMessageIds_args)
        return this.equals((multiGetLastReadMessageIds_args)that);
      return false;
    }

    public boolean equals(multiGetLastReadMessageIds_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_chatIds = true && this.isSetChatIds();
      boolean that_present_chatIds = true && that.isSetChatIds();
      if (this_present_chatIds || that_present_chatIds) {
        if (!(this_present_chatIds && that_present_chatIds))
          return false;
        if (!this.chatIds.equals(that.chatIds))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      multiGetLastReadMessageIds_args other = (multiGetLastReadMessageIds_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetChatIds(), other.isSetChatIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChatIds()) {
        lastComparison = TBaseHelper.compareTo(this.chatIds, other.chatIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // CHAT_IDS
            if (field.type == TType.LIST) {
              {
                TList _list741 = iprot.readListBegin();
                this.chatIds = new Vector(_list741.size);
                for (int _i742 = 0; _i742 < _list741.size; ++_i742)
                {
                  String _elem743;
                  _elem743 = iprot.readString();
                  this.chatIds.addElement(_elem743);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.chatIds != null) {
        oprot.writeFieldBegin(CHAT_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.chatIds.size()));
          for (Enumeration _iter744_enum = this.chatIds.elements(); _iter744_enum.hasMoreElements(); )           {
            String _iter744 = (String)_iter744_enum.nextElement();
            oprot.writeString(_iter744);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("multiGetLastReadMessageIds_args(");
      boolean first = true;

      sb.append("chatIds:");
      if (this.chatIds == null) {
        sb.append("null");
      } else {
        sb.append(this.chatIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class multiGetLastReadMessageIds_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("multiGetLastReadMessageIds_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public multiGetLastReadMessageIds_result() {
    }

    public multiGetLastReadMessageIds_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public multiGetLastReadMessageIds_result(multiGetLastReadMessageIds_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          LastReadMessageIds other_element = (LastReadMessageIds)other_enum.nextElement();
          __this__success.addElement(new LastReadMessageIds(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public multiGetLastReadMessageIds_result deepCopy() {
      return new multiGetLastReadMessageIds_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(LastReadMessageIds elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof multiGetLastReadMessageIds_result)
        return this.equals((multiGetLastReadMessageIds_result)that);
      return false;
    }

    public boolean equals(multiGetLastReadMessageIds_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      multiGetLastReadMessageIds_result other = (multiGetLastReadMessageIds_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list745 = iprot.readListBegin();
                this.success = new Vector(_list745.size);
                for (int _i746 = 0; _i746 < _list745.size; ++_i746)
                {
                  LastReadMessageIds _elem747;
                  _elem747 = new LastReadMessageIds();
                  _elem747.read(iprot);
                  this.success.addElement(_elem747);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter748_enum = this.success.elements(); _iter748_enum.hasMoreElements(); )           {
            LastReadMessageIds _iter748 = (LastReadMessageIds)_iter748_enum.nextElement();
            _iter748.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("multiGetLastReadMessageIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
