/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class SnsAdaptorService {

  public interface Iface {

    public SnsFriends getSnsFriends(SnsIdType snsIdType, String snsAccessToken, int startIdx, int limit) throws TalkException, TException;

    public SnsProfile getSnsMyProfile(SnsIdType snsIdType, String snsAccessToken) throws TalkException, TException;

    public void postSnsInvitationMessage(SnsIdType snsIdType, String snsAccessToken, String toSnsUserId) throws TalkException, TException;

  }

  public static class Client implements TServiceClient, Iface {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public SnsFriends getSnsFriends(SnsIdType snsIdType, String snsAccessToken, int startIdx, int limit) throws TalkException, TException
    {
      send_getSnsFriends(snsIdType, snsAccessToken, startIdx, limit);
      return recv_getSnsFriends();
    }

    public void send_getSnsFriends(SnsIdType snsIdType, String snsAccessToken, int startIdx, int limit) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getSnsFriends", TMessageType.CALL, ++seqid_));
      getSnsFriends_args args = new getSnsFriends_args();
      args.setSnsIdType(snsIdType);
      args.setSnsAccessToken(snsAccessToken);
      args.setStartIdx(startIdx);
      args.setLimit(limit);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public SnsFriends recv_getSnsFriends() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getSnsFriends failed: out of sequence response");
      }
      getSnsFriends_result result = new getSnsFriends_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getSnsFriends failed: unknown result");
    }

    public SnsProfile getSnsMyProfile(SnsIdType snsIdType, String snsAccessToken) throws TalkException, TException
    {
      send_getSnsMyProfile(snsIdType, snsAccessToken);
      return recv_getSnsMyProfile();
    }

    public void send_getSnsMyProfile(SnsIdType snsIdType, String snsAccessToken) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getSnsMyProfile", TMessageType.CALL, ++seqid_));
      getSnsMyProfile_args args = new getSnsMyProfile_args();
      args.setSnsIdType(snsIdType);
      args.setSnsAccessToken(snsAccessToken);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public SnsProfile recv_getSnsMyProfile() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getSnsMyProfile failed: out of sequence response");
      }
      getSnsMyProfile_result result = new getSnsMyProfile_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getSnsMyProfile failed: unknown result");
    }

    public void postSnsInvitationMessage(SnsIdType snsIdType, String snsAccessToken, String toSnsUserId) throws TalkException, TException
    {
      send_postSnsInvitationMessage(snsIdType, snsAccessToken, toSnsUserId);
      recv_postSnsInvitationMessage();
    }

    public void send_postSnsInvitationMessage(SnsIdType snsIdType, String snsAccessToken, String toSnsUserId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("postSnsInvitationMessage", TMessageType.CALL, ++seqid_));
      postSnsInvitationMessage_args args = new postSnsInvitationMessage_args();
      args.setSnsIdType(snsIdType);
      args.setSnsAccessToken(snsAccessToken);
      args.setToSnsUserId(toSnsUserId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_postSnsInvitationMessage() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "postSnsInvitationMessage failed: out of sequence response");
      }
      postSnsInvitationMessage_result result = new postSnsInvitationMessage_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

  }
  public static class Processor implements TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("getSnsFriends", new getSnsFriends());
      processMap_.put("getSnsMyProfile", new getSnsMyProfile());
      processMap_.put("postSnsInvitationMessage", new postSnsInvitationMessage());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final Hashtable processMap_ = new Hashtable();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = (ProcessFunction)processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class getSnsFriends implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getSnsFriends_args args = new getSnsFriends_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getSnsFriends", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getSnsFriends_result result = new getSnsFriends_result();
        try {
          result.success = iface_.getSnsFriends(args.snsIdType, args.snsAccessToken, args.startIdx, args.limit);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getSnsFriends");
          oprot.writeMessageBegin(new TMessage("getSnsFriends", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getSnsFriends", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getSnsMyProfile implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getSnsMyProfile_args args = new getSnsMyProfile_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getSnsMyProfile", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getSnsMyProfile_result result = new getSnsMyProfile_result();
        try {
          result.success = iface_.getSnsMyProfile(args.snsIdType, args.snsAccessToken);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getSnsMyProfile");
          oprot.writeMessageBegin(new TMessage("getSnsMyProfile", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getSnsMyProfile", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class postSnsInvitationMessage implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        postSnsInvitationMessage_args args = new postSnsInvitationMessage_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("postSnsInvitationMessage", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        postSnsInvitationMessage_result result = new postSnsInvitationMessage_result();
        try {
          iface_.postSnsInvitationMessage(args.snsIdType, args.snsAccessToken, args.toSnsUserId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing postSnsInvitationMessage");
          oprot.writeMessageBegin(new TMessage("postSnsInvitationMessage", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("postSnsInvitationMessage", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class getSnsFriends_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getSnsFriends_args");

    private static final TField SNS_ID_TYPE_FIELD_DESC = new TField("snsIdType", TType.I32, (short)2);
    private static final TField SNS_ACCESS_TOKEN_FIELD_DESC = new TField("snsAccessToken", TType.STRING, (short)3);
    private static final TField START_IDX_FIELD_DESC = new TField("startIdx", TType.I32, (short)4);
    private static final TField LIMIT_FIELD_DESC = new TField("limit", TType.I32, (short)5);

    private SnsIdType snsIdType;
    private String snsAccessToken;
    private int startIdx;
    private int limit;

    // isset id assignments
    private static final int __STARTIDX_ISSET_ID = 0;
    private static final int __LIMIT_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public getSnsFriends_args() {
    }

    public getSnsFriends_args(
      SnsIdType snsIdType,
      String snsAccessToken,
      int startIdx,
      int limit)
    {
      this();
      this.snsIdType = snsIdType;
      this.snsAccessToken = snsAccessToken;
      this.startIdx = startIdx;
      setStartIdxIsSet(true);
      this.limit = limit;
      setLimitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSnsFriends_args(getSnsFriends_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetSnsIdType()) {
        this.snsIdType = other.snsIdType;
      }
      if (other.isSetSnsAccessToken()) {
        this.snsAccessToken = other.snsAccessToken;
      }
      this.startIdx = other.startIdx;
      this.limit = other.limit;
    }

    public getSnsFriends_args deepCopy() {
      return new getSnsFriends_args(this);
    }

    public void clear() {
      this.snsIdType = null;
      this.snsAccessToken = null;
      setStartIdxIsSet(false);
      this.startIdx = 0;
      setLimitIsSet(false);
      this.limit = 0;
    }

    /**
     * 
     * @see SnsIdType
     */
    public SnsIdType getSnsIdType() {
      return this.snsIdType;
    }

    /**
     * 
     * @see SnsIdType
     */
    public void setSnsIdType(SnsIdType snsIdType) {
      this.snsIdType = snsIdType;
    }

    public void unsetSnsIdType() {
      this.snsIdType = null;
    }

    /** Returns true if field snsIdType is set (has been assigned a value) and false otherwise */
    public boolean isSetSnsIdType() {
      return this.snsIdType != null;
    }

    public void setSnsIdTypeIsSet(boolean value) {
      if (!value) {
        this.snsIdType = null;
      }
    }

    public String getSnsAccessToken() {
      return this.snsAccessToken;
    }

    public void setSnsAccessToken(String snsAccessToken) {
      this.snsAccessToken = snsAccessToken;
    }

    public void unsetSnsAccessToken() {
      this.snsAccessToken = null;
    }

    /** Returns true if field snsAccessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSnsAccessToken() {
      return this.snsAccessToken != null;
    }

    public void setSnsAccessTokenIsSet(boolean value) {
      if (!value) {
        this.snsAccessToken = null;
      }
    }

    public int getStartIdx() {
      return this.startIdx;
    }

    public void setStartIdx(int startIdx) {
      this.startIdx = startIdx;
      setStartIdxIsSet(true);
    }

    public void unsetStartIdx() {
      __isset_vector[__STARTIDX_ISSET_ID] = false;
    }

    /** Returns true if field startIdx is set (has been assigned a value) and false otherwise */
    public boolean isSetStartIdx() {
      return __isset_vector[__STARTIDX_ISSET_ID];
    }

    public void setStartIdxIsSet(boolean value) {
      __isset_vector[__STARTIDX_ISSET_ID] = value;
    }

    public int getLimit() {
      return this.limit;
    }

    public void setLimit(int limit) {
      this.limit = limit;
      setLimitIsSet(true);
    }

    public void unsetLimit() {
      __isset_vector[__LIMIT_ISSET_ID] = false;
    }

    /** Returns true if field limit is set (has been assigned a value) and false otherwise */
    public boolean isSetLimit() {
      return __isset_vector[__LIMIT_ISSET_ID];
    }

    public void setLimitIsSet(boolean value) {
      __isset_vector[__LIMIT_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSnsFriends_args)
        return this.equals((getSnsFriends_args)that);
      return false;
    }

    public boolean equals(getSnsFriends_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_snsIdType = true && this.isSetSnsIdType();
      boolean that_present_snsIdType = true && that.isSetSnsIdType();
      if (this_present_snsIdType || that_present_snsIdType) {
        if (!(this_present_snsIdType && that_present_snsIdType))
          return false;
        if (!this.snsIdType.equals(that.snsIdType))
          return false;
      }

      boolean this_present_snsAccessToken = true && this.isSetSnsAccessToken();
      boolean that_present_snsAccessToken = true && that.isSetSnsAccessToken();
      if (this_present_snsAccessToken || that_present_snsAccessToken) {
        if (!(this_present_snsAccessToken && that_present_snsAccessToken))
          return false;
        if (!this.snsAccessToken.equals(that.snsAccessToken))
          return false;
      }

      boolean this_present_startIdx = true;
      boolean that_present_startIdx = true;
      if (this_present_startIdx || that_present_startIdx) {
        if (!(this_present_startIdx && that_present_startIdx))
          return false;
        if (this.startIdx != that.startIdx)
          return false;
      }

      boolean this_present_limit = true;
      boolean that_present_limit = true;
      if (this_present_limit || that_present_limit) {
        if (!(this_present_limit && that_present_limit))
          return false;
        if (this.limit != that.limit)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getSnsFriends_args other = (getSnsFriends_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSnsIdType(), other.isSetSnsIdType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSnsIdType()) {
        lastComparison = TBaseHelper.compareTo(this.snsIdType, other.snsIdType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSnsAccessToken(), other.isSetSnsAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSnsAccessToken()) {
        lastComparison = TBaseHelper.compareTo(this.snsAccessToken, other.snsAccessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetStartIdx(), other.isSetStartIdx());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartIdx()) {
        lastComparison = TBaseHelper.compareTo(this.startIdx, other.startIdx);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetLimit(), other.isSetLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimit()) {
        lastComparison = TBaseHelper.compareTo(this.limit, other.limit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // SNS_ID_TYPE
            if (field.type == TType.I32) {
              this.snsIdType = SnsIdType.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SNS_ACCESS_TOKEN
            if (field.type == TType.STRING) {
              this.snsAccessToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // START_IDX
            if (field.type == TType.I32) {
              this.startIdx = iprot.readI32();
              setStartIdxIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // LIMIT
            if (field.type == TType.I32) {
              this.limit = iprot.readI32();
              setLimitIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.snsIdType != null) {
        oprot.writeFieldBegin(SNS_ID_TYPE_FIELD_DESC);
        oprot.writeI32(this.snsIdType.getValue());
        oprot.writeFieldEnd();
      }
      if (this.snsAccessToken != null) {
        oprot.writeFieldBegin(SNS_ACCESS_TOKEN_FIELD_DESC);
        oprot.writeString(this.snsAccessToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_IDX_FIELD_DESC);
      oprot.writeI32(this.startIdx);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIMIT_FIELD_DESC);
      oprot.writeI32(this.limit);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getSnsFriends_args(");
      boolean first = true;

      sb.append("snsIdType:");
      if (this.snsIdType == null) {
        sb.append("null");
      } else {
        sb.append(this.snsIdType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("snsAccessToken:");
      if (this.snsAccessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.snsAccessToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startIdx:");
      sb.append(this.startIdx);
      first = false;
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSnsFriends_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getSnsFriends_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private SnsFriends success;
    private TalkException e;

    // isset id assignments

    public getSnsFriends_result() {
    }

    public getSnsFriends_result(
      SnsFriends success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSnsFriends_result(getSnsFriends_result other) {
      if (other.isSetSuccess()) {
        this.success = new SnsFriends(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getSnsFriends_result deepCopy() {
      return new getSnsFriends_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public SnsFriends getSuccess() {
      return this.success;
    }

    public void setSuccess(SnsFriends success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSnsFriends_result)
        return this.equals((getSnsFriends_result)that);
      return false;
    }

    public boolean equals(getSnsFriends_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getSnsFriends_result other = (getSnsFriends_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new SnsFriends();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getSnsFriends_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSnsMyProfile_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getSnsMyProfile_args");

    private static final TField SNS_ID_TYPE_FIELD_DESC = new TField("snsIdType", TType.I32, (short)2);
    private static final TField SNS_ACCESS_TOKEN_FIELD_DESC = new TField("snsAccessToken", TType.STRING, (short)3);

    private SnsIdType snsIdType;
    private String snsAccessToken;

    // isset id assignments

    public getSnsMyProfile_args() {
    }

    public getSnsMyProfile_args(
      SnsIdType snsIdType,
      String snsAccessToken)
    {
      this();
      this.snsIdType = snsIdType;
      this.snsAccessToken = snsAccessToken;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSnsMyProfile_args(getSnsMyProfile_args other) {
      if (other.isSetSnsIdType()) {
        this.snsIdType = other.snsIdType;
      }
      if (other.isSetSnsAccessToken()) {
        this.snsAccessToken = other.snsAccessToken;
      }
    }

    public getSnsMyProfile_args deepCopy() {
      return new getSnsMyProfile_args(this);
    }

    public void clear() {
      this.snsIdType = null;
      this.snsAccessToken = null;
    }

    /**
     * 
     * @see SnsIdType
     */
    public SnsIdType getSnsIdType() {
      return this.snsIdType;
    }

    /**
     * 
     * @see SnsIdType
     */
    public void setSnsIdType(SnsIdType snsIdType) {
      this.snsIdType = snsIdType;
    }

    public void unsetSnsIdType() {
      this.snsIdType = null;
    }

    /** Returns true if field snsIdType is set (has been assigned a value) and false otherwise */
    public boolean isSetSnsIdType() {
      return this.snsIdType != null;
    }

    public void setSnsIdTypeIsSet(boolean value) {
      if (!value) {
        this.snsIdType = null;
      }
    }

    public String getSnsAccessToken() {
      return this.snsAccessToken;
    }

    public void setSnsAccessToken(String snsAccessToken) {
      this.snsAccessToken = snsAccessToken;
    }

    public void unsetSnsAccessToken() {
      this.snsAccessToken = null;
    }

    /** Returns true if field snsAccessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSnsAccessToken() {
      return this.snsAccessToken != null;
    }

    public void setSnsAccessTokenIsSet(boolean value) {
      if (!value) {
        this.snsAccessToken = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSnsMyProfile_args)
        return this.equals((getSnsMyProfile_args)that);
      return false;
    }

    public boolean equals(getSnsMyProfile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_snsIdType = true && this.isSetSnsIdType();
      boolean that_present_snsIdType = true && that.isSetSnsIdType();
      if (this_present_snsIdType || that_present_snsIdType) {
        if (!(this_present_snsIdType && that_present_snsIdType))
          return false;
        if (!this.snsIdType.equals(that.snsIdType))
          return false;
      }

      boolean this_present_snsAccessToken = true && this.isSetSnsAccessToken();
      boolean that_present_snsAccessToken = true && that.isSetSnsAccessToken();
      if (this_present_snsAccessToken || that_present_snsAccessToken) {
        if (!(this_present_snsAccessToken && that_present_snsAccessToken))
          return false;
        if (!this.snsAccessToken.equals(that.snsAccessToken))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getSnsMyProfile_args other = (getSnsMyProfile_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSnsIdType(), other.isSetSnsIdType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSnsIdType()) {
        lastComparison = TBaseHelper.compareTo(this.snsIdType, other.snsIdType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSnsAccessToken(), other.isSetSnsAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSnsAccessToken()) {
        lastComparison = TBaseHelper.compareTo(this.snsAccessToken, other.snsAccessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // SNS_ID_TYPE
            if (field.type == TType.I32) {
              this.snsIdType = SnsIdType.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SNS_ACCESS_TOKEN
            if (field.type == TType.STRING) {
              this.snsAccessToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.snsIdType != null) {
        oprot.writeFieldBegin(SNS_ID_TYPE_FIELD_DESC);
        oprot.writeI32(this.snsIdType.getValue());
        oprot.writeFieldEnd();
      }
      if (this.snsAccessToken != null) {
        oprot.writeFieldBegin(SNS_ACCESS_TOKEN_FIELD_DESC);
        oprot.writeString(this.snsAccessToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getSnsMyProfile_args(");
      boolean first = true;

      sb.append("snsIdType:");
      if (this.snsIdType == null) {
        sb.append("null");
      } else {
        sb.append(this.snsIdType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("snsAccessToken:");
      if (this.snsAccessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.snsAccessToken);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSnsMyProfile_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getSnsMyProfile_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private SnsProfile success;
    private TalkException e;

    // isset id assignments

    public getSnsMyProfile_result() {
    }

    public getSnsMyProfile_result(
      SnsProfile success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSnsMyProfile_result(getSnsMyProfile_result other) {
      if (other.isSetSuccess()) {
        this.success = new SnsProfile(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getSnsMyProfile_result deepCopy() {
      return new getSnsMyProfile_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public SnsProfile getSuccess() {
      return this.success;
    }

    public void setSuccess(SnsProfile success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSnsMyProfile_result)
        return this.equals((getSnsMyProfile_result)that);
      return false;
    }

    public boolean equals(getSnsMyProfile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getSnsMyProfile_result other = (getSnsMyProfile_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new SnsProfile();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getSnsMyProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class postSnsInvitationMessage_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("postSnsInvitationMessage_args");

    private static final TField SNS_ID_TYPE_FIELD_DESC = new TField("snsIdType", TType.I32, (short)2);
    private static final TField SNS_ACCESS_TOKEN_FIELD_DESC = new TField("snsAccessToken", TType.STRING, (short)3);
    private static final TField TO_SNS_USER_ID_FIELD_DESC = new TField("toSnsUserId", TType.STRING, (short)4);

    private SnsIdType snsIdType;
    private String snsAccessToken;
    private String toSnsUserId;

    // isset id assignments

    public postSnsInvitationMessage_args() {
    }

    public postSnsInvitationMessage_args(
      SnsIdType snsIdType,
      String snsAccessToken,
      String toSnsUserId)
    {
      this();
      this.snsIdType = snsIdType;
      this.snsAccessToken = snsAccessToken;
      this.toSnsUserId = toSnsUserId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postSnsInvitationMessage_args(postSnsInvitationMessage_args other) {
      if (other.isSetSnsIdType()) {
        this.snsIdType = other.snsIdType;
      }
      if (other.isSetSnsAccessToken()) {
        this.snsAccessToken = other.snsAccessToken;
      }
      if (other.isSetToSnsUserId()) {
        this.toSnsUserId = other.toSnsUserId;
      }
    }

    public postSnsInvitationMessage_args deepCopy() {
      return new postSnsInvitationMessage_args(this);
    }

    public void clear() {
      this.snsIdType = null;
      this.snsAccessToken = null;
      this.toSnsUserId = null;
    }

    /**
     * 
     * @see SnsIdType
     */
    public SnsIdType getSnsIdType() {
      return this.snsIdType;
    }

    /**
     * 
     * @see SnsIdType
     */
    public void setSnsIdType(SnsIdType snsIdType) {
      this.snsIdType = snsIdType;
    }

    public void unsetSnsIdType() {
      this.snsIdType = null;
    }

    /** Returns true if field snsIdType is set (has been assigned a value) and false otherwise */
    public boolean isSetSnsIdType() {
      return this.snsIdType != null;
    }

    public void setSnsIdTypeIsSet(boolean value) {
      if (!value) {
        this.snsIdType = null;
      }
    }

    public String getSnsAccessToken() {
      return this.snsAccessToken;
    }

    public void setSnsAccessToken(String snsAccessToken) {
      this.snsAccessToken = snsAccessToken;
    }

    public void unsetSnsAccessToken() {
      this.snsAccessToken = null;
    }

    /** Returns true if field snsAccessToken is set (has been assigned a value) and false otherwise */
    public boolean isSetSnsAccessToken() {
      return this.snsAccessToken != null;
    }

    public void setSnsAccessTokenIsSet(boolean value) {
      if (!value) {
        this.snsAccessToken = null;
      }
    }

    public String getToSnsUserId() {
      return this.toSnsUserId;
    }

    public void setToSnsUserId(String toSnsUserId) {
      this.toSnsUserId = toSnsUserId;
    }

    public void unsetToSnsUserId() {
      this.toSnsUserId = null;
    }

    /** Returns true if field toSnsUserId is set (has been assigned a value) and false otherwise */
    public boolean isSetToSnsUserId() {
      return this.toSnsUserId != null;
    }

    public void setToSnsUserIdIsSet(boolean value) {
      if (!value) {
        this.toSnsUserId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postSnsInvitationMessage_args)
        return this.equals((postSnsInvitationMessage_args)that);
      return false;
    }

    public boolean equals(postSnsInvitationMessage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_snsIdType = true && this.isSetSnsIdType();
      boolean that_present_snsIdType = true && that.isSetSnsIdType();
      if (this_present_snsIdType || that_present_snsIdType) {
        if (!(this_present_snsIdType && that_present_snsIdType))
          return false;
        if (!this.snsIdType.equals(that.snsIdType))
          return false;
      }

      boolean this_present_snsAccessToken = true && this.isSetSnsAccessToken();
      boolean that_present_snsAccessToken = true && that.isSetSnsAccessToken();
      if (this_present_snsAccessToken || that_present_snsAccessToken) {
        if (!(this_present_snsAccessToken && that_present_snsAccessToken))
          return false;
        if (!this.snsAccessToken.equals(that.snsAccessToken))
          return false;
      }

      boolean this_present_toSnsUserId = true && this.isSetToSnsUserId();
      boolean that_present_toSnsUserId = true && that.isSetToSnsUserId();
      if (this_present_toSnsUserId || that_present_toSnsUserId) {
        if (!(this_present_toSnsUserId && that_present_toSnsUserId))
          return false;
        if (!this.toSnsUserId.equals(that.toSnsUserId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      postSnsInvitationMessage_args other = (postSnsInvitationMessage_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSnsIdType(), other.isSetSnsIdType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSnsIdType()) {
        lastComparison = TBaseHelper.compareTo(this.snsIdType, other.snsIdType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSnsAccessToken(), other.isSetSnsAccessToken());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSnsAccessToken()) {
        lastComparison = TBaseHelper.compareTo(this.snsAccessToken, other.snsAccessToken);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetToSnsUserId(), other.isSetToSnsUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetToSnsUserId()) {
        lastComparison = TBaseHelper.compareTo(this.toSnsUserId, other.toSnsUserId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // SNS_ID_TYPE
            if (field.type == TType.I32) {
              this.snsIdType = SnsIdType.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SNS_ACCESS_TOKEN
            if (field.type == TType.STRING) {
              this.snsAccessToken = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // TO_SNS_USER_ID
            if (field.type == TType.STRING) {
              this.toSnsUserId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.snsIdType != null) {
        oprot.writeFieldBegin(SNS_ID_TYPE_FIELD_DESC);
        oprot.writeI32(this.snsIdType.getValue());
        oprot.writeFieldEnd();
      }
      if (this.snsAccessToken != null) {
        oprot.writeFieldBegin(SNS_ACCESS_TOKEN_FIELD_DESC);
        oprot.writeString(this.snsAccessToken);
        oprot.writeFieldEnd();
      }
      if (this.toSnsUserId != null) {
        oprot.writeFieldBegin(TO_SNS_USER_ID_FIELD_DESC);
        oprot.writeString(this.toSnsUserId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("postSnsInvitationMessage_args(");
      boolean first = true;

      sb.append("snsIdType:");
      if (this.snsIdType == null) {
        sb.append("null");
      } else {
        sb.append(this.snsIdType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("snsAccessToken:");
      if (this.snsAccessToken == null) {
        sb.append("null");
      } else {
        sb.append(this.snsAccessToken);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("toSnsUserId:");
      if (this.toSnsUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.toSnsUserId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class postSnsInvitationMessage_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("postSnsInvitationMessage_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public postSnsInvitationMessage_result() {
    }

    public postSnsInvitationMessage_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public postSnsInvitationMessage_result(postSnsInvitationMessage_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public postSnsInvitationMessage_result deepCopy() {
      return new postSnsInvitationMessage_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof postSnsInvitationMessage_result)
        return this.equals((postSnsInvitationMessage_result)that);
      return false;
    }

    public boolean equals(postSnsInvitationMessage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      postSnsInvitationMessage_result other = (postSnsInvitationMessage_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("postSnsInvitationMessage_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
