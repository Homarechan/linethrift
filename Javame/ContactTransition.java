/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class ContactTransition implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("ContactTransition");

  private static final TField OWNER_MID_FIELD_DESC = new TField("ownerMid", TType.STRING, (short)1);
  private static final TField TARGET_MID_FIELD_DESC = new TField("targetMid", TType.STRING, (short)2);
  private static final TField PREVIOUS_STATUS_FIELD_DESC = new TField("previousStatus", TType.I32, (short)3);
  private static final TField RESULT_STATUS_FIELD_DESC = new TField("resultStatus", TType.I32, (short)4);

  private String ownerMid;
  private String targetMid;
  private ContactStatus previousStatus;
  private ContactStatus resultStatus;

  // isset id assignments

  public ContactTransition() {
  }

  public ContactTransition(
    String ownerMid,
    String targetMid,
    ContactStatus previousStatus,
    ContactStatus resultStatus)
  {
    this();
    this.ownerMid = ownerMid;
    this.targetMid = targetMid;
    this.previousStatus = previousStatus;
    this.resultStatus = resultStatus;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ContactTransition(ContactTransition other) {
    if (other.isSetOwnerMid()) {
      this.ownerMid = other.ownerMid;
    }
    if (other.isSetTargetMid()) {
      this.targetMid = other.targetMid;
    }
    if (other.isSetPreviousStatus()) {
      this.previousStatus = other.previousStatus;
    }
    if (other.isSetResultStatus()) {
      this.resultStatus = other.resultStatus;
    }
  }

  public ContactTransition deepCopy() {
    return new ContactTransition(this);
  }

  public void clear() {
    this.ownerMid = null;
    this.targetMid = null;
    this.previousStatus = null;
    this.resultStatus = null;
  }

  public String getOwnerMid() {
    return this.ownerMid;
  }

  public void setOwnerMid(String ownerMid) {
    this.ownerMid = ownerMid;
  }

  public void unsetOwnerMid() {
    this.ownerMid = null;
  }

  /** Returns true if field ownerMid is set (has been assigned a value) and false otherwise */
  public boolean isSetOwnerMid() {
    return this.ownerMid != null;
  }

  public void setOwnerMidIsSet(boolean value) {
    if (!value) {
      this.ownerMid = null;
    }
  }

  public String getTargetMid() {
    return this.targetMid;
  }

  public void setTargetMid(String targetMid) {
    this.targetMid = targetMid;
  }

  public void unsetTargetMid() {
    this.targetMid = null;
  }

  /** Returns true if field targetMid is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetMid() {
    return this.targetMid != null;
  }

  public void setTargetMidIsSet(boolean value) {
    if (!value) {
      this.targetMid = null;
    }
  }

  /**
   * 
   * @see ContactStatus
   */
  public ContactStatus getPreviousStatus() {
    return this.previousStatus;
  }

  /**
   * 
   * @see ContactStatus
   */
  public void setPreviousStatus(ContactStatus previousStatus) {
    this.previousStatus = previousStatus;
  }

  public void unsetPreviousStatus() {
    this.previousStatus = null;
  }

  /** Returns true if field previousStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetPreviousStatus() {
    return this.previousStatus != null;
  }

  public void setPreviousStatusIsSet(boolean value) {
    if (!value) {
      this.previousStatus = null;
    }
  }

  /**
   * 
   * @see ContactStatus
   */
  public ContactStatus getResultStatus() {
    return this.resultStatus;
  }

  /**
   * 
   * @see ContactStatus
   */
  public void setResultStatus(ContactStatus resultStatus) {
    this.resultStatus = resultStatus;
  }

  public void unsetResultStatus() {
    this.resultStatus = null;
  }

  /** Returns true if field resultStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetResultStatus() {
    return this.resultStatus != null;
  }

  public void setResultStatusIsSet(boolean value) {
    if (!value) {
      this.resultStatus = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ContactTransition)
      return this.equals((ContactTransition)that);
    return false;
  }

  public boolean equals(ContactTransition that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_ownerMid = true && this.isSetOwnerMid();
    boolean that_present_ownerMid = true && that.isSetOwnerMid();
    if (this_present_ownerMid || that_present_ownerMid) {
      if (!(this_present_ownerMid && that_present_ownerMid))
        return false;
      if (!this.ownerMid.equals(that.ownerMid))
        return false;
    }

    boolean this_present_targetMid = true && this.isSetTargetMid();
    boolean that_present_targetMid = true && that.isSetTargetMid();
    if (this_present_targetMid || that_present_targetMid) {
      if (!(this_present_targetMid && that_present_targetMid))
        return false;
      if (!this.targetMid.equals(that.targetMid))
        return false;
    }

    boolean this_present_previousStatus = true && this.isSetPreviousStatus();
    boolean that_present_previousStatus = true && that.isSetPreviousStatus();
    if (this_present_previousStatus || that_present_previousStatus) {
      if (!(this_present_previousStatus && that_present_previousStatus))
        return false;
      if (!this.previousStatus.equals(that.previousStatus))
        return false;
    }

    boolean this_present_resultStatus = true && this.isSetResultStatus();
    boolean that_present_resultStatus = true && that.isSetResultStatus();
    if (this_present_resultStatus || that_present_resultStatus) {
      if (!(this_present_resultStatus && that_present_resultStatus))
        return false;
      if (!this.resultStatus.equals(that.resultStatus))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    ContactTransition other = (ContactTransition)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetOwnerMid(), other.isSetOwnerMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwnerMid()) {
      lastComparison = TBaseHelper.compareTo(this.ownerMid, other.ownerMid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetTargetMid(), other.isSetTargetMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetMid()) {
      lastComparison = TBaseHelper.compareTo(this.targetMid, other.targetMid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetPreviousStatus(), other.isSetPreviousStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreviousStatus()) {
      lastComparison = TBaseHelper.compareTo(this.previousStatus, other.previousStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetResultStatus(), other.isSetResultStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultStatus()) {
      lastComparison = TBaseHelper.compareTo(this.resultStatus, other.resultStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // OWNER_MID
          if (field.type == TType.STRING) {
            this.ownerMid = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // TARGET_MID
          if (field.type == TType.STRING) {
            this.targetMid = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // PREVIOUS_STATUS
          if (field.type == TType.I32) {
            this.previousStatus = ContactStatus.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // RESULT_STATUS
          if (field.type == TType.I32) {
            this.resultStatus = ContactStatus.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.ownerMid != null) {
      oprot.writeFieldBegin(OWNER_MID_FIELD_DESC);
      oprot.writeString(this.ownerMid);
      oprot.writeFieldEnd();
    }
    if (this.targetMid != null) {
      oprot.writeFieldBegin(TARGET_MID_FIELD_DESC);
      oprot.writeString(this.targetMid);
      oprot.writeFieldEnd();
    }
    if (this.previousStatus != null) {
      oprot.writeFieldBegin(PREVIOUS_STATUS_FIELD_DESC);
      oprot.writeI32(this.previousStatus.getValue());
      oprot.writeFieldEnd();
    }
    if (this.resultStatus != null) {
      oprot.writeFieldBegin(RESULT_STATUS_FIELD_DESC);
      oprot.writeI32(this.resultStatus.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("ContactTransition(");
    boolean first = true;

    sb.append("ownerMid:");
    if (this.ownerMid == null) {
      sb.append("null");
    } else {
      sb.append(this.ownerMid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("targetMid:");
    if (this.targetMid == null) {
      sb.append("null");
    } else {
      sb.append(this.targetMid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("previousStatus:");
    if (this.previousStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.previousStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resultStatus:");
    if (this.resultStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.resultStatus);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

