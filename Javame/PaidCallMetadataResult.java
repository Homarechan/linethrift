/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class PaidCallMetadataResult implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("PaidCallMetadataResult");

  private static final TField CURRENCY_EXCHANGE_RATES_FIELD_DESC = new TField("currencyExchangeRates", TType.LIST, (short)1);
  private static final TField RECOMMENDED_COUNTRY_CODES_FIELD_DESC = new TField("recommendedCountryCodes", TType.LIST, (short)2);
  private static final TField AD_COUNTRIES_FIELD_DESC = new TField("adCountries", TType.LIST, (short)3);

  private Vector currencyExchangeRates;
  private Vector recommendedCountryCodes;
  private Vector adCountries;

  // isset id assignments

  public PaidCallMetadataResult() {
  }

  public PaidCallMetadataResult(
    Vector currencyExchangeRates,
    Vector recommendedCountryCodes,
    Vector adCountries)
  {
    this();
    this.currencyExchangeRates = currencyExchangeRates;
    this.recommendedCountryCodes = recommendedCountryCodes;
    this.adCountries = adCountries;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PaidCallMetadataResult(PaidCallMetadataResult other) {
    if (other.isSetCurrencyExchangeRates()) {
      Vector __this__currencyExchangeRates = new Vector();
      for (Enumeration other_enum = other.currencyExchangeRates.elements(); other_enum.hasMoreElements(); ) {
        PaidCallCurrencyExchangeRate other_element = (PaidCallCurrencyExchangeRate)other_enum.nextElement();
        __this__currencyExchangeRates.addElement(new PaidCallCurrencyExchangeRate(other_element));
      }
      this.currencyExchangeRates = __this__currencyExchangeRates;
    }
    if (other.isSetRecommendedCountryCodes()) {
      Vector __this__recommendedCountryCodes = new Vector();
      for (Enumeration other_enum = other.recommendedCountryCodes.elements(); other_enum.hasMoreElements(); ) {
        String other_element = (String)other_enum.nextElement();
        __this__recommendedCountryCodes.addElement(other_element);
      }
      this.recommendedCountryCodes = __this__recommendedCountryCodes;
    }
    if (other.isSetAdCountries()) {
      Vector __this__adCountries = new Vector();
      for (Enumeration other_enum = other.adCountries.elements(); other_enum.hasMoreElements(); ) {
        PaidCallAdCountry other_element = (PaidCallAdCountry)other_enum.nextElement();
        __this__adCountries.addElement(new PaidCallAdCountry(other_element));
      }
      this.adCountries = __this__adCountries;
    }
  }

  public PaidCallMetadataResult deepCopy() {
    return new PaidCallMetadataResult(this);
  }

  public void clear() {
    this.currencyExchangeRates = null;
    this.recommendedCountryCodes = null;
    this.adCountries = null;
  }

  public int getCurrencyExchangeRatesSize() {
    return (this.currencyExchangeRates == null) ? 0 : this.currencyExchangeRates.size();
  }

  public Enumeration getCurrencyExchangeRatesEnumeration() {
    return (this.currencyExchangeRates == null) ? null : this.currencyExchangeRates.elements();
  }

  public void addToCurrencyExchangeRates(PaidCallCurrencyExchangeRate elem) {
    if (this.currencyExchangeRates == null) {
      this.currencyExchangeRates = new Vector();
    }
    this.currencyExchangeRates.addElement(elem);
  }

  public Vector getCurrencyExchangeRates() {
    return this.currencyExchangeRates;
  }

  public void setCurrencyExchangeRates(Vector currencyExchangeRates) {
    this.currencyExchangeRates = currencyExchangeRates;
  }

  public void unsetCurrencyExchangeRates() {
    this.currencyExchangeRates = null;
  }

  /** Returns true if field currencyExchangeRates is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrencyExchangeRates() {
    return this.currencyExchangeRates != null;
  }

  public void setCurrencyExchangeRatesIsSet(boolean value) {
    if (!value) {
      this.currencyExchangeRates = null;
    }
  }

  public int getRecommendedCountryCodesSize() {
    return (this.recommendedCountryCodes == null) ? 0 : this.recommendedCountryCodes.size();
  }

  public Enumeration getRecommendedCountryCodesEnumeration() {
    return (this.recommendedCountryCodes == null) ? null : this.recommendedCountryCodes.elements();
  }

  public void addToRecommendedCountryCodes(String elem) {
    if (this.recommendedCountryCodes == null) {
      this.recommendedCountryCodes = new Vector();
    }
    this.recommendedCountryCodes.addElement(elem);
  }

  public Vector getRecommendedCountryCodes() {
    return this.recommendedCountryCodes;
  }

  public void setRecommendedCountryCodes(Vector recommendedCountryCodes) {
    this.recommendedCountryCodes = recommendedCountryCodes;
  }

  public void unsetRecommendedCountryCodes() {
    this.recommendedCountryCodes = null;
  }

  /** Returns true if field recommendedCountryCodes is set (has been assigned a value) and false otherwise */
  public boolean isSetRecommendedCountryCodes() {
    return this.recommendedCountryCodes != null;
  }

  public void setRecommendedCountryCodesIsSet(boolean value) {
    if (!value) {
      this.recommendedCountryCodes = null;
    }
  }

  public int getAdCountriesSize() {
    return (this.adCountries == null) ? 0 : this.adCountries.size();
  }

  public Enumeration getAdCountriesEnumeration() {
    return (this.adCountries == null) ? null : this.adCountries.elements();
  }

  public void addToAdCountries(PaidCallAdCountry elem) {
    if (this.adCountries == null) {
      this.adCountries = new Vector();
    }
    this.adCountries.addElement(elem);
  }

  public Vector getAdCountries() {
    return this.adCountries;
  }

  public void setAdCountries(Vector adCountries) {
    this.adCountries = adCountries;
  }

  public void unsetAdCountries() {
    this.adCountries = null;
  }

  /** Returns true if field adCountries is set (has been assigned a value) and false otherwise */
  public boolean isSetAdCountries() {
    return this.adCountries != null;
  }

  public void setAdCountriesIsSet(boolean value) {
    if (!value) {
      this.adCountries = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PaidCallMetadataResult)
      return this.equals((PaidCallMetadataResult)that);
    return false;
  }

  public boolean equals(PaidCallMetadataResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_currencyExchangeRates = true && this.isSetCurrencyExchangeRates();
    boolean that_present_currencyExchangeRates = true && that.isSetCurrencyExchangeRates();
    if (this_present_currencyExchangeRates || that_present_currencyExchangeRates) {
      if (!(this_present_currencyExchangeRates && that_present_currencyExchangeRates))
        return false;
      if (!this.currencyExchangeRates.equals(that.currencyExchangeRates))
        return false;
    }

    boolean this_present_recommendedCountryCodes = true && this.isSetRecommendedCountryCodes();
    boolean that_present_recommendedCountryCodes = true && that.isSetRecommendedCountryCodes();
    if (this_present_recommendedCountryCodes || that_present_recommendedCountryCodes) {
      if (!(this_present_recommendedCountryCodes && that_present_recommendedCountryCodes))
        return false;
      if (!this.recommendedCountryCodes.equals(that.recommendedCountryCodes))
        return false;
    }

    boolean this_present_adCountries = true && this.isSetAdCountries();
    boolean that_present_adCountries = true && that.isSetAdCountries();
    if (this_present_adCountries || that_present_adCountries) {
      if (!(this_present_adCountries && that_present_adCountries))
        return false;
      if (!this.adCountries.equals(that.adCountries))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    PaidCallMetadataResult other = (PaidCallMetadataResult)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetCurrencyExchangeRates(), other.isSetCurrencyExchangeRates());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrencyExchangeRates()) {
      lastComparison = TBaseHelper.compareTo(this.currencyExchangeRates, other.currencyExchangeRates);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetRecommendedCountryCodes(), other.isSetRecommendedCountryCodes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRecommendedCountryCodes()) {
      lastComparison = TBaseHelper.compareTo(this.recommendedCountryCodes, other.recommendedCountryCodes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetAdCountries(), other.isSetAdCountries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdCountries()) {
      lastComparison = TBaseHelper.compareTo(this.adCountries, other.adCountries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // CURRENCY_EXCHANGE_RATES
          if (field.type == TType.LIST) {
            {
              TList _list20 = iprot.readListBegin();
              this.currencyExchangeRates = new Vector(_list20.size);
              for (int _i21 = 0; _i21 < _list20.size; ++_i21)
              {
                PaidCallCurrencyExchangeRate _elem22;
                _elem22 = new PaidCallCurrencyExchangeRate();
                _elem22.read(iprot);
                this.currencyExchangeRates.addElement(_elem22);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // RECOMMENDED_COUNTRY_CODES
          if (field.type == TType.LIST) {
            {
              TList _list23 = iprot.readListBegin();
              this.recommendedCountryCodes = new Vector(_list23.size);
              for (int _i24 = 0; _i24 < _list23.size; ++_i24)
              {
                String _elem25;
                _elem25 = iprot.readString();
                this.recommendedCountryCodes.addElement(_elem25);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // AD_COUNTRIES
          if (field.type == TType.LIST) {
            {
              TList _list26 = iprot.readListBegin();
              this.adCountries = new Vector(_list26.size);
              for (int _i27 = 0; _i27 < _list26.size; ++_i27)
              {
                PaidCallAdCountry _elem28;
                _elem28 = new PaidCallAdCountry();
                _elem28.read(iprot);
                this.adCountries.addElement(_elem28);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.currencyExchangeRates != null) {
      oprot.writeFieldBegin(CURRENCY_EXCHANGE_RATES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.currencyExchangeRates.size()));
        for (Enumeration _iter29_enum = this.currencyExchangeRates.elements(); _iter29_enum.hasMoreElements(); )         {
          PaidCallCurrencyExchangeRate _iter29 = (PaidCallCurrencyExchangeRate)_iter29_enum.nextElement();
          _iter29.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.recommendedCountryCodes != null) {
      oprot.writeFieldBegin(RECOMMENDED_COUNTRY_CODES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.recommendedCountryCodes.size()));
        for (Enumeration _iter30_enum = this.recommendedCountryCodes.elements(); _iter30_enum.hasMoreElements(); )         {
          String _iter30 = (String)_iter30_enum.nextElement();
          oprot.writeString(_iter30);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.adCountries != null) {
      oprot.writeFieldBegin(AD_COUNTRIES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.adCountries.size()));
        for (Enumeration _iter31_enum = this.adCountries.elements(); _iter31_enum.hasMoreElements(); )         {
          PaidCallAdCountry _iter31 = (PaidCallAdCountry)_iter31_enum.nextElement();
          _iter31.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("PaidCallMetadataResult(");
    boolean first = true;

    sb.append("currencyExchangeRates:");
    if (this.currencyExchangeRates == null) {
      sb.append("null");
    } else {
      sb.append(this.currencyExchangeRates);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("recommendedCountryCodes:");
    if (this.recommendedCountryCodes == null) {
      sb.append("null");
    } else {
      sb.append(this.recommendedCountryCodes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("adCountries:");
    if (this.adCountries == null) {
      sb.append("null");
    } else {
      sb.append(this.adCountries);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

