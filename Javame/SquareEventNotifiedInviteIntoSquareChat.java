/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class SquareEventNotifiedInviteIntoSquareChat implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("SquareEventNotifiedInviteIntoSquareChat");

  private static final TField SQUARE_CHAT_MID_FIELD_DESC = new TField("squareChatMid", TType.STRING, (short)1);
  private static final TField INVITEES_FIELD_DESC = new TField("invitees", TType.LIST, (short)2);
  private static final TField INVITOR_FIELD_DESC = new TField("invitor", TType.STRUCT, (short)3);
  private static final TField INVITOR_RELATION_FIELD_DESC = new TField("invitorRelation", TType.STRUCT, (short)4);

  private String squareChatMid;
  private Vector invitees;
  private SquareMember invitor;
  private SquareMemberRelation invitorRelation;

  // isset id assignments

  public SquareEventNotifiedInviteIntoSquareChat() {
  }

  public SquareEventNotifiedInviteIntoSquareChat(
    String squareChatMid,
    Vector invitees,
    SquareMember invitor,
    SquareMemberRelation invitorRelation)
  {
    this();
    this.squareChatMid = squareChatMid;
    this.invitees = invitees;
    this.invitor = invitor;
    this.invitorRelation = invitorRelation;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SquareEventNotifiedInviteIntoSquareChat(SquareEventNotifiedInviteIntoSquareChat other) {
    if (other.isSetSquareChatMid()) {
      this.squareChatMid = other.squareChatMid;
    }
    if (other.isSetInvitees()) {
      Vector __this__invitees = new Vector();
      for (Enumeration other_enum = other.invitees.elements(); other_enum.hasMoreElements(); ) {
        SquareMember other_element = (SquareMember)other_enum.nextElement();
        __this__invitees.addElement(new SquareMember(other_element));
      }
      this.invitees = __this__invitees;
    }
    if (other.isSetInvitor()) {
      this.invitor = new SquareMember(other.invitor);
    }
    if (other.isSetInvitorRelation()) {
      this.invitorRelation = new SquareMemberRelation(other.invitorRelation);
    }
  }

  public SquareEventNotifiedInviteIntoSquareChat deepCopy() {
    return new SquareEventNotifiedInviteIntoSquareChat(this);
  }

  public void clear() {
    this.squareChatMid = null;
    this.invitees = null;
    this.invitor = null;
    this.invitorRelation = null;
  }

  public String getSquareChatMid() {
    return this.squareChatMid;
  }

  public void setSquareChatMid(String squareChatMid) {
    this.squareChatMid = squareChatMid;
  }

  public void unsetSquareChatMid() {
    this.squareChatMid = null;
  }

  /** Returns true if field squareChatMid is set (has been assigned a value) and false otherwise */
  public boolean isSetSquareChatMid() {
    return this.squareChatMid != null;
  }

  public void setSquareChatMidIsSet(boolean value) {
    if (!value) {
      this.squareChatMid = null;
    }
  }

  public int getInviteesSize() {
    return (this.invitees == null) ? 0 : this.invitees.size();
  }

  public Enumeration getInviteesEnumeration() {
    return (this.invitees == null) ? null : this.invitees.elements();
  }

  public void addToInvitees(SquareMember elem) {
    if (this.invitees == null) {
      this.invitees = new Vector();
    }
    this.invitees.addElement(elem);
  }

  public Vector getInvitees() {
    return this.invitees;
  }

  public void setInvitees(Vector invitees) {
    this.invitees = invitees;
  }

  public void unsetInvitees() {
    this.invitees = null;
  }

  /** Returns true if field invitees is set (has been assigned a value) and false otherwise */
  public boolean isSetInvitees() {
    return this.invitees != null;
  }

  public void setInviteesIsSet(boolean value) {
    if (!value) {
      this.invitees = null;
    }
  }

  public SquareMember getInvitor() {
    return this.invitor;
  }

  public void setInvitor(SquareMember invitor) {
    this.invitor = invitor;
  }

  public void unsetInvitor() {
    this.invitor = null;
  }

  /** Returns true if field invitor is set (has been assigned a value) and false otherwise */
  public boolean isSetInvitor() {
    return this.invitor != null;
  }

  public void setInvitorIsSet(boolean value) {
    if (!value) {
      this.invitor = null;
    }
  }

  public SquareMemberRelation getInvitorRelation() {
    return this.invitorRelation;
  }

  public void setInvitorRelation(SquareMemberRelation invitorRelation) {
    this.invitorRelation = invitorRelation;
  }

  public void unsetInvitorRelation() {
    this.invitorRelation = null;
  }

  /** Returns true if field invitorRelation is set (has been assigned a value) and false otherwise */
  public boolean isSetInvitorRelation() {
    return this.invitorRelation != null;
  }

  public void setInvitorRelationIsSet(boolean value) {
    if (!value) {
      this.invitorRelation = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SquareEventNotifiedInviteIntoSquareChat)
      return this.equals((SquareEventNotifiedInviteIntoSquareChat)that);
    return false;
  }

  public boolean equals(SquareEventNotifiedInviteIntoSquareChat that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_squareChatMid = true && this.isSetSquareChatMid();
    boolean that_present_squareChatMid = true && that.isSetSquareChatMid();
    if (this_present_squareChatMid || that_present_squareChatMid) {
      if (!(this_present_squareChatMid && that_present_squareChatMid))
        return false;
      if (!this.squareChatMid.equals(that.squareChatMid))
        return false;
    }

    boolean this_present_invitees = true && this.isSetInvitees();
    boolean that_present_invitees = true && that.isSetInvitees();
    if (this_present_invitees || that_present_invitees) {
      if (!(this_present_invitees && that_present_invitees))
        return false;
      if (!this.invitees.equals(that.invitees))
        return false;
    }

    boolean this_present_invitor = true && this.isSetInvitor();
    boolean that_present_invitor = true && that.isSetInvitor();
    if (this_present_invitor || that_present_invitor) {
      if (!(this_present_invitor && that_present_invitor))
        return false;
      if (!this.invitor.equals(that.invitor))
        return false;
    }

    boolean this_present_invitorRelation = true && this.isSetInvitorRelation();
    boolean that_present_invitorRelation = true && that.isSetInvitorRelation();
    if (this_present_invitorRelation || that_present_invitorRelation) {
      if (!(this_present_invitorRelation && that_present_invitorRelation))
        return false;
      if (!this.invitorRelation.equals(that.invitorRelation))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    SquareEventNotifiedInviteIntoSquareChat other = (SquareEventNotifiedInviteIntoSquareChat)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetSquareChatMid(), other.isSetSquareChatMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSquareChatMid()) {
      lastComparison = TBaseHelper.compareTo(this.squareChatMid, other.squareChatMid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetInvitees(), other.isSetInvitees());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvitees()) {
      lastComparison = TBaseHelper.compareTo(this.invitees, other.invitees);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetInvitor(), other.isSetInvitor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvitor()) {
      lastComparison = this.invitor.compareTo(other.invitor);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetInvitorRelation(), other.isSetInvitorRelation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvitorRelation()) {
      lastComparison = this.invitorRelation.compareTo(other.invitorRelation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // SQUARE_CHAT_MID
          if (field.type == TType.STRING) {
            this.squareChatMid = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // INVITEES
          if (field.type == TType.LIST) {
            {
              TList _list337 = iprot.readListBegin();
              this.invitees = new Vector(_list337.size);
              for (int _i338 = 0; _i338 < _list337.size; ++_i338)
              {
                SquareMember _elem339;
                _elem339 = new SquareMember();
                _elem339.read(iprot);
                this.invitees.addElement(_elem339);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // INVITOR
          if (field.type == TType.STRUCT) {
            this.invitor = new SquareMember();
            this.invitor.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // INVITOR_RELATION
          if (field.type == TType.STRUCT) {
            this.invitorRelation = new SquareMemberRelation();
            this.invitorRelation.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.squareChatMid != null) {
      oprot.writeFieldBegin(SQUARE_CHAT_MID_FIELD_DESC);
      oprot.writeString(this.squareChatMid);
      oprot.writeFieldEnd();
    }
    if (this.invitees != null) {
      oprot.writeFieldBegin(INVITEES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.invitees.size()));
        for (Enumeration _iter340_enum = this.invitees.elements(); _iter340_enum.hasMoreElements(); )         {
          SquareMember _iter340 = (SquareMember)_iter340_enum.nextElement();
          _iter340.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.invitor != null) {
      oprot.writeFieldBegin(INVITOR_FIELD_DESC);
      this.invitor.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.invitorRelation != null) {
      oprot.writeFieldBegin(INVITOR_RELATION_FIELD_DESC);
      this.invitorRelation.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("SquareEventNotifiedInviteIntoSquareChat(");
    boolean first = true;

    sb.append("squareChatMid:");
    if (this.squareChatMid == null) {
      sb.append("null");
    } else {
      sb.append(this.squareChatMid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("invitees:");
    if (this.invitees == null) {
      sb.append("null");
    } else {
      sb.append(this.invitees);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("invitor:");
    if (this.invitor == null) {
      sb.append("null");
    } else {
      sb.append(this.invitor);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("invitorRelation:");
    if (this.invitorRelation == null) {
      sb.append("null");
    } else {
      sb.append(this.invitorRelation);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

