/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class RegisterWithSnsIdResult implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("RegisterWithSnsIdResult");

  private static final TField AUTH_TOKEN_FIELD_DESC = new TField("authToken", TType.STRING, (short)1);
  private static final TField USER_CREATED_FIELD_DESC = new TField("userCreated", TType.BOOL, (short)2);

  private String authToken;
  private boolean userCreated;

  // isset id assignments
  private static final int __USERCREATED_ISSET_ID = 0;
  private boolean[] __isset_vector = new boolean[1];

  public RegisterWithSnsIdResult() {
  }

  public RegisterWithSnsIdResult(
    String authToken,
    boolean userCreated)
  {
    this();
    this.authToken = authToken;
    this.userCreated = userCreated;
    setUserCreatedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RegisterWithSnsIdResult(RegisterWithSnsIdResult other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    if (other.isSetAuthToken()) {
      this.authToken = other.authToken;
    }
    this.userCreated = other.userCreated;
  }

  public RegisterWithSnsIdResult deepCopy() {
    return new RegisterWithSnsIdResult(this);
  }

  public void clear() {
    this.authToken = null;
    setUserCreatedIsSet(false);
    this.userCreated = false;
  }

  public String getAuthToken() {
    return this.authToken;
  }

  public void setAuthToken(String authToken) {
    this.authToken = authToken;
  }

  public void unsetAuthToken() {
    this.authToken = null;
  }

  /** Returns true if field authToken is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthToken() {
    return this.authToken != null;
  }

  public void setAuthTokenIsSet(boolean value) {
    if (!value) {
      this.authToken = null;
    }
  }

  public boolean isUserCreated() {
    return this.userCreated;
  }

  public void setUserCreated(boolean userCreated) {
    this.userCreated = userCreated;
    setUserCreatedIsSet(true);
  }

  public void unsetUserCreated() {
    __isset_vector[__USERCREATED_ISSET_ID] = false;
  }

  /** Returns true if field userCreated is set (has been assigned a value) and false otherwise */
  public boolean isSetUserCreated() {
    return __isset_vector[__USERCREATED_ISSET_ID];
  }

  public void setUserCreatedIsSet(boolean value) {
    __isset_vector[__USERCREATED_ISSET_ID] = value;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RegisterWithSnsIdResult)
      return this.equals((RegisterWithSnsIdResult)that);
    return false;
  }

  public boolean equals(RegisterWithSnsIdResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_authToken = true && this.isSetAuthToken();
    boolean that_present_authToken = true && that.isSetAuthToken();
    if (this_present_authToken || that_present_authToken) {
      if (!(this_present_authToken && that_present_authToken))
        return false;
      if (!this.authToken.equals(that.authToken))
        return false;
    }

    boolean this_present_userCreated = true;
    boolean that_present_userCreated = true;
    if (this_present_userCreated || that_present_userCreated) {
      if (!(this_present_userCreated && that_present_userCreated))
        return false;
      if (this.userCreated != that.userCreated)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    RegisterWithSnsIdResult other = (RegisterWithSnsIdResult)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetAuthToken(), other.isSetAuthToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthToken()) {
      lastComparison = TBaseHelper.compareTo(this.authToken, other.authToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetUserCreated(), other.isSetUserCreated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserCreated()) {
      lastComparison = TBaseHelper.compareTo(this.userCreated, other.userCreated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // AUTH_TOKEN
          if (field.type == TType.STRING) {
            this.authToken = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // USER_CREATED
          if (field.type == TType.BOOL) {
            this.userCreated = iprot.readBool();
            setUserCreatedIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.authToken != null) {
      oprot.writeFieldBegin(AUTH_TOKEN_FIELD_DESC);
      oprot.writeString(this.authToken);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(USER_CREATED_FIELD_DESC);
    oprot.writeBool(this.userCreated);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("RegisterWithSnsIdResult(");
    boolean first = true;

    sb.append("authToken:");
    if (this.authToken == null) {
      sb.append("null");
    } else {
      sb.append(this.authToken);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userCreated:");
    sb.append(this.userCreated);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

