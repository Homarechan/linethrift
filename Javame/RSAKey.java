/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class RSAKey implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("RSAKey");

  private static final TField KEYNM_FIELD_DESC = new TField("keynm", TType.STRING, (short)1);
  private static final TField NVALUE_FIELD_DESC = new TField("nvalue", TType.STRING, (short)2);
  private static final TField EVALUE_FIELD_DESC = new TField("evalue", TType.STRING, (short)3);
  private static final TField SESSION_KEY_FIELD_DESC = new TField("sessionKey", TType.STRING, (short)4);

  private String keynm;
  private String nvalue;
  private String evalue;
  private String sessionKey;

  // isset id assignments

  public RSAKey() {
  }

  public RSAKey(
    String keynm,
    String nvalue,
    String evalue,
    String sessionKey)
  {
    this();
    this.keynm = keynm;
    this.nvalue = nvalue;
    this.evalue = evalue;
    this.sessionKey = sessionKey;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RSAKey(RSAKey other) {
    if (other.isSetKeynm()) {
      this.keynm = other.keynm;
    }
    if (other.isSetNvalue()) {
      this.nvalue = other.nvalue;
    }
    if (other.isSetEvalue()) {
      this.evalue = other.evalue;
    }
    if (other.isSetSessionKey()) {
      this.sessionKey = other.sessionKey;
    }
  }

  public RSAKey deepCopy() {
    return new RSAKey(this);
  }

  public void clear() {
    this.keynm = null;
    this.nvalue = null;
    this.evalue = null;
    this.sessionKey = null;
  }

  public String getKeynm() {
    return this.keynm;
  }

  public void setKeynm(String keynm) {
    this.keynm = keynm;
  }

  public void unsetKeynm() {
    this.keynm = null;
  }

  /** Returns true if field keynm is set (has been assigned a value) and false otherwise */
  public boolean isSetKeynm() {
    return this.keynm != null;
  }

  public void setKeynmIsSet(boolean value) {
    if (!value) {
      this.keynm = null;
    }
  }

  public String getNvalue() {
    return this.nvalue;
  }

  public void setNvalue(String nvalue) {
    this.nvalue = nvalue;
  }

  public void unsetNvalue() {
    this.nvalue = null;
  }

  /** Returns true if field nvalue is set (has been assigned a value) and false otherwise */
  public boolean isSetNvalue() {
    return this.nvalue != null;
  }

  public void setNvalueIsSet(boolean value) {
    if (!value) {
      this.nvalue = null;
    }
  }

  public String getEvalue() {
    return this.evalue;
  }

  public void setEvalue(String evalue) {
    this.evalue = evalue;
  }

  public void unsetEvalue() {
    this.evalue = null;
  }

  /** Returns true if field evalue is set (has been assigned a value) and false otherwise */
  public boolean isSetEvalue() {
    return this.evalue != null;
  }

  public void setEvalueIsSet(boolean value) {
    if (!value) {
      this.evalue = null;
    }
  }

  public String getSessionKey() {
    return this.sessionKey;
  }

  public void setSessionKey(String sessionKey) {
    this.sessionKey = sessionKey;
  }

  public void unsetSessionKey() {
    this.sessionKey = null;
  }

  /** Returns true if field sessionKey is set (has been assigned a value) and false otherwise */
  public boolean isSetSessionKey() {
    return this.sessionKey != null;
  }

  public void setSessionKeyIsSet(boolean value) {
    if (!value) {
      this.sessionKey = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RSAKey)
      return this.equals((RSAKey)that);
    return false;
  }

  public boolean equals(RSAKey that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_keynm = true && this.isSetKeynm();
    boolean that_present_keynm = true && that.isSetKeynm();
    if (this_present_keynm || that_present_keynm) {
      if (!(this_present_keynm && that_present_keynm))
        return false;
      if (!this.keynm.equals(that.keynm))
        return false;
    }

    boolean this_present_nvalue = true && this.isSetNvalue();
    boolean that_present_nvalue = true && that.isSetNvalue();
    if (this_present_nvalue || that_present_nvalue) {
      if (!(this_present_nvalue && that_present_nvalue))
        return false;
      if (!this.nvalue.equals(that.nvalue))
        return false;
    }

    boolean this_present_evalue = true && this.isSetEvalue();
    boolean that_present_evalue = true && that.isSetEvalue();
    if (this_present_evalue || that_present_evalue) {
      if (!(this_present_evalue && that_present_evalue))
        return false;
      if (!this.evalue.equals(that.evalue))
        return false;
    }

    boolean this_present_sessionKey = true && this.isSetSessionKey();
    boolean that_present_sessionKey = true && that.isSetSessionKey();
    if (this_present_sessionKey || that_present_sessionKey) {
      if (!(this_present_sessionKey && that_present_sessionKey))
        return false;
      if (!this.sessionKey.equals(that.sessionKey))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    RSAKey other = (RSAKey)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetKeynm(), other.isSetKeynm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeynm()) {
      lastComparison = TBaseHelper.compareTo(this.keynm, other.keynm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetNvalue(), other.isSetNvalue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNvalue()) {
      lastComparison = TBaseHelper.compareTo(this.nvalue, other.nvalue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetEvalue(), other.isSetEvalue());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEvalue()) {
      lastComparison = TBaseHelper.compareTo(this.evalue, other.evalue);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSessionKey(), other.isSetSessionKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSessionKey()) {
      lastComparison = TBaseHelper.compareTo(this.sessionKey, other.sessionKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // KEYNM
          if (field.type == TType.STRING) {
            this.keynm = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // NVALUE
          if (field.type == TType.STRING) {
            this.nvalue = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // EVALUE
          if (field.type == TType.STRING) {
            this.evalue = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // SESSION_KEY
          if (field.type == TType.STRING) {
            this.sessionKey = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.keynm != null) {
      oprot.writeFieldBegin(KEYNM_FIELD_DESC);
      oprot.writeString(this.keynm);
      oprot.writeFieldEnd();
    }
    if (this.nvalue != null) {
      oprot.writeFieldBegin(NVALUE_FIELD_DESC);
      oprot.writeString(this.nvalue);
      oprot.writeFieldEnd();
    }
    if (this.evalue != null) {
      oprot.writeFieldBegin(EVALUE_FIELD_DESC);
      oprot.writeString(this.evalue);
      oprot.writeFieldEnd();
    }
    if (this.sessionKey != null) {
      oprot.writeFieldBegin(SESSION_KEY_FIELD_DESC);
      oprot.writeString(this.sessionKey);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("RSAKey(");
    boolean first = true;

    sb.append("keynm:");
    if (this.keynm == null) {
      sb.append("null");
    } else {
      sb.append(this.keynm);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nvalue:");
    if (this.nvalue == null) {
      sb.append("null");
    } else {
      sb.append(this.nvalue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("evalue:");
    if (this.evalue == null) {
      sb.append("null");
    } else {
      sb.append(this.evalue);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sessionKey:");
    if (this.sessionKey == null) {
      sb.append("null");
    } else {
      sb.append(this.sessionKey);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

