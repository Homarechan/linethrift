/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class GetSquareCategoriesResponse implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("GetSquareCategoriesResponse");

  private static final TField CATEGORY_LIST_FIELD_DESC = new TField("categoryList", TType.LIST, (short)1);

  private Vector categoryList;

  // isset id assignments

  public GetSquareCategoriesResponse() {
  }

  public GetSquareCategoriesResponse(
    Vector categoryList)
  {
    this();
    this.categoryList = categoryList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetSquareCategoriesResponse(GetSquareCategoriesResponse other) {
    if (other.isSetCategoryList()) {
      Vector __this__categoryList = new Vector();
      for (Enumeration other_enum = other.categoryList.elements(); other_enum.hasMoreElements(); ) {
        Category other_element = (Category)other_enum.nextElement();
        __this__categoryList.addElement(new Category(other_element));
      }
      this.categoryList = __this__categoryList;
    }
  }

  public GetSquareCategoriesResponse deepCopy() {
    return new GetSquareCategoriesResponse(this);
  }

  public void clear() {
    this.categoryList = null;
  }

  public int getCategoryListSize() {
    return (this.categoryList == null) ? 0 : this.categoryList.size();
  }

  public Enumeration getCategoryListEnumeration() {
    return (this.categoryList == null) ? null : this.categoryList.elements();
  }

  public void addToCategoryList(Category elem) {
    if (this.categoryList == null) {
      this.categoryList = new Vector();
    }
    this.categoryList.addElement(elem);
  }

  public Vector getCategoryList() {
    return this.categoryList;
  }

  public void setCategoryList(Vector categoryList) {
    this.categoryList = categoryList;
  }

  public void unsetCategoryList() {
    this.categoryList = null;
  }

  /** Returns true if field categoryList is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryList() {
    return this.categoryList != null;
  }

  public void setCategoryListIsSet(boolean value) {
    if (!value) {
      this.categoryList = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GetSquareCategoriesResponse)
      return this.equals((GetSquareCategoriesResponse)that);
    return false;
  }

  public boolean equals(GetSquareCategoriesResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_categoryList = true && this.isSetCategoryList();
    boolean that_present_categoryList = true && that.isSetCategoryList();
    if (this_present_categoryList || that_present_categoryList) {
      if (!(this_present_categoryList && that_present_categoryList))
        return false;
      if (!this.categoryList.equals(that.categoryList))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    GetSquareCategoriesResponse other = (GetSquareCategoriesResponse)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetCategoryList(), other.isSetCategoryList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryList()) {
      lastComparison = TBaseHelper.compareTo(this.categoryList, other.categoryList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // CATEGORY_LIST
          if (field.type == TType.LIST) {
            {
              TList _list378 = iprot.readListBegin();
              this.categoryList = new Vector(_list378.size);
              for (int _i379 = 0; _i379 < _list378.size; ++_i379)
              {
                Category _elem380;
                _elem380 = new Category();
                _elem380.read(iprot);
                this.categoryList.addElement(_elem380);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.categoryList != null) {
      oprot.writeFieldBegin(CATEGORY_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.categoryList.size()));
        for (Enumeration _iter381_enum = this.categoryList.elements(); _iter381_enum.hasMoreElements(); )         {
          Category _iter381 = (Category)_iter381_enum.nextElement();
          _iter381.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("GetSquareCategoriesResponse(");
    boolean first = true;

    sb.append("categoryList:");
    if (this.categoryList == null) {
      sb.append("null");
    } else {
      sb.append(this.categoryList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

