/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class Square implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("Square");

  private static final TField MID_FIELD_DESC = new TField("mid", TType.STRING, (short)1);
  private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)2);
  private static final TField WELCOME_MESSAGE_FIELD_DESC = new TField("welcomeMessage", TType.STRING, (short)3);
  private static final TField PROFILE_IMAGE_OBS_HASH_FIELD_DESC = new TField("profileImageObsHash", TType.STRING, (short)4);
  private static final TField DESC_FIELD_DESC = new TField("desc", TType.STRING, (short)5);
  private static final TField SEARCHABLE_FIELD_DESC = new TField("searchable", TType.BOOL, (short)6);
  private static final TField TYPE_FIELD_DESC = new TField("type", TType.I32, (short)7);
  private static final TField CATEGORY_ID_FIELD_DESC = new TField("categoryID", TType.I32, (short)8);
  private static final TField INVITATION_URL_FIELD_DESC = new TField("invitationURL", TType.STRING, (short)9);
  private static final TField REVISION_FIELD_DESC = new TField("revision", TType.I64, (short)10);
  private static final TField ABLE_TO_USE_INVITATION_TICKET_FIELD_DESC = new TField("ableToUseInvitationTicket", TType.BOOL, (short)11);
  private static final TField STATE_FIELD_DESC = new TField("state", TType.I32, (short)12);

  private String mid;
  private String name;
  private String welcomeMessage;
  private String profileImageObsHash;
  private String desc;
  private boolean searchable;
  private SquareType type;
  private int categoryID;
  private String invitationURL;
  private long revision;
  private boolean ableToUseInvitationTicket;
  private SquareState state;

  // isset id assignments
  private static final int __SEARCHABLE_ISSET_ID = 0;
  private static final int __CATEGORYID_ISSET_ID = 1;
  private static final int __REVISION_ISSET_ID = 2;
  private static final int __ABLETOUSEINVITATIONTICKET_ISSET_ID = 3;
  private boolean[] __isset_vector = new boolean[4];

  public Square() {
  }

  public Square(
    String mid,
    String name,
    String welcomeMessage,
    String profileImageObsHash,
    String desc,
    boolean searchable,
    SquareType type,
    int categoryID,
    String invitationURL,
    long revision,
    boolean ableToUseInvitationTicket,
    SquareState state)
  {
    this();
    this.mid = mid;
    this.name = name;
    this.welcomeMessage = welcomeMessage;
    this.profileImageObsHash = profileImageObsHash;
    this.desc = desc;
    this.searchable = searchable;
    setSearchableIsSet(true);
    this.type = type;
    this.categoryID = categoryID;
    setCategoryIDIsSet(true);
    this.invitationURL = invitationURL;
    this.revision = revision;
    setRevisionIsSet(true);
    this.ableToUseInvitationTicket = ableToUseInvitationTicket;
    setAbleToUseInvitationTicketIsSet(true);
    this.state = state;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Square(Square other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    if (other.isSetMid()) {
      this.mid = other.mid;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetWelcomeMessage()) {
      this.welcomeMessage = other.welcomeMessage;
    }
    if (other.isSetProfileImageObsHash()) {
      this.profileImageObsHash = other.profileImageObsHash;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    this.searchable = other.searchable;
    if (other.isSetType()) {
      this.type = other.type;
    }
    this.categoryID = other.categoryID;
    if (other.isSetInvitationURL()) {
      this.invitationURL = other.invitationURL;
    }
    this.revision = other.revision;
    this.ableToUseInvitationTicket = other.ableToUseInvitationTicket;
    if (other.isSetState()) {
      this.state = other.state;
    }
  }

  public Square deepCopy() {
    return new Square(this);
  }

  public void clear() {
    this.mid = null;
    this.name = null;
    this.welcomeMessage = null;
    this.profileImageObsHash = null;
    this.desc = null;
    setSearchableIsSet(false);
    this.searchable = false;
    this.type = null;
    setCategoryIDIsSet(false);
    this.categoryID = 0;
    this.invitationURL = null;
    setRevisionIsSet(false);
    this.revision = 0;
    setAbleToUseInvitationTicketIsSet(false);
    this.ableToUseInvitationTicket = false;
    this.state = null;
  }

  public String getMid() {
    return this.mid;
  }

  public void setMid(String mid) {
    this.mid = mid;
  }

  public void unsetMid() {
    this.mid = null;
  }

  /** Returns true if field mid is set (has been assigned a value) and false otherwise */
  public boolean isSetMid() {
    return this.mid != null;
  }

  public void setMidIsSet(boolean value) {
    if (!value) {
      this.mid = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getWelcomeMessage() {
    return this.welcomeMessage;
  }

  public void setWelcomeMessage(String welcomeMessage) {
    this.welcomeMessage = welcomeMessage;
  }

  public void unsetWelcomeMessage() {
    this.welcomeMessage = null;
  }

  /** Returns true if field welcomeMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetWelcomeMessage() {
    return this.welcomeMessage != null;
  }

  public void setWelcomeMessageIsSet(boolean value) {
    if (!value) {
      this.welcomeMessage = null;
    }
  }

  public String getProfileImageObsHash() {
    return this.profileImageObsHash;
  }

  public void setProfileImageObsHash(String profileImageObsHash) {
    this.profileImageObsHash = profileImageObsHash;
  }

  public void unsetProfileImageObsHash() {
    this.profileImageObsHash = null;
  }

  /** Returns true if field profileImageObsHash is set (has been assigned a value) and false otherwise */
  public boolean isSetProfileImageObsHash() {
    return this.profileImageObsHash != null;
  }

  public void setProfileImageObsHashIsSet(boolean value) {
    if (!value) {
      this.profileImageObsHash = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public void setDesc(String desc) {
    this.desc = desc;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public boolean isSearchable() {
    return this.searchable;
  }

  public void setSearchable(boolean searchable) {
    this.searchable = searchable;
    setSearchableIsSet(true);
  }

  public void unsetSearchable() {
    __isset_vector[__SEARCHABLE_ISSET_ID] = false;
  }

  /** Returns true if field searchable is set (has been assigned a value) and false otherwise */
  public boolean isSetSearchable() {
    return __isset_vector[__SEARCHABLE_ISSET_ID];
  }

  public void setSearchableIsSet(boolean value) {
    __isset_vector[__SEARCHABLE_ISSET_ID] = value;
  }

  /**
   * 
   * @see SquareType
   */
  public SquareType getType() {
    return this.type;
  }

  /**
   * 
   * @see SquareType
   */
  public void setType(SquareType type) {
    this.type = type;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getCategoryID() {
    return this.categoryID;
  }

  public void setCategoryID(int categoryID) {
    this.categoryID = categoryID;
    setCategoryIDIsSet(true);
  }

  public void unsetCategoryID() {
    __isset_vector[__CATEGORYID_ISSET_ID] = false;
  }

  /** Returns true if field categoryID is set (has been assigned a value) and false otherwise */
  public boolean isSetCategoryID() {
    return __isset_vector[__CATEGORYID_ISSET_ID];
  }

  public void setCategoryIDIsSet(boolean value) {
    __isset_vector[__CATEGORYID_ISSET_ID] = value;
  }

  public String getInvitationURL() {
    return this.invitationURL;
  }

  public void setInvitationURL(String invitationURL) {
    this.invitationURL = invitationURL;
  }

  public void unsetInvitationURL() {
    this.invitationURL = null;
  }

  /** Returns true if field invitationURL is set (has been assigned a value) and false otherwise */
  public boolean isSetInvitationURL() {
    return this.invitationURL != null;
  }

  public void setInvitationURLIsSet(boolean value) {
    if (!value) {
      this.invitationURL = null;
    }
  }

  public long getRevision() {
    return this.revision;
  }

  public void setRevision(long revision) {
    this.revision = revision;
    setRevisionIsSet(true);
  }

  public void unsetRevision() {
    __isset_vector[__REVISION_ISSET_ID] = false;
  }

  /** Returns true if field revision is set (has been assigned a value) and false otherwise */
  public boolean isSetRevision() {
    return __isset_vector[__REVISION_ISSET_ID];
  }

  public void setRevisionIsSet(boolean value) {
    __isset_vector[__REVISION_ISSET_ID] = value;
  }

  public boolean isAbleToUseInvitationTicket() {
    return this.ableToUseInvitationTicket;
  }

  public void setAbleToUseInvitationTicket(boolean ableToUseInvitationTicket) {
    this.ableToUseInvitationTicket = ableToUseInvitationTicket;
    setAbleToUseInvitationTicketIsSet(true);
  }

  public void unsetAbleToUseInvitationTicket() {
    __isset_vector[__ABLETOUSEINVITATIONTICKET_ISSET_ID] = false;
  }

  /** Returns true if field ableToUseInvitationTicket is set (has been assigned a value) and false otherwise */
  public boolean isSetAbleToUseInvitationTicket() {
    return __isset_vector[__ABLETOUSEINVITATIONTICKET_ISSET_ID];
  }

  public void setAbleToUseInvitationTicketIsSet(boolean value) {
    __isset_vector[__ABLETOUSEINVITATIONTICKET_ISSET_ID] = value;
  }

  /**
   * 
   * @see SquareState
   */
  public SquareState getState() {
    return this.state;
  }

  /**
   * 
   * @see SquareState
   */
  public void setState(SquareState state) {
    this.state = state;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Square)
      return this.equals((Square)that);
    return false;
  }

  public boolean equals(Square that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_mid = true && this.isSetMid();
    boolean that_present_mid = true && that.isSetMid();
    if (this_present_mid || that_present_mid) {
      if (!(this_present_mid && that_present_mid))
        return false;
      if (!this.mid.equals(that.mid))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_welcomeMessage = true && this.isSetWelcomeMessage();
    boolean that_present_welcomeMessage = true && that.isSetWelcomeMessage();
    if (this_present_welcomeMessage || that_present_welcomeMessage) {
      if (!(this_present_welcomeMessage && that_present_welcomeMessage))
        return false;
      if (!this.welcomeMessage.equals(that.welcomeMessage))
        return false;
    }

    boolean this_present_profileImageObsHash = true && this.isSetProfileImageObsHash();
    boolean that_present_profileImageObsHash = true && that.isSetProfileImageObsHash();
    if (this_present_profileImageObsHash || that_present_profileImageObsHash) {
      if (!(this_present_profileImageObsHash && that_present_profileImageObsHash))
        return false;
      if (!this.profileImageObsHash.equals(that.profileImageObsHash))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_searchable = true;
    boolean that_present_searchable = true;
    if (this_present_searchable || that_present_searchable) {
      if (!(this_present_searchable && that_present_searchable))
        return false;
      if (this.searchable != that.searchable)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_categoryID = true;
    boolean that_present_categoryID = true;
    if (this_present_categoryID || that_present_categoryID) {
      if (!(this_present_categoryID && that_present_categoryID))
        return false;
      if (this.categoryID != that.categoryID)
        return false;
    }

    boolean this_present_invitationURL = true && this.isSetInvitationURL();
    boolean that_present_invitationURL = true && that.isSetInvitationURL();
    if (this_present_invitationURL || that_present_invitationURL) {
      if (!(this_present_invitationURL && that_present_invitationURL))
        return false;
      if (!this.invitationURL.equals(that.invitationURL))
        return false;
    }

    boolean this_present_revision = true;
    boolean that_present_revision = true;
    if (this_present_revision || that_present_revision) {
      if (!(this_present_revision && that_present_revision))
        return false;
      if (this.revision != that.revision)
        return false;
    }

    boolean this_present_ableToUseInvitationTicket = true;
    boolean that_present_ableToUseInvitationTicket = true;
    if (this_present_ableToUseInvitationTicket || that_present_ableToUseInvitationTicket) {
      if (!(this_present_ableToUseInvitationTicket && that_present_ableToUseInvitationTicket))
        return false;
      if (this.ableToUseInvitationTicket != that.ableToUseInvitationTicket)
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    Square other = (Square)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetMid(), other.isSetMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMid()) {
      lastComparison = TBaseHelper.compareTo(this.mid, other.mid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetName(), other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetWelcomeMessage(), other.isSetWelcomeMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWelcomeMessage()) {
      lastComparison = TBaseHelper.compareTo(this.welcomeMessage, other.welcomeMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetProfileImageObsHash(), other.isSetProfileImageObsHash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfileImageObsHash()) {
      lastComparison = TBaseHelper.compareTo(this.profileImageObsHash, other.profileImageObsHash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetDesc(), other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSearchable(), other.isSetSearchable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSearchable()) {
      lastComparison = TBaseHelper.compareTo(this.searchable, other.searchable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetType(), other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetCategoryID(), other.isSetCategoryID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategoryID()) {
      lastComparison = TBaseHelper.compareTo(this.categoryID, other.categoryID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetInvitationURL(), other.isSetInvitationURL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInvitationURL()) {
      lastComparison = TBaseHelper.compareTo(this.invitationURL, other.invitationURL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetRevision(), other.isSetRevision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRevision()) {
      lastComparison = TBaseHelper.compareTo(this.revision, other.revision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetAbleToUseInvitationTicket(), other.isSetAbleToUseInvitationTicket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAbleToUseInvitationTicket()) {
      lastComparison = TBaseHelper.compareTo(this.ableToUseInvitationTicket, other.ableToUseInvitationTicket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetState(), other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // MID
          if (field.type == TType.STRING) {
            this.mid = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // NAME
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // WELCOME_MESSAGE
          if (field.type == TType.STRING) {
            this.welcomeMessage = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // PROFILE_IMAGE_OBS_HASH
          if (field.type == TType.STRING) {
            this.profileImageObsHash = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // DESC
          if (field.type == TType.STRING) {
            this.desc = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // SEARCHABLE
          if (field.type == TType.BOOL) {
            this.searchable = iprot.readBool();
            setSearchableIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // TYPE
          if (field.type == TType.I32) {
            this.type = SquareType.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // CATEGORY_ID
          if (field.type == TType.I32) {
            this.categoryID = iprot.readI32();
            setCategoryIDIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // INVITATION_URL
          if (field.type == TType.STRING) {
            this.invitationURL = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // REVISION
          if (field.type == TType.I64) {
            this.revision = iprot.readI64();
            setRevisionIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // ABLE_TO_USE_INVITATION_TICKET
          if (field.type == TType.BOOL) {
            this.ableToUseInvitationTicket = iprot.readBool();
            setAbleToUseInvitationTicketIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // STATE
          if (field.type == TType.I32) {
            this.state = SquareState.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.mid != null) {
      oprot.writeFieldBegin(MID_FIELD_DESC);
      oprot.writeString(this.mid);
      oprot.writeFieldEnd();
    }
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.welcomeMessage != null) {
      oprot.writeFieldBegin(WELCOME_MESSAGE_FIELD_DESC);
      oprot.writeString(this.welcomeMessage);
      oprot.writeFieldEnd();
    }
    if (this.profileImageObsHash != null) {
      oprot.writeFieldBegin(PROFILE_IMAGE_OBS_HASH_FIELD_DESC);
      oprot.writeString(this.profileImageObsHash);
      oprot.writeFieldEnd();
    }
    if (this.desc != null) {
      oprot.writeFieldBegin(DESC_FIELD_DESC);
      oprot.writeString(this.desc);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(SEARCHABLE_FIELD_DESC);
    oprot.writeBool(this.searchable);
    oprot.writeFieldEnd();
    if (this.type != null) {
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(this.type.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
    oprot.writeI32(this.categoryID);
    oprot.writeFieldEnd();
    if (this.invitationURL != null) {
      oprot.writeFieldBegin(INVITATION_URL_FIELD_DESC);
      oprot.writeString(this.invitationURL);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(REVISION_FIELD_DESC);
    oprot.writeI64(this.revision);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ABLE_TO_USE_INVITATION_TICKET_FIELD_DESC);
    oprot.writeBool(this.ableToUseInvitationTicket);
    oprot.writeFieldEnd();
    if (this.state != null) {
      oprot.writeFieldBegin(STATE_FIELD_DESC);
      oprot.writeI32(this.state.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("Square(");
    boolean first = true;

    sb.append("mid:");
    if (this.mid == null) {
      sb.append("null");
    } else {
      sb.append(this.mid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("welcomeMessage:");
    if (this.welcomeMessage == null) {
      sb.append("null");
    } else {
      sb.append(this.welcomeMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("profileImageObsHash:");
    if (this.profileImageObsHash == null) {
      sb.append("null");
    } else {
      sb.append(this.profileImageObsHash);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("desc:");
    if (this.desc == null) {
      sb.append("null");
    } else {
      sb.append(this.desc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("searchable:");
    sb.append(this.searchable);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("categoryID:");
    sb.append(this.categoryID);
    first = false;
    if (!first) sb.append(", ");
    sb.append("invitationURL:");
    if (this.invitationURL == null) {
      sb.append("null");
    } else {
      sb.append(this.invitationURL);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("revision:");
    sb.append(this.revision);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ableToUseInvitationTicket:");
    sb.append(this.ableToUseInvitationTicket);
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

