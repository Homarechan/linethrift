/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class ChannelDomain implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("ChannelDomain");

  private static final TField HOST_FIELD_DESC = new TField("host", TType.STRING, (short)1);
  private static final TField REMOVED_FIELD_DESC = new TField("removed", TType.BOOL, (short)2);

  private String host;
  private boolean removed;

  // isset id assignments
  private static final int __REMOVED_ISSET_ID = 0;
  private boolean[] __isset_vector = new boolean[1];

  public ChannelDomain() {
  }

  public ChannelDomain(
    String host,
    boolean removed)
  {
    this();
    this.host = host;
    this.removed = removed;
    setRemovedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChannelDomain(ChannelDomain other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    if (other.isSetHost()) {
      this.host = other.host;
    }
    this.removed = other.removed;
  }

  public ChannelDomain deepCopy() {
    return new ChannelDomain(this);
  }

  public void clear() {
    this.host = null;
    setRemovedIsSet(false);
    this.removed = false;
  }

  public String getHost() {
    return this.host;
  }

  public void setHost(String host) {
    this.host = host;
  }

  public void unsetHost() {
    this.host = null;
  }

  /** Returns true if field host is set (has been assigned a value) and false otherwise */
  public boolean isSetHost() {
    return this.host != null;
  }

  public void setHostIsSet(boolean value) {
    if (!value) {
      this.host = null;
    }
  }

  public boolean isRemoved() {
    return this.removed;
  }

  public void setRemoved(boolean removed) {
    this.removed = removed;
    setRemovedIsSet(true);
  }

  public void unsetRemoved() {
    __isset_vector[__REMOVED_ISSET_ID] = false;
  }

  /** Returns true if field removed is set (has been assigned a value) and false otherwise */
  public boolean isSetRemoved() {
    return __isset_vector[__REMOVED_ISSET_ID];
  }

  public void setRemovedIsSet(boolean value) {
    __isset_vector[__REMOVED_ISSET_ID] = value;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ChannelDomain)
      return this.equals((ChannelDomain)that);
    return false;
  }

  public boolean equals(ChannelDomain that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_host = true && this.isSetHost();
    boolean that_present_host = true && that.isSetHost();
    if (this_present_host || that_present_host) {
      if (!(this_present_host && that_present_host))
        return false;
      if (!this.host.equals(that.host))
        return false;
    }

    boolean this_present_removed = true;
    boolean that_present_removed = true;
    if (this_present_removed || that_present_removed) {
      if (!(this_present_removed && that_present_removed))
        return false;
      if (this.removed != that.removed)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    ChannelDomain other = (ChannelDomain)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetHost(), other.isSetHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHost()) {
      lastComparison = TBaseHelper.compareTo(this.host, other.host);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetRemoved(), other.isSetRemoved());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemoved()) {
      lastComparison = TBaseHelper.compareTo(this.removed, other.removed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // HOST
          if (field.type == TType.STRING) {
            this.host = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // REMOVED
          if (field.type == TType.BOOL) {
            this.removed = iprot.readBool();
            setRemovedIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.host != null) {
      oprot.writeFieldBegin(HOST_FIELD_DESC);
      oprot.writeString(this.host);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(REMOVED_FIELD_DESC);
    oprot.writeBool(this.removed);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("ChannelDomain(");
    boolean first = true;

    sb.append("host:");
    if (this.host == null) {
      sb.append("null");
    } else {
      sb.append(this.host);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("removed:");
    sb.append(this.removed);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

