/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class BuddyManagementService {

  public interface Iface {

    public void addBuddyMember(String requestId, String userMid) throws TalkException, TException;

    public void addBuddyMembers(String requestId, Vector userMids) throws TalkException, TException;

    public void blockBuddyMember(String requestId, String mid) throws TalkException, TException;

    public Vector commitSendMessagesToAll(Vector requestIdList) throws TalkException, TException;

    public Vector commitSendMessagesToMids(Vector requestIdList, Vector mids) throws TalkException, TException;

    public boolean containsBuddyMember(String requestId, String userMid) throws TalkException, TException;

    public byte[] downloadMessageContent(String requestId, String messageId) throws TalkException, TException;

    public byte[] downloadMessageContentPreview(String requestId, String messageId) throws TalkException, TException;

    public byte[] downloadProfileImage(String requestId) throws TalkException, TException;

    public byte[] downloadProfileImagePreview(String requestId) throws TalkException, TException;

    public long getActiveMemberCountByBuddyMid(String buddyMid) throws TalkException, TException;

    public Vector getActiveMemberMidsByBuddyMid(String buddyMid) throws TalkException, TException;

    public Vector getAllBuddyMembers() throws TalkException, TException;

    public Vector getBlockedBuddyMembers() throws TalkException, TException;

    public long getBlockerCountByBuddyMid(String buddyMid) throws TalkException, TException;

    public BuddyDetail getBuddyDetailByMid(String buddyMid) throws TalkException, TException;

    public BuddyProfile getBuddyProfile() throws TalkException, TException;

    public Ticket getContactTicket() throws TalkException, TException;

    public long getMemberCountByBuddyMid(String buddyMid) throws TalkException, TException;

    public SendBuddyMessageResult getSendBuddyMessageResult(String sendBuddyMessageRequestId) throws TalkException, TException;

    public SetBuddyOnAirResult getSetBuddyOnAirResult(String setBuddyOnAirRequestId) throws TalkException, TException;

    public UpdateBuddyProfileResult getUpdateBuddyProfileResult(String updateBuddyProfileRequestId) throws TalkException, TException;

    public boolean isBuddyOnAirByMid(String buddyMid) throws TalkException, TException;

    public String linkAndSendBuddyContentMessageToAllAsync(String requestId, Message msg, String sourceContentId) throws TalkException, TException;

    public SendBuddyMessageResult linkAndSendBuddyContentMessageToMids(String requestId, Message msg, String sourceContentId, Vector mids) throws TalkException, TException;

    public void notifyBuddyBlocked(String buddyMid, String blockerMid) throws TalkException, TException;

    public void notifyBuddyUnblocked(String buddyMid, String blockerMid) throws TalkException, TException;

    public String registerBuddy(String buddyId, String searchId, String displayName, String statusMeessage, byte[] picture, Hashtable settings) throws TalkException, TException;

    public String registerBuddyAdmin(String buddyId, String searchId, String displayName, String statusMessage, byte[] picture) throws TalkException, TException;

    public String reissueContactTicket(long expirationTime, int maxUseCount) throws TalkException, TException;

    public void removeBuddyMember(String requestId, String userMid) throws TalkException, TException;

    public void removeBuddyMembers(String requestId, Vector userMids) throws TalkException, TException;

    public SendBuddyMessageResult sendBuddyContentMessageToAll(String requestId, Message msg, byte[] content) throws TalkException, TException;

    public String sendBuddyContentMessageToAllAsync(String requestId, Message msg, byte[] content) throws TalkException, TException;

    public SendBuddyMessageResult sendBuddyContentMessageToMids(String requestId, Message msg, byte[] content, Vector mids) throws TalkException, TException;

    public String sendBuddyContentMessageToMidsAsync(String requestId, Message msg, byte[] content, Vector mids) throws TalkException, TException;

    public SendBuddyMessageResult sendBuddyMessageToAll(String requestId, Message msg) throws TalkException, TException;

    public String sendBuddyMessageToAllAsync(String requestId, Message msg) throws TalkException, TException;

    public SendBuddyMessageResult sendBuddyMessageToMids(String requestId, Message msg, Vector mids) throws TalkException, TException;

    public String sendBuddyMessageToMidsAsync(String requestId, Message msg, Vector mids) throws TalkException, TException;

    public void sendIndividualEventToAllAsync(String requestId, String buddyMid, NotificationStatus notificationStatus) throws TalkException, TException;

    public SetBuddyOnAirResult setBuddyOnAir(String requestId, boolean onAir) throws TalkException, TException;

    public String setBuddyOnAirAsync(String requestId, boolean onAir) throws TalkException, TException;

    public SendBuddyMessageResult storeMessage(String requestId, BuddyMessageRequest messageRequest) throws TalkException, TException;

    public void unblockBuddyMember(String requestId, String mid) throws TalkException, TException;

    public void unregisterBuddy(String requestId) throws TalkException, TException;

    public void unregisterBuddyAdmin(String requestId) throws TalkException, TException;

    public void updateBuddyAdminProfileAttribute(String requestId, Hashtable attributes) throws TalkException, TException;

    public void updateBuddyAdminProfileImage(String requestId, byte[] picture) throws TalkException, TException;

    public UpdateBuddyProfileResult updateBuddyProfileAttributes(String requestId, Hashtable attributes) throws TalkException, TException;

    public String updateBuddyProfileAttributesAsync(String requestId, Hashtable attributes) throws TalkException, TException;

    public UpdateBuddyProfileResult updateBuddyProfileImage(String requestId, byte[] image) throws TalkException, TException;

    public String updateBuddyProfileImageAsync(String requestId, byte[] image) throws TalkException, TException;

    public void updateBuddySearchId(String requestId, String searchId) throws TalkException, TException;

    public void updateBuddySettings(Hashtable settings) throws TalkException, TException;

    public String uploadBuddyContent(ContentType contentType, byte[] content) throws TalkException, TException;

  }

  public static class Client implements TServiceClient, Iface {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public void addBuddyMember(String requestId, String userMid) throws TalkException, TException
    {
      send_addBuddyMember(requestId, userMid);
      recv_addBuddyMember();
    }

    public void send_addBuddyMember(String requestId, String userMid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("addBuddyMember", TMessageType.CALL, ++seqid_));
      addBuddyMember_args args = new addBuddyMember_args();
      args.setRequestId(requestId);
      args.setUserMid(userMid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_addBuddyMember() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "addBuddyMember failed: out of sequence response");
      }
      addBuddyMember_result result = new addBuddyMember_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void addBuddyMembers(String requestId, Vector userMids) throws TalkException, TException
    {
      send_addBuddyMembers(requestId, userMids);
      recv_addBuddyMembers();
    }

    public void send_addBuddyMembers(String requestId, Vector userMids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("addBuddyMembers", TMessageType.CALL, ++seqid_));
      addBuddyMembers_args args = new addBuddyMembers_args();
      args.setRequestId(requestId);
      args.setUserMids(userMids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_addBuddyMembers() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "addBuddyMembers failed: out of sequence response");
      }
      addBuddyMembers_result result = new addBuddyMembers_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void blockBuddyMember(String requestId, String mid) throws TalkException, TException
    {
      send_blockBuddyMember(requestId, mid);
      recv_blockBuddyMember();
    }

    public void send_blockBuddyMember(String requestId, String mid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("blockBuddyMember", TMessageType.CALL, ++seqid_));
      blockBuddyMember_args args = new blockBuddyMember_args();
      args.setRequestId(requestId);
      args.setMid(mid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_blockBuddyMember() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "blockBuddyMember failed: out of sequence response");
      }
      blockBuddyMember_result result = new blockBuddyMember_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public Vector commitSendMessagesToAll(Vector requestIdList) throws TalkException, TException
    {
      send_commitSendMessagesToAll(requestIdList);
      return recv_commitSendMessagesToAll();
    }

    public void send_commitSendMessagesToAll(Vector requestIdList) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("commitSendMessagesToAll", TMessageType.CALL, ++seqid_));
      commitSendMessagesToAll_args args = new commitSendMessagesToAll_args();
      args.setRequestIdList(requestIdList);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_commitSendMessagesToAll() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "commitSendMessagesToAll failed: out of sequence response");
      }
      commitSendMessagesToAll_result result = new commitSendMessagesToAll_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "commitSendMessagesToAll failed: unknown result");
    }

    public Vector commitSendMessagesToMids(Vector requestIdList, Vector mids) throws TalkException, TException
    {
      send_commitSendMessagesToMids(requestIdList, mids);
      return recv_commitSendMessagesToMids();
    }

    public void send_commitSendMessagesToMids(Vector requestIdList, Vector mids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("commitSendMessagesToMids", TMessageType.CALL, ++seqid_));
      commitSendMessagesToMids_args args = new commitSendMessagesToMids_args();
      args.setRequestIdList(requestIdList);
      args.setMids(mids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_commitSendMessagesToMids() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "commitSendMessagesToMids failed: out of sequence response");
      }
      commitSendMessagesToMids_result result = new commitSendMessagesToMids_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "commitSendMessagesToMids failed: unknown result");
    }

    public boolean containsBuddyMember(String requestId, String userMid) throws TalkException, TException
    {
      send_containsBuddyMember(requestId, userMid);
      return recv_containsBuddyMember();
    }

    public void send_containsBuddyMember(String requestId, String userMid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("containsBuddyMember", TMessageType.CALL, ++seqid_));
      containsBuddyMember_args args = new containsBuddyMember_args();
      args.setRequestId(requestId);
      args.setUserMid(userMid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_containsBuddyMember() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "containsBuddyMember failed: out of sequence response");
      }
      containsBuddyMember_result result = new containsBuddyMember_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "containsBuddyMember failed: unknown result");
    }

    public byte[] downloadMessageContent(String requestId, String messageId) throws TalkException, TException
    {
      send_downloadMessageContent(requestId, messageId);
      return recv_downloadMessageContent();
    }

    public void send_downloadMessageContent(String requestId, String messageId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("downloadMessageContent", TMessageType.CALL, ++seqid_));
      downloadMessageContent_args args = new downloadMessageContent_args();
      args.setRequestId(requestId);
      args.setMessageId(messageId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public byte[] recv_downloadMessageContent() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "downloadMessageContent failed: out of sequence response");
      }
      downloadMessageContent_result result = new downloadMessageContent_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "downloadMessageContent failed: unknown result");
    }

    public byte[] downloadMessageContentPreview(String requestId, String messageId) throws TalkException, TException
    {
      send_downloadMessageContentPreview(requestId, messageId);
      return recv_downloadMessageContentPreview();
    }

    public void send_downloadMessageContentPreview(String requestId, String messageId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("downloadMessageContentPreview", TMessageType.CALL, ++seqid_));
      downloadMessageContentPreview_args args = new downloadMessageContentPreview_args();
      args.setRequestId(requestId);
      args.setMessageId(messageId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public byte[] recv_downloadMessageContentPreview() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "downloadMessageContentPreview failed: out of sequence response");
      }
      downloadMessageContentPreview_result result = new downloadMessageContentPreview_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "downloadMessageContentPreview failed: unknown result");
    }

    public byte[] downloadProfileImage(String requestId) throws TalkException, TException
    {
      send_downloadProfileImage(requestId);
      return recv_downloadProfileImage();
    }

    public void send_downloadProfileImage(String requestId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("downloadProfileImage", TMessageType.CALL, ++seqid_));
      downloadProfileImage_args args = new downloadProfileImage_args();
      args.setRequestId(requestId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public byte[] recv_downloadProfileImage() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "downloadProfileImage failed: out of sequence response");
      }
      downloadProfileImage_result result = new downloadProfileImage_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "downloadProfileImage failed: unknown result");
    }

    public byte[] downloadProfileImagePreview(String requestId) throws TalkException, TException
    {
      send_downloadProfileImagePreview(requestId);
      return recv_downloadProfileImagePreview();
    }

    public void send_downloadProfileImagePreview(String requestId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("downloadProfileImagePreview", TMessageType.CALL, ++seqid_));
      downloadProfileImagePreview_args args = new downloadProfileImagePreview_args();
      args.setRequestId(requestId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public byte[] recv_downloadProfileImagePreview() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "downloadProfileImagePreview failed: out of sequence response");
      }
      downloadProfileImagePreview_result result = new downloadProfileImagePreview_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "downloadProfileImagePreview failed: unknown result");
    }

    public long getActiveMemberCountByBuddyMid(String buddyMid) throws TalkException, TException
    {
      send_getActiveMemberCountByBuddyMid(buddyMid);
      return recv_getActiveMemberCountByBuddyMid();
    }

    public void send_getActiveMemberCountByBuddyMid(String buddyMid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getActiveMemberCountByBuddyMid", TMessageType.CALL, ++seqid_));
      getActiveMemberCountByBuddyMid_args args = new getActiveMemberCountByBuddyMid_args();
      args.setBuddyMid(buddyMid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public long recv_getActiveMemberCountByBuddyMid() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getActiveMemberCountByBuddyMid failed: out of sequence response");
      }
      getActiveMemberCountByBuddyMid_result result = new getActiveMemberCountByBuddyMid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getActiveMemberCountByBuddyMid failed: unknown result");
    }

    public Vector getActiveMemberMidsByBuddyMid(String buddyMid) throws TalkException, TException
    {
      send_getActiveMemberMidsByBuddyMid(buddyMid);
      return recv_getActiveMemberMidsByBuddyMid();
    }

    public void send_getActiveMemberMidsByBuddyMid(String buddyMid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getActiveMemberMidsByBuddyMid", TMessageType.CALL, ++seqid_));
      getActiveMemberMidsByBuddyMid_args args = new getActiveMemberMidsByBuddyMid_args();
      args.setBuddyMid(buddyMid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getActiveMemberMidsByBuddyMid() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getActiveMemberMidsByBuddyMid failed: out of sequence response");
      }
      getActiveMemberMidsByBuddyMid_result result = new getActiveMemberMidsByBuddyMid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getActiveMemberMidsByBuddyMid failed: unknown result");
    }

    public Vector getAllBuddyMembers() throws TalkException, TException
    {
      send_getAllBuddyMembers();
      return recv_getAllBuddyMembers();
    }

    public void send_getAllBuddyMembers() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getAllBuddyMembers", TMessageType.CALL, ++seqid_));
      getAllBuddyMembers_args args = new getAllBuddyMembers_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getAllBuddyMembers() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getAllBuddyMembers failed: out of sequence response");
      }
      getAllBuddyMembers_result result = new getAllBuddyMembers_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getAllBuddyMembers failed: unknown result");
    }

    public Vector getBlockedBuddyMembers() throws TalkException, TException
    {
      send_getBlockedBuddyMembers();
      return recv_getBlockedBuddyMembers();
    }

    public void send_getBlockedBuddyMembers() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getBlockedBuddyMembers", TMessageType.CALL, ++seqid_));
      getBlockedBuddyMembers_args args = new getBlockedBuddyMembers_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Vector recv_getBlockedBuddyMembers() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getBlockedBuddyMembers failed: out of sequence response");
      }
      getBlockedBuddyMembers_result result = new getBlockedBuddyMembers_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getBlockedBuddyMembers failed: unknown result");
    }

    public long getBlockerCountByBuddyMid(String buddyMid) throws TalkException, TException
    {
      send_getBlockerCountByBuddyMid(buddyMid);
      return recv_getBlockerCountByBuddyMid();
    }

    public void send_getBlockerCountByBuddyMid(String buddyMid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getBlockerCountByBuddyMid", TMessageType.CALL, ++seqid_));
      getBlockerCountByBuddyMid_args args = new getBlockerCountByBuddyMid_args();
      args.setBuddyMid(buddyMid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public long recv_getBlockerCountByBuddyMid() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getBlockerCountByBuddyMid failed: out of sequence response");
      }
      getBlockerCountByBuddyMid_result result = new getBlockerCountByBuddyMid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getBlockerCountByBuddyMid failed: unknown result");
    }

    public BuddyDetail getBuddyDetailByMid(String buddyMid) throws TalkException, TException
    {
      send_getBuddyDetailByMid(buddyMid);
      return recv_getBuddyDetailByMid();
    }

    public void send_getBuddyDetailByMid(String buddyMid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getBuddyDetailByMid", TMessageType.CALL, ++seqid_));
      getBuddyDetailByMid_args args = new getBuddyDetailByMid_args();
      args.setBuddyMid(buddyMid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public BuddyDetail recv_getBuddyDetailByMid() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getBuddyDetailByMid failed: out of sequence response");
      }
      getBuddyDetailByMid_result result = new getBuddyDetailByMid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getBuddyDetailByMid failed: unknown result");
    }

    public BuddyProfile getBuddyProfile() throws TalkException, TException
    {
      send_getBuddyProfile();
      return recv_getBuddyProfile();
    }

    public void send_getBuddyProfile() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getBuddyProfile", TMessageType.CALL, ++seqid_));
      getBuddyProfile_args args = new getBuddyProfile_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public BuddyProfile recv_getBuddyProfile() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getBuddyProfile failed: out of sequence response");
      }
      getBuddyProfile_result result = new getBuddyProfile_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getBuddyProfile failed: unknown result");
    }

    public Ticket getContactTicket() throws TalkException, TException
    {
      send_getContactTicket();
      return recv_getContactTicket();
    }

    public void send_getContactTicket() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getContactTicket", TMessageType.CALL, ++seqid_));
      getContactTicket_args args = new getContactTicket_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public Ticket recv_getContactTicket() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getContactTicket failed: out of sequence response");
      }
      getContactTicket_result result = new getContactTicket_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getContactTicket failed: unknown result");
    }

    public long getMemberCountByBuddyMid(String buddyMid) throws TalkException, TException
    {
      send_getMemberCountByBuddyMid(buddyMid);
      return recv_getMemberCountByBuddyMid();
    }

    public void send_getMemberCountByBuddyMid(String buddyMid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getMemberCountByBuddyMid", TMessageType.CALL, ++seqid_));
      getMemberCountByBuddyMid_args args = new getMemberCountByBuddyMid_args();
      args.setBuddyMid(buddyMid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public long recv_getMemberCountByBuddyMid() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getMemberCountByBuddyMid failed: out of sequence response");
      }
      getMemberCountByBuddyMid_result result = new getMemberCountByBuddyMid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getMemberCountByBuddyMid failed: unknown result");
    }

    public SendBuddyMessageResult getSendBuddyMessageResult(String sendBuddyMessageRequestId) throws TalkException, TException
    {
      send_getSendBuddyMessageResult(sendBuddyMessageRequestId);
      return recv_getSendBuddyMessageResult();
    }

    public void send_getSendBuddyMessageResult(String sendBuddyMessageRequestId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getSendBuddyMessageResult", TMessageType.CALL, ++seqid_));
      getSendBuddyMessageResult_args args = new getSendBuddyMessageResult_args();
      args.setSendBuddyMessageRequestId(sendBuddyMessageRequestId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public SendBuddyMessageResult recv_getSendBuddyMessageResult() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getSendBuddyMessageResult failed: out of sequence response");
      }
      getSendBuddyMessageResult_result result = new getSendBuddyMessageResult_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getSendBuddyMessageResult failed: unknown result");
    }

    public SetBuddyOnAirResult getSetBuddyOnAirResult(String setBuddyOnAirRequestId) throws TalkException, TException
    {
      send_getSetBuddyOnAirResult(setBuddyOnAirRequestId);
      return recv_getSetBuddyOnAirResult();
    }

    public void send_getSetBuddyOnAirResult(String setBuddyOnAirRequestId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getSetBuddyOnAirResult", TMessageType.CALL, ++seqid_));
      getSetBuddyOnAirResult_args args = new getSetBuddyOnAirResult_args();
      args.setSetBuddyOnAirRequestId(setBuddyOnAirRequestId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public SetBuddyOnAirResult recv_getSetBuddyOnAirResult() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getSetBuddyOnAirResult failed: out of sequence response");
      }
      getSetBuddyOnAirResult_result result = new getSetBuddyOnAirResult_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getSetBuddyOnAirResult failed: unknown result");
    }

    public UpdateBuddyProfileResult getUpdateBuddyProfileResult(String updateBuddyProfileRequestId) throws TalkException, TException
    {
      send_getUpdateBuddyProfileResult(updateBuddyProfileRequestId);
      return recv_getUpdateBuddyProfileResult();
    }

    public void send_getUpdateBuddyProfileResult(String updateBuddyProfileRequestId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getUpdateBuddyProfileResult", TMessageType.CALL, ++seqid_));
      getUpdateBuddyProfileResult_args args = new getUpdateBuddyProfileResult_args();
      args.setUpdateBuddyProfileRequestId(updateBuddyProfileRequestId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public UpdateBuddyProfileResult recv_getUpdateBuddyProfileResult() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getUpdateBuddyProfileResult failed: out of sequence response");
      }
      getUpdateBuddyProfileResult_result result = new getUpdateBuddyProfileResult_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getUpdateBuddyProfileResult failed: unknown result");
    }

    public boolean isBuddyOnAirByMid(String buddyMid) throws TalkException, TException
    {
      send_isBuddyOnAirByMid(buddyMid);
      return recv_isBuddyOnAirByMid();
    }

    public void send_isBuddyOnAirByMid(String buddyMid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("isBuddyOnAirByMid", TMessageType.CALL, ++seqid_));
      isBuddyOnAirByMid_args args = new isBuddyOnAirByMid_args();
      args.setBuddyMid(buddyMid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public boolean recv_isBuddyOnAirByMid() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "isBuddyOnAirByMid failed: out of sequence response");
      }
      isBuddyOnAirByMid_result result = new isBuddyOnAirByMid_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "isBuddyOnAirByMid failed: unknown result");
    }

    public String linkAndSendBuddyContentMessageToAllAsync(String requestId, Message msg, String sourceContentId) throws TalkException, TException
    {
      send_linkAndSendBuddyContentMessageToAllAsync(requestId, msg, sourceContentId);
      return recv_linkAndSendBuddyContentMessageToAllAsync();
    }

    public void send_linkAndSendBuddyContentMessageToAllAsync(String requestId, Message msg, String sourceContentId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("linkAndSendBuddyContentMessageToAllAsync", TMessageType.CALL, ++seqid_));
      linkAndSendBuddyContentMessageToAllAsync_args args = new linkAndSendBuddyContentMessageToAllAsync_args();
      args.setRequestId(requestId);
      args.setMsg(msg);
      args.setSourceContentId(sourceContentId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_linkAndSendBuddyContentMessageToAllAsync() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "linkAndSendBuddyContentMessageToAllAsync failed: out of sequence response");
      }
      linkAndSendBuddyContentMessageToAllAsync_result result = new linkAndSendBuddyContentMessageToAllAsync_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "linkAndSendBuddyContentMessageToAllAsync failed: unknown result");
    }

    public SendBuddyMessageResult linkAndSendBuddyContentMessageToMids(String requestId, Message msg, String sourceContentId, Vector mids) throws TalkException, TException
    {
      send_linkAndSendBuddyContentMessageToMids(requestId, msg, sourceContentId, mids);
      return recv_linkAndSendBuddyContentMessageToMids();
    }

    public void send_linkAndSendBuddyContentMessageToMids(String requestId, Message msg, String sourceContentId, Vector mids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("linkAndSendBuddyContentMessageToMids", TMessageType.CALL, ++seqid_));
      linkAndSendBuddyContentMessageToMids_args args = new linkAndSendBuddyContentMessageToMids_args();
      args.setRequestId(requestId);
      args.setMsg(msg);
      args.setSourceContentId(sourceContentId);
      args.setMids(mids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public SendBuddyMessageResult recv_linkAndSendBuddyContentMessageToMids() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "linkAndSendBuddyContentMessageToMids failed: out of sequence response");
      }
      linkAndSendBuddyContentMessageToMids_result result = new linkAndSendBuddyContentMessageToMids_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "linkAndSendBuddyContentMessageToMids failed: unknown result");
    }

    public void notifyBuddyBlocked(String buddyMid, String blockerMid) throws TalkException, TException
    {
      send_notifyBuddyBlocked(buddyMid, blockerMid);
      recv_notifyBuddyBlocked();
    }

    public void send_notifyBuddyBlocked(String buddyMid, String blockerMid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("notifyBuddyBlocked", TMessageType.CALL, ++seqid_));
      notifyBuddyBlocked_args args = new notifyBuddyBlocked_args();
      args.setBuddyMid(buddyMid);
      args.setBlockerMid(blockerMid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_notifyBuddyBlocked() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "notifyBuddyBlocked failed: out of sequence response");
      }
      notifyBuddyBlocked_result result = new notifyBuddyBlocked_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void notifyBuddyUnblocked(String buddyMid, String blockerMid) throws TalkException, TException
    {
      send_notifyBuddyUnblocked(buddyMid, blockerMid);
      recv_notifyBuddyUnblocked();
    }

    public void send_notifyBuddyUnblocked(String buddyMid, String blockerMid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("notifyBuddyUnblocked", TMessageType.CALL, ++seqid_));
      notifyBuddyUnblocked_args args = new notifyBuddyUnblocked_args();
      args.setBuddyMid(buddyMid);
      args.setBlockerMid(blockerMid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_notifyBuddyUnblocked() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "notifyBuddyUnblocked failed: out of sequence response");
      }
      notifyBuddyUnblocked_result result = new notifyBuddyUnblocked_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public String registerBuddy(String buddyId, String searchId, String displayName, String statusMeessage, byte[] picture, Hashtable settings) throws TalkException, TException
    {
      send_registerBuddy(buddyId, searchId, displayName, statusMeessage, picture, settings);
      return recv_registerBuddy();
    }

    public void send_registerBuddy(String buddyId, String searchId, String displayName, String statusMeessage, byte[] picture, Hashtable settings) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("registerBuddy", TMessageType.CALL, ++seqid_));
      registerBuddy_args args = new registerBuddy_args();
      args.setBuddyId(buddyId);
      args.setSearchId(searchId);
      args.setDisplayName(displayName);
      args.setStatusMeessage(statusMeessage);
      args.setPicture(picture);
      args.setSettings(settings);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_registerBuddy() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "registerBuddy failed: out of sequence response");
      }
      registerBuddy_result result = new registerBuddy_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "registerBuddy failed: unknown result");
    }

    public String registerBuddyAdmin(String buddyId, String searchId, String displayName, String statusMessage, byte[] picture) throws TalkException, TException
    {
      send_registerBuddyAdmin(buddyId, searchId, displayName, statusMessage, picture);
      return recv_registerBuddyAdmin();
    }

    public void send_registerBuddyAdmin(String buddyId, String searchId, String displayName, String statusMessage, byte[] picture) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("registerBuddyAdmin", TMessageType.CALL, ++seqid_));
      registerBuddyAdmin_args args = new registerBuddyAdmin_args();
      args.setBuddyId(buddyId);
      args.setSearchId(searchId);
      args.setDisplayName(displayName);
      args.setStatusMessage(statusMessage);
      args.setPicture(picture);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_registerBuddyAdmin() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "registerBuddyAdmin failed: out of sequence response");
      }
      registerBuddyAdmin_result result = new registerBuddyAdmin_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "registerBuddyAdmin failed: unknown result");
    }

    public String reissueContactTicket(long expirationTime, int maxUseCount) throws TalkException, TException
    {
      send_reissueContactTicket(expirationTime, maxUseCount);
      return recv_reissueContactTicket();
    }

    public void send_reissueContactTicket(long expirationTime, int maxUseCount) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("reissueContactTicket", TMessageType.CALL, ++seqid_));
      reissueContactTicket_args args = new reissueContactTicket_args();
      args.setExpirationTime(expirationTime);
      args.setMaxUseCount(maxUseCount);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_reissueContactTicket() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "reissueContactTicket failed: out of sequence response");
      }
      reissueContactTicket_result result = new reissueContactTicket_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "reissueContactTicket failed: unknown result");
    }

    public void removeBuddyMember(String requestId, String userMid) throws TalkException, TException
    {
      send_removeBuddyMember(requestId, userMid);
      recv_removeBuddyMember();
    }

    public void send_removeBuddyMember(String requestId, String userMid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("removeBuddyMember", TMessageType.CALL, ++seqid_));
      removeBuddyMember_args args = new removeBuddyMember_args();
      args.setRequestId(requestId);
      args.setUserMid(userMid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_removeBuddyMember() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "removeBuddyMember failed: out of sequence response");
      }
      removeBuddyMember_result result = new removeBuddyMember_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void removeBuddyMembers(String requestId, Vector userMids) throws TalkException, TException
    {
      send_removeBuddyMembers(requestId, userMids);
      recv_removeBuddyMembers();
    }

    public void send_removeBuddyMembers(String requestId, Vector userMids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("removeBuddyMembers", TMessageType.CALL, ++seqid_));
      removeBuddyMembers_args args = new removeBuddyMembers_args();
      args.setRequestId(requestId);
      args.setUserMids(userMids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_removeBuddyMembers() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "removeBuddyMembers failed: out of sequence response");
      }
      removeBuddyMembers_result result = new removeBuddyMembers_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public SendBuddyMessageResult sendBuddyContentMessageToAll(String requestId, Message msg, byte[] content) throws TalkException, TException
    {
      send_sendBuddyContentMessageToAll(requestId, msg, content);
      return recv_sendBuddyContentMessageToAll();
    }

    public void send_sendBuddyContentMessageToAll(String requestId, Message msg, byte[] content) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("sendBuddyContentMessageToAll", TMessageType.CALL, ++seqid_));
      sendBuddyContentMessageToAll_args args = new sendBuddyContentMessageToAll_args();
      args.setRequestId(requestId);
      args.setMsg(msg);
      args.setContent(content);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public SendBuddyMessageResult recv_sendBuddyContentMessageToAll() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "sendBuddyContentMessageToAll failed: out of sequence response");
      }
      sendBuddyContentMessageToAll_result result = new sendBuddyContentMessageToAll_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "sendBuddyContentMessageToAll failed: unknown result");
    }

    public String sendBuddyContentMessageToAllAsync(String requestId, Message msg, byte[] content) throws TalkException, TException
    {
      send_sendBuddyContentMessageToAllAsync(requestId, msg, content);
      return recv_sendBuddyContentMessageToAllAsync();
    }

    public void send_sendBuddyContentMessageToAllAsync(String requestId, Message msg, byte[] content) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("sendBuddyContentMessageToAllAsync", TMessageType.CALL, ++seqid_));
      sendBuddyContentMessageToAllAsync_args args = new sendBuddyContentMessageToAllAsync_args();
      args.setRequestId(requestId);
      args.setMsg(msg);
      args.setContent(content);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_sendBuddyContentMessageToAllAsync() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "sendBuddyContentMessageToAllAsync failed: out of sequence response");
      }
      sendBuddyContentMessageToAllAsync_result result = new sendBuddyContentMessageToAllAsync_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "sendBuddyContentMessageToAllAsync failed: unknown result");
    }

    public SendBuddyMessageResult sendBuddyContentMessageToMids(String requestId, Message msg, byte[] content, Vector mids) throws TalkException, TException
    {
      send_sendBuddyContentMessageToMids(requestId, msg, content, mids);
      return recv_sendBuddyContentMessageToMids();
    }

    public void send_sendBuddyContentMessageToMids(String requestId, Message msg, byte[] content, Vector mids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("sendBuddyContentMessageToMids", TMessageType.CALL, ++seqid_));
      sendBuddyContentMessageToMids_args args = new sendBuddyContentMessageToMids_args();
      args.setRequestId(requestId);
      args.setMsg(msg);
      args.setContent(content);
      args.setMids(mids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public SendBuddyMessageResult recv_sendBuddyContentMessageToMids() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "sendBuddyContentMessageToMids failed: out of sequence response");
      }
      sendBuddyContentMessageToMids_result result = new sendBuddyContentMessageToMids_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "sendBuddyContentMessageToMids failed: unknown result");
    }

    public String sendBuddyContentMessageToMidsAsync(String requestId, Message msg, byte[] content, Vector mids) throws TalkException, TException
    {
      send_sendBuddyContentMessageToMidsAsync(requestId, msg, content, mids);
      return recv_sendBuddyContentMessageToMidsAsync();
    }

    public void send_sendBuddyContentMessageToMidsAsync(String requestId, Message msg, byte[] content, Vector mids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("sendBuddyContentMessageToMidsAsync", TMessageType.CALL, ++seqid_));
      sendBuddyContentMessageToMidsAsync_args args = new sendBuddyContentMessageToMidsAsync_args();
      args.setRequestId(requestId);
      args.setMsg(msg);
      args.setContent(content);
      args.setMids(mids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_sendBuddyContentMessageToMidsAsync() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "sendBuddyContentMessageToMidsAsync failed: out of sequence response");
      }
      sendBuddyContentMessageToMidsAsync_result result = new sendBuddyContentMessageToMidsAsync_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "sendBuddyContentMessageToMidsAsync failed: unknown result");
    }

    public SendBuddyMessageResult sendBuddyMessageToAll(String requestId, Message msg) throws TalkException, TException
    {
      send_sendBuddyMessageToAll(requestId, msg);
      return recv_sendBuddyMessageToAll();
    }

    public void send_sendBuddyMessageToAll(String requestId, Message msg) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("sendBuddyMessageToAll", TMessageType.CALL, ++seqid_));
      sendBuddyMessageToAll_args args = new sendBuddyMessageToAll_args();
      args.setRequestId(requestId);
      args.setMsg(msg);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public SendBuddyMessageResult recv_sendBuddyMessageToAll() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "sendBuddyMessageToAll failed: out of sequence response");
      }
      sendBuddyMessageToAll_result result = new sendBuddyMessageToAll_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "sendBuddyMessageToAll failed: unknown result");
    }

    public String sendBuddyMessageToAllAsync(String requestId, Message msg) throws TalkException, TException
    {
      send_sendBuddyMessageToAllAsync(requestId, msg);
      return recv_sendBuddyMessageToAllAsync();
    }

    public void send_sendBuddyMessageToAllAsync(String requestId, Message msg) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("sendBuddyMessageToAllAsync", TMessageType.CALL, ++seqid_));
      sendBuddyMessageToAllAsync_args args = new sendBuddyMessageToAllAsync_args();
      args.setRequestId(requestId);
      args.setMsg(msg);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_sendBuddyMessageToAllAsync() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "sendBuddyMessageToAllAsync failed: out of sequence response");
      }
      sendBuddyMessageToAllAsync_result result = new sendBuddyMessageToAllAsync_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "sendBuddyMessageToAllAsync failed: unknown result");
    }

    public SendBuddyMessageResult sendBuddyMessageToMids(String requestId, Message msg, Vector mids) throws TalkException, TException
    {
      send_sendBuddyMessageToMids(requestId, msg, mids);
      return recv_sendBuddyMessageToMids();
    }

    public void send_sendBuddyMessageToMids(String requestId, Message msg, Vector mids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("sendBuddyMessageToMids", TMessageType.CALL, ++seqid_));
      sendBuddyMessageToMids_args args = new sendBuddyMessageToMids_args();
      args.setRequestId(requestId);
      args.setMsg(msg);
      args.setMids(mids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public SendBuddyMessageResult recv_sendBuddyMessageToMids() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "sendBuddyMessageToMids failed: out of sequence response");
      }
      sendBuddyMessageToMids_result result = new sendBuddyMessageToMids_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "sendBuddyMessageToMids failed: unknown result");
    }

    public String sendBuddyMessageToMidsAsync(String requestId, Message msg, Vector mids) throws TalkException, TException
    {
      send_sendBuddyMessageToMidsAsync(requestId, msg, mids);
      return recv_sendBuddyMessageToMidsAsync();
    }

    public void send_sendBuddyMessageToMidsAsync(String requestId, Message msg, Vector mids) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("sendBuddyMessageToMidsAsync", TMessageType.CALL, ++seqid_));
      sendBuddyMessageToMidsAsync_args args = new sendBuddyMessageToMidsAsync_args();
      args.setRequestId(requestId);
      args.setMsg(msg);
      args.setMids(mids);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_sendBuddyMessageToMidsAsync() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "sendBuddyMessageToMidsAsync failed: out of sequence response");
      }
      sendBuddyMessageToMidsAsync_result result = new sendBuddyMessageToMidsAsync_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "sendBuddyMessageToMidsAsync failed: unknown result");
    }

    public void sendIndividualEventToAllAsync(String requestId, String buddyMid, NotificationStatus notificationStatus) throws TalkException, TException
    {
      send_sendIndividualEventToAllAsync(requestId, buddyMid, notificationStatus);
      recv_sendIndividualEventToAllAsync();
    }

    public void send_sendIndividualEventToAllAsync(String requestId, String buddyMid, NotificationStatus notificationStatus) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("sendIndividualEventToAllAsync", TMessageType.CALL, ++seqid_));
      sendIndividualEventToAllAsync_args args = new sendIndividualEventToAllAsync_args();
      args.setRequestId(requestId);
      args.setBuddyMid(buddyMid);
      args.setNotificationStatus(notificationStatus);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_sendIndividualEventToAllAsync() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "sendIndividualEventToAllAsync failed: out of sequence response");
      }
      sendIndividualEventToAllAsync_result result = new sendIndividualEventToAllAsync_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public SetBuddyOnAirResult setBuddyOnAir(String requestId, boolean onAir) throws TalkException, TException
    {
      send_setBuddyOnAir(requestId, onAir);
      return recv_setBuddyOnAir();
    }

    public void send_setBuddyOnAir(String requestId, boolean onAir) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("setBuddyOnAir", TMessageType.CALL, ++seqid_));
      setBuddyOnAir_args args = new setBuddyOnAir_args();
      args.setRequestId(requestId);
      args.setOnAir(onAir);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public SetBuddyOnAirResult recv_setBuddyOnAir() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "setBuddyOnAir failed: out of sequence response");
      }
      setBuddyOnAir_result result = new setBuddyOnAir_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "setBuddyOnAir failed: unknown result");
    }

    public String setBuddyOnAirAsync(String requestId, boolean onAir) throws TalkException, TException
    {
      send_setBuddyOnAirAsync(requestId, onAir);
      return recv_setBuddyOnAirAsync();
    }

    public void send_setBuddyOnAirAsync(String requestId, boolean onAir) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("setBuddyOnAirAsync", TMessageType.CALL, ++seqid_));
      setBuddyOnAirAsync_args args = new setBuddyOnAirAsync_args();
      args.setRequestId(requestId);
      args.setOnAir(onAir);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_setBuddyOnAirAsync() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "setBuddyOnAirAsync failed: out of sequence response");
      }
      setBuddyOnAirAsync_result result = new setBuddyOnAirAsync_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "setBuddyOnAirAsync failed: unknown result");
    }

    public SendBuddyMessageResult storeMessage(String requestId, BuddyMessageRequest messageRequest) throws TalkException, TException
    {
      send_storeMessage(requestId, messageRequest);
      return recv_storeMessage();
    }

    public void send_storeMessage(String requestId, BuddyMessageRequest messageRequest) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("storeMessage", TMessageType.CALL, ++seqid_));
      storeMessage_args args = new storeMessage_args();
      args.setRequestId(requestId);
      args.setMessageRequest(messageRequest);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public SendBuddyMessageResult recv_storeMessage() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "storeMessage failed: out of sequence response");
      }
      storeMessage_result result = new storeMessage_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "storeMessage failed: unknown result");
    }

    public void unblockBuddyMember(String requestId, String mid) throws TalkException, TException
    {
      send_unblockBuddyMember(requestId, mid);
      recv_unblockBuddyMember();
    }

    public void send_unblockBuddyMember(String requestId, String mid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("unblockBuddyMember", TMessageType.CALL, ++seqid_));
      unblockBuddyMember_args args = new unblockBuddyMember_args();
      args.setRequestId(requestId);
      args.setMid(mid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_unblockBuddyMember() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "unblockBuddyMember failed: out of sequence response");
      }
      unblockBuddyMember_result result = new unblockBuddyMember_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void unregisterBuddy(String requestId) throws TalkException, TException
    {
      send_unregisterBuddy(requestId);
      recv_unregisterBuddy();
    }

    public void send_unregisterBuddy(String requestId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("unregisterBuddy", TMessageType.CALL, ++seqid_));
      unregisterBuddy_args args = new unregisterBuddy_args();
      args.setRequestId(requestId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_unregisterBuddy() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "unregisterBuddy failed: out of sequence response");
      }
      unregisterBuddy_result result = new unregisterBuddy_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void unregisterBuddyAdmin(String requestId) throws TalkException, TException
    {
      send_unregisterBuddyAdmin(requestId);
      recv_unregisterBuddyAdmin();
    }

    public void send_unregisterBuddyAdmin(String requestId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("unregisterBuddyAdmin", TMessageType.CALL, ++seqid_));
      unregisterBuddyAdmin_args args = new unregisterBuddyAdmin_args();
      args.setRequestId(requestId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_unregisterBuddyAdmin() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "unregisterBuddyAdmin failed: out of sequence response");
      }
      unregisterBuddyAdmin_result result = new unregisterBuddyAdmin_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void updateBuddyAdminProfileAttribute(String requestId, Hashtable attributes) throws TalkException, TException
    {
      send_updateBuddyAdminProfileAttribute(requestId, attributes);
      recv_updateBuddyAdminProfileAttribute();
    }

    public void send_updateBuddyAdminProfileAttribute(String requestId, Hashtable attributes) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateBuddyAdminProfileAttribute", TMessageType.CALL, ++seqid_));
      updateBuddyAdminProfileAttribute_args args = new updateBuddyAdminProfileAttribute_args();
      args.setRequestId(requestId);
      args.setAttributes(attributes);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_updateBuddyAdminProfileAttribute() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateBuddyAdminProfileAttribute failed: out of sequence response");
      }
      updateBuddyAdminProfileAttribute_result result = new updateBuddyAdminProfileAttribute_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void updateBuddyAdminProfileImage(String requestId, byte[] picture) throws TalkException, TException
    {
      send_updateBuddyAdminProfileImage(requestId, picture);
      recv_updateBuddyAdminProfileImage();
    }

    public void send_updateBuddyAdminProfileImage(String requestId, byte[] picture) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateBuddyAdminProfileImage", TMessageType.CALL, ++seqid_));
      updateBuddyAdminProfileImage_args args = new updateBuddyAdminProfileImage_args();
      args.setRequestId(requestId);
      args.setPicture(picture);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_updateBuddyAdminProfileImage() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateBuddyAdminProfileImage failed: out of sequence response");
      }
      updateBuddyAdminProfileImage_result result = new updateBuddyAdminProfileImage_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public UpdateBuddyProfileResult updateBuddyProfileAttributes(String requestId, Hashtable attributes) throws TalkException, TException
    {
      send_updateBuddyProfileAttributes(requestId, attributes);
      return recv_updateBuddyProfileAttributes();
    }

    public void send_updateBuddyProfileAttributes(String requestId, Hashtable attributes) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateBuddyProfileAttributes", TMessageType.CALL, ++seqid_));
      updateBuddyProfileAttributes_args args = new updateBuddyProfileAttributes_args();
      args.setRequestId(requestId);
      args.setAttributes(attributes);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public UpdateBuddyProfileResult recv_updateBuddyProfileAttributes() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateBuddyProfileAttributes failed: out of sequence response");
      }
      updateBuddyProfileAttributes_result result = new updateBuddyProfileAttributes_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "updateBuddyProfileAttributes failed: unknown result");
    }

    public String updateBuddyProfileAttributesAsync(String requestId, Hashtable attributes) throws TalkException, TException
    {
      send_updateBuddyProfileAttributesAsync(requestId, attributes);
      return recv_updateBuddyProfileAttributesAsync();
    }

    public void send_updateBuddyProfileAttributesAsync(String requestId, Hashtable attributes) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateBuddyProfileAttributesAsync", TMessageType.CALL, ++seqid_));
      updateBuddyProfileAttributesAsync_args args = new updateBuddyProfileAttributesAsync_args();
      args.setRequestId(requestId);
      args.setAttributes(attributes);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_updateBuddyProfileAttributesAsync() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateBuddyProfileAttributesAsync failed: out of sequence response");
      }
      updateBuddyProfileAttributesAsync_result result = new updateBuddyProfileAttributesAsync_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "updateBuddyProfileAttributesAsync failed: unknown result");
    }

    public UpdateBuddyProfileResult updateBuddyProfileImage(String requestId, byte[] image) throws TalkException, TException
    {
      send_updateBuddyProfileImage(requestId, image);
      return recv_updateBuddyProfileImage();
    }

    public void send_updateBuddyProfileImage(String requestId, byte[] image) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateBuddyProfileImage", TMessageType.CALL, ++seqid_));
      updateBuddyProfileImage_args args = new updateBuddyProfileImage_args();
      args.setRequestId(requestId);
      args.setImage(image);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public UpdateBuddyProfileResult recv_updateBuddyProfileImage() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateBuddyProfileImage failed: out of sequence response");
      }
      updateBuddyProfileImage_result result = new updateBuddyProfileImage_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "updateBuddyProfileImage failed: unknown result");
    }

    public String updateBuddyProfileImageAsync(String requestId, byte[] image) throws TalkException, TException
    {
      send_updateBuddyProfileImageAsync(requestId, image);
      return recv_updateBuddyProfileImageAsync();
    }

    public void send_updateBuddyProfileImageAsync(String requestId, byte[] image) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateBuddyProfileImageAsync", TMessageType.CALL, ++seqid_));
      updateBuddyProfileImageAsync_args args = new updateBuddyProfileImageAsync_args();
      args.setRequestId(requestId);
      args.setImage(image);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_updateBuddyProfileImageAsync() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateBuddyProfileImageAsync failed: out of sequence response");
      }
      updateBuddyProfileImageAsync_result result = new updateBuddyProfileImageAsync_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "updateBuddyProfileImageAsync failed: unknown result");
    }

    public void updateBuddySearchId(String requestId, String searchId) throws TalkException, TException
    {
      send_updateBuddySearchId(requestId, searchId);
      recv_updateBuddySearchId();
    }

    public void send_updateBuddySearchId(String requestId, String searchId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateBuddySearchId", TMessageType.CALL, ++seqid_));
      updateBuddySearchId_args args = new updateBuddySearchId_args();
      args.setRequestId(requestId);
      args.setSearchId(searchId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_updateBuddySearchId() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateBuddySearchId failed: out of sequence response");
      }
      updateBuddySearchId_result result = new updateBuddySearchId_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void updateBuddySettings(Hashtable settings) throws TalkException, TException
    {
      send_updateBuddySettings(settings);
      recv_updateBuddySettings();
    }

    public void send_updateBuddySettings(Hashtable settings) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("updateBuddySettings", TMessageType.CALL, ++seqid_));
      updateBuddySettings_args args = new updateBuddySettings_args();
      args.setSettings(settings);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_updateBuddySettings() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "updateBuddySettings failed: out of sequence response");
      }
      updateBuddySettings_result result = new updateBuddySettings_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public String uploadBuddyContent(ContentType contentType, byte[] content) throws TalkException, TException
    {
      send_uploadBuddyContent(contentType, content);
      return recv_uploadBuddyContent();
    }

    public void send_uploadBuddyContent(ContentType contentType, byte[] content) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("uploadBuddyContent", TMessageType.CALL, ++seqid_));
      uploadBuddyContent_args args = new uploadBuddyContent_args();
      args.setContentType(contentType);
      args.setContent(content);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_uploadBuddyContent() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "uploadBuddyContent failed: out of sequence response");
      }
      uploadBuddyContent_result result = new uploadBuddyContent_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "uploadBuddyContent failed: unknown result");
    }

  }
  public static class Processor implements TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("addBuddyMember", new addBuddyMember());
      processMap_.put("addBuddyMembers", new addBuddyMembers());
      processMap_.put("blockBuddyMember", new blockBuddyMember());
      processMap_.put("commitSendMessagesToAll", new commitSendMessagesToAll());
      processMap_.put("commitSendMessagesToMids", new commitSendMessagesToMids());
      processMap_.put("containsBuddyMember", new containsBuddyMember());
      processMap_.put("downloadMessageContent", new downloadMessageContent());
      processMap_.put("downloadMessageContentPreview", new downloadMessageContentPreview());
      processMap_.put("downloadProfileImage", new downloadProfileImage());
      processMap_.put("downloadProfileImagePreview", new downloadProfileImagePreview());
      processMap_.put("getActiveMemberCountByBuddyMid", new getActiveMemberCountByBuddyMid());
      processMap_.put("getActiveMemberMidsByBuddyMid", new getActiveMemberMidsByBuddyMid());
      processMap_.put("getAllBuddyMembers", new getAllBuddyMembers());
      processMap_.put("getBlockedBuddyMembers", new getBlockedBuddyMembers());
      processMap_.put("getBlockerCountByBuddyMid", new getBlockerCountByBuddyMid());
      processMap_.put("getBuddyDetailByMid", new getBuddyDetailByMid());
      processMap_.put("getBuddyProfile", new getBuddyProfile());
      processMap_.put("getContactTicket", new getContactTicket());
      processMap_.put("getMemberCountByBuddyMid", new getMemberCountByBuddyMid());
      processMap_.put("getSendBuddyMessageResult", new getSendBuddyMessageResult());
      processMap_.put("getSetBuddyOnAirResult", new getSetBuddyOnAirResult());
      processMap_.put("getUpdateBuddyProfileResult", new getUpdateBuddyProfileResult());
      processMap_.put("isBuddyOnAirByMid", new isBuddyOnAirByMid());
      processMap_.put("linkAndSendBuddyContentMessageToAllAsync", new linkAndSendBuddyContentMessageToAllAsync());
      processMap_.put("linkAndSendBuddyContentMessageToMids", new linkAndSendBuddyContentMessageToMids());
      processMap_.put("notifyBuddyBlocked", new notifyBuddyBlocked());
      processMap_.put("notifyBuddyUnblocked", new notifyBuddyUnblocked());
      processMap_.put("registerBuddy", new registerBuddy());
      processMap_.put("registerBuddyAdmin", new registerBuddyAdmin());
      processMap_.put("reissueContactTicket", new reissueContactTicket());
      processMap_.put("removeBuddyMember", new removeBuddyMember());
      processMap_.put("removeBuddyMembers", new removeBuddyMembers());
      processMap_.put("sendBuddyContentMessageToAll", new sendBuddyContentMessageToAll());
      processMap_.put("sendBuddyContentMessageToAllAsync", new sendBuddyContentMessageToAllAsync());
      processMap_.put("sendBuddyContentMessageToMids", new sendBuddyContentMessageToMids());
      processMap_.put("sendBuddyContentMessageToMidsAsync", new sendBuddyContentMessageToMidsAsync());
      processMap_.put("sendBuddyMessageToAll", new sendBuddyMessageToAll());
      processMap_.put("sendBuddyMessageToAllAsync", new sendBuddyMessageToAllAsync());
      processMap_.put("sendBuddyMessageToMids", new sendBuddyMessageToMids());
      processMap_.put("sendBuddyMessageToMidsAsync", new sendBuddyMessageToMidsAsync());
      processMap_.put("sendIndividualEventToAllAsync", new sendIndividualEventToAllAsync());
      processMap_.put("setBuddyOnAir", new setBuddyOnAir());
      processMap_.put("setBuddyOnAirAsync", new setBuddyOnAirAsync());
      processMap_.put("storeMessage", new storeMessage());
      processMap_.put("unblockBuddyMember", new unblockBuddyMember());
      processMap_.put("unregisterBuddy", new unregisterBuddy());
      processMap_.put("unregisterBuddyAdmin", new unregisterBuddyAdmin());
      processMap_.put("updateBuddyAdminProfileAttribute", new updateBuddyAdminProfileAttribute());
      processMap_.put("updateBuddyAdminProfileImage", new updateBuddyAdminProfileImage());
      processMap_.put("updateBuddyProfileAttributes", new updateBuddyProfileAttributes());
      processMap_.put("updateBuddyProfileAttributesAsync", new updateBuddyProfileAttributesAsync());
      processMap_.put("updateBuddyProfileImage", new updateBuddyProfileImage());
      processMap_.put("updateBuddyProfileImageAsync", new updateBuddyProfileImageAsync());
      processMap_.put("updateBuddySearchId", new updateBuddySearchId());
      processMap_.put("updateBuddySettings", new updateBuddySettings());
      processMap_.put("uploadBuddyContent", new uploadBuddyContent());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final Hashtable processMap_ = new Hashtable();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = (ProcessFunction)processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class addBuddyMember implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        addBuddyMember_args args = new addBuddyMember_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("addBuddyMember", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        addBuddyMember_result result = new addBuddyMember_result();
        try {
          iface_.addBuddyMember(args.requestId, args.userMid);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing addBuddyMember");
          oprot.writeMessageBegin(new TMessage("addBuddyMember", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("addBuddyMember", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class addBuddyMembers implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        addBuddyMembers_args args = new addBuddyMembers_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("addBuddyMembers", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        addBuddyMembers_result result = new addBuddyMembers_result();
        try {
          iface_.addBuddyMembers(args.requestId, args.userMids);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing addBuddyMembers");
          oprot.writeMessageBegin(new TMessage("addBuddyMembers", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("addBuddyMembers", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class blockBuddyMember implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        blockBuddyMember_args args = new blockBuddyMember_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("blockBuddyMember", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        blockBuddyMember_result result = new blockBuddyMember_result();
        try {
          iface_.blockBuddyMember(args.requestId, args.mid);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing blockBuddyMember");
          oprot.writeMessageBegin(new TMessage("blockBuddyMember", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("blockBuddyMember", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class commitSendMessagesToAll implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        commitSendMessagesToAll_args args = new commitSendMessagesToAll_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("commitSendMessagesToAll", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        commitSendMessagesToAll_result result = new commitSendMessagesToAll_result();
        try {
          result.success = iface_.commitSendMessagesToAll(args.requestIdList);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing commitSendMessagesToAll");
          oprot.writeMessageBegin(new TMessage("commitSendMessagesToAll", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("commitSendMessagesToAll", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class commitSendMessagesToMids implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        commitSendMessagesToMids_args args = new commitSendMessagesToMids_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("commitSendMessagesToMids", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        commitSendMessagesToMids_result result = new commitSendMessagesToMids_result();
        try {
          result.success = iface_.commitSendMessagesToMids(args.requestIdList, args.mids);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing commitSendMessagesToMids");
          oprot.writeMessageBegin(new TMessage("commitSendMessagesToMids", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("commitSendMessagesToMids", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class containsBuddyMember implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        containsBuddyMember_args args = new containsBuddyMember_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("containsBuddyMember", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        containsBuddyMember_result result = new containsBuddyMember_result();
        try {
          result.success = iface_.containsBuddyMember(args.requestId, args.userMid);
          result.setSuccessIsSet(true);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing containsBuddyMember");
          oprot.writeMessageBegin(new TMessage("containsBuddyMember", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("containsBuddyMember", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class downloadMessageContent implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        downloadMessageContent_args args = new downloadMessageContent_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("downloadMessageContent", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        downloadMessageContent_result result = new downloadMessageContent_result();
        try {
          result.success = iface_.downloadMessageContent(args.requestId, args.messageId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing downloadMessageContent");
          oprot.writeMessageBegin(new TMessage("downloadMessageContent", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("downloadMessageContent", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class downloadMessageContentPreview implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        downloadMessageContentPreview_args args = new downloadMessageContentPreview_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("downloadMessageContentPreview", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        downloadMessageContentPreview_result result = new downloadMessageContentPreview_result();
        try {
          result.success = iface_.downloadMessageContentPreview(args.requestId, args.messageId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing downloadMessageContentPreview");
          oprot.writeMessageBegin(new TMessage("downloadMessageContentPreview", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("downloadMessageContentPreview", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class downloadProfileImage implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        downloadProfileImage_args args = new downloadProfileImage_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("downloadProfileImage", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        downloadProfileImage_result result = new downloadProfileImage_result();
        try {
          result.success = iface_.downloadProfileImage(args.requestId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing downloadProfileImage");
          oprot.writeMessageBegin(new TMessage("downloadProfileImage", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("downloadProfileImage", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class downloadProfileImagePreview implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        downloadProfileImagePreview_args args = new downloadProfileImagePreview_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("downloadProfileImagePreview", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        downloadProfileImagePreview_result result = new downloadProfileImagePreview_result();
        try {
          result.success = iface_.downloadProfileImagePreview(args.requestId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing downloadProfileImagePreview");
          oprot.writeMessageBegin(new TMessage("downloadProfileImagePreview", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("downloadProfileImagePreview", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getActiveMemberCountByBuddyMid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getActiveMemberCountByBuddyMid_args args = new getActiveMemberCountByBuddyMid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getActiveMemberCountByBuddyMid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getActiveMemberCountByBuddyMid_result result = new getActiveMemberCountByBuddyMid_result();
        try {
          result.success = iface_.getActiveMemberCountByBuddyMid(args.buddyMid);
          result.setSuccessIsSet(true);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getActiveMemberCountByBuddyMid");
          oprot.writeMessageBegin(new TMessage("getActiveMemberCountByBuddyMid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getActiveMemberCountByBuddyMid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getActiveMemberMidsByBuddyMid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getActiveMemberMidsByBuddyMid_args args = new getActiveMemberMidsByBuddyMid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getActiveMemberMidsByBuddyMid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getActiveMemberMidsByBuddyMid_result result = new getActiveMemberMidsByBuddyMid_result();
        try {
          result.success = iface_.getActiveMemberMidsByBuddyMid(args.buddyMid);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getActiveMemberMidsByBuddyMid");
          oprot.writeMessageBegin(new TMessage("getActiveMemberMidsByBuddyMid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getActiveMemberMidsByBuddyMid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getAllBuddyMembers implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getAllBuddyMembers_args args = new getAllBuddyMembers_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getAllBuddyMembers", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getAllBuddyMembers_result result = new getAllBuddyMembers_result();
        try {
          result.success = iface_.getAllBuddyMembers();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getAllBuddyMembers");
          oprot.writeMessageBegin(new TMessage("getAllBuddyMembers", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getAllBuddyMembers", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getBlockedBuddyMembers implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getBlockedBuddyMembers_args args = new getBlockedBuddyMembers_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getBlockedBuddyMembers", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getBlockedBuddyMembers_result result = new getBlockedBuddyMembers_result();
        try {
          result.success = iface_.getBlockedBuddyMembers();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getBlockedBuddyMembers");
          oprot.writeMessageBegin(new TMessage("getBlockedBuddyMembers", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getBlockedBuddyMembers", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getBlockerCountByBuddyMid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getBlockerCountByBuddyMid_args args = new getBlockerCountByBuddyMid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getBlockerCountByBuddyMid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getBlockerCountByBuddyMid_result result = new getBlockerCountByBuddyMid_result();
        try {
          result.success = iface_.getBlockerCountByBuddyMid(args.buddyMid);
          result.setSuccessIsSet(true);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getBlockerCountByBuddyMid");
          oprot.writeMessageBegin(new TMessage("getBlockerCountByBuddyMid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getBlockerCountByBuddyMid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getBuddyDetailByMid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getBuddyDetailByMid_args args = new getBuddyDetailByMid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getBuddyDetailByMid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getBuddyDetailByMid_result result = new getBuddyDetailByMid_result();
        try {
          result.success = iface_.getBuddyDetailByMid(args.buddyMid);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getBuddyDetailByMid");
          oprot.writeMessageBegin(new TMessage("getBuddyDetailByMid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getBuddyDetailByMid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getBuddyProfile implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getBuddyProfile_args args = new getBuddyProfile_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getBuddyProfile", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getBuddyProfile_result result = new getBuddyProfile_result();
        try {
          result.success = iface_.getBuddyProfile();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getBuddyProfile");
          oprot.writeMessageBegin(new TMessage("getBuddyProfile", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getBuddyProfile", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getContactTicket implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getContactTicket_args args = new getContactTicket_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getContactTicket", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getContactTicket_result result = new getContactTicket_result();
        try {
          result.success = iface_.getContactTicket();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getContactTicket");
          oprot.writeMessageBegin(new TMessage("getContactTicket", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getContactTicket", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getMemberCountByBuddyMid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getMemberCountByBuddyMid_args args = new getMemberCountByBuddyMid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getMemberCountByBuddyMid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getMemberCountByBuddyMid_result result = new getMemberCountByBuddyMid_result();
        try {
          result.success = iface_.getMemberCountByBuddyMid(args.buddyMid);
          result.setSuccessIsSet(true);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getMemberCountByBuddyMid");
          oprot.writeMessageBegin(new TMessage("getMemberCountByBuddyMid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getMemberCountByBuddyMid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getSendBuddyMessageResult implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getSendBuddyMessageResult_args args = new getSendBuddyMessageResult_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getSendBuddyMessageResult", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getSendBuddyMessageResult_result result = new getSendBuddyMessageResult_result();
        try {
          result.success = iface_.getSendBuddyMessageResult(args.sendBuddyMessageRequestId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getSendBuddyMessageResult");
          oprot.writeMessageBegin(new TMessage("getSendBuddyMessageResult", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getSendBuddyMessageResult", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getSetBuddyOnAirResult implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getSetBuddyOnAirResult_args args = new getSetBuddyOnAirResult_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getSetBuddyOnAirResult", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getSetBuddyOnAirResult_result result = new getSetBuddyOnAirResult_result();
        try {
          result.success = iface_.getSetBuddyOnAirResult(args.setBuddyOnAirRequestId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getSetBuddyOnAirResult");
          oprot.writeMessageBegin(new TMessage("getSetBuddyOnAirResult", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getSetBuddyOnAirResult", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getUpdateBuddyProfileResult implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getUpdateBuddyProfileResult_args args = new getUpdateBuddyProfileResult_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getUpdateBuddyProfileResult", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getUpdateBuddyProfileResult_result result = new getUpdateBuddyProfileResult_result();
        try {
          result.success = iface_.getUpdateBuddyProfileResult(args.updateBuddyProfileRequestId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getUpdateBuddyProfileResult");
          oprot.writeMessageBegin(new TMessage("getUpdateBuddyProfileResult", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getUpdateBuddyProfileResult", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class isBuddyOnAirByMid implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        isBuddyOnAirByMid_args args = new isBuddyOnAirByMid_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("isBuddyOnAirByMid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        isBuddyOnAirByMid_result result = new isBuddyOnAirByMid_result();
        try {
          result.success = iface_.isBuddyOnAirByMid(args.buddyMid);
          result.setSuccessIsSet(true);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing isBuddyOnAirByMid");
          oprot.writeMessageBegin(new TMessage("isBuddyOnAirByMid", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("isBuddyOnAirByMid", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class linkAndSendBuddyContentMessageToAllAsync implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        linkAndSendBuddyContentMessageToAllAsync_args args = new linkAndSendBuddyContentMessageToAllAsync_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("linkAndSendBuddyContentMessageToAllAsync", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        linkAndSendBuddyContentMessageToAllAsync_result result = new linkAndSendBuddyContentMessageToAllAsync_result();
        try {
          result.success = iface_.linkAndSendBuddyContentMessageToAllAsync(args.requestId, args.msg, args.sourceContentId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing linkAndSendBuddyContentMessageToAllAsync");
          oprot.writeMessageBegin(new TMessage("linkAndSendBuddyContentMessageToAllAsync", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("linkAndSendBuddyContentMessageToAllAsync", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class linkAndSendBuddyContentMessageToMids implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        linkAndSendBuddyContentMessageToMids_args args = new linkAndSendBuddyContentMessageToMids_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("linkAndSendBuddyContentMessageToMids", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        linkAndSendBuddyContentMessageToMids_result result = new linkAndSendBuddyContentMessageToMids_result();
        try {
          result.success = iface_.linkAndSendBuddyContentMessageToMids(args.requestId, args.msg, args.sourceContentId, args.mids);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing linkAndSendBuddyContentMessageToMids");
          oprot.writeMessageBegin(new TMessage("linkAndSendBuddyContentMessageToMids", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("linkAndSendBuddyContentMessageToMids", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class notifyBuddyBlocked implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        notifyBuddyBlocked_args args = new notifyBuddyBlocked_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("notifyBuddyBlocked", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        notifyBuddyBlocked_result result = new notifyBuddyBlocked_result();
        try {
          iface_.notifyBuddyBlocked(args.buddyMid, args.blockerMid);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing notifyBuddyBlocked");
          oprot.writeMessageBegin(new TMessage("notifyBuddyBlocked", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("notifyBuddyBlocked", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class notifyBuddyUnblocked implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        notifyBuddyUnblocked_args args = new notifyBuddyUnblocked_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("notifyBuddyUnblocked", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        notifyBuddyUnblocked_result result = new notifyBuddyUnblocked_result();
        try {
          iface_.notifyBuddyUnblocked(args.buddyMid, args.blockerMid);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing notifyBuddyUnblocked");
          oprot.writeMessageBegin(new TMessage("notifyBuddyUnblocked", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("notifyBuddyUnblocked", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class registerBuddy implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        registerBuddy_args args = new registerBuddy_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("registerBuddy", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        registerBuddy_result result = new registerBuddy_result();
        try {
          result.success = iface_.registerBuddy(args.buddyId, args.searchId, args.displayName, args.statusMeessage, args.picture, args.settings);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerBuddy");
          oprot.writeMessageBegin(new TMessage("registerBuddy", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("registerBuddy", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class registerBuddyAdmin implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        registerBuddyAdmin_args args = new registerBuddyAdmin_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("registerBuddyAdmin", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        registerBuddyAdmin_result result = new registerBuddyAdmin_result();
        try {
          result.success = iface_.registerBuddyAdmin(args.buddyId, args.searchId, args.displayName, args.statusMessage, args.picture);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerBuddyAdmin");
          oprot.writeMessageBegin(new TMessage("registerBuddyAdmin", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("registerBuddyAdmin", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class reissueContactTicket implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        reissueContactTicket_args args = new reissueContactTicket_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("reissueContactTicket", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        reissueContactTicket_result result = new reissueContactTicket_result();
        try {
          result.success = iface_.reissueContactTicket(args.expirationTime, args.maxUseCount);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing reissueContactTicket");
          oprot.writeMessageBegin(new TMessage("reissueContactTicket", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("reissueContactTicket", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class removeBuddyMember implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        removeBuddyMember_args args = new removeBuddyMember_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("removeBuddyMember", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        removeBuddyMember_result result = new removeBuddyMember_result();
        try {
          iface_.removeBuddyMember(args.requestId, args.userMid);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing removeBuddyMember");
          oprot.writeMessageBegin(new TMessage("removeBuddyMember", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("removeBuddyMember", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class removeBuddyMembers implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        removeBuddyMembers_args args = new removeBuddyMembers_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("removeBuddyMembers", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        removeBuddyMembers_result result = new removeBuddyMembers_result();
        try {
          iface_.removeBuddyMembers(args.requestId, args.userMids);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing removeBuddyMembers");
          oprot.writeMessageBegin(new TMessage("removeBuddyMembers", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("removeBuddyMembers", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class sendBuddyContentMessageToAll implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        sendBuddyContentMessageToAll_args args = new sendBuddyContentMessageToAll_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("sendBuddyContentMessageToAll", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        sendBuddyContentMessageToAll_result result = new sendBuddyContentMessageToAll_result();
        try {
          result.success = iface_.sendBuddyContentMessageToAll(args.requestId, args.msg, args.content);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendBuddyContentMessageToAll");
          oprot.writeMessageBegin(new TMessage("sendBuddyContentMessageToAll", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("sendBuddyContentMessageToAll", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class sendBuddyContentMessageToAllAsync implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        sendBuddyContentMessageToAllAsync_args args = new sendBuddyContentMessageToAllAsync_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("sendBuddyContentMessageToAllAsync", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        sendBuddyContentMessageToAllAsync_result result = new sendBuddyContentMessageToAllAsync_result();
        try {
          result.success = iface_.sendBuddyContentMessageToAllAsync(args.requestId, args.msg, args.content);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendBuddyContentMessageToAllAsync");
          oprot.writeMessageBegin(new TMessage("sendBuddyContentMessageToAllAsync", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("sendBuddyContentMessageToAllAsync", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class sendBuddyContentMessageToMids implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        sendBuddyContentMessageToMids_args args = new sendBuddyContentMessageToMids_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("sendBuddyContentMessageToMids", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        sendBuddyContentMessageToMids_result result = new sendBuddyContentMessageToMids_result();
        try {
          result.success = iface_.sendBuddyContentMessageToMids(args.requestId, args.msg, args.content, args.mids);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendBuddyContentMessageToMids");
          oprot.writeMessageBegin(new TMessage("sendBuddyContentMessageToMids", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("sendBuddyContentMessageToMids", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class sendBuddyContentMessageToMidsAsync implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        sendBuddyContentMessageToMidsAsync_args args = new sendBuddyContentMessageToMidsAsync_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("sendBuddyContentMessageToMidsAsync", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        sendBuddyContentMessageToMidsAsync_result result = new sendBuddyContentMessageToMidsAsync_result();
        try {
          result.success = iface_.sendBuddyContentMessageToMidsAsync(args.requestId, args.msg, args.content, args.mids);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendBuddyContentMessageToMidsAsync");
          oprot.writeMessageBegin(new TMessage("sendBuddyContentMessageToMidsAsync", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("sendBuddyContentMessageToMidsAsync", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class sendBuddyMessageToAll implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        sendBuddyMessageToAll_args args = new sendBuddyMessageToAll_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("sendBuddyMessageToAll", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        sendBuddyMessageToAll_result result = new sendBuddyMessageToAll_result();
        try {
          result.success = iface_.sendBuddyMessageToAll(args.requestId, args.msg);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendBuddyMessageToAll");
          oprot.writeMessageBegin(new TMessage("sendBuddyMessageToAll", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("sendBuddyMessageToAll", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class sendBuddyMessageToAllAsync implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        sendBuddyMessageToAllAsync_args args = new sendBuddyMessageToAllAsync_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("sendBuddyMessageToAllAsync", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        sendBuddyMessageToAllAsync_result result = new sendBuddyMessageToAllAsync_result();
        try {
          result.success = iface_.sendBuddyMessageToAllAsync(args.requestId, args.msg);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendBuddyMessageToAllAsync");
          oprot.writeMessageBegin(new TMessage("sendBuddyMessageToAllAsync", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("sendBuddyMessageToAllAsync", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class sendBuddyMessageToMids implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        sendBuddyMessageToMids_args args = new sendBuddyMessageToMids_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("sendBuddyMessageToMids", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        sendBuddyMessageToMids_result result = new sendBuddyMessageToMids_result();
        try {
          result.success = iface_.sendBuddyMessageToMids(args.requestId, args.msg, args.mids);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendBuddyMessageToMids");
          oprot.writeMessageBegin(new TMessage("sendBuddyMessageToMids", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("sendBuddyMessageToMids", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class sendBuddyMessageToMidsAsync implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        sendBuddyMessageToMidsAsync_args args = new sendBuddyMessageToMidsAsync_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("sendBuddyMessageToMidsAsync", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        sendBuddyMessageToMidsAsync_result result = new sendBuddyMessageToMidsAsync_result();
        try {
          result.success = iface_.sendBuddyMessageToMidsAsync(args.requestId, args.msg, args.mids);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendBuddyMessageToMidsAsync");
          oprot.writeMessageBegin(new TMessage("sendBuddyMessageToMidsAsync", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("sendBuddyMessageToMidsAsync", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class sendIndividualEventToAllAsync implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        sendIndividualEventToAllAsync_args args = new sendIndividualEventToAllAsync_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("sendIndividualEventToAllAsync", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        sendIndividualEventToAllAsync_result result = new sendIndividualEventToAllAsync_result();
        try {
          iface_.sendIndividualEventToAllAsync(args.requestId, args.buddyMid, args.notificationStatus);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendIndividualEventToAllAsync");
          oprot.writeMessageBegin(new TMessage("sendIndividualEventToAllAsync", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("sendIndividualEventToAllAsync", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class setBuddyOnAir implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        setBuddyOnAir_args args = new setBuddyOnAir_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("setBuddyOnAir", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        setBuddyOnAir_result result = new setBuddyOnAir_result();
        try {
          result.success = iface_.setBuddyOnAir(args.requestId, args.onAir);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing setBuddyOnAir");
          oprot.writeMessageBegin(new TMessage("setBuddyOnAir", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("setBuddyOnAir", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class setBuddyOnAirAsync implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        setBuddyOnAirAsync_args args = new setBuddyOnAirAsync_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("setBuddyOnAirAsync", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        setBuddyOnAirAsync_result result = new setBuddyOnAirAsync_result();
        try {
          result.success = iface_.setBuddyOnAirAsync(args.requestId, args.onAir);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing setBuddyOnAirAsync");
          oprot.writeMessageBegin(new TMessage("setBuddyOnAirAsync", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("setBuddyOnAirAsync", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class storeMessage implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        storeMessage_args args = new storeMessage_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("storeMessage", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        storeMessage_result result = new storeMessage_result();
        try {
          result.success = iface_.storeMessage(args.requestId, args.messageRequest);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing storeMessage");
          oprot.writeMessageBegin(new TMessage("storeMessage", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("storeMessage", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class unblockBuddyMember implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        unblockBuddyMember_args args = new unblockBuddyMember_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("unblockBuddyMember", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        unblockBuddyMember_result result = new unblockBuddyMember_result();
        try {
          iface_.unblockBuddyMember(args.requestId, args.mid);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing unblockBuddyMember");
          oprot.writeMessageBegin(new TMessage("unblockBuddyMember", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("unblockBuddyMember", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class unregisterBuddy implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        unregisterBuddy_args args = new unregisterBuddy_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("unregisterBuddy", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        unregisterBuddy_result result = new unregisterBuddy_result();
        try {
          iface_.unregisterBuddy(args.requestId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing unregisterBuddy");
          oprot.writeMessageBegin(new TMessage("unregisterBuddy", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("unregisterBuddy", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class unregisterBuddyAdmin implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        unregisterBuddyAdmin_args args = new unregisterBuddyAdmin_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("unregisterBuddyAdmin", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        unregisterBuddyAdmin_result result = new unregisterBuddyAdmin_result();
        try {
          iface_.unregisterBuddyAdmin(args.requestId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing unregisterBuddyAdmin");
          oprot.writeMessageBegin(new TMessage("unregisterBuddyAdmin", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("unregisterBuddyAdmin", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateBuddyAdminProfileAttribute implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateBuddyAdminProfileAttribute_args args = new updateBuddyAdminProfileAttribute_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateBuddyAdminProfileAttribute", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateBuddyAdminProfileAttribute_result result = new updateBuddyAdminProfileAttribute_result();
        try {
          iface_.updateBuddyAdminProfileAttribute(args.requestId, args.attributes);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateBuddyAdminProfileAttribute");
          oprot.writeMessageBegin(new TMessage("updateBuddyAdminProfileAttribute", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateBuddyAdminProfileAttribute", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateBuddyAdminProfileImage implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateBuddyAdminProfileImage_args args = new updateBuddyAdminProfileImage_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateBuddyAdminProfileImage", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateBuddyAdminProfileImage_result result = new updateBuddyAdminProfileImage_result();
        try {
          iface_.updateBuddyAdminProfileImage(args.requestId, args.picture);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateBuddyAdminProfileImage");
          oprot.writeMessageBegin(new TMessage("updateBuddyAdminProfileImage", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateBuddyAdminProfileImage", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateBuddyProfileAttributes implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateBuddyProfileAttributes_args args = new updateBuddyProfileAttributes_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateBuddyProfileAttributes", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateBuddyProfileAttributes_result result = new updateBuddyProfileAttributes_result();
        try {
          result.success = iface_.updateBuddyProfileAttributes(args.requestId, args.attributes);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateBuddyProfileAttributes");
          oprot.writeMessageBegin(new TMessage("updateBuddyProfileAttributes", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateBuddyProfileAttributes", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateBuddyProfileAttributesAsync implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateBuddyProfileAttributesAsync_args args = new updateBuddyProfileAttributesAsync_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateBuddyProfileAttributesAsync", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateBuddyProfileAttributesAsync_result result = new updateBuddyProfileAttributesAsync_result();
        try {
          result.success = iface_.updateBuddyProfileAttributesAsync(args.requestId, args.attributes);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateBuddyProfileAttributesAsync");
          oprot.writeMessageBegin(new TMessage("updateBuddyProfileAttributesAsync", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateBuddyProfileAttributesAsync", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateBuddyProfileImage implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateBuddyProfileImage_args args = new updateBuddyProfileImage_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateBuddyProfileImage", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateBuddyProfileImage_result result = new updateBuddyProfileImage_result();
        try {
          result.success = iface_.updateBuddyProfileImage(args.requestId, args.image);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateBuddyProfileImage");
          oprot.writeMessageBegin(new TMessage("updateBuddyProfileImage", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateBuddyProfileImage", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateBuddyProfileImageAsync implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateBuddyProfileImageAsync_args args = new updateBuddyProfileImageAsync_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateBuddyProfileImageAsync", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateBuddyProfileImageAsync_result result = new updateBuddyProfileImageAsync_result();
        try {
          result.success = iface_.updateBuddyProfileImageAsync(args.requestId, args.image);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateBuddyProfileImageAsync");
          oprot.writeMessageBegin(new TMessage("updateBuddyProfileImageAsync", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateBuddyProfileImageAsync", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateBuddySearchId implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateBuddySearchId_args args = new updateBuddySearchId_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateBuddySearchId", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateBuddySearchId_result result = new updateBuddySearchId_result();
        try {
          iface_.updateBuddySearchId(args.requestId, args.searchId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateBuddySearchId");
          oprot.writeMessageBegin(new TMessage("updateBuddySearchId", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateBuddySearchId", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class updateBuddySettings implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        updateBuddySettings_args args = new updateBuddySettings_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("updateBuddySettings", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        updateBuddySettings_result result = new updateBuddySettings_result();
        try {
          iface_.updateBuddySettings(args.settings);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing updateBuddySettings");
          oprot.writeMessageBegin(new TMessage("updateBuddySettings", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("updateBuddySettings", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class uploadBuddyContent implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        uploadBuddyContent_args args = new uploadBuddyContent_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("uploadBuddyContent", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        uploadBuddyContent_result result = new uploadBuddyContent_result();
        try {
          result.success = iface_.uploadBuddyContent(args.contentType, args.content);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing uploadBuddyContent");
          oprot.writeMessageBegin(new TMessage("uploadBuddyContent", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("uploadBuddyContent", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class addBuddyMember_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("addBuddyMember_args");

    private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);
    private static final TField USER_MID_FIELD_DESC = new TField("userMid", TType.STRING, (short)2);

    private String requestId;
    private String userMid;

    // isset id assignments

    public addBuddyMember_args() {
    }

    public addBuddyMember_args(
      String requestId,
      String userMid)
    {
      this();
      this.requestId = requestId;
      this.userMid = userMid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBuddyMember_args(addBuddyMember_args other) {
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
      if (other.isSetUserMid()) {
        this.userMid = other.userMid;
      }
    }

    public addBuddyMember_args deepCopy() {
      return new addBuddyMember_args(this);
    }

    public void clear() {
      this.requestId = null;
      this.userMid = null;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public void setRequestId(String requestId) {
      this.requestId = requestId;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public String getUserMid() {
      return this.userMid;
    }

    public void setUserMid(String userMid) {
      this.userMid = userMid;
    }

    public void unsetUserMid() {
      this.userMid = null;
    }

    /** Returns true if field userMid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserMid() {
      return this.userMid != null;
    }

    public void setUserMidIsSet(boolean value) {
      if (!value) {
        this.userMid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addBuddyMember_args)
        return this.equals((addBuddyMember_args)that);
      return false;
    }

    public boolean equals(addBuddyMember_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      boolean this_present_userMid = true && this.isSetUserMid();
      boolean that_present_userMid = true && that.isSetUserMid();
      if (this_present_userMid || that_present_userMid) {
        if (!(this_present_userMid && that_present_userMid))
          return false;
        if (!this.userMid.equals(that.userMid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      addBuddyMember_args other = (addBuddyMember_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserMid(), other.isSetUserMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserMid()) {
        lastComparison = TBaseHelper.compareTo(this.userMid, other.userMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USER_MID
            if (field.type == TType.STRING) {
              this.userMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      if (this.userMid != null) {
        oprot.writeFieldBegin(USER_MID_FIELD_DESC);
        oprot.writeString(this.userMid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("addBuddyMember_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userMid:");
      if (this.userMid == null) {
        sb.append("null");
      } else {
        sb.append(this.userMid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class addBuddyMember_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("addBuddyMember_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public addBuddyMember_result() {
    }

    public addBuddyMember_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBuddyMember_result(addBuddyMember_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public addBuddyMember_result deepCopy() {
      return new addBuddyMember_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addBuddyMember_result)
        return this.equals((addBuddyMember_result)that);
      return false;
    }

    public boolean equals(addBuddyMember_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      addBuddyMember_result other = (addBuddyMember_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("addBuddyMember_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class addBuddyMembers_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("addBuddyMembers_args");

    private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);
    private static final TField USER_MIDS_FIELD_DESC = new TField("userMids", TType.LIST, (short)2);

    private String requestId;
    private Vector userMids;

    // isset id assignments

    public addBuddyMembers_args() {
    }

    public addBuddyMembers_args(
      String requestId,
      Vector userMids)
    {
      this();
      this.requestId = requestId;
      this.userMids = userMids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBuddyMembers_args(addBuddyMembers_args other) {
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
      if (other.isSetUserMids()) {
        Vector __this__userMids = new Vector();
        for (Enumeration other_enum = other.userMids.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__userMids.addElement(other_element);
        }
        this.userMids = __this__userMids;
      }
    }

    public addBuddyMembers_args deepCopy() {
      return new addBuddyMembers_args(this);
    }

    public void clear() {
      this.requestId = null;
      this.userMids = null;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public void setRequestId(String requestId) {
      this.requestId = requestId;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public int getUserMidsSize() {
      return (this.userMids == null) ? 0 : this.userMids.size();
    }

    public Enumeration getUserMidsEnumeration() {
      return (this.userMids == null) ? null : this.userMids.elements();
    }

    public void addToUserMids(String elem) {
      if (this.userMids == null) {
        this.userMids = new Vector();
      }
      this.userMids.addElement(elem);
    }

    public Vector getUserMids() {
      return this.userMids;
    }

    public void setUserMids(Vector userMids) {
      this.userMids = userMids;
    }

    public void unsetUserMids() {
      this.userMids = null;
    }

    /** Returns true if field userMids is set (has been assigned a value) and false otherwise */
    public boolean isSetUserMids() {
      return this.userMids != null;
    }

    public void setUserMidsIsSet(boolean value) {
      if (!value) {
        this.userMids = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addBuddyMembers_args)
        return this.equals((addBuddyMembers_args)that);
      return false;
    }

    public boolean equals(addBuddyMembers_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      boolean this_present_userMids = true && this.isSetUserMids();
      boolean that_present_userMids = true && that.isSetUserMids();
      if (this_present_userMids || that_present_userMids) {
        if (!(this_present_userMids && that_present_userMids))
          return false;
        if (!this.userMids.equals(that.userMids))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      addBuddyMembers_args other = (addBuddyMembers_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserMids(), other.isSetUserMids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserMids()) {
        lastComparison = TBaseHelper.compareTo(this.userMids, other.userMids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USER_MIDS
            if (field.type == TType.LIST) {
              {
                TList _list550 = iprot.readListBegin();
                this.userMids = new Vector(_list550.size);
                for (int _i551 = 0; _i551 < _list550.size; ++_i551)
                {
                  String _elem552;
                  _elem552 = iprot.readString();
                  this.userMids.addElement(_elem552);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      if (this.userMids != null) {
        oprot.writeFieldBegin(USER_MIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.userMids.size()));
          for (Enumeration _iter553_enum = this.userMids.elements(); _iter553_enum.hasMoreElements(); )           {
            String _iter553 = (String)_iter553_enum.nextElement();
            oprot.writeString(_iter553);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("addBuddyMembers_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userMids:");
      if (this.userMids == null) {
        sb.append("null");
      } else {
        sb.append(this.userMids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class addBuddyMembers_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("addBuddyMembers_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public addBuddyMembers_result() {
    }

    public addBuddyMembers_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addBuddyMembers_result(addBuddyMembers_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public addBuddyMembers_result deepCopy() {
      return new addBuddyMembers_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addBuddyMembers_result)
        return this.equals((addBuddyMembers_result)that);
      return false;
    }

    public boolean equals(addBuddyMembers_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      addBuddyMembers_result other = (addBuddyMembers_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("addBuddyMembers_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class blockBuddyMember_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("blockBuddyMember_args");

    private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);
    private static final TField MID_FIELD_DESC = new TField("mid", TType.STRING, (short)2);

    private String requestId;
    private String mid;

    // isset id assignments

    public blockBuddyMember_args() {
    }

    public blockBuddyMember_args(
      String requestId,
      String mid)
    {
      this();
      this.requestId = requestId;
      this.mid = mid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public blockBuddyMember_args(blockBuddyMember_args other) {
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
      if (other.isSetMid()) {
        this.mid = other.mid;
      }
    }

    public blockBuddyMember_args deepCopy() {
      return new blockBuddyMember_args(this);
    }

    public void clear() {
      this.requestId = null;
      this.mid = null;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public void setRequestId(String requestId) {
      this.requestId = requestId;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public String getMid() {
      return this.mid;
    }

    public void setMid(String mid) {
      this.mid = mid;
    }

    public void unsetMid() {
      this.mid = null;
    }

    /** Returns true if field mid is set (has been assigned a value) and false otherwise */
    public boolean isSetMid() {
      return this.mid != null;
    }

    public void setMidIsSet(boolean value) {
      if (!value) {
        this.mid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof blockBuddyMember_args)
        return this.equals((blockBuddyMember_args)that);
      return false;
    }

    public boolean equals(blockBuddyMember_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      boolean this_present_mid = true && this.isSetMid();
      boolean that_present_mid = true && that.isSetMid();
      if (this_present_mid || that_present_mid) {
        if (!(this_present_mid && that_present_mid))
          return false;
        if (!this.mid.equals(that.mid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      blockBuddyMember_args other = (blockBuddyMember_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMid(), other.isSetMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMid()) {
        lastComparison = TBaseHelper.compareTo(this.mid, other.mid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MID
            if (field.type == TType.STRING) {
              this.mid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      if (this.mid != null) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeString(this.mid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("blockBuddyMember_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mid:");
      if (this.mid == null) {
        sb.append("null");
      } else {
        sb.append(this.mid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class blockBuddyMember_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("blockBuddyMember_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public blockBuddyMember_result() {
    }

    public blockBuddyMember_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public blockBuddyMember_result(blockBuddyMember_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public blockBuddyMember_result deepCopy() {
      return new blockBuddyMember_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof blockBuddyMember_result)
        return this.equals((blockBuddyMember_result)that);
      return false;
    }

    public boolean equals(blockBuddyMember_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      blockBuddyMember_result other = (blockBuddyMember_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("blockBuddyMember_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class commitSendMessagesToAll_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("commitSendMessagesToAll_args");

    private static final TField REQUEST_ID_LIST_FIELD_DESC = new TField("requestIdList", TType.LIST, (short)1);

    private Vector requestIdList;

    // isset id assignments

    public commitSendMessagesToAll_args() {
    }

    public commitSendMessagesToAll_args(
      Vector requestIdList)
    {
      this();
      this.requestIdList = requestIdList;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public commitSendMessagesToAll_args(commitSendMessagesToAll_args other) {
      if (other.isSetRequestIdList()) {
        Vector __this__requestIdList = new Vector();
        for (Enumeration other_enum = other.requestIdList.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__requestIdList.addElement(other_element);
        }
        this.requestIdList = __this__requestIdList;
      }
    }

    public commitSendMessagesToAll_args deepCopy() {
      return new commitSendMessagesToAll_args(this);
    }

    public void clear() {
      this.requestIdList = null;
    }

    public int getRequestIdListSize() {
      return (this.requestIdList == null) ? 0 : this.requestIdList.size();
    }

    public Enumeration getRequestIdListEnumeration() {
      return (this.requestIdList == null) ? null : this.requestIdList.elements();
    }

    public void addToRequestIdList(String elem) {
      if (this.requestIdList == null) {
        this.requestIdList = new Vector();
      }
      this.requestIdList.addElement(elem);
    }

    public Vector getRequestIdList() {
      return this.requestIdList;
    }

    public void setRequestIdList(Vector requestIdList) {
      this.requestIdList = requestIdList;
    }

    public void unsetRequestIdList() {
      this.requestIdList = null;
    }

    /** Returns true if field requestIdList is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestIdList() {
      return this.requestIdList != null;
    }

    public void setRequestIdListIsSet(boolean value) {
      if (!value) {
        this.requestIdList = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof commitSendMessagesToAll_args)
        return this.equals((commitSendMessagesToAll_args)that);
      return false;
    }

    public boolean equals(commitSendMessagesToAll_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestIdList = true && this.isSetRequestIdList();
      boolean that_present_requestIdList = true && that.isSetRequestIdList();
      if (this_present_requestIdList || that_present_requestIdList) {
        if (!(this_present_requestIdList && that_present_requestIdList))
          return false;
        if (!this.requestIdList.equals(that.requestIdList))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      commitSendMessagesToAll_args other = (commitSendMessagesToAll_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestIdList(), other.isSetRequestIdList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestIdList()) {
        lastComparison = TBaseHelper.compareTo(this.requestIdList, other.requestIdList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID_LIST
            if (field.type == TType.LIST) {
              {
                TList _list554 = iprot.readListBegin();
                this.requestIdList = new Vector(_list554.size);
                for (int _i555 = 0; _i555 < _list554.size; ++_i555)
                {
                  String _elem556;
                  _elem556 = iprot.readString();
                  this.requestIdList.addElement(_elem556);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestIdList != null) {
        oprot.writeFieldBegin(REQUEST_ID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.requestIdList.size()));
          for (Enumeration _iter557_enum = this.requestIdList.elements(); _iter557_enum.hasMoreElements(); )           {
            String _iter557 = (String)_iter557_enum.nextElement();
            oprot.writeString(_iter557);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("commitSendMessagesToAll_args(");
      boolean first = true;

      sb.append("requestIdList:");
      if (this.requestIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.requestIdList);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class commitSendMessagesToAll_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("commitSendMessagesToAll_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public commitSendMessagesToAll_result() {
    }

    public commitSendMessagesToAll_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public commitSendMessagesToAll_result(commitSendMessagesToAll_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          SendBuddyMessageResult other_element = (SendBuddyMessageResult)other_enum.nextElement();
          __this__success.addElement(new SendBuddyMessageResult(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public commitSendMessagesToAll_result deepCopy() {
      return new commitSendMessagesToAll_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(SendBuddyMessageResult elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof commitSendMessagesToAll_result)
        return this.equals((commitSendMessagesToAll_result)that);
      return false;
    }

    public boolean equals(commitSendMessagesToAll_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      commitSendMessagesToAll_result other = (commitSendMessagesToAll_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list558 = iprot.readListBegin();
                this.success = new Vector(_list558.size);
                for (int _i559 = 0; _i559 < _list558.size; ++_i559)
                {
                  SendBuddyMessageResult _elem560;
                  _elem560 = new SendBuddyMessageResult();
                  _elem560.read(iprot);
                  this.success.addElement(_elem560);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter561_enum = this.success.elements(); _iter561_enum.hasMoreElements(); )           {
            SendBuddyMessageResult _iter561 = (SendBuddyMessageResult)_iter561_enum.nextElement();
            _iter561.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("commitSendMessagesToAll_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class commitSendMessagesToMids_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("commitSendMessagesToMids_args");

    private static final TField REQUEST_ID_LIST_FIELD_DESC = new TField("requestIdList", TType.LIST, (short)1);
    private static final TField MIDS_FIELD_DESC = new TField("mids", TType.LIST, (short)2);

    private Vector requestIdList;
    private Vector mids;

    // isset id assignments

    public commitSendMessagesToMids_args() {
    }

    public commitSendMessagesToMids_args(
      Vector requestIdList,
      Vector mids)
    {
      this();
      this.requestIdList = requestIdList;
      this.mids = mids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public commitSendMessagesToMids_args(commitSendMessagesToMids_args other) {
      if (other.isSetRequestIdList()) {
        Vector __this__requestIdList = new Vector();
        for (Enumeration other_enum = other.requestIdList.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__requestIdList.addElement(other_element);
        }
        this.requestIdList = __this__requestIdList;
      }
      if (other.isSetMids()) {
        Vector __this__mids = new Vector();
        for (Enumeration other_enum = other.mids.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__mids.addElement(other_element);
        }
        this.mids = __this__mids;
      }
    }

    public commitSendMessagesToMids_args deepCopy() {
      return new commitSendMessagesToMids_args(this);
    }

    public void clear() {
      this.requestIdList = null;
      this.mids = null;
    }

    public int getRequestIdListSize() {
      return (this.requestIdList == null) ? 0 : this.requestIdList.size();
    }

    public Enumeration getRequestIdListEnumeration() {
      return (this.requestIdList == null) ? null : this.requestIdList.elements();
    }

    public void addToRequestIdList(String elem) {
      if (this.requestIdList == null) {
        this.requestIdList = new Vector();
      }
      this.requestIdList.addElement(elem);
    }

    public Vector getRequestIdList() {
      return this.requestIdList;
    }

    public void setRequestIdList(Vector requestIdList) {
      this.requestIdList = requestIdList;
    }

    public void unsetRequestIdList() {
      this.requestIdList = null;
    }

    /** Returns true if field requestIdList is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestIdList() {
      return this.requestIdList != null;
    }

    public void setRequestIdListIsSet(boolean value) {
      if (!value) {
        this.requestIdList = null;
      }
    }

    public int getMidsSize() {
      return (this.mids == null) ? 0 : this.mids.size();
    }

    public Enumeration getMidsEnumeration() {
      return (this.mids == null) ? null : this.mids.elements();
    }

    public void addToMids(String elem) {
      if (this.mids == null) {
        this.mids = new Vector();
      }
      this.mids.addElement(elem);
    }

    public Vector getMids() {
      return this.mids;
    }

    public void setMids(Vector mids) {
      this.mids = mids;
    }

    public void unsetMids() {
      this.mids = null;
    }

    /** Returns true if field mids is set (has been assigned a value) and false otherwise */
    public boolean isSetMids() {
      return this.mids != null;
    }

    public void setMidsIsSet(boolean value) {
      if (!value) {
        this.mids = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof commitSendMessagesToMids_args)
        return this.equals((commitSendMessagesToMids_args)that);
      return false;
    }

    public boolean equals(commitSendMessagesToMids_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestIdList = true && this.isSetRequestIdList();
      boolean that_present_requestIdList = true && that.isSetRequestIdList();
      if (this_present_requestIdList || that_present_requestIdList) {
        if (!(this_present_requestIdList && that_present_requestIdList))
          return false;
        if (!this.requestIdList.equals(that.requestIdList))
          return false;
      }

      boolean this_present_mids = true && this.isSetMids();
      boolean that_present_mids = true && that.isSetMids();
      if (this_present_mids || that_present_mids) {
        if (!(this_present_mids && that_present_mids))
          return false;
        if (!this.mids.equals(that.mids))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      commitSendMessagesToMids_args other = (commitSendMessagesToMids_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestIdList(), other.isSetRequestIdList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestIdList()) {
        lastComparison = TBaseHelper.compareTo(this.requestIdList, other.requestIdList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMids(), other.isSetMids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMids()) {
        lastComparison = TBaseHelper.compareTo(this.mids, other.mids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID_LIST
            if (field.type == TType.LIST) {
              {
                TList _list562 = iprot.readListBegin();
                this.requestIdList = new Vector(_list562.size);
                for (int _i563 = 0; _i563 < _list562.size; ++_i563)
                {
                  String _elem564;
                  _elem564 = iprot.readString();
                  this.requestIdList.addElement(_elem564);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MIDS
            if (field.type == TType.LIST) {
              {
                TList _list565 = iprot.readListBegin();
                this.mids = new Vector(_list565.size);
                for (int _i566 = 0; _i566 < _list565.size; ++_i566)
                {
                  String _elem567;
                  _elem567 = iprot.readString();
                  this.mids.addElement(_elem567);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestIdList != null) {
        oprot.writeFieldBegin(REQUEST_ID_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.requestIdList.size()));
          for (Enumeration _iter568_enum = this.requestIdList.elements(); _iter568_enum.hasMoreElements(); )           {
            String _iter568 = (String)_iter568_enum.nextElement();
            oprot.writeString(_iter568);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (this.mids != null) {
        oprot.writeFieldBegin(MIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.mids.size()));
          for (Enumeration _iter569_enum = this.mids.elements(); _iter569_enum.hasMoreElements(); )           {
            String _iter569 = (String)_iter569_enum.nextElement();
            oprot.writeString(_iter569);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("commitSendMessagesToMids_args(");
      boolean first = true;

      sb.append("requestIdList:");
      if (this.requestIdList == null) {
        sb.append("null");
      } else {
        sb.append(this.requestIdList);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mids:");
      if (this.mids == null) {
        sb.append("null");
      } else {
        sb.append(this.mids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class commitSendMessagesToMids_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("commitSendMessagesToMids_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public commitSendMessagesToMids_result() {
    }

    public commitSendMessagesToMids_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public commitSendMessagesToMids_result(commitSendMessagesToMids_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          SendBuddyMessageResult other_element = (SendBuddyMessageResult)other_enum.nextElement();
          __this__success.addElement(new SendBuddyMessageResult(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public commitSendMessagesToMids_result deepCopy() {
      return new commitSendMessagesToMids_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(SendBuddyMessageResult elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof commitSendMessagesToMids_result)
        return this.equals((commitSendMessagesToMids_result)that);
      return false;
    }

    public boolean equals(commitSendMessagesToMids_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      commitSendMessagesToMids_result other = (commitSendMessagesToMids_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list570 = iprot.readListBegin();
                this.success = new Vector(_list570.size);
                for (int _i571 = 0; _i571 < _list570.size; ++_i571)
                {
                  SendBuddyMessageResult _elem572;
                  _elem572 = new SendBuddyMessageResult();
                  _elem572.read(iprot);
                  this.success.addElement(_elem572);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
          for (Enumeration _iter573_enum = this.success.elements(); _iter573_enum.hasMoreElements(); )           {
            SendBuddyMessageResult _iter573 = (SendBuddyMessageResult)_iter573_enum.nextElement();
            _iter573.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("commitSendMessagesToMids_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class containsBuddyMember_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("containsBuddyMember_args");

    private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);
    private static final TField USER_MID_FIELD_DESC = new TField("userMid", TType.STRING, (short)2);

    private String requestId;
    private String userMid;

    // isset id assignments

    public containsBuddyMember_args() {
    }

    public containsBuddyMember_args(
      String requestId,
      String userMid)
    {
      this();
      this.requestId = requestId;
      this.userMid = userMid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public containsBuddyMember_args(containsBuddyMember_args other) {
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
      if (other.isSetUserMid()) {
        this.userMid = other.userMid;
      }
    }

    public containsBuddyMember_args deepCopy() {
      return new containsBuddyMember_args(this);
    }

    public void clear() {
      this.requestId = null;
      this.userMid = null;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public void setRequestId(String requestId) {
      this.requestId = requestId;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public String getUserMid() {
      return this.userMid;
    }

    public void setUserMid(String userMid) {
      this.userMid = userMid;
    }

    public void unsetUserMid() {
      this.userMid = null;
    }

    /** Returns true if field userMid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserMid() {
      return this.userMid != null;
    }

    public void setUserMidIsSet(boolean value) {
      if (!value) {
        this.userMid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof containsBuddyMember_args)
        return this.equals((containsBuddyMember_args)that);
      return false;
    }

    public boolean equals(containsBuddyMember_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      boolean this_present_userMid = true && this.isSetUserMid();
      boolean that_present_userMid = true && that.isSetUserMid();
      if (this_present_userMid || that_present_userMid) {
        if (!(this_present_userMid && that_present_userMid))
          return false;
        if (!this.userMid.equals(that.userMid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      containsBuddyMember_args other = (containsBuddyMember_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserMid(), other.isSetUserMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserMid()) {
        lastComparison = TBaseHelper.compareTo(this.userMid, other.userMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USER_MID
            if (field.type == TType.STRING) {
              this.userMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      if (this.userMid != null) {
        oprot.writeFieldBegin(USER_MID_FIELD_DESC);
        oprot.writeString(this.userMid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("containsBuddyMember_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userMid:");
      if (this.userMid == null) {
        sb.append("null");
      } else {
        sb.append(this.userMid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class containsBuddyMember_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("containsBuddyMember_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private boolean success;
    private TalkException e;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public containsBuddyMember_result() {
    }

    public containsBuddyMember_result(
      boolean success,
      TalkException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public containsBuddyMember_result(containsBuddyMember_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public containsBuddyMember_result deepCopy() {
      return new containsBuddyMember_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof containsBuddyMember_result)
        return this.equals((containsBuddyMember_result)that);
      return false;
    }

    public boolean equals(containsBuddyMember_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      containsBuddyMember_result other = (containsBuddyMember_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("containsBuddyMember_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class downloadMessageContent_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("downloadMessageContent_args");

    private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);
    private static final TField MESSAGE_ID_FIELD_DESC = new TField("messageId", TType.STRING, (short)2);

    private String requestId;
    private String messageId;

    // isset id assignments

    public downloadMessageContent_args() {
    }

    public downloadMessageContent_args(
      String requestId,
      String messageId)
    {
      this();
      this.requestId = requestId;
      this.messageId = messageId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public downloadMessageContent_args(downloadMessageContent_args other) {
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
      if (other.isSetMessageId()) {
        this.messageId = other.messageId;
      }
    }

    public downloadMessageContent_args deepCopy() {
      return new downloadMessageContent_args(this);
    }

    public void clear() {
      this.requestId = null;
      this.messageId = null;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public void setRequestId(String requestId) {
      this.requestId = requestId;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public String getMessageId() {
      return this.messageId;
    }

    public void setMessageId(String messageId) {
      this.messageId = messageId;
    }

    public void unsetMessageId() {
      this.messageId = null;
    }

    /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageId() {
      return this.messageId != null;
    }

    public void setMessageIdIsSet(boolean value) {
      if (!value) {
        this.messageId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof downloadMessageContent_args)
        return this.equals((downloadMessageContent_args)that);
      return false;
    }

    public boolean equals(downloadMessageContent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      boolean this_present_messageId = true && this.isSetMessageId();
      boolean that_present_messageId = true && that.isSetMessageId();
      if (this_present_messageId || that_present_messageId) {
        if (!(this_present_messageId && that_present_messageId))
          return false;
        if (!this.messageId.equals(that.messageId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      downloadMessageContent_args other = (downloadMessageContent_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMessageId(), other.isSetMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageId()) {
        lastComparison = TBaseHelper.compareTo(this.messageId, other.messageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MESSAGE_ID
            if (field.type == TType.STRING) {
              this.messageId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      if (this.messageId != null) {
        oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
        oprot.writeString(this.messageId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("downloadMessageContent_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("messageId:");
      if (this.messageId == null) {
        sb.append("null");
      } else {
        sb.append(this.messageId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class downloadMessageContent_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("downloadMessageContent_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private byte[] success;
    private TalkException e;

    // isset id assignments

    public downloadMessageContent_result() {
    }

    public downloadMessageContent_result(
      byte[] success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public downloadMessageContent_result(downloadMessageContent_result other) {
      if (other.isSetSuccess()) {
        this.success = new byte[other.success.length];
        System.arraycopy(other.success, 0, success, 0, other.success.length);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public downloadMessageContent_result deepCopy() {
      return new downloadMessageContent_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public byte[] getSuccess() {
      return this.success;
    }

    public void setSuccess(byte[] success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof downloadMessageContent_result)
        return this.equals((downloadMessageContent_result)that);
      return false;
    }

    public boolean equals(downloadMessageContent_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (TBaseHelper.compareTo(this.success, that.success) != 0)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      downloadMessageContent_result other = (downloadMessageContent_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBinary(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("downloadMessageContent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.success, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class downloadMessageContentPreview_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("downloadMessageContentPreview_args");

    private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);
    private static final TField MESSAGE_ID_FIELD_DESC = new TField("messageId", TType.STRING, (short)2);

    private String requestId;
    private String messageId;

    // isset id assignments

    public downloadMessageContentPreview_args() {
    }

    public downloadMessageContentPreview_args(
      String requestId,
      String messageId)
    {
      this();
      this.requestId = requestId;
      this.messageId = messageId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public downloadMessageContentPreview_args(downloadMessageContentPreview_args other) {
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
      if (other.isSetMessageId()) {
        this.messageId = other.messageId;
      }
    }

    public downloadMessageContentPreview_args deepCopy() {
      return new downloadMessageContentPreview_args(this);
    }

    public void clear() {
      this.requestId = null;
      this.messageId = null;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public void setRequestId(String requestId) {
      this.requestId = requestId;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public String getMessageId() {
      return this.messageId;
    }

    public void setMessageId(String messageId) {
      this.messageId = messageId;
    }

    public void unsetMessageId() {
      this.messageId = null;
    }

    /** Returns true if field messageId is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageId() {
      return this.messageId != null;
    }

    public void setMessageIdIsSet(boolean value) {
      if (!value) {
        this.messageId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof downloadMessageContentPreview_args)
        return this.equals((downloadMessageContentPreview_args)that);
      return false;
    }

    public boolean equals(downloadMessageContentPreview_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      boolean this_present_messageId = true && this.isSetMessageId();
      boolean that_present_messageId = true && that.isSetMessageId();
      if (this_present_messageId || that_present_messageId) {
        if (!(this_present_messageId && that_present_messageId))
          return false;
        if (!this.messageId.equals(that.messageId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      downloadMessageContentPreview_args other = (downloadMessageContentPreview_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMessageId(), other.isSetMessageId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageId()) {
        lastComparison = TBaseHelper.compareTo(this.messageId, other.messageId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MESSAGE_ID
            if (field.type == TType.STRING) {
              this.messageId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      if (this.messageId != null) {
        oprot.writeFieldBegin(MESSAGE_ID_FIELD_DESC);
        oprot.writeString(this.messageId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("downloadMessageContentPreview_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("messageId:");
      if (this.messageId == null) {
        sb.append("null");
      } else {
        sb.append(this.messageId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class downloadMessageContentPreview_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("downloadMessageContentPreview_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private byte[] success;
    private TalkException e;

    // isset id assignments

    public downloadMessageContentPreview_result() {
    }

    public downloadMessageContentPreview_result(
      byte[] success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public downloadMessageContentPreview_result(downloadMessageContentPreview_result other) {
      if (other.isSetSuccess()) {
        this.success = new byte[other.success.length];
        System.arraycopy(other.success, 0, success, 0, other.success.length);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public downloadMessageContentPreview_result deepCopy() {
      return new downloadMessageContentPreview_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public byte[] getSuccess() {
      return this.success;
    }

    public void setSuccess(byte[] success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof downloadMessageContentPreview_result)
        return this.equals((downloadMessageContentPreview_result)that);
      return false;
    }

    public boolean equals(downloadMessageContentPreview_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (TBaseHelper.compareTo(this.success, that.success) != 0)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      downloadMessageContentPreview_result other = (downloadMessageContentPreview_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBinary(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("downloadMessageContentPreview_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.success, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class downloadProfileImage_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("downloadProfileImage_args");

    private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);

    private String requestId;

    // isset id assignments

    public downloadProfileImage_args() {
    }

    public downloadProfileImage_args(
      String requestId)
    {
      this();
      this.requestId = requestId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public downloadProfileImage_args(downloadProfileImage_args other) {
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
    }

    public downloadProfileImage_args deepCopy() {
      return new downloadProfileImage_args(this);
    }

    public void clear() {
      this.requestId = null;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public void setRequestId(String requestId) {
      this.requestId = requestId;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof downloadProfileImage_args)
        return this.equals((downloadProfileImage_args)that);
      return false;
    }

    public boolean equals(downloadProfileImage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      downloadProfileImage_args other = (downloadProfileImage_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("downloadProfileImage_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class downloadProfileImage_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("downloadProfileImage_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private byte[] success;
    private TalkException e;

    // isset id assignments

    public downloadProfileImage_result() {
    }

    public downloadProfileImage_result(
      byte[] success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public downloadProfileImage_result(downloadProfileImage_result other) {
      if (other.isSetSuccess()) {
        this.success = new byte[other.success.length];
        System.arraycopy(other.success, 0, success, 0, other.success.length);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public downloadProfileImage_result deepCopy() {
      return new downloadProfileImage_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public byte[] getSuccess() {
      return this.success;
    }

    public void setSuccess(byte[] success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof downloadProfileImage_result)
        return this.equals((downloadProfileImage_result)that);
      return false;
    }

    public boolean equals(downloadProfileImage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (TBaseHelper.compareTo(this.success, that.success) != 0)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      downloadProfileImage_result other = (downloadProfileImage_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBinary(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("downloadProfileImage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.success, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class downloadProfileImagePreview_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("downloadProfileImagePreview_args");

    private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);

    private String requestId;

    // isset id assignments

    public downloadProfileImagePreview_args() {
    }

    public downloadProfileImagePreview_args(
      String requestId)
    {
      this();
      this.requestId = requestId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public downloadProfileImagePreview_args(downloadProfileImagePreview_args other) {
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
    }

    public downloadProfileImagePreview_args deepCopy() {
      return new downloadProfileImagePreview_args(this);
    }

    public void clear() {
      this.requestId = null;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public void setRequestId(String requestId) {
      this.requestId = requestId;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof downloadProfileImagePreview_args)
        return this.equals((downloadProfileImagePreview_args)that);
      return false;
    }

    public boolean equals(downloadProfileImagePreview_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      downloadProfileImagePreview_args other = (downloadProfileImagePreview_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("downloadProfileImagePreview_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class downloadProfileImagePreview_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("downloadProfileImagePreview_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private byte[] success;
    private TalkException e;

    // isset id assignments

    public downloadProfileImagePreview_result() {
    }

    public downloadProfileImagePreview_result(
      byte[] success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public downloadProfileImagePreview_result(downloadProfileImagePreview_result other) {
      if (other.isSetSuccess()) {
        this.success = new byte[other.success.length];
        System.arraycopy(other.success, 0, success, 0, other.success.length);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public downloadProfileImagePreview_result deepCopy() {
      return new downloadProfileImagePreview_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public byte[] getSuccess() {
      return this.success;
    }

    public void setSuccess(byte[] success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof downloadProfileImagePreview_result)
        return this.equals((downloadProfileImagePreview_result)that);
      return false;
    }

    public boolean equals(downloadProfileImagePreview_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (TBaseHelper.compareTo(this.success, that.success) != 0)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      downloadProfileImagePreview_result other = (downloadProfileImagePreview_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBinary(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("downloadProfileImagePreview_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.success, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getActiveMemberCountByBuddyMid_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getActiveMemberCountByBuddyMid_args");

    private static final TField BUDDY_MID_FIELD_DESC = new TField("buddyMid", TType.STRING, (short)2);

    private String buddyMid;

    // isset id assignments

    public getActiveMemberCountByBuddyMid_args() {
    }

    public getActiveMemberCountByBuddyMid_args(
      String buddyMid)
    {
      this();
      this.buddyMid = buddyMid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getActiveMemberCountByBuddyMid_args(getActiveMemberCountByBuddyMid_args other) {
      if (other.isSetBuddyMid()) {
        this.buddyMid = other.buddyMid;
      }
    }

    public getActiveMemberCountByBuddyMid_args deepCopy() {
      return new getActiveMemberCountByBuddyMid_args(this);
    }

    public void clear() {
      this.buddyMid = null;
    }

    public String getBuddyMid() {
      return this.buddyMid;
    }

    public void setBuddyMid(String buddyMid) {
      this.buddyMid = buddyMid;
    }

    public void unsetBuddyMid() {
      this.buddyMid = null;
    }

    /** Returns true if field buddyMid is set (has been assigned a value) and false otherwise */
    public boolean isSetBuddyMid() {
      return this.buddyMid != null;
    }

    public void setBuddyMidIsSet(boolean value) {
      if (!value) {
        this.buddyMid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getActiveMemberCountByBuddyMid_args)
        return this.equals((getActiveMemberCountByBuddyMid_args)that);
      return false;
    }

    public boolean equals(getActiveMemberCountByBuddyMid_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_buddyMid = true && this.isSetBuddyMid();
      boolean that_present_buddyMid = true && that.isSetBuddyMid();
      if (this_present_buddyMid || that_present_buddyMid) {
        if (!(this_present_buddyMid && that_present_buddyMid))
          return false;
        if (!this.buddyMid.equals(that.buddyMid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getActiveMemberCountByBuddyMid_args other = (getActiveMemberCountByBuddyMid_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetBuddyMid(), other.isSetBuddyMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBuddyMid()) {
        lastComparison = TBaseHelper.compareTo(this.buddyMid, other.buddyMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // BUDDY_MID
            if (field.type == TType.STRING) {
              this.buddyMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.buddyMid != null) {
        oprot.writeFieldBegin(BUDDY_MID_FIELD_DESC);
        oprot.writeString(this.buddyMid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getActiveMemberCountByBuddyMid_args(");
      boolean first = true;

      sb.append("buddyMid:");
      if (this.buddyMid == null) {
        sb.append("null");
      } else {
        sb.append(this.buddyMid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getActiveMemberCountByBuddyMid_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getActiveMemberCountByBuddyMid_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I64, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private long success;
    private TalkException e;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getActiveMemberCountByBuddyMid_result() {
    }

    public getActiveMemberCountByBuddyMid_result(
      long success,
      TalkException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getActiveMemberCountByBuddyMid_result(getActiveMemberCountByBuddyMid_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getActiveMemberCountByBuddyMid_result deepCopy() {
      return new getActiveMemberCountByBuddyMid_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public void setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getActiveMemberCountByBuddyMid_result)
        return this.equals((getActiveMemberCountByBuddyMid_result)that);
      return false;
    }

    public boolean equals(getActiveMemberCountByBuddyMid_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getActiveMemberCountByBuddyMid_result other = (getActiveMemberCountByBuddyMid_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getActiveMemberCountByBuddyMid_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getActiveMemberMidsByBuddyMid_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getActiveMemberMidsByBuddyMid_args");

    private static final TField BUDDY_MID_FIELD_DESC = new TField("buddyMid", TType.STRING, (short)2);

    private String buddyMid;

    // isset id assignments

    public getActiveMemberMidsByBuddyMid_args() {
    }

    public getActiveMemberMidsByBuddyMid_args(
      String buddyMid)
    {
      this();
      this.buddyMid = buddyMid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getActiveMemberMidsByBuddyMid_args(getActiveMemberMidsByBuddyMid_args other) {
      if (other.isSetBuddyMid()) {
        this.buddyMid = other.buddyMid;
      }
    }

    public getActiveMemberMidsByBuddyMid_args deepCopy() {
      return new getActiveMemberMidsByBuddyMid_args(this);
    }

    public void clear() {
      this.buddyMid = null;
    }

    public String getBuddyMid() {
      return this.buddyMid;
    }

    public void setBuddyMid(String buddyMid) {
      this.buddyMid = buddyMid;
    }

    public void unsetBuddyMid() {
      this.buddyMid = null;
    }

    /** Returns true if field buddyMid is set (has been assigned a value) and false otherwise */
    public boolean isSetBuddyMid() {
      return this.buddyMid != null;
    }

    public void setBuddyMidIsSet(boolean value) {
      if (!value) {
        this.buddyMid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getActiveMemberMidsByBuddyMid_args)
        return this.equals((getActiveMemberMidsByBuddyMid_args)that);
      return false;
    }

    public boolean equals(getActiveMemberMidsByBuddyMid_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_buddyMid = true && this.isSetBuddyMid();
      boolean that_present_buddyMid = true && that.isSetBuddyMid();
      if (this_present_buddyMid || that_present_buddyMid) {
        if (!(this_present_buddyMid && that_present_buddyMid))
          return false;
        if (!this.buddyMid.equals(that.buddyMid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getActiveMemberMidsByBuddyMid_args other = (getActiveMemberMidsByBuddyMid_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetBuddyMid(), other.isSetBuddyMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBuddyMid()) {
        lastComparison = TBaseHelper.compareTo(this.buddyMid, other.buddyMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // BUDDY_MID
            if (field.type == TType.STRING) {
              this.buddyMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.buddyMid != null) {
        oprot.writeFieldBegin(BUDDY_MID_FIELD_DESC);
        oprot.writeString(this.buddyMid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getActiveMemberMidsByBuddyMid_args(");
      boolean first = true;

      sb.append("buddyMid:");
      if (this.buddyMid == null) {
        sb.append("null");
      } else {
        sb.append(this.buddyMid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getActiveMemberMidsByBuddyMid_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getActiveMemberMidsByBuddyMid_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getActiveMemberMidsByBuddyMid_result() {
    }

    public getActiveMemberMidsByBuddyMid_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getActiveMemberMidsByBuddyMid_result(getActiveMemberMidsByBuddyMid_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getActiveMemberMidsByBuddyMid_result deepCopy() {
      return new getActiveMemberMidsByBuddyMid_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getActiveMemberMidsByBuddyMid_result)
        return this.equals((getActiveMemberMidsByBuddyMid_result)that);
      return false;
    }

    public boolean equals(getActiveMemberMidsByBuddyMid_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getActiveMemberMidsByBuddyMid_result other = (getActiveMemberMidsByBuddyMid_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list574 = iprot.readListBegin();
                this.success = new Vector(_list574.size);
                for (int _i575 = 0; _i575 < _list574.size; ++_i575)
                {
                  String _elem576;
                  _elem576 = iprot.readString();
                  this.success.addElement(_elem576);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter577_enum = this.success.elements(); _iter577_enum.hasMoreElements(); )           {
            String _iter577 = (String)_iter577_enum.nextElement();
            oprot.writeString(_iter577);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getActiveMemberMidsByBuddyMid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getAllBuddyMembers_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getAllBuddyMembers_args");


    public getAllBuddyMembers_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllBuddyMembers_args(getAllBuddyMembers_args other) {
    }

    public getAllBuddyMembers_args deepCopy() {
      return new getAllBuddyMembers_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllBuddyMembers_args)
        return this.equals((getAllBuddyMembers_args)that);
      return false;
    }

    public boolean equals(getAllBuddyMembers_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getAllBuddyMembers_args other = (getAllBuddyMembers_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getAllBuddyMembers_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getAllBuddyMembers_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getAllBuddyMembers_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getAllBuddyMembers_result() {
    }

    public getAllBuddyMembers_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllBuddyMembers_result(getAllBuddyMembers_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getAllBuddyMembers_result deepCopy() {
      return new getAllBuddyMembers_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllBuddyMembers_result)
        return this.equals((getAllBuddyMembers_result)that);
      return false;
    }

    public boolean equals(getAllBuddyMembers_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getAllBuddyMembers_result other = (getAllBuddyMembers_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list578 = iprot.readListBegin();
                this.success = new Vector(_list578.size);
                for (int _i579 = 0; _i579 < _list578.size; ++_i579)
                {
                  String _elem580;
                  _elem580 = iprot.readString();
                  this.success.addElement(_elem580);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter581_enum = this.success.elements(); _iter581_enum.hasMoreElements(); )           {
            String _iter581 = (String)_iter581_enum.nextElement();
            oprot.writeString(_iter581);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getAllBuddyMembers_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getBlockedBuddyMembers_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getBlockedBuddyMembers_args");


    public getBlockedBuddyMembers_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBlockedBuddyMembers_args(getBlockedBuddyMembers_args other) {
    }

    public getBlockedBuddyMembers_args deepCopy() {
      return new getBlockedBuddyMembers_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBlockedBuddyMembers_args)
        return this.equals((getBlockedBuddyMembers_args)that);
      return false;
    }

    public boolean equals(getBlockedBuddyMembers_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getBlockedBuddyMembers_args other = (getBlockedBuddyMembers_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getBlockedBuddyMembers_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getBlockedBuddyMembers_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getBlockedBuddyMembers_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.LIST, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Vector success;
    private TalkException e;

    // isset id assignments

    public getBlockedBuddyMembers_result() {
    }

    public getBlockedBuddyMembers_result(
      Vector success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBlockedBuddyMembers_result(getBlockedBuddyMembers_result other) {
      if (other.isSetSuccess()) {
        Vector __this__success = new Vector();
        for (Enumeration other_enum = other.success.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__success.addElement(other_element);
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getBlockedBuddyMembers_result deepCopy() {
      return new getBlockedBuddyMembers_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public Enumeration getSuccessEnumeration() {
      return (this.success == null) ? null : this.success.elements();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new Vector();
      }
      this.success.addElement(elem);
    }

    public Vector getSuccess() {
      return this.success;
    }

    public void setSuccess(Vector success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBlockedBuddyMembers_result)
        return this.equals((getBlockedBuddyMembers_result)that);
      return false;
    }

    public boolean equals(getBlockedBuddyMembers_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getBlockedBuddyMembers_result other = (getBlockedBuddyMembers_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.LIST) {
              {
                TList _list582 = iprot.readListBegin();
                this.success = new Vector(_list582.size);
                for (int _i583 = 0; _i583 < _list582.size; ++_i583)
                {
                  String _elem584;
                  _elem584 = iprot.readString();
                  this.success.addElement(_elem584);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
          for (Enumeration _iter585_enum = this.success.elements(); _iter585_enum.hasMoreElements(); )           {
            String _iter585 = (String)_iter585_enum.nextElement();
            oprot.writeString(_iter585);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getBlockedBuddyMembers_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getBlockerCountByBuddyMid_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getBlockerCountByBuddyMid_args");

    private static final TField BUDDY_MID_FIELD_DESC = new TField("buddyMid", TType.STRING, (short)2);

    private String buddyMid;

    // isset id assignments

    public getBlockerCountByBuddyMid_args() {
    }

    public getBlockerCountByBuddyMid_args(
      String buddyMid)
    {
      this();
      this.buddyMid = buddyMid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBlockerCountByBuddyMid_args(getBlockerCountByBuddyMid_args other) {
      if (other.isSetBuddyMid()) {
        this.buddyMid = other.buddyMid;
      }
    }

    public getBlockerCountByBuddyMid_args deepCopy() {
      return new getBlockerCountByBuddyMid_args(this);
    }

    public void clear() {
      this.buddyMid = null;
    }

    public String getBuddyMid() {
      return this.buddyMid;
    }

    public void setBuddyMid(String buddyMid) {
      this.buddyMid = buddyMid;
    }

    public void unsetBuddyMid() {
      this.buddyMid = null;
    }

    /** Returns true if field buddyMid is set (has been assigned a value) and false otherwise */
    public boolean isSetBuddyMid() {
      return this.buddyMid != null;
    }

    public void setBuddyMidIsSet(boolean value) {
      if (!value) {
        this.buddyMid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBlockerCountByBuddyMid_args)
        return this.equals((getBlockerCountByBuddyMid_args)that);
      return false;
    }

    public boolean equals(getBlockerCountByBuddyMid_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_buddyMid = true && this.isSetBuddyMid();
      boolean that_present_buddyMid = true && that.isSetBuddyMid();
      if (this_present_buddyMid || that_present_buddyMid) {
        if (!(this_present_buddyMid && that_present_buddyMid))
          return false;
        if (!this.buddyMid.equals(that.buddyMid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getBlockerCountByBuddyMid_args other = (getBlockerCountByBuddyMid_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetBuddyMid(), other.isSetBuddyMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBuddyMid()) {
        lastComparison = TBaseHelper.compareTo(this.buddyMid, other.buddyMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // BUDDY_MID
            if (field.type == TType.STRING) {
              this.buddyMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.buddyMid != null) {
        oprot.writeFieldBegin(BUDDY_MID_FIELD_DESC);
        oprot.writeString(this.buddyMid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getBlockerCountByBuddyMid_args(");
      boolean first = true;

      sb.append("buddyMid:");
      if (this.buddyMid == null) {
        sb.append("null");
      } else {
        sb.append(this.buddyMid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getBlockerCountByBuddyMid_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getBlockerCountByBuddyMid_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I64, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private long success;
    private TalkException e;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getBlockerCountByBuddyMid_result() {
    }

    public getBlockerCountByBuddyMid_result(
      long success,
      TalkException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBlockerCountByBuddyMid_result(getBlockerCountByBuddyMid_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getBlockerCountByBuddyMid_result deepCopy() {
      return new getBlockerCountByBuddyMid_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public void setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBlockerCountByBuddyMid_result)
        return this.equals((getBlockerCountByBuddyMid_result)that);
      return false;
    }

    public boolean equals(getBlockerCountByBuddyMid_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getBlockerCountByBuddyMid_result other = (getBlockerCountByBuddyMid_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getBlockerCountByBuddyMid_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getBuddyDetailByMid_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getBuddyDetailByMid_args");

    private static final TField BUDDY_MID_FIELD_DESC = new TField("buddyMid", TType.STRING, (short)2);

    private String buddyMid;

    // isset id assignments

    public getBuddyDetailByMid_args() {
    }

    public getBuddyDetailByMid_args(
      String buddyMid)
    {
      this();
      this.buddyMid = buddyMid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBuddyDetailByMid_args(getBuddyDetailByMid_args other) {
      if (other.isSetBuddyMid()) {
        this.buddyMid = other.buddyMid;
      }
    }

    public getBuddyDetailByMid_args deepCopy() {
      return new getBuddyDetailByMid_args(this);
    }

    public void clear() {
      this.buddyMid = null;
    }

    public String getBuddyMid() {
      return this.buddyMid;
    }

    public void setBuddyMid(String buddyMid) {
      this.buddyMid = buddyMid;
    }

    public void unsetBuddyMid() {
      this.buddyMid = null;
    }

    /** Returns true if field buddyMid is set (has been assigned a value) and false otherwise */
    public boolean isSetBuddyMid() {
      return this.buddyMid != null;
    }

    public void setBuddyMidIsSet(boolean value) {
      if (!value) {
        this.buddyMid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBuddyDetailByMid_args)
        return this.equals((getBuddyDetailByMid_args)that);
      return false;
    }

    public boolean equals(getBuddyDetailByMid_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_buddyMid = true && this.isSetBuddyMid();
      boolean that_present_buddyMid = true && that.isSetBuddyMid();
      if (this_present_buddyMid || that_present_buddyMid) {
        if (!(this_present_buddyMid && that_present_buddyMid))
          return false;
        if (!this.buddyMid.equals(that.buddyMid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getBuddyDetailByMid_args other = (getBuddyDetailByMid_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetBuddyMid(), other.isSetBuddyMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBuddyMid()) {
        lastComparison = TBaseHelper.compareTo(this.buddyMid, other.buddyMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // BUDDY_MID
            if (field.type == TType.STRING) {
              this.buddyMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.buddyMid != null) {
        oprot.writeFieldBegin(BUDDY_MID_FIELD_DESC);
        oprot.writeString(this.buddyMid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getBuddyDetailByMid_args(");
      boolean first = true;

      sb.append("buddyMid:");
      if (this.buddyMid == null) {
        sb.append("null");
      } else {
        sb.append(this.buddyMid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getBuddyDetailByMid_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getBuddyDetailByMid_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private BuddyDetail success;
    private TalkException e;

    // isset id assignments

    public getBuddyDetailByMid_result() {
    }

    public getBuddyDetailByMid_result(
      BuddyDetail success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBuddyDetailByMid_result(getBuddyDetailByMid_result other) {
      if (other.isSetSuccess()) {
        this.success = new BuddyDetail(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getBuddyDetailByMid_result deepCopy() {
      return new getBuddyDetailByMid_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public BuddyDetail getSuccess() {
      return this.success;
    }

    public void setSuccess(BuddyDetail success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBuddyDetailByMid_result)
        return this.equals((getBuddyDetailByMid_result)that);
      return false;
    }

    public boolean equals(getBuddyDetailByMid_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getBuddyDetailByMid_result other = (getBuddyDetailByMid_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new BuddyDetail();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getBuddyDetailByMid_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getBuddyProfile_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getBuddyProfile_args");


    public getBuddyProfile_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBuddyProfile_args(getBuddyProfile_args other) {
    }

    public getBuddyProfile_args deepCopy() {
      return new getBuddyProfile_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBuddyProfile_args)
        return this.equals((getBuddyProfile_args)that);
      return false;
    }

    public boolean equals(getBuddyProfile_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getBuddyProfile_args other = (getBuddyProfile_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getBuddyProfile_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getBuddyProfile_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getBuddyProfile_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private BuddyProfile success;
    private TalkException e;

    // isset id assignments

    public getBuddyProfile_result() {
    }

    public getBuddyProfile_result(
      BuddyProfile success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBuddyProfile_result(getBuddyProfile_result other) {
      if (other.isSetSuccess()) {
        this.success = new BuddyProfile(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getBuddyProfile_result deepCopy() {
      return new getBuddyProfile_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public BuddyProfile getSuccess() {
      return this.success;
    }

    public void setSuccess(BuddyProfile success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBuddyProfile_result)
        return this.equals((getBuddyProfile_result)that);
      return false;
    }

    public boolean equals(getBuddyProfile_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getBuddyProfile_result other = (getBuddyProfile_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new BuddyProfile();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getBuddyProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getContactTicket_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getContactTicket_args");


    public getContactTicket_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getContactTicket_args(getContactTicket_args other) {
    }

    public getContactTicket_args deepCopy() {
      return new getContactTicket_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getContactTicket_args)
        return this.equals((getContactTicket_args)that);
      return false;
    }

    public boolean equals(getContactTicket_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getContactTicket_args other = (getContactTicket_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getContactTicket_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getContactTicket_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getContactTicket_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private Ticket success;
    private TalkException e;

    // isset id assignments

    public getContactTicket_result() {
    }

    public getContactTicket_result(
      Ticket success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getContactTicket_result(getContactTicket_result other) {
      if (other.isSetSuccess()) {
        this.success = new Ticket(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getContactTicket_result deepCopy() {
      return new getContactTicket_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public Ticket getSuccess() {
      return this.success;
    }

    public void setSuccess(Ticket success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getContactTicket_result)
        return this.equals((getContactTicket_result)that);
      return false;
    }

    public boolean equals(getContactTicket_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getContactTicket_result other = (getContactTicket_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new Ticket();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getContactTicket_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getMemberCountByBuddyMid_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getMemberCountByBuddyMid_args");

    private static final TField BUDDY_MID_FIELD_DESC = new TField("buddyMid", TType.STRING, (short)2);

    private String buddyMid;

    // isset id assignments

    public getMemberCountByBuddyMid_args() {
    }

    public getMemberCountByBuddyMid_args(
      String buddyMid)
    {
      this();
      this.buddyMid = buddyMid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMemberCountByBuddyMid_args(getMemberCountByBuddyMid_args other) {
      if (other.isSetBuddyMid()) {
        this.buddyMid = other.buddyMid;
      }
    }

    public getMemberCountByBuddyMid_args deepCopy() {
      return new getMemberCountByBuddyMid_args(this);
    }

    public void clear() {
      this.buddyMid = null;
    }

    public String getBuddyMid() {
      return this.buddyMid;
    }

    public void setBuddyMid(String buddyMid) {
      this.buddyMid = buddyMid;
    }

    public void unsetBuddyMid() {
      this.buddyMid = null;
    }

    /** Returns true if field buddyMid is set (has been assigned a value) and false otherwise */
    public boolean isSetBuddyMid() {
      return this.buddyMid != null;
    }

    public void setBuddyMidIsSet(boolean value) {
      if (!value) {
        this.buddyMid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMemberCountByBuddyMid_args)
        return this.equals((getMemberCountByBuddyMid_args)that);
      return false;
    }

    public boolean equals(getMemberCountByBuddyMid_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_buddyMid = true && this.isSetBuddyMid();
      boolean that_present_buddyMid = true && that.isSetBuddyMid();
      if (this_present_buddyMid || that_present_buddyMid) {
        if (!(this_present_buddyMid && that_present_buddyMid))
          return false;
        if (!this.buddyMid.equals(that.buddyMid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getMemberCountByBuddyMid_args other = (getMemberCountByBuddyMid_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetBuddyMid(), other.isSetBuddyMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBuddyMid()) {
        lastComparison = TBaseHelper.compareTo(this.buddyMid, other.buddyMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // BUDDY_MID
            if (field.type == TType.STRING) {
              this.buddyMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.buddyMid != null) {
        oprot.writeFieldBegin(BUDDY_MID_FIELD_DESC);
        oprot.writeString(this.buddyMid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getMemberCountByBuddyMid_args(");
      boolean first = true;

      sb.append("buddyMid:");
      if (this.buddyMid == null) {
        sb.append("null");
      } else {
        sb.append(this.buddyMid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getMemberCountByBuddyMid_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getMemberCountByBuddyMid_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.I64, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private long success;
    private TalkException e;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public getMemberCountByBuddyMid_result() {
    }

    public getMemberCountByBuddyMid_result(
      long success,
      TalkException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMemberCountByBuddyMid_result(getMemberCountByBuddyMid_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getMemberCountByBuddyMid_result deepCopy() {
      return new getMemberCountByBuddyMid_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public void setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMemberCountByBuddyMid_result)
        return this.equals((getMemberCountByBuddyMid_result)that);
      return false;
    }

    public boolean equals(getMemberCountByBuddyMid_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getMemberCountByBuddyMid_result other = (getMemberCountByBuddyMid_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.I64) {
              this.success = iprot.readI64();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeI64(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getMemberCountByBuddyMid_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSendBuddyMessageResult_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getSendBuddyMessageResult_args");

    private static final TField SEND_BUDDY_MESSAGE_REQUEST_ID_FIELD_DESC = new TField("sendBuddyMessageRequestId", TType.STRING, (short)1);

    private String sendBuddyMessageRequestId;

    // isset id assignments

    public getSendBuddyMessageResult_args() {
    }

    public getSendBuddyMessageResult_args(
      String sendBuddyMessageRequestId)
    {
      this();
      this.sendBuddyMessageRequestId = sendBuddyMessageRequestId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSendBuddyMessageResult_args(getSendBuddyMessageResult_args other) {
      if (other.isSetSendBuddyMessageRequestId()) {
        this.sendBuddyMessageRequestId = other.sendBuddyMessageRequestId;
      }
    }

    public getSendBuddyMessageResult_args deepCopy() {
      return new getSendBuddyMessageResult_args(this);
    }

    public void clear() {
      this.sendBuddyMessageRequestId = null;
    }

    public String getSendBuddyMessageRequestId() {
      return this.sendBuddyMessageRequestId;
    }

    public void setSendBuddyMessageRequestId(String sendBuddyMessageRequestId) {
      this.sendBuddyMessageRequestId = sendBuddyMessageRequestId;
    }

    public void unsetSendBuddyMessageRequestId() {
      this.sendBuddyMessageRequestId = null;
    }

    /** Returns true if field sendBuddyMessageRequestId is set (has been assigned a value) and false otherwise */
    public boolean isSetSendBuddyMessageRequestId() {
      return this.sendBuddyMessageRequestId != null;
    }

    public void setSendBuddyMessageRequestIdIsSet(boolean value) {
      if (!value) {
        this.sendBuddyMessageRequestId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSendBuddyMessageResult_args)
        return this.equals((getSendBuddyMessageResult_args)that);
      return false;
    }

    public boolean equals(getSendBuddyMessageResult_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sendBuddyMessageRequestId = true && this.isSetSendBuddyMessageRequestId();
      boolean that_present_sendBuddyMessageRequestId = true && that.isSetSendBuddyMessageRequestId();
      if (this_present_sendBuddyMessageRequestId || that_present_sendBuddyMessageRequestId) {
        if (!(this_present_sendBuddyMessageRequestId && that_present_sendBuddyMessageRequestId))
          return false;
        if (!this.sendBuddyMessageRequestId.equals(that.sendBuddyMessageRequestId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getSendBuddyMessageResult_args other = (getSendBuddyMessageResult_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSendBuddyMessageRequestId(), other.isSetSendBuddyMessageRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSendBuddyMessageRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.sendBuddyMessageRequestId, other.sendBuddyMessageRequestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SEND_BUDDY_MESSAGE_REQUEST_ID
            if (field.type == TType.STRING) {
              this.sendBuddyMessageRequestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.sendBuddyMessageRequestId != null) {
        oprot.writeFieldBegin(SEND_BUDDY_MESSAGE_REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.sendBuddyMessageRequestId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getSendBuddyMessageResult_args(");
      boolean first = true;

      sb.append("sendBuddyMessageRequestId:");
      if (this.sendBuddyMessageRequestId == null) {
        sb.append("null");
      } else {
        sb.append(this.sendBuddyMessageRequestId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSendBuddyMessageResult_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getSendBuddyMessageResult_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private SendBuddyMessageResult success;
    private TalkException e;

    // isset id assignments

    public getSendBuddyMessageResult_result() {
    }

    public getSendBuddyMessageResult_result(
      SendBuddyMessageResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSendBuddyMessageResult_result(getSendBuddyMessageResult_result other) {
      if (other.isSetSuccess()) {
        this.success = new SendBuddyMessageResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getSendBuddyMessageResult_result deepCopy() {
      return new getSendBuddyMessageResult_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public SendBuddyMessageResult getSuccess() {
      return this.success;
    }

    public void setSuccess(SendBuddyMessageResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSendBuddyMessageResult_result)
        return this.equals((getSendBuddyMessageResult_result)that);
      return false;
    }

    public boolean equals(getSendBuddyMessageResult_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getSendBuddyMessageResult_result other = (getSendBuddyMessageResult_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new SendBuddyMessageResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getSendBuddyMessageResult_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSetBuddyOnAirResult_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getSetBuddyOnAirResult_args");

    private static final TField SET_BUDDY_ON_AIR_REQUEST_ID_FIELD_DESC = new TField("setBuddyOnAirRequestId", TType.STRING, (short)1);

    private String setBuddyOnAirRequestId;

    // isset id assignments

    public getSetBuddyOnAirResult_args() {
    }

    public getSetBuddyOnAirResult_args(
      String setBuddyOnAirRequestId)
    {
      this();
      this.setBuddyOnAirRequestId = setBuddyOnAirRequestId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSetBuddyOnAirResult_args(getSetBuddyOnAirResult_args other) {
      if (other.isSetSetBuddyOnAirRequestId()) {
        this.setBuddyOnAirRequestId = other.setBuddyOnAirRequestId;
      }
    }

    public getSetBuddyOnAirResult_args deepCopy() {
      return new getSetBuddyOnAirResult_args(this);
    }

    public void clear() {
      this.setBuddyOnAirRequestId = null;
    }

    public String getSetBuddyOnAirRequestId() {
      return this.setBuddyOnAirRequestId;
    }

    public void setSetBuddyOnAirRequestId(String setBuddyOnAirRequestId) {
      this.setBuddyOnAirRequestId = setBuddyOnAirRequestId;
    }

    public void unsetSetBuddyOnAirRequestId() {
      this.setBuddyOnAirRequestId = null;
    }

    /** Returns true if field setBuddyOnAirRequestId is set (has been assigned a value) and false otherwise */
    public boolean isSetSetBuddyOnAirRequestId() {
      return this.setBuddyOnAirRequestId != null;
    }

    public void setSetBuddyOnAirRequestIdIsSet(boolean value) {
      if (!value) {
        this.setBuddyOnAirRequestId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSetBuddyOnAirResult_args)
        return this.equals((getSetBuddyOnAirResult_args)that);
      return false;
    }

    public boolean equals(getSetBuddyOnAirResult_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_setBuddyOnAirRequestId = true && this.isSetSetBuddyOnAirRequestId();
      boolean that_present_setBuddyOnAirRequestId = true && that.isSetSetBuddyOnAirRequestId();
      if (this_present_setBuddyOnAirRequestId || that_present_setBuddyOnAirRequestId) {
        if (!(this_present_setBuddyOnAirRequestId && that_present_setBuddyOnAirRequestId))
          return false;
        if (!this.setBuddyOnAirRequestId.equals(that.setBuddyOnAirRequestId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getSetBuddyOnAirResult_args other = (getSetBuddyOnAirResult_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSetBuddyOnAirRequestId(), other.isSetSetBuddyOnAirRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSetBuddyOnAirRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.setBuddyOnAirRequestId, other.setBuddyOnAirRequestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SET_BUDDY_ON_AIR_REQUEST_ID
            if (field.type == TType.STRING) {
              this.setBuddyOnAirRequestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.setBuddyOnAirRequestId != null) {
        oprot.writeFieldBegin(SET_BUDDY_ON_AIR_REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.setBuddyOnAirRequestId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getSetBuddyOnAirResult_args(");
      boolean first = true;

      sb.append("setBuddyOnAirRequestId:");
      if (this.setBuddyOnAirRequestId == null) {
        sb.append("null");
      } else {
        sb.append(this.setBuddyOnAirRequestId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getSetBuddyOnAirResult_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getSetBuddyOnAirResult_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private SetBuddyOnAirResult success;
    private TalkException e;

    // isset id assignments

    public getSetBuddyOnAirResult_result() {
    }

    public getSetBuddyOnAirResult_result(
      SetBuddyOnAirResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSetBuddyOnAirResult_result(getSetBuddyOnAirResult_result other) {
      if (other.isSetSuccess()) {
        this.success = new SetBuddyOnAirResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getSetBuddyOnAirResult_result deepCopy() {
      return new getSetBuddyOnAirResult_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public SetBuddyOnAirResult getSuccess() {
      return this.success;
    }

    public void setSuccess(SetBuddyOnAirResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getSetBuddyOnAirResult_result)
        return this.equals((getSetBuddyOnAirResult_result)that);
      return false;
    }

    public boolean equals(getSetBuddyOnAirResult_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getSetBuddyOnAirResult_result other = (getSetBuddyOnAirResult_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new SetBuddyOnAirResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getSetBuddyOnAirResult_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUpdateBuddyProfileResult_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUpdateBuddyProfileResult_args");

    private static final TField UPDATE_BUDDY_PROFILE_REQUEST_ID_FIELD_DESC = new TField("updateBuddyProfileRequestId", TType.STRING, (short)1);

    private String updateBuddyProfileRequestId;

    // isset id assignments

    public getUpdateBuddyProfileResult_args() {
    }

    public getUpdateBuddyProfileResult_args(
      String updateBuddyProfileRequestId)
    {
      this();
      this.updateBuddyProfileRequestId = updateBuddyProfileRequestId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUpdateBuddyProfileResult_args(getUpdateBuddyProfileResult_args other) {
      if (other.isSetUpdateBuddyProfileRequestId()) {
        this.updateBuddyProfileRequestId = other.updateBuddyProfileRequestId;
      }
    }

    public getUpdateBuddyProfileResult_args deepCopy() {
      return new getUpdateBuddyProfileResult_args(this);
    }

    public void clear() {
      this.updateBuddyProfileRequestId = null;
    }

    public String getUpdateBuddyProfileRequestId() {
      return this.updateBuddyProfileRequestId;
    }

    public void setUpdateBuddyProfileRequestId(String updateBuddyProfileRequestId) {
      this.updateBuddyProfileRequestId = updateBuddyProfileRequestId;
    }

    public void unsetUpdateBuddyProfileRequestId() {
      this.updateBuddyProfileRequestId = null;
    }

    /** Returns true if field updateBuddyProfileRequestId is set (has been assigned a value) and false otherwise */
    public boolean isSetUpdateBuddyProfileRequestId() {
      return this.updateBuddyProfileRequestId != null;
    }

    public void setUpdateBuddyProfileRequestIdIsSet(boolean value) {
      if (!value) {
        this.updateBuddyProfileRequestId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUpdateBuddyProfileResult_args)
        return this.equals((getUpdateBuddyProfileResult_args)that);
      return false;
    }

    public boolean equals(getUpdateBuddyProfileResult_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_updateBuddyProfileRequestId = true && this.isSetUpdateBuddyProfileRequestId();
      boolean that_present_updateBuddyProfileRequestId = true && that.isSetUpdateBuddyProfileRequestId();
      if (this_present_updateBuddyProfileRequestId || that_present_updateBuddyProfileRequestId) {
        if (!(this_present_updateBuddyProfileRequestId && that_present_updateBuddyProfileRequestId))
          return false;
        if (!this.updateBuddyProfileRequestId.equals(that.updateBuddyProfileRequestId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUpdateBuddyProfileResult_args other = (getUpdateBuddyProfileResult_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetUpdateBuddyProfileRequestId(), other.isSetUpdateBuddyProfileRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpdateBuddyProfileRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.updateBuddyProfileRequestId, other.updateBuddyProfileRequestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // UPDATE_BUDDY_PROFILE_REQUEST_ID
            if (field.type == TType.STRING) {
              this.updateBuddyProfileRequestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.updateBuddyProfileRequestId != null) {
        oprot.writeFieldBegin(UPDATE_BUDDY_PROFILE_REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.updateBuddyProfileRequestId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUpdateBuddyProfileResult_args(");
      boolean first = true;

      sb.append("updateBuddyProfileRequestId:");
      if (this.updateBuddyProfileRequestId == null) {
        sb.append("null");
      } else {
        sb.append(this.updateBuddyProfileRequestId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getUpdateBuddyProfileResult_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getUpdateBuddyProfileResult_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private UpdateBuddyProfileResult success;
    private TalkException e;

    // isset id assignments

    public getUpdateBuddyProfileResult_result() {
    }

    public getUpdateBuddyProfileResult_result(
      UpdateBuddyProfileResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUpdateBuddyProfileResult_result(getUpdateBuddyProfileResult_result other) {
      if (other.isSetSuccess()) {
        this.success = new UpdateBuddyProfileResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getUpdateBuddyProfileResult_result deepCopy() {
      return new getUpdateBuddyProfileResult_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public UpdateBuddyProfileResult getSuccess() {
      return this.success;
    }

    public void setSuccess(UpdateBuddyProfileResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUpdateBuddyProfileResult_result)
        return this.equals((getUpdateBuddyProfileResult_result)that);
      return false;
    }

    public boolean equals(getUpdateBuddyProfileResult_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getUpdateBuddyProfileResult_result other = (getUpdateBuddyProfileResult_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new UpdateBuddyProfileResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getUpdateBuddyProfileResult_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class isBuddyOnAirByMid_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("isBuddyOnAirByMid_args");

    private static final TField BUDDY_MID_FIELD_DESC = new TField("buddyMid", TType.STRING, (short)2);

    private String buddyMid;

    // isset id assignments

    public isBuddyOnAirByMid_args() {
    }

    public isBuddyOnAirByMid_args(
      String buddyMid)
    {
      this();
      this.buddyMid = buddyMid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isBuddyOnAirByMid_args(isBuddyOnAirByMid_args other) {
      if (other.isSetBuddyMid()) {
        this.buddyMid = other.buddyMid;
      }
    }

    public isBuddyOnAirByMid_args deepCopy() {
      return new isBuddyOnAirByMid_args(this);
    }

    public void clear() {
      this.buddyMid = null;
    }

    public String getBuddyMid() {
      return this.buddyMid;
    }

    public void setBuddyMid(String buddyMid) {
      this.buddyMid = buddyMid;
    }

    public void unsetBuddyMid() {
      this.buddyMid = null;
    }

    /** Returns true if field buddyMid is set (has been assigned a value) and false otherwise */
    public boolean isSetBuddyMid() {
      return this.buddyMid != null;
    }

    public void setBuddyMidIsSet(boolean value) {
      if (!value) {
        this.buddyMid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isBuddyOnAirByMid_args)
        return this.equals((isBuddyOnAirByMid_args)that);
      return false;
    }

    public boolean equals(isBuddyOnAirByMid_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_buddyMid = true && this.isSetBuddyMid();
      boolean that_present_buddyMid = true && that.isSetBuddyMid();
      if (this_present_buddyMid || that_present_buddyMid) {
        if (!(this_present_buddyMid && that_present_buddyMid))
          return false;
        if (!this.buddyMid.equals(that.buddyMid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      isBuddyOnAirByMid_args other = (isBuddyOnAirByMid_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetBuddyMid(), other.isSetBuddyMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBuddyMid()) {
        lastComparison = TBaseHelper.compareTo(this.buddyMid, other.buddyMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // BUDDY_MID
            if (field.type == TType.STRING) {
              this.buddyMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.buddyMid != null) {
        oprot.writeFieldBegin(BUDDY_MID_FIELD_DESC);
        oprot.writeString(this.buddyMid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("isBuddyOnAirByMid_args(");
      boolean first = true;

      sb.append("buddyMid:");
      if (this.buddyMid == null) {
        sb.append("null");
      } else {
        sb.append(this.buddyMid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class isBuddyOnAirByMid_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("isBuddyOnAirByMid_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.BOOL, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private boolean success;
    private TalkException e;

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public isBuddyOnAirByMid_result() {
    }

    public isBuddyOnAirByMid_result(
      boolean success,
      TalkException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isBuddyOnAirByMid_result(isBuddyOnAirByMid_result other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public isBuddyOnAirByMid_result deepCopy() {
      return new isBuddyOnAirByMid_result(this);
    }

    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public void setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
    }

    public void unsetSuccess() {
      __isset_vector[__SUCCESS_ISSET_ID] = false;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return __isset_vector[__SUCCESS_ISSET_ID];
    }

    public void setSuccessIsSet(boolean value) {
      __isset_vector[__SUCCESS_ISSET_ID] = value;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isBuddyOnAirByMid_result)
        return this.equals((isBuddyOnAirByMid_result)that);
      return false;
    }

    public boolean equals(isBuddyOnAirByMid_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      isBuddyOnAirByMid_result other = (isBuddyOnAirByMid_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.BOOL) {
              this.success = iprot.readBool();
              setSuccessIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeBool(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("isBuddyOnAirByMid_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class linkAndSendBuddyContentMessageToAllAsync_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("linkAndSendBuddyContentMessageToAllAsync_args");

    private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);
    private static final TField MSG_FIELD_DESC = new TField("msg", TType.STRUCT, (short)2);
    private static final TField SOURCE_CONTENT_ID_FIELD_DESC = new TField("sourceContentId", TType.STRING, (short)3);

    private String requestId;
    private Message msg;
    private String sourceContentId;

    // isset id assignments

    public linkAndSendBuddyContentMessageToAllAsync_args() {
    }

    public linkAndSendBuddyContentMessageToAllAsync_args(
      String requestId,
      Message msg,
      String sourceContentId)
    {
      this();
      this.requestId = requestId;
      this.msg = msg;
      this.sourceContentId = sourceContentId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public linkAndSendBuddyContentMessageToAllAsync_args(linkAndSendBuddyContentMessageToAllAsync_args other) {
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
      if (other.isSetMsg()) {
        this.msg = new Message(other.msg);
      }
      if (other.isSetSourceContentId()) {
        this.sourceContentId = other.sourceContentId;
      }
    }

    public linkAndSendBuddyContentMessageToAllAsync_args deepCopy() {
      return new linkAndSendBuddyContentMessageToAllAsync_args(this);
    }

    public void clear() {
      this.requestId = null;
      this.msg = null;
      this.sourceContentId = null;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public void setRequestId(String requestId) {
      this.requestId = requestId;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public Message getMsg() {
      return this.msg;
    }

    public void setMsg(Message msg) {
      this.msg = msg;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public String getSourceContentId() {
      return this.sourceContentId;
    }

    public void setSourceContentId(String sourceContentId) {
      this.sourceContentId = sourceContentId;
    }

    public void unsetSourceContentId() {
      this.sourceContentId = null;
    }

    /** Returns true if field sourceContentId is set (has been assigned a value) and false otherwise */
    public boolean isSetSourceContentId() {
      return this.sourceContentId != null;
    }

    public void setSourceContentIdIsSet(boolean value) {
      if (!value) {
        this.sourceContentId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof linkAndSendBuddyContentMessageToAllAsync_args)
        return this.equals((linkAndSendBuddyContentMessageToAllAsync_args)that);
      return false;
    }

    public boolean equals(linkAndSendBuddyContentMessageToAllAsync_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      boolean this_present_sourceContentId = true && this.isSetSourceContentId();
      boolean that_present_sourceContentId = true && that.isSetSourceContentId();
      if (this_present_sourceContentId || that_present_sourceContentId) {
        if (!(this_present_sourceContentId && that_present_sourceContentId))
          return false;
        if (!this.sourceContentId.equals(that.sourceContentId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      linkAndSendBuddyContentMessageToAllAsync_args other = (linkAndSendBuddyContentMessageToAllAsync_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMsg(), other.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = this.msg.compareTo(other.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSourceContentId(), other.isSetSourceContentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSourceContentId()) {
        lastComparison = TBaseHelper.compareTo(this.sourceContentId, other.sourceContentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MSG
            if (field.type == TType.STRUCT) {
              this.msg = new Message();
              this.msg.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SOURCE_CONTENT_ID
            if (field.type == TType.STRING) {
              this.sourceContentId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      if (this.msg != null) {
        oprot.writeFieldBegin(MSG_FIELD_DESC);
        this.msg.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.sourceContentId != null) {
        oprot.writeFieldBegin(SOURCE_CONTENT_ID_FIELD_DESC);
        oprot.writeString(this.sourceContentId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("linkAndSendBuddyContentMessageToAllAsync_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sourceContentId:");
      if (this.sourceContentId == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceContentId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class linkAndSendBuddyContentMessageToAllAsync_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("linkAndSendBuddyContentMessageToAllAsync_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public linkAndSendBuddyContentMessageToAllAsync_result() {
    }

    public linkAndSendBuddyContentMessageToAllAsync_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public linkAndSendBuddyContentMessageToAllAsync_result(linkAndSendBuddyContentMessageToAllAsync_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public linkAndSendBuddyContentMessageToAllAsync_result deepCopy() {
      return new linkAndSendBuddyContentMessageToAllAsync_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof linkAndSendBuddyContentMessageToAllAsync_result)
        return this.equals((linkAndSendBuddyContentMessageToAllAsync_result)that);
      return false;
    }

    public boolean equals(linkAndSendBuddyContentMessageToAllAsync_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      linkAndSendBuddyContentMessageToAllAsync_result other = (linkAndSendBuddyContentMessageToAllAsync_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("linkAndSendBuddyContentMessageToAllAsync_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class linkAndSendBuddyContentMessageToMids_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("linkAndSendBuddyContentMessageToMids_args");

    private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);
    private static final TField MSG_FIELD_DESC = new TField("msg", TType.STRUCT, (short)2);
    private static final TField SOURCE_CONTENT_ID_FIELD_DESC = new TField("sourceContentId", TType.STRING, (short)3);
    private static final TField MIDS_FIELD_DESC = new TField("mids", TType.LIST, (short)4);

    private String requestId;
    private Message msg;
    private String sourceContentId;
    private Vector mids;

    // isset id assignments

    public linkAndSendBuddyContentMessageToMids_args() {
    }

    public linkAndSendBuddyContentMessageToMids_args(
      String requestId,
      Message msg,
      String sourceContentId,
      Vector mids)
    {
      this();
      this.requestId = requestId;
      this.msg = msg;
      this.sourceContentId = sourceContentId;
      this.mids = mids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public linkAndSendBuddyContentMessageToMids_args(linkAndSendBuddyContentMessageToMids_args other) {
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
      if (other.isSetMsg()) {
        this.msg = new Message(other.msg);
      }
      if (other.isSetSourceContentId()) {
        this.sourceContentId = other.sourceContentId;
      }
      if (other.isSetMids()) {
        Vector __this__mids = new Vector();
        for (Enumeration other_enum = other.mids.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__mids.addElement(other_element);
        }
        this.mids = __this__mids;
      }
    }

    public linkAndSendBuddyContentMessageToMids_args deepCopy() {
      return new linkAndSendBuddyContentMessageToMids_args(this);
    }

    public void clear() {
      this.requestId = null;
      this.msg = null;
      this.sourceContentId = null;
      this.mids = null;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public void setRequestId(String requestId) {
      this.requestId = requestId;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public Message getMsg() {
      return this.msg;
    }

    public void setMsg(Message msg) {
      this.msg = msg;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public String getSourceContentId() {
      return this.sourceContentId;
    }

    public void setSourceContentId(String sourceContentId) {
      this.sourceContentId = sourceContentId;
    }

    public void unsetSourceContentId() {
      this.sourceContentId = null;
    }

    /** Returns true if field sourceContentId is set (has been assigned a value) and false otherwise */
    public boolean isSetSourceContentId() {
      return this.sourceContentId != null;
    }

    public void setSourceContentIdIsSet(boolean value) {
      if (!value) {
        this.sourceContentId = null;
      }
    }

    public int getMidsSize() {
      return (this.mids == null) ? 0 : this.mids.size();
    }

    public Enumeration getMidsEnumeration() {
      return (this.mids == null) ? null : this.mids.elements();
    }

    public void addToMids(String elem) {
      if (this.mids == null) {
        this.mids = new Vector();
      }
      this.mids.addElement(elem);
    }

    public Vector getMids() {
      return this.mids;
    }

    public void setMids(Vector mids) {
      this.mids = mids;
    }

    public void unsetMids() {
      this.mids = null;
    }

    /** Returns true if field mids is set (has been assigned a value) and false otherwise */
    public boolean isSetMids() {
      return this.mids != null;
    }

    public void setMidsIsSet(boolean value) {
      if (!value) {
        this.mids = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof linkAndSendBuddyContentMessageToMids_args)
        return this.equals((linkAndSendBuddyContentMessageToMids_args)that);
      return false;
    }

    public boolean equals(linkAndSendBuddyContentMessageToMids_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      boolean this_present_sourceContentId = true && this.isSetSourceContentId();
      boolean that_present_sourceContentId = true && that.isSetSourceContentId();
      if (this_present_sourceContentId || that_present_sourceContentId) {
        if (!(this_present_sourceContentId && that_present_sourceContentId))
          return false;
        if (!this.sourceContentId.equals(that.sourceContentId))
          return false;
      }

      boolean this_present_mids = true && this.isSetMids();
      boolean that_present_mids = true && that.isSetMids();
      if (this_present_mids || that_present_mids) {
        if (!(this_present_mids && that_present_mids))
          return false;
        if (!this.mids.equals(that.mids))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      linkAndSendBuddyContentMessageToMids_args other = (linkAndSendBuddyContentMessageToMids_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMsg(), other.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = this.msg.compareTo(other.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSourceContentId(), other.isSetSourceContentId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSourceContentId()) {
        lastComparison = TBaseHelper.compareTo(this.sourceContentId, other.sourceContentId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMids(), other.isSetMids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMids()) {
        lastComparison = TBaseHelper.compareTo(this.mids, other.mids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MSG
            if (field.type == TType.STRUCT) {
              this.msg = new Message();
              this.msg.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SOURCE_CONTENT_ID
            if (field.type == TType.STRING) {
              this.sourceContentId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // MIDS
            if (field.type == TType.LIST) {
              {
                TList _list586 = iprot.readListBegin();
                this.mids = new Vector(_list586.size);
                for (int _i587 = 0; _i587 < _list586.size; ++_i587)
                {
                  String _elem588;
                  _elem588 = iprot.readString();
                  this.mids.addElement(_elem588);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      if (this.msg != null) {
        oprot.writeFieldBegin(MSG_FIELD_DESC);
        this.msg.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.sourceContentId != null) {
        oprot.writeFieldBegin(SOURCE_CONTENT_ID_FIELD_DESC);
        oprot.writeString(this.sourceContentId);
        oprot.writeFieldEnd();
      }
      if (this.mids != null) {
        oprot.writeFieldBegin(MIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.mids.size()));
          for (Enumeration _iter589_enum = this.mids.elements(); _iter589_enum.hasMoreElements(); )           {
            String _iter589 = (String)_iter589_enum.nextElement();
            oprot.writeString(_iter589);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("linkAndSendBuddyContentMessageToMids_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sourceContentId:");
      if (this.sourceContentId == null) {
        sb.append("null");
      } else {
        sb.append(this.sourceContentId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mids:");
      if (this.mids == null) {
        sb.append("null");
      } else {
        sb.append(this.mids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class linkAndSendBuddyContentMessageToMids_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("linkAndSendBuddyContentMessageToMids_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private SendBuddyMessageResult success;
    private TalkException e;

    // isset id assignments

    public linkAndSendBuddyContentMessageToMids_result() {
    }

    public linkAndSendBuddyContentMessageToMids_result(
      SendBuddyMessageResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public linkAndSendBuddyContentMessageToMids_result(linkAndSendBuddyContentMessageToMids_result other) {
      if (other.isSetSuccess()) {
        this.success = new SendBuddyMessageResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public linkAndSendBuddyContentMessageToMids_result deepCopy() {
      return new linkAndSendBuddyContentMessageToMids_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public SendBuddyMessageResult getSuccess() {
      return this.success;
    }

    public void setSuccess(SendBuddyMessageResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof linkAndSendBuddyContentMessageToMids_result)
        return this.equals((linkAndSendBuddyContentMessageToMids_result)that);
      return false;
    }

    public boolean equals(linkAndSendBuddyContentMessageToMids_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      linkAndSendBuddyContentMessageToMids_result other = (linkAndSendBuddyContentMessageToMids_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new SendBuddyMessageResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("linkAndSendBuddyContentMessageToMids_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class notifyBuddyBlocked_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("notifyBuddyBlocked_args");

    private static final TField BUDDY_MID_FIELD_DESC = new TField("buddyMid", TType.STRING, (short)1);
    private static final TField BLOCKER_MID_FIELD_DESC = new TField("blockerMid", TType.STRING, (short)2);

    private String buddyMid;
    private String blockerMid;

    // isset id assignments

    public notifyBuddyBlocked_args() {
    }

    public notifyBuddyBlocked_args(
      String buddyMid,
      String blockerMid)
    {
      this();
      this.buddyMid = buddyMid;
      this.blockerMid = blockerMid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyBuddyBlocked_args(notifyBuddyBlocked_args other) {
      if (other.isSetBuddyMid()) {
        this.buddyMid = other.buddyMid;
      }
      if (other.isSetBlockerMid()) {
        this.blockerMid = other.blockerMid;
      }
    }

    public notifyBuddyBlocked_args deepCopy() {
      return new notifyBuddyBlocked_args(this);
    }

    public void clear() {
      this.buddyMid = null;
      this.blockerMid = null;
    }

    public String getBuddyMid() {
      return this.buddyMid;
    }

    public void setBuddyMid(String buddyMid) {
      this.buddyMid = buddyMid;
    }

    public void unsetBuddyMid() {
      this.buddyMid = null;
    }

    /** Returns true if field buddyMid is set (has been assigned a value) and false otherwise */
    public boolean isSetBuddyMid() {
      return this.buddyMid != null;
    }

    public void setBuddyMidIsSet(boolean value) {
      if (!value) {
        this.buddyMid = null;
      }
    }

    public String getBlockerMid() {
      return this.blockerMid;
    }

    public void setBlockerMid(String blockerMid) {
      this.blockerMid = blockerMid;
    }

    public void unsetBlockerMid() {
      this.blockerMid = null;
    }

    /** Returns true if field blockerMid is set (has been assigned a value) and false otherwise */
    public boolean isSetBlockerMid() {
      return this.blockerMid != null;
    }

    public void setBlockerMidIsSet(boolean value) {
      if (!value) {
        this.blockerMid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyBuddyBlocked_args)
        return this.equals((notifyBuddyBlocked_args)that);
      return false;
    }

    public boolean equals(notifyBuddyBlocked_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_buddyMid = true && this.isSetBuddyMid();
      boolean that_present_buddyMid = true && that.isSetBuddyMid();
      if (this_present_buddyMid || that_present_buddyMid) {
        if (!(this_present_buddyMid && that_present_buddyMid))
          return false;
        if (!this.buddyMid.equals(that.buddyMid))
          return false;
      }

      boolean this_present_blockerMid = true && this.isSetBlockerMid();
      boolean that_present_blockerMid = true && that.isSetBlockerMid();
      if (this_present_blockerMid || that_present_blockerMid) {
        if (!(this_present_blockerMid && that_present_blockerMid))
          return false;
        if (!this.blockerMid.equals(that.blockerMid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      notifyBuddyBlocked_args other = (notifyBuddyBlocked_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetBuddyMid(), other.isSetBuddyMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBuddyMid()) {
        lastComparison = TBaseHelper.compareTo(this.buddyMid, other.buddyMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetBlockerMid(), other.isSetBlockerMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBlockerMid()) {
        lastComparison = TBaseHelper.compareTo(this.blockerMid, other.blockerMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // BUDDY_MID
            if (field.type == TType.STRING) {
              this.buddyMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // BLOCKER_MID
            if (field.type == TType.STRING) {
              this.blockerMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.buddyMid != null) {
        oprot.writeFieldBegin(BUDDY_MID_FIELD_DESC);
        oprot.writeString(this.buddyMid);
        oprot.writeFieldEnd();
      }
      if (this.blockerMid != null) {
        oprot.writeFieldBegin(BLOCKER_MID_FIELD_DESC);
        oprot.writeString(this.blockerMid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("notifyBuddyBlocked_args(");
      boolean first = true;

      sb.append("buddyMid:");
      if (this.buddyMid == null) {
        sb.append("null");
      } else {
        sb.append(this.buddyMid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("blockerMid:");
      if (this.blockerMid == null) {
        sb.append("null");
      } else {
        sb.append(this.blockerMid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class notifyBuddyBlocked_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("notifyBuddyBlocked_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public notifyBuddyBlocked_result() {
    }

    public notifyBuddyBlocked_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyBuddyBlocked_result(notifyBuddyBlocked_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public notifyBuddyBlocked_result deepCopy() {
      return new notifyBuddyBlocked_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyBuddyBlocked_result)
        return this.equals((notifyBuddyBlocked_result)that);
      return false;
    }

    public boolean equals(notifyBuddyBlocked_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      notifyBuddyBlocked_result other = (notifyBuddyBlocked_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("notifyBuddyBlocked_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class notifyBuddyUnblocked_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("notifyBuddyUnblocked_args");

    private static final TField BUDDY_MID_FIELD_DESC = new TField("buddyMid", TType.STRING, (short)1);
    private static final TField BLOCKER_MID_FIELD_DESC = new TField("blockerMid", TType.STRING, (short)2);

    private String buddyMid;
    private String blockerMid;

    // isset id assignments

    public notifyBuddyUnblocked_args() {
    }

    public notifyBuddyUnblocked_args(
      String buddyMid,
      String blockerMid)
    {
      this();
      this.buddyMid = buddyMid;
      this.blockerMid = blockerMid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyBuddyUnblocked_args(notifyBuddyUnblocked_args other) {
      if (other.isSetBuddyMid()) {
        this.buddyMid = other.buddyMid;
      }
      if (other.isSetBlockerMid()) {
        this.blockerMid = other.blockerMid;
      }
    }

    public notifyBuddyUnblocked_args deepCopy() {
      return new notifyBuddyUnblocked_args(this);
    }

    public void clear() {
      this.buddyMid = null;
      this.blockerMid = null;
    }

    public String getBuddyMid() {
      return this.buddyMid;
    }

    public void setBuddyMid(String buddyMid) {
      this.buddyMid = buddyMid;
    }

    public void unsetBuddyMid() {
      this.buddyMid = null;
    }

    /** Returns true if field buddyMid is set (has been assigned a value) and false otherwise */
    public boolean isSetBuddyMid() {
      return this.buddyMid != null;
    }

    public void setBuddyMidIsSet(boolean value) {
      if (!value) {
        this.buddyMid = null;
      }
    }

    public String getBlockerMid() {
      return this.blockerMid;
    }

    public void setBlockerMid(String blockerMid) {
      this.blockerMid = blockerMid;
    }

    public void unsetBlockerMid() {
      this.blockerMid = null;
    }

    /** Returns true if field blockerMid is set (has been assigned a value) and false otherwise */
    public boolean isSetBlockerMid() {
      return this.blockerMid != null;
    }

    public void setBlockerMidIsSet(boolean value) {
      if (!value) {
        this.blockerMid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyBuddyUnblocked_args)
        return this.equals((notifyBuddyUnblocked_args)that);
      return false;
    }

    public boolean equals(notifyBuddyUnblocked_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_buddyMid = true && this.isSetBuddyMid();
      boolean that_present_buddyMid = true && that.isSetBuddyMid();
      if (this_present_buddyMid || that_present_buddyMid) {
        if (!(this_present_buddyMid && that_present_buddyMid))
          return false;
        if (!this.buddyMid.equals(that.buddyMid))
          return false;
      }

      boolean this_present_blockerMid = true && this.isSetBlockerMid();
      boolean that_present_blockerMid = true && that.isSetBlockerMid();
      if (this_present_blockerMid || that_present_blockerMid) {
        if (!(this_present_blockerMid && that_present_blockerMid))
          return false;
        if (!this.blockerMid.equals(that.blockerMid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      notifyBuddyUnblocked_args other = (notifyBuddyUnblocked_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetBuddyMid(), other.isSetBuddyMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBuddyMid()) {
        lastComparison = TBaseHelper.compareTo(this.buddyMid, other.buddyMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetBlockerMid(), other.isSetBlockerMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBlockerMid()) {
        lastComparison = TBaseHelper.compareTo(this.blockerMid, other.blockerMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // BUDDY_MID
            if (field.type == TType.STRING) {
              this.buddyMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // BLOCKER_MID
            if (field.type == TType.STRING) {
              this.blockerMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.buddyMid != null) {
        oprot.writeFieldBegin(BUDDY_MID_FIELD_DESC);
        oprot.writeString(this.buddyMid);
        oprot.writeFieldEnd();
      }
      if (this.blockerMid != null) {
        oprot.writeFieldBegin(BLOCKER_MID_FIELD_DESC);
        oprot.writeString(this.blockerMid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("notifyBuddyUnblocked_args(");
      boolean first = true;

      sb.append("buddyMid:");
      if (this.buddyMid == null) {
        sb.append("null");
      } else {
        sb.append(this.buddyMid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("blockerMid:");
      if (this.blockerMid == null) {
        sb.append("null");
      } else {
        sb.append(this.blockerMid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class notifyBuddyUnblocked_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("notifyBuddyUnblocked_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public notifyBuddyUnblocked_result() {
    }

    public notifyBuddyUnblocked_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyBuddyUnblocked_result(notifyBuddyUnblocked_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public notifyBuddyUnblocked_result deepCopy() {
      return new notifyBuddyUnblocked_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyBuddyUnblocked_result)
        return this.equals((notifyBuddyUnblocked_result)that);
      return false;
    }

    public boolean equals(notifyBuddyUnblocked_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      notifyBuddyUnblocked_result other = (notifyBuddyUnblocked_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("notifyBuddyUnblocked_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerBuddy_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerBuddy_args");

    private static final TField BUDDY_ID_FIELD_DESC = new TField("buddyId", TType.STRING, (short)2);
    private static final TField SEARCH_ID_FIELD_DESC = new TField("searchId", TType.STRING, (short)3);
    private static final TField DISPLAY_NAME_FIELD_DESC = new TField("displayName", TType.STRING, (short)4);
    private static final TField STATUS_MEESSAGE_FIELD_DESC = new TField("statusMeessage", TType.STRING, (short)5);
    private static final TField PICTURE_FIELD_DESC = new TField("picture", TType.STRING, (short)6);
    private static final TField SETTINGS_FIELD_DESC = new TField("settings", TType.MAP, (short)7);

    private String buddyId;
    private String searchId;
    private String displayName;
    private String statusMeessage;
    private byte[] picture;
    private Hashtable settings;

    // isset id assignments

    public registerBuddy_args() {
    }

    public registerBuddy_args(
      String buddyId,
      String searchId,
      String displayName,
      String statusMeessage,
      byte[] picture,
      Hashtable settings)
    {
      this();
      this.buddyId = buddyId;
      this.searchId = searchId;
      this.displayName = displayName;
      this.statusMeessage = statusMeessage;
      this.picture = picture;
      this.settings = settings;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerBuddy_args(registerBuddy_args other) {
      if (other.isSetBuddyId()) {
        this.buddyId = other.buddyId;
      }
      if (other.isSetSearchId()) {
        this.searchId = other.searchId;
      }
      if (other.isSetDisplayName()) {
        this.displayName = other.displayName;
      }
      if (other.isSetStatusMeessage()) {
        this.statusMeessage = other.statusMeessage;
      }
      if (other.isSetPicture()) {
        this.picture = new byte[other.picture.length];
        System.arraycopy(other.picture, 0, picture, 0, other.picture.length);
      }
      if (other.isSetSettings()) {
        Hashtable __this__settings = new Hashtable();
        for (Enumeration other_enum = other.settings.keys(); other_enum.hasMoreElements(); ) {

          String other_element_key = (String)other_enum.nextElement();
          String other_element_value = (String)other.settings.get(other_element_key);

          String __this__settings_copy_key = other_element_key;

          String __this__settings_copy_value = other_element_value;

          __this__settings.put(__this__settings_copy_key, __this__settings_copy_value);
        }
        this.settings = __this__settings;
      }
    }

    public registerBuddy_args deepCopy() {
      return new registerBuddy_args(this);
    }

    public void clear() {
      this.buddyId = null;
      this.searchId = null;
      this.displayName = null;
      this.statusMeessage = null;
      this.picture = null;
      this.settings = null;
    }

    public String getBuddyId() {
      return this.buddyId;
    }

    public void setBuddyId(String buddyId) {
      this.buddyId = buddyId;
    }

    public void unsetBuddyId() {
      this.buddyId = null;
    }

    /** Returns true if field buddyId is set (has been assigned a value) and false otherwise */
    public boolean isSetBuddyId() {
      return this.buddyId != null;
    }

    public void setBuddyIdIsSet(boolean value) {
      if (!value) {
        this.buddyId = null;
      }
    }

    public String getSearchId() {
      return this.searchId;
    }

    public void setSearchId(String searchId) {
      this.searchId = searchId;
    }

    public void unsetSearchId() {
      this.searchId = null;
    }

    /** Returns true if field searchId is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchId() {
      return this.searchId != null;
    }

    public void setSearchIdIsSet(boolean value) {
      if (!value) {
        this.searchId = null;
      }
    }

    public String getDisplayName() {
      return this.displayName;
    }

    public void setDisplayName(String displayName) {
      this.displayName = displayName;
    }

    public void unsetDisplayName() {
      this.displayName = null;
    }

    /** Returns true if field displayName is set (has been assigned a value) and false otherwise */
    public boolean isSetDisplayName() {
      return this.displayName != null;
    }

    public void setDisplayNameIsSet(boolean value) {
      if (!value) {
        this.displayName = null;
      }
    }

    public String getStatusMeessage() {
      return this.statusMeessage;
    }

    public void setStatusMeessage(String statusMeessage) {
      this.statusMeessage = statusMeessage;
    }

    public void unsetStatusMeessage() {
      this.statusMeessage = null;
    }

    /** Returns true if field statusMeessage is set (has been assigned a value) and false otherwise */
    public boolean isSetStatusMeessage() {
      return this.statusMeessage != null;
    }

    public void setStatusMeessageIsSet(boolean value) {
      if (!value) {
        this.statusMeessage = null;
      }
    }

    public byte[] getPicture() {
      return this.picture;
    }

    public void setPicture(byte[] picture) {
      this.picture = picture;
    }

    public void unsetPicture() {
      this.picture = null;
    }

    /** Returns true if field picture is set (has been assigned a value) and false otherwise */
    public boolean isSetPicture() {
      return this.picture != null;
    }

    public void setPictureIsSet(boolean value) {
      if (!value) {
        this.picture = null;
      }
    }

    public int getSettingsSize() {
      return (this.settings == null) ? 0 : this.settings.size();
    }

    public void putToSettings(String key, String val) {
      if (this.settings == null) {
        this.settings = new Hashtable();
      }
      this.settings.put(key, val);
    }

    public Hashtable getSettings() {
      return this.settings;
    }

    public void setSettings(Hashtable settings) {
      this.settings = settings;
    }

    public void unsetSettings() {
      this.settings = null;
    }

    /** Returns true if field settings is set (has been assigned a value) and false otherwise */
    public boolean isSetSettings() {
      return this.settings != null;
    }

    public void setSettingsIsSet(boolean value) {
      if (!value) {
        this.settings = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerBuddy_args)
        return this.equals((registerBuddy_args)that);
      return false;
    }

    public boolean equals(registerBuddy_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_buddyId = true && this.isSetBuddyId();
      boolean that_present_buddyId = true && that.isSetBuddyId();
      if (this_present_buddyId || that_present_buddyId) {
        if (!(this_present_buddyId && that_present_buddyId))
          return false;
        if (!this.buddyId.equals(that.buddyId))
          return false;
      }

      boolean this_present_searchId = true && this.isSetSearchId();
      boolean that_present_searchId = true && that.isSetSearchId();
      if (this_present_searchId || that_present_searchId) {
        if (!(this_present_searchId && that_present_searchId))
          return false;
        if (!this.searchId.equals(that.searchId))
          return false;
      }

      boolean this_present_displayName = true && this.isSetDisplayName();
      boolean that_present_displayName = true && that.isSetDisplayName();
      if (this_present_displayName || that_present_displayName) {
        if (!(this_present_displayName && that_present_displayName))
          return false;
        if (!this.displayName.equals(that.displayName))
          return false;
      }

      boolean this_present_statusMeessage = true && this.isSetStatusMeessage();
      boolean that_present_statusMeessage = true && that.isSetStatusMeessage();
      if (this_present_statusMeessage || that_present_statusMeessage) {
        if (!(this_present_statusMeessage && that_present_statusMeessage))
          return false;
        if (!this.statusMeessage.equals(that.statusMeessage))
          return false;
      }

      boolean this_present_picture = true && this.isSetPicture();
      boolean that_present_picture = true && that.isSetPicture();
      if (this_present_picture || that_present_picture) {
        if (!(this_present_picture && that_present_picture))
          return false;
        if (TBaseHelper.compareTo(this.picture, that.picture) != 0)
          return false;
      }

      boolean this_present_settings = true && this.isSetSettings();
      boolean that_present_settings = true && that.isSetSettings();
      if (this_present_settings || that_present_settings) {
        if (!(this_present_settings && that_present_settings))
          return false;
        if (!this.settings.equals(that.settings))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerBuddy_args other = (registerBuddy_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetBuddyId(), other.isSetBuddyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBuddyId()) {
        lastComparison = TBaseHelper.compareTo(this.buddyId, other.buddyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSearchId(), other.isSetSearchId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchId()) {
        lastComparison = TBaseHelper.compareTo(this.searchId, other.searchId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetDisplayName(), other.isSetDisplayName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDisplayName()) {
        lastComparison = TBaseHelper.compareTo(this.displayName, other.displayName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetStatusMeessage(), other.isSetStatusMeessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatusMeessage()) {
        lastComparison = TBaseHelper.compareTo(this.statusMeessage, other.statusMeessage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPicture(), other.isSetPicture());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPicture()) {
        lastComparison = TBaseHelper.compareTo(this.picture, other.picture);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSettings(), other.isSetSettings());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSettings()) {
        lastComparison = TBaseHelper.compareTo(this.settings, other.settings);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // BUDDY_ID
            if (field.type == TType.STRING) {
              this.buddyId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SEARCH_ID
            if (field.type == TType.STRING) {
              this.searchId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // DISPLAY_NAME
            if (field.type == TType.STRING) {
              this.displayName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // STATUS_MEESSAGE
            if (field.type == TType.STRING) {
              this.statusMeessage = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // PICTURE
            if (field.type == TType.STRING) {
              this.picture = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // SETTINGS
            if (field.type == TType.MAP) {
              {
                TMap _map590 = iprot.readMapBegin();
                this.settings = new Hashtable(2*_map590.size);
                for (int _i591 = 0; _i591 < _map590.size; ++_i591)
                {
                  String _key592;
                  String _val593;
                  _key592 = iprot.readString();
                  _val593 = iprot.readString();
                  this.settings.put(_key592, _val593);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.buddyId != null) {
        oprot.writeFieldBegin(BUDDY_ID_FIELD_DESC);
        oprot.writeString(this.buddyId);
        oprot.writeFieldEnd();
      }
      if (this.searchId != null) {
        oprot.writeFieldBegin(SEARCH_ID_FIELD_DESC);
        oprot.writeString(this.searchId);
        oprot.writeFieldEnd();
      }
      if (this.displayName != null) {
        oprot.writeFieldBegin(DISPLAY_NAME_FIELD_DESC);
        oprot.writeString(this.displayName);
        oprot.writeFieldEnd();
      }
      if (this.statusMeessage != null) {
        oprot.writeFieldBegin(STATUS_MEESSAGE_FIELD_DESC);
        oprot.writeString(this.statusMeessage);
        oprot.writeFieldEnd();
      }
      if (this.picture != null) {
        oprot.writeFieldBegin(PICTURE_FIELD_DESC);
        oprot.writeBinary(this.picture);
        oprot.writeFieldEnd();
      }
      if (this.settings != null) {
        oprot.writeFieldBegin(SETTINGS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.settings.size()));
          for (Enumeration _iter594_enum = this.settings.keys(); _iter594_enum.hasMoreElements(); )           {
            String _iter594 = (String)_iter594_enum.nextElement();
            oprot.writeString(_iter594);
            oprot.writeString(((String)this.settings.get(_iter594)));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerBuddy_args(");
      boolean first = true;

      sb.append("buddyId:");
      if (this.buddyId == null) {
        sb.append("null");
      } else {
        sb.append(this.buddyId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("searchId:");
      if (this.searchId == null) {
        sb.append("null");
      } else {
        sb.append(this.searchId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("displayName:");
      if (this.displayName == null) {
        sb.append("null");
      } else {
        sb.append(this.displayName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("statusMeessage:");
      if (this.statusMeessage == null) {
        sb.append("null");
      } else {
        sb.append(this.statusMeessage);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("picture:");
      if (this.picture == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.picture, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("settings:");
      if (this.settings == null) {
        sb.append("null");
      } else {
        sb.append(this.settings);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerBuddy_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerBuddy_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public registerBuddy_result() {
    }

    public registerBuddy_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerBuddy_result(registerBuddy_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public registerBuddy_result deepCopy() {
      return new registerBuddy_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerBuddy_result)
        return this.equals((registerBuddy_result)that);
      return false;
    }

    public boolean equals(registerBuddy_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerBuddy_result other = (registerBuddy_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerBuddy_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerBuddyAdmin_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerBuddyAdmin_args");

    private static final TField BUDDY_ID_FIELD_DESC = new TField("buddyId", TType.STRING, (short)2);
    private static final TField SEARCH_ID_FIELD_DESC = new TField("searchId", TType.STRING, (short)3);
    private static final TField DISPLAY_NAME_FIELD_DESC = new TField("displayName", TType.STRING, (short)4);
    private static final TField STATUS_MESSAGE_FIELD_DESC = new TField("statusMessage", TType.STRING, (short)5);
    private static final TField PICTURE_FIELD_DESC = new TField("picture", TType.STRING, (short)6);

    private String buddyId;
    private String searchId;
    private String displayName;
    private String statusMessage;
    private byte[] picture;

    // isset id assignments

    public registerBuddyAdmin_args() {
    }

    public registerBuddyAdmin_args(
      String buddyId,
      String searchId,
      String displayName,
      String statusMessage,
      byte[] picture)
    {
      this();
      this.buddyId = buddyId;
      this.searchId = searchId;
      this.displayName = displayName;
      this.statusMessage = statusMessage;
      this.picture = picture;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerBuddyAdmin_args(registerBuddyAdmin_args other) {
      if (other.isSetBuddyId()) {
        this.buddyId = other.buddyId;
      }
      if (other.isSetSearchId()) {
        this.searchId = other.searchId;
      }
      if (other.isSetDisplayName()) {
        this.displayName = other.displayName;
      }
      if (other.isSetStatusMessage()) {
        this.statusMessage = other.statusMessage;
      }
      if (other.isSetPicture()) {
        this.picture = new byte[other.picture.length];
        System.arraycopy(other.picture, 0, picture, 0, other.picture.length);
      }
    }

    public registerBuddyAdmin_args deepCopy() {
      return new registerBuddyAdmin_args(this);
    }

    public void clear() {
      this.buddyId = null;
      this.searchId = null;
      this.displayName = null;
      this.statusMessage = null;
      this.picture = null;
    }

    public String getBuddyId() {
      return this.buddyId;
    }

    public void setBuddyId(String buddyId) {
      this.buddyId = buddyId;
    }

    public void unsetBuddyId() {
      this.buddyId = null;
    }

    /** Returns true if field buddyId is set (has been assigned a value) and false otherwise */
    public boolean isSetBuddyId() {
      return this.buddyId != null;
    }

    public void setBuddyIdIsSet(boolean value) {
      if (!value) {
        this.buddyId = null;
      }
    }

    public String getSearchId() {
      return this.searchId;
    }

    public void setSearchId(String searchId) {
      this.searchId = searchId;
    }

    public void unsetSearchId() {
      this.searchId = null;
    }

    /** Returns true if field searchId is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchId() {
      return this.searchId != null;
    }

    public void setSearchIdIsSet(boolean value) {
      if (!value) {
        this.searchId = null;
      }
    }

    public String getDisplayName() {
      return this.displayName;
    }

    public void setDisplayName(String displayName) {
      this.displayName = displayName;
    }

    public void unsetDisplayName() {
      this.displayName = null;
    }

    /** Returns true if field displayName is set (has been assigned a value) and false otherwise */
    public boolean isSetDisplayName() {
      return this.displayName != null;
    }

    public void setDisplayNameIsSet(boolean value) {
      if (!value) {
        this.displayName = null;
      }
    }

    public String getStatusMessage() {
      return this.statusMessage;
    }

    public void setStatusMessage(String statusMessage) {
      this.statusMessage = statusMessage;
    }

    public void unsetStatusMessage() {
      this.statusMessage = null;
    }

    /** Returns true if field statusMessage is set (has been assigned a value) and false otherwise */
    public boolean isSetStatusMessage() {
      return this.statusMessage != null;
    }

    public void setStatusMessageIsSet(boolean value) {
      if (!value) {
        this.statusMessage = null;
      }
    }

    public byte[] getPicture() {
      return this.picture;
    }

    public void setPicture(byte[] picture) {
      this.picture = picture;
    }

    public void unsetPicture() {
      this.picture = null;
    }

    /** Returns true if field picture is set (has been assigned a value) and false otherwise */
    public boolean isSetPicture() {
      return this.picture != null;
    }

    public void setPictureIsSet(boolean value) {
      if (!value) {
        this.picture = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerBuddyAdmin_args)
        return this.equals((registerBuddyAdmin_args)that);
      return false;
    }

    public boolean equals(registerBuddyAdmin_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_buddyId = true && this.isSetBuddyId();
      boolean that_present_buddyId = true && that.isSetBuddyId();
      if (this_present_buddyId || that_present_buddyId) {
        if (!(this_present_buddyId && that_present_buddyId))
          return false;
        if (!this.buddyId.equals(that.buddyId))
          return false;
      }

      boolean this_present_searchId = true && this.isSetSearchId();
      boolean that_present_searchId = true && that.isSetSearchId();
      if (this_present_searchId || that_present_searchId) {
        if (!(this_present_searchId && that_present_searchId))
          return false;
        if (!this.searchId.equals(that.searchId))
          return false;
      }

      boolean this_present_displayName = true && this.isSetDisplayName();
      boolean that_present_displayName = true && that.isSetDisplayName();
      if (this_present_displayName || that_present_displayName) {
        if (!(this_present_displayName && that_present_displayName))
          return false;
        if (!this.displayName.equals(that.displayName))
          return false;
      }

      boolean this_present_statusMessage = true && this.isSetStatusMessage();
      boolean that_present_statusMessage = true && that.isSetStatusMessage();
      if (this_present_statusMessage || that_present_statusMessage) {
        if (!(this_present_statusMessage && that_present_statusMessage))
          return false;
        if (!this.statusMessage.equals(that.statusMessage))
          return false;
      }

      boolean this_present_picture = true && this.isSetPicture();
      boolean that_present_picture = true && that.isSetPicture();
      if (this_present_picture || that_present_picture) {
        if (!(this_present_picture && that_present_picture))
          return false;
        if (TBaseHelper.compareTo(this.picture, that.picture) != 0)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerBuddyAdmin_args other = (registerBuddyAdmin_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetBuddyId(), other.isSetBuddyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBuddyId()) {
        lastComparison = TBaseHelper.compareTo(this.buddyId, other.buddyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSearchId(), other.isSetSearchId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchId()) {
        lastComparison = TBaseHelper.compareTo(this.searchId, other.searchId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetDisplayName(), other.isSetDisplayName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDisplayName()) {
        lastComparison = TBaseHelper.compareTo(this.displayName, other.displayName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetStatusMessage(), other.isSetStatusMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatusMessage()) {
        lastComparison = TBaseHelper.compareTo(this.statusMessage, other.statusMessage);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPicture(), other.isSetPicture());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPicture()) {
        lastComparison = TBaseHelper.compareTo(this.picture, other.picture);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // BUDDY_ID
            if (field.type == TType.STRING) {
              this.buddyId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // SEARCH_ID
            if (field.type == TType.STRING) {
              this.searchId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // DISPLAY_NAME
            if (field.type == TType.STRING) {
              this.displayName = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // STATUS_MESSAGE
            if (field.type == TType.STRING) {
              this.statusMessage = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // PICTURE
            if (field.type == TType.STRING) {
              this.picture = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.buddyId != null) {
        oprot.writeFieldBegin(BUDDY_ID_FIELD_DESC);
        oprot.writeString(this.buddyId);
        oprot.writeFieldEnd();
      }
      if (this.searchId != null) {
        oprot.writeFieldBegin(SEARCH_ID_FIELD_DESC);
        oprot.writeString(this.searchId);
        oprot.writeFieldEnd();
      }
      if (this.displayName != null) {
        oprot.writeFieldBegin(DISPLAY_NAME_FIELD_DESC);
        oprot.writeString(this.displayName);
        oprot.writeFieldEnd();
      }
      if (this.statusMessage != null) {
        oprot.writeFieldBegin(STATUS_MESSAGE_FIELD_DESC);
        oprot.writeString(this.statusMessage);
        oprot.writeFieldEnd();
      }
      if (this.picture != null) {
        oprot.writeFieldBegin(PICTURE_FIELD_DESC);
        oprot.writeBinary(this.picture);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerBuddyAdmin_args(");
      boolean first = true;

      sb.append("buddyId:");
      if (this.buddyId == null) {
        sb.append("null");
      } else {
        sb.append(this.buddyId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("searchId:");
      if (this.searchId == null) {
        sb.append("null");
      } else {
        sb.append(this.searchId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("displayName:");
      if (this.displayName == null) {
        sb.append("null");
      } else {
        sb.append(this.displayName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("statusMessage:");
      if (this.statusMessage == null) {
        sb.append("null");
      } else {
        sb.append(this.statusMessage);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("picture:");
      if (this.picture == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.picture, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerBuddyAdmin_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerBuddyAdmin_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public registerBuddyAdmin_result() {
    }

    public registerBuddyAdmin_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerBuddyAdmin_result(registerBuddyAdmin_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public registerBuddyAdmin_result deepCopy() {
      return new registerBuddyAdmin_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerBuddyAdmin_result)
        return this.equals((registerBuddyAdmin_result)that);
      return false;
    }

    public boolean equals(registerBuddyAdmin_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerBuddyAdmin_result other = (registerBuddyAdmin_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerBuddyAdmin_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class reissueContactTicket_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("reissueContactTicket_args");

    private static final TField EXPIRATION_TIME_FIELD_DESC = new TField("expirationTime", TType.I64, (short)3);
    private static final TField MAX_USE_COUNT_FIELD_DESC = new TField("maxUseCount", TType.I32, (short)4);

    private long expirationTime;
    private int maxUseCount;

    // isset id assignments
    private static final int __EXPIRATIONTIME_ISSET_ID = 0;
    private static final int __MAXUSECOUNT_ISSET_ID = 1;
    private boolean[] __isset_vector = new boolean[2];

    public reissueContactTicket_args() {
    }

    public reissueContactTicket_args(
      long expirationTime,
      int maxUseCount)
    {
      this();
      this.expirationTime = expirationTime;
      setExpirationTimeIsSet(true);
      this.maxUseCount = maxUseCount;
      setMaxUseCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reissueContactTicket_args(reissueContactTicket_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.expirationTime = other.expirationTime;
      this.maxUseCount = other.maxUseCount;
    }

    public reissueContactTicket_args deepCopy() {
      return new reissueContactTicket_args(this);
    }

    public void clear() {
      setExpirationTimeIsSet(false);
      this.expirationTime = 0;
      setMaxUseCountIsSet(false);
      this.maxUseCount = 0;
    }

    public long getExpirationTime() {
      return this.expirationTime;
    }

    public void setExpirationTime(long expirationTime) {
      this.expirationTime = expirationTime;
      setExpirationTimeIsSet(true);
    }

    public void unsetExpirationTime() {
      __isset_vector[__EXPIRATIONTIME_ISSET_ID] = false;
    }

    /** Returns true if field expirationTime is set (has been assigned a value) and false otherwise */
    public boolean isSetExpirationTime() {
      return __isset_vector[__EXPIRATIONTIME_ISSET_ID];
    }

    public void setExpirationTimeIsSet(boolean value) {
      __isset_vector[__EXPIRATIONTIME_ISSET_ID] = value;
    }

    public int getMaxUseCount() {
      return this.maxUseCount;
    }

    public void setMaxUseCount(int maxUseCount) {
      this.maxUseCount = maxUseCount;
      setMaxUseCountIsSet(true);
    }

    public void unsetMaxUseCount() {
      __isset_vector[__MAXUSECOUNT_ISSET_ID] = false;
    }

    /** Returns true if field maxUseCount is set (has been assigned a value) and false otherwise */
    public boolean isSetMaxUseCount() {
      return __isset_vector[__MAXUSECOUNT_ISSET_ID];
    }

    public void setMaxUseCountIsSet(boolean value) {
      __isset_vector[__MAXUSECOUNT_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reissueContactTicket_args)
        return this.equals((reissueContactTicket_args)that);
      return false;
    }

    public boolean equals(reissueContactTicket_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_expirationTime = true;
      boolean that_present_expirationTime = true;
      if (this_present_expirationTime || that_present_expirationTime) {
        if (!(this_present_expirationTime && that_present_expirationTime))
          return false;
        if (this.expirationTime != that.expirationTime)
          return false;
      }

      boolean this_present_maxUseCount = true;
      boolean that_present_maxUseCount = true;
      if (this_present_maxUseCount || that_present_maxUseCount) {
        if (!(this_present_maxUseCount && that_present_maxUseCount))
          return false;
        if (this.maxUseCount != that.maxUseCount)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      reissueContactTicket_args other = (reissueContactTicket_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetExpirationTime(), other.isSetExpirationTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExpirationTime()) {
        lastComparison = TBaseHelper.compareTo(this.expirationTime, other.expirationTime);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMaxUseCount(), other.isSetMaxUseCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMaxUseCount()) {
        lastComparison = TBaseHelper.compareTo(this.maxUseCount, other.maxUseCount);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 3: // EXPIRATION_TIME
            if (field.type == TType.I64) {
              this.expirationTime = iprot.readI64();
              setExpirationTimeIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // MAX_USE_COUNT
            if (field.type == TType.I32) {
              this.maxUseCount = iprot.readI32();
              setMaxUseCountIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(EXPIRATION_TIME_FIELD_DESC);
      oprot.writeI64(this.expirationTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_USE_COUNT_FIELD_DESC);
      oprot.writeI32(this.maxUseCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("reissueContactTicket_args(");
      boolean first = true;

      sb.append("expirationTime:");
      sb.append(this.expirationTime);
      first = false;
      if (!first) sb.append(", ");
      sb.append("maxUseCount:");
      sb.append(this.maxUseCount);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class reissueContactTicket_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("reissueContactTicket_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public reissueContactTicket_result() {
    }

    public reissueContactTicket_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reissueContactTicket_result(reissueContactTicket_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public reissueContactTicket_result deepCopy() {
      return new reissueContactTicket_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof reissueContactTicket_result)
        return this.equals((reissueContactTicket_result)that);
      return false;
    }

    public boolean equals(reissueContactTicket_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      reissueContactTicket_result other = (reissueContactTicket_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("reissueContactTicket_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class removeBuddyMember_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("removeBuddyMember_args");

    private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);
    private static final TField USER_MID_FIELD_DESC = new TField("userMid", TType.STRING, (short)2);

    private String requestId;
    private String userMid;

    // isset id assignments

    public removeBuddyMember_args() {
    }

    public removeBuddyMember_args(
      String requestId,
      String userMid)
    {
      this();
      this.requestId = requestId;
      this.userMid = userMid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeBuddyMember_args(removeBuddyMember_args other) {
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
      if (other.isSetUserMid()) {
        this.userMid = other.userMid;
      }
    }

    public removeBuddyMember_args deepCopy() {
      return new removeBuddyMember_args(this);
    }

    public void clear() {
      this.requestId = null;
      this.userMid = null;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public void setRequestId(String requestId) {
      this.requestId = requestId;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public String getUserMid() {
      return this.userMid;
    }

    public void setUserMid(String userMid) {
      this.userMid = userMid;
    }

    public void unsetUserMid() {
      this.userMid = null;
    }

    /** Returns true if field userMid is set (has been assigned a value) and false otherwise */
    public boolean isSetUserMid() {
      return this.userMid != null;
    }

    public void setUserMidIsSet(boolean value) {
      if (!value) {
        this.userMid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeBuddyMember_args)
        return this.equals((removeBuddyMember_args)that);
      return false;
    }

    public boolean equals(removeBuddyMember_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      boolean this_present_userMid = true && this.isSetUserMid();
      boolean that_present_userMid = true && that.isSetUserMid();
      if (this_present_userMid || that_present_userMid) {
        if (!(this_present_userMid && that_present_userMid))
          return false;
        if (!this.userMid.equals(that.userMid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      removeBuddyMember_args other = (removeBuddyMember_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserMid(), other.isSetUserMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserMid()) {
        lastComparison = TBaseHelper.compareTo(this.userMid, other.userMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USER_MID
            if (field.type == TType.STRING) {
              this.userMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      if (this.userMid != null) {
        oprot.writeFieldBegin(USER_MID_FIELD_DESC);
        oprot.writeString(this.userMid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("removeBuddyMember_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userMid:");
      if (this.userMid == null) {
        sb.append("null");
      } else {
        sb.append(this.userMid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class removeBuddyMember_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("removeBuddyMember_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public removeBuddyMember_result() {
    }

    public removeBuddyMember_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeBuddyMember_result(removeBuddyMember_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public removeBuddyMember_result deepCopy() {
      return new removeBuddyMember_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeBuddyMember_result)
        return this.equals((removeBuddyMember_result)that);
      return false;
    }

    public boolean equals(removeBuddyMember_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      removeBuddyMember_result other = (removeBuddyMember_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("removeBuddyMember_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class removeBuddyMembers_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("removeBuddyMembers_args");

    private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);
    private static final TField USER_MIDS_FIELD_DESC = new TField("userMids", TType.LIST, (short)2);

    private String requestId;
    private Vector userMids;

    // isset id assignments

    public removeBuddyMembers_args() {
    }

    public removeBuddyMembers_args(
      String requestId,
      Vector userMids)
    {
      this();
      this.requestId = requestId;
      this.userMids = userMids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeBuddyMembers_args(removeBuddyMembers_args other) {
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
      if (other.isSetUserMids()) {
        Vector __this__userMids = new Vector();
        for (Enumeration other_enum = other.userMids.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__userMids.addElement(other_element);
        }
        this.userMids = __this__userMids;
      }
    }

    public removeBuddyMembers_args deepCopy() {
      return new removeBuddyMembers_args(this);
    }

    public void clear() {
      this.requestId = null;
      this.userMids = null;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public void setRequestId(String requestId) {
      this.requestId = requestId;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public int getUserMidsSize() {
      return (this.userMids == null) ? 0 : this.userMids.size();
    }

    public Enumeration getUserMidsEnumeration() {
      return (this.userMids == null) ? null : this.userMids.elements();
    }

    public void addToUserMids(String elem) {
      if (this.userMids == null) {
        this.userMids = new Vector();
      }
      this.userMids.addElement(elem);
    }

    public Vector getUserMids() {
      return this.userMids;
    }

    public void setUserMids(Vector userMids) {
      this.userMids = userMids;
    }

    public void unsetUserMids() {
      this.userMids = null;
    }

    /** Returns true if field userMids is set (has been assigned a value) and false otherwise */
    public boolean isSetUserMids() {
      return this.userMids != null;
    }

    public void setUserMidsIsSet(boolean value) {
      if (!value) {
        this.userMids = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeBuddyMembers_args)
        return this.equals((removeBuddyMembers_args)that);
      return false;
    }

    public boolean equals(removeBuddyMembers_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      boolean this_present_userMids = true && this.isSetUserMids();
      boolean that_present_userMids = true && that.isSetUserMids();
      if (this_present_userMids || that_present_userMids) {
        if (!(this_present_userMids && that_present_userMids))
          return false;
        if (!this.userMids.equals(that.userMids))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      removeBuddyMembers_args other = (removeBuddyMembers_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetUserMids(), other.isSetUserMids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserMids()) {
        lastComparison = TBaseHelper.compareTo(this.userMids, other.userMids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // USER_MIDS
            if (field.type == TType.LIST) {
              {
                TList _list595 = iprot.readListBegin();
                this.userMids = new Vector(_list595.size);
                for (int _i596 = 0; _i596 < _list595.size; ++_i596)
                {
                  String _elem597;
                  _elem597 = iprot.readString();
                  this.userMids.addElement(_elem597);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      if (this.userMids != null) {
        oprot.writeFieldBegin(USER_MIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.userMids.size()));
          for (Enumeration _iter598_enum = this.userMids.elements(); _iter598_enum.hasMoreElements(); )           {
            String _iter598 = (String)_iter598_enum.nextElement();
            oprot.writeString(_iter598);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("removeBuddyMembers_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userMids:");
      if (this.userMids == null) {
        sb.append("null");
      } else {
        sb.append(this.userMids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class removeBuddyMembers_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("removeBuddyMembers_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public removeBuddyMembers_result() {
    }

    public removeBuddyMembers_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeBuddyMembers_result(removeBuddyMembers_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public removeBuddyMembers_result deepCopy() {
      return new removeBuddyMembers_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof removeBuddyMembers_result)
        return this.equals((removeBuddyMembers_result)that);
      return false;
    }

    public boolean equals(removeBuddyMembers_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      removeBuddyMembers_result other = (removeBuddyMembers_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("removeBuddyMembers_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendBuddyContentMessageToAll_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendBuddyContentMessageToAll_args");

    private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);
    private static final TField MSG_FIELD_DESC = new TField("msg", TType.STRUCT, (short)2);
    private static final TField CONTENT_FIELD_DESC = new TField("content", TType.STRING, (short)3);

    private String requestId;
    private Message msg;
    private byte[] content;

    // isset id assignments

    public sendBuddyContentMessageToAll_args() {
    }

    public sendBuddyContentMessageToAll_args(
      String requestId,
      Message msg,
      byte[] content)
    {
      this();
      this.requestId = requestId;
      this.msg = msg;
      this.content = content;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendBuddyContentMessageToAll_args(sendBuddyContentMessageToAll_args other) {
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
      if (other.isSetMsg()) {
        this.msg = new Message(other.msg);
      }
      if (other.isSetContent()) {
        this.content = new byte[other.content.length];
        System.arraycopy(other.content, 0, content, 0, other.content.length);
      }
    }

    public sendBuddyContentMessageToAll_args deepCopy() {
      return new sendBuddyContentMessageToAll_args(this);
    }

    public void clear() {
      this.requestId = null;
      this.msg = null;
      this.content = null;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public void setRequestId(String requestId) {
      this.requestId = requestId;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public Message getMsg() {
      return this.msg;
    }

    public void setMsg(Message msg) {
      this.msg = msg;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public byte[] getContent() {
      return this.content;
    }

    public void setContent(byte[] content) {
      this.content = content;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendBuddyContentMessageToAll_args)
        return this.equals((sendBuddyContentMessageToAll_args)that);
      return false;
    }

    public boolean equals(sendBuddyContentMessageToAll_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (TBaseHelper.compareTo(this.content, that.content) != 0)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendBuddyContentMessageToAll_args other = (sendBuddyContentMessageToAll_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMsg(), other.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = this.msg.compareTo(other.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetContent(), other.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = TBaseHelper.compareTo(this.content, other.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MSG
            if (field.type == TType.STRUCT) {
              this.msg = new Message();
              this.msg.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // CONTENT
            if (field.type == TType.STRING) {
              this.content = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      if (this.msg != null) {
        oprot.writeFieldBegin(MSG_FIELD_DESC);
        this.msg.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeBinary(this.content);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendBuddyContentMessageToAll_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.content, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendBuddyContentMessageToAll_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendBuddyContentMessageToAll_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private SendBuddyMessageResult success;
    private TalkException e;

    // isset id assignments

    public sendBuddyContentMessageToAll_result() {
    }

    public sendBuddyContentMessageToAll_result(
      SendBuddyMessageResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendBuddyContentMessageToAll_result(sendBuddyContentMessageToAll_result other) {
      if (other.isSetSuccess()) {
        this.success = new SendBuddyMessageResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public sendBuddyContentMessageToAll_result deepCopy() {
      return new sendBuddyContentMessageToAll_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public SendBuddyMessageResult getSuccess() {
      return this.success;
    }

    public void setSuccess(SendBuddyMessageResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendBuddyContentMessageToAll_result)
        return this.equals((sendBuddyContentMessageToAll_result)that);
      return false;
    }

    public boolean equals(sendBuddyContentMessageToAll_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendBuddyContentMessageToAll_result other = (sendBuddyContentMessageToAll_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new SendBuddyMessageResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendBuddyContentMessageToAll_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendBuddyContentMessageToAllAsync_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendBuddyContentMessageToAllAsync_args");

    private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);
    private static final TField MSG_FIELD_DESC = new TField("msg", TType.STRUCT, (short)2);
    private static final TField CONTENT_FIELD_DESC = new TField("content", TType.STRING, (short)3);

    private String requestId;
    private Message msg;
    private byte[] content;

    // isset id assignments

    public sendBuddyContentMessageToAllAsync_args() {
    }

    public sendBuddyContentMessageToAllAsync_args(
      String requestId,
      Message msg,
      byte[] content)
    {
      this();
      this.requestId = requestId;
      this.msg = msg;
      this.content = content;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendBuddyContentMessageToAllAsync_args(sendBuddyContentMessageToAllAsync_args other) {
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
      if (other.isSetMsg()) {
        this.msg = new Message(other.msg);
      }
      if (other.isSetContent()) {
        this.content = new byte[other.content.length];
        System.arraycopy(other.content, 0, content, 0, other.content.length);
      }
    }

    public sendBuddyContentMessageToAllAsync_args deepCopy() {
      return new sendBuddyContentMessageToAllAsync_args(this);
    }

    public void clear() {
      this.requestId = null;
      this.msg = null;
      this.content = null;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public void setRequestId(String requestId) {
      this.requestId = requestId;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public Message getMsg() {
      return this.msg;
    }

    public void setMsg(Message msg) {
      this.msg = msg;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public byte[] getContent() {
      return this.content;
    }

    public void setContent(byte[] content) {
      this.content = content;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendBuddyContentMessageToAllAsync_args)
        return this.equals((sendBuddyContentMessageToAllAsync_args)that);
      return false;
    }

    public boolean equals(sendBuddyContentMessageToAllAsync_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (TBaseHelper.compareTo(this.content, that.content) != 0)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendBuddyContentMessageToAllAsync_args other = (sendBuddyContentMessageToAllAsync_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMsg(), other.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = this.msg.compareTo(other.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetContent(), other.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = TBaseHelper.compareTo(this.content, other.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MSG
            if (field.type == TType.STRUCT) {
              this.msg = new Message();
              this.msg.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // CONTENT
            if (field.type == TType.STRING) {
              this.content = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      if (this.msg != null) {
        oprot.writeFieldBegin(MSG_FIELD_DESC);
        this.msg.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeBinary(this.content);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendBuddyContentMessageToAllAsync_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.content, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendBuddyContentMessageToAllAsync_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendBuddyContentMessageToAllAsync_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public sendBuddyContentMessageToAllAsync_result() {
    }

    public sendBuddyContentMessageToAllAsync_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendBuddyContentMessageToAllAsync_result(sendBuddyContentMessageToAllAsync_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public sendBuddyContentMessageToAllAsync_result deepCopy() {
      return new sendBuddyContentMessageToAllAsync_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendBuddyContentMessageToAllAsync_result)
        return this.equals((sendBuddyContentMessageToAllAsync_result)that);
      return false;
    }

    public boolean equals(sendBuddyContentMessageToAllAsync_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendBuddyContentMessageToAllAsync_result other = (sendBuddyContentMessageToAllAsync_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendBuddyContentMessageToAllAsync_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendBuddyContentMessageToMids_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendBuddyContentMessageToMids_args");

    private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);
    private static final TField MSG_FIELD_DESC = new TField("msg", TType.STRUCT, (short)2);
    private static final TField CONTENT_FIELD_DESC = new TField("content", TType.STRING, (short)3);
    private static final TField MIDS_FIELD_DESC = new TField("mids", TType.LIST, (short)4);

    private String requestId;
    private Message msg;
    private byte[] content;
    private Vector mids;

    // isset id assignments

    public sendBuddyContentMessageToMids_args() {
    }

    public sendBuddyContentMessageToMids_args(
      String requestId,
      Message msg,
      byte[] content,
      Vector mids)
    {
      this();
      this.requestId = requestId;
      this.msg = msg;
      this.content = content;
      this.mids = mids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendBuddyContentMessageToMids_args(sendBuddyContentMessageToMids_args other) {
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
      if (other.isSetMsg()) {
        this.msg = new Message(other.msg);
      }
      if (other.isSetContent()) {
        this.content = new byte[other.content.length];
        System.arraycopy(other.content, 0, content, 0, other.content.length);
      }
      if (other.isSetMids()) {
        Vector __this__mids = new Vector();
        for (Enumeration other_enum = other.mids.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__mids.addElement(other_element);
        }
        this.mids = __this__mids;
      }
    }

    public sendBuddyContentMessageToMids_args deepCopy() {
      return new sendBuddyContentMessageToMids_args(this);
    }

    public void clear() {
      this.requestId = null;
      this.msg = null;
      this.content = null;
      this.mids = null;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public void setRequestId(String requestId) {
      this.requestId = requestId;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public Message getMsg() {
      return this.msg;
    }

    public void setMsg(Message msg) {
      this.msg = msg;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public byte[] getContent() {
      return this.content;
    }

    public void setContent(byte[] content) {
      this.content = content;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public int getMidsSize() {
      return (this.mids == null) ? 0 : this.mids.size();
    }

    public Enumeration getMidsEnumeration() {
      return (this.mids == null) ? null : this.mids.elements();
    }

    public void addToMids(String elem) {
      if (this.mids == null) {
        this.mids = new Vector();
      }
      this.mids.addElement(elem);
    }

    public Vector getMids() {
      return this.mids;
    }

    public void setMids(Vector mids) {
      this.mids = mids;
    }

    public void unsetMids() {
      this.mids = null;
    }

    /** Returns true if field mids is set (has been assigned a value) and false otherwise */
    public boolean isSetMids() {
      return this.mids != null;
    }

    public void setMidsIsSet(boolean value) {
      if (!value) {
        this.mids = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendBuddyContentMessageToMids_args)
        return this.equals((sendBuddyContentMessageToMids_args)that);
      return false;
    }

    public boolean equals(sendBuddyContentMessageToMids_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (TBaseHelper.compareTo(this.content, that.content) != 0)
          return false;
      }

      boolean this_present_mids = true && this.isSetMids();
      boolean that_present_mids = true && that.isSetMids();
      if (this_present_mids || that_present_mids) {
        if (!(this_present_mids && that_present_mids))
          return false;
        if (!this.mids.equals(that.mids))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendBuddyContentMessageToMids_args other = (sendBuddyContentMessageToMids_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMsg(), other.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = this.msg.compareTo(other.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetContent(), other.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = TBaseHelper.compareTo(this.content, other.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMids(), other.isSetMids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMids()) {
        lastComparison = TBaseHelper.compareTo(this.mids, other.mids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MSG
            if (field.type == TType.STRUCT) {
              this.msg = new Message();
              this.msg.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // CONTENT
            if (field.type == TType.STRING) {
              this.content = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // MIDS
            if (field.type == TType.LIST) {
              {
                TList _list599 = iprot.readListBegin();
                this.mids = new Vector(_list599.size);
                for (int _i600 = 0; _i600 < _list599.size; ++_i600)
                {
                  String _elem601;
                  _elem601 = iprot.readString();
                  this.mids.addElement(_elem601);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      if (this.msg != null) {
        oprot.writeFieldBegin(MSG_FIELD_DESC);
        this.msg.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeBinary(this.content);
        oprot.writeFieldEnd();
      }
      if (this.mids != null) {
        oprot.writeFieldBegin(MIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.mids.size()));
          for (Enumeration _iter602_enum = this.mids.elements(); _iter602_enum.hasMoreElements(); )           {
            String _iter602 = (String)_iter602_enum.nextElement();
            oprot.writeString(_iter602);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendBuddyContentMessageToMids_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.content, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mids:");
      if (this.mids == null) {
        sb.append("null");
      } else {
        sb.append(this.mids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendBuddyContentMessageToMids_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendBuddyContentMessageToMids_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private SendBuddyMessageResult success;
    private TalkException e;

    // isset id assignments

    public sendBuddyContentMessageToMids_result() {
    }

    public sendBuddyContentMessageToMids_result(
      SendBuddyMessageResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendBuddyContentMessageToMids_result(sendBuddyContentMessageToMids_result other) {
      if (other.isSetSuccess()) {
        this.success = new SendBuddyMessageResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public sendBuddyContentMessageToMids_result deepCopy() {
      return new sendBuddyContentMessageToMids_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public SendBuddyMessageResult getSuccess() {
      return this.success;
    }

    public void setSuccess(SendBuddyMessageResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendBuddyContentMessageToMids_result)
        return this.equals((sendBuddyContentMessageToMids_result)that);
      return false;
    }

    public boolean equals(sendBuddyContentMessageToMids_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendBuddyContentMessageToMids_result other = (sendBuddyContentMessageToMids_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new SendBuddyMessageResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendBuddyContentMessageToMids_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendBuddyContentMessageToMidsAsync_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendBuddyContentMessageToMidsAsync_args");

    private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);
    private static final TField MSG_FIELD_DESC = new TField("msg", TType.STRUCT, (short)2);
    private static final TField CONTENT_FIELD_DESC = new TField("content", TType.STRING, (short)3);
    private static final TField MIDS_FIELD_DESC = new TField("mids", TType.LIST, (short)4);

    private String requestId;
    private Message msg;
    private byte[] content;
    private Vector mids;

    // isset id assignments

    public sendBuddyContentMessageToMidsAsync_args() {
    }

    public sendBuddyContentMessageToMidsAsync_args(
      String requestId,
      Message msg,
      byte[] content,
      Vector mids)
    {
      this();
      this.requestId = requestId;
      this.msg = msg;
      this.content = content;
      this.mids = mids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendBuddyContentMessageToMidsAsync_args(sendBuddyContentMessageToMidsAsync_args other) {
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
      if (other.isSetMsg()) {
        this.msg = new Message(other.msg);
      }
      if (other.isSetContent()) {
        this.content = new byte[other.content.length];
        System.arraycopy(other.content, 0, content, 0, other.content.length);
      }
      if (other.isSetMids()) {
        Vector __this__mids = new Vector();
        for (Enumeration other_enum = other.mids.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__mids.addElement(other_element);
        }
        this.mids = __this__mids;
      }
    }

    public sendBuddyContentMessageToMidsAsync_args deepCopy() {
      return new sendBuddyContentMessageToMidsAsync_args(this);
    }

    public void clear() {
      this.requestId = null;
      this.msg = null;
      this.content = null;
      this.mids = null;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public void setRequestId(String requestId) {
      this.requestId = requestId;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public Message getMsg() {
      return this.msg;
    }

    public void setMsg(Message msg) {
      this.msg = msg;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public byte[] getContent() {
      return this.content;
    }

    public void setContent(byte[] content) {
      this.content = content;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public int getMidsSize() {
      return (this.mids == null) ? 0 : this.mids.size();
    }

    public Enumeration getMidsEnumeration() {
      return (this.mids == null) ? null : this.mids.elements();
    }

    public void addToMids(String elem) {
      if (this.mids == null) {
        this.mids = new Vector();
      }
      this.mids.addElement(elem);
    }

    public Vector getMids() {
      return this.mids;
    }

    public void setMids(Vector mids) {
      this.mids = mids;
    }

    public void unsetMids() {
      this.mids = null;
    }

    /** Returns true if field mids is set (has been assigned a value) and false otherwise */
    public boolean isSetMids() {
      return this.mids != null;
    }

    public void setMidsIsSet(boolean value) {
      if (!value) {
        this.mids = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendBuddyContentMessageToMidsAsync_args)
        return this.equals((sendBuddyContentMessageToMidsAsync_args)that);
      return false;
    }

    public boolean equals(sendBuddyContentMessageToMidsAsync_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (TBaseHelper.compareTo(this.content, that.content) != 0)
          return false;
      }

      boolean this_present_mids = true && this.isSetMids();
      boolean that_present_mids = true && that.isSetMids();
      if (this_present_mids || that_present_mids) {
        if (!(this_present_mids && that_present_mids))
          return false;
        if (!this.mids.equals(that.mids))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendBuddyContentMessageToMidsAsync_args other = (sendBuddyContentMessageToMidsAsync_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMsg(), other.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = this.msg.compareTo(other.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetContent(), other.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = TBaseHelper.compareTo(this.content, other.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMids(), other.isSetMids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMids()) {
        lastComparison = TBaseHelper.compareTo(this.mids, other.mids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MSG
            if (field.type == TType.STRUCT) {
              this.msg = new Message();
              this.msg.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // CONTENT
            if (field.type == TType.STRING) {
              this.content = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // MIDS
            if (field.type == TType.LIST) {
              {
                TList _list603 = iprot.readListBegin();
                this.mids = new Vector(_list603.size);
                for (int _i604 = 0; _i604 < _list603.size; ++_i604)
                {
                  String _elem605;
                  _elem605 = iprot.readString();
                  this.mids.addElement(_elem605);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      if (this.msg != null) {
        oprot.writeFieldBegin(MSG_FIELD_DESC);
        this.msg.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeBinary(this.content);
        oprot.writeFieldEnd();
      }
      if (this.mids != null) {
        oprot.writeFieldBegin(MIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.mids.size()));
          for (Enumeration _iter606_enum = this.mids.elements(); _iter606_enum.hasMoreElements(); )           {
            String _iter606 = (String)_iter606_enum.nextElement();
            oprot.writeString(_iter606);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendBuddyContentMessageToMidsAsync_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.content, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mids:");
      if (this.mids == null) {
        sb.append("null");
      } else {
        sb.append(this.mids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendBuddyContentMessageToMidsAsync_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendBuddyContentMessageToMidsAsync_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public sendBuddyContentMessageToMidsAsync_result() {
    }

    public sendBuddyContentMessageToMidsAsync_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendBuddyContentMessageToMidsAsync_result(sendBuddyContentMessageToMidsAsync_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public sendBuddyContentMessageToMidsAsync_result deepCopy() {
      return new sendBuddyContentMessageToMidsAsync_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendBuddyContentMessageToMidsAsync_result)
        return this.equals((sendBuddyContentMessageToMidsAsync_result)that);
      return false;
    }

    public boolean equals(sendBuddyContentMessageToMidsAsync_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendBuddyContentMessageToMidsAsync_result other = (sendBuddyContentMessageToMidsAsync_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendBuddyContentMessageToMidsAsync_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendBuddyMessageToAll_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendBuddyMessageToAll_args");

    private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);
    private static final TField MSG_FIELD_DESC = new TField("msg", TType.STRUCT, (short)2);

    private String requestId;
    private Message msg;

    // isset id assignments

    public sendBuddyMessageToAll_args() {
    }

    public sendBuddyMessageToAll_args(
      String requestId,
      Message msg)
    {
      this();
      this.requestId = requestId;
      this.msg = msg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendBuddyMessageToAll_args(sendBuddyMessageToAll_args other) {
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
      if (other.isSetMsg()) {
        this.msg = new Message(other.msg);
      }
    }

    public sendBuddyMessageToAll_args deepCopy() {
      return new sendBuddyMessageToAll_args(this);
    }

    public void clear() {
      this.requestId = null;
      this.msg = null;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public void setRequestId(String requestId) {
      this.requestId = requestId;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public Message getMsg() {
      return this.msg;
    }

    public void setMsg(Message msg) {
      this.msg = msg;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendBuddyMessageToAll_args)
        return this.equals((sendBuddyMessageToAll_args)that);
      return false;
    }

    public boolean equals(sendBuddyMessageToAll_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendBuddyMessageToAll_args other = (sendBuddyMessageToAll_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMsg(), other.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = this.msg.compareTo(other.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MSG
            if (field.type == TType.STRUCT) {
              this.msg = new Message();
              this.msg.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      if (this.msg != null) {
        oprot.writeFieldBegin(MSG_FIELD_DESC);
        this.msg.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendBuddyMessageToAll_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendBuddyMessageToAll_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendBuddyMessageToAll_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private SendBuddyMessageResult success;
    private TalkException e;

    // isset id assignments

    public sendBuddyMessageToAll_result() {
    }

    public sendBuddyMessageToAll_result(
      SendBuddyMessageResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendBuddyMessageToAll_result(sendBuddyMessageToAll_result other) {
      if (other.isSetSuccess()) {
        this.success = new SendBuddyMessageResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public sendBuddyMessageToAll_result deepCopy() {
      return new sendBuddyMessageToAll_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public SendBuddyMessageResult getSuccess() {
      return this.success;
    }

    public void setSuccess(SendBuddyMessageResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendBuddyMessageToAll_result)
        return this.equals((sendBuddyMessageToAll_result)that);
      return false;
    }

    public boolean equals(sendBuddyMessageToAll_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendBuddyMessageToAll_result other = (sendBuddyMessageToAll_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new SendBuddyMessageResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendBuddyMessageToAll_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendBuddyMessageToAllAsync_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendBuddyMessageToAllAsync_args");

    private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);
    private static final TField MSG_FIELD_DESC = new TField("msg", TType.STRUCT, (short)2);

    private String requestId;
    private Message msg;

    // isset id assignments

    public sendBuddyMessageToAllAsync_args() {
    }

    public sendBuddyMessageToAllAsync_args(
      String requestId,
      Message msg)
    {
      this();
      this.requestId = requestId;
      this.msg = msg;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendBuddyMessageToAllAsync_args(sendBuddyMessageToAllAsync_args other) {
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
      if (other.isSetMsg()) {
        this.msg = new Message(other.msg);
      }
    }

    public sendBuddyMessageToAllAsync_args deepCopy() {
      return new sendBuddyMessageToAllAsync_args(this);
    }

    public void clear() {
      this.requestId = null;
      this.msg = null;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public void setRequestId(String requestId) {
      this.requestId = requestId;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public Message getMsg() {
      return this.msg;
    }

    public void setMsg(Message msg) {
      this.msg = msg;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendBuddyMessageToAllAsync_args)
        return this.equals((sendBuddyMessageToAllAsync_args)that);
      return false;
    }

    public boolean equals(sendBuddyMessageToAllAsync_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendBuddyMessageToAllAsync_args other = (sendBuddyMessageToAllAsync_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMsg(), other.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = this.msg.compareTo(other.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MSG
            if (field.type == TType.STRUCT) {
              this.msg = new Message();
              this.msg.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      if (this.msg != null) {
        oprot.writeFieldBegin(MSG_FIELD_DESC);
        this.msg.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendBuddyMessageToAllAsync_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendBuddyMessageToAllAsync_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendBuddyMessageToAllAsync_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public sendBuddyMessageToAllAsync_result() {
    }

    public sendBuddyMessageToAllAsync_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendBuddyMessageToAllAsync_result(sendBuddyMessageToAllAsync_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public sendBuddyMessageToAllAsync_result deepCopy() {
      return new sendBuddyMessageToAllAsync_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendBuddyMessageToAllAsync_result)
        return this.equals((sendBuddyMessageToAllAsync_result)that);
      return false;
    }

    public boolean equals(sendBuddyMessageToAllAsync_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendBuddyMessageToAllAsync_result other = (sendBuddyMessageToAllAsync_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendBuddyMessageToAllAsync_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendBuddyMessageToMids_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendBuddyMessageToMids_args");

    private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);
    private static final TField MSG_FIELD_DESC = new TField("msg", TType.STRUCT, (short)2);
    private static final TField MIDS_FIELD_DESC = new TField("mids", TType.LIST, (short)3);

    private String requestId;
    private Message msg;
    private Vector mids;

    // isset id assignments

    public sendBuddyMessageToMids_args() {
    }

    public sendBuddyMessageToMids_args(
      String requestId,
      Message msg,
      Vector mids)
    {
      this();
      this.requestId = requestId;
      this.msg = msg;
      this.mids = mids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendBuddyMessageToMids_args(sendBuddyMessageToMids_args other) {
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
      if (other.isSetMsg()) {
        this.msg = new Message(other.msg);
      }
      if (other.isSetMids()) {
        Vector __this__mids = new Vector();
        for (Enumeration other_enum = other.mids.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__mids.addElement(other_element);
        }
        this.mids = __this__mids;
      }
    }

    public sendBuddyMessageToMids_args deepCopy() {
      return new sendBuddyMessageToMids_args(this);
    }

    public void clear() {
      this.requestId = null;
      this.msg = null;
      this.mids = null;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public void setRequestId(String requestId) {
      this.requestId = requestId;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public Message getMsg() {
      return this.msg;
    }

    public void setMsg(Message msg) {
      this.msg = msg;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public int getMidsSize() {
      return (this.mids == null) ? 0 : this.mids.size();
    }

    public Enumeration getMidsEnumeration() {
      return (this.mids == null) ? null : this.mids.elements();
    }

    public void addToMids(String elem) {
      if (this.mids == null) {
        this.mids = new Vector();
      }
      this.mids.addElement(elem);
    }

    public Vector getMids() {
      return this.mids;
    }

    public void setMids(Vector mids) {
      this.mids = mids;
    }

    public void unsetMids() {
      this.mids = null;
    }

    /** Returns true if field mids is set (has been assigned a value) and false otherwise */
    public boolean isSetMids() {
      return this.mids != null;
    }

    public void setMidsIsSet(boolean value) {
      if (!value) {
        this.mids = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendBuddyMessageToMids_args)
        return this.equals((sendBuddyMessageToMids_args)that);
      return false;
    }

    public boolean equals(sendBuddyMessageToMids_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      boolean this_present_mids = true && this.isSetMids();
      boolean that_present_mids = true && that.isSetMids();
      if (this_present_mids || that_present_mids) {
        if (!(this_present_mids && that_present_mids))
          return false;
        if (!this.mids.equals(that.mids))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendBuddyMessageToMids_args other = (sendBuddyMessageToMids_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMsg(), other.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = this.msg.compareTo(other.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMids(), other.isSetMids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMids()) {
        lastComparison = TBaseHelper.compareTo(this.mids, other.mids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MSG
            if (field.type == TType.STRUCT) {
              this.msg = new Message();
              this.msg.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // MIDS
            if (field.type == TType.LIST) {
              {
                TList _list607 = iprot.readListBegin();
                this.mids = new Vector(_list607.size);
                for (int _i608 = 0; _i608 < _list607.size; ++_i608)
                {
                  String _elem609;
                  _elem609 = iprot.readString();
                  this.mids.addElement(_elem609);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      if (this.msg != null) {
        oprot.writeFieldBegin(MSG_FIELD_DESC);
        this.msg.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.mids != null) {
        oprot.writeFieldBegin(MIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.mids.size()));
          for (Enumeration _iter610_enum = this.mids.elements(); _iter610_enum.hasMoreElements(); )           {
            String _iter610 = (String)_iter610_enum.nextElement();
            oprot.writeString(_iter610);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendBuddyMessageToMids_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mids:");
      if (this.mids == null) {
        sb.append("null");
      } else {
        sb.append(this.mids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendBuddyMessageToMids_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendBuddyMessageToMids_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private SendBuddyMessageResult success;
    private TalkException e;

    // isset id assignments

    public sendBuddyMessageToMids_result() {
    }

    public sendBuddyMessageToMids_result(
      SendBuddyMessageResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendBuddyMessageToMids_result(sendBuddyMessageToMids_result other) {
      if (other.isSetSuccess()) {
        this.success = new SendBuddyMessageResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public sendBuddyMessageToMids_result deepCopy() {
      return new sendBuddyMessageToMids_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public SendBuddyMessageResult getSuccess() {
      return this.success;
    }

    public void setSuccess(SendBuddyMessageResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendBuddyMessageToMids_result)
        return this.equals((sendBuddyMessageToMids_result)that);
      return false;
    }

    public boolean equals(sendBuddyMessageToMids_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendBuddyMessageToMids_result other = (sendBuddyMessageToMids_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new SendBuddyMessageResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendBuddyMessageToMids_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendBuddyMessageToMidsAsync_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendBuddyMessageToMidsAsync_args");

    private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);
    private static final TField MSG_FIELD_DESC = new TField("msg", TType.STRUCT, (short)2);
    private static final TField MIDS_FIELD_DESC = new TField("mids", TType.LIST, (short)3);

    private String requestId;
    private Message msg;
    private Vector mids;

    // isset id assignments

    public sendBuddyMessageToMidsAsync_args() {
    }

    public sendBuddyMessageToMidsAsync_args(
      String requestId,
      Message msg,
      Vector mids)
    {
      this();
      this.requestId = requestId;
      this.msg = msg;
      this.mids = mids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendBuddyMessageToMidsAsync_args(sendBuddyMessageToMidsAsync_args other) {
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
      if (other.isSetMsg()) {
        this.msg = new Message(other.msg);
      }
      if (other.isSetMids()) {
        Vector __this__mids = new Vector();
        for (Enumeration other_enum = other.mids.elements(); other_enum.hasMoreElements(); ) {
          String other_element = (String)other_enum.nextElement();
          __this__mids.addElement(other_element);
        }
        this.mids = __this__mids;
      }
    }

    public sendBuddyMessageToMidsAsync_args deepCopy() {
      return new sendBuddyMessageToMidsAsync_args(this);
    }

    public void clear() {
      this.requestId = null;
      this.msg = null;
      this.mids = null;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public void setRequestId(String requestId) {
      this.requestId = requestId;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public Message getMsg() {
      return this.msg;
    }

    public void setMsg(Message msg) {
      this.msg = msg;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public int getMidsSize() {
      return (this.mids == null) ? 0 : this.mids.size();
    }

    public Enumeration getMidsEnumeration() {
      return (this.mids == null) ? null : this.mids.elements();
    }

    public void addToMids(String elem) {
      if (this.mids == null) {
        this.mids = new Vector();
      }
      this.mids.addElement(elem);
    }

    public Vector getMids() {
      return this.mids;
    }

    public void setMids(Vector mids) {
      this.mids = mids;
    }

    public void unsetMids() {
      this.mids = null;
    }

    /** Returns true if field mids is set (has been assigned a value) and false otherwise */
    public boolean isSetMids() {
      return this.mids != null;
    }

    public void setMidsIsSet(boolean value) {
      if (!value) {
        this.mids = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendBuddyMessageToMidsAsync_args)
        return this.equals((sendBuddyMessageToMidsAsync_args)that);
      return false;
    }

    public boolean equals(sendBuddyMessageToMidsAsync_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      boolean this_present_mids = true && this.isSetMids();
      boolean that_present_mids = true && that.isSetMids();
      if (this_present_mids || that_present_mids) {
        if (!(this_present_mids && that_present_mids))
          return false;
        if (!this.mids.equals(that.mids))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendBuddyMessageToMidsAsync_args other = (sendBuddyMessageToMidsAsync_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMsg(), other.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = this.msg.compareTo(other.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMids(), other.isSetMids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMids()) {
        lastComparison = TBaseHelper.compareTo(this.mids, other.mids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MSG
            if (field.type == TType.STRUCT) {
              this.msg = new Message();
              this.msg.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // MIDS
            if (field.type == TType.LIST) {
              {
                TList _list611 = iprot.readListBegin();
                this.mids = new Vector(_list611.size);
                for (int _i612 = 0; _i612 < _list611.size; ++_i612)
                {
                  String _elem613;
                  _elem613 = iprot.readString();
                  this.mids.addElement(_elem613);
                }
                iprot.readListEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      if (this.msg != null) {
        oprot.writeFieldBegin(MSG_FIELD_DESC);
        this.msg.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.mids != null) {
        oprot.writeFieldBegin(MIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.STRING, this.mids.size()));
          for (Enumeration _iter614_enum = this.mids.elements(); _iter614_enum.hasMoreElements(); )           {
            String _iter614 = (String)_iter614_enum.nextElement();
            oprot.writeString(_iter614);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendBuddyMessageToMidsAsync_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mids:");
      if (this.mids == null) {
        sb.append("null");
      } else {
        sb.append(this.mids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendBuddyMessageToMidsAsync_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendBuddyMessageToMidsAsync_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public sendBuddyMessageToMidsAsync_result() {
    }

    public sendBuddyMessageToMidsAsync_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendBuddyMessageToMidsAsync_result(sendBuddyMessageToMidsAsync_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public sendBuddyMessageToMidsAsync_result deepCopy() {
      return new sendBuddyMessageToMidsAsync_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendBuddyMessageToMidsAsync_result)
        return this.equals((sendBuddyMessageToMidsAsync_result)that);
      return false;
    }

    public boolean equals(sendBuddyMessageToMidsAsync_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendBuddyMessageToMidsAsync_result other = (sendBuddyMessageToMidsAsync_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendBuddyMessageToMidsAsync_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendIndividualEventToAllAsync_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendIndividualEventToAllAsync_args");

    private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);
    private static final TField BUDDY_MID_FIELD_DESC = new TField("buddyMid", TType.STRING, (short)2);
    private static final TField NOTIFICATION_STATUS_FIELD_DESC = new TField("notificationStatus", TType.I32, (short)3);

    private String requestId;
    private String buddyMid;
    private NotificationStatus notificationStatus;

    // isset id assignments

    public sendIndividualEventToAllAsync_args() {
    }

    public sendIndividualEventToAllAsync_args(
      String requestId,
      String buddyMid,
      NotificationStatus notificationStatus)
    {
      this();
      this.requestId = requestId;
      this.buddyMid = buddyMid;
      this.notificationStatus = notificationStatus;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendIndividualEventToAllAsync_args(sendIndividualEventToAllAsync_args other) {
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
      if (other.isSetBuddyMid()) {
        this.buddyMid = other.buddyMid;
      }
      if (other.isSetNotificationStatus()) {
        this.notificationStatus = other.notificationStatus;
      }
    }

    public sendIndividualEventToAllAsync_args deepCopy() {
      return new sendIndividualEventToAllAsync_args(this);
    }

    public void clear() {
      this.requestId = null;
      this.buddyMid = null;
      this.notificationStatus = null;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public void setRequestId(String requestId) {
      this.requestId = requestId;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public String getBuddyMid() {
      return this.buddyMid;
    }

    public void setBuddyMid(String buddyMid) {
      this.buddyMid = buddyMid;
    }

    public void unsetBuddyMid() {
      this.buddyMid = null;
    }

    /** Returns true if field buddyMid is set (has been assigned a value) and false otherwise */
    public boolean isSetBuddyMid() {
      return this.buddyMid != null;
    }

    public void setBuddyMidIsSet(boolean value) {
      if (!value) {
        this.buddyMid = null;
      }
    }

    /**
     * 
     * @see NotificationStatus
     */
    public NotificationStatus getNotificationStatus() {
      return this.notificationStatus;
    }

    /**
     * 
     * @see NotificationStatus
     */
    public void setNotificationStatus(NotificationStatus notificationStatus) {
      this.notificationStatus = notificationStatus;
    }

    public void unsetNotificationStatus() {
      this.notificationStatus = null;
    }

    /** Returns true if field notificationStatus is set (has been assigned a value) and false otherwise */
    public boolean isSetNotificationStatus() {
      return this.notificationStatus != null;
    }

    public void setNotificationStatusIsSet(boolean value) {
      if (!value) {
        this.notificationStatus = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendIndividualEventToAllAsync_args)
        return this.equals((sendIndividualEventToAllAsync_args)that);
      return false;
    }

    public boolean equals(sendIndividualEventToAllAsync_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      boolean this_present_buddyMid = true && this.isSetBuddyMid();
      boolean that_present_buddyMid = true && that.isSetBuddyMid();
      if (this_present_buddyMid || that_present_buddyMid) {
        if (!(this_present_buddyMid && that_present_buddyMid))
          return false;
        if (!this.buddyMid.equals(that.buddyMid))
          return false;
      }

      boolean this_present_notificationStatus = true && this.isSetNotificationStatus();
      boolean that_present_notificationStatus = true && that.isSetNotificationStatus();
      if (this_present_notificationStatus || that_present_notificationStatus) {
        if (!(this_present_notificationStatus && that_present_notificationStatus))
          return false;
        if (!this.notificationStatus.equals(that.notificationStatus))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendIndividualEventToAllAsync_args other = (sendIndividualEventToAllAsync_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetBuddyMid(), other.isSetBuddyMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBuddyMid()) {
        lastComparison = TBaseHelper.compareTo(this.buddyMid, other.buddyMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetNotificationStatus(), other.isSetNotificationStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNotificationStatus()) {
        lastComparison = TBaseHelper.compareTo(this.notificationStatus, other.notificationStatus);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // BUDDY_MID
            if (field.type == TType.STRING) {
              this.buddyMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // NOTIFICATION_STATUS
            if (field.type == TType.I32) {
              this.notificationStatus = NotificationStatus.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      if (this.buddyMid != null) {
        oprot.writeFieldBegin(BUDDY_MID_FIELD_DESC);
        oprot.writeString(this.buddyMid);
        oprot.writeFieldEnd();
      }
      if (this.notificationStatus != null) {
        oprot.writeFieldBegin(NOTIFICATION_STATUS_FIELD_DESC);
        oprot.writeI32(this.notificationStatus.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendIndividualEventToAllAsync_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("buddyMid:");
      if (this.buddyMid == null) {
        sb.append("null");
      } else {
        sb.append(this.buddyMid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("notificationStatus:");
      if (this.notificationStatus == null) {
        sb.append("null");
      } else {
        sb.append(this.notificationStatus);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendIndividualEventToAllAsync_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendIndividualEventToAllAsync_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public sendIndividualEventToAllAsync_result() {
    }

    public sendIndividualEventToAllAsync_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendIndividualEventToAllAsync_result(sendIndividualEventToAllAsync_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public sendIndividualEventToAllAsync_result deepCopy() {
      return new sendIndividualEventToAllAsync_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendIndividualEventToAllAsync_result)
        return this.equals((sendIndividualEventToAllAsync_result)that);
      return false;
    }

    public boolean equals(sendIndividualEventToAllAsync_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendIndividualEventToAllAsync_result other = (sendIndividualEventToAllAsync_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendIndividualEventToAllAsync_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class setBuddyOnAir_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("setBuddyOnAir_args");

    private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);
    private static final TField ON_AIR_FIELD_DESC = new TField("onAir", TType.BOOL, (short)2);

    private String requestId;
    private boolean onAir;

    // isset id assignments
    private static final int __ONAIR_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public setBuddyOnAir_args() {
    }

    public setBuddyOnAir_args(
      String requestId,
      boolean onAir)
    {
      this();
      this.requestId = requestId;
      this.onAir = onAir;
      setOnAirIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setBuddyOnAir_args(setBuddyOnAir_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
      this.onAir = other.onAir;
    }

    public setBuddyOnAir_args deepCopy() {
      return new setBuddyOnAir_args(this);
    }

    public void clear() {
      this.requestId = null;
      setOnAirIsSet(false);
      this.onAir = false;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public void setRequestId(String requestId) {
      this.requestId = requestId;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public boolean isOnAir() {
      return this.onAir;
    }

    public void setOnAir(boolean onAir) {
      this.onAir = onAir;
      setOnAirIsSet(true);
    }

    public void unsetOnAir() {
      __isset_vector[__ONAIR_ISSET_ID] = false;
    }

    /** Returns true if field onAir is set (has been assigned a value) and false otherwise */
    public boolean isSetOnAir() {
      return __isset_vector[__ONAIR_ISSET_ID];
    }

    public void setOnAirIsSet(boolean value) {
      __isset_vector[__ONAIR_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setBuddyOnAir_args)
        return this.equals((setBuddyOnAir_args)that);
      return false;
    }

    public boolean equals(setBuddyOnAir_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      boolean this_present_onAir = true;
      boolean that_present_onAir = true;
      if (this_present_onAir || that_present_onAir) {
        if (!(this_present_onAir && that_present_onAir))
          return false;
        if (this.onAir != that.onAir)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      setBuddyOnAir_args other = (setBuddyOnAir_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetOnAir(), other.isSetOnAir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOnAir()) {
        lastComparison = TBaseHelper.compareTo(this.onAir, other.onAir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ON_AIR
            if (field.type == TType.BOOL) {
              this.onAir = iprot.readBool();
              setOnAirIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ON_AIR_FIELD_DESC);
      oprot.writeBool(this.onAir);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("setBuddyOnAir_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("onAir:");
      sb.append(this.onAir);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class setBuddyOnAir_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("setBuddyOnAir_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private SetBuddyOnAirResult success;
    private TalkException e;

    // isset id assignments

    public setBuddyOnAir_result() {
    }

    public setBuddyOnAir_result(
      SetBuddyOnAirResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setBuddyOnAir_result(setBuddyOnAir_result other) {
      if (other.isSetSuccess()) {
        this.success = new SetBuddyOnAirResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public setBuddyOnAir_result deepCopy() {
      return new setBuddyOnAir_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public SetBuddyOnAirResult getSuccess() {
      return this.success;
    }

    public void setSuccess(SetBuddyOnAirResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setBuddyOnAir_result)
        return this.equals((setBuddyOnAir_result)that);
      return false;
    }

    public boolean equals(setBuddyOnAir_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      setBuddyOnAir_result other = (setBuddyOnAir_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new SetBuddyOnAirResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("setBuddyOnAir_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class setBuddyOnAirAsync_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("setBuddyOnAirAsync_args");

    private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);
    private static final TField ON_AIR_FIELD_DESC = new TField("onAir", TType.BOOL, (short)2);

    private String requestId;
    private boolean onAir;

    // isset id assignments
    private static final int __ONAIR_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public setBuddyOnAirAsync_args() {
    }

    public setBuddyOnAirAsync_args(
      String requestId,
      boolean onAir)
    {
      this();
      this.requestId = requestId;
      this.onAir = onAir;
      setOnAirIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setBuddyOnAirAsync_args(setBuddyOnAirAsync_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
      this.onAir = other.onAir;
    }

    public setBuddyOnAirAsync_args deepCopy() {
      return new setBuddyOnAirAsync_args(this);
    }

    public void clear() {
      this.requestId = null;
      setOnAirIsSet(false);
      this.onAir = false;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public void setRequestId(String requestId) {
      this.requestId = requestId;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public boolean isOnAir() {
      return this.onAir;
    }

    public void setOnAir(boolean onAir) {
      this.onAir = onAir;
      setOnAirIsSet(true);
    }

    public void unsetOnAir() {
      __isset_vector[__ONAIR_ISSET_ID] = false;
    }

    /** Returns true if field onAir is set (has been assigned a value) and false otherwise */
    public boolean isSetOnAir() {
      return __isset_vector[__ONAIR_ISSET_ID];
    }

    public void setOnAirIsSet(boolean value) {
      __isset_vector[__ONAIR_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setBuddyOnAirAsync_args)
        return this.equals((setBuddyOnAirAsync_args)that);
      return false;
    }

    public boolean equals(setBuddyOnAirAsync_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      boolean this_present_onAir = true;
      boolean that_present_onAir = true;
      if (this_present_onAir || that_present_onAir) {
        if (!(this_present_onAir && that_present_onAir))
          return false;
        if (this.onAir != that.onAir)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      setBuddyOnAirAsync_args other = (setBuddyOnAirAsync_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetOnAir(), other.isSetOnAir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOnAir()) {
        lastComparison = TBaseHelper.compareTo(this.onAir, other.onAir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ON_AIR
            if (field.type == TType.BOOL) {
              this.onAir = iprot.readBool();
              setOnAirIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ON_AIR_FIELD_DESC);
      oprot.writeBool(this.onAir);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("setBuddyOnAirAsync_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("onAir:");
      sb.append(this.onAir);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class setBuddyOnAirAsync_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("setBuddyOnAirAsync_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public setBuddyOnAirAsync_result() {
    }

    public setBuddyOnAirAsync_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setBuddyOnAirAsync_result(setBuddyOnAirAsync_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public setBuddyOnAirAsync_result deepCopy() {
      return new setBuddyOnAirAsync_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setBuddyOnAirAsync_result)
        return this.equals((setBuddyOnAirAsync_result)that);
      return false;
    }

    public boolean equals(setBuddyOnAirAsync_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      setBuddyOnAirAsync_result other = (setBuddyOnAirAsync_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("setBuddyOnAirAsync_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class storeMessage_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("storeMessage_args");

    private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);
    private static final TField MESSAGE_REQUEST_FIELD_DESC = new TField("messageRequest", TType.STRUCT, (short)2);

    private String requestId;
    private BuddyMessageRequest messageRequest;

    // isset id assignments

    public storeMessage_args() {
    }

    public storeMessage_args(
      String requestId,
      BuddyMessageRequest messageRequest)
    {
      this();
      this.requestId = requestId;
      this.messageRequest = messageRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeMessage_args(storeMessage_args other) {
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
      if (other.isSetMessageRequest()) {
        this.messageRequest = new BuddyMessageRequest(other.messageRequest);
      }
    }

    public storeMessage_args deepCopy() {
      return new storeMessage_args(this);
    }

    public void clear() {
      this.requestId = null;
      this.messageRequest = null;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public void setRequestId(String requestId) {
      this.requestId = requestId;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public BuddyMessageRequest getMessageRequest() {
      return this.messageRequest;
    }

    public void setMessageRequest(BuddyMessageRequest messageRequest) {
      this.messageRequest = messageRequest;
    }

    public void unsetMessageRequest() {
      this.messageRequest = null;
    }

    /** Returns true if field messageRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageRequest() {
      return this.messageRequest != null;
    }

    public void setMessageRequestIsSet(boolean value) {
      if (!value) {
        this.messageRequest = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeMessage_args)
        return this.equals((storeMessage_args)that);
      return false;
    }

    public boolean equals(storeMessage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      boolean this_present_messageRequest = true && this.isSetMessageRequest();
      boolean that_present_messageRequest = true && that.isSetMessageRequest();
      if (this_present_messageRequest || that_present_messageRequest) {
        if (!(this_present_messageRequest && that_present_messageRequest))
          return false;
        if (!this.messageRequest.equals(that.messageRequest))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      storeMessage_args other = (storeMessage_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMessageRequest(), other.isSetMessageRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageRequest()) {
        lastComparison = this.messageRequest.compareTo(other.messageRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MESSAGE_REQUEST
            if (field.type == TType.STRUCT) {
              this.messageRequest = new BuddyMessageRequest();
              this.messageRequest.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      if (this.messageRequest != null) {
        oprot.writeFieldBegin(MESSAGE_REQUEST_FIELD_DESC);
        this.messageRequest.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("storeMessage_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("messageRequest:");
      if (this.messageRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.messageRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class storeMessage_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("storeMessage_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private SendBuddyMessageResult success;
    private TalkException e;

    // isset id assignments

    public storeMessage_result() {
    }

    public storeMessage_result(
      SendBuddyMessageResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public storeMessage_result(storeMessage_result other) {
      if (other.isSetSuccess()) {
        this.success = new SendBuddyMessageResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public storeMessage_result deepCopy() {
      return new storeMessage_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public SendBuddyMessageResult getSuccess() {
      return this.success;
    }

    public void setSuccess(SendBuddyMessageResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof storeMessage_result)
        return this.equals((storeMessage_result)that);
      return false;
    }

    public boolean equals(storeMessage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      storeMessage_result other = (storeMessage_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new SendBuddyMessageResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("storeMessage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class unblockBuddyMember_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("unblockBuddyMember_args");

    private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);
    private static final TField MID_FIELD_DESC = new TField("mid", TType.STRING, (short)2);

    private String requestId;
    private String mid;

    // isset id assignments

    public unblockBuddyMember_args() {
    }

    public unblockBuddyMember_args(
      String requestId,
      String mid)
    {
      this();
      this.requestId = requestId;
      this.mid = mid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unblockBuddyMember_args(unblockBuddyMember_args other) {
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
      if (other.isSetMid()) {
        this.mid = other.mid;
      }
    }

    public unblockBuddyMember_args deepCopy() {
      return new unblockBuddyMember_args(this);
    }

    public void clear() {
      this.requestId = null;
      this.mid = null;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public void setRequestId(String requestId) {
      this.requestId = requestId;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public String getMid() {
      return this.mid;
    }

    public void setMid(String mid) {
      this.mid = mid;
    }

    public void unsetMid() {
      this.mid = null;
    }

    /** Returns true if field mid is set (has been assigned a value) and false otherwise */
    public boolean isSetMid() {
      return this.mid != null;
    }

    public void setMidIsSet(boolean value) {
      if (!value) {
        this.mid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unblockBuddyMember_args)
        return this.equals((unblockBuddyMember_args)that);
      return false;
    }

    public boolean equals(unblockBuddyMember_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      boolean this_present_mid = true && this.isSetMid();
      boolean that_present_mid = true && that.isSetMid();
      if (this_present_mid || that_present_mid) {
        if (!(this_present_mid && that_present_mid))
          return false;
        if (!this.mid.equals(that.mid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      unblockBuddyMember_args other = (unblockBuddyMember_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMid(), other.isSetMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMid()) {
        lastComparison = TBaseHelper.compareTo(this.mid, other.mid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MID
            if (field.type == TType.STRING) {
              this.mid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      if (this.mid != null) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeString(this.mid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("unblockBuddyMember_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mid:");
      if (this.mid == null) {
        sb.append("null");
      } else {
        sb.append(this.mid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class unblockBuddyMember_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("unblockBuddyMember_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public unblockBuddyMember_result() {
    }

    public unblockBuddyMember_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unblockBuddyMember_result(unblockBuddyMember_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public unblockBuddyMember_result deepCopy() {
      return new unblockBuddyMember_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unblockBuddyMember_result)
        return this.equals((unblockBuddyMember_result)that);
      return false;
    }

    public boolean equals(unblockBuddyMember_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      unblockBuddyMember_result other = (unblockBuddyMember_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("unblockBuddyMember_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class unregisterBuddy_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("unregisterBuddy_args");

    private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);

    private String requestId;

    // isset id assignments

    public unregisterBuddy_args() {
    }

    public unregisterBuddy_args(
      String requestId)
    {
      this();
      this.requestId = requestId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unregisterBuddy_args(unregisterBuddy_args other) {
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
    }

    public unregisterBuddy_args deepCopy() {
      return new unregisterBuddy_args(this);
    }

    public void clear() {
      this.requestId = null;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public void setRequestId(String requestId) {
      this.requestId = requestId;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unregisterBuddy_args)
        return this.equals((unregisterBuddy_args)that);
      return false;
    }

    public boolean equals(unregisterBuddy_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      unregisterBuddy_args other = (unregisterBuddy_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("unregisterBuddy_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class unregisterBuddy_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("unregisterBuddy_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public unregisterBuddy_result() {
    }

    public unregisterBuddy_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unregisterBuddy_result(unregisterBuddy_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public unregisterBuddy_result deepCopy() {
      return new unregisterBuddy_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unregisterBuddy_result)
        return this.equals((unregisterBuddy_result)that);
      return false;
    }

    public boolean equals(unregisterBuddy_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      unregisterBuddy_result other = (unregisterBuddy_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("unregisterBuddy_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class unregisterBuddyAdmin_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("unregisterBuddyAdmin_args");

    private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);

    private String requestId;

    // isset id assignments

    public unregisterBuddyAdmin_args() {
    }

    public unregisterBuddyAdmin_args(
      String requestId)
    {
      this();
      this.requestId = requestId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unregisterBuddyAdmin_args(unregisterBuddyAdmin_args other) {
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
    }

    public unregisterBuddyAdmin_args deepCopy() {
      return new unregisterBuddyAdmin_args(this);
    }

    public void clear() {
      this.requestId = null;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public void setRequestId(String requestId) {
      this.requestId = requestId;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unregisterBuddyAdmin_args)
        return this.equals((unregisterBuddyAdmin_args)that);
      return false;
    }

    public boolean equals(unregisterBuddyAdmin_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      unregisterBuddyAdmin_args other = (unregisterBuddyAdmin_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("unregisterBuddyAdmin_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class unregisterBuddyAdmin_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("unregisterBuddyAdmin_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public unregisterBuddyAdmin_result() {
    }

    public unregisterBuddyAdmin_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unregisterBuddyAdmin_result(unregisterBuddyAdmin_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public unregisterBuddyAdmin_result deepCopy() {
      return new unregisterBuddyAdmin_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unregisterBuddyAdmin_result)
        return this.equals((unregisterBuddyAdmin_result)that);
      return false;
    }

    public boolean equals(unregisterBuddyAdmin_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      unregisterBuddyAdmin_result other = (unregisterBuddyAdmin_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("unregisterBuddyAdmin_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateBuddyAdminProfileAttribute_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateBuddyAdminProfileAttribute_args");

    private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);
    private static final TField ATTRIBUTES_FIELD_DESC = new TField("attributes", TType.MAP, (short)2);

    private String requestId;
    private Hashtable attributes;

    // isset id assignments

    public updateBuddyAdminProfileAttribute_args() {
    }

    public updateBuddyAdminProfileAttribute_args(
      String requestId,
      Hashtable attributes)
    {
      this();
      this.requestId = requestId;
      this.attributes = attributes;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBuddyAdminProfileAttribute_args(updateBuddyAdminProfileAttribute_args other) {
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
      if (other.isSetAttributes()) {
        Hashtable __this__attributes = new Hashtable();
        for (Enumeration other_enum = other.attributes.keys(); other_enum.hasMoreElements(); ) {

          String other_element_key = (String)other_enum.nextElement();
          String other_element_value = (String)other.attributes.get(other_element_key);

          String __this__attributes_copy_key = other_element_key;

          String __this__attributes_copy_value = other_element_value;

          __this__attributes.put(__this__attributes_copy_key, __this__attributes_copy_value);
        }
        this.attributes = __this__attributes;
      }
    }

    public updateBuddyAdminProfileAttribute_args deepCopy() {
      return new updateBuddyAdminProfileAttribute_args(this);
    }

    public void clear() {
      this.requestId = null;
      this.attributes = null;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public void setRequestId(String requestId) {
      this.requestId = requestId;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public int getAttributesSize() {
      return (this.attributes == null) ? 0 : this.attributes.size();
    }

    public void putToAttributes(String key, String val) {
      if (this.attributes == null) {
        this.attributes = new Hashtable();
      }
      this.attributes.put(key, val);
    }

    public Hashtable getAttributes() {
      return this.attributes;
    }

    public void setAttributes(Hashtable attributes) {
      this.attributes = attributes;
    }

    public void unsetAttributes() {
      this.attributes = null;
    }

    /** Returns true if field attributes is set (has been assigned a value) and false otherwise */
    public boolean isSetAttributes() {
      return this.attributes != null;
    }

    public void setAttributesIsSet(boolean value) {
      if (!value) {
        this.attributes = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBuddyAdminProfileAttribute_args)
        return this.equals((updateBuddyAdminProfileAttribute_args)that);
      return false;
    }

    public boolean equals(updateBuddyAdminProfileAttribute_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      boolean this_present_attributes = true && this.isSetAttributes();
      boolean that_present_attributes = true && that.isSetAttributes();
      if (this_present_attributes || that_present_attributes) {
        if (!(this_present_attributes && that_present_attributes))
          return false;
        if (!this.attributes.equals(that.attributes))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateBuddyAdminProfileAttribute_args other = (updateBuddyAdminProfileAttribute_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetAttributes(), other.isSetAttributes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttributes()) {
        lastComparison = TBaseHelper.compareTo(this.attributes, other.attributes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ATTRIBUTES
            if (field.type == TType.MAP) {
              {
                TMap _map615 = iprot.readMapBegin();
                this.attributes = new Hashtable(2*_map615.size);
                for (int _i616 = 0; _i616 < _map615.size; ++_i616)
                {
                  String _key617;
                  String _val618;
                  _key617 = iprot.readString();
                  _val618 = iprot.readString();
                  this.attributes.put(_key617, _val618);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      if (this.attributes != null) {
        oprot.writeFieldBegin(ATTRIBUTES_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.attributes.size()));
          for (Enumeration _iter619_enum = this.attributes.keys(); _iter619_enum.hasMoreElements(); )           {
            String _iter619 = (String)_iter619_enum.nextElement();
            oprot.writeString(_iter619);
            oprot.writeString(((String)this.attributes.get(_iter619)));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateBuddyAdminProfileAttribute_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attributes:");
      if (this.attributes == null) {
        sb.append("null");
      } else {
        sb.append(this.attributes);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateBuddyAdminProfileAttribute_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateBuddyAdminProfileAttribute_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public updateBuddyAdminProfileAttribute_result() {
    }

    public updateBuddyAdminProfileAttribute_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBuddyAdminProfileAttribute_result(updateBuddyAdminProfileAttribute_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public updateBuddyAdminProfileAttribute_result deepCopy() {
      return new updateBuddyAdminProfileAttribute_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBuddyAdminProfileAttribute_result)
        return this.equals((updateBuddyAdminProfileAttribute_result)that);
      return false;
    }

    public boolean equals(updateBuddyAdminProfileAttribute_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateBuddyAdminProfileAttribute_result other = (updateBuddyAdminProfileAttribute_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateBuddyAdminProfileAttribute_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateBuddyAdminProfileImage_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateBuddyAdminProfileImage_args");

    private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);
    private static final TField PICTURE_FIELD_DESC = new TField("picture", TType.STRING, (short)2);

    private String requestId;
    private byte[] picture;

    // isset id assignments

    public updateBuddyAdminProfileImage_args() {
    }

    public updateBuddyAdminProfileImage_args(
      String requestId,
      byte[] picture)
    {
      this();
      this.requestId = requestId;
      this.picture = picture;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBuddyAdminProfileImage_args(updateBuddyAdminProfileImage_args other) {
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
      if (other.isSetPicture()) {
        this.picture = new byte[other.picture.length];
        System.arraycopy(other.picture, 0, picture, 0, other.picture.length);
      }
    }

    public updateBuddyAdminProfileImage_args deepCopy() {
      return new updateBuddyAdminProfileImage_args(this);
    }

    public void clear() {
      this.requestId = null;
      this.picture = null;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public void setRequestId(String requestId) {
      this.requestId = requestId;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public byte[] getPicture() {
      return this.picture;
    }

    public void setPicture(byte[] picture) {
      this.picture = picture;
    }

    public void unsetPicture() {
      this.picture = null;
    }

    /** Returns true if field picture is set (has been assigned a value) and false otherwise */
    public boolean isSetPicture() {
      return this.picture != null;
    }

    public void setPictureIsSet(boolean value) {
      if (!value) {
        this.picture = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBuddyAdminProfileImage_args)
        return this.equals((updateBuddyAdminProfileImage_args)that);
      return false;
    }

    public boolean equals(updateBuddyAdminProfileImage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      boolean this_present_picture = true && this.isSetPicture();
      boolean that_present_picture = true && that.isSetPicture();
      if (this_present_picture || that_present_picture) {
        if (!(this_present_picture && that_present_picture))
          return false;
        if (TBaseHelper.compareTo(this.picture, that.picture) != 0)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateBuddyAdminProfileImage_args other = (updateBuddyAdminProfileImage_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPicture(), other.isSetPicture());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPicture()) {
        lastComparison = TBaseHelper.compareTo(this.picture, other.picture);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // PICTURE
            if (field.type == TType.STRING) {
              this.picture = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      if (this.picture != null) {
        oprot.writeFieldBegin(PICTURE_FIELD_DESC);
        oprot.writeBinary(this.picture);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateBuddyAdminProfileImage_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("picture:");
      if (this.picture == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.picture, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateBuddyAdminProfileImage_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateBuddyAdminProfileImage_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public updateBuddyAdminProfileImage_result() {
    }

    public updateBuddyAdminProfileImage_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBuddyAdminProfileImage_result(updateBuddyAdminProfileImage_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public updateBuddyAdminProfileImage_result deepCopy() {
      return new updateBuddyAdminProfileImage_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBuddyAdminProfileImage_result)
        return this.equals((updateBuddyAdminProfileImage_result)that);
      return false;
    }

    public boolean equals(updateBuddyAdminProfileImage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateBuddyAdminProfileImage_result other = (updateBuddyAdminProfileImage_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateBuddyAdminProfileImage_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateBuddyProfileAttributes_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateBuddyProfileAttributes_args");

    private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);
    private static final TField ATTRIBUTES_FIELD_DESC = new TField("attributes", TType.MAP, (short)2);

    private String requestId;
    private Hashtable attributes;

    // isset id assignments

    public updateBuddyProfileAttributes_args() {
    }

    public updateBuddyProfileAttributes_args(
      String requestId,
      Hashtable attributes)
    {
      this();
      this.requestId = requestId;
      this.attributes = attributes;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBuddyProfileAttributes_args(updateBuddyProfileAttributes_args other) {
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
      if (other.isSetAttributes()) {
        Hashtable __this__attributes = new Hashtable();
        for (Enumeration other_enum = other.attributes.keys(); other_enum.hasMoreElements(); ) {

          String other_element_key = (String)other_enum.nextElement();
          String other_element_value = (String)other.attributes.get(other_element_key);

          String __this__attributes_copy_key = other_element_key;

          String __this__attributes_copy_value = other_element_value;

          __this__attributes.put(__this__attributes_copy_key, __this__attributes_copy_value);
        }
        this.attributes = __this__attributes;
      }
    }

    public updateBuddyProfileAttributes_args deepCopy() {
      return new updateBuddyProfileAttributes_args(this);
    }

    public void clear() {
      this.requestId = null;
      this.attributes = null;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public void setRequestId(String requestId) {
      this.requestId = requestId;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public int getAttributesSize() {
      return (this.attributes == null) ? 0 : this.attributes.size();
    }

    public void putToAttributes(String key, String val) {
      if (this.attributes == null) {
        this.attributes = new Hashtable();
      }
      this.attributes.put(key, val);
    }

    public Hashtable getAttributes() {
      return this.attributes;
    }

    public void setAttributes(Hashtable attributes) {
      this.attributes = attributes;
    }

    public void unsetAttributes() {
      this.attributes = null;
    }

    /** Returns true if field attributes is set (has been assigned a value) and false otherwise */
    public boolean isSetAttributes() {
      return this.attributes != null;
    }

    public void setAttributesIsSet(boolean value) {
      if (!value) {
        this.attributes = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBuddyProfileAttributes_args)
        return this.equals((updateBuddyProfileAttributes_args)that);
      return false;
    }

    public boolean equals(updateBuddyProfileAttributes_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      boolean this_present_attributes = true && this.isSetAttributes();
      boolean that_present_attributes = true && that.isSetAttributes();
      if (this_present_attributes || that_present_attributes) {
        if (!(this_present_attributes && that_present_attributes))
          return false;
        if (!this.attributes.equals(that.attributes))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateBuddyProfileAttributes_args other = (updateBuddyProfileAttributes_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetAttributes(), other.isSetAttributes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttributes()) {
        lastComparison = TBaseHelper.compareTo(this.attributes, other.attributes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ATTRIBUTES
            if (field.type == TType.MAP) {
              {
                TMap _map620 = iprot.readMapBegin();
                this.attributes = new Hashtable(2*_map620.size);
                for (int _i621 = 0; _i621 < _map620.size; ++_i621)
                {
                  String _key622;
                  String _val623;
                  _key622 = iprot.readString();
                  _val623 = iprot.readString();
                  this.attributes.put(_key622, _val623);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      if (this.attributes != null) {
        oprot.writeFieldBegin(ATTRIBUTES_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.attributes.size()));
          for (Enumeration _iter624_enum = this.attributes.keys(); _iter624_enum.hasMoreElements(); )           {
            String _iter624 = (String)_iter624_enum.nextElement();
            oprot.writeString(_iter624);
            oprot.writeString(((String)this.attributes.get(_iter624)));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateBuddyProfileAttributes_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attributes:");
      if (this.attributes == null) {
        sb.append("null");
      } else {
        sb.append(this.attributes);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateBuddyProfileAttributes_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateBuddyProfileAttributes_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private UpdateBuddyProfileResult success;
    private TalkException e;

    // isset id assignments

    public updateBuddyProfileAttributes_result() {
    }

    public updateBuddyProfileAttributes_result(
      UpdateBuddyProfileResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBuddyProfileAttributes_result(updateBuddyProfileAttributes_result other) {
      if (other.isSetSuccess()) {
        this.success = new UpdateBuddyProfileResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public updateBuddyProfileAttributes_result deepCopy() {
      return new updateBuddyProfileAttributes_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public UpdateBuddyProfileResult getSuccess() {
      return this.success;
    }

    public void setSuccess(UpdateBuddyProfileResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBuddyProfileAttributes_result)
        return this.equals((updateBuddyProfileAttributes_result)that);
      return false;
    }

    public boolean equals(updateBuddyProfileAttributes_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateBuddyProfileAttributes_result other = (updateBuddyProfileAttributes_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new UpdateBuddyProfileResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateBuddyProfileAttributes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateBuddyProfileAttributesAsync_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateBuddyProfileAttributesAsync_args");

    private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);
    private static final TField ATTRIBUTES_FIELD_DESC = new TField("attributes", TType.MAP, (short)2);

    private String requestId;
    private Hashtable attributes;

    // isset id assignments

    public updateBuddyProfileAttributesAsync_args() {
    }

    public updateBuddyProfileAttributesAsync_args(
      String requestId,
      Hashtable attributes)
    {
      this();
      this.requestId = requestId;
      this.attributes = attributes;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBuddyProfileAttributesAsync_args(updateBuddyProfileAttributesAsync_args other) {
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
      if (other.isSetAttributes()) {
        Hashtable __this__attributes = new Hashtable();
        for (Enumeration other_enum = other.attributes.keys(); other_enum.hasMoreElements(); ) {

          String other_element_key = (String)other_enum.nextElement();
          String other_element_value = (String)other.attributes.get(other_element_key);

          String __this__attributes_copy_key = other_element_key;

          String __this__attributes_copy_value = other_element_value;

          __this__attributes.put(__this__attributes_copy_key, __this__attributes_copy_value);
        }
        this.attributes = __this__attributes;
      }
    }

    public updateBuddyProfileAttributesAsync_args deepCopy() {
      return new updateBuddyProfileAttributesAsync_args(this);
    }

    public void clear() {
      this.requestId = null;
      this.attributes = null;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public void setRequestId(String requestId) {
      this.requestId = requestId;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public int getAttributesSize() {
      return (this.attributes == null) ? 0 : this.attributes.size();
    }

    public void putToAttributes(String key, String val) {
      if (this.attributes == null) {
        this.attributes = new Hashtable();
      }
      this.attributes.put(key, val);
    }

    public Hashtable getAttributes() {
      return this.attributes;
    }

    public void setAttributes(Hashtable attributes) {
      this.attributes = attributes;
    }

    public void unsetAttributes() {
      this.attributes = null;
    }

    /** Returns true if field attributes is set (has been assigned a value) and false otherwise */
    public boolean isSetAttributes() {
      return this.attributes != null;
    }

    public void setAttributesIsSet(boolean value) {
      if (!value) {
        this.attributes = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBuddyProfileAttributesAsync_args)
        return this.equals((updateBuddyProfileAttributesAsync_args)that);
      return false;
    }

    public boolean equals(updateBuddyProfileAttributesAsync_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      boolean this_present_attributes = true && this.isSetAttributes();
      boolean that_present_attributes = true && that.isSetAttributes();
      if (this_present_attributes || that_present_attributes) {
        if (!(this_present_attributes && that_present_attributes))
          return false;
        if (!this.attributes.equals(that.attributes))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateBuddyProfileAttributesAsync_args other = (updateBuddyProfileAttributesAsync_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetAttributes(), other.isSetAttributes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttributes()) {
        lastComparison = TBaseHelper.compareTo(this.attributes, other.attributes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // ATTRIBUTES
            if (field.type == TType.MAP) {
              {
                TMap _map625 = iprot.readMapBegin();
                this.attributes = new Hashtable(2*_map625.size);
                for (int _i626 = 0; _i626 < _map625.size; ++_i626)
                {
                  String _key627;
                  String _val628;
                  _key627 = iprot.readString();
                  _val628 = iprot.readString();
                  this.attributes.put(_key627, _val628);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      if (this.attributes != null) {
        oprot.writeFieldBegin(ATTRIBUTES_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.attributes.size()));
          for (Enumeration _iter629_enum = this.attributes.keys(); _iter629_enum.hasMoreElements(); )           {
            String _iter629 = (String)_iter629_enum.nextElement();
            oprot.writeString(_iter629);
            oprot.writeString(((String)this.attributes.get(_iter629)));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateBuddyProfileAttributesAsync_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attributes:");
      if (this.attributes == null) {
        sb.append("null");
      } else {
        sb.append(this.attributes);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateBuddyProfileAttributesAsync_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateBuddyProfileAttributesAsync_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public updateBuddyProfileAttributesAsync_result() {
    }

    public updateBuddyProfileAttributesAsync_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBuddyProfileAttributesAsync_result(updateBuddyProfileAttributesAsync_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public updateBuddyProfileAttributesAsync_result deepCopy() {
      return new updateBuddyProfileAttributesAsync_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBuddyProfileAttributesAsync_result)
        return this.equals((updateBuddyProfileAttributesAsync_result)that);
      return false;
    }

    public boolean equals(updateBuddyProfileAttributesAsync_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateBuddyProfileAttributesAsync_result other = (updateBuddyProfileAttributesAsync_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateBuddyProfileAttributesAsync_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateBuddyProfileImage_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateBuddyProfileImage_args");

    private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);
    private static final TField IMAGE_FIELD_DESC = new TField("image", TType.STRING, (short)2);

    private String requestId;
    private byte[] image;

    // isset id assignments

    public updateBuddyProfileImage_args() {
    }

    public updateBuddyProfileImage_args(
      String requestId,
      byte[] image)
    {
      this();
      this.requestId = requestId;
      this.image = image;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBuddyProfileImage_args(updateBuddyProfileImage_args other) {
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
      if (other.isSetImage()) {
        this.image = new byte[other.image.length];
        System.arraycopy(other.image, 0, image, 0, other.image.length);
      }
    }

    public updateBuddyProfileImage_args deepCopy() {
      return new updateBuddyProfileImage_args(this);
    }

    public void clear() {
      this.requestId = null;
      this.image = null;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public void setRequestId(String requestId) {
      this.requestId = requestId;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public byte[] getImage() {
      return this.image;
    }

    public void setImage(byte[] image) {
      this.image = image;
    }

    public void unsetImage() {
      this.image = null;
    }

    /** Returns true if field image is set (has been assigned a value) and false otherwise */
    public boolean isSetImage() {
      return this.image != null;
    }

    public void setImageIsSet(boolean value) {
      if (!value) {
        this.image = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBuddyProfileImage_args)
        return this.equals((updateBuddyProfileImage_args)that);
      return false;
    }

    public boolean equals(updateBuddyProfileImage_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      boolean this_present_image = true && this.isSetImage();
      boolean that_present_image = true && that.isSetImage();
      if (this_present_image || that_present_image) {
        if (!(this_present_image && that_present_image))
          return false;
        if (TBaseHelper.compareTo(this.image, that.image) != 0)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateBuddyProfileImage_args other = (updateBuddyProfileImage_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetImage(), other.isSetImage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImage()) {
        lastComparison = TBaseHelper.compareTo(this.image, other.image);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // IMAGE
            if (field.type == TType.STRING) {
              this.image = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      if (this.image != null) {
        oprot.writeFieldBegin(IMAGE_FIELD_DESC);
        oprot.writeBinary(this.image);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateBuddyProfileImage_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("image:");
      if (this.image == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.image, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateBuddyProfileImage_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateBuddyProfileImage_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private UpdateBuddyProfileResult success;
    private TalkException e;

    // isset id assignments

    public updateBuddyProfileImage_result() {
    }

    public updateBuddyProfileImage_result(
      UpdateBuddyProfileResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBuddyProfileImage_result(updateBuddyProfileImage_result other) {
      if (other.isSetSuccess()) {
        this.success = new UpdateBuddyProfileResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public updateBuddyProfileImage_result deepCopy() {
      return new updateBuddyProfileImage_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public UpdateBuddyProfileResult getSuccess() {
      return this.success;
    }

    public void setSuccess(UpdateBuddyProfileResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBuddyProfileImage_result)
        return this.equals((updateBuddyProfileImage_result)that);
      return false;
    }

    public boolean equals(updateBuddyProfileImage_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateBuddyProfileImage_result other = (updateBuddyProfileImage_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new UpdateBuddyProfileResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateBuddyProfileImage_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateBuddyProfileImageAsync_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateBuddyProfileImageAsync_args");

    private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);
    private static final TField IMAGE_FIELD_DESC = new TField("image", TType.STRING, (short)2);

    private String requestId;
    private byte[] image;

    // isset id assignments

    public updateBuddyProfileImageAsync_args() {
    }

    public updateBuddyProfileImageAsync_args(
      String requestId,
      byte[] image)
    {
      this();
      this.requestId = requestId;
      this.image = image;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBuddyProfileImageAsync_args(updateBuddyProfileImageAsync_args other) {
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
      if (other.isSetImage()) {
        this.image = new byte[other.image.length];
        System.arraycopy(other.image, 0, image, 0, other.image.length);
      }
    }

    public updateBuddyProfileImageAsync_args deepCopy() {
      return new updateBuddyProfileImageAsync_args(this);
    }

    public void clear() {
      this.requestId = null;
      this.image = null;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public void setRequestId(String requestId) {
      this.requestId = requestId;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public byte[] getImage() {
      return this.image;
    }

    public void setImage(byte[] image) {
      this.image = image;
    }

    public void unsetImage() {
      this.image = null;
    }

    /** Returns true if field image is set (has been assigned a value) and false otherwise */
    public boolean isSetImage() {
      return this.image != null;
    }

    public void setImageIsSet(boolean value) {
      if (!value) {
        this.image = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBuddyProfileImageAsync_args)
        return this.equals((updateBuddyProfileImageAsync_args)that);
      return false;
    }

    public boolean equals(updateBuddyProfileImageAsync_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      boolean this_present_image = true && this.isSetImage();
      boolean that_present_image = true && that.isSetImage();
      if (this_present_image || that_present_image) {
        if (!(this_present_image && that_present_image))
          return false;
        if (TBaseHelper.compareTo(this.image, that.image) != 0)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateBuddyProfileImageAsync_args other = (updateBuddyProfileImageAsync_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetImage(), other.isSetImage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImage()) {
        lastComparison = TBaseHelper.compareTo(this.image, other.image);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // IMAGE
            if (field.type == TType.STRING) {
              this.image = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      if (this.image != null) {
        oprot.writeFieldBegin(IMAGE_FIELD_DESC);
        oprot.writeBinary(this.image);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateBuddyProfileImageAsync_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("image:");
      if (this.image == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.image, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateBuddyProfileImageAsync_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateBuddyProfileImageAsync_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public updateBuddyProfileImageAsync_result() {
    }

    public updateBuddyProfileImageAsync_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBuddyProfileImageAsync_result(updateBuddyProfileImageAsync_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public updateBuddyProfileImageAsync_result deepCopy() {
      return new updateBuddyProfileImageAsync_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBuddyProfileImageAsync_result)
        return this.equals((updateBuddyProfileImageAsync_result)that);
      return false;
    }

    public boolean equals(updateBuddyProfileImageAsync_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateBuddyProfileImageAsync_result other = (updateBuddyProfileImageAsync_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateBuddyProfileImageAsync_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateBuddySearchId_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateBuddySearchId_args");

    private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);
    private static final TField SEARCH_ID_FIELD_DESC = new TField("searchId", TType.STRING, (short)2);

    private String requestId;
    private String searchId;

    // isset id assignments

    public updateBuddySearchId_args() {
    }

    public updateBuddySearchId_args(
      String requestId,
      String searchId)
    {
      this();
      this.requestId = requestId;
      this.searchId = searchId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBuddySearchId_args(updateBuddySearchId_args other) {
      if (other.isSetRequestId()) {
        this.requestId = other.requestId;
      }
      if (other.isSetSearchId()) {
        this.searchId = other.searchId;
      }
    }

    public updateBuddySearchId_args deepCopy() {
      return new updateBuddySearchId_args(this);
    }

    public void clear() {
      this.requestId = null;
      this.searchId = null;
    }

    public String getRequestId() {
      return this.requestId;
    }

    public void setRequestId(String requestId) {
      this.requestId = requestId;
    }

    public void unsetRequestId() {
      this.requestId = null;
    }

    /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestId() {
      return this.requestId != null;
    }

    public void setRequestIdIsSet(boolean value) {
      if (!value) {
        this.requestId = null;
      }
    }

    public String getSearchId() {
      return this.searchId;
    }

    public void setSearchId(String searchId) {
      this.searchId = searchId;
    }

    public void unsetSearchId() {
      this.searchId = null;
    }

    /** Returns true if field searchId is set (has been assigned a value) and false otherwise */
    public boolean isSetSearchId() {
      return this.searchId != null;
    }

    public void setSearchIdIsSet(boolean value) {
      if (!value) {
        this.searchId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBuddySearchId_args)
        return this.equals((updateBuddySearchId_args)that);
      return false;
    }

    public boolean equals(updateBuddySearchId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_requestId = true && this.isSetRequestId();
      boolean that_present_requestId = true && that.isSetRequestId();
      if (this_present_requestId || that_present_requestId) {
        if (!(this_present_requestId && that_present_requestId))
          return false;
        if (!this.requestId.equals(that.requestId))
          return false;
      }

      boolean this_present_searchId = true && this.isSetSearchId();
      boolean that_present_searchId = true && that.isSetSearchId();
      if (this_present_searchId || that_present_searchId) {
        if (!(this_present_searchId && that_present_searchId))
          return false;
        if (!this.searchId.equals(that.searchId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateBuddySearchId_args other = (updateBuddySearchId_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestId()) {
        lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSearchId(), other.isSetSearchId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSearchId()) {
        lastComparison = TBaseHelper.compareTo(this.searchId, other.searchId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // REQUEST_ID
            if (field.type == TType.STRING) {
              this.requestId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // SEARCH_ID
            if (field.type == TType.STRING) {
              this.searchId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(this.requestId);
        oprot.writeFieldEnd();
      }
      if (this.searchId != null) {
        oprot.writeFieldBegin(SEARCH_ID_FIELD_DESC);
        oprot.writeString(this.searchId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateBuddySearchId_args(");
      boolean first = true;

      sb.append("requestId:");
      if (this.requestId == null) {
        sb.append("null");
      } else {
        sb.append(this.requestId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("searchId:");
      if (this.searchId == null) {
        sb.append("null");
      } else {
        sb.append(this.searchId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateBuddySearchId_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateBuddySearchId_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public updateBuddySearchId_result() {
    }

    public updateBuddySearchId_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBuddySearchId_result(updateBuddySearchId_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public updateBuddySearchId_result deepCopy() {
      return new updateBuddySearchId_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBuddySearchId_result)
        return this.equals((updateBuddySearchId_result)that);
      return false;
    }

    public boolean equals(updateBuddySearchId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateBuddySearchId_result other = (updateBuddySearchId_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateBuddySearchId_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateBuddySettings_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateBuddySettings_args");

    private static final TField SETTINGS_FIELD_DESC = new TField("settings", TType.MAP, (short)2);

    private Hashtable settings;

    // isset id assignments

    public updateBuddySettings_args() {
    }

    public updateBuddySettings_args(
      Hashtable settings)
    {
      this();
      this.settings = settings;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBuddySettings_args(updateBuddySettings_args other) {
      if (other.isSetSettings()) {
        Hashtable __this__settings = new Hashtable();
        for (Enumeration other_enum = other.settings.keys(); other_enum.hasMoreElements(); ) {

          String other_element_key = (String)other_enum.nextElement();
          String other_element_value = (String)other.settings.get(other_element_key);

          String __this__settings_copy_key = other_element_key;

          String __this__settings_copy_value = other_element_value;

          __this__settings.put(__this__settings_copy_key, __this__settings_copy_value);
        }
        this.settings = __this__settings;
      }
    }

    public updateBuddySettings_args deepCopy() {
      return new updateBuddySettings_args(this);
    }

    public void clear() {
      this.settings = null;
    }

    public int getSettingsSize() {
      return (this.settings == null) ? 0 : this.settings.size();
    }

    public void putToSettings(String key, String val) {
      if (this.settings == null) {
        this.settings = new Hashtable();
      }
      this.settings.put(key, val);
    }

    public Hashtable getSettings() {
      return this.settings;
    }

    public void setSettings(Hashtable settings) {
      this.settings = settings;
    }

    public void unsetSettings() {
      this.settings = null;
    }

    /** Returns true if field settings is set (has been assigned a value) and false otherwise */
    public boolean isSetSettings() {
      return this.settings != null;
    }

    public void setSettingsIsSet(boolean value) {
      if (!value) {
        this.settings = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBuddySettings_args)
        return this.equals((updateBuddySettings_args)that);
      return false;
    }

    public boolean equals(updateBuddySettings_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_settings = true && this.isSetSettings();
      boolean that_present_settings = true && that.isSetSettings();
      if (this_present_settings || that_present_settings) {
        if (!(this_present_settings && that_present_settings))
          return false;
        if (!this.settings.equals(that.settings))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateBuddySettings_args other = (updateBuddySettings_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSettings(), other.isSetSettings());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSettings()) {
        lastComparison = TBaseHelper.compareTo(this.settings, other.settings);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // SETTINGS
            if (field.type == TType.MAP) {
              {
                TMap _map630 = iprot.readMapBegin();
                this.settings = new Hashtable(2*_map630.size);
                for (int _i631 = 0; _i631 < _map630.size; ++_i631)
                {
                  String _key632;
                  String _val633;
                  _key632 = iprot.readString();
                  _val633 = iprot.readString();
                  this.settings.put(_key632, _val633);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.settings != null) {
        oprot.writeFieldBegin(SETTINGS_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.settings.size()));
          for (Enumeration _iter634_enum = this.settings.keys(); _iter634_enum.hasMoreElements(); )           {
            String _iter634 = (String)_iter634_enum.nextElement();
            oprot.writeString(_iter634);
            oprot.writeString(((String)this.settings.get(_iter634)));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateBuddySettings_args(");
      boolean first = true;

      sb.append("settings:");
      if (this.settings == null) {
        sb.append("null");
      } else {
        sb.append(this.settings);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class updateBuddySettings_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("updateBuddySettings_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public updateBuddySettings_result() {
    }

    public updateBuddySettings_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateBuddySettings_result(updateBuddySettings_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public updateBuddySettings_result deepCopy() {
      return new updateBuddySettings_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateBuddySettings_result)
        return this.equals((updateBuddySettings_result)that);
      return false;
    }

    public boolean equals(updateBuddySettings_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      updateBuddySettings_result other = (updateBuddySettings_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("updateBuddySettings_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class uploadBuddyContent_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("uploadBuddyContent_args");

    private static final TField CONTENT_TYPE_FIELD_DESC = new TField("contentType", TType.I32, (short)2);
    private static final TField CONTENT_FIELD_DESC = new TField("content", TType.STRING, (short)3);

    private ContentType contentType;
    private byte[] content;

    // isset id assignments

    public uploadBuddyContent_args() {
    }

    public uploadBuddyContent_args(
      ContentType contentType,
      byte[] content)
    {
      this();
      this.contentType = contentType;
      this.content = content;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadBuddyContent_args(uploadBuddyContent_args other) {
      if (other.isSetContentType()) {
        this.contentType = other.contentType;
      }
      if (other.isSetContent()) {
        this.content = new byte[other.content.length];
        System.arraycopy(other.content, 0, content, 0, other.content.length);
      }
    }

    public uploadBuddyContent_args deepCopy() {
      return new uploadBuddyContent_args(this);
    }

    public void clear() {
      this.contentType = null;
      this.content = null;
    }

    /**
     * 
     * @see ContentType
     */
    public ContentType getContentType() {
      return this.contentType;
    }

    /**
     * 
     * @see ContentType
     */
    public void setContentType(ContentType contentType) {
      this.contentType = contentType;
    }

    public void unsetContentType() {
      this.contentType = null;
    }

    /** Returns true if field contentType is set (has been assigned a value) and false otherwise */
    public boolean isSetContentType() {
      return this.contentType != null;
    }

    public void setContentTypeIsSet(boolean value) {
      if (!value) {
        this.contentType = null;
      }
    }

    public byte[] getContent() {
      return this.content;
    }

    public void setContent(byte[] content) {
      this.content = content;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadBuddyContent_args)
        return this.equals((uploadBuddyContent_args)that);
      return false;
    }

    public boolean equals(uploadBuddyContent_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_contentType = true && this.isSetContentType();
      boolean that_present_contentType = true && that.isSetContentType();
      if (this_present_contentType || that_present_contentType) {
        if (!(this_present_contentType && that_present_contentType))
          return false;
        if (!this.contentType.equals(that.contentType))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (TBaseHelper.compareTo(this.content, that.content) != 0)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      uploadBuddyContent_args other = (uploadBuddyContent_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetContentType(), other.isSetContentType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContentType()) {
        lastComparison = TBaseHelper.compareTo(this.contentType, other.contentType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetContent(), other.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = TBaseHelper.compareTo(this.content, other.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // CONTENT_TYPE
            if (field.type == TType.I32) {
              this.contentType = ContentType.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // CONTENT
            if (field.type == TType.STRING) {
              this.content = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.contentType != null) {
        oprot.writeFieldBegin(CONTENT_TYPE_FIELD_DESC);
        oprot.writeI32(this.contentType.getValue());
        oprot.writeFieldEnd();
      }
      if (this.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeBinary(this.content);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("uploadBuddyContent_args(");
      boolean first = true;

      sb.append("contentType:");
      if (this.contentType == null) {
        sb.append("null");
      } else {
        sb.append(this.contentType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.content, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class uploadBuddyContent_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("uploadBuddyContent_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public uploadBuddyContent_result() {
    }

    public uploadBuddyContent_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadBuddyContent_result(uploadBuddyContent_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public uploadBuddyContent_result deepCopy() {
      return new uploadBuddyContent_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadBuddyContent_result)
        return this.equals((uploadBuddyContent_result)that);
      return false;
    }

    public boolean equals(uploadBuddyContent_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      uploadBuddyContent_result other = (uploadBuddyContent_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("uploadBuddyContent_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
