/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class ProximityMatchCandidateResult implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("ProximityMatchCandidateResult");

  private static final TField USERS_FIELD_DESC = new TField("users", TType.LIST, (short)1);
  private static final TField BUDDIES_FIELD_DESC = new TField("buddies", TType.LIST, (short)2);

  private Vector users;
  private Vector buddies;

  // isset id assignments

  public ProximityMatchCandidateResult() {
  }

  public ProximityMatchCandidateResult(
    Vector users,
    Vector buddies)
  {
    this();
    this.users = users;
    this.buddies = buddies;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProximityMatchCandidateResult(ProximityMatchCandidateResult other) {
    if (other.isSetUsers()) {
      Vector __this__users = new Vector();
      for (Enumeration other_enum = other.users.elements(); other_enum.hasMoreElements(); ) {
        Contact other_element = (Contact)other_enum.nextElement();
        __this__users.addElement(new Contact(other_element));
      }
      this.users = __this__users;
    }
    if (other.isSetBuddies()) {
      Vector __this__buddies = new Vector();
      for (Enumeration other_enum = other.buddies.elements(); other_enum.hasMoreElements(); ) {
        Contact other_element = (Contact)other_enum.nextElement();
        __this__buddies.addElement(new Contact(other_element));
      }
      this.buddies = __this__buddies;
    }
  }

  public ProximityMatchCandidateResult deepCopy() {
    return new ProximityMatchCandidateResult(this);
  }

  public void clear() {
    this.users = null;
    this.buddies = null;
  }

  public int getUsersSize() {
    return (this.users == null) ? 0 : this.users.size();
  }

  public Enumeration getUsersEnumeration() {
    return (this.users == null) ? null : this.users.elements();
  }

  public void addToUsers(Contact elem) {
    if (this.users == null) {
      this.users = new Vector();
    }
    this.users.addElement(elem);
  }

  public Vector getUsers() {
    return this.users;
  }

  public void setUsers(Vector users) {
    this.users = users;
  }

  public void unsetUsers() {
    this.users = null;
  }

  /** Returns true if field users is set (has been assigned a value) and false otherwise */
  public boolean isSetUsers() {
    return this.users != null;
  }

  public void setUsersIsSet(boolean value) {
    if (!value) {
      this.users = null;
    }
  }

  public int getBuddiesSize() {
    return (this.buddies == null) ? 0 : this.buddies.size();
  }

  public Enumeration getBuddiesEnumeration() {
    return (this.buddies == null) ? null : this.buddies.elements();
  }

  public void addToBuddies(Contact elem) {
    if (this.buddies == null) {
      this.buddies = new Vector();
    }
    this.buddies.addElement(elem);
  }

  public Vector getBuddies() {
    return this.buddies;
  }

  public void setBuddies(Vector buddies) {
    this.buddies = buddies;
  }

  public void unsetBuddies() {
    this.buddies = null;
  }

  /** Returns true if field buddies is set (has been assigned a value) and false otherwise */
  public boolean isSetBuddies() {
    return this.buddies != null;
  }

  public void setBuddiesIsSet(boolean value) {
    if (!value) {
      this.buddies = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProximityMatchCandidateResult)
      return this.equals((ProximityMatchCandidateResult)that);
    return false;
  }

  public boolean equals(ProximityMatchCandidateResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_users = true && this.isSetUsers();
    boolean that_present_users = true && that.isSetUsers();
    if (this_present_users || that_present_users) {
      if (!(this_present_users && that_present_users))
        return false;
      if (!this.users.equals(that.users))
        return false;
    }

    boolean this_present_buddies = true && this.isSetBuddies();
    boolean that_present_buddies = true && that.isSetBuddies();
    if (this_present_buddies || that_present_buddies) {
      if (!(this_present_buddies && that_present_buddies))
        return false;
      if (!this.buddies.equals(that.buddies))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    ProximityMatchCandidateResult other = (ProximityMatchCandidateResult)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetUsers(), other.isSetUsers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsers()) {
      lastComparison = TBaseHelper.compareTo(this.users, other.users);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetBuddies(), other.isSetBuddies());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBuddies()) {
      lastComparison = TBaseHelper.compareTo(this.buddies, other.buddies);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // USERS
          if (field.type == TType.LIST) {
            {
              TList _list209 = iprot.readListBegin();
              this.users = new Vector(_list209.size);
              for (int _i210 = 0; _i210 < _list209.size; ++_i210)
              {
                Contact _elem211;
                _elem211 = new Contact();
                _elem211.read(iprot);
                this.users.addElement(_elem211);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // BUDDIES
          if (field.type == TType.LIST) {
            {
              TList _list212 = iprot.readListBegin();
              this.buddies = new Vector(_list212.size);
              for (int _i213 = 0; _i213 < _list212.size; ++_i213)
              {
                Contact _elem214;
                _elem214 = new Contact();
                _elem214.read(iprot);
                this.buddies.addElement(_elem214);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.users != null) {
      oprot.writeFieldBegin(USERS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.users.size()));
        for (Enumeration _iter215_enum = this.users.elements(); _iter215_enum.hasMoreElements(); )         {
          Contact _iter215 = (Contact)_iter215_enum.nextElement();
          _iter215.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.buddies != null) {
      oprot.writeFieldBegin(BUDDIES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.buddies.size()));
        for (Enumeration _iter216_enum = this.buddies.elements(); _iter216_enum.hasMoreElements(); )         {
          Contact _iter216 = (Contact)_iter216_enum.nextElement();
          _iter216.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("ProximityMatchCandidateResult(");
    boolean first = true;

    sb.append("users:");
    if (this.users == null) {
      sb.append("null");
    } else {
      sb.append(this.users);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buddies:");
    if (this.buddies == null) {
      sb.append("null");
    } else {
      sb.append(this.buddies);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

