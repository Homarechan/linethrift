/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class AccountSupervisorService {

  public interface Iface {

    public RSAKey getRSAKey() throws TalkException, TException;

    public void notifyEmailConfirmationResult(Hashtable parameterMap) throws TalkException, TException;

    public String registerVirtualAccount(String locale, String encryptedVirtualUserId, String encryptedPassword) throws TalkException, TException;

    public void requestVirtualAccountPasswordChange(String virtualMid, String encryptedVirtualUserId, String encryptedOldPassword, String encryptedNewPassword) throws TalkException, TException;

    public void requestVirtualAccountPasswordSet(String virtualMid, String encryptedVirtualUserId, String encryptedNewPassword) throws TalkException, TException;

    public void unregisterVirtualAccount(String virtualMid) throws TalkException, TException;

  }

  public static class Client implements TServiceClient, Iface {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public RSAKey getRSAKey() throws TalkException, TException
    {
      send_getRSAKey();
      return recv_getRSAKey();
    }

    public void send_getRSAKey() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getRSAKey", TMessageType.CALL, ++seqid_));
      getRSAKey_args args = new getRSAKey_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public RSAKey recv_getRSAKey() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getRSAKey failed: out of sequence response");
      }
      getRSAKey_result result = new getRSAKey_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getRSAKey failed: unknown result");
    }

    public void notifyEmailConfirmationResult(Hashtable parameterMap) throws TalkException, TException
    {
      send_notifyEmailConfirmationResult(parameterMap);
      recv_notifyEmailConfirmationResult();
    }

    public void send_notifyEmailConfirmationResult(Hashtable parameterMap) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("notifyEmailConfirmationResult", TMessageType.CALL, ++seqid_));
      notifyEmailConfirmationResult_args args = new notifyEmailConfirmationResult_args();
      args.setParameterMap(parameterMap);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_notifyEmailConfirmationResult() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "notifyEmailConfirmationResult failed: out of sequence response");
      }
      notifyEmailConfirmationResult_result result = new notifyEmailConfirmationResult_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public String registerVirtualAccount(String locale, String encryptedVirtualUserId, String encryptedPassword) throws TalkException, TException
    {
      send_registerVirtualAccount(locale, encryptedVirtualUserId, encryptedPassword);
      return recv_registerVirtualAccount();
    }

    public void send_registerVirtualAccount(String locale, String encryptedVirtualUserId, String encryptedPassword) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("registerVirtualAccount", TMessageType.CALL, ++seqid_));
      registerVirtualAccount_args args = new registerVirtualAccount_args();
      args.setLocale(locale);
      args.setEncryptedVirtualUserId(encryptedVirtualUserId);
      args.setEncryptedPassword(encryptedPassword);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_registerVirtualAccount() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "registerVirtualAccount failed: out of sequence response");
      }
      registerVirtualAccount_result result = new registerVirtualAccount_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "registerVirtualAccount failed: unknown result");
    }

    public void requestVirtualAccountPasswordChange(String virtualMid, String encryptedVirtualUserId, String encryptedOldPassword, String encryptedNewPassword) throws TalkException, TException
    {
      send_requestVirtualAccountPasswordChange(virtualMid, encryptedVirtualUserId, encryptedOldPassword, encryptedNewPassword);
      recv_requestVirtualAccountPasswordChange();
    }

    public void send_requestVirtualAccountPasswordChange(String virtualMid, String encryptedVirtualUserId, String encryptedOldPassword, String encryptedNewPassword) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("requestVirtualAccountPasswordChange", TMessageType.CALL, ++seqid_));
      requestVirtualAccountPasswordChange_args args = new requestVirtualAccountPasswordChange_args();
      args.setVirtualMid(virtualMid);
      args.setEncryptedVirtualUserId(encryptedVirtualUserId);
      args.setEncryptedOldPassword(encryptedOldPassword);
      args.setEncryptedNewPassword(encryptedNewPassword);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_requestVirtualAccountPasswordChange() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "requestVirtualAccountPasswordChange failed: out of sequence response");
      }
      requestVirtualAccountPasswordChange_result result = new requestVirtualAccountPasswordChange_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void requestVirtualAccountPasswordSet(String virtualMid, String encryptedVirtualUserId, String encryptedNewPassword) throws TalkException, TException
    {
      send_requestVirtualAccountPasswordSet(virtualMid, encryptedVirtualUserId, encryptedNewPassword);
      recv_requestVirtualAccountPasswordSet();
    }

    public void send_requestVirtualAccountPasswordSet(String virtualMid, String encryptedVirtualUserId, String encryptedNewPassword) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("requestVirtualAccountPasswordSet", TMessageType.CALL, ++seqid_));
      requestVirtualAccountPasswordSet_args args = new requestVirtualAccountPasswordSet_args();
      args.setVirtualMid(virtualMid);
      args.setEncryptedVirtualUserId(encryptedVirtualUserId);
      args.setEncryptedNewPassword(encryptedNewPassword);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_requestVirtualAccountPasswordSet() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "requestVirtualAccountPasswordSet failed: out of sequence response");
      }
      requestVirtualAccountPasswordSet_result result = new requestVirtualAccountPasswordSet_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void unregisterVirtualAccount(String virtualMid) throws TalkException, TException
    {
      send_unregisterVirtualAccount(virtualMid);
      recv_unregisterVirtualAccount();
    }

    public void send_unregisterVirtualAccount(String virtualMid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("unregisterVirtualAccount", TMessageType.CALL, ++seqid_));
      unregisterVirtualAccount_args args = new unregisterVirtualAccount_args();
      args.setVirtualMid(virtualMid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_unregisterVirtualAccount() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "unregisterVirtualAccount failed: out of sequence response");
      }
      unregisterVirtualAccount_result result = new unregisterVirtualAccount_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

  }
  public static class Processor implements TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("getRSAKey", new getRSAKey());
      processMap_.put("notifyEmailConfirmationResult", new notifyEmailConfirmationResult());
      processMap_.put("registerVirtualAccount", new registerVirtualAccount());
      processMap_.put("requestVirtualAccountPasswordChange", new requestVirtualAccountPasswordChange());
      processMap_.put("requestVirtualAccountPasswordSet", new requestVirtualAccountPasswordSet());
      processMap_.put("unregisterVirtualAccount", new unregisterVirtualAccount());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final Hashtable processMap_ = new Hashtable();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = (ProcessFunction)processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class getRSAKey implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getRSAKey_args args = new getRSAKey_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getRSAKey", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getRSAKey_result result = new getRSAKey_result();
        try {
          result.success = iface_.getRSAKey();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getRSAKey");
          oprot.writeMessageBegin(new TMessage("getRSAKey", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getRSAKey", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class notifyEmailConfirmationResult implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        notifyEmailConfirmationResult_args args = new notifyEmailConfirmationResult_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("notifyEmailConfirmationResult", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        notifyEmailConfirmationResult_result result = new notifyEmailConfirmationResult_result();
        try {
          iface_.notifyEmailConfirmationResult(args.parameterMap);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing notifyEmailConfirmationResult");
          oprot.writeMessageBegin(new TMessage("notifyEmailConfirmationResult", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("notifyEmailConfirmationResult", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class registerVirtualAccount implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        registerVirtualAccount_args args = new registerVirtualAccount_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("registerVirtualAccount", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        registerVirtualAccount_result result = new registerVirtualAccount_result();
        try {
          result.success = iface_.registerVirtualAccount(args.locale, args.encryptedVirtualUserId, args.encryptedPassword);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing registerVirtualAccount");
          oprot.writeMessageBegin(new TMessage("registerVirtualAccount", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("registerVirtualAccount", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class requestVirtualAccountPasswordChange implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        requestVirtualAccountPasswordChange_args args = new requestVirtualAccountPasswordChange_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("requestVirtualAccountPasswordChange", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        requestVirtualAccountPasswordChange_result result = new requestVirtualAccountPasswordChange_result();
        try {
          iface_.requestVirtualAccountPasswordChange(args.virtualMid, args.encryptedVirtualUserId, args.encryptedOldPassword, args.encryptedNewPassword);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing requestVirtualAccountPasswordChange");
          oprot.writeMessageBegin(new TMessage("requestVirtualAccountPasswordChange", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("requestVirtualAccountPasswordChange", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class requestVirtualAccountPasswordSet implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        requestVirtualAccountPasswordSet_args args = new requestVirtualAccountPasswordSet_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("requestVirtualAccountPasswordSet", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        requestVirtualAccountPasswordSet_result result = new requestVirtualAccountPasswordSet_result();
        try {
          iface_.requestVirtualAccountPasswordSet(args.virtualMid, args.encryptedVirtualUserId, args.encryptedNewPassword);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing requestVirtualAccountPasswordSet");
          oprot.writeMessageBegin(new TMessage("requestVirtualAccountPasswordSet", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("requestVirtualAccountPasswordSet", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class unregisterVirtualAccount implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        unregisterVirtualAccount_args args = new unregisterVirtualAccount_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("unregisterVirtualAccount", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        unregisterVirtualAccount_result result = new unregisterVirtualAccount_result();
        try {
          iface_.unregisterVirtualAccount(args.virtualMid);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing unregisterVirtualAccount");
          oprot.writeMessageBegin(new TMessage("unregisterVirtualAccount", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("unregisterVirtualAccount", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class getRSAKey_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getRSAKey_args");


    public getRSAKey_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRSAKey_args(getRSAKey_args other) {
    }

    public getRSAKey_args deepCopy() {
      return new getRSAKey_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRSAKey_args)
        return this.equals((getRSAKey_args)that);
      return false;
    }

    public boolean equals(getRSAKey_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getRSAKey_args other = (getRSAKey_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getRSAKey_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getRSAKey_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getRSAKey_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private RSAKey success;
    private TalkException e;

    // isset id assignments

    public getRSAKey_result() {
    }

    public getRSAKey_result(
      RSAKey success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRSAKey_result(getRSAKey_result other) {
      if (other.isSetSuccess()) {
        this.success = new RSAKey(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getRSAKey_result deepCopy() {
      return new getRSAKey_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public RSAKey getSuccess() {
      return this.success;
    }

    public void setSuccess(RSAKey success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRSAKey_result)
        return this.equals((getRSAKey_result)that);
      return false;
    }

    public boolean equals(getRSAKey_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getRSAKey_result other = (getRSAKey_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new RSAKey();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getRSAKey_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class notifyEmailConfirmationResult_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("notifyEmailConfirmationResult_args");

    private static final TField PARAMETER_MAP_FIELD_DESC = new TField("parameterMap", TType.MAP, (short)2);

    private Hashtable parameterMap;

    // isset id assignments

    public notifyEmailConfirmationResult_args() {
    }

    public notifyEmailConfirmationResult_args(
      Hashtable parameterMap)
    {
      this();
      this.parameterMap = parameterMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyEmailConfirmationResult_args(notifyEmailConfirmationResult_args other) {
      if (other.isSetParameterMap()) {
        Hashtable __this__parameterMap = new Hashtable();
        for (Enumeration other_enum = other.parameterMap.keys(); other_enum.hasMoreElements(); ) {

          String other_element_key = (String)other_enum.nextElement();
          String other_element_value = (String)other.parameterMap.get(other_element_key);

          String __this__parameterMap_copy_key = other_element_key;

          String __this__parameterMap_copy_value = other_element_value;

          __this__parameterMap.put(__this__parameterMap_copy_key, __this__parameterMap_copy_value);
        }
        this.parameterMap = __this__parameterMap;
      }
    }

    public notifyEmailConfirmationResult_args deepCopy() {
      return new notifyEmailConfirmationResult_args(this);
    }

    public void clear() {
      this.parameterMap = null;
    }

    public int getParameterMapSize() {
      return (this.parameterMap == null) ? 0 : this.parameterMap.size();
    }

    public void putToParameterMap(String key, String val) {
      if (this.parameterMap == null) {
        this.parameterMap = new Hashtable();
      }
      this.parameterMap.put(key, val);
    }

    public Hashtable getParameterMap() {
      return this.parameterMap;
    }

    public void setParameterMap(Hashtable parameterMap) {
      this.parameterMap = parameterMap;
    }

    public void unsetParameterMap() {
      this.parameterMap = null;
    }

    /** Returns true if field parameterMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParameterMap() {
      return this.parameterMap != null;
    }

    public void setParameterMapIsSet(boolean value) {
      if (!value) {
        this.parameterMap = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyEmailConfirmationResult_args)
        return this.equals((notifyEmailConfirmationResult_args)that);
      return false;
    }

    public boolean equals(notifyEmailConfirmationResult_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_parameterMap = true && this.isSetParameterMap();
      boolean that_present_parameterMap = true && that.isSetParameterMap();
      if (this_present_parameterMap || that_present_parameterMap) {
        if (!(this_present_parameterMap && that_present_parameterMap))
          return false;
        if (!this.parameterMap.equals(that.parameterMap))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      notifyEmailConfirmationResult_args other = (notifyEmailConfirmationResult_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetParameterMap(), other.isSetParameterMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParameterMap()) {
        lastComparison = TBaseHelper.compareTo(this.parameterMap, other.parameterMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // PARAMETER_MAP
            if (field.type == TType.MAP) {
              {
                TMap _map545 = iprot.readMapBegin();
                this.parameterMap = new Hashtable(2*_map545.size);
                for (int _i546 = 0; _i546 < _map545.size; ++_i546)
                {
                  String _key547;
                  String _val548;
                  _key547 = iprot.readString();
                  _val548 = iprot.readString();
                  this.parameterMap.put(_key547, _val548);
                }
                iprot.readMapEnd();
              }
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.parameterMap != null) {
        oprot.writeFieldBegin(PARAMETER_MAP_FIELD_DESC);
        {
          oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.parameterMap.size()));
          for (Enumeration _iter549_enum = this.parameterMap.keys(); _iter549_enum.hasMoreElements(); )           {
            String _iter549 = (String)_iter549_enum.nextElement();
            oprot.writeString(_iter549);
            oprot.writeString(((String)this.parameterMap.get(_iter549)));
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("notifyEmailConfirmationResult_args(");
      boolean first = true;

      sb.append("parameterMap:");
      if (this.parameterMap == null) {
        sb.append("null");
      } else {
        sb.append(this.parameterMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class notifyEmailConfirmationResult_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("notifyEmailConfirmationResult_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public notifyEmailConfirmationResult_result() {
    }

    public notifyEmailConfirmationResult_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyEmailConfirmationResult_result(notifyEmailConfirmationResult_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public notifyEmailConfirmationResult_result deepCopy() {
      return new notifyEmailConfirmationResult_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyEmailConfirmationResult_result)
        return this.equals((notifyEmailConfirmationResult_result)that);
      return false;
    }

    public boolean equals(notifyEmailConfirmationResult_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      notifyEmailConfirmationResult_result other = (notifyEmailConfirmationResult_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("notifyEmailConfirmationResult_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerVirtualAccount_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerVirtualAccount_args");

    private static final TField LOCALE_FIELD_DESC = new TField("locale", TType.STRING, (short)2);
    private static final TField ENCRYPTED_VIRTUAL_USER_ID_FIELD_DESC = new TField("encryptedVirtualUserId", TType.STRING, (short)3);
    private static final TField ENCRYPTED_PASSWORD_FIELD_DESC = new TField("encryptedPassword", TType.STRING, (short)4);

    private String locale;
    private String encryptedVirtualUserId;
    private String encryptedPassword;

    // isset id assignments

    public registerVirtualAccount_args() {
    }

    public registerVirtualAccount_args(
      String locale,
      String encryptedVirtualUserId,
      String encryptedPassword)
    {
      this();
      this.locale = locale;
      this.encryptedVirtualUserId = encryptedVirtualUserId;
      this.encryptedPassword = encryptedPassword;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerVirtualAccount_args(registerVirtualAccount_args other) {
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
      if (other.isSetEncryptedVirtualUserId()) {
        this.encryptedVirtualUserId = other.encryptedVirtualUserId;
      }
      if (other.isSetEncryptedPassword()) {
        this.encryptedPassword = other.encryptedPassword;
      }
    }

    public registerVirtualAccount_args deepCopy() {
      return new registerVirtualAccount_args(this);
    }

    public void clear() {
      this.locale = null;
      this.encryptedVirtualUserId = null;
      this.encryptedPassword = null;
    }

    public String getLocale() {
      return this.locale;
    }

    public void setLocale(String locale) {
      this.locale = locale;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public String getEncryptedVirtualUserId() {
      return this.encryptedVirtualUserId;
    }

    public void setEncryptedVirtualUserId(String encryptedVirtualUserId) {
      this.encryptedVirtualUserId = encryptedVirtualUserId;
    }

    public void unsetEncryptedVirtualUserId() {
      this.encryptedVirtualUserId = null;
    }

    /** Returns true if field encryptedVirtualUserId is set (has been assigned a value) and false otherwise */
    public boolean isSetEncryptedVirtualUserId() {
      return this.encryptedVirtualUserId != null;
    }

    public void setEncryptedVirtualUserIdIsSet(boolean value) {
      if (!value) {
        this.encryptedVirtualUserId = null;
      }
    }

    public String getEncryptedPassword() {
      return this.encryptedPassword;
    }

    public void setEncryptedPassword(String encryptedPassword) {
      this.encryptedPassword = encryptedPassword;
    }

    public void unsetEncryptedPassword() {
      this.encryptedPassword = null;
    }

    /** Returns true if field encryptedPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetEncryptedPassword() {
      return this.encryptedPassword != null;
    }

    public void setEncryptedPasswordIsSet(boolean value) {
      if (!value) {
        this.encryptedPassword = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerVirtualAccount_args)
        return this.equals((registerVirtualAccount_args)that);
      return false;
    }

    public boolean equals(registerVirtualAccount_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      boolean this_present_encryptedVirtualUserId = true && this.isSetEncryptedVirtualUserId();
      boolean that_present_encryptedVirtualUserId = true && that.isSetEncryptedVirtualUserId();
      if (this_present_encryptedVirtualUserId || that_present_encryptedVirtualUserId) {
        if (!(this_present_encryptedVirtualUserId && that_present_encryptedVirtualUserId))
          return false;
        if (!this.encryptedVirtualUserId.equals(that.encryptedVirtualUserId))
          return false;
      }

      boolean this_present_encryptedPassword = true && this.isSetEncryptedPassword();
      boolean that_present_encryptedPassword = true && that.isSetEncryptedPassword();
      if (this_present_encryptedPassword || that_present_encryptedPassword) {
        if (!(this_present_encryptedPassword && that_present_encryptedPassword))
          return false;
        if (!this.encryptedPassword.equals(that.encryptedPassword))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerVirtualAccount_args other = (registerVirtualAccount_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetLocale(), other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetEncryptedVirtualUserId(), other.isSetEncryptedVirtualUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEncryptedVirtualUserId()) {
        lastComparison = TBaseHelper.compareTo(this.encryptedVirtualUserId, other.encryptedVirtualUserId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetEncryptedPassword(), other.isSetEncryptedPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEncryptedPassword()) {
        lastComparison = TBaseHelper.compareTo(this.encryptedPassword, other.encryptedPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // LOCALE
            if (field.type == TType.STRING) {
              this.locale = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ENCRYPTED_VIRTUAL_USER_ID
            if (field.type == TType.STRING) {
              this.encryptedVirtualUserId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ENCRYPTED_PASSWORD
            if (field.type == TType.STRING) {
              this.encryptedPassword = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.locale != null) {
        oprot.writeFieldBegin(LOCALE_FIELD_DESC);
        oprot.writeString(this.locale);
        oprot.writeFieldEnd();
      }
      if (this.encryptedVirtualUserId != null) {
        oprot.writeFieldBegin(ENCRYPTED_VIRTUAL_USER_ID_FIELD_DESC);
        oprot.writeString(this.encryptedVirtualUserId);
        oprot.writeFieldEnd();
      }
      if (this.encryptedPassword != null) {
        oprot.writeFieldBegin(ENCRYPTED_PASSWORD_FIELD_DESC);
        oprot.writeString(this.encryptedPassword);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerVirtualAccount_args(");
      boolean first = true;

      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("encryptedVirtualUserId:");
      if (this.encryptedVirtualUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.encryptedVirtualUserId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("encryptedPassword:");
      if (this.encryptedPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.encryptedPassword);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class registerVirtualAccount_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("registerVirtualAccount_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public registerVirtualAccount_result() {
    }

    public registerVirtualAccount_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerVirtualAccount_result(registerVirtualAccount_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public registerVirtualAccount_result deepCopy() {
      return new registerVirtualAccount_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerVirtualAccount_result)
        return this.equals((registerVirtualAccount_result)that);
      return false;
    }

    public boolean equals(registerVirtualAccount_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      registerVirtualAccount_result other = (registerVirtualAccount_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("registerVirtualAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class requestVirtualAccountPasswordChange_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("requestVirtualAccountPasswordChange_args");

    private static final TField VIRTUAL_MID_FIELD_DESC = new TField("virtualMid", TType.STRING, (short)2);
    private static final TField ENCRYPTED_VIRTUAL_USER_ID_FIELD_DESC = new TField("encryptedVirtualUserId", TType.STRING, (short)3);
    private static final TField ENCRYPTED_OLD_PASSWORD_FIELD_DESC = new TField("encryptedOldPassword", TType.STRING, (short)4);
    private static final TField ENCRYPTED_NEW_PASSWORD_FIELD_DESC = new TField("encryptedNewPassword", TType.STRING, (short)5);

    private String virtualMid;
    private String encryptedVirtualUserId;
    private String encryptedOldPassword;
    private String encryptedNewPassword;

    // isset id assignments

    public requestVirtualAccountPasswordChange_args() {
    }

    public requestVirtualAccountPasswordChange_args(
      String virtualMid,
      String encryptedVirtualUserId,
      String encryptedOldPassword,
      String encryptedNewPassword)
    {
      this();
      this.virtualMid = virtualMid;
      this.encryptedVirtualUserId = encryptedVirtualUserId;
      this.encryptedOldPassword = encryptedOldPassword;
      this.encryptedNewPassword = encryptedNewPassword;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestVirtualAccountPasswordChange_args(requestVirtualAccountPasswordChange_args other) {
      if (other.isSetVirtualMid()) {
        this.virtualMid = other.virtualMid;
      }
      if (other.isSetEncryptedVirtualUserId()) {
        this.encryptedVirtualUserId = other.encryptedVirtualUserId;
      }
      if (other.isSetEncryptedOldPassword()) {
        this.encryptedOldPassword = other.encryptedOldPassword;
      }
      if (other.isSetEncryptedNewPassword()) {
        this.encryptedNewPassword = other.encryptedNewPassword;
      }
    }

    public requestVirtualAccountPasswordChange_args deepCopy() {
      return new requestVirtualAccountPasswordChange_args(this);
    }

    public void clear() {
      this.virtualMid = null;
      this.encryptedVirtualUserId = null;
      this.encryptedOldPassword = null;
      this.encryptedNewPassword = null;
    }

    public String getVirtualMid() {
      return this.virtualMid;
    }

    public void setVirtualMid(String virtualMid) {
      this.virtualMid = virtualMid;
    }

    public void unsetVirtualMid() {
      this.virtualMid = null;
    }

    /** Returns true if field virtualMid is set (has been assigned a value) and false otherwise */
    public boolean isSetVirtualMid() {
      return this.virtualMid != null;
    }

    public void setVirtualMidIsSet(boolean value) {
      if (!value) {
        this.virtualMid = null;
      }
    }

    public String getEncryptedVirtualUserId() {
      return this.encryptedVirtualUserId;
    }

    public void setEncryptedVirtualUserId(String encryptedVirtualUserId) {
      this.encryptedVirtualUserId = encryptedVirtualUserId;
    }

    public void unsetEncryptedVirtualUserId() {
      this.encryptedVirtualUserId = null;
    }

    /** Returns true if field encryptedVirtualUserId is set (has been assigned a value) and false otherwise */
    public boolean isSetEncryptedVirtualUserId() {
      return this.encryptedVirtualUserId != null;
    }

    public void setEncryptedVirtualUserIdIsSet(boolean value) {
      if (!value) {
        this.encryptedVirtualUserId = null;
      }
    }

    public String getEncryptedOldPassword() {
      return this.encryptedOldPassword;
    }

    public void setEncryptedOldPassword(String encryptedOldPassword) {
      this.encryptedOldPassword = encryptedOldPassword;
    }

    public void unsetEncryptedOldPassword() {
      this.encryptedOldPassword = null;
    }

    /** Returns true if field encryptedOldPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetEncryptedOldPassword() {
      return this.encryptedOldPassword != null;
    }

    public void setEncryptedOldPasswordIsSet(boolean value) {
      if (!value) {
        this.encryptedOldPassword = null;
      }
    }

    public String getEncryptedNewPassword() {
      return this.encryptedNewPassword;
    }

    public void setEncryptedNewPassword(String encryptedNewPassword) {
      this.encryptedNewPassword = encryptedNewPassword;
    }

    public void unsetEncryptedNewPassword() {
      this.encryptedNewPassword = null;
    }

    /** Returns true if field encryptedNewPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetEncryptedNewPassword() {
      return this.encryptedNewPassword != null;
    }

    public void setEncryptedNewPasswordIsSet(boolean value) {
      if (!value) {
        this.encryptedNewPassword = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestVirtualAccountPasswordChange_args)
        return this.equals((requestVirtualAccountPasswordChange_args)that);
      return false;
    }

    public boolean equals(requestVirtualAccountPasswordChange_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_virtualMid = true && this.isSetVirtualMid();
      boolean that_present_virtualMid = true && that.isSetVirtualMid();
      if (this_present_virtualMid || that_present_virtualMid) {
        if (!(this_present_virtualMid && that_present_virtualMid))
          return false;
        if (!this.virtualMid.equals(that.virtualMid))
          return false;
      }

      boolean this_present_encryptedVirtualUserId = true && this.isSetEncryptedVirtualUserId();
      boolean that_present_encryptedVirtualUserId = true && that.isSetEncryptedVirtualUserId();
      if (this_present_encryptedVirtualUserId || that_present_encryptedVirtualUserId) {
        if (!(this_present_encryptedVirtualUserId && that_present_encryptedVirtualUserId))
          return false;
        if (!this.encryptedVirtualUserId.equals(that.encryptedVirtualUserId))
          return false;
      }

      boolean this_present_encryptedOldPassword = true && this.isSetEncryptedOldPassword();
      boolean that_present_encryptedOldPassword = true && that.isSetEncryptedOldPassword();
      if (this_present_encryptedOldPassword || that_present_encryptedOldPassword) {
        if (!(this_present_encryptedOldPassword && that_present_encryptedOldPassword))
          return false;
        if (!this.encryptedOldPassword.equals(that.encryptedOldPassword))
          return false;
      }

      boolean this_present_encryptedNewPassword = true && this.isSetEncryptedNewPassword();
      boolean that_present_encryptedNewPassword = true && that.isSetEncryptedNewPassword();
      if (this_present_encryptedNewPassword || that_present_encryptedNewPassword) {
        if (!(this_present_encryptedNewPassword && that_present_encryptedNewPassword))
          return false;
        if (!this.encryptedNewPassword.equals(that.encryptedNewPassword))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      requestVirtualAccountPasswordChange_args other = (requestVirtualAccountPasswordChange_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetVirtualMid(), other.isSetVirtualMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVirtualMid()) {
        lastComparison = TBaseHelper.compareTo(this.virtualMid, other.virtualMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetEncryptedVirtualUserId(), other.isSetEncryptedVirtualUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEncryptedVirtualUserId()) {
        lastComparison = TBaseHelper.compareTo(this.encryptedVirtualUserId, other.encryptedVirtualUserId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetEncryptedOldPassword(), other.isSetEncryptedOldPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEncryptedOldPassword()) {
        lastComparison = TBaseHelper.compareTo(this.encryptedOldPassword, other.encryptedOldPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetEncryptedNewPassword(), other.isSetEncryptedNewPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEncryptedNewPassword()) {
        lastComparison = TBaseHelper.compareTo(this.encryptedNewPassword, other.encryptedNewPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // VIRTUAL_MID
            if (field.type == TType.STRING) {
              this.virtualMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ENCRYPTED_VIRTUAL_USER_ID
            if (field.type == TType.STRING) {
              this.encryptedVirtualUserId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ENCRYPTED_OLD_PASSWORD
            if (field.type == TType.STRING) {
              this.encryptedOldPassword = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ENCRYPTED_NEW_PASSWORD
            if (field.type == TType.STRING) {
              this.encryptedNewPassword = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.virtualMid != null) {
        oprot.writeFieldBegin(VIRTUAL_MID_FIELD_DESC);
        oprot.writeString(this.virtualMid);
        oprot.writeFieldEnd();
      }
      if (this.encryptedVirtualUserId != null) {
        oprot.writeFieldBegin(ENCRYPTED_VIRTUAL_USER_ID_FIELD_DESC);
        oprot.writeString(this.encryptedVirtualUserId);
        oprot.writeFieldEnd();
      }
      if (this.encryptedOldPassword != null) {
        oprot.writeFieldBegin(ENCRYPTED_OLD_PASSWORD_FIELD_DESC);
        oprot.writeString(this.encryptedOldPassword);
        oprot.writeFieldEnd();
      }
      if (this.encryptedNewPassword != null) {
        oprot.writeFieldBegin(ENCRYPTED_NEW_PASSWORD_FIELD_DESC);
        oprot.writeString(this.encryptedNewPassword);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("requestVirtualAccountPasswordChange_args(");
      boolean first = true;

      sb.append("virtualMid:");
      if (this.virtualMid == null) {
        sb.append("null");
      } else {
        sb.append(this.virtualMid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("encryptedVirtualUserId:");
      if (this.encryptedVirtualUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.encryptedVirtualUserId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("encryptedOldPassword:");
      if (this.encryptedOldPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.encryptedOldPassword);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("encryptedNewPassword:");
      if (this.encryptedNewPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.encryptedNewPassword);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class requestVirtualAccountPasswordChange_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("requestVirtualAccountPasswordChange_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public requestVirtualAccountPasswordChange_result() {
    }

    public requestVirtualAccountPasswordChange_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestVirtualAccountPasswordChange_result(requestVirtualAccountPasswordChange_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public requestVirtualAccountPasswordChange_result deepCopy() {
      return new requestVirtualAccountPasswordChange_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestVirtualAccountPasswordChange_result)
        return this.equals((requestVirtualAccountPasswordChange_result)that);
      return false;
    }

    public boolean equals(requestVirtualAccountPasswordChange_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      requestVirtualAccountPasswordChange_result other = (requestVirtualAccountPasswordChange_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("requestVirtualAccountPasswordChange_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class requestVirtualAccountPasswordSet_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("requestVirtualAccountPasswordSet_args");

    private static final TField VIRTUAL_MID_FIELD_DESC = new TField("virtualMid", TType.STRING, (short)2);
    private static final TField ENCRYPTED_VIRTUAL_USER_ID_FIELD_DESC = new TField("encryptedVirtualUserId", TType.STRING, (short)3);
    private static final TField ENCRYPTED_NEW_PASSWORD_FIELD_DESC = new TField("encryptedNewPassword", TType.STRING, (short)4);

    private String virtualMid;
    private String encryptedVirtualUserId;
    private String encryptedNewPassword;

    // isset id assignments

    public requestVirtualAccountPasswordSet_args() {
    }

    public requestVirtualAccountPasswordSet_args(
      String virtualMid,
      String encryptedVirtualUserId,
      String encryptedNewPassword)
    {
      this();
      this.virtualMid = virtualMid;
      this.encryptedVirtualUserId = encryptedVirtualUserId;
      this.encryptedNewPassword = encryptedNewPassword;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestVirtualAccountPasswordSet_args(requestVirtualAccountPasswordSet_args other) {
      if (other.isSetVirtualMid()) {
        this.virtualMid = other.virtualMid;
      }
      if (other.isSetEncryptedVirtualUserId()) {
        this.encryptedVirtualUserId = other.encryptedVirtualUserId;
      }
      if (other.isSetEncryptedNewPassword()) {
        this.encryptedNewPassword = other.encryptedNewPassword;
      }
    }

    public requestVirtualAccountPasswordSet_args deepCopy() {
      return new requestVirtualAccountPasswordSet_args(this);
    }

    public void clear() {
      this.virtualMid = null;
      this.encryptedVirtualUserId = null;
      this.encryptedNewPassword = null;
    }

    public String getVirtualMid() {
      return this.virtualMid;
    }

    public void setVirtualMid(String virtualMid) {
      this.virtualMid = virtualMid;
    }

    public void unsetVirtualMid() {
      this.virtualMid = null;
    }

    /** Returns true if field virtualMid is set (has been assigned a value) and false otherwise */
    public boolean isSetVirtualMid() {
      return this.virtualMid != null;
    }

    public void setVirtualMidIsSet(boolean value) {
      if (!value) {
        this.virtualMid = null;
      }
    }

    public String getEncryptedVirtualUserId() {
      return this.encryptedVirtualUserId;
    }

    public void setEncryptedVirtualUserId(String encryptedVirtualUserId) {
      this.encryptedVirtualUserId = encryptedVirtualUserId;
    }

    public void unsetEncryptedVirtualUserId() {
      this.encryptedVirtualUserId = null;
    }

    /** Returns true if field encryptedVirtualUserId is set (has been assigned a value) and false otherwise */
    public boolean isSetEncryptedVirtualUserId() {
      return this.encryptedVirtualUserId != null;
    }

    public void setEncryptedVirtualUserIdIsSet(boolean value) {
      if (!value) {
        this.encryptedVirtualUserId = null;
      }
    }

    public String getEncryptedNewPassword() {
      return this.encryptedNewPassword;
    }

    public void setEncryptedNewPassword(String encryptedNewPassword) {
      this.encryptedNewPassword = encryptedNewPassword;
    }

    public void unsetEncryptedNewPassword() {
      this.encryptedNewPassword = null;
    }

    /** Returns true if field encryptedNewPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetEncryptedNewPassword() {
      return this.encryptedNewPassword != null;
    }

    public void setEncryptedNewPasswordIsSet(boolean value) {
      if (!value) {
        this.encryptedNewPassword = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestVirtualAccountPasswordSet_args)
        return this.equals((requestVirtualAccountPasswordSet_args)that);
      return false;
    }

    public boolean equals(requestVirtualAccountPasswordSet_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_virtualMid = true && this.isSetVirtualMid();
      boolean that_present_virtualMid = true && that.isSetVirtualMid();
      if (this_present_virtualMid || that_present_virtualMid) {
        if (!(this_present_virtualMid && that_present_virtualMid))
          return false;
        if (!this.virtualMid.equals(that.virtualMid))
          return false;
      }

      boolean this_present_encryptedVirtualUserId = true && this.isSetEncryptedVirtualUserId();
      boolean that_present_encryptedVirtualUserId = true && that.isSetEncryptedVirtualUserId();
      if (this_present_encryptedVirtualUserId || that_present_encryptedVirtualUserId) {
        if (!(this_present_encryptedVirtualUserId && that_present_encryptedVirtualUserId))
          return false;
        if (!this.encryptedVirtualUserId.equals(that.encryptedVirtualUserId))
          return false;
      }

      boolean this_present_encryptedNewPassword = true && this.isSetEncryptedNewPassword();
      boolean that_present_encryptedNewPassword = true && that.isSetEncryptedNewPassword();
      if (this_present_encryptedNewPassword || that_present_encryptedNewPassword) {
        if (!(this_present_encryptedNewPassword && that_present_encryptedNewPassword))
          return false;
        if (!this.encryptedNewPassword.equals(that.encryptedNewPassword))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      requestVirtualAccountPasswordSet_args other = (requestVirtualAccountPasswordSet_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetVirtualMid(), other.isSetVirtualMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVirtualMid()) {
        lastComparison = TBaseHelper.compareTo(this.virtualMid, other.virtualMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetEncryptedVirtualUserId(), other.isSetEncryptedVirtualUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEncryptedVirtualUserId()) {
        lastComparison = TBaseHelper.compareTo(this.encryptedVirtualUserId, other.encryptedVirtualUserId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetEncryptedNewPassword(), other.isSetEncryptedNewPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEncryptedNewPassword()) {
        lastComparison = TBaseHelper.compareTo(this.encryptedNewPassword, other.encryptedNewPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // VIRTUAL_MID
            if (field.type == TType.STRING) {
              this.virtualMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ENCRYPTED_VIRTUAL_USER_ID
            if (field.type == TType.STRING) {
              this.encryptedVirtualUserId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ENCRYPTED_NEW_PASSWORD
            if (field.type == TType.STRING) {
              this.encryptedNewPassword = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.virtualMid != null) {
        oprot.writeFieldBegin(VIRTUAL_MID_FIELD_DESC);
        oprot.writeString(this.virtualMid);
        oprot.writeFieldEnd();
      }
      if (this.encryptedVirtualUserId != null) {
        oprot.writeFieldBegin(ENCRYPTED_VIRTUAL_USER_ID_FIELD_DESC);
        oprot.writeString(this.encryptedVirtualUserId);
        oprot.writeFieldEnd();
      }
      if (this.encryptedNewPassword != null) {
        oprot.writeFieldBegin(ENCRYPTED_NEW_PASSWORD_FIELD_DESC);
        oprot.writeString(this.encryptedNewPassword);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("requestVirtualAccountPasswordSet_args(");
      boolean first = true;

      sb.append("virtualMid:");
      if (this.virtualMid == null) {
        sb.append("null");
      } else {
        sb.append(this.virtualMid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("encryptedVirtualUserId:");
      if (this.encryptedVirtualUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.encryptedVirtualUserId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("encryptedNewPassword:");
      if (this.encryptedNewPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.encryptedNewPassword);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class requestVirtualAccountPasswordSet_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("requestVirtualAccountPasswordSet_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public requestVirtualAccountPasswordSet_result() {
    }

    public requestVirtualAccountPasswordSet_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestVirtualAccountPasswordSet_result(requestVirtualAccountPasswordSet_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public requestVirtualAccountPasswordSet_result deepCopy() {
      return new requestVirtualAccountPasswordSet_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof requestVirtualAccountPasswordSet_result)
        return this.equals((requestVirtualAccountPasswordSet_result)that);
      return false;
    }

    public boolean equals(requestVirtualAccountPasswordSet_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      requestVirtualAccountPasswordSet_result other = (requestVirtualAccountPasswordSet_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("requestVirtualAccountPasswordSet_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class unregisterVirtualAccount_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("unregisterVirtualAccount_args");

    private static final TField VIRTUAL_MID_FIELD_DESC = new TField("virtualMid", TType.STRING, (short)2);

    private String virtualMid;

    // isset id assignments

    public unregisterVirtualAccount_args() {
    }

    public unregisterVirtualAccount_args(
      String virtualMid)
    {
      this();
      this.virtualMid = virtualMid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unregisterVirtualAccount_args(unregisterVirtualAccount_args other) {
      if (other.isSetVirtualMid()) {
        this.virtualMid = other.virtualMid;
      }
    }

    public unregisterVirtualAccount_args deepCopy() {
      return new unregisterVirtualAccount_args(this);
    }

    public void clear() {
      this.virtualMid = null;
    }

    public String getVirtualMid() {
      return this.virtualMid;
    }

    public void setVirtualMid(String virtualMid) {
      this.virtualMid = virtualMid;
    }

    public void unsetVirtualMid() {
      this.virtualMid = null;
    }

    /** Returns true if field virtualMid is set (has been assigned a value) and false otherwise */
    public boolean isSetVirtualMid() {
      return this.virtualMid != null;
    }

    public void setVirtualMidIsSet(boolean value) {
      if (!value) {
        this.virtualMid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unregisterVirtualAccount_args)
        return this.equals((unregisterVirtualAccount_args)that);
      return false;
    }

    public boolean equals(unregisterVirtualAccount_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_virtualMid = true && this.isSetVirtualMid();
      boolean that_present_virtualMid = true && that.isSetVirtualMid();
      if (this_present_virtualMid || that_present_virtualMid) {
        if (!(this_present_virtualMid && that_present_virtualMid))
          return false;
        if (!this.virtualMid.equals(that.virtualMid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      unregisterVirtualAccount_args other = (unregisterVirtualAccount_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetVirtualMid(), other.isSetVirtualMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVirtualMid()) {
        lastComparison = TBaseHelper.compareTo(this.virtualMid, other.virtualMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // VIRTUAL_MID
            if (field.type == TType.STRING) {
              this.virtualMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.virtualMid != null) {
        oprot.writeFieldBegin(VIRTUAL_MID_FIELD_DESC);
        oprot.writeString(this.virtualMid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("unregisterVirtualAccount_args(");
      boolean first = true;

      sb.append("virtualMid:");
      if (this.virtualMid == null) {
        sb.append("null");
      } else {
        sb.append(this.virtualMid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class unregisterVirtualAccount_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("unregisterVirtualAccount_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public unregisterVirtualAccount_result() {
    }

    public unregisterVirtualAccount_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unregisterVirtualAccount_result(unregisterVirtualAccount_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public unregisterVirtualAccount_result deepCopy() {
      return new unregisterVirtualAccount_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unregisterVirtualAccount_result)
        return this.equals((unregisterVirtualAccount_result)that);
      return false;
    }

    public boolean equals(unregisterVirtualAccount_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      unregisterVirtualAccount_result other = (unregisterVirtualAccount_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("unregisterVirtualAccount_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
