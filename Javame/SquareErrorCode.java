/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
public class SquareErrorCode implements org.apache.thrift.TEnum {

  public static final SquareErrorCode UNKNOWN = new SquareErrorCode(0);
  public static final SquareErrorCode INTERNAL_ERROR = new SquareErrorCode(500);
  public static final SquareErrorCode NOT_IMPLEMENTED = new SquareErrorCode(501);
  public static final SquareErrorCode TRY_AGAIN_LATER = new SquareErrorCode(503);
  public static final SquareErrorCode MAINTENANCE = new SquareErrorCode(505);
  public static final SquareErrorCode ILLEGAL_ARGUMENT = new SquareErrorCode(400);
  public static final SquareErrorCode AUTHENTICATION_FAILURE = new SquareErrorCode(401);
  public static final SquareErrorCode FORBIDDEN = new SquareErrorCode(403);
  public static final SquareErrorCode NOT_FOUND = new SquareErrorCode(404);
  public static final SquareErrorCode REVISION_MISMATCH = new SquareErrorCode(409);
  public static final SquareErrorCode PRECONDITION_FAILED = new SquareErrorCode(410);

  private final int value;

  private SquareErrorCode(int value) {
    this.value = value;
  }

  /**
   * Get the integer value of this enum value, as defined in the Thrift IDL.
   */
  public int getValue() {
    return value;
  }

  /**
   * Find a the enum type by its integer value, as defined in the Thrift IDL.
   * @return null if the value is not found.
   */
  public static SquareErrorCode findByValue(int value) { 
    switch (value) {
      case 0:
        return UNKNOWN;
      case 500:
        return INTERNAL_ERROR;
      case 501:
        return NOT_IMPLEMENTED;
      case 503:
        return TRY_AGAIN_LATER;
      case 505:
        return MAINTENANCE;
      case 400:
        return ILLEGAL_ARGUMENT;
      case 401:
        return AUTHENTICATION_FAILURE;
      case 403:
        return FORBIDDEN;
      case 404:
        return NOT_FOUND;
      case 409:
        return REVISION_MISMATCH;
      case 410:
        return PRECONDITION_FAILED;
      default:
        return null;
    }
  }
}
