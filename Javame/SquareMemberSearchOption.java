/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class SquareMemberSearchOption implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("SquareMemberSearchOption");

  private static final TField MEMBERSHIP_STATE_FIELD_DESC = new TField("membershipState", TType.I32, (short)1);
  private static final TField MEMBER_ROLES_FIELD_DESC = new TField("memberRoles", TType.SET, (short)2);
  private static final TField DISPLAY_NAME_FIELD_DESC = new TField("displayName", TType.STRING, (short)3);
  private static final TField ABLE_TO_RECEIVE_MESSAGE_FIELD_DESC = new TField("ableToReceiveMessage", TType.I32, (short)4);
  private static final TField ABLE_TO_RECEIVE_FRIEND_REQUEST_FIELD_DESC = new TField("ableToReceiveFriendRequest", TType.I32, (short)5);
  private static final TField CHAT_MID_TO_EXCLUDE_MEMBERS_FIELD_DESC = new TField("chatMidToExcludeMembers", TType.STRING, (short)6);
  private static final TField INCLUDING_ME_FIELD_DESC = new TField("includingMe", TType.BOOL, (short)7);

  private SquareMembershipState membershipState;
  private Hashtable memberRoles;
  private String displayName;
  private BooleanState ableToReceiveMessage;
  private BooleanState ableToReceiveFriendRequest;
  private String chatMidToExcludeMembers;
  private boolean includingMe;

  // isset id assignments
  private static final int __INCLUDINGME_ISSET_ID = 0;
  private boolean[] __isset_vector = new boolean[1];

  public SquareMemberSearchOption() {
  }

  public SquareMemberSearchOption(
    SquareMembershipState membershipState,
    Hashtable memberRoles,
    String displayName,
    BooleanState ableToReceiveMessage,
    BooleanState ableToReceiveFriendRequest,
    String chatMidToExcludeMembers,
    boolean includingMe)
  {
    this();
    this.membershipState = membershipState;
    this.memberRoles = memberRoles;
    this.displayName = displayName;
    this.ableToReceiveMessage = ableToReceiveMessage;
    this.ableToReceiveFriendRequest = ableToReceiveFriendRequest;
    this.chatMidToExcludeMembers = chatMidToExcludeMembers;
    this.includingMe = includingMe;
    setIncludingMeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SquareMemberSearchOption(SquareMemberSearchOption other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    if (other.isSetMembershipState()) {
      this.membershipState = other.membershipState;
    }
    if (other.isSetMemberRoles()) {
      Hashtable __this__memberRoles = new Hashtable();
      for (Enumeration other_enum = other.memberRoles.elements(); other_enum.hasMoreElements(); ) {
        SquareMemberRole other_element = (SquareMemberRole)other_enum.nextElement();
        __this__memberRoles.addElement(other_element);
      }
      this.memberRoles = __this__memberRoles;
    }
    if (other.isSetDisplayName()) {
      this.displayName = other.displayName;
    }
    if (other.isSetAbleToReceiveMessage()) {
      this.ableToReceiveMessage = other.ableToReceiveMessage;
    }
    if (other.isSetAbleToReceiveFriendRequest()) {
      this.ableToReceiveFriendRequest = other.ableToReceiveFriendRequest;
    }
    if (other.isSetChatMidToExcludeMembers()) {
      this.chatMidToExcludeMembers = other.chatMidToExcludeMembers;
    }
    this.includingMe = other.includingMe;
  }

  public SquareMemberSearchOption deepCopy() {
    return new SquareMemberSearchOption(this);
  }

  public void clear() {
    this.membershipState = null;
    this.memberRoles = null;
    this.displayName = null;
    this.ableToReceiveMessage = null;
    this.ableToReceiveFriendRequest = null;
    this.chatMidToExcludeMembers = null;
    setIncludingMeIsSet(false);
    this.includingMe = false;
  }

  /**
   * 
   * @see SquareMembershipState
   */
  public SquareMembershipState getMembershipState() {
    return this.membershipState;
  }

  /**
   * 
   * @see SquareMembershipState
   */
  public void setMembershipState(SquareMembershipState membershipState) {
    this.membershipState = membershipState;
  }

  public void unsetMembershipState() {
    this.membershipState = null;
  }

  /** Returns true if field membershipState is set (has been assigned a value) and false otherwise */
  public boolean isSetMembershipState() {
    return this.membershipState != null;
  }

  public void setMembershipStateIsSet(boolean value) {
    if (!value) {
      this.membershipState = null;
    }
  }

  public int getMemberRolesSize() {
    return (this.memberRoles == null) ? 0 : this.memberRoles.size();
  }

  public Enumeration getMemberRolesEnumeration() {
    return (this.memberRoles == null) ? null : this.memberRoles.elements();
  }

  public void addToMemberRoles(SquareMemberRole elem) {
    if (this.memberRoles == null) {
      this.memberRoles = new Hashtable();
    }
    this.memberRoles.put(elem, elem);
  }

  public Hashtable getMemberRoles() {
    return this.memberRoles;
  }

  public void setMemberRoles(Hashtable memberRoles) {
    this.memberRoles = memberRoles;
  }

  public void unsetMemberRoles() {
    this.memberRoles = null;
  }

  /** Returns true if field memberRoles is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberRoles() {
    return this.memberRoles != null;
  }

  public void setMemberRolesIsSet(boolean value) {
    if (!value) {
      this.memberRoles = null;
    }
  }

  public String getDisplayName() {
    return this.displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }

  public void unsetDisplayName() {
    this.displayName = null;
  }

  /** Returns true if field displayName is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayName() {
    return this.displayName != null;
  }

  public void setDisplayNameIsSet(boolean value) {
    if (!value) {
      this.displayName = null;
    }
  }

  /**
   * 
   * @see BooleanState
   */
  public BooleanState getAbleToReceiveMessage() {
    return this.ableToReceiveMessage;
  }

  /**
   * 
   * @see BooleanState
   */
  public void setAbleToReceiveMessage(BooleanState ableToReceiveMessage) {
    this.ableToReceiveMessage = ableToReceiveMessage;
  }

  public void unsetAbleToReceiveMessage() {
    this.ableToReceiveMessage = null;
  }

  /** Returns true if field ableToReceiveMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetAbleToReceiveMessage() {
    return this.ableToReceiveMessage != null;
  }

  public void setAbleToReceiveMessageIsSet(boolean value) {
    if (!value) {
      this.ableToReceiveMessage = null;
    }
  }

  /**
   * 
   * @see BooleanState
   */
  public BooleanState getAbleToReceiveFriendRequest() {
    return this.ableToReceiveFriendRequest;
  }

  /**
   * 
   * @see BooleanState
   */
  public void setAbleToReceiveFriendRequest(BooleanState ableToReceiveFriendRequest) {
    this.ableToReceiveFriendRequest = ableToReceiveFriendRequest;
  }

  public void unsetAbleToReceiveFriendRequest() {
    this.ableToReceiveFriendRequest = null;
  }

  /** Returns true if field ableToReceiveFriendRequest is set (has been assigned a value) and false otherwise */
  public boolean isSetAbleToReceiveFriendRequest() {
    return this.ableToReceiveFriendRequest != null;
  }

  public void setAbleToReceiveFriendRequestIsSet(boolean value) {
    if (!value) {
      this.ableToReceiveFriendRequest = null;
    }
  }

  public String getChatMidToExcludeMembers() {
    return this.chatMidToExcludeMembers;
  }

  public void setChatMidToExcludeMembers(String chatMidToExcludeMembers) {
    this.chatMidToExcludeMembers = chatMidToExcludeMembers;
  }

  public void unsetChatMidToExcludeMembers() {
    this.chatMidToExcludeMembers = null;
  }

  /** Returns true if field chatMidToExcludeMembers is set (has been assigned a value) and false otherwise */
  public boolean isSetChatMidToExcludeMembers() {
    return this.chatMidToExcludeMembers != null;
  }

  public void setChatMidToExcludeMembersIsSet(boolean value) {
    if (!value) {
      this.chatMidToExcludeMembers = null;
    }
  }

  public boolean isIncludingMe() {
    return this.includingMe;
  }

  public void setIncludingMe(boolean includingMe) {
    this.includingMe = includingMe;
    setIncludingMeIsSet(true);
  }

  public void unsetIncludingMe() {
    __isset_vector[__INCLUDINGME_ISSET_ID] = false;
  }

  /** Returns true if field includingMe is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludingMe() {
    return __isset_vector[__INCLUDINGME_ISSET_ID];
  }

  public void setIncludingMeIsSet(boolean value) {
    __isset_vector[__INCLUDINGME_ISSET_ID] = value;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SquareMemberSearchOption)
      return this.equals((SquareMemberSearchOption)that);
    return false;
  }

  public boolean equals(SquareMemberSearchOption that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_membershipState = true && this.isSetMembershipState();
    boolean that_present_membershipState = true && that.isSetMembershipState();
    if (this_present_membershipState || that_present_membershipState) {
      if (!(this_present_membershipState && that_present_membershipState))
        return false;
      if (!this.membershipState.equals(that.membershipState))
        return false;
    }

    boolean this_present_memberRoles = true && this.isSetMemberRoles();
    boolean that_present_memberRoles = true && that.isSetMemberRoles();
    if (this_present_memberRoles || that_present_memberRoles) {
      if (!(this_present_memberRoles && that_present_memberRoles))
        return false;
      if (!this.memberRoles.equals(that.memberRoles))
        return false;
    }

    boolean this_present_displayName = true && this.isSetDisplayName();
    boolean that_present_displayName = true && that.isSetDisplayName();
    if (this_present_displayName || that_present_displayName) {
      if (!(this_present_displayName && that_present_displayName))
        return false;
      if (!this.displayName.equals(that.displayName))
        return false;
    }

    boolean this_present_ableToReceiveMessage = true && this.isSetAbleToReceiveMessage();
    boolean that_present_ableToReceiveMessage = true && that.isSetAbleToReceiveMessage();
    if (this_present_ableToReceiveMessage || that_present_ableToReceiveMessage) {
      if (!(this_present_ableToReceiveMessage && that_present_ableToReceiveMessage))
        return false;
      if (!this.ableToReceiveMessage.equals(that.ableToReceiveMessage))
        return false;
    }

    boolean this_present_ableToReceiveFriendRequest = true && this.isSetAbleToReceiveFriendRequest();
    boolean that_present_ableToReceiveFriendRequest = true && that.isSetAbleToReceiveFriendRequest();
    if (this_present_ableToReceiveFriendRequest || that_present_ableToReceiveFriendRequest) {
      if (!(this_present_ableToReceiveFriendRequest && that_present_ableToReceiveFriendRequest))
        return false;
      if (!this.ableToReceiveFriendRequest.equals(that.ableToReceiveFriendRequest))
        return false;
    }

    boolean this_present_chatMidToExcludeMembers = true && this.isSetChatMidToExcludeMembers();
    boolean that_present_chatMidToExcludeMembers = true && that.isSetChatMidToExcludeMembers();
    if (this_present_chatMidToExcludeMembers || that_present_chatMidToExcludeMembers) {
      if (!(this_present_chatMidToExcludeMembers && that_present_chatMidToExcludeMembers))
        return false;
      if (!this.chatMidToExcludeMembers.equals(that.chatMidToExcludeMembers))
        return false;
    }

    boolean this_present_includingMe = true;
    boolean that_present_includingMe = true;
    if (this_present_includingMe || that_present_includingMe) {
      if (!(this_present_includingMe && that_present_includingMe))
        return false;
      if (this.includingMe != that.includingMe)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    SquareMemberSearchOption other = (SquareMemberSearchOption)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetMembershipState(), other.isSetMembershipState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMembershipState()) {
      lastComparison = TBaseHelper.compareTo(this.membershipState, other.membershipState);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetMemberRoles(), other.isSetMemberRoles());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberRoles()) {
      lastComparison = TBaseHelper.compareTo(this.memberRoles, other.memberRoles);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetDisplayName(), other.isSetDisplayName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayName()) {
      lastComparison = TBaseHelper.compareTo(this.displayName, other.displayName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetAbleToReceiveMessage(), other.isSetAbleToReceiveMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAbleToReceiveMessage()) {
      lastComparison = TBaseHelper.compareTo(this.ableToReceiveMessage, other.ableToReceiveMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetAbleToReceiveFriendRequest(), other.isSetAbleToReceiveFriendRequest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAbleToReceiveFriendRequest()) {
      lastComparison = TBaseHelper.compareTo(this.ableToReceiveFriendRequest, other.ableToReceiveFriendRequest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetChatMidToExcludeMembers(), other.isSetChatMidToExcludeMembers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChatMidToExcludeMembers()) {
      lastComparison = TBaseHelper.compareTo(this.chatMidToExcludeMembers, other.chatMidToExcludeMembers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetIncludingMe(), other.isSetIncludingMe());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludingMe()) {
      lastComparison = TBaseHelper.compareTo(this.includingMe, other.includingMe);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // MEMBERSHIP_STATE
          if (field.type == TType.I32) {
            this.membershipState = SquareMembershipState.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // MEMBER_ROLES
          if (field.type == TType.SET) {
            {
              TSet _set329 = iprot.readSetBegin();
              this.memberRoles = new Hashtable(2*_set329.size);
              for (int _i330 = 0; _i330 < _set329.size; ++_i330)
              {
                SquareMemberRole _elem331;
                _elem331 = SquareMemberRole.findByValue(iprot.readI32());
                this.memberRoles.put(_elem331, _elem331);
              }
              iprot.readSetEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // DISPLAY_NAME
          if (field.type == TType.STRING) {
            this.displayName = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // ABLE_TO_RECEIVE_MESSAGE
          if (field.type == TType.I32) {
            this.ableToReceiveMessage = BooleanState.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // ABLE_TO_RECEIVE_FRIEND_REQUEST
          if (field.type == TType.I32) {
            this.ableToReceiveFriendRequest = BooleanState.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // CHAT_MID_TO_EXCLUDE_MEMBERS
          if (field.type == TType.STRING) {
            this.chatMidToExcludeMembers = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // INCLUDING_ME
          if (field.type == TType.BOOL) {
            this.includingMe = iprot.readBool();
            setIncludingMeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.membershipState != null) {
      oprot.writeFieldBegin(MEMBERSHIP_STATE_FIELD_DESC);
      oprot.writeI32(this.membershipState.getValue());
      oprot.writeFieldEnd();
    }
    if (this.memberRoles != null) {
      oprot.writeFieldBegin(MEMBER_ROLES_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.I32, this.memberRoles.size()));
        for (Enumeration _iter332_enum = this.memberRoles.keys(); _iter332_enum.hasMoreElements(); )         {
          SquareMemberRole _iter332 = (SquareMemberRole)_iter332_enum.nextElement();
          oprot.writeI32(_iter332.getValue());
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.displayName != null) {
      oprot.writeFieldBegin(DISPLAY_NAME_FIELD_DESC);
      oprot.writeString(this.displayName);
      oprot.writeFieldEnd();
    }
    if (this.ableToReceiveMessage != null) {
      oprot.writeFieldBegin(ABLE_TO_RECEIVE_MESSAGE_FIELD_DESC);
      oprot.writeI32(this.ableToReceiveMessage.getValue());
      oprot.writeFieldEnd();
    }
    if (this.ableToReceiveFriendRequest != null) {
      oprot.writeFieldBegin(ABLE_TO_RECEIVE_FRIEND_REQUEST_FIELD_DESC);
      oprot.writeI32(this.ableToReceiveFriendRequest.getValue());
      oprot.writeFieldEnd();
    }
    if (this.chatMidToExcludeMembers != null) {
      oprot.writeFieldBegin(CHAT_MID_TO_EXCLUDE_MEMBERS_FIELD_DESC);
      oprot.writeString(this.chatMidToExcludeMembers);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(INCLUDING_ME_FIELD_DESC);
    oprot.writeBool(this.includingMe);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("SquareMemberSearchOption(");
    boolean first = true;

    sb.append("membershipState:");
    if (this.membershipState == null) {
      sb.append("null");
    } else {
      sb.append(this.membershipState);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberRoles:");
    if (this.memberRoles == null) {
      sb.append("null");
    } else {
      sb.append(this.memberRoles);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("displayName:");
    if (this.displayName == null) {
      sb.append("null");
    } else {
      sb.append(this.displayName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ableToReceiveMessage:");
    if (this.ableToReceiveMessage == null) {
      sb.append("null");
    } else {
      sb.append(this.ableToReceiveMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ableToReceiveFriendRequest:");
    if (this.ableToReceiveFriendRequest == null) {
      sb.append("null");
    } else {
      sb.append(this.ableToReceiveFriendRequest);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chatMidToExcludeMembers:");
    if (this.chatMidToExcludeMembers == null) {
      sb.append("null");
    } else {
      sb.append(this.chatMidToExcludeMembers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("includingMe:");
    sb.append(this.includingMe);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

