#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from line import ChannelApplicationProvidedService
from line.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  i64 activeBuddySubscriberCount()')
    print('  void addOperationForChannel(OpType opType, string param1, string param2, string param3)')
    print('  i64 displayBuddySubscriberCount()')
    print('  Contact findContactByUseridWithoutAbuseBlockForChannel(string userid)')
    print('   getAllContactIdsForChannel()')
    print('   getCompactContacts(i64 lastModifiedTimestamp)')
    print('   getContactsForChannel( ids)')
    print('  string getDisplayName(string mid)')
    print('   getFavoriteMidsForChannel()')
    print('   getFriendMids()')
    print('   getGroupMemberMids(string groupId)')
    print('   getGroupsForChannel( groupIds)')
    print('  IdentityCredential getIdentityCredential()')
    print('   getJoinedGroupIdsForChannel()')
    print('  MetaProfile getMetaProfile()')
    print('  string getMid()')
    print('  SimpleChannelClient getPrimaryClientForChannel()')
    print('  Profile getProfileForChannel()')
    print('   getSimpleChannelContacts( ids)')
    print('  string getUserCountryForBilling(string country, string remoteIp)')
    print('  i64 getUserCreateTime()')
    print('   getUserIdentities()')
    print('  string getUserLanguage()')
    print('   getUserMidsWhoAddedMe()')
    print('  bool isGroupMember(string groupId)')
    print('  bool isInContact(string mid)')
    print('  string registerChannelCP(string cpId, string registerPassword)')
    print('  void removeNotificationStatus(NotificationStatus notificationStatus)')
    print('  Message sendMessageForChannel(Message message)')
    print('  void sendPinCodeOperation(string verifier)')
    print('  void updateProfileAttributeForChannel(ProfileAttribute profileAttribute, string value)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ChannelApplicationProvidedService.Client(protocol)
transport.open()

if cmd == 'activeBuddySubscriberCount':
    if len(args) != 0:
        print('activeBuddySubscriberCount requires 0 args')
        sys.exit(1)
    pp.pprint(client.activeBuddySubscriberCount())

elif cmd == 'addOperationForChannel':
    if len(args) != 4:
        print('addOperationForChannel requires 4 args')
        sys.exit(1)
    pp.pprint(client.addOperationForChannel(eval(args[0]), args[1], args[2], args[3],))

elif cmd == 'displayBuddySubscriberCount':
    if len(args) != 0:
        print('displayBuddySubscriberCount requires 0 args')
        sys.exit(1)
    pp.pprint(client.displayBuddySubscriberCount())

elif cmd == 'findContactByUseridWithoutAbuseBlockForChannel':
    if len(args) != 1:
        print('findContactByUseridWithoutAbuseBlockForChannel requires 1 args')
        sys.exit(1)
    pp.pprint(client.findContactByUseridWithoutAbuseBlockForChannel(args[0],))

elif cmd == 'getAllContactIdsForChannel':
    if len(args) != 0:
        print('getAllContactIdsForChannel requires 0 args')
        sys.exit(1)
    pp.pprint(client.getAllContactIdsForChannel())

elif cmd == 'getCompactContacts':
    if len(args) != 1:
        print('getCompactContacts requires 1 args')
        sys.exit(1)
    pp.pprint(client.getCompactContacts(eval(args[0]),))

elif cmd == 'getContactsForChannel':
    if len(args) != 1:
        print('getContactsForChannel requires 1 args')
        sys.exit(1)
    pp.pprint(client.getContactsForChannel(eval(args[0]),))

elif cmd == 'getDisplayName':
    if len(args) != 1:
        print('getDisplayName requires 1 args')
        sys.exit(1)
    pp.pprint(client.getDisplayName(args[0],))

elif cmd == 'getFavoriteMidsForChannel':
    if len(args) != 0:
        print('getFavoriteMidsForChannel requires 0 args')
        sys.exit(1)
    pp.pprint(client.getFavoriteMidsForChannel())

elif cmd == 'getFriendMids':
    if len(args) != 0:
        print('getFriendMids requires 0 args')
        sys.exit(1)
    pp.pprint(client.getFriendMids())

elif cmd == 'getGroupMemberMids':
    if len(args) != 1:
        print('getGroupMemberMids requires 1 args')
        sys.exit(1)
    pp.pprint(client.getGroupMemberMids(args[0],))

elif cmd == 'getGroupsForChannel':
    if len(args) != 1:
        print('getGroupsForChannel requires 1 args')
        sys.exit(1)
    pp.pprint(client.getGroupsForChannel(eval(args[0]),))

elif cmd == 'getIdentityCredential':
    if len(args) != 0:
        print('getIdentityCredential requires 0 args')
        sys.exit(1)
    pp.pprint(client.getIdentityCredential())

elif cmd == 'getJoinedGroupIdsForChannel':
    if len(args) != 0:
        print('getJoinedGroupIdsForChannel requires 0 args')
        sys.exit(1)
    pp.pprint(client.getJoinedGroupIdsForChannel())

elif cmd == 'getMetaProfile':
    if len(args) != 0:
        print('getMetaProfile requires 0 args')
        sys.exit(1)
    pp.pprint(client.getMetaProfile())

elif cmd == 'getMid':
    if len(args) != 0:
        print('getMid requires 0 args')
        sys.exit(1)
    pp.pprint(client.getMid())

elif cmd == 'getPrimaryClientForChannel':
    if len(args) != 0:
        print('getPrimaryClientForChannel requires 0 args')
        sys.exit(1)
    pp.pprint(client.getPrimaryClientForChannel())

elif cmd == 'getProfileForChannel':
    if len(args) != 0:
        print('getProfileForChannel requires 0 args')
        sys.exit(1)
    pp.pprint(client.getProfileForChannel())

elif cmd == 'getSimpleChannelContacts':
    if len(args) != 1:
        print('getSimpleChannelContacts requires 1 args')
        sys.exit(1)
    pp.pprint(client.getSimpleChannelContacts(eval(args[0]),))

elif cmd == 'getUserCountryForBilling':
    if len(args) != 2:
        print('getUserCountryForBilling requires 2 args')
        sys.exit(1)
    pp.pprint(client.getUserCountryForBilling(args[0], args[1],))

elif cmd == 'getUserCreateTime':
    if len(args) != 0:
        print('getUserCreateTime requires 0 args')
        sys.exit(1)
    pp.pprint(client.getUserCreateTime())

elif cmd == 'getUserIdentities':
    if len(args) != 0:
        print('getUserIdentities requires 0 args')
        sys.exit(1)
    pp.pprint(client.getUserIdentities())

elif cmd == 'getUserLanguage':
    if len(args) != 0:
        print('getUserLanguage requires 0 args')
        sys.exit(1)
    pp.pprint(client.getUserLanguage())

elif cmd == 'getUserMidsWhoAddedMe':
    if len(args) != 0:
        print('getUserMidsWhoAddedMe requires 0 args')
        sys.exit(1)
    pp.pprint(client.getUserMidsWhoAddedMe())

elif cmd == 'isGroupMember':
    if len(args) != 1:
        print('isGroupMember requires 1 args')
        sys.exit(1)
    pp.pprint(client.isGroupMember(args[0],))

elif cmd == 'isInContact':
    if len(args) != 1:
        print('isInContact requires 1 args')
        sys.exit(1)
    pp.pprint(client.isInContact(args[0],))

elif cmd == 'registerChannelCP':
    if len(args) != 2:
        print('registerChannelCP requires 2 args')
        sys.exit(1)
    pp.pprint(client.registerChannelCP(args[0], args[1],))

elif cmd == 'removeNotificationStatus':
    if len(args) != 1:
        print('removeNotificationStatus requires 1 args')
        sys.exit(1)
    pp.pprint(client.removeNotificationStatus(eval(args[0]),))

elif cmd == 'sendMessageForChannel':
    if len(args) != 1:
        print('sendMessageForChannel requires 1 args')
        sys.exit(1)
    pp.pprint(client.sendMessageForChannel(eval(args[0]),))

elif cmd == 'sendPinCodeOperation':
    if len(args) != 1:
        print('sendPinCodeOperation requires 1 args')
        sys.exit(1)
    pp.pprint(client.sendPinCodeOperation(args[0],))

elif cmd == 'updateProfileAttributeForChannel':
    if len(args) != 2:
        print('updateProfileAttributeForChannel requires 2 args')
        sys.exit(1)
    pp.pprint(client.updateProfileAttributeForChannel(eval(args[0]), args[1],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
