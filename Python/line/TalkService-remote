#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from line import TalkService
from line.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  SearchResult searchCollection(string query, SearchPagingParameter param)')
    print('   getChatRoomAnnouncementsBulk( chatRoomMids)')
    print('   getChatRoomAnnouncements(string chatRoomMid)')
    print('  ChatRoomAnnouncement createChatRoomAnnouncement(i32 reqSeq, string chatRoomMid, ChatRoomAnnouncementType type, ChatRoomAnnouncementContents contents)')
    print('  void removeChatRoomAnnouncement(i32 reqSeq, string chatRoomMid, i64 announcementSeq)')
    print('  void unsendMessage(i32 seq, string messageId)')
    print('  Group getGroupWithoutMembers(string groupId)')
    print('  void requestResendMessage(i32 reqSeq, string senderMid, string messageId)')
    print('  void respondResendMessage(i32 reqSeq, string receiverMid, string originalMessageId, Message resendMessage, ErrorCode errorCode)')
    print('  void acceptGroupInvitation(i32 reqSeq, string groupId)')
    print('  void acceptGroupInvitationByTicket(i32 reqSeq, string GroupMid, string ticketId)')
    print('  void acceptProximityMatches(string sessionId,  ids)')
    print('   acquireCallRoute(string to)')
    print('  string acquireCallTicket(string to)')
    print('  string acquireEncryptedAccessToken(FeatureType featureType)')
    print('  string addSnsId(SnsIdType snsIdType, string snsAccessToken)')
    print('  void blockContact(i32 reqSeq, string id)')
    print('  void blockRecommendation(i32 reqSeq, string id)')
    print('  void cancelGroupInvitation(i32 reqSeq, string groupId,  contactIds)')
    print('  VerificationSessionData changeVerificationMethod(string sessionId, VerificationMethod method)')
    print('  void clearIdentityCredential()')
    print('  void clearMessageBox(string channelId, string messageBoxId)')
    print('  void closeProximityMatch(string sessionId)')
    print('   commitSendMessage(i32 seq, string messageId,  receiverMids)')
    print('   commitSendMessages(i32 seq,  messageIds,  receiverMids)')
    print('   commitUpdateProfile(i32 seq,  attrs,  receiverMids)')
    print('  void confirmEmail(string verifier, string pinCode)')
    print('  Group createGroup(i32 seq, string name,  contactIds)')
    print('  string createQrcodeBase64Image(string url, string characterSet, i32 imageSize, i32 x, i32 y, i32 width, i32 height)')
    print('  Room createRoom(i32 reqSeq,  contactIds)')
    print('  string createSession()')
    print('   fetchAnnouncements(i32 lastFetchedIndex)')
    print('   fetchMessages(i64 localTs, i32 count)')
    print('   fetchOperations(i64 localRev, i32 count)')
    print('   fetchOps(i64 localRev, i32 count, i64 globalRev, i64 individualRev)')
    print('   findAndAddContactsByEmail(i32 reqSeq,  emails)')
    print('   findAndAddContactsByMid(i32 reqSeq, string mid, ContactType type, string reference)')
    print('  Group findGroupByTicketV2(string ticketId)')
    print('   findAndAddContactsByPhone(i32 reqSeq,  phones)')
    print('   getFriendRequests(FriendRequestDirection direction, i64 lastSeenSeqId)')
    print('  void removeFriendRequest(FriendRequestDirection direction, string midOrEMid)')
    print('   findAndAddContactsByUserid(i32 reqSeq, string userid)')
    print('  Contact findContactByUserid(string userid)')
    print('  Contact findContactByUserTicket(string ticketIdWithTag)')
    print('   findContactsByEmail( emails)')
    print('   findContactsByPhone( phones)')
    print('  SnsIdUserStatus findSnsIdUserStatus(SnsIdType snsIdType, string snsAccessToken, string udidHash)')
    print('  void finishUpdateVerification(string sessionId)')
    print('  Ticket generateUserTicket(i64 expirationTime, i32 maxUseCount)')
    print('  void destroyMessage(i32 seq, string chatId, string messageId, i32 sessionId)')
    print('   getAcceptedProximityMatches(string sessionId)')
    print('   getActiveBuddySubscriberIds()')
    print('   getAllContactIds()')
    print('  AuthQrcode getAuthQrcode(bool keepLoggedIn, string systemName)')
    print('   getBlockedContactIds()')
    print('  RegisterWithPhoneNumberResult registerWithPhoneNumber(string sessionId, string migrationPincodeSessionId)')
    print('  RegisterWithPhoneNumberResult registerWithPhoneNumberAndPassword(string sessionId, string keynm, string encrypted)')
    print('  AnalyticsInfo getAnalyticsInfo()')
    print('  void reportClientStatistics(i32 reqSeq, ReportCategory category, i32 count)')
    print('  string verifyPhoneNumberForLogin(string verifierFromPhone, string pinCodeForPhone, string verifierFromLogin)')
    print('  PhoneVerificationResult verifyPhoneNumber(string sessionId, string pinCode, string udidHash, string migrationPincodeSessionId, string oldUdidHash)')
    print('   getBlockedContactIdsByRange(i32 start, i32 count)')
    print('   getBlockedRecommendationIds()')
    print('   getBuddyBlockerIds()')
    print('  Geolocation getBuddyLocation(string mid, i32 index)')
    print('   getCompactContactsModifiedSince(i64 timestamp)')
    print('  Group getCompactGroup(string groupId)')
    print('  Room getCompactRoom(string roomId)')
    print('  Contact getContact(string id)')
    print('   getContacts( ids)')
    print('  Contact getContactWithFriendRequestStatus(string id)')
    print('  string getCountryWithRequestIp()')
    print('   getFavoriteMids()')
    print('  Group getGroup(string groupId)')
    print('   getGroupIdsInvited()')
    print('   getGroupIdsJoined()')
    print('   getGroups( groupIds)')
    print('   getHiddenContactMids()')
    print('  string getIdentityIdentifier()')
    print('  i32 getLastAnnouncementIndex()')
    print('  i64 getLastOpRevision()')
    print('  SuggestDictionaryRevisions getSuggestRevisions()')
    print('   getPreviousMessagesV2WithReadCount(string messageBoxId, MessageBoxV2MessageId endMessageId, i32 messagesCount)')
    print('  TMessageBox getMessageBox(string channelId, string messageBoxId, i32 lastMessagesCount)')
    print('  TMessageBoxWrapUp getMessageBoxCompactWrapUp(string mid)')
    print('  TMessageBoxWrapUpResponse getMessageBoxCompactWrapUpList(i32 start, i32 messageBoxCount)')
    print('   getMessageBoxList(string channelId, i32 lastMessagesCount)')
    print('   getMessageBoxListByStatus(string channelId, i32 lastMessagesCount, i32 status)')
    print('  TMessageBoxWrapUp getMessageBoxWrapUp(string mid)')
    print('  TMessageBoxWrapUpResponse getMessageBoxWrapUpList(i32 start, i32 messageBoxCount)')
    print('   getMessagesBySequenceNumber(string channelId, string messageBoxId, i64 startSeq, i64 endSeq)')
    print('   getNextMessages(string messageBoxId, i64 startSeq, i32 messagesCount)')
    print('   getNotificationPolicy(CarrierCode carrier)')
    print('   getPreviousMessages(string messageBoxId, i64 endSeq, i32 messagesCount)')
    print('  Profile getProfile()')
    print('  ProximityMatchCandidateResult getProximityMatchCandidateList(string sessionId)')
    print('   getProximityMatchCandidates(string sessionId)')
    print('   getRecentMessages(string messageBoxId, i32 messagesCount)')
    print('   getRecommendationIds()')
    print('  Room getRoom(string roomId)')
    print('  RSAKey getRSAKeyInfo(IdentityProvider provider)')
    print('  i64 getServerTime()')
    print('   getSessions()')
    print('  Settings getSettings()')
    print('   getGroupsV2( groupIds)')
    print('  Settings getSettingsAttributes(i32 attrBitset)')
    print('  SystemConfiguration getSystemConfiguration()')
    print('  Ticket getUserTicket()')
    print('  WapInvitation getWapInvitation(string invitationHash)')
    print('  void invalidateUserTicket()')
    print('  void inviteFriendsBySms( phoneNumberList)')
    print('  void inviteIntoGroup(i32 reqSeq, string groupId,  contactIds)')
    print('  void inviteIntoRoom(i32 reqSeq, string roomId,  contactIds)')
    print('  void inviteViaEmail(i32 reqSeq, string email, string name)')
    print('  bool isIdentityIdentifierAvailable(IdentityProvider provider, string identifier)')
    print('  bool isUseridAvailable(string userid)')
    print('  void kickoutFromGroup(i32 reqSeq, string groupId,  contactIds)')
    print('  string reissueGroupTicket(string groupMid)')
    print('  Group findGroupByTicket(string ticketId)')
    print('  void leaveGroup(i32 reqSeq, string groupId)')
    print('  void leaveRoom(i32 reqSeq, string roomId)')
    print('  string loginWithIdentityCredential(IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate)')
    print('  LoginResult loginWithIdentityCredentialForCertificate(IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate)')
    print('  string loginWithVerifier(string verifier)')
    print('  LoginResult loginWithVerifierForCerificate(string verifier)')
    print('  LoginResult loginWithVerifierForCertificate(string verifier)')
    print('  void logout()')
    print('  void logoutSession(string tokenKey)')
    print('  void noop()')
    print('  void notifiedRedirect( paramMap)')
    print('   notifyBuddyOnAir(i32 seq,  receiverMids)')
    print('  void notifyIndividualEvent(NotificationStatus notificationStatus,  receiverMids)')
    print('  void notifyInstalled(string udidHash, string applicationTypeWithExtensions)')
    print('  void notifyRegistrationComplete(string udidHash, string applicationTypeWithExtensions)')
    print('  void notifySleep(i64 lastRev, i32 badge)')
    print('  void notifyUpdated(i64 lastRev, DeviceInfo deviceInfo)')
    print('  string openProximityMatch(Location location)')
    print('  string registerBuddyUser(string buddyId, string registrarPassword)')
    print('  void registerBuddyUserid(i32 seq, string userid)')
    print('  string registerDevice(string sessionId)')
    print('  string registerDeviceWithIdentityCredential(string sessionId, IdentityProvider provider, string identifier, string verifier)')
    print('  string registerDeviceWithoutPhoneNumber(string region, string udidHash, DeviceInfo deviceInfo)')
    print('  string registerDeviceWithoutPhoneNumberWithIdentityCredential(string region, string udidHash, DeviceInfo deviceInfo, IdentityProvider provider, string identifier, string verifier, string mid, string migrationPincodeSessionId)')
    print('  bool registerUserid(i32 reqSeq, string userid)')
    print('  string registerWapDevice(string invitationHash, string guidHash, string email, DeviceInfo deviceInfo)')
    print('  string registerWithExistingSnsIdAndIdentityCredential(IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo)')
    print('  RegisterWithSnsIdResult registerWithSnsId(SnsIdType snsIdType, string snsAccessToken, string region, string udidHash, DeviceInfo deviceInfo, string mid)')
    print('  string registerWithSnsIdAndIdentityCredential(SnsIdType snsIdType, string snsAccessToken, IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo)')
    print('  string reissueDeviceCredential()')
    print('  string reissueUserTicket(i64 expirationTime, i32 maxUseCount)')
    print('   getMessageReadRange( chatIds)')
    print('  void rejectGroupInvitation(i32 reqSeq, string groupId)')
    print('  void releaseSession()')
    print('  void removeAllMessages(i32 seq, string lastMessageId)')
    print('  void removeBuddyLocation(string mid, i32 index)')
    print('  bool removeMessage(string messageId)')
    print('  ContactTransition makeUserAddMyselfAsContact(string contactOwnerMid)')
    print('  bool removeMessageFromMyHome(string messageId)')
    print('  string removeSnsId(SnsIdType snsIdType)')
    print('  void report(i64 syncOpRevision, SyncCategory category, string report)')
    print('   reportContacts(i64 syncOpRevision, SyncCategory category,  contactReports, SyncActionType actionType)')
    print('  void reportGroups(i64 syncOpRevision,  groups)')
    print('  void reportProfile(i64 syncOpRevision, Profile profile)')
    print('  void reportRooms(i64 syncOpRevision,  rooms)')
    print('  Contact findAndAddContactByMetaTag(i32 reqSeq, string userid, string reference)')
    print('  void reportSettings(i64 syncOpRevision, Settings settings)')
    print('  void reportSpam(string chatMid,  memberMids,  spammerReasons,  senderMids,  spamMessageIds,  spamMessages)')
    print('  void reportSpammer(string spammerMid,  spammerReasons,  spamMessageIds)')
    print('  void requestAccountPasswordReset(IdentityProvider provider, string identifier, string locale)')
    print('  EmailConfirmationSession requestEmailConfirmation(EmailConfirmation emailConfirmation)')
    print('  void requestIdentityUnbind(IdentityProvider provider, string identifier)')
    print('  EmailConfirmationSession resendEmailConfirmation(string verifier)')
    print('  void resendPinCode(string sessionId)')
    print('  void resendPinCodeBySMS(string sessionId)')
    print('  void sendChatChecked(i32 seq, string consumer, string lastMessageId)')
    print('  CommitMessageResult sendMessageAwaitCommit(i32 seq, Message message)')
    print('  void sendChatRemoved(i32 seq, string consumer, string lastMessageId)')
    print('   sendContentPreviewUpdated(i32 esq, string messageId,  receiverMids)')
    print('  void sendContentReceipt(i32 seq, string consumer, string messageId)')
    print('  void sendDummyPush()')
    print('  void removeE2EEPublicKey(E2EEPublicKey publicKey)')
    print('  E2EENegotiationResult negotiateE2EEPublicKey(string mid)')
    print('  E2EEPublicKey getE2EEPublicKey(string mid, i32 version, i32 keyId)')
    print('  void requestE2EEKeyExchange(i32 reqSeq, string temporalPublicKey, E2EEPublicKey publicKey, string verifier)')
    print('   getLastE2EEPublicKeys(string chatMid)')
    print('  E2EEPublicKey registerE2EEPublicKey(i32 reqSeq, E2EEPublicKey publicKey)')
    print('   getE2EEPublicKeys()')
    print('   getE2EEPublicKeysEx(bool ignoreE2EEStatus)')
    print('   getReadMessageOpsInBulk( chatIds)')
    print('  Message sendEvent(i32 seq, Message message)')
    print('  Message sendMessage(i32 seq, Message message)')
    print('  void sendMessageIgnored(i32 seq, string consumer,  messageIds)')
    print('  void sendMessageReceipt(i32 seq, string consumer,  messageIds)')
    print('  Contact findContactByMetaTag(string userid, string reference)')
    print('  Message sendMessageToMyHome(i32 seq, Message message)')
    print('  void setBuddyLocation(string mid, i32 index, Geolocation location)')
    print('  void setIdentityCredential(string identifier, string verifier, IdentityProvider provider)')
    print('  void setNotificationsEnabled(i32 reqSeq, MIDType type, string target, bool enablement)')
    print('  VerificationSessionData startUpdateVerification(string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string locale)')
    print('  VerificationSessionData startVerification(string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string mid, string locale, SIMInfo simInfo, string oldUdidHash)')
    print('  void updateGroupPreferenceAttribute(i32 reqSeq, string groupMid,  updatedAttrs)')
    print('  Room createRoomV2(i32 reqSeq,  contactIds)')
    print('  void storeUpdateProfileAttribute(i32 seq, ProfileAttribute profileAttribute, string value)')
    print('   syncContactBySnsIds(i32 reqSeq,  modifications)')
    print('   syncContacts(i32 reqSeq,  localContacts)')
    print('  Message trySendMessage(i32 seq, Message message)')
    print('   getNextMessagesV2(string messageBoxId, MessageBoxV2MessageId startMessageId, i32 messagesCount)')
    print('  TMessageBoxWrapUp getMessageBoxCompactWrapUpV2(string messageBoxId)')
    print('   getRecentMessagesV2(string messageBoxId, i32 messagesCount)')
    print('   validateContactsOnBot( contacts)')
    print('  void tryFriendRequest(string midOrEMid, FriendRequestMethod method, string friendRequestParams)')
    print('  void unblockContact(i32 reqSeq, string id)')
    print('  void unblockRecommendation(i32 reqSeq, string id)')
    print('  string unregisterUserAndDevice()')
    print('  void updateApnsDeviceToken(string apnsDeviceToken)')
    print('  void updateBuddySetting(string key, string value)')
    print('  void updateC2DMRegistrationId(string registrationId)')
    print('  void updateContactSetting(i32 reqSeq, string mid, ContactSetting flag, string value)')
    print('  void updateCustomModeSettings(CustomMode customMode,  paramMap)')
    print('  void updateDeviceInfo(string deviceUid, DeviceInfo deviceInfo)')
    print('  void updateGroup(i32 reqSeq, Group group)')
    print('  void updateNotificationToken(NotificationType type, string token)')
    print('  void updateNotificationTokenWithBytes(NotificationType type, string token)')
    print('  void updateProfile(i32 reqSeq, Profile profile)')
    print('  void updateProfileAttribute(i32 reqSeq, ProfileAttribute attr, string value)')
    print('  void updateProfileAttributes(i32 reqSeq, UpdateProfileAttributesRequest request)')
    print('  void updateRegion(string region)')
    print('  void updateSettings(i32 reqSeq, Settings settings)')
    print('  i32 updateSettings2(i32 reqSeq, Settings settings)')
    print('  void updateSettingsAttribute(i32 reqSeq, SettingsAttribute attr, string value)')
    print('  i32 updateSettingsAttributes(i32 reqSeq, i32 attrBitset, Settings settings)')
    print('  void verifyIdentityCredential(IdentityProvider identityProvider, string identifier, string password)')
    print('  UserAuthStatus verifyIdentityCredentialWithResult(IdentityCredential identityCredential)')
    print('  VerificationResult verifyPhone(string sessionId, string pinCode, string udidHash)')
    print('  string verifyQrcode(string verifier, string pinCode)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = TalkService.Client(protocol)
transport.open()

if cmd == 'searchCollection':
    if len(args) != 2:
        print('searchCollection requires 2 args')
        sys.exit(1)
    pp.pprint(client.searchCollection(args[0], eval(args[1]),))

elif cmd == 'getChatRoomAnnouncementsBulk':
    if len(args) != 1:
        print('getChatRoomAnnouncementsBulk requires 1 args')
        sys.exit(1)
    pp.pprint(client.getChatRoomAnnouncementsBulk(eval(args[0]),))

elif cmd == 'getChatRoomAnnouncements':
    if len(args) != 1:
        print('getChatRoomAnnouncements requires 1 args')
        sys.exit(1)
    pp.pprint(client.getChatRoomAnnouncements(args[0],))

elif cmd == 'createChatRoomAnnouncement':
    if len(args) != 4:
        print('createChatRoomAnnouncement requires 4 args')
        sys.exit(1)
    pp.pprint(client.createChatRoomAnnouncement(eval(args[0]), args[1], eval(args[2]), eval(args[3]),))

elif cmd == 'removeChatRoomAnnouncement':
    if len(args) != 3:
        print('removeChatRoomAnnouncement requires 3 args')
        sys.exit(1)
    pp.pprint(client.removeChatRoomAnnouncement(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'unsendMessage':
    if len(args) != 2:
        print('unsendMessage requires 2 args')
        sys.exit(1)
    pp.pprint(client.unsendMessage(eval(args[0]), args[1],))

elif cmd == 'getGroupWithoutMembers':
    if len(args) != 1:
        print('getGroupWithoutMembers requires 1 args')
        sys.exit(1)
    pp.pprint(client.getGroupWithoutMembers(args[0],))

elif cmd == 'requestResendMessage':
    if len(args) != 3:
        print('requestResendMessage requires 3 args')
        sys.exit(1)
    pp.pprint(client.requestResendMessage(eval(args[0]), args[1], args[2],))

elif cmd == 'respondResendMessage':
    if len(args) != 5:
        print('respondResendMessage requires 5 args')
        sys.exit(1)
    pp.pprint(client.respondResendMessage(eval(args[0]), args[1], args[2], eval(args[3]), eval(args[4]),))

elif cmd == 'acceptGroupInvitation':
    if len(args) != 2:
        print('acceptGroupInvitation requires 2 args')
        sys.exit(1)
    pp.pprint(client.acceptGroupInvitation(eval(args[0]), args[1],))

elif cmd == 'acceptGroupInvitationByTicket':
    if len(args) != 3:
        print('acceptGroupInvitationByTicket requires 3 args')
        sys.exit(1)
    pp.pprint(client.acceptGroupInvitationByTicket(eval(args[0]), args[1], args[2],))

elif cmd == 'acceptProximityMatches':
    if len(args) != 2:
        print('acceptProximityMatches requires 2 args')
        sys.exit(1)
    pp.pprint(client.acceptProximityMatches(args[0], eval(args[1]),))

elif cmd == 'acquireCallRoute':
    if len(args) != 1:
        print('acquireCallRoute requires 1 args')
        sys.exit(1)
    pp.pprint(client.acquireCallRoute(args[0],))

elif cmd == 'acquireCallTicket':
    if len(args) != 1:
        print('acquireCallTicket requires 1 args')
        sys.exit(1)
    pp.pprint(client.acquireCallTicket(args[0],))

elif cmd == 'acquireEncryptedAccessToken':
    if len(args) != 1:
        print('acquireEncryptedAccessToken requires 1 args')
        sys.exit(1)
    pp.pprint(client.acquireEncryptedAccessToken(eval(args[0]),))

elif cmd == 'addSnsId':
    if len(args) != 2:
        print('addSnsId requires 2 args')
        sys.exit(1)
    pp.pprint(client.addSnsId(eval(args[0]), args[1],))

elif cmd == 'blockContact':
    if len(args) != 2:
        print('blockContact requires 2 args')
        sys.exit(1)
    pp.pprint(client.blockContact(eval(args[0]), args[1],))

elif cmd == 'blockRecommendation':
    if len(args) != 2:
        print('blockRecommendation requires 2 args')
        sys.exit(1)
    pp.pprint(client.blockRecommendation(eval(args[0]), args[1],))

elif cmd == 'cancelGroupInvitation':
    if len(args) != 3:
        print('cancelGroupInvitation requires 3 args')
        sys.exit(1)
    pp.pprint(client.cancelGroupInvitation(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'changeVerificationMethod':
    if len(args) != 2:
        print('changeVerificationMethod requires 2 args')
        sys.exit(1)
    pp.pprint(client.changeVerificationMethod(args[0], eval(args[1]),))

elif cmd == 'clearIdentityCredential':
    if len(args) != 0:
        print('clearIdentityCredential requires 0 args')
        sys.exit(1)
    pp.pprint(client.clearIdentityCredential())

elif cmd == 'clearMessageBox':
    if len(args) != 2:
        print('clearMessageBox requires 2 args')
        sys.exit(1)
    pp.pprint(client.clearMessageBox(args[0], args[1],))

elif cmd == 'closeProximityMatch':
    if len(args) != 1:
        print('closeProximityMatch requires 1 args')
        sys.exit(1)
    pp.pprint(client.closeProximityMatch(args[0],))

elif cmd == 'commitSendMessage':
    if len(args) != 3:
        print('commitSendMessage requires 3 args')
        sys.exit(1)
    pp.pprint(client.commitSendMessage(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'commitSendMessages':
    if len(args) != 3:
        print('commitSendMessages requires 3 args')
        sys.exit(1)
    pp.pprint(client.commitSendMessages(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'commitUpdateProfile':
    if len(args) != 3:
        print('commitUpdateProfile requires 3 args')
        sys.exit(1)
    pp.pprint(client.commitUpdateProfile(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'confirmEmail':
    if len(args) != 2:
        print('confirmEmail requires 2 args')
        sys.exit(1)
    pp.pprint(client.confirmEmail(args[0], args[1],))

elif cmd == 'createGroup':
    if len(args) != 3:
        print('createGroup requires 3 args')
        sys.exit(1)
    pp.pprint(client.createGroup(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'createQrcodeBase64Image':
    if len(args) != 7:
        print('createQrcodeBase64Image requires 7 args')
        sys.exit(1)
    pp.pprint(client.createQrcodeBase64Image(args[0], args[1], eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]),))

elif cmd == 'createRoom':
    if len(args) != 2:
        print('createRoom requires 2 args')
        sys.exit(1)
    pp.pprint(client.createRoom(eval(args[0]), eval(args[1]),))

elif cmd == 'createSession':
    if len(args) != 0:
        print('createSession requires 0 args')
        sys.exit(1)
    pp.pprint(client.createSession())

elif cmd == 'fetchAnnouncements':
    if len(args) != 1:
        print('fetchAnnouncements requires 1 args')
        sys.exit(1)
    pp.pprint(client.fetchAnnouncements(eval(args[0]),))

elif cmd == 'fetchMessages':
    if len(args) != 2:
        print('fetchMessages requires 2 args')
        sys.exit(1)
    pp.pprint(client.fetchMessages(eval(args[0]), eval(args[1]),))

elif cmd == 'fetchOperations':
    if len(args) != 2:
        print('fetchOperations requires 2 args')
        sys.exit(1)
    pp.pprint(client.fetchOperations(eval(args[0]), eval(args[1]),))

elif cmd == 'fetchOps':
    if len(args) != 4:
        print('fetchOps requires 4 args')
        sys.exit(1)
    pp.pprint(client.fetchOps(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'findAndAddContactsByEmail':
    if len(args) != 2:
        print('findAndAddContactsByEmail requires 2 args')
        sys.exit(1)
    pp.pprint(client.findAndAddContactsByEmail(eval(args[0]), eval(args[1]),))

elif cmd == 'findAndAddContactsByMid':
    if len(args) != 4:
        print('findAndAddContactsByMid requires 4 args')
        sys.exit(1)
    pp.pprint(client.findAndAddContactsByMid(eval(args[0]), args[1], eval(args[2]), args[3],))

elif cmd == 'findGroupByTicketV2':
    if len(args) != 1:
        print('findGroupByTicketV2 requires 1 args')
        sys.exit(1)
    pp.pprint(client.findGroupByTicketV2(args[0],))

elif cmd == 'findAndAddContactsByPhone':
    if len(args) != 2:
        print('findAndAddContactsByPhone requires 2 args')
        sys.exit(1)
    pp.pprint(client.findAndAddContactsByPhone(eval(args[0]), eval(args[1]),))

elif cmd == 'getFriendRequests':
    if len(args) != 2:
        print('getFriendRequests requires 2 args')
        sys.exit(1)
    pp.pprint(client.getFriendRequests(eval(args[0]), eval(args[1]),))

elif cmd == 'removeFriendRequest':
    if len(args) != 2:
        print('removeFriendRequest requires 2 args')
        sys.exit(1)
    pp.pprint(client.removeFriendRequest(eval(args[0]), args[1],))

elif cmd == 'findAndAddContactsByUserid':
    if len(args) != 2:
        print('findAndAddContactsByUserid requires 2 args')
        sys.exit(1)
    pp.pprint(client.findAndAddContactsByUserid(eval(args[0]), args[1],))

elif cmd == 'findContactByUserid':
    if len(args) != 1:
        print('findContactByUserid requires 1 args')
        sys.exit(1)
    pp.pprint(client.findContactByUserid(args[0],))

elif cmd == 'findContactByUserTicket':
    if len(args) != 1:
        print('findContactByUserTicket requires 1 args')
        sys.exit(1)
    pp.pprint(client.findContactByUserTicket(args[0],))

elif cmd == 'findContactsByEmail':
    if len(args) != 1:
        print('findContactsByEmail requires 1 args')
        sys.exit(1)
    pp.pprint(client.findContactsByEmail(eval(args[0]),))

elif cmd == 'findContactsByPhone':
    if len(args) != 1:
        print('findContactsByPhone requires 1 args')
        sys.exit(1)
    pp.pprint(client.findContactsByPhone(eval(args[0]),))

elif cmd == 'findSnsIdUserStatus':
    if len(args) != 3:
        print('findSnsIdUserStatus requires 3 args')
        sys.exit(1)
    pp.pprint(client.findSnsIdUserStatus(eval(args[0]), args[1], args[2],))

elif cmd == 'finishUpdateVerification':
    if len(args) != 1:
        print('finishUpdateVerification requires 1 args')
        sys.exit(1)
    pp.pprint(client.finishUpdateVerification(args[0],))

elif cmd == 'generateUserTicket':
    if len(args) != 2:
        print('generateUserTicket requires 2 args')
        sys.exit(1)
    pp.pprint(client.generateUserTicket(eval(args[0]), eval(args[1]),))

elif cmd == 'destroyMessage':
    if len(args) != 4:
        print('destroyMessage requires 4 args')
        sys.exit(1)
    pp.pprint(client.destroyMessage(eval(args[0]), args[1], args[2], eval(args[3]),))

elif cmd == 'getAcceptedProximityMatches':
    if len(args) != 1:
        print('getAcceptedProximityMatches requires 1 args')
        sys.exit(1)
    pp.pprint(client.getAcceptedProximityMatches(args[0],))

elif cmd == 'getActiveBuddySubscriberIds':
    if len(args) != 0:
        print('getActiveBuddySubscriberIds requires 0 args')
        sys.exit(1)
    pp.pprint(client.getActiveBuddySubscriberIds())

elif cmd == 'getAllContactIds':
    if len(args) != 0:
        print('getAllContactIds requires 0 args')
        sys.exit(1)
    pp.pprint(client.getAllContactIds())

elif cmd == 'getAuthQrcode':
    if len(args) != 2:
        print('getAuthQrcode requires 2 args')
        sys.exit(1)
    pp.pprint(client.getAuthQrcode(eval(args[0]), args[1],))

elif cmd == 'getBlockedContactIds':
    if len(args) != 0:
        print('getBlockedContactIds requires 0 args')
        sys.exit(1)
    pp.pprint(client.getBlockedContactIds())

elif cmd == 'registerWithPhoneNumber':
    if len(args) != 2:
        print('registerWithPhoneNumber requires 2 args')
        sys.exit(1)
    pp.pprint(client.registerWithPhoneNumber(args[0], args[1],))

elif cmd == 'registerWithPhoneNumberAndPassword':
    if len(args) != 3:
        print('registerWithPhoneNumberAndPassword requires 3 args')
        sys.exit(1)
    pp.pprint(client.registerWithPhoneNumberAndPassword(args[0], args[1], args[2],))

elif cmd == 'getAnalyticsInfo':
    if len(args) != 0:
        print('getAnalyticsInfo requires 0 args')
        sys.exit(1)
    pp.pprint(client.getAnalyticsInfo())

elif cmd == 'reportClientStatistics':
    if len(args) != 3:
        print('reportClientStatistics requires 3 args')
        sys.exit(1)
    pp.pprint(client.reportClientStatistics(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'verifyPhoneNumberForLogin':
    if len(args) != 3:
        print('verifyPhoneNumberForLogin requires 3 args')
        sys.exit(1)
    pp.pprint(client.verifyPhoneNumberForLogin(args[0], args[1], args[2],))

elif cmd == 'verifyPhoneNumber':
    if len(args) != 5:
        print('verifyPhoneNumber requires 5 args')
        sys.exit(1)
    pp.pprint(client.verifyPhoneNumber(args[0], args[1], args[2], args[3], args[4],))

elif cmd == 'getBlockedContactIdsByRange':
    if len(args) != 2:
        print('getBlockedContactIdsByRange requires 2 args')
        sys.exit(1)
    pp.pprint(client.getBlockedContactIdsByRange(eval(args[0]), eval(args[1]),))

elif cmd == 'getBlockedRecommendationIds':
    if len(args) != 0:
        print('getBlockedRecommendationIds requires 0 args')
        sys.exit(1)
    pp.pprint(client.getBlockedRecommendationIds())

elif cmd == 'getBuddyBlockerIds':
    if len(args) != 0:
        print('getBuddyBlockerIds requires 0 args')
        sys.exit(1)
    pp.pprint(client.getBuddyBlockerIds())

elif cmd == 'getBuddyLocation':
    if len(args) != 2:
        print('getBuddyLocation requires 2 args')
        sys.exit(1)
    pp.pprint(client.getBuddyLocation(args[0], eval(args[1]),))

elif cmd == 'getCompactContactsModifiedSince':
    if len(args) != 1:
        print('getCompactContactsModifiedSince requires 1 args')
        sys.exit(1)
    pp.pprint(client.getCompactContactsModifiedSince(eval(args[0]),))

elif cmd == 'getCompactGroup':
    if len(args) != 1:
        print('getCompactGroup requires 1 args')
        sys.exit(1)
    pp.pprint(client.getCompactGroup(args[0],))

elif cmd == 'getCompactRoom':
    if len(args) != 1:
        print('getCompactRoom requires 1 args')
        sys.exit(1)
    pp.pprint(client.getCompactRoom(args[0],))

elif cmd == 'getContact':
    if len(args) != 1:
        print('getContact requires 1 args')
        sys.exit(1)
    pp.pprint(client.getContact(args[0],))

elif cmd == 'getContacts':
    if len(args) != 1:
        print('getContacts requires 1 args')
        sys.exit(1)
    pp.pprint(client.getContacts(eval(args[0]),))

elif cmd == 'getContactWithFriendRequestStatus':
    if len(args) != 1:
        print('getContactWithFriendRequestStatus requires 1 args')
        sys.exit(1)
    pp.pprint(client.getContactWithFriendRequestStatus(args[0],))

elif cmd == 'getCountryWithRequestIp':
    if len(args) != 0:
        print('getCountryWithRequestIp requires 0 args')
        sys.exit(1)
    pp.pprint(client.getCountryWithRequestIp())

elif cmd == 'getFavoriteMids':
    if len(args) != 0:
        print('getFavoriteMids requires 0 args')
        sys.exit(1)
    pp.pprint(client.getFavoriteMids())

elif cmd == 'getGroup':
    if len(args) != 1:
        print('getGroup requires 1 args')
        sys.exit(1)
    pp.pprint(client.getGroup(args[0],))

elif cmd == 'getGroupIdsInvited':
    if len(args) != 0:
        print('getGroupIdsInvited requires 0 args')
        sys.exit(1)
    pp.pprint(client.getGroupIdsInvited())

elif cmd == 'getGroupIdsJoined':
    if len(args) != 0:
        print('getGroupIdsJoined requires 0 args')
        sys.exit(1)
    pp.pprint(client.getGroupIdsJoined())

elif cmd == 'getGroups':
    if len(args) != 1:
        print('getGroups requires 1 args')
        sys.exit(1)
    pp.pprint(client.getGroups(eval(args[0]),))

elif cmd == 'getHiddenContactMids':
    if len(args) != 0:
        print('getHiddenContactMids requires 0 args')
        sys.exit(1)
    pp.pprint(client.getHiddenContactMids())

elif cmd == 'getIdentityIdentifier':
    if len(args) != 0:
        print('getIdentityIdentifier requires 0 args')
        sys.exit(1)
    pp.pprint(client.getIdentityIdentifier())

elif cmd == 'getLastAnnouncementIndex':
    if len(args) != 0:
        print('getLastAnnouncementIndex requires 0 args')
        sys.exit(1)
    pp.pprint(client.getLastAnnouncementIndex())

elif cmd == 'getLastOpRevision':
    if len(args) != 0:
        print('getLastOpRevision requires 0 args')
        sys.exit(1)
    pp.pprint(client.getLastOpRevision())

elif cmd == 'getSuggestRevisions':
    if len(args) != 0:
        print('getSuggestRevisions requires 0 args')
        sys.exit(1)
    pp.pprint(client.getSuggestRevisions())

elif cmd == 'getPreviousMessagesV2WithReadCount':
    if len(args) != 3:
        print('getPreviousMessagesV2WithReadCount requires 3 args')
        sys.exit(1)
    pp.pprint(client.getPreviousMessagesV2WithReadCount(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'getMessageBox':
    if len(args) != 3:
        print('getMessageBox requires 3 args')
        sys.exit(1)
    pp.pprint(client.getMessageBox(args[0], args[1], eval(args[2]),))

elif cmd == 'getMessageBoxCompactWrapUp':
    if len(args) != 1:
        print('getMessageBoxCompactWrapUp requires 1 args')
        sys.exit(1)
    pp.pprint(client.getMessageBoxCompactWrapUp(args[0],))

elif cmd == 'getMessageBoxCompactWrapUpList':
    if len(args) != 2:
        print('getMessageBoxCompactWrapUpList requires 2 args')
        sys.exit(1)
    pp.pprint(client.getMessageBoxCompactWrapUpList(eval(args[0]), eval(args[1]),))

elif cmd == 'getMessageBoxList':
    if len(args) != 2:
        print('getMessageBoxList requires 2 args')
        sys.exit(1)
    pp.pprint(client.getMessageBoxList(args[0], eval(args[1]),))

elif cmd == 'getMessageBoxListByStatus':
    if len(args) != 3:
        print('getMessageBoxListByStatus requires 3 args')
        sys.exit(1)
    pp.pprint(client.getMessageBoxListByStatus(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'getMessageBoxWrapUp':
    if len(args) != 1:
        print('getMessageBoxWrapUp requires 1 args')
        sys.exit(1)
    pp.pprint(client.getMessageBoxWrapUp(args[0],))

elif cmd == 'getMessageBoxWrapUpList':
    if len(args) != 2:
        print('getMessageBoxWrapUpList requires 2 args')
        sys.exit(1)
    pp.pprint(client.getMessageBoxWrapUpList(eval(args[0]), eval(args[1]),))

elif cmd == 'getMessagesBySequenceNumber':
    if len(args) != 4:
        print('getMessagesBySequenceNumber requires 4 args')
        sys.exit(1)
    pp.pprint(client.getMessagesBySequenceNumber(args[0], args[1], eval(args[2]), eval(args[3]),))

elif cmd == 'getNextMessages':
    if len(args) != 3:
        print('getNextMessages requires 3 args')
        sys.exit(1)
    pp.pprint(client.getNextMessages(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'getNotificationPolicy':
    if len(args) != 1:
        print('getNotificationPolicy requires 1 args')
        sys.exit(1)
    pp.pprint(client.getNotificationPolicy(eval(args[0]),))

elif cmd == 'getPreviousMessages':
    if len(args) != 3:
        print('getPreviousMessages requires 3 args')
        sys.exit(1)
    pp.pprint(client.getPreviousMessages(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'getProfile':
    if len(args) != 0:
        print('getProfile requires 0 args')
        sys.exit(1)
    pp.pprint(client.getProfile())

elif cmd == 'getProximityMatchCandidateList':
    if len(args) != 1:
        print('getProximityMatchCandidateList requires 1 args')
        sys.exit(1)
    pp.pprint(client.getProximityMatchCandidateList(args[0],))

elif cmd == 'getProximityMatchCandidates':
    if len(args) != 1:
        print('getProximityMatchCandidates requires 1 args')
        sys.exit(1)
    pp.pprint(client.getProximityMatchCandidates(args[0],))

elif cmd == 'getRecentMessages':
    if len(args) != 2:
        print('getRecentMessages requires 2 args')
        sys.exit(1)
    pp.pprint(client.getRecentMessages(args[0], eval(args[1]),))

elif cmd == 'getRecommendationIds':
    if len(args) != 0:
        print('getRecommendationIds requires 0 args')
        sys.exit(1)
    pp.pprint(client.getRecommendationIds())

elif cmd == 'getRoom':
    if len(args) != 1:
        print('getRoom requires 1 args')
        sys.exit(1)
    pp.pprint(client.getRoom(args[0],))

elif cmd == 'getRSAKeyInfo':
    if len(args) != 1:
        print('getRSAKeyInfo requires 1 args')
        sys.exit(1)
    pp.pprint(client.getRSAKeyInfo(eval(args[0]),))

elif cmd == 'getServerTime':
    if len(args) != 0:
        print('getServerTime requires 0 args')
        sys.exit(1)
    pp.pprint(client.getServerTime())

elif cmd == 'getSessions':
    if len(args) != 0:
        print('getSessions requires 0 args')
        sys.exit(1)
    pp.pprint(client.getSessions())

elif cmd == 'getSettings':
    if len(args) != 0:
        print('getSettings requires 0 args')
        sys.exit(1)
    pp.pprint(client.getSettings())

elif cmd == 'getGroupsV2':
    if len(args) != 1:
        print('getGroupsV2 requires 1 args')
        sys.exit(1)
    pp.pprint(client.getGroupsV2(eval(args[0]),))

elif cmd == 'getSettingsAttributes':
    if len(args) != 1:
        print('getSettingsAttributes requires 1 args')
        sys.exit(1)
    pp.pprint(client.getSettingsAttributes(eval(args[0]),))

elif cmd == 'getSystemConfiguration':
    if len(args) != 0:
        print('getSystemConfiguration requires 0 args')
        sys.exit(1)
    pp.pprint(client.getSystemConfiguration())

elif cmd == 'getUserTicket':
    if len(args) != 0:
        print('getUserTicket requires 0 args')
        sys.exit(1)
    pp.pprint(client.getUserTicket())

elif cmd == 'getWapInvitation':
    if len(args) != 1:
        print('getWapInvitation requires 1 args')
        sys.exit(1)
    pp.pprint(client.getWapInvitation(args[0],))

elif cmd == 'invalidateUserTicket':
    if len(args) != 0:
        print('invalidateUserTicket requires 0 args')
        sys.exit(1)
    pp.pprint(client.invalidateUserTicket())

elif cmd == 'inviteFriendsBySms':
    if len(args) != 1:
        print('inviteFriendsBySms requires 1 args')
        sys.exit(1)
    pp.pprint(client.inviteFriendsBySms(eval(args[0]),))

elif cmd == 'inviteIntoGroup':
    if len(args) != 3:
        print('inviteIntoGroup requires 3 args')
        sys.exit(1)
    pp.pprint(client.inviteIntoGroup(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'inviteIntoRoom':
    if len(args) != 3:
        print('inviteIntoRoom requires 3 args')
        sys.exit(1)
    pp.pprint(client.inviteIntoRoom(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'inviteViaEmail':
    if len(args) != 3:
        print('inviteViaEmail requires 3 args')
        sys.exit(1)
    pp.pprint(client.inviteViaEmail(eval(args[0]), args[1], args[2],))

elif cmd == 'isIdentityIdentifierAvailable':
    if len(args) != 2:
        print('isIdentityIdentifierAvailable requires 2 args')
        sys.exit(1)
    pp.pprint(client.isIdentityIdentifierAvailable(eval(args[0]), args[1],))

elif cmd == 'isUseridAvailable':
    if len(args) != 1:
        print('isUseridAvailable requires 1 args')
        sys.exit(1)
    pp.pprint(client.isUseridAvailable(args[0],))

elif cmd == 'kickoutFromGroup':
    if len(args) != 3:
        print('kickoutFromGroup requires 3 args')
        sys.exit(1)
    pp.pprint(client.kickoutFromGroup(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'reissueGroupTicket':
    if len(args) != 1:
        print('reissueGroupTicket requires 1 args')
        sys.exit(1)
    pp.pprint(client.reissueGroupTicket(args[0],))

elif cmd == 'findGroupByTicket':
    if len(args) != 1:
        print('findGroupByTicket requires 1 args')
        sys.exit(1)
    pp.pprint(client.findGroupByTicket(args[0],))

elif cmd == 'leaveGroup':
    if len(args) != 2:
        print('leaveGroup requires 2 args')
        sys.exit(1)
    pp.pprint(client.leaveGroup(eval(args[0]), args[1],))

elif cmd == 'leaveRoom':
    if len(args) != 2:
        print('leaveRoom requires 2 args')
        sys.exit(1)
    pp.pprint(client.leaveRoom(eval(args[0]), args[1],))

elif cmd == 'loginWithIdentityCredential':
    if len(args) != 7:
        print('loginWithIdentityCredential requires 7 args')
        sys.exit(1)
    pp.pprint(client.loginWithIdentityCredential(eval(args[0]), args[1], args[2], eval(args[3]), args[4], args[5], args[6],))

elif cmd == 'loginWithIdentityCredentialForCertificate':
    if len(args) != 7:
        print('loginWithIdentityCredentialForCertificate requires 7 args')
        sys.exit(1)
    pp.pprint(client.loginWithIdentityCredentialForCertificate(eval(args[0]), args[1], args[2], eval(args[3]), args[4], args[5], args[6],))

elif cmd == 'loginWithVerifier':
    if len(args) != 1:
        print('loginWithVerifier requires 1 args')
        sys.exit(1)
    pp.pprint(client.loginWithVerifier(args[0],))

elif cmd == 'loginWithVerifierForCerificate':
    if len(args) != 1:
        print('loginWithVerifierForCerificate requires 1 args')
        sys.exit(1)
    pp.pprint(client.loginWithVerifierForCerificate(args[0],))

elif cmd == 'loginWithVerifierForCertificate':
    if len(args) != 1:
        print('loginWithVerifierForCertificate requires 1 args')
        sys.exit(1)
    pp.pprint(client.loginWithVerifierForCertificate(args[0],))

elif cmd == 'logout':
    if len(args) != 0:
        print('logout requires 0 args')
        sys.exit(1)
    pp.pprint(client.logout())

elif cmd == 'logoutSession':
    if len(args) != 1:
        print('logoutSession requires 1 args')
        sys.exit(1)
    pp.pprint(client.logoutSession(args[0],))

elif cmd == 'noop':
    if len(args) != 0:
        print('noop requires 0 args')
        sys.exit(1)
    pp.pprint(client.noop())

elif cmd == 'notifiedRedirect':
    if len(args) != 1:
        print('notifiedRedirect requires 1 args')
        sys.exit(1)
    pp.pprint(client.notifiedRedirect(eval(args[0]),))

elif cmd == 'notifyBuddyOnAir':
    if len(args) != 2:
        print('notifyBuddyOnAir requires 2 args')
        sys.exit(1)
    pp.pprint(client.notifyBuddyOnAir(eval(args[0]), eval(args[1]),))

elif cmd == 'notifyIndividualEvent':
    if len(args) != 2:
        print('notifyIndividualEvent requires 2 args')
        sys.exit(1)
    pp.pprint(client.notifyIndividualEvent(eval(args[0]), eval(args[1]),))

elif cmd == 'notifyInstalled':
    if len(args) != 2:
        print('notifyInstalled requires 2 args')
        sys.exit(1)
    pp.pprint(client.notifyInstalled(args[0], args[1],))

elif cmd == 'notifyRegistrationComplete':
    if len(args) != 2:
        print('notifyRegistrationComplete requires 2 args')
        sys.exit(1)
    pp.pprint(client.notifyRegistrationComplete(args[0], args[1],))

elif cmd == 'notifySleep':
    if len(args) != 2:
        print('notifySleep requires 2 args')
        sys.exit(1)
    pp.pprint(client.notifySleep(eval(args[0]), eval(args[1]),))

elif cmd == 'notifyUpdated':
    if len(args) != 2:
        print('notifyUpdated requires 2 args')
        sys.exit(1)
    pp.pprint(client.notifyUpdated(eval(args[0]), eval(args[1]),))

elif cmd == 'openProximityMatch':
    if len(args) != 1:
        print('openProximityMatch requires 1 args')
        sys.exit(1)
    pp.pprint(client.openProximityMatch(eval(args[0]),))

elif cmd == 'registerBuddyUser':
    if len(args) != 2:
        print('registerBuddyUser requires 2 args')
        sys.exit(1)
    pp.pprint(client.registerBuddyUser(args[0], args[1],))

elif cmd == 'registerBuddyUserid':
    if len(args) != 2:
        print('registerBuddyUserid requires 2 args')
        sys.exit(1)
    pp.pprint(client.registerBuddyUserid(eval(args[0]), args[1],))

elif cmd == 'registerDevice':
    if len(args) != 1:
        print('registerDevice requires 1 args')
        sys.exit(1)
    pp.pprint(client.registerDevice(args[0],))

elif cmd == 'registerDeviceWithIdentityCredential':
    if len(args) != 4:
        print('registerDeviceWithIdentityCredential requires 4 args')
        sys.exit(1)
    pp.pprint(client.registerDeviceWithIdentityCredential(args[0], eval(args[1]), args[2], args[3],))

elif cmd == 'registerDeviceWithoutPhoneNumber':
    if len(args) != 3:
        print('registerDeviceWithoutPhoneNumber requires 3 args')
        sys.exit(1)
    pp.pprint(client.registerDeviceWithoutPhoneNumber(args[0], args[1], eval(args[2]),))

elif cmd == 'registerDeviceWithoutPhoneNumberWithIdentityCredential':
    if len(args) != 8:
        print('registerDeviceWithoutPhoneNumberWithIdentityCredential requires 8 args')
        sys.exit(1)
    pp.pprint(client.registerDeviceWithoutPhoneNumberWithIdentityCredential(args[0], args[1], eval(args[2]), eval(args[3]), args[4], args[5], args[6], args[7],))

elif cmd == 'registerUserid':
    if len(args) != 2:
        print('registerUserid requires 2 args')
        sys.exit(1)
    pp.pprint(client.registerUserid(eval(args[0]), args[1],))

elif cmd == 'registerWapDevice':
    if len(args) != 4:
        print('registerWapDevice requires 4 args')
        sys.exit(1)
    pp.pprint(client.registerWapDevice(args[0], args[1], args[2], eval(args[3]),))

elif cmd == 'registerWithExistingSnsIdAndIdentityCredential':
    if len(args) != 4:
        print('registerWithExistingSnsIdAndIdentityCredential requires 4 args')
        sys.exit(1)
    pp.pprint(client.registerWithExistingSnsIdAndIdentityCredential(eval(args[0]), args[1], args[2], eval(args[3]),))

elif cmd == 'registerWithSnsId':
    if len(args) != 6:
        print('registerWithSnsId requires 6 args')
        sys.exit(1)
    pp.pprint(client.registerWithSnsId(eval(args[0]), args[1], args[2], args[3], eval(args[4]), args[5],))

elif cmd == 'registerWithSnsIdAndIdentityCredential':
    if len(args) != 6:
        print('registerWithSnsIdAndIdentityCredential requires 6 args')
        sys.exit(1)
    pp.pprint(client.registerWithSnsIdAndIdentityCredential(eval(args[0]), args[1], eval(args[2]), args[3], args[4], eval(args[5]),))

elif cmd == 'reissueDeviceCredential':
    if len(args) != 0:
        print('reissueDeviceCredential requires 0 args')
        sys.exit(1)
    pp.pprint(client.reissueDeviceCredential())

elif cmd == 'reissueUserTicket':
    if len(args) != 2:
        print('reissueUserTicket requires 2 args')
        sys.exit(1)
    pp.pprint(client.reissueUserTicket(eval(args[0]), eval(args[1]),))

elif cmd == 'getMessageReadRange':
    if len(args) != 1:
        print('getMessageReadRange requires 1 args')
        sys.exit(1)
    pp.pprint(client.getMessageReadRange(eval(args[0]),))

elif cmd == 'rejectGroupInvitation':
    if len(args) != 2:
        print('rejectGroupInvitation requires 2 args')
        sys.exit(1)
    pp.pprint(client.rejectGroupInvitation(eval(args[0]), args[1],))

elif cmd == 'releaseSession':
    if len(args) != 0:
        print('releaseSession requires 0 args')
        sys.exit(1)
    pp.pprint(client.releaseSession())

elif cmd == 'removeAllMessages':
    if len(args) != 2:
        print('removeAllMessages requires 2 args')
        sys.exit(1)
    pp.pprint(client.removeAllMessages(eval(args[0]), args[1],))

elif cmd == 'removeBuddyLocation':
    if len(args) != 2:
        print('removeBuddyLocation requires 2 args')
        sys.exit(1)
    pp.pprint(client.removeBuddyLocation(args[0], eval(args[1]),))

elif cmd == 'removeMessage':
    if len(args) != 1:
        print('removeMessage requires 1 args')
        sys.exit(1)
    pp.pprint(client.removeMessage(args[0],))

elif cmd == 'makeUserAddMyselfAsContact':
    if len(args) != 1:
        print('makeUserAddMyselfAsContact requires 1 args')
        sys.exit(1)
    pp.pprint(client.makeUserAddMyselfAsContact(args[0],))

elif cmd == 'removeMessageFromMyHome':
    if len(args) != 1:
        print('removeMessageFromMyHome requires 1 args')
        sys.exit(1)
    pp.pprint(client.removeMessageFromMyHome(args[0],))

elif cmd == 'removeSnsId':
    if len(args) != 1:
        print('removeSnsId requires 1 args')
        sys.exit(1)
    pp.pprint(client.removeSnsId(eval(args[0]),))

elif cmd == 'report':
    if len(args) != 3:
        print('report requires 3 args')
        sys.exit(1)
    pp.pprint(client.report(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'reportContacts':
    if len(args) != 4:
        print('reportContacts requires 4 args')
        sys.exit(1)
    pp.pprint(client.reportContacts(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'reportGroups':
    if len(args) != 2:
        print('reportGroups requires 2 args')
        sys.exit(1)
    pp.pprint(client.reportGroups(eval(args[0]), eval(args[1]),))

elif cmd == 'reportProfile':
    if len(args) != 2:
        print('reportProfile requires 2 args')
        sys.exit(1)
    pp.pprint(client.reportProfile(eval(args[0]), eval(args[1]),))

elif cmd == 'reportRooms':
    if len(args) != 2:
        print('reportRooms requires 2 args')
        sys.exit(1)
    pp.pprint(client.reportRooms(eval(args[0]), eval(args[1]),))

elif cmd == 'findAndAddContactByMetaTag':
    if len(args) != 3:
        print('findAndAddContactByMetaTag requires 3 args')
        sys.exit(1)
    pp.pprint(client.findAndAddContactByMetaTag(eval(args[0]), args[1], args[2],))

elif cmd == 'reportSettings':
    if len(args) != 2:
        print('reportSettings requires 2 args')
        sys.exit(1)
    pp.pprint(client.reportSettings(eval(args[0]), eval(args[1]),))

elif cmd == 'reportSpam':
    if len(args) != 6:
        print('reportSpam requires 6 args')
        sys.exit(1)
    pp.pprint(client.reportSpam(args[0], eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]),))

elif cmd == 'reportSpammer':
    if len(args) != 3:
        print('reportSpammer requires 3 args')
        sys.exit(1)
    pp.pprint(client.reportSpammer(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'requestAccountPasswordReset':
    if len(args) != 3:
        print('requestAccountPasswordReset requires 3 args')
        sys.exit(1)
    pp.pprint(client.requestAccountPasswordReset(eval(args[0]), args[1], args[2],))

elif cmd == 'requestEmailConfirmation':
    if len(args) != 1:
        print('requestEmailConfirmation requires 1 args')
        sys.exit(1)
    pp.pprint(client.requestEmailConfirmation(eval(args[0]),))

elif cmd == 'requestIdentityUnbind':
    if len(args) != 2:
        print('requestIdentityUnbind requires 2 args')
        sys.exit(1)
    pp.pprint(client.requestIdentityUnbind(eval(args[0]), args[1],))

elif cmd == 'resendEmailConfirmation':
    if len(args) != 1:
        print('resendEmailConfirmation requires 1 args')
        sys.exit(1)
    pp.pprint(client.resendEmailConfirmation(args[0],))

elif cmd == 'resendPinCode':
    if len(args) != 1:
        print('resendPinCode requires 1 args')
        sys.exit(1)
    pp.pprint(client.resendPinCode(args[0],))

elif cmd == 'resendPinCodeBySMS':
    if len(args) != 1:
        print('resendPinCodeBySMS requires 1 args')
        sys.exit(1)
    pp.pprint(client.resendPinCodeBySMS(args[0],))

elif cmd == 'sendChatChecked':
    if len(args) != 3:
        print('sendChatChecked requires 3 args')
        sys.exit(1)
    pp.pprint(client.sendChatChecked(eval(args[0]), args[1], args[2],))

elif cmd == 'sendMessageAwaitCommit':
    if len(args) != 2:
        print('sendMessageAwaitCommit requires 2 args')
        sys.exit(1)
    pp.pprint(client.sendMessageAwaitCommit(eval(args[0]), eval(args[1]),))

elif cmd == 'sendChatRemoved':
    if len(args) != 3:
        print('sendChatRemoved requires 3 args')
        sys.exit(1)
    pp.pprint(client.sendChatRemoved(eval(args[0]), args[1], args[2],))

elif cmd == 'sendContentPreviewUpdated':
    if len(args) != 3:
        print('sendContentPreviewUpdated requires 3 args')
        sys.exit(1)
    pp.pprint(client.sendContentPreviewUpdated(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'sendContentReceipt':
    if len(args) != 3:
        print('sendContentReceipt requires 3 args')
        sys.exit(1)
    pp.pprint(client.sendContentReceipt(eval(args[0]), args[1], args[2],))

elif cmd == 'sendDummyPush':
    if len(args) != 0:
        print('sendDummyPush requires 0 args')
        sys.exit(1)
    pp.pprint(client.sendDummyPush())

elif cmd == 'removeE2EEPublicKey':
    if len(args) != 1:
        print('removeE2EEPublicKey requires 1 args')
        sys.exit(1)
    pp.pprint(client.removeE2EEPublicKey(eval(args[0]),))

elif cmd == 'negotiateE2EEPublicKey':
    if len(args) != 1:
        print('negotiateE2EEPublicKey requires 1 args')
        sys.exit(1)
    pp.pprint(client.negotiateE2EEPublicKey(args[0],))

elif cmd == 'getE2EEPublicKey':
    if len(args) != 3:
        print('getE2EEPublicKey requires 3 args')
        sys.exit(1)
    pp.pprint(client.getE2EEPublicKey(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'requestE2EEKeyExchange':
    if len(args) != 4:
        print('requestE2EEKeyExchange requires 4 args')
        sys.exit(1)
    pp.pprint(client.requestE2EEKeyExchange(eval(args[0]), args[1], eval(args[2]), args[3],))

elif cmd == 'getLastE2EEPublicKeys':
    if len(args) != 1:
        print('getLastE2EEPublicKeys requires 1 args')
        sys.exit(1)
    pp.pprint(client.getLastE2EEPublicKeys(args[0],))

elif cmd == 'registerE2EEPublicKey':
    if len(args) != 2:
        print('registerE2EEPublicKey requires 2 args')
        sys.exit(1)
    pp.pprint(client.registerE2EEPublicKey(eval(args[0]), eval(args[1]),))

elif cmd == 'getE2EEPublicKeys':
    if len(args) != 0:
        print('getE2EEPublicKeys requires 0 args')
        sys.exit(1)
    pp.pprint(client.getE2EEPublicKeys())

elif cmd == 'getE2EEPublicKeysEx':
    if len(args) != 1:
        print('getE2EEPublicKeysEx requires 1 args')
        sys.exit(1)
    pp.pprint(client.getE2EEPublicKeysEx(eval(args[0]),))

elif cmd == 'getReadMessageOpsInBulk':
    if len(args) != 1:
        print('getReadMessageOpsInBulk requires 1 args')
        sys.exit(1)
    pp.pprint(client.getReadMessageOpsInBulk(eval(args[0]),))

elif cmd == 'sendEvent':
    if len(args) != 2:
        print('sendEvent requires 2 args')
        sys.exit(1)
    pp.pprint(client.sendEvent(eval(args[0]), eval(args[1]),))

elif cmd == 'sendMessage':
    if len(args) != 2:
        print('sendMessage requires 2 args')
        sys.exit(1)
    pp.pprint(client.sendMessage(eval(args[0]), eval(args[1]),))

elif cmd == 'sendMessageIgnored':
    if len(args) != 3:
        print('sendMessageIgnored requires 3 args')
        sys.exit(1)
    pp.pprint(client.sendMessageIgnored(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'sendMessageReceipt':
    if len(args) != 3:
        print('sendMessageReceipt requires 3 args')
        sys.exit(1)
    pp.pprint(client.sendMessageReceipt(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'findContactByMetaTag':
    if len(args) != 2:
        print('findContactByMetaTag requires 2 args')
        sys.exit(1)
    pp.pprint(client.findContactByMetaTag(args[0], args[1],))

elif cmd == 'sendMessageToMyHome':
    if len(args) != 2:
        print('sendMessageToMyHome requires 2 args')
        sys.exit(1)
    pp.pprint(client.sendMessageToMyHome(eval(args[0]), eval(args[1]),))

elif cmd == 'setBuddyLocation':
    if len(args) != 3:
        print('setBuddyLocation requires 3 args')
        sys.exit(1)
    pp.pprint(client.setBuddyLocation(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'setIdentityCredential':
    if len(args) != 3:
        print('setIdentityCredential requires 3 args')
        sys.exit(1)
    pp.pprint(client.setIdentityCredential(args[0], args[1], eval(args[2]),))

elif cmd == 'setNotificationsEnabled':
    if len(args) != 4:
        print('setNotificationsEnabled requires 4 args')
        sys.exit(1)
    pp.pprint(client.setNotificationsEnabled(eval(args[0]), eval(args[1]), args[2], eval(args[3]),))

elif cmd == 'startUpdateVerification':
    if len(args) != 7:
        print('startUpdateVerification requires 7 args')
        sys.exit(1)
    pp.pprint(client.startUpdateVerification(args[0], eval(args[1]), args[2], args[3], eval(args[4]), args[5], args[6],))

elif cmd == 'startVerification':
    if len(args) != 10:
        print('startVerification requires 10 args')
        sys.exit(1)
    pp.pprint(client.startVerification(args[0], eval(args[1]), args[2], args[3], eval(args[4]), args[5], args[6], args[7], eval(args[8]), args[9],))

elif cmd == 'updateGroupPreferenceAttribute':
    if len(args) != 3:
        print('updateGroupPreferenceAttribute requires 3 args')
        sys.exit(1)
    pp.pprint(client.updateGroupPreferenceAttribute(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'createRoomV2':
    if len(args) != 2:
        print('createRoomV2 requires 2 args')
        sys.exit(1)
    pp.pprint(client.createRoomV2(eval(args[0]), eval(args[1]),))

elif cmd == 'storeUpdateProfileAttribute':
    if len(args) != 3:
        print('storeUpdateProfileAttribute requires 3 args')
        sys.exit(1)
    pp.pprint(client.storeUpdateProfileAttribute(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'syncContactBySnsIds':
    if len(args) != 2:
        print('syncContactBySnsIds requires 2 args')
        sys.exit(1)
    pp.pprint(client.syncContactBySnsIds(eval(args[0]), eval(args[1]),))

elif cmd == 'syncContacts':
    if len(args) != 2:
        print('syncContacts requires 2 args')
        sys.exit(1)
    pp.pprint(client.syncContacts(eval(args[0]), eval(args[1]),))

elif cmd == 'trySendMessage':
    if len(args) != 2:
        print('trySendMessage requires 2 args')
        sys.exit(1)
    pp.pprint(client.trySendMessage(eval(args[0]), eval(args[1]),))

elif cmd == 'getNextMessagesV2':
    if len(args) != 3:
        print('getNextMessagesV2 requires 3 args')
        sys.exit(1)
    pp.pprint(client.getNextMessagesV2(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'getMessageBoxCompactWrapUpV2':
    if len(args) != 1:
        print('getMessageBoxCompactWrapUpV2 requires 1 args')
        sys.exit(1)
    pp.pprint(client.getMessageBoxCompactWrapUpV2(args[0],))

elif cmd == 'getRecentMessagesV2':
    if len(args) != 2:
        print('getRecentMessagesV2 requires 2 args')
        sys.exit(1)
    pp.pprint(client.getRecentMessagesV2(args[0], eval(args[1]),))

elif cmd == 'validateContactsOnBot':
    if len(args) != 1:
        print('validateContactsOnBot requires 1 args')
        sys.exit(1)
    pp.pprint(client.validateContactsOnBot(eval(args[0]),))

elif cmd == 'tryFriendRequest':
    if len(args) != 3:
        print('tryFriendRequest requires 3 args')
        sys.exit(1)
    pp.pprint(client.tryFriendRequest(args[0], eval(args[1]), args[2],))

elif cmd == 'unblockContact':
    if len(args) != 2:
        print('unblockContact requires 2 args')
        sys.exit(1)
    pp.pprint(client.unblockContact(eval(args[0]), args[1],))

elif cmd == 'unblockRecommendation':
    if len(args) != 2:
        print('unblockRecommendation requires 2 args')
        sys.exit(1)
    pp.pprint(client.unblockRecommendation(eval(args[0]), args[1],))

elif cmd == 'unregisterUserAndDevice':
    if len(args) != 0:
        print('unregisterUserAndDevice requires 0 args')
        sys.exit(1)
    pp.pprint(client.unregisterUserAndDevice())

elif cmd == 'updateApnsDeviceToken':
    if len(args) != 1:
        print('updateApnsDeviceToken requires 1 args')
        sys.exit(1)
    pp.pprint(client.updateApnsDeviceToken(args[0],))

elif cmd == 'updateBuddySetting':
    if len(args) != 2:
        print('updateBuddySetting requires 2 args')
        sys.exit(1)
    pp.pprint(client.updateBuddySetting(args[0], args[1],))

elif cmd == 'updateC2DMRegistrationId':
    if len(args) != 1:
        print('updateC2DMRegistrationId requires 1 args')
        sys.exit(1)
    pp.pprint(client.updateC2DMRegistrationId(args[0],))

elif cmd == 'updateContactSetting':
    if len(args) != 4:
        print('updateContactSetting requires 4 args')
        sys.exit(1)
    pp.pprint(client.updateContactSetting(eval(args[0]), args[1], eval(args[2]), args[3],))

elif cmd == 'updateCustomModeSettings':
    if len(args) != 2:
        print('updateCustomModeSettings requires 2 args')
        sys.exit(1)
    pp.pprint(client.updateCustomModeSettings(eval(args[0]), eval(args[1]),))

elif cmd == 'updateDeviceInfo':
    if len(args) != 2:
        print('updateDeviceInfo requires 2 args')
        sys.exit(1)
    pp.pprint(client.updateDeviceInfo(args[0], eval(args[1]),))

elif cmd == 'updateGroup':
    if len(args) != 2:
        print('updateGroup requires 2 args')
        sys.exit(1)
    pp.pprint(client.updateGroup(eval(args[0]), eval(args[1]),))

elif cmd == 'updateNotificationToken':
    if len(args) != 2:
        print('updateNotificationToken requires 2 args')
        sys.exit(1)
    pp.pprint(client.updateNotificationToken(eval(args[0]), args[1],))

elif cmd == 'updateNotificationTokenWithBytes':
    if len(args) != 2:
        print('updateNotificationTokenWithBytes requires 2 args')
        sys.exit(1)
    pp.pprint(client.updateNotificationTokenWithBytes(eval(args[0]), args[1],))

elif cmd == 'updateProfile':
    if len(args) != 2:
        print('updateProfile requires 2 args')
        sys.exit(1)
    pp.pprint(client.updateProfile(eval(args[0]), eval(args[1]),))

elif cmd == 'updateProfileAttribute':
    if len(args) != 3:
        print('updateProfileAttribute requires 3 args')
        sys.exit(1)
    pp.pprint(client.updateProfileAttribute(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'updateProfileAttributes':
    if len(args) != 2:
        print('updateProfileAttributes requires 2 args')
        sys.exit(1)
    pp.pprint(client.updateProfileAttributes(eval(args[0]), eval(args[1]),))

elif cmd == 'updateRegion':
    if len(args) != 1:
        print('updateRegion requires 1 args')
        sys.exit(1)
    pp.pprint(client.updateRegion(args[0],))

elif cmd == 'updateSettings':
    if len(args) != 2:
        print('updateSettings requires 2 args')
        sys.exit(1)
    pp.pprint(client.updateSettings(eval(args[0]), eval(args[1]),))

elif cmd == 'updateSettings2':
    if len(args) != 2:
        print('updateSettings2 requires 2 args')
        sys.exit(1)
    pp.pprint(client.updateSettings2(eval(args[0]), eval(args[1]),))

elif cmd == 'updateSettingsAttribute':
    if len(args) != 3:
        print('updateSettingsAttribute requires 3 args')
        sys.exit(1)
    pp.pprint(client.updateSettingsAttribute(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'updateSettingsAttributes':
    if len(args) != 3:
        print('updateSettingsAttributes requires 3 args')
        sys.exit(1)
    pp.pprint(client.updateSettingsAttributes(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'verifyIdentityCredential':
    if len(args) != 3:
        print('verifyIdentityCredential requires 3 args')
        sys.exit(1)
    pp.pprint(client.verifyIdentityCredential(eval(args[0]), args[1], args[2],))

elif cmd == 'verifyIdentityCredentialWithResult':
    if len(args) != 1:
        print('verifyIdentityCredentialWithResult requires 1 args')
        sys.exit(1)
    pp.pprint(client.verifyIdentityCredentialWithResult(eval(args[0]),))

elif cmd == 'verifyPhone':
    if len(args) != 3:
        print('verifyPhone requires 3 args')
        sys.exit(1)
    pp.pprint(client.verifyPhone(args[0], args[1], args[2],))

elif cmd == 'verifyQrcode':
    if len(args) != 2:
        print('verifyQrcode requires 2 args')
        sys.exit(1)
    pp.pprint(client.verifyQrcode(args[0], args[1],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
