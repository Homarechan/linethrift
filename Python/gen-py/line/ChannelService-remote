#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from line import ChannelService
from line.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  OTPResult issueOTP(string channelId)')
    print('  ChannelToken approveChannelAndIssueChannelToken(string channelId)')
    print('  string approveChannelAndIssueRequestToken(string channelId, string otpId)')
    print('  NotificationFetchResult fetchNotificationItems(i64 localRev)')
    print('  ApprovedChannelInfos getApprovedChannels(i64 lastSynced, string locale)')
    print('  ChannelInfo getChannelInfo(string channelId, string locale)')
    print('  ChannelNotificationSetting getChannelNotificationSetting(string channelId, string locale)')
    print('   getChannelNotificationSettings(string locale)')
    print('  ChannelInfos getChannels(i64 lastSynced, string locale)')
    print('  ChannelDomains getDomains(i64 lastSynced)')
    print('  FriendChannelMatricesResponse getFriendChannelMatrices( channelIds)')
    print('  bool updateChannelSettings(ChannelSettings channelSettings)')
    print('  ChannelDomains getCommonDomains(i64 lastSynced)')
    print('  i32 getNotificationBadgeCount(i64 localRev)')
    print('  ChannelToken issueChannelToken(string channelId)')
    print('  string issueRequestToken(string channelId, string otpId)')
    print('  RequestTokenResponse issueRequestTokenWithAuthScheme(string channelId, string otpId,  authScheme, string returnUrl)')
    print('  string issueRequestTokenForAutoLogin(string channelId, string otpId, string redirectUrl)')
    print('   getUpdatedChannelIds( channelIds)')
    print('  string reserveCoinUse(CoinUseReservation request, string locale)')
    print('  void revokeChannel(string channelId)')
    print('  ChannelSyncDatas syncChannelData(i64 lastSynced, string locale)')
    print('  void updateChannelNotificationSetting( setting)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ChannelService.Client(protocol)
transport.open()

if cmd == 'issueOTP':
    if len(args) != 1:
        print('issueOTP requires 1 args')
        sys.exit(1)
    pp.pprint(client.issueOTP(args[0],))

elif cmd == 'approveChannelAndIssueChannelToken':
    if len(args) != 1:
        print('approveChannelAndIssueChannelToken requires 1 args')
        sys.exit(1)
    pp.pprint(client.approveChannelAndIssueChannelToken(args[0],))

elif cmd == 'approveChannelAndIssueRequestToken':
    if len(args) != 2:
        print('approveChannelAndIssueRequestToken requires 2 args')
        sys.exit(1)
    pp.pprint(client.approveChannelAndIssueRequestToken(args[0], args[1],))

elif cmd == 'fetchNotificationItems':
    if len(args) != 1:
        print('fetchNotificationItems requires 1 args')
        sys.exit(1)
    pp.pprint(client.fetchNotificationItems(eval(args[0]),))

elif cmd == 'getApprovedChannels':
    if len(args) != 2:
        print('getApprovedChannels requires 2 args')
        sys.exit(1)
    pp.pprint(client.getApprovedChannels(eval(args[0]), args[1],))

elif cmd == 'getChannelInfo':
    if len(args) != 2:
        print('getChannelInfo requires 2 args')
        sys.exit(1)
    pp.pprint(client.getChannelInfo(args[0], args[1],))

elif cmd == 'getChannelNotificationSetting':
    if len(args) != 2:
        print('getChannelNotificationSetting requires 2 args')
        sys.exit(1)
    pp.pprint(client.getChannelNotificationSetting(args[0], args[1],))

elif cmd == 'getChannelNotificationSettings':
    if len(args) != 1:
        print('getChannelNotificationSettings requires 1 args')
        sys.exit(1)
    pp.pprint(client.getChannelNotificationSettings(args[0],))

elif cmd == 'getChannels':
    if len(args) != 2:
        print('getChannels requires 2 args')
        sys.exit(1)
    pp.pprint(client.getChannels(eval(args[0]), args[1],))

elif cmd == 'getDomains':
    if len(args) != 1:
        print('getDomains requires 1 args')
        sys.exit(1)
    pp.pprint(client.getDomains(eval(args[0]),))

elif cmd == 'getFriendChannelMatrices':
    if len(args) != 1:
        print('getFriendChannelMatrices requires 1 args')
        sys.exit(1)
    pp.pprint(client.getFriendChannelMatrices(eval(args[0]),))

elif cmd == 'updateChannelSettings':
    if len(args) != 1:
        print('updateChannelSettings requires 1 args')
        sys.exit(1)
    pp.pprint(client.updateChannelSettings(eval(args[0]),))

elif cmd == 'getCommonDomains':
    if len(args) != 1:
        print('getCommonDomains requires 1 args')
        sys.exit(1)
    pp.pprint(client.getCommonDomains(eval(args[0]),))

elif cmd == 'getNotificationBadgeCount':
    if len(args) != 1:
        print('getNotificationBadgeCount requires 1 args')
        sys.exit(1)
    pp.pprint(client.getNotificationBadgeCount(eval(args[0]),))

elif cmd == 'issueChannelToken':
    if len(args) != 1:
        print('issueChannelToken requires 1 args')
        sys.exit(1)
    pp.pprint(client.issueChannelToken(args[0],))

elif cmd == 'issueRequestToken':
    if len(args) != 2:
        print('issueRequestToken requires 2 args')
        sys.exit(1)
    pp.pprint(client.issueRequestToken(args[0], args[1],))

elif cmd == 'issueRequestTokenWithAuthScheme':
    if len(args) != 4:
        print('issueRequestTokenWithAuthScheme requires 4 args')
        sys.exit(1)
    pp.pprint(client.issueRequestTokenWithAuthScheme(args[0], args[1], eval(args[2]), args[3],))

elif cmd == 'issueRequestTokenForAutoLogin':
    if len(args) != 3:
        print('issueRequestTokenForAutoLogin requires 3 args')
        sys.exit(1)
    pp.pprint(client.issueRequestTokenForAutoLogin(args[0], args[1], args[2],))

elif cmd == 'getUpdatedChannelIds':
    if len(args) != 1:
        print('getUpdatedChannelIds requires 1 args')
        sys.exit(1)
    pp.pprint(client.getUpdatedChannelIds(eval(args[0]),))

elif cmd == 'reserveCoinUse':
    if len(args) != 2:
        print('reserveCoinUse requires 2 args')
        sys.exit(1)
    pp.pprint(client.reserveCoinUse(eval(args[0]), args[1],))

elif cmd == 'revokeChannel':
    if len(args) != 1:
        print('revokeChannel requires 1 args')
        sys.exit(1)
    pp.pprint(client.revokeChannel(args[0],))

elif cmd == 'syncChannelData':
    if len(args) != 2:
        print('syncChannelData requires 2 args')
        sys.exit(1)
    pp.pprint(client.syncChannelData(eval(args[0]), args[1],))

elif cmd == 'updateChannelNotificationSetting':
    if len(args) != 1:
        print('updateChannelNotificationSetting requires 1 args')
        sys.exit(1)
    pp.pprint(client.updateChannelNotificationSetting(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
