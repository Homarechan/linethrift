#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.14.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from line import AuthService
from line.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  string normalizePhoneNumber(string countryCode, string phoneNumber, string countryCodeHint)')
    print('  void respondE2EELoginRequest(string verifier, E2EEPublicKey publicKey, string encryptedKeyChain, string hashKeyChain, ErrorCode errorCode)')
    print('  string confirmE2EELogin(string verifier, string deviceSecret)')
    print('  void logoutZ()')
    print('  LoginResult loginZ(LoginRequest loginRequest)')
    print('  SecurityCenterResult issueTokenForAccountMigrationSettings(bool enforce)')
    print('  SecurityCenterResult issueTokenForAccountMigration(string migrationSessionId)')
    print('  string verifyQrcodeWithE2EE(string verifier, string pinCode, ErrorCode errorCode, E2EEPublicKey publicKey, string encryptedKeyChain, string hashKeyChain)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = AuthService.Client(protocol)
transport.open()

if cmd == 'normalizePhoneNumber':
    if len(args) != 3:
        print('normalizePhoneNumber requires 3 args')
        sys.exit(1)
    pp.pprint(client.normalizePhoneNumber(args[0], args[1], args[2],))

elif cmd == 'respondE2EELoginRequest':
    if len(args) != 5:
        print('respondE2EELoginRequest requires 5 args')
        sys.exit(1)
    pp.pprint(client.respondE2EELoginRequest(args[0], eval(args[1]), args[2], args[3], eval(args[4]),))

elif cmd == 'confirmE2EELogin':
    if len(args) != 2:
        print('confirmE2EELogin requires 2 args')
        sys.exit(1)
    pp.pprint(client.confirmE2EELogin(args[0], args[1],))

elif cmd == 'logoutZ':
    if len(args) != 0:
        print('logoutZ requires 0 args')
        sys.exit(1)
    pp.pprint(client.logoutZ())

elif cmd == 'loginZ':
    if len(args) != 1:
        print('loginZ requires 1 args')
        sys.exit(1)
    pp.pprint(client.loginZ(eval(args[0]),))

elif cmd == 'issueTokenForAccountMigrationSettings':
    if len(args) != 1:
        print('issueTokenForAccountMigrationSettings requires 1 args')
        sys.exit(1)
    pp.pprint(client.issueTokenForAccountMigrationSettings(eval(args[0]),))

elif cmd == 'issueTokenForAccountMigration':
    if len(args) != 1:
        print('issueTokenForAccountMigration requires 1 args')
        sys.exit(1)
    pp.pprint(client.issueTokenForAccountMigration(args[0],))

elif cmd == 'verifyQrcodeWithE2EE':
    if len(args) != 6:
        print('verifyQrcodeWithE2EE requires 6 args')
        sys.exit(1)
    pp.pprint(client.verifyQrcodeWithE2EE(args[0], args[1], eval(args[2]), eval(args[3]), args[4], args[5],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
