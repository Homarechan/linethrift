/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.message_commit_result;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class MessageCommitResult implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("MessageCommitResult");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);
  static final TField _STATE_FIELD_DESC = new TField("state", TType.I32, 2);
  static final TField _MESSAGE_STORE_REQUEST_ID_FIELD_DESC = new TField("messageStoreRequestId", TType.STRING, 3);
  static final TField _MESSAGE_IDS_FIELD_DESC = new TField("messageIds", TType.LIST, 4);
  static final TField _RECEIVER_COUNT_FIELD_DESC = new TField("receiverCount", TType.I64, 11);
  static final TField _SUCCESS_COUNT_FIELD_DESC = new TField("successCount", TType.I64, 12);
  static final TField _FAIL_COUNT_FIELD_DESC = new TField("failCount", TType.I64, 13);
  static final TField _BLOCK_COUNT_FIELD_DESC = new TField("blockCount", TType.I64, 14);
  static final TField _UNREGISTERED_COUNT_FIELD_DESC = new TField("unregisteredCount", TType.I64, 15);
  static final TField _UNRELATED_COUNT_FIELD_DESC = new TField("unrelatedCount", TType.I64, 16);
  static final TField _ERROR_DESCRIPTION_FIELD_DESC = new TField("errorDescription", TType.STRING, 21);

  String _requestId;
  static const int REQUESTID = 1;
  int _state;
  static const int STATE = 2;
  String _messageStoreRequestId;
  static const int MESSAGESTOREREQUESTID = 3;
  List<String> _messageIds;
  static const int MESSAGEIDS = 4;
  int _receiverCount = 0;
  static const int RECEIVERCOUNT = 11;
  int _successCount = 0;
  static const int SUCCESSCOUNT = 12;
  int _failCount = 0;
  static const int FAILCOUNT = 13;
  int _blockCount = 0;
  static const int BLOCKCOUNT = 14;
  int _unregisteredCount = 0;
  static const int UNREGISTEREDCOUNT = 15;
  int _unrelatedCount = 0;
  static const int UNRELATEDCOUNT = 16;
  String _errorDescription;
  static const int ERRORDESCRIPTION = 21;

  bool __isset_state = false;
  bool __isset_receiverCount = false;
  bool __isset_successCount = false;
  bool __isset_failCount = false;
  bool __isset_blockCount = false;
  bool __isset_unregisteredCount = false;
  bool __isset_unrelatedCount = false;

  MessageCommitResult() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  // state
  int get state => this._state;

  set state(int state) {
    this._state = state;
    this.__isset_state = true;
  }

  bool isSetState() => this.__isset_state;

  unsetState() {
    this.__isset_state = false;
  }

  // messageStoreRequestId
  String get messageStoreRequestId => this._messageStoreRequestId;

  set messageStoreRequestId(String messageStoreRequestId) {
    this._messageStoreRequestId = messageStoreRequestId;
  }

  bool isSetMessageStoreRequestId() => this.messageStoreRequestId != null;

  unsetMessageStoreRequestId() {
    this.messageStoreRequestId = null;
  }

  // messageIds
  List<String> get messageIds => this._messageIds;

  set messageIds(List<String> messageIds) {
    this._messageIds = messageIds;
  }

  bool isSetMessageIds() => this.messageIds != null;

  unsetMessageIds() {
    this.messageIds = null;
  }

  // receiverCount
  int get receiverCount => this._receiverCount;

  set receiverCount(int receiverCount) {
    this._receiverCount = receiverCount;
    this.__isset_receiverCount = true;
  }

  bool isSetReceiverCount() => this.__isset_receiverCount;

  unsetReceiverCount() {
    this.__isset_receiverCount = false;
  }

  // successCount
  int get successCount => this._successCount;

  set successCount(int successCount) {
    this._successCount = successCount;
    this.__isset_successCount = true;
  }

  bool isSetSuccessCount() => this.__isset_successCount;

  unsetSuccessCount() {
    this.__isset_successCount = false;
  }

  // failCount
  int get failCount => this._failCount;

  set failCount(int failCount) {
    this._failCount = failCount;
    this.__isset_failCount = true;
  }

  bool isSetFailCount() => this.__isset_failCount;

  unsetFailCount() {
    this.__isset_failCount = false;
  }

  // blockCount
  int get blockCount => this._blockCount;

  set blockCount(int blockCount) {
    this._blockCount = blockCount;
    this.__isset_blockCount = true;
  }

  bool isSetBlockCount() => this.__isset_blockCount;

  unsetBlockCount() {
    this.__isset_blockCount = false;
  }

  // unregisteredCount
  int get unregisteredCount => this._unregisteredCount;

  set unregisteredCount(int unregisteredCount) {
    this._unregisteredCount = unregisteredCount;
    this.__isset_unregisteredCount = true;
  }

  bool isSetUnregisteredCount() => this.__isset_unregisteredCount;

  unsetUnregisteredCount() {
    this.__isset_unregisteredCount = false;
  }

  // unrelatedCount
  int get unrelatedCount => this._unrelatedCount;

  set unrelatedCount(int unrelatedCount) {
    this._unrelatedCount = unrelatedCount;
    this.__isset_unrelatedCount = true;
  }

  bool isSetUnrelatedCount() => this.__isset_unrelatedCount;

  unsetUnrelatedCount() {
    this.__isset_unrelatedCount = false;
  }

  // errorDescription
  String get errorDescription => this._errorDescription;

  set errorDescription(String errorDescription) {
    this._errorDescription = errorDescription;
  }

  bool isSetErrorDescription() => this.errorDescription != null;

  unsetErrorDescription() {
    this.errorDescription = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      case STATE:
        return this.state;
      case MESSAGESTOREREQUESTID:
        return this.messageStoreRequestId;
      case MESSAGEIDS:
        return this.messageIds;
      case RECEIVERCOUNT:
        return this.receiverCount;
      case SUCCESSCOUNT:
        return this.successCount;
      case FAILCOUNT:
        return this.failCount;
      case BLOCKCOUNT:
        return this.blockCount;
      case UNREGISTEREDCOUNT:
        return this.unregisteredCount;
      case UNRELATEDCOUNT:
        return this.unrelatedCount;
      case ERRORDESCRIPTION:
        return this.errorDescription;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      case STATE:
        if (value == null) {
          unsetState();
        } else {
          this.state = value;
        }
        break;

      case MESSAGESTOREREQUESTID:
        if (value == null) {
          unsetMessageStoreRequestId();
        } else {
          this.messageStoreRequestId = value;
        }
        break;

      case MESSAGEIDS:
        if (value == null) {
          unsetMessageIds();
        } else {
          this.messageIds = value;
        }
        break;

      case RECEIVERCOUNT:
        if (value == null) {
          unsetReceiverCount();
        } else {
          this.receiverCount = value;
        }
        break;

      case SUCCESSCOUNT:
        if (value == null) {
          unsetSuccessCount();
        } else {
          this.successCount = value;
        }
        break;

      case FAILCOUNT:
        if (value == null) {
          unsetFailCount();
        } else {
          this.failCount = value;
        }
        break;

      case BLOCKCOUNT:
        if (value == null) {
          unsetBlockCount();
        } else {
          this.blockCount = value;
        }
        break;

      case UNREGISTEREDCOUNT:
        if (value == null) {
          unsetUnregisteredCount();
        } else {
          this.unregisteredCount = value;
        }
        break;

      case UNRELATEDCOUNT:
        if (value == null) {
          unsetUnrelatedCount();
        } else {
          this.unrelatedCount = value;
        }
        break;

      case ERRORDESCRIPTION:
        if (value == null) {
          unsetErrorDescription();
        } else {
          this.errorDescription = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      case STATE:
        return isSetState();
      case MESSAGESTOREREQUESTID:
        return isSetMessageStoreRequestId();
      case MESSAGEIDS:
        return isSetMessageIds();
      case RECEIVERCOUNT:
        return isSetReceiverCount();
      case SUCCESSCOUNT:
        return isSetSuccessCount();
      case FAILCOUNT:
        return isSetFailCount();
      case BLOCKCOUNT:
        return isSetBlockCount();
      case UNREGISTEREDCOUNT:
        return isSetUnregisteredCount();
      case UNRELATEDCOUNT:
        return isSetUnrelatedCount();
      case ERRORDESCRIPTION:
        return isSetErrorDescription();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STATE:
          if (field.type == TType.I32) {
            this.state = iprot.readI32();
            this.__isset_state = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MESSAGESTOREREQUESTID:
          if (field.type == TType.STRING) {
            this.messageStoreRequestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MESSAGEIDS:
          if (field.type == TType.LIST) {
            {
              TList _list0 = iprot.readListBegin();
              this.messageIds = new List<String>();
              for (int _i1 = 0; _i1 < _list0.length; ++_i1) {
                String _elem2;
                _elem2 = iprot.readString();
                this.messageIds.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RECEIVERCOUNT:
          if (field.type == TType.I64) {
            this.receiverCount = iprot.readI64();
            this.__isset_receiverCount = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SUCCESSCOUNT:
          if (field.type == TType.I64) {
            this.successCount = iprot.readI64();
            this.__isset_successCount = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FAILCOUNT:
          if (field.type == TType.I64) {
            this.failCount = iprot.readI64();
            this.__isset_failCount = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BLOCKCOUNT:
          if (field.type == TType.I64) {
            this.blockCount = iprot.readI64();
            this.__isset_blockCount = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case UNREGISTEREDCOUNT:
          if (field.type == TType.I64) {
            this.unregisteredCount = iprot.readI64();
            this.__isset_unregisteredCount = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case UNRELATEDCOUNT:
          if (field.type == TType.I64) {
            this.unrelatedCount = iprot.readI64();
            this.__isset_unrelatedCount = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ERRORDESCRIPTION:
          if (field.type == TType.STRING) {
            this.errorDescription = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_STATE_FIELD_DESC);
    oprot.writeI32(this.state);
    oprot.writeFieldEnd();
    if (this.messageStoreRequestId != null) {
      oprot.writeFieldBegin(_MESSAGE_STORE_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.messageStoreRequestId);
      oprot.writeFieldEnd();
    }
    if (this.messageIds != null) {
      oprot.writeFieldBegin(_MESSAGE_IDS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.messageIds.length));
        for (var elem3 in this.messageIds) {
          oprot.writeString(elem3);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_RECEIVER_COUNT_FIELD_DESC);
    oprot.writeI64(this.receiverCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_SUCCESS_COUNT_FIELD_DESC);
    oprot.writeI64(this.successCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_FAIL_COUNT_FIELD_DESC);
    oprot.writeI64(this.failCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_BLOCK_COUNT_FIELD_DESC);
    oprot.writeI64(this.blockCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_UNREGISTERED_COUNT_FIELD_DESC);
    oprot.writeI64(this.unregisteredCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_UNRELATED_COUNT_FIELD_DESC);
    oprot.writeI64(this.unrelatedCount);
    oprot.writeFieldEnd();
    if (this.errorDescription != null) {
      oprot.writeFieldBegin(_ERROR_DESCRIPTION_FIELD_DESC);
      oprot.writeString(this.errorDescription);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("MessageCommitResult(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(", ");
    ret.write("state:");
    String state_name = BuddyResultState.VALUES_TO_NAMES[this.state];
    if (state_name != null) {
      ret.write(state_name);
      ret.write(" (");
    }
    ret.write(this.state);
    if (state_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("messageStoreRequestId:");
    if (this.messageStoreRequestId == null) {
      ret.write("null");
    } else {
      ret.write(this.messageStoreRequestId);
    }

    ret.write(", ");
    ret.write("messageIds:");
    if (this.messageIds == null) {
      ret.write("null");
    } else {
      ret.write(this.messageIds);
    }

    ret.write(", ");
    ret.write("receiverCount:");
    ret.write(this.receiverCount);

    ret.write(", ");
    ret.write("successCount:");
    ret.write(this.successCount);

    ret.write(", ");
    ret.write("failCount:");
    ret.write(this.failCount);

    ret.write(", ");
    ret.write("blockCount:");
    ret.write(this.blockCount);

    ret.write(", ");
    ret.write("unregisteredCount:");
    ret.write(this.unregisteredCount);

    ret.write(", ");
    ret.write("unrelatedCount:");
    ret.write(this.unrelatedCount);

    ret.write(", ");
    ret.write("errorDescription:");
    if (this.errorDescription == null) {
      ret.write("null");
    } else {
      ret.write(this.errorDescription);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetState() && !BuddyResultState.VALID_VALUES.contains(state)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'state' has been assigned the invalid value $state");
    }
  }

}

