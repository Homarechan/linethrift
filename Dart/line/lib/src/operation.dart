/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.operation;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class Operation implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("Operation");
  static final TField _REVISION_FIELD_DESC = new TField("revision", TType.I64, 1);
  static final TField _CREATED_TIME_FIELD_DESC = new TField("createdTime", TType.I64, 2);
  static final TField _TYPE_FIELD_DESC = new TField("type", TType.I32, 3);
  static final TField _REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, 4);
  static final TField _CHECKSUM_FIELD_DESC = new TField("checksum", TType.STRING, 5);
  static final TField _STATUS_FIELD_DESC = new TField("status", TType.I32, 7);
  static final TField _PARAM1_FIELD_DESC = new TField("param1", TType.STRING, 10);
  static final TField _PARAM2_FIELD_DESC = new TField("param2", TType.STRING, 11);
  static final TField _PARAM3_FIELD_DESC = new TField("param3", TType.STRING, 12);
  static final TField _MESSAGE_FIELD_DESC = new TField("message", TType.STRUCT, 20);

  int _revision = 0;
  static const int REVISION = 1;
  int _createdTime = 0;
  static const int CREATEDTIME = 2;
  int _type;
  static const int TYPE = 3;
  int _reqSeq = 0;
  static const int REQSEQ = 4;
  String _checksum;
  static const int CHECKSUM = 5;
  int _status;
  static const int STATUS = 7;
  String _param1;
  static const int PARAM1 = 10;
  String _param2;
  static const int PARAM2 = 11;
  String _param3;
  static const int PARAM3 = 12;
  Message _message;
  static const int MESSAGE = 20;

  bool __isset_revision = false;
  bool __isset_createdTime = false;
  bool __isset_type = false;
  bool __isset_reqSeq = false;
  bool __isset_status = false;

  Operation() {
  }

  // revision
  int get revision => this._revision;

  set revision(int revision) {
    this._revision = revision;
    this.__isset_revision = true;
  }

  bool isSetRevision() => this.__isset_revision;

  unsetRevision() {
    this.__isset_revision = false;
  }

  // createdTime
  int get createdTime => this._createdTime;

  set createdTime(int createdTime) {
    this._createdTime = createdTime;
    this.__isset_createdTime = true;
  }

  bool isSetCreatedTime() => this.__isset_createdTime;

  unsetCreatedTime() {
    this.__isset_createdTime = false;
  }

  // type
  int get type => this._type;

  set type(int type) {
    this._type = type;
    this.__isset_type = true;
  }

  bool isSetType() => this.__isset_type;

  unsetType() {
    this.__isset_type = false;
  }

  // reqSeq
  int get reqSeq => this._reqSeq;

  set reqSeq(int reqSeq) {
    this._reqSeq = reqSeq;
    this.__isset_reqSeq = true;
  }

  bool isSetReqSeq() => this.__isset_reqSeq;

  unsetReqSeq() {
    this.__isset_reqSeq = false;
  }

  // checksum
  String get checksum => this._checksum;

  set checksum(String checksum) {
    this._checksum = checksum;
  }

  bool isSetChecksum() => this.checksum != null;

  unsetChecksum() {
    this.checksum = null;
  }

  // status
  int get status => this._status;

  set status(int status) {
    this._status = status;
    this.__isset_status = true;
  }

  bool isSetStatus() => this.__isset_status;

  unsetStatus() {
    this.__isset_status = false;
  }

  // param1
  String get param1 => this._param1;

  set param1(String param1) {
    this._param1 = param1;
  }

  bool isSetParam1() => this.param1 != null;

  unsetParam1() {
    this.param1 = null;
  }

  // param2
  String get param2 => this._param2;

  set param2(String param2) {
    this._param2 = param2;
  }

  bool isSetParam2() => this.param2 != null;

  unsetParam2() {
    this.param2 = null;
  }

  // param3
  String get param3 => this._param3;

  set param3(String param3) {
    this._param3 = param3;
  }

  bool isSetParam3() => this.param3 != null;

  unsetParam3() {
    this.param3 = null;
  }

  // message
  Message get message => this._message;

  set message(Message message) {
    this._message = message;
  }

  bool isSetMessage() => this.message != null;

  unsetMessage() {
    this.message = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REVISION:
        return this.revision;
      case CREATEDTIME:
        return this.createdTime;
      case TYPE:
        return this.type;
      case REQSEQ:
        return this.reqSeq;
      case CHECKSUM:
        return this.checksum;
      case STATUS:
        return this.status;
      case PARAM1:
        return this.param1;
      case PARAM2:
        return this.param2;
      case PARAM3:
        return this.param3;
      case MESSAGE:
        return this.message;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REVISION:
        if (value == null) {
          unsetRevision();
        } else {
          this.revision = value;
        }
        break;

      case CREATEDTIME:
        if (value == null) {
          unsetCreatedTime();
        } else {
          this.createdTime = value;
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          this.type = value;
        }
        break;

      case REQSEQ:
        if (value == null) {
          unsetReqSeq();
        } else {
          this.reqSeq = value;
        }
        break;

      case CHECKSUM:
        if (value == null) {
          unsetChecksum();
        } else {
          this.checksum = value;
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          this.status = value;
        }
        break;

      case PARAM1:
        if (value == null) {
          unsetParam1();
        } else {
          this.param1 = value;
        }
        break;

      case PARAM2:
        if (value == null) {
          unsetParam2();
        } else {
          this.param2 = value;
        }
        break;

      case PARAM3:
        if (value == null) {
          unsetParam3();
        } else {
          this.param3 = value;
        }
        break;

      case MESSAGE:
        if (value == null) {
          unsetMessage();
        } else {
          this.message = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REVISION:
        return isSetRevision();
      case CREATEDTIME:
        return isSetCreatedTime();
      case TYPE:
        return isSetType();
      case REQSEQ:
        return isSetReqSeq();
      case CHECKSUM:
        return isSetChecksum();
      case STATUS:
        return isSetStatus();
      case PARAM1:
        return isSetParam1();
      case PARAM2:
        return isSetParam2();
      case PARAM3:
        return isSetParam3();
      case MESSAGE:
        return isSetMessage();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REVISION:
          if (field.type == TType.I64) {
            this.revision = iprot.readI64();
            this.__isset_revision = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CREATEDTIME:
          if (field.type == TType.I64) {
            this.createdTime = iprot.readI64();
            this.__isset_createdTime = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TYPE:
          if (field.type == TType.I32) {
            this.type = iprot.readI32();
            this.__isset_type = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case REQSEQ:
          if (field.type == TType.I32) {
            this.reqSeq = iprot.readI32();
            this.__isset_reqSeq = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CHECKSUM:
          if (field.type == TType.STRING) {
            this.checksum = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STATUS:
          if (field.type == TType.I32) {
            this.status = iprot.readI32();
            this.__isset_status = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PARAM1:
          if (field.type == TType.STRING) {
            this.param1 = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PARAM2:
          if (field.type == TType.STRING) {
            this.param2 = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PARAM3:
          if (field.type == TType.STRING) {
            this.param3 = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MESSAGE:
          if (field.type == TType.STRUCT) {
            this.message = new Message();
            this.message.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_REVISION_FIELD_DESC);
    oprot.writeI64(this.revision);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_CREATED_TIME_FIELD_DESC);
    oprot.writeI64(this.createdTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_TYPE_FIELD_DESC);
    oprot.writeI32(this.type);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_REQ_SEQ_FIELD_DESC);
    oprot.writeI32(this.reqSeq);
    oprot.writeFieldEnd();
    if (this.checksum != null) {
      oprot.writeFieldBegin(_CHECKSUM_FIELD_DESC);
      oprot.writeString(this.checksum);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_STATUS_FIELD_DESC);
    oprot.writeI32(this.status);
    oprot.writeFieldEnd();
    if (this.param1 != null) {
      oprot.writeFieldBegin(_PARAM1_FIELD_DESC);
      oprot.writeString(this.param1);
      oprot.writeFieldEnd();
    }
    if (this.param2 != null) {
      oprot.writeFieldBegin(_PARAM2_FIELD_DESC);
      oprot.writeString(this.param2);
      oprot.writeFieldEnd();
    }
    if (this.param3 != null) {
      oprot.writeFieldBegin(_PARAM3_FIELD_DESC);
      oprot.writeString(this.param3);
      oprot.writeFieldEnd();
    }
    if (this.message != null) {
      oprot.writeFieldBegin(_MESSAGE_FIELD_DESC);
      this.message.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("Operation(");

    ret.write("revision:");
    ret.write(this.revision);

    ret.write(", ");
    ret.write("createdTime:");
    ret.write(this.createdTime);

    ret.write(", ");
    ret.write("type:");
    String type_name = OpType.VALUES_TO_NAMES[this.type];
    if (type_name != null) {
      ret.write(type_name);
      ret.write(" (");
    }
    ret.write(this.type);
    if (type_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("reqSeq:");
    ret.write(this.reqSeq);

    ret.write(", ");
    ret.write("checksum:");
    if (this.checksum == null) {
      ret.write("null");
    } else {
      ret.write(this.checksum);
    }

    ret.write(", ");
    ret.write("status:");
    String status_name = OpStatus.VALUES_TO_NAMES[this.status];
    if (status_name != null) {
      ret.write(status_name);
      ret.write(" (");
    }
    ret.write(this.status);
    if (status_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("param1:");
    if (this.param1 == null) {
      ret.write("null");
    } else {
      ret.write(this.param1);
    }

    ret.write(", ");
    ret.write("param2:");
    if (this.param2 == null) {
      ret.write("null");
    } else {
      ret.write(this.param2);
    }

    ret.write(", ");
    ret.write("param3:");
    if (this.param3 == null) {
      ret.write("null");
    } else {
      ret.write(this.param3);
    }

    ret.write(", ");
    ret.write("message:");
    if (this.message == null) {
      ret.write("null");
    } else {
      ret.write(this.message);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetType() && !OpType.VALID_VALUES.contains(type)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'type' has been assigned the invalid value $type");
    }
    if (isSetStatus() && !OpStatus.VALID_VALUES.contains(status)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'status' has been assigned the invalid value $status");
    }
  }

}

