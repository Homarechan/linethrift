/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.square_event_notification_message;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class SquareEventNotificationMessage implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("SquareEventNotificationMessage");
  static final TField _SQUARE_CHAT_MID_FIELD_DESC = new TField("squareChatMid", TType.STRING, 1);
  static final TField _SQUARE_MESSAGE_FIELD_DESC = new TField("squareMessage", TType.STRUCT, 2);
  static final TField _SENDER_DISPLAY_NAME_FIELD_DESC = new TField("senderDisplayName", TType.STRING, 3);
  static final TField _UNREAD_COUNT_FIELD_DESC = new TField("unreadCount", TType.I32, 4);
  static final TField _REQUIRED_TO_FETCH_CHAT_EVENTS_FIELD_DESC = new TField("requiredToFetchChatEvents", TType.BOOL, 5);

  String _squareChatMid;
  static const int SQUARECHATMID = 1;
  SquareMessage _squareMessage;
  static const int SQUAREMESSAGE = 2;
  String _senderDisplayName;
  static const int SENDERDISPLAYNAME = 3;
  int _unreadCount = 0;
  static const int UNREADCOUNT = 4;
  bool _requiredToFetchChatEvents = false;
  static const int REQUIREDTOFETCHCHATEVENTS = 5;

  bool __isset_unreadCount = false;
  bool __isset_requiredToFetchChatEvents = false;

  SquareEventNotificationMessage() {
  }

  // squareChatMid
  String get squareChatMid => this._squareChatMid;

  set squareChatMid(String squareChatMid) {
    this._squareChatMid = squareChatMid;
  }

  bool isSetSquareChatMid() => this.squareChatMid != null;

  unsetSquareChatMid() {
    this.squareChatMid = null;
  }

  // squareMessage
  SquareMessage get squareMessage => this._squareMessage;

  set squareMessage(SquareMessage squareMessage) {
    this._squareMessage = squareMessage;
  }

  bool isSetSquareMessage() => this.squareMessage != null;

  unsetSquareMessage() {
    this.squareMessage = null;
  }

  // senderDisplayName
  String get senderDisplayName => this._senderDisplayName;

  set senderDisplayName(String senderDisplayName) {
    this._senderDisplayName = senderDisplayName;
  }

  bool isSetSenderDisplayName() => this.senderDisplayName != null;

  unsetSenderDisplayName() {
    this.senderDisplayName = null;
  }

  // unreadCount
  int get unreadCount => this._unreadCount;

  set unreadCount(int unreadCount) {
    this._unreadCount = unreadCount;
    this.__isset_unreadCount = true;
  }

  bool isSetUnreadCount() => this.__isset_unreadCount;

  unsetUnreadCount() {
    this.__isset_unreadCount = false;
  }

  // requiredToFetchChatEvents
  bool get requiredToFetchChatEvents => this._requiredToFetchChatEvents;

  set requiredToFetchChatEvents(bool requiredToFetchChatEvents) {
    this._requiredToFetchChatEvents = requiredToFetchChatEvents;
    this.__isset_requiredToFetchChatEvents = true;
  }

  bool isSetRequiredToFetchChatEvents() => this.__isset_requiredToFetchChatEvents;

  unsetRequiredToFetchChatEvents() {
    this.__isset_requiredToFetchChatEvents = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SQUARECHATMID:
        return this.squareChatMid;
      case SQUAREMESSAGE:
        return this.squareMessage;
      case SENDERDISPLAYNAME:
        return this.senderDisplayName;
      case UNREADCOUNT:
        return this.unreadCount;
      case REQUIREDTOFETCHCHATEVENTS:
        return this.requiredToFetchChatEvents;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SQUARECHATMID:
        if (value == null) {
          unsetSquareChatMid();
        } else {
          this.squareChatMid = value;
        }
        break;

      case SQUAREMESSAGE:
        if (value == null) {
          unsetSquareMessage();
        } else {
          this.squareMessage = value;
        }
        break;

      case SENDERDISPLAYNAME:
        if (value == null) {
          unsetSenderDisplayName();
        } else {
          this.senderDisplayName = value;
        }
        break;

      case UNREADCOUNT:
        if (value == null) {
          unsetUnreadCount();
        } else {
          this.unreadCount = value;
        }
        break;

      case REQUIREDTOFETCHCHATEVENTS:
        if (value == null) {
          unsetRequiredToFetchChatEvents();
        } else {
          this.requiredToFetchChatEvents = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SQUARECHATMID:
        return isSetSquareChatMid();
      case SQUAREMESSAGE:
        return isSetSquareMessage();
      case SENDERDISPLAYNAME:
        return isSetSenderDisplayName();
      case UNREADCOUNT:
        return isSetUnreadCount();
      case REQUIREDTOFETCHCHATEVENTS:
        return isSetRequiredToFetchChatEvents();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SQUARECHATMID:
          if (field.type == TType.STRING) {
            this.squareChatMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SQUAREMESSAGE:
          if (field.type == TType.STRUCT) {
            this.squareMessage = new SquareMessage();
            this.squareMessage.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SENDERDISPLAYNAME:
          if (field.type == TType.STRING) {
            this.senderDisplayName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case UNREADCOUNT:
          if (field.type == TType.I32) {
            this.unreadCount = iprot.readI32();
            this.__isset_unreadCount = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case REQUIREDTOFETCHCHATEVENTS:
          if (field.type == TType.BOOL) {
            this.requiredToFetchChatEvents = iprot.readBool();
            this.__isset_requiredToFetchChatEvents = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.squareChatMid != null) {
      oprot.writeFieldBegin(_SQUARE_CHAT_MID_FIELD_DESC);
      oprot.writeString(this.squareChatMid);
      oprot.writeFieldEnd();
    }
    if (this.squareMessage != null) {
      oprot.writeFieldBegin(_SQUARE_MESSAGE_FIELD_DESC);
      this.squareMessage.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.senderDisplayName != null) {
      oprot.writeFieldBegin(_SENDER_DISPLAY_NAME_FIELD_DESC);
      oprot.writeString(this.senderDisplayName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_UNREAD_COUNT_FIELD_DESC);
    oprot.writeI32(this.unreadCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_REQUIRED_TO_FETCH_CHAT_EVENTS_FIELD_DESC);
    oprot.writeBool(this.requiredToFetchChatEvents);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("SquareEventNotificationMessage(");

    ret.write("squareChatMid:");
    if (this.squareChatMid == null) {
      ret.write("null");
    } else {
      ret.write(this.squareChatMid);
    }

    ret.write(", ");
    ret.write("squareMessage:");
    if (this.squareMessage == null) {
      ret.write("null");
    } else {
      ret.write(this.squareMessage);
    }

    ret.write(", ");
    ret.write("senderDisplayName:");
    if (this.senderDisplayName == null) {
      ret.write("null");
    } else {
      ret.write(this.senderDisplayName);
    }

    ret.write(", ");
    ret.write("unreadCount:");
    ret.write(this.unreadCount);

    ret.write(", ");
    ret.write("requiredToFetchChatEvents:");
    ret.write(this.requiredToFetchChatEvents);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

