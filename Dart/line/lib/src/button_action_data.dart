/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.button_action_data;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class ButtonActionData implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ButtonActionData");
  static final TField _ADD_FRIEND_DATA_FIELD_DESC = new TField("addFriendData", TType.STRUCT, 1);
  static final TField _INSTALL_APP_DATA_FIELD_DESC = new TField("installAppData", TType.STRUCT, 2);
  static final TField _JUMP_URL_DATA_FIELD_DESC = new TField("jumpUrlData", TType.STRUCT, 3);

  AddFriendData _addFriendData;
  static const int ADDFRIENDDATA = 1;
  InstallAppData _installAppData;
  static const int INSTALLAPPDATA = 2;
  JumpUrlData _jumpUrlData;
  static const int JUMPURLDATA = 3;


  ButtonActionData() {
  }

  // addFriendData
  AddFriendData get addFriendData => this._addFriendData;

  set addFriendData(AddFriendData addFriendData) {
    this._addFriendData = addFriendData;
  }

  bool isSetAddFriendData() => this.addFriendData != null;

  unsetAddFriendData() {
    this.addFriendData = null;
  }

  // installAppData
  InstallAppData get installAppData => this._installAppData;

  set installAppData(InstallAppData installAppData) {
    this._installAppData = installAppData;
  }

  bool isSetInstallAppData() => this.installAppData != null;

  unsetInstallAppData() {
    this.installAppData = null;
  }

  // jumpUrlData
  JumpUrlData get jumpUrlData => this._jumpUrlData;

  set jumpUrlData(JumpUrlData jumpUrlData) {
    this._jumpUrlData = jumpUrlData;
  }

  bool isSetJumpUrlData() => this.jumpUrlData != null;

  unsetJumpUrlData() {
    this.jumpUrlData = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case ADDFRIENDDATA:
        return this.addFriendData;
      case INSTALLAPPDATA:
        return this.installAppData;
      case JUMPURLDATA:
        return this.jumpUrlData;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case ADDFRIENDDATA:
        if (value == null) {
          unsetAddFriendData();
        } else {
          this.addFriendData = value;
        }
        break;

      case INSTALLAPPDATA:
        if (value == null) {
          unsetInstallAppData();
        } else {
          this.installAppData = value;
        }
        break;

      case JUMPURLDATA:
        if (value == null) {
          unsetJumpUrlData();
        } else {
          this.jumpUrlData = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case ADDFRIENDDATA:
        return isSetAddFriendData();
      case INSTALLAPPDATA:
        return isSetInstallAppData();
      case JUMPURLDATA:
        return isSetJumpUrlData();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ADDFRIENDDATA:
          if (field.type == TType.STRUCT) {
            this.addFriendData = new AddFriendData();
            this.addFriendData.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case INSTALLAPPDATA:
          if (field.type == TType.STRUCT) {
            this.installAppData = new InstallAppData();
            this.installAppData.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case JUMPURLDATA:
          if (field.type == TType.STRUCT) {
            this.jumpUrlData = new JumpUrlData();
            this.jumpUrlData.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.addFriendData != null) {
      oprot.writeFieldBegin(_ADD_FRIEND_DATA_FIELD_DESC);
      this.addFriendData.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.installAppData != null) {
      oprot.writeFieldBegin(_INSTALL_APP_DATA_FIELD_DESC);
      this.installAppData.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.jumpUrlData != null) {
      oprot.writeFieldBegin(_JUMP_URL_DATA_FIELD_DESC);
      this.jumpUrlData.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ButtonActionData(");

    ret.write("addFriendData:");
    if (this.addFriendData == null) {
      ret.write("null");
    } else {
      ret.write(this.addFriendData);
    }

    ret.write(", ");
    ret.write("installAppData:");
    if (this.installAppData == null) {
      ret.write("null");
    } else {
      ret.write(this.installAppData);
    }

    ret.write(", ");
    ret.write("jumpUrlData:");
    if (this.jumpUrlData == null) {
      ret.write("null");
    } else {
      ret.write(this.jumpUrlData);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

