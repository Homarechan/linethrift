/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.sync_relations;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class SyncRelations implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("SyncRelations");
  static final TField _SYNC_ALL_FIELD_DESC = new TField("syncAll", TType.BOOL, 1);
  static final TField _SYNC_PARAM_CONTACT_FIELD_DESC = new TField("syncParamContact", TType.LIST, 2);
  static final TField _SYNC_PARAM_MID_FIELD_DESC = new TField("syncParamMid", TType.LIST, 3);

  bool _syncAll = false;
  static const int SYNCALL = 1;
  List<SyncParamContact> _syncParamContact;
  static const int SYNCPARAMCONTACT = 2;
  List<SyncParamMid> _syncParamMid;
  static const int SYNCPARAMMID = 3;

  bool __isset_syncAll = false;

  SyncRelations() {
  }

  // syncAll
  bool get syncAll => this._syncAll;

  set syncAll(bool syncAll) {
    this._syncAll = syncAll;
    this.__isset_syncAll = true;
  }

  bool isSetSyncAll() => this.__isset_syncAll;

  unsetSyncAll() {
    this.__isset_syncAll = false;
  }

  // syncParamContact
  List<SyncParamContact> get syncParamContact => this._syncParamContact;

  set syncParamContact(List<SyncParamContact> syncParamContact) {
    this._syncParamContact = syncParamContact;
  }

  bool isSetSyncParamContact() => this.syncParamContact != null;

  unsetSyncParamContact() {
    this.syncParamContact = null;
  }

  // syncParamMid
  List<SyncParamMid> get syncParamMid => this._syncParamMid;

  set syncParamMid(List<SyncParamMid> syncParamMid) {
    this._syncParamMid = syncParamMid;
  }

  bool isSetSyncParamMid() => this.syncParamMid != null;

  unsetSyncParamMid() {
    this.syncParamMid = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SYNCALL:
        return this.syncAll;
      case SYNCPARAMCONTACT:
        return this.syncParamContact;
      case SYNCPARAMMID:
        return this.syncParamMid;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SYNCALL:
        if (value == null) {
          unsetSyncAll();
        } else {
          this.syncAll = value;
        }
        break;

      case SYNCPARAMCONTACT:
        if (value == null) {
          unsetSyncParamContact();
        } else {
          this.syncParamContact = value;
        }
        break;

      case SYNCPARAMMID:
        if (value == null) {
          unsetSyncParamMid();
        } else {
          this.syncParamMid = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SYNCALL:
        return isSetSyncAll();
      case SYNCPARAMCONTACT:
        return isSetSyncParamContact();
      case SYNCPARAMMID:
        return isSetSyncParamMid();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SYNCALL:
          if (field.type == TType.BOOL) {
            this.syncAll = iprot.readBool();
            this.__isset_syncAll = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SYNCPARAMCONTACT:
          if (field.type == TType.LIST) {
            {
              TList _list384 = iprot.readListBegin();
              this.syncParamContact = new List<SyncParamContact>();
              for (int _i385 = 0; _i385 < _list384.length; ++_i385) {
                SyncParamContact _elem386;
                _elem386 = new SyncParamContact();
                _elem386.read(iprot);
                this.syncParamContact.add(_elem386);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SYNCPARAMMID:
          if (field.type == TType.LIST) {
            {
              TList _list387 = iprot.readListBegin();
              this.syncParamMid = new List<SyncParamMid>();
              for (int _i388 = 0; _i388 < _list387.length; ++_i388) {
                SyncParamMid _elem389;
                _elem389 = new SyncParamMid();
                _elem389.read(iprot);
                this.syncParamMid.add(_elem389);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_SYNC_ALL_FIELD_DESC);
    oprot.writeBool(this.syncAll);
    oprot.writeFieldEnd();
    if (this.syncParamContact != null) {
      oprot.writeFieldBegin(_SYNC_PARAM_CONTACT_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.syncParamContact.length));
        for (var elem390 in this.syncParamContact) {
          elem390.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.syncParamMid != null) {
      oprot.writeFieldBegin(_SYNC_PARAM_MID_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.syncParamMid.length));
        for (var elem391 in this.syncParamMid) {
          elem391.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("SyncRelations(");

    ret.write("syncAll:");
    ret.write(this.syncAll);

    ret.write(", ");
    ret.write("syncParamContact:");
    if (this.syncParamContact == null) {
      ret.write("null");
    } else {
      ret.write(this.syncParamContact);
    }

    ret.write(", ");
    ret.write("syncParamMid:");
    if (this.syncParamMid == null) {
      ret.write("null");
    } else {
      ret.write(this.syncParamMid);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

