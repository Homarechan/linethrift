/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.square_chat_status_without_message;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class SquareChatStatusWithoutMessage implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("SquareChatStatusWithoutMessage");
  static final TField _MEMBER_COUNT_FIELD_DESC = new TField("memberCount", TType.I32, 1);
  static final TField _UNREAD_MESSAGE_COUNT_FIELD_DESC = new TField("unreadMessageCount", TType.I32, 2);

  int _memberCount = 0;
  static const int MEMBERCOUNT = 1;
  int _unreadMessageCount = 0;
  static const int UNREADMESSAGECOUNT = 2;

  bool __isset_memberCount = false;
  bool __isset_unreadMessageCount = false;

  SquareChatStatusWithoutMessage() {
  }

  // memberCount
  int get memberCount => this._memberCount;

  set memberCount(int memberCount) {
    this._memberCount = memberCount;
    this.__isset_memberCount = true;
  }

  bool isSetMemberCount() => this.__isset_memberCount;

  unsetMemberCount() {
    this.__isset_memberCount = false;
  }

  // unreadMessageCount
  int get unreadMessageCount => this._unreadMessageCount;

  set unreadMessageCount(int unreadMessageCount) {
    this._unreadMessageCount = unreadMessageCount;
    this.__isset_unreadMessageCount = true;
  }

  bool isSetUnreadMessageCount() => this.__isset_unreadMessageCount;

  unsetUnreadMessageCount() {
    this.__isset_unreadMessageCount = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case MEMBERCOUNT:
        return this.memberCount;
      case UNREADMESSAGECOUNT:
        return this.unreadMessageCount;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case MEMBERCOUNT:
        if (value == null) {
          unsetMemberCount();
        } else {
          this.memberCount = value;
        }
        break;

      case UNREADMESSAGECOUNT:
        if (value == null) {
          unsetUnreadMessageCount();
        } else {
          this.unreadMessageCount = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case MEMBERCOUNT:
        return isSetMemberCount();
      case UNREADMESSAGECOUNT:
        return isSetUnreadMessageCount();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case MEMBERCOUNT:
          if (field.type == TType.I32) {
            this.memberCount = iprot.readI32();
            this.__isset_memberCount = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case UNREADMESSAGECOUNT:
          if (field.type == TType.I32) {
            this.unreadMessageCount = iprot.readI32();
            this.__isset_unreadMessageCount = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_MEMBER_COUNT_FIELD_DESC);
    oprot.writeI32(this.memberCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_UNREAD_MESSAGE_COUNT_FIELD_DESC);
    oprot.writeI32(this.unreadMessageCount);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("SquareChatStatusWithoutMessage(");

    ret.write("memberCount:");
    ret.write(this.memberCount);

    ret.write(", ");
    ret.write("unreadMessageCount:");
    ret.write(this.unreadMessageCount);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

