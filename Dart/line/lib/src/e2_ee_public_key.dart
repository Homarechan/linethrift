/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.e2_ee_public_key;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class E2EEPublicKey implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("E2EEPublicKey");
  static final TField _VERSION_FIELD_DESC = new TField("version", TType.I32, 1);
  static final TField _KEY_ID_FIELD_DESC = new TField("keyId", TType.I32, 2);
  static final TField _KEY_DATA_FIELD_DESC = new TField("keyData", TType.STRING, 4);
  static final TField _CREATED_TIME_FIELD_DESC = new TField("createdTime", TType.I64, 5);

  int _version = 0;
  static const int VERSION = 1;
  int _keyId = 0;
  static const int KEYID = 2;
  Uint8List _keyData;
  static const int KEYDATA = 4;
  int _createdTime = 0;
  static const int CREATEDTIME = 5;

  bool __isset_version = false;
  bool __isset_keyId = false;
  bool __isset_createdTime = false;

  E2EEPublicKey() {
  }

  // version
  int get version => this._version;

  set version(int version) {
    this._version = version;
    this.__isset_version = true;
  }

  bool isSetVersion() => this.__isset_version;

  unsetVersion() {
    this.__isset_version = false;
  }

  // keyId
  int get keyId => this._keyId;

  set keyId(int keyId) {
    this._keyId = keyId;
    this.__isset_keyId = true;
  }

  bool isSetKeyId() => this.__isset_keyId;

  unsetKeyId() {
    this.__isset_keyId = false;
  }

  // keyData
  Uint8List get keyData => this._keyData;

  set keyData(Uint8List keyData) {
    this._keyData = keyData;
  }

  bool isSetKeyData() => this.keyData != null;

  unsetKeyData() {
    this.keyData = null;
  }

  // createdTime
  int get createdTime => this._createdTime;

  set createdTime(int createdTime) {
    this._createdTime = createdTime;
    this.__isset_createdTime = true;
  }

  bool isSetCreatedTime() => this.__isset_createdTime;

  unsetCreatedTime() {
    this.__isset_createdTime = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case VERSION:
        return this.version;
      case KEYID:
        return this.keyId;
      case KEYDATA:
        return this.keyData;
      case CREATEDTIME:
        return this.createdTime;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case VERSION:
        if (value == null) {
          unsetVersion();
        } else {
          this.version = value;
        }
        break;

      case KEYID:
        if (value == null) {
          unsetKeyId();
        } else {
          this.keyId = value;
        }
        break;

      case KEYDATA:
        if (value == null) {
          unsetKeyData();
        } else {
          this.keyData = value;
        }
        break;

      case CREATEDTIME:
        if (value == null) {
          unsetCreatedTime();
        } else {
          this.createdTime = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case VERSION:
        return isSetVersion();
      case KEYID:
        return isSetKeyId();
      case KEYDATA:
        return isSetKeyData();
      case CREATEDTIME:
        return isSetCreatedTime();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case VERSION:
          if (field.type == TType.I32) {
            this.version = iprot.readI32();
            this.__isset_version = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case KEYID:
          if (field.type == TType.I32) {
            this.keyId = iprot.readI32();
            this.__isset_keyId = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case KEYDATA:
          if (field.type == TType.STRING) {
            this.keyData = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CREATEDTIME:
          if (field.type == TType.I64) {
            this.createdTime = iprot.readI64();
            this.__isset_createdTime = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_VERSION_FIELD_DESC);
    oprot.writeI32(this.version);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_KEY_ID_FIELD_DESC);
    oprot.writeI32(this.keyId);
    oprot.writeFieldEnd();
    if (this.keyData != null) {
      oprot.writeFieldBegin(_KEY_DATA_FIELD_DESC);
      oprot.writeBinary(this.keyData);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_CREATED_TIME_FIELD_DESC);
    oprot.writeI64(this.createdTime);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("E2EEPublicKey(");

    ret.write("version:");
    ret.write(this.version);

    ret.write(", ");
    ret.write("keyId:");
    ret.write(this.keyId);

    ret.write(", ");
    ret.write("keyData:");
    if (this.keyData == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("createdTime:");
    ret.write(this.createdTime);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

