/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.friend_requests_info;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class FriendRequestsInfo implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("FriendRequestsInfo");
  static final TField _TOTAL_INCOMING_COUNT_FIELD_DESC = new TField("totalIncomingCount", TType.I32, 1);
  static final TField _TOTAL_OUTGOING_COUNT_FIELD_DESC = new TField("totalOutgoingCount", TType.I32, 2);
  static final TField _RECENT_INCOMINGS_FIELD_DESC = new TField("recentIncomings", TType.LIST, 3);
  static final TField _RECENT_OUTGOINGS_FIELD_DESC = new TField("recentOutgoings", TType.LIST, 4);
  static final TField _TOTAL_INCOMING_LIMIT_FIELD_DESC = new TField("totalIncomingLimit", TType.I32, 5);
  static final TField _TOTAL_OUTGOING_LIMIT_FIELD_DESC = new TField("totalOutgoingLimit", TType.I32, 6);

  int _totalIncomingCount = 0;
  static const int TOTALINCOMINGCOUNT = 1;
  int _totalOutgoingCount = 0;
  static const int TOTALOUTGOINGCOUNT = 2;
  List<FriendRequest> _recentIncomings;
  static const int RECENTINCOMINGS = 3;
  List<FriendRequest> _recentOutgoings;
  static const int RECENTOUTGOINGS = 4;
  int _totalIncomingLimit = 0;
  static const int TOTALINCOMINGLIMIT = 5;
  int _totalOutgoingLimit = 0;
  static const int TOTALOUTGOINGLIMIT = 6;

  bool __isset_totalIncomingCount = false;
  bool __isset_totalOutgoingCount = false;
  bool __isset_totalIncomingLimit = false;
  bool __isset_totalOutgoingLimit = false;

  FriendRequestsInfo() {
  }

  // totalIncomingCount
  int get totalIncomingCount => this._totalIncomingCount;

  set totalIncomingCount(int totalIncomingCount) {
    this._totalIncomingCount = totalIncomingCount;
    this.__isset_totalIncomingCount = true;
  }

  bool isSetTotalIncomingCount() => this.__isset_totalIncomingCount;

  unsetTotalIncomingCount() {
    this.__isset_totalIncomingCount = false;
  }

  // totalOutgoingCount
  int get totalOutgoingCount => this._totalOutgoingCount;

  set totalOutgoingCount(int totalOutgoingCount) {
    this._totalOutgoingCount = totalOutgoingCount;
    this.__isset_totalOutgoingCount = true;
  }

  bool isSetTotalOutgoingCount() => this.__isset_totalOutgoingCount;

  unsetTotalOutgoingCount() {
    this.__isset_totalOutgoingCount = false;
  }

  // recentIncomings
  List<FriendRequest> get recentIncomings => this._recentIncomings;

  set recentIncomings(List<FriendRequest> recentIncomings) {
    this._recentIncomings = recentIncomings;
  }

  bool isSetRecentIncomings() => this.recentIncomings != null;

  unsetRecentIncomings() {
    this.recentIncomings = null;
  }

  // recentOutgoings
  List<FriendRequest> get recentOutgoings => this._recentOutgoings;

  set recentOutgoings(List<FriendRequest> recentOutgoings) {
    this._recentOutgoings = recentOutgoings;
  }

  bool isSetRecentOutgoings() => this.recentOutgoings != null;

  unsetRecentOutgoings() {
    this.recentOutgoings = null;
  }

  // totalIncomingLimit
  int get totalIncomingLimit => this._totalIncomingLimit;

  set totalIncomingLimit(int totalIncomingLimit) {
    this._totalIncomingLimit = totalIncomingLimit;
    this.__isset_totalIncomingLimit = true;
  }

  bool isSetTotalIncomingLimit() => this.__isset_totalIncomingLimit;

  unsetTotalIncomingLimit() {
    this.__isset_totalIncomingLimit = false;
  }

  // totalOutgoingLimit
  int get totalOutgoingLimit => this._totalOutgoingLimit;

  set totalOutgoingLimit(int totalOutgoingLimit) {
    this._totalOutgoingLimit = totalOutgoingLimit;
    this.__isset_totalOutgoingLimit = true;
  }

  bool isSetTotalOutgoingLimit() => this.__isset_totalOutgoingLimit;

  unsetTotalOutgoingLimit() {
    this.__isset_totalOutgoingLimit = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case TOTALINCOMINGCOUNT:
        return this.totalIncomingCount;
      case TOTALOUTGOINGCOUNT:
        return this.totalOutgoingCount;
      case RECENTINCOMINGS:
        return this.recentIncomings;
      case RECENTOUTGOINGS:
        return this.recentOutgoings;
      case TOTALINCOMINGLIMIT:
        return this.totalIncomingLimit;
      case TOTALOUTGOINGLIMIT:
        return this.totalOutgoingLimit;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case TOTALINCOMINGCOUNT:
        if (value == null) {
          unsetTotalIncomingCount();
        } else {
          this.totalIncomingCount = value;
        }
        break;

      case TOTALOUTGOINGCOUNT:
        if (value == null) {
          unsetTotalOutgoingCount();
        } else {
          this.totalOutgoingCount = value;
        }
        break;

      case RECENTINCOMINGS:
        if (value == null) {
          unsetRecentIncomings();
        } else {
          this.recentIncomings = value;
        }
        break;

      case RECENTOUTGOINGS:
        if (value == null) {
          unsetRecentOutgoings();
        } else {
          this.recentOutgoings = value;
        }
        break;

      case TOTALINCOMINGLIMIT:
        if (value == null) {
          unsetTotalIncomingLimit();
        } else {
          this.totalIncomingLimit = value;
        }
        break;

      case TOTALOUTGOINGLIMIT:
        if (value == null) {
          unsetTotalOutgoingLimit();
        } else {
          this.totalOutgoingLimit = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case TOTALINCOMINGCOUNT:
        return isSetTotalIncomingCount();
      case TOTALOUTGOINGCOUNT:
        return isSetTotalOutgoingCount();
      case RECENTINCOMINGS:
        return isSetRecentIncomings();
      case RECENTOUTGOINGS:
        return isSetRecentOutgoings();
      case TOTALINCOMINGLIMIT:
        return isSetTotalIncomingLimit();
      case TOTALOUTGOINGLIMIT:
        return isSetTotalOutgoingLimit();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case TOTALINCOMINGCOUNT:
          if (field.type == TType.I32) {
            this.totalIncomingCount = iprot.readI32();
            this.__isset_totalIncomingCount = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TOTALOUTGOINGCOUNT:
          if (field.type == TType.I32) {
            this.totalOutgoingCount = iprot.readI32();
            this.__isset_totalOutgoingCount = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RECENTINCOMINGS:
          if (field.type == TType.LIST) {
            {
              TList _list222 = iprot.readListBegin();
              this.recentIncomings = new List<FriendRequest>();
              for (int _i223 = 0; _i223 < _list222.length; ++_i223) {
                FriendRequest _elem224;
                _elem224 = new FriendRequest();
                _elem224.read(iprot);
                this.recentIncomings.add(_elem224);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RECENTOUTGOINGS:
          if (field.type == TType.LIST) {
            {
              TList _list225 = iprot.readListBegin();
              this.recentOutgoings = new List<FriendRequest>();
              for (int _i226 = 0; _i226 < _list225.length; ++_i226) {
                FriendRequest _elem227;
                _elem227 = new FriendRequest();
                _elem227.read(iprot);
                this.recentOutgoings.add(_elem227);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TOTALINCOMINGLIMIT:
          if (field.type == TType.I32) {
            this.totalIncomingLimit = iprot.readI32();
            this.__isset_totalIncomingLimit = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TOTALOUTGOINGLIMIT:
          if (field.type == TType.I32) {
            this.totalOutgoingLimit = iprot.readI32();
            this.__isset_totalOutgoingLimit = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_TOTAL_INCOMING_COUNT_FIELD_DESC);
    oprot.writeI32(this.totalIncomingCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_TOTAL_OUTGOING_COUNT_FIELD_DESC);
    oprot.writeI32(this.totalOutgoingCount);
    oprot.writeFieldEnd();
    if (this.recentIncomings != null) {
      oprot.writeFieldBegin(_RECENT_INCOMINGS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.recentIncomings.length));
        for (var elem228 in this.recentIncomings) {
          elem228.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.recentOutgoings != null) {
      oprot.writeFieldBegin(_RECENT_OUTGOINGS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.recentOutgoings.length));
        for (var elem229 in this.recentOutgoings) {
          elem229.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_TOTAL_INCOMING_LIMIT_FIELD_DESC);
    oprot.writeI32(this.totalIncomingLimit);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_TOTAL_OUTGOING_LIMIT_FIELD_DESC);
    oprot.writeI32(this.totalOutgoingLimit);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("FriendRequestsInfo(");

    ret.write("totalIncomingCount:");
    ret.write(this.totalIncomingCount);

    ret.write(", ");
    ret.write("totalOutgoingCount:");
    ret.write(this.totalOutgoingCount);

    ret.write(", ");
    ret.write("recentIncomings:");
    if (this.recentIncomings == null) {
      ret.write("null");
    } else {
      ret.write(this.recentIncomings);
    }

    ret.write(", ");
    ret.write("recentOutgoings:");
    if (this.recentOutgoings == null) {
      ret.write("null");
    } else {
      ret.write(this.recentOutgoings);
    }

    ret.write(", ");
    ret.write("totalIncomingLimit:");
    ret.write(this.totalIncomingLimit);

    ret.write(", ");
    ret.write("totalOutgoingLimit:");
    ret.write(this.totalOutgoingLimit);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

