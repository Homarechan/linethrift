/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.profile_content;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class ProfileContent implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ProfileContent");
  static final TField _VALUE_FIELD_DESC = new TField("value", TType.STRING, 1);
  static final TField _META_FIELD_DESC = new TField("meta", TType.MAP, 2);

  String _value;
  static const int VALUE = 1;
  Map<String, String> _meta;
  static const int META = 2;


  ProfileContent() {
  }

  // value
  String get value => this._value;

  set value(String value) {
    this._value = value;
  }

  bool isSetValue() => this.value != null;

  unsetValue() {
    this.value = null;
  }

  // meta
  Map<String, String> get meta => this._meta;

  set meta(Map<String, String> meta) {
    this._meta = meta;
  }

  bool isSetMeta() => this.meta != null;

  unsetMeta() {
    this.meta = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case VALUE:
        return this.value;
      case META:
        return this.meta;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          this.value = value;
        }
        break;

      case META:
        if (value == null) {
          unsetMeta();
        } else {
          this.meta = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case VALUE:
        return isSetValue();
      case META:
        return isSetMeta();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case VALUE:
          if (field.type == TType.STRING) {
            this.value = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case META:
          if (field.type == TType.MAP) {
            {
              TMap _map8 = iprot.readMapBegin();
              this.meta = new Map<String, String>();
              for (int _i9 = 0; _i9 < _map8.length; ++_i9) {
                String _key10;
                String _val11;
                _key10 = iprot.readString();
                _val11 = iprot.readString();
                this.meta[_key10] = _val11;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.value != null) {
      oprot.writeFieldBegin(_VALUE_FIELD_DESC);
      oprot.writeString(this.value);
      oprot.writeFieldEnd();
    }
    if (this.meta != null) {
      oprot.writeFieldBegin(_META_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.meta.length));
        for (var elem13 in this.meta.keys) {
          oprot.writeString(elem13);
          oprot.writeString(this.meta[elem13]);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ProfileContent(");

    ret.write("value:");
    if (this.value == null) {
      ret.write("null");
    } else {
      ret.write(this.value);
    }

    ret.write(", ");
    ret.write("meta:");
    if (this.meta == null) {
      ret.write("null");
    } else {
      ret.write(this.meta);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

