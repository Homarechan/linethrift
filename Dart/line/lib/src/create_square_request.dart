/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.create_square_request;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class CreateSquareRequest implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("CreateSquareRequest");
  static final TField _REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, 1);
  static final TField _SQUARE_FIELD_DESC = new TField("square", TType.STRUCT, 2);
  static final TField _CREATOR_FIELD_DESC = new TField("creator", TType.STRUCT, 3);

  int _reqSeq = 0;
  static const int REQSEQ = 1;
  Square _square;
  static const int SQUARE = 2;
  SquareMember _creator;
  static const int CREATOR = 3;

  bool __isset_reqSeq = false;

  CreateSquareRequest() {
  }

  // reqSeq
  int get reqSeq => this._reqSeq;

  set reqSeq(int reqSeq) {
    this._reqSeq = reqSeq;
    this.__isset_reqSeq = true;
  }

  bool isSetReqSeq() => this.__isset_reqSeq;

  unsetReqSeq() {
    this.__isset_reqSeq = false;
  }

  // square
  Square get square => this._square;

  set square(Square square) {
    this._square = square;
  }

  bool isSetSquare() => this.square != null;

  unsetSquare() {
    this.square = null;
  }

  // creator
  SquareMember get creator => this._creator;

  set creator(SquareMember creator) {
    this._creator = creator;
  }

  bool isSetCreator() => this.creator != null;

  unsetCreator() {
    this.creator = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQSEQ:
        return this.reqSeq;
      case SQUARE:
        return this.square;
      case CREATOR:
        return this.creator;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQSEQ:
        if (value == null) {
          unsetReqSeq();
        } else {
          this.reqSeq = value;
        }
        break;

      case SQUARE:
        if (value == null) {
          unsetSquare();
        } else {
          this.square = value;
        }
        break;

      case CREATOR:
        if (value == null) {
          unsetCreator();
        } else {
          this.creator = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQSEQ:
        return isSetReqSeq();
      case SQUARE:
        return isSetSquare();
      case CREATOR:
        return isSetCreator();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQSEQ:
          if (field.type == TType.I32) {
            this.reqSeq = iprot.readI32();
            this.__isset_reqSeq = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SQUARE:
          if (field.type == TType.STRUCT) {
            this.square = new Square();
            this.square.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CREATOR:
          if (field.type == TType.STRUCT) {
            this.creator = new SquareMember();
            this.creator.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_REQ_SEQ_FIELD_DESC);
    oprot.writeI32(this.reqSeq);
    oprot.writeFieldEnd();
    if (this.square != null) {
      oprot.writeFieldBegin(_SQUARE_FIELD_DESC);
      this.square.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.creator != null) {
      oprot.writeFieldBegin(_CREATOR_FIELD_DESC);
      this.creator.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("CreateSquareRequest(");

    ret.write("reqSeq:");
    ret.write(this.reqSeq);

    ret.write(", ");
    ret.write("square:");
    if (this.square == null) {
      ret.write("null");
    } else {
      ret.write(this.square);
    }

    ret.write(", ");
    ret.write("creator:");
    if (this.creator == null) {
      ret.write("null");
    } else {
      ret.write(this.creator);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

