/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.category_item;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class CategoryItem implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("CategoryItem");
  static final TField _COLLECTION_FIELD_DESC = new TField("collection", TType.I32, 1);
  static final TField _CAT_FIELD_DESC = new TField("cat", TType.I32, 2);
  static final TField _NAME_FIELD_DESC = new TField("name", TType.STRING, 3);

  int _collection = 0;
  static const int COLLECTION = 1;
  int _cat = 0;
  static const int CAT = 2;
  String _name;
  static const int NAME = 3;

  bool __isset_collection = false;
  bool __isset_cat = false;

  CategoryItem() {
  }

  // collection
  int get collection => this._collection;

  set collection(int collection) {
    this._collection = collection;
    this.__isset_collection = true;
  }

  bool isSetCollection() => this.__isset_collection;

  unsetCollection() {
    this.__isset_collection = false;
  }

  // cat
  int get cat => this._cat;

  set cat(int cat) {
    this._cat = cat;
    this.__isset_cat = true;
  }

  bool isSetCat() => this.__isset_cat;

  unsetCat() {
    this.__isset_cat = false;
  }

  // name
  String get name => this._name;

  set name(String name) {
    this._name = name;
  }

  bool isSetName() => this.name != null;

  unsetName() {
    this.name = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case COLLECTION:
        return this.collection;
      case CAT:
        return this.cat;
      case NAME:
        return this.name;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case COLLECTION:
        if (value == null) {
          unsetCollection();
        } else {
          this.collection = value;
        }
        break;

      case CAT:
        if (value == null) {
          unsetCat();
        } else {
          this.cat = value;
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          this.name = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case COLLECTION:
        return isSetCollection();
      case CAT:
        return isSetCat();
      case NAME:
        return isSetName();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case COLLECTION:
          if (field.type == TType.I32) {
            this.collection = iprot.readI32();
            this.__isset_collection = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CAT:
          if (field.type == TType.I32) {
            this.cat = iprot.readI32();
            this.__isset_cat = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NAME:
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_COLLECTION_FIELD_DESC);
    oprot.writeI32(this.collection);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_CAT_FIELD_DESC);
    oprot.writeI32(this.cat);
    oprot.writeFieldEnd();
    if (this.name != null) {
      oprot.writeFieldBegin(_NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("CategoryItem(");

    ret.write("collection:");
    ret.write(this.collection);

    ret.write(", ");
    ret.write("cat:");
    ret.write(this.cat);

    ret.write(", ");
    ret.write("name:");
    if (this.name == null) {
      ret.write("null");
    } else {
      ret.write(this.name);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

