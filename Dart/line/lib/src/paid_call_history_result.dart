/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.paid_call_history_result;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class PaidCallHistoryResult implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("PaidCallHistoryResult");
  static final TField _HISTORYS_FIELD_DESC = new TField("historys", TType.LIST, 1);
  static final TField _HAS_NEXT_FIELD_DESC = new TField("hasNext", TType.BOOL, 2);

  List<PaidCallHistory> _historys;
  static const int HISTORYS = 1;
  bool _hasNext = false;
  static const int HASNEXT = 2;

  bool __isset_hasNext = false;

  PaidCallHistoryResult() {
  }

  // historys
  List<PaidCallHistory> get historys => this._historys;

  set historys(List<PaidCallHistory> historys) {
    this._historys = historys;
  }

  bool isSetHistorys() => this.historys != null;

  unsetHistorys() {
    this.historys = null;
  }

  // hasNext
  bool get hasNext => this._hasNext;

  set hasNext(bool hasNext) {
    this._hasNext = hasNext;
    this.__isset_hasNext = true;
  }

  bool isSetHasNext() => this.__isset_hasNext;

  unsetHasNext() {
    this.__isset_hasNext = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case HISTORYS:
        return this.historys;
      case HASNEXT:
        return this.hasNext;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case HISTORYS:
        if (value == null) {
          unsetHistorys();
        } else {
          this.historys = value;
        }
        break;

      case HASNEXT:
        if (value == null) {
          unsetHasNext();
        } else {
          this.hasNext = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case HISTORYS:
        return isSetHistorys();
      case HASNEXT:
        return isSetHasNext();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case HISTORYS:
          if (field.type == TType.LIST) {
            {
              TList _list16 = iprot.readListBegin();
              this.historys = new List<PaidCallHistory>();
              for (int _i17 = 0; _i17 < _list16.length; ++_i17) {
                PaidCallHistory _elem18;
                _elem18 = new PaidCallHistory();
                _elem18.read(iprot);
                this.historys.add(_elem18);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case HASNEXT:
          if (field.type == TType.BOOL) {
            this.hasNext = iprot.readBool();
            this.__isset_hasNext = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.historys != null) {
      oprot.writeFieldBegin(_HISTORYS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.historys.length));
        for (var elem19 in this.historys) {
          elem19.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_HAS_NEXT_FIELD_DESC);
    oprot.writeBool(this.hasNext);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("PaidCallHistoryResult(");

    ret.write("historys:");
    if (this.historys == null) {
      ret.write("null");
    } else {
      ret.write(this.historys);
    }

    ret.write(", ");
    ret.write("hasNext:");
    ret.write(this.hasNext);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

