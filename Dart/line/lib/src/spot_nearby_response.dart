/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.spot_nearby_response;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class SpotNearbyResponse implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("SpotNearbyResponse");
  static final TField _SPOT_NEARBY_ITEMS_FIELD_DESC = new TField("spotNearbyItems", TType.LIST, 1);

  List<SpotNearbyItem> _spotNearbyItems;
  static const int SPOTNEARBYITEMS = 1;


  SpotNearbyResponse() {
  }

  // spotNearbyItems
  List<SpotNearbyItem> get spotNearbyItems => this._spotNearbyItems;

  set spotNearbyItems(List<SpotNearbyItem> spotNearbyItems) {
    this._spotNearbyItems = spotNearbyItems;
  }

  bool isSetSpotNearbyItems() => this.spotNearbyItems != null;

  unsetSpotNearbyItems() {
    this.spotNearbyItems = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SPOTNEARBYITEMS:
        return this.spotNearbyItems;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SPOTNEARBYITEMS:
        if (value == null) {
          unsetSpotNearbyItems();
        } else {
          this.spotNearbyItems = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SPOTNEARBYITEMS:
        return isSetSpotNearbyItems();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SPOTNEARBYITEMS:
          if (field.type == TType.LIST) {
            {
              TList _list8 = iprot.readListBegin();
              this.spotNearbyItems = new List<SpotNearbyItem>();
              for (int _i9 = 0; _i9 < _list8.length; ++_i9) {
                SpotNearbyItem _elem10;
                _elem10 = new SpotNearbyItem();
                _elem10.read(iprot);
                this.spotNearbyItems.add(_elem10);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.spotNearbyItems != null) {
      oprot.writeFieldBegin(_SPOT_NEARBY_ITEMS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.spotNearbyItems.length));
        for (var elem11 in this.spotNearbyItems) {
          elem11.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("SpotNearbyResponse(");

    ret.write("spotNearbyItems:");
    if (this.spotNearbyItems == null) {
      ret.write("null");
    } else {
      ret.write(this.spotNearbyItems);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

