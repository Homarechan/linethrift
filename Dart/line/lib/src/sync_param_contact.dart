/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.sync_param_contact;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class SyncParamContact implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("SyncParamContact");
  static final TField _SYNC_PARAM_MID_FIELD_DESC = new TField("syncParamMid", TType.STRUCT, 1);
  static final TField _CONTACT_STATUS_FIELD_DESC = new TField("contactStatus", TType.I32, 2);

  SyncParamMid _syncParamMid;
  static const int SYNCPARAMMID = 1;
  int _contactStatus;
  static const int CONTACTSTATUS = 2;

  bool __isset_contactStatus = false;

  SyncParamContact() {
  }

  // syncParamMid
  SyncParamMid get syncParamMid => this._syncParamMid;

  set syncParamMid(SyncParamMid syncParamMid) {
    this._syncParamMid = syncParamMid;
  }

  bool isSetSyncParamMid() => this.syncParamMid != null;

  unsetSyncParamMid() {
    this.syncParamMid = null;
  }

  // contactStatus
  int get contactStatus => this._contactStatus;

  set contactStatus(int contactStatus) {
    this._contactStatus = contactStatus;
    this.__isset_contactStatus = true;
  }

  bool isSetContactStatus() => this.__isset_contactStatus;

  unsetContactStatus() {
    this.__isset_contactStatus = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SYNCPARAMMID:
        return this.syncParamMid;
      case CONTACTSTATUS:
        return this.contactStatus;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SYNCPARAMMID:
        if (value == null) {
          unsetSyncParamMid();
        } else {
          this.syncParamMid = value;
        }
        break;

      case CONTACTSTATUS:
        if (value == null) {
          unsetContactStatus();
        } else {
          this.contactStatus = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SYNCPARAMMID:
        return isSetSyncParamMid();
      case CONTACTSTATUS:
        return isSetContactStatus();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SYNCPARAMMID:
          if (field.type == TType.STRUCT) {
            this.syncParamMid = new SyncParamMid();
            this.syncParamMid.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CONTACTSTATUS:
          if (field.type == TType.I32) {
            this.contactStatus = iprot.readI32();
            this.__isset_contactStatus = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.syncParamMid != null) {
      oprot.writeFieldBegin(_SYNC_PARAM_MID_FIELD_DESC);
      this.syncParamMid.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_CONTACT_STATUS_FIELD_DESC);
    oprot.writeI32(this.contactStatus);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("SyncParamContact(");

    ret.write("syncParamMid:");
    if (this.syncParamMid == null) {
      ret.write("null");
    } else {
      ret.write(this.syncParamMid);
    }

    ret.write(", ");
    ret.write("contactStatus:");
    String contactStatus_name = ContactStatus.VALUES_TO_NAMES[this.contactStatus];
    if (contactStatus_name != null) {
      ret.write(contactStatus_name);
      ret.write(" (");
    }
    ret.write(this.contactStatus);
    if (contactStatus_name != null) {
      ret.write(")");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetContactStatus() && !ContactStatus.VALID_VALUES.contains(contactStatus)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'contactStatus' has been assigned the invalid value $contactStatus");
    }
  }

}

