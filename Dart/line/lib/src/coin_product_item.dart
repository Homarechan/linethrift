/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.coin_product_item;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class CoinProductItem implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("CoinProductItem");
  static final TField _ITEM_ID_FIELD_DESC = new TField("itemId", TType.STRING, 1);
  static final TField _COIN_FIELD_DESC = new TField("coin", TType.I32, 2);
  static final TField _FREE_COIN_FIELD_DESC = new TField("freeCoin", TType.I32, 3);
  static final TField _CURRENCY_FIELD_DESC = new TField("currency", TType.STRING, 5);
  static final TField _PRICE_FIELD_DESC = new TField("price", TType.STRING, 6);
  static final TField _DISPLAY_PRICE_FIELD_DESC = new TField("displayPrice", TType.STRING, 7);
  static final TField _NAME_FIELD_DESC = new TField("name", TType.STRING, 8);
  static final TField _DESC_FIELD_DESC = new TField("desc", TType.STRING, 9);

  String _itemId;
  static const int ITEMID = 1;
  int _coin = 0;
  static const int COIN = 2;
  int _freeCoin = 0;
  static const int FREECOIN = 3;
  String _currency;
  static const int CURRENCY = 5;
  String _price;
  static const int PRICE = 6;
  String _displayPrice;
  static const int DISPLAYPRICE = 7;
  String _name;
  static const int NAME = 8;
  String _desc;
  static const int DESC = 9;

  bool __isset_coin = false;
  bool __isset_freeCoin = false;

  CoinProductItem() {
  }

  // itemId
  String get itemId => this._itemId;

  set itemId(String itemId) {
    this._itemId = itemId;
  }

  bool isSetItemId() => this.itemId != null;

  unsetItemId() {
    this.itemId = null;
  }

  // coin
  int get coin => this._coin;

  set coin(int coin) {
    this._coin = coin;
    this.__isset_coin = true;
  }

  bool isSetCoin() => this.__isset_coin;

  unsetCoin() {
    this.__isset_coin = false;
  }

  // freeCoin
  int get freeCoin => this._freeCoin;

  set freeCoin(int freeCoin) {
    this._freeCoin = freeCoin;
    this.__isset_freeCoin = true;
  }

  bool isSetFreeCoin() => this.__isset_freeCoin;

  unsetFreeCoin() {
    this.__isset_freeCoin = false;
  }

  // currency
  String get currency => this._currency;

  set currency(String currency) {
    this._currency = currency;
  }

  bool isSetCurrency() => this.currency != null;

  unsetCurrency() {
    this.currency = null;
  }

  // price
  String get price => this._price;

  set price(String price) {
    this._price = price;
  }

  bool isSetPrice() => this.price != null;

  unsetPrice() {
    this.price = null;
  }

  // displayPrice
  String get displayPrice => this._displayPrice;

  set displayPrice(String displayPrice) {
    this._displayPrice = displayPrice;
  }

  bool isSetDisplayPrice() => this.displayPrice != null;

  unsetDisplayPrice() {
    this.displayPrice = null;
  }

  // name
  String get name => this._name;

  set name(String name) {
    this._name = name;
  }

  bool isSetName() => this.name != null;

  unsetName() {
    this.name = null;
  }

  // desc
  String get desc => this._desc;

  set desc(String desc) {
    this._desc = desc;
  }

  bool isSetDesc() => this.desc != null;

  unsetDesc() {
    this.desc = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case ITEMID:
        return this.itemId;
      case COIN:
        return this.coin;
      case FREECOIN:
        return this.freeCoin;
      case CURRENCY:
        return this.currency;
      case PRICE:
        return this.price;
      case DISPLAYPRICE:
        return this.displayPrice;
      case NAME:
        return this.name;
      case DESC:
        return this.desc;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case ITEMID:
        if (value == null) {
          unsetItemId();
        } else {
          this.itemId = value;
        }
        break;

      case COIN:
        if (value == null) {
          unsetCoin();
        } else {
          this.coin = value;
        }
        break;

      case FREECOIN:
        if (value == null) {
          unsetFreeCoin();
        } else {
          this.freeCoin = value;
        }
        break;

      case CURRENCY:
        if (value == null) {
          unsetCurrency();
        } else {
          this.currency = value;
        }
        break;

      case PRICE:
        if (value == null) {
          unsetPrice();
        } else {
          this.price = value;
        }
        break;

      case DISPLAYPRICE:
        if (value == null) {
          unsetDisplayPrice();
        } else {
          this.displayPrice = value;
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          this.name = value;
        }
        break;

      case DESC:
        if (value == null) {
          unsetDesc();
        } else {
          this.desc = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case ITEMID:
        return isSetItemId();
      case COIN:
        return isSetCoin();
      case FREECOIN:
        return isSetFreeCoin();
      case CURRENCY:
        return isSetCurrency();
      case PRICE:
        return isSetPrice();
      case DISPLAYPRICE:
        return isSetDisplayPrice();
      case NAME:
        return isSetName();
      case DESC:
        return isSetDesc();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ITEMID:
          if (field.type == TType.STRING) {
            this.itemId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COIN:
          if (field.type == TType.I32) {
            this.coin = iprot.readI32();
            this.__isset_coin = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FREECOIN:
          if (field.type == TType.I32) {
            this.freeCoin = iprot.readI32();
            this.__isset_freeCoin = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CURRENCY:
          if (field.type == TType.STRING) {
            this.currency = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PRICE:
          if (field.type == TType.STRING) {
            this.price = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DISPLAYPRICE:
          if (field.type == TType.STRING) {
            this.displayPrice = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NAME:
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DESC:
          if (field.type == TType.STRING) {
            this.desc = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.itemId != null) {
      oprot.writeFieldBegin(_ITEM_ID_FIELD_DESC);
      oprot.writeString(this.itemId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_COIN_FIELD_DESC);
    oprot.writeI32(this.coin);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_FREE_COIN_FIELD_DESC);
    oprot.writeI32(this.freeCoin);
    oprot.writeFieldEnd();
    if (this.currency != null) {
      oprot.writeFieldBegin(_CURRENCY_FIELD_DESC);
      oprot.writeString(this.currency);
      oprot.writeFieldEnd();
    }
    if (this.price != null) {
      oprot.writeFieldBegin(_PRICE_FIELD_DESC);
      oprot.writeString(this.price);
      oprot.writeFieldEnd();
    }
    if (this.displayPrice != null) {
      oprot.writeFieldBegin(_DISPLAY_PRICE_FIELD_DESC);
      oprot.writeString(this.displayPrice);
      oprot.writeFieldEnd();
    }
    if (this.name != null) {
      oprot.writeFieldBegin(_NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.desc != null) {
      oprot.writeFieldBegin(_DESC_FIELD_DESC);
      oprot.writeString(this.desc);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("CoinProductItem(");

    ret.write("itemId:");
    if (this.itemId == null) {
      ret.write("null");
    } else {
      ret.write(this.itemId);
    }

    ret.write(", ");
    ret.write("coin:");
    ret.write(this.coin);

    ret.write(", ");
    ret.write("freeCoin:");
    ret.write(this.freeCoin);

    ret.write(", ");
    ret.write("currency:");
    if (this.currency == null) {
      ret.write("null");
    } else {
      ret.write(this.currency);
    }

    ret.write(", ");
    ret.write("price:");
    if (this.price == null) {
      ret.write("null");
    } else {
      ret.write(this.price);
    }

    ret.write(", ");
    ret.write("displayPrice:");
    if (this.displayPrice == null) {
      ret.write("null");
    } else {
      ret.write(this.displayPrice);
    }

    ret.write(", ");
    ret.write("name:");
    if (this.name == null) {
      ret.write("null");
    } else {
      ret.write(this.name);
    }

    ret.write(", ");
    ret.write("desc:");
    if (this.desc == null) {
      ret.write("null");
    } else {
      ret.write(this.desc);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

