/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.sticker_property;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class StickerProperty implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("StickerProperty");
  static final TField _HAS_ANIMATION_FIELD_DESC = new TField("hasAnimation", TType.BOOL, 1);
  static final TField _HAS_SOUND_FIELD_DESC = new TField("hasSound", TType.BOOL, 2);
  static final TField _HAS_POPUP_FIELD_DESC = new TField("hasPopup", TType.BOOL, 3);
  static final TField _STICKER_RESOURCE_TYPE_FIELD_DESC = new TField("stickerResourceType", TType.I32, 4);
  static final TField _STICKER_OPTIONS_FIELD_DESC = new TField("stickerOptions", TType.STRING, 5);
  static final TField _COMPACT_STICKER_OPTIONS_FIELD_DESC = new TField("compactStickerOptions", TType.I32, 6);
  static final TField _STICKER_HASH_FIELD_DESC = new TField("stickerHash", TType.STRING, 7);
  static final TField _STICKER_IDS_FIELD_DESC = new TField("stickerIds", TType.SET, 8);

  bool _hasAnimation = false;
  static const int HASANIMATION = 1;
  bool _hasSound = false;
  static const int HASSOUND = 2;
  bool _hasPopup = false;
  static const int HASPOPUP = 3;
  int _stickerResourceType;
  static const int STICKERRESOURCETYPE = 4;
  String _stickerOptions;
  static const int STICKEROPTIONS = 5;
  int _compactStickerOptions = 0;
  static const int COMPACTSTICKEROPTIONS = 6;
  String _stickerHash;
  static const int STICKERHASH = 7;
  Set<String> _stickerIds;
  static const int STICKERIDS = 8;

  bool __isset_hasAnimation = false;
  bool __isset_hasSound = false;
  bool __isset_hasPopup = false;
  bool __isset_stickerResourceType = false;
  bool __isset_compactStickerOptions = false;

  StickerProperty() {
  }

  // hasAnimation
  bool get hasAnimation => this._hasAnimation;

  set hasAnimation(bool hasAnimation) {
    this._hasAnimation = hasAnimation;
    this.__isset_hasAnimation = true;
  }

  bool isSetHasAnimation() => this.__isset_hasAnimation;

  unsetHasAnimation() {
    this.__isset_hasAnimation = false;
  }

  // hasSound
  bool get hasSound => this._hasSound;

  set hasSound(bool hasSound) {
    this._hasSound = hasSound;
    this.__isset_hasSound = true;
  }

  bool isSetHasSound() => this.__isset_hasSound;

  unsetHasSound() {
    this.__isset_hasSound = false;
  }

  // hasPopup
  bool get hasPopup => this._hasPopup;

  set hasPopup(bool hasPopup) {
    this._hasPopup = hasPopup;
    this.__isset_hasPopup = true;
  }

  bool isSetHasPopup() => this.__isset_hasPopup;

  unsetHasPopup() {
    this.__isset_hasPopup = false;
  }

  // stickerResourceType
  int get stickerResourceType => this._stickerResourceType;

  set stickerResourceType(int stickerResourceType) {
    this._stickerResourceType = stickerResourceType;
    this.__isset_stickerResourceType = true;
  }

  bool isSetStickerResourceType() => this.__isset_stickerResourceType;

  unsetStickerResourceType() {
    this.__isset_stickerResourceType = false;
  }

  // stickerOptions
  String get stickerOptions => this._stickerOptions;

  set stickerOptions(String stickerOptions) {
    this._stickerOptions = stickerOptions;
  }

  bool isSetStickerOptions() => this.stickerOptions != null;

  unsetStickerOptions() {
    this.stickerOptions = null;
  }

  // compactStickerOptions
  int get compactStickerOptions => this._compactStickerOptions;

  set compactStickerOptions(int compactStickerOptions) {
    this._compactStickerOptions = compactStickerOptions;
    this.__isset_compactStickerOptions = true;
  }

  bool isSetCompactStickerOptions() => this.__isset_compactStickerOptions;

  unsetCompactStickerOptions() {
    this.__isset_compactStickerOptions = false;
  }

  // stickerHash
  String get stickerHash => this._stickerHash;

  set stickerHash(String stickerHash) {
    this._stickerHash = stickerHash;
  }

  bool isSetStickerHash() => this.stickerHash != null;

  unsetStickerHash() {
    this.stickerHash = null;
  }

  // stickerIds
  Set<String> get stickerIds => this._stickerIds;

  set stickerIds(Set<String> stickerIds) {
    this._stickerIds = stickerIds;
  }

  bool isSetStickerIds() => this.stickerIds != null;

  unsetStickerIds() {
    this.stickerIds = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case HASANIMATION:
        return this.hasAnimation;
      case HASSOUND:
        return this.hasSound;
      case HASPOPUP:
        return this.hasPopup;
      case STICKERRESOURCETYPE:
        return this.stickerResourceType;
      case STICKEROPTIONS:
        return this.stickerOptions;
      case COMPACTSTICKEROPTIONS:
        return this.compactStickerOptions;
      case STICKERHASH:
        return this.stickerHash;
      case STICKERIDS:
        return this.stickerIds;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case HASANIMATION:
        if (value == null) {
          unsetHasAnimation();
        } else {
          this.hasAnimation = value;
        }
        break;

      case HASSOUND:
        if (value == null) {
          unsetHasSound();
        } else {
          this.hasSound = value;
        }
        break;

      case HASPOPUP:
        if (value == null) {
          unsetHasPopup();
        } else {
          this.hasPopup = value;
        }
        break;

      case STICKERRESOURCETYPE:
        if (value == null) {
          unsetStickerResourceType();
        } else {
          this.stickerResourceType = value;
        }
        break;

      case STICKEROPTIONS:
        if (value == null) {
          unsetStickerOptions();
        } else {
          this.stickerOptions = value;
        }
        break;

      case COMPACTSTICKEROPTIONS:
        if (value == null) {
          unsetCompactStickerOptions();
        } else {
          this.compactStickerOptions = value;
        }
        break;

      case STICKERHASH:
        if (value == null) {
          unsetStickerHash();
        } else {
          this.stickerHash = value;
        }
        break;

      case STICKERIDS:
        if (value == null) {
          unsetStickerIds();
        } else {
          this.stickerIds = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case HASANIMATION:
        return isSetHasAnimation();
      case HASSOUND:
        return isSetHasSound();
      case HASPOPUP:
        return isSetHasPopup();
      case STICKERRESOURCETYPE:
        return isSetStickerResourceType();
      case STICKEROPTIONS:
        return isSetStickerOptions();
      case COMPACTSTICKEROPTIONS:
        return isSetCompactStickerOptions();
      case STICKERHASH:
        return isSetStickerHash();
      case STICKERIDS:
        return isSetStickerIds();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case HASANIMATION:
          if (field.type == TType.BOOL) {
            this.hasAnimation = iprot.readBool();
            this.__isset_hasAnimation = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case HASSOUND:
          if (field.type == TType.BOOL) {
            this.hasSound = iprot.readBool();
            this.__isset_hasSound = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case HASPOPUP:
          if (field.type == TType.BOOL) {
            this.hasPopup = iprot.readBool();
            this.__isset_hasPopup = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STICKERRESOURCETYPE:
          if (field.type == TType.I32) {
            this.stickerResourceType = iprot.readI32();
            this.__isset_stickerResourceType = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STICKEROPTIONS:
          if (field.type == TType.STRING) {
            this.stickerOptions = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COMPACTSTICKEROPTIONS:
          if (field.type == TType.I32) {
            this.compactStickerOptions = iprot.readI32();
            this.__isset_compactStickerOptions = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STICKERHASH:
          if (field.type == TType.STRING) {
            this.stickerHash = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STICKERIDS:
          if (field.type == TType.SET) {
            {
              TSet _set44 = iprot.readSetBegin();
              this.stickerIds = new Set<String>();
              for (int _i45 = 0; _i45 < _set44.length; ++_i45) {
                String _elem46;
                _elem46 = iprot.readString();
                this.stickerIds.add(_elem46);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_HAS_ANIMATION_FIELD_DESC);
    oprot.writeBool(this.hasAnimation);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_HAS_SOUND_FIELD_DESC);
    oprot.writeBool(this.hasSound);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_HAS_POPUP_FIELD_DESC);
    oprot.writeBool(this.hasPopup);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_STICKER_RESOURCE_TYPE_FIELD_DESC);
    oprot.writeI32(this.stickerResourceType);
    oprot.writeFieldEnd();
    if (this.stickerOptions != null) {
      oprot.writeFieldBegin(_STICKER_OPTIONS_FIELD_DESC);
      oprot.writeString(this.stickerOptions);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_COMPACT_STICKER_OPTIONS_FIELD_DESC);
    oprot.writeI32(this.compactStickerOptions);
    oprot.writeFieldEnd();
    if (this.stickerHash != null) {
      oprot.writeFieldBegin(_STICKER_HASH_FIELD_DESC);
      oprot.writeString(this.stickerHash);
      oprot.writeFieldEnd();
    }
    if (this.stickerIds != null) {
      oprot.writeFieldBegin(_STICKER_IDS_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.STRING, this.stickerIds.length));
        for (var elem47 in this.stickerIds) {
          oprot.writeString(elem47);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("StickerProperty(");

    ret.write("hasAnimation:");
    ret.write(this.hasAnimation);

    ret.write(", ");
    ret.write("hasSound:");
    ret.write(this.hasSound);

    ret.write(", ");
    ret.write("hasPopup:");
    ret.write(this.hasPopup);

    ret.write(", ");
    ret.write("stickerResourceType:");
    String stickerResourceType_name = SRType.VALUES_TO_NAMES[this.stickerResourceType];
    if (stickerResourceType_name != null) {
      ret.write(stickerResourceType_name);
      ret.write(" (");
    }
    ret.write(this.stickerResourceType);
    if (stickerResourceType_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("stickerOptions:");
    if (this.stickerOptions == null) {
      ret.write("null");
    } else {
      ret.write(this.stickerOptions);
    }

    ret.write(", ");
    ret.write("compactStickerOptions:");
    ret.write(this.compactStickerOptions);

    ret.write(", ");
    ret.write("stickerHash:");
    if (this.stickerHash == null) {
      ret.write("null");
    } else {
      ret.write(this.stickerHash);
    }

    ret.write(", ");
    ret.write("stickerIds:");
    if (this.stickerIds == null) {
      ret.write("null");
    } else {
      ret.write(this.stickerIds);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetStickerResourceType() && !SRType.VALID_VALUES.contains(stickerResourceType)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'stickerResourceType' has been assigned the invalid value $stickerResourceType");
    }
  }

}

