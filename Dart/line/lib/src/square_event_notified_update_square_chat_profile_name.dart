/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.square_event_notified_update_square_chat_profile_name;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class SquareEventNotifiedUpdateSquareChatProfileName implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("SquareEventNotifiedUpdateSquareChatProfileName");
  static final TField _SQUARE_CHAT_MID_FIELD_DESC = new TField("squareChatMid", TType.STRING, 1);
  static final TField _EDITOR_FIELD_DESC = new TField("editor", TType.STRUCT, 2);
  static final TField _UPDATED_CHAT_NAME_FIELD_DESC = new TField("updatedChatName", TType.STRING, 3);

  String _squareChatMid;
  static const int SQUARECHATMID = 1;
  SquareMember _editor;
  static const int EDITOR = 2;
  String _updatedChatName;
  static const int UPDATEDCHATNAME = 3;


  SquareEventNotifiedUpdateSquareChatProfileName() {
  }

  // squareChatMid
  String get squareChatMid => this._squareChatMid;

  set squareChatMid(String squareChatMid) {
    this._squareChatMid = squareChatMid;
  }

  bool isSetSquareChatMid() => this.squareChatMid != null;

  unsetSquareChatMid() {
    this.squareChatMid = null;
  }

  // editor
  SquareMember get editor => this._editor;

  set editor(SquareMember editor) {
    this._editor = editor;
  }

  bool isSetEditor() => this.editor != null;

  unsetEditor() {
    this.editor = null;
  }

  // updatedChatName
  String get updatedChatName => this._updatedChatName;

  set updatedChatName(String updatedChatName) {
    this._updatedChatName = updatedChatName;
  }

  bool isSetUpdatedChatName() => this.updatedChatName != null;

  unsetUpdatedChatName() {
    this.updatedChatName = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SQUARECHATMID:
        return this.squareChatMid;
      case EDITOR:
        return this.editor;
      case UPDATEDCHATNAME:
        return this.updatedChatName;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SQUARECHATMID:
        if (value == null) {
          unsetSquareChatMid();
        } else {
          this.squareChatMid = value;
        }
        break;

      case EDITOR:
        if (value == null) {
          unsetEditor();
        } else {
          this.editor = value;
        }
        break;

      case UPDATEDCHATNAME:
        if (value == null) {
          unsetUpdatedChatName();
        } else {
          this.updatedChatName = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SQUARECHATMID:
        return isSetSquareChatMid();
      case EDITOR:
        return isSetEditor();
      case UPDATEDCHATNAME:
        return isSetUpdatedChatName();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SQUARECHATMID:
          if (field.type == TType.STRING) {
            this.squareChatMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EDITOR:
          if (field.type == TType.STRUCT) {
            this.editor = new SquareMember();
            this.editor.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case UPDATEDCHATNAME:
          if (field.type == TType.STRING) {
            this.updatedChatName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.squareChatMid != null) {
      oprot.writeFieldBegin(_SQUARE_CHAT_MID_FIELD_DESC);
      oprot.writeString(this.squareChatMid);
      oprot.writeFieldEnd();
    }
    if (this.editor != null) {
      oprot.writeFieldBegin(_EDITOR_FIELD_DESC);
      this.editor.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.updatedChatName != null) {
      oprot.writeFieldBegin(_UPDATED_CHAT_NAME_FIELD_DESC);
      oprot.writeString(this.updatedChatName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("SquareEventNotifiedUpdateSquareChatProfileName(");

    ret.write("squareChatMid:");
    if (this.squareChatMid == null) {
      ret.write("null");
    } else {
      ret.write(this.squareChatMid);
    }

    ret.write(", ");
    ret.write("editor:");
    if (this.editor == null) {
      ret.write("null");
    } else {
      ret.write(this.editor);
    }

    ret.write(", ");
    ret.write("updatedChatName:");
    if (this.updatedChatName == null) {
      ret.write("null");
    } else {
      ret.write(this.updatedChatName);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

