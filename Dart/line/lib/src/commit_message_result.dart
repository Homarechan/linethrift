/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.commit_message_result;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class CommitMessageResult implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("CommitMessageResult");
  static final TField _MESSAGE_FIELD_DESC = new TField("message", TType.STRUCT, 1);
  static final TField _CODE_FIELD_DESC = new TField("code", TType.I32, 2);
  static final TField _REASON_FIELD_DESC = new TField("reason", TType.STRING, 3);
  static final TField _SUCCESS_COUNT_FIELD_DESC = new TField("successCount", TType.I64, 4);
  static final TField _FAIL_COUNT_FIELD_DESC = new TField("failCount", TType.I64, 5);
  static final TField _UNREGISTER_COUNT_FIELD_DESC = new TField("unregisterCount", TType.I64, 6);
  static final TField _BLOCK_COUNT_FIELD_DESC = new TField("blockCount", TType.I64, 7);

  Message _message;
  static const int MESSAGE = 1;
  int _code;
  static const int CODE = 2;
  String _reason;
  static const int REASON = 3;
  int _successCount = 0;
  static const int SUCCESSCOUNT = 4;
  int _failCount = 0;
  static const int FAILCOUNT = 5;
  int _unregisterCount = 0;
  static const int UNREGISTERCOUNT = 6;
  int _blockCount = 0;
  static const int BLOCKCOUNT = 7;

  bool __isset_code = false;
  bool __isset_successCount = false;
  bool __isset_failCount = false;
  bool __isset_unregisterCount = false;
  bool __isset_blockCount = false;

  CommitMessageResult() {
  }

  // message
  Message get message => this._message;

  set message(Message message) {
    this._message = message;
  }

  bool isSetMessage() => this.message != null;

  unsetMessage() {
    this.message = null;
  }

  // code
  int get code => this._code;

  set code(int code) {
    this._code = code;
    this.__isset_code = true;
  }

  bool isSetCode() => this.__isset_code;

  unsetCode() {
    this.__isset_code = false;
  }

  // reason
  String get reason => this._reason;

  set reason(String reason) {
    this._reason = reason;
  }

  bool isSetReason() => this.reason != null;

  unsetReason() {
    this.reason = null;
  }

  // successCount
  int get successCount => this._successCount;

  set successCount(int successCount) {
    this._successCount = successCount;
    this.__isset_successCount = true;
  }

  bool isSetSuccessCount() => this.__isset_successCount;

  unsetSuccessCount() {
    this.__isset_successCount = false;
  }

  // failCount
  int get failCount => this._failCount;

  set failCount(int failCount) {
    this._failCount = failCount;
    this.__isset_failCount = true;
  }

  bool isSetFailCount() => this.__isset_failCount;

  unsetFailCount() {
    this.__isset_failCount = false;
  }

  // unregisterCount
  int get unregisterCount => this._unregisterCount;

  set unregisterCount(int unregisterCount) {
    this._unregisterCount = unregisterCount;
    this.__isset_unregisterCount = true;
  }

  bool isSetUnregisterCount() => this.__isset_unregisterCount;

  unsetUnregisterCount() {
    this.__isset_unregisterCount = false;
  }

  // blockCount
  int get blockCount => this._blockCount;

  set blockCount(int blockCount) {
    this._blockCount = blockCount;
    this.__isset_blockCount = true;
  }

  bool isSetBlockCount() => this.__isset_blockCount;

  unsetBlockCount() {
    this.__isset_blockCount = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case MESSAGE:
        return this.message;
      case CODE:
        return this.code;
      case REASON:
        return this.reason;
      case SUCCESSCOUNT:
        return this.successCount;
      case FAILCOUNT:
        return this.failCount;
      case UNREGISTERCOUNT:
        return this.unregisterCount;
      case BLOCKCOUNT:
        return this.blockCount;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case MESSAGE:
        if (value == null) {
          unsetMessage();
        } else {
          this.message = value;
        }
        break;

      case CODE:
        if (value == null) {
          unsetCode();
        } else {
          this.code = value;
        }
        break;

      case REASON:
        if (value == null) {
          unsetReason();
        } else {
          this.reason = value;
        }
        break;

      case SUCCESSCOUNT:
        if (value == null) {
          unsetSuccessCount();
        } else {
          this.successCount = value;
        }
        break;

      case FAILCOUNT:
        if (value == null) {
          unsetFailCount();
        } else {
          this.failCount = value;
        }
        break;

      case UNREGISTERCOUNT:
        if (value == null) {
          unsetUnregisterCount();
        } else {
          this.unregisterCount = value;
        }
        break;

      case BLOCKCOUNT:
        if (value == null) {
          unsetBlockCount();
        } else {
          this.blockCount = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case MESSAGE:
        return isSetMessage();
      case CODE:
        return isSetCode();
      case REASON:
        return isSetReason();
      case SUCCESSCOUNT:
        return isSetSuccessCount();
      case FAILCOUNT:
        return isSetFailCount();
      case UNREGISTERCOUNT:
        return isSetUnregisterCount();
      case BLOCKCOUNT:
        return isSetBlockCount();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case MESSAGE:
          if (field.type == TType.STRUCT) {
            this.message = new Message();
            this.message.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CODE:
          if (field.type == TType.I32) {
            this.code = iprot.readI32();
            this.__isset_code = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case REASON:
          if (field.type == TType.STRING) {
            this.reason = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SUCCESSCOUNT:
          if (field.type == TType.I64) {
            this.successCount = iprot.readI64();
            this.__isset_successCount = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FAILCOUNT:
          if (field.type == TType.I64) {
            this.failCount = iprot.readI64();
            this.__isset_failCount = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case UNREGISTERCOUNT:
          if (field.type == TType.I64) {
            this.unregisterCount = iprot.readI64();
            this.__isset_unregisterCount = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BLOCKCOUNT:
          if (field.type == TType.I64) {
            this.blockCount = iprot.readI64();
            this.__isset_blockCount = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.message != null) {
      oprot.writeFieldBegin(_MESSAGE_FIELD_DESC);
      this.message.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_CODE_FIELD_DESC);
    oprot.writeI32(this.code);
    oprot.writeFieldEnd();
    if (this.reason != null) {
      oprot.writeFieldBegin(_REASON_FIELD_DESC);
      oprot.writeString(this.reason);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_SUCCESS_COUNT_FIELD_DESC);
    oprot.writeI64(this.successCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_FAIL_COUNT_FIELD_DESC);
    oprot.writeI64(this.failCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_UNREGISTER_COUNT_FIELD_DESC);
    oprot.writeI64(this.unregisterCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_BLOCK_COUNT_FIELD_DESC);
    oprot.writeI64(this.blockCount);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("CommitMessageResult(");

    ret.write("message:");
    if (this.message == null) {
      ret.write("null");
    } else {
      ret.write(this.message);
    }

    ret.write(", ");
    ret.write("code:");
    String code_name = CommitMessageResultCode.VALUES_TO_NAMES[this.code];
    if (code_name != null) {
      ret.write(code_name);
      ret.write(" (");
    }
    ret.write(this.code);
    if (code_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("reason:");
    if (this.reason == null) {
      ret.write("null");
    } else {
      ret.write(this.reason);
    }

    ret.write(", ");
    ret.write("successCount:");
    ret.write(this.successCount);

    ret.write(", ");
    ret.write("failCount:");
    ret.write(this.failCount);

    ret.write(", ");
    ret.write("unregisterCount:");
    ret.write(this.unregisterCount);

    ret.write(", ");
    ret.write("blockCount:");
    ret.write(this.blockCount);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetCode() && !CommitMessageResultCode.VALID_VALUES.contains(code)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'code' has been assigned the invalid value $code");
    }
  }

}

