/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.square_event_notified_update_square_authority;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class SquareEventNotifiedUpdateSquareAuthority implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("SquareEventNotifiedUpdateSquareAuthority");
  static final TField _SQUARE_MID_FIELD_DESC = new TField("squareMid", TType.STRING, 1);
  static final TField _SQUARE_AUTHORITY_FIELD_DESC = new TField("squareAuthority", TType.STRUCT, 2);

  String _squareMid;
  static const int SQUAREMID = 1;
  SquareAuthority _squareAuthority;
  static const int SQUAREAUTHORITY = 2;


  SquareEventNotifiedUpdateSquareAuthority() {
  }

  // squareMid
  String get squareMid => this._squareMid;

  set squareMid(String squareMid) {
    this._squareMid = squareMid;
  }

  bool isSetSquareMid() => this.squareMid != null;

  unsetSquareMid() {
    this.squareMid = null;
  }

  // squareAuthority
  SquareAuthority get squareAuthority => this._squareAuthority;

  set squareAuthority(SquareAuthority squareAuthority) {
    this._squareAuthority = squareAuthority;
  }

  bool isSetSquareAuthority() => this.squareAuthority != null;

  unsetSquareAuthority() {
    this.squareAuthority = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SQUAREMID:
        return this.squareMid;
      case SQUAREAUTHORITY:
        return this.squareAuthority;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SQUAREMID:
        if (value == null) {
          unsetSquareMid();
        } else {
          this.squareMid = value;
        }
        break;

      case SQUAREAUTHORITY:
        if (value == null) {
          unsetSquareAuthority();
        } else {
          this.squareAuthority = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SQUAREMID:
        return isSetSquareMid();
      case SQUAREAUTHORITY:
        return isSetSquareAuthority();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SQUAREMID:
          if (field.type == TType.STRING) {
            this.squareMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SQUAREAUTHORITY:
          if (field.type == TType.STRUCT) {
            this.squareAuthority = new SquareAuthority();
            this.squareAuthority.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.squareMid != null) {
      oprot.writeFieldBegin(_SQUARE_MID_FIELD_DESC);
      oprot.writeString(this.squareMid);
      oprot.writeFieldEnd();
    }
    if (this.squareAuthority != null) {
      oprot.writeFieldBegin(_SQUARE_AUTHORITY_FIELD_DESC);
      this.squareAuthority.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("SquareEventNotifiedUpdateSquareAuthority(");

    ret.write("squareMid:");
    if (this.squareMid == null) {
      ret.write("null");
    } else {
      ret.write(this.squareMid);
    }

    ret.write(", ");
    ret.write("squareAuthority:");
    if (this.squareAuthority == null) {
      ret.write("null");
    } else {
      ret.write(this.squareAuthority);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

