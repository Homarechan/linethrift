/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.coin_history_condition;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class CoinHistoryCondition implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("CoinHistoryCondition");
  static final TField _START_FIELD_DESC = new TField("start", TType.I64, 1);
  static final TField _SIZE_FIELD_DESC = new TField("size", TType.I32, 2);
  static final TField _LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, 3);
  static final TField _EDDT_FIELD_DESC = new TField("eddt", TType.STRING, 4);
  static final TField _APP_STORE_CODE_FIELD_DESC = new TField("appStoreCode", TType.I32, 5);

  int _start = 0;
  static const int START = 1;
  int _size = 0;
  static const int SIZE = 2;
  String _language;
  static const int LANGUAGE = 3;
  String _eddt;
  static const int EDDT = 4;
  int _appStoreCode;
  static const int APPSTORECODE = 5;

  bool __isset_start = false;
  bool __isset_size = false;
  bool __isset_appStoreCode = false;

  CoinHistoryCondition() {
  }

  // start
  int get start => this._start;

  set start(int start) {
    this._start = start;
    this.__isset_start = true;
  }

  bool isSetStart() => this.__isset_start;

  unsetStart() {
    this.__isset_start = false;
  }

  // size
  int get size => this._size;

  set size(int size) {
    this._size = size;
    this.__isset_size = true;
  }

  bool isSetSize() => this.__isset_size;

  unsetSize() {
    this.__isset_size = false;
  }

  // language
  String get language => this._language;

  set language(String language) {
    this._language = language;
  }

  bool isSetLanguage() => this.language != null;

  unsetLanguage() {
    this.language = null;
  }

  // eddt
  String get eddt => this._eddt;

  set eddt(String eddt) {
    this._eddt = eddt;
  }

  bool isSetEddt() => this.eddt != null;

  unsetEddt() {
    this.eddt = null;
  }

  // appStoreCode
  int get appStoreCode => this._appStoreCode;

  set appStoreCode(int appStoreCode) {
    this._appStoreCode = appStoreCode;
    this.__isset_appStoreCode = true;
  }

  bool isSetAppStoreCode() => this.__isset_appStoreCode;

  unsetAppStoreCode() {
    this.__isset_appStoreCode = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case START:
        return this.start;
      case SIZE:
        return this.size;
      case LANGUAGE:
        return this.language;
      case EDDT:
        return this.eddt;
      case APPSTORECODE:
        return this.appStoreCode;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case START:
        if (value == null) {
          unsetStart();
        } else {
          this.start = value;
        }
        break;

      case SIZE:
        if (value == null) {
          unsetSize();
        } else {
          this.size = value;
        }
        break;

      case LANGUAGE:
        if (value == null) {
          unsetLanguage();
        } else {
          this.language = value;
        }
        break;

      case EDDT:
        if (value == null) {
          unsetEddt();
        } else {
          this.eddt = value;
        }
        break;

      case APPSTORECODE:
        if (value == null) {
          unsetAppStoreCode();
        } else {
          this.appStoreCode = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case START:
        return isSetStart();
      case SIZE:
        return isSetSize();
      case LANGUAGE:
        return isSetLanguage();
      case EDDT:
        return isSetEddt();
      case APPSTORECODE:
        return isSetAppStoreCode();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case START:
          if (field.type == TType.I64) {
            this.start = iprot.readI64();
            this.__isset_start = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SIZE:
          if (field.type == TType.I32) {
            this.size = iprot.readI32();
            this.__isset_size = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LANGUAGE:
          if (field.type == TType.STRING) {
            this.language = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EDDT:
          if (field.type == TType.STRING) {
            this.eddt = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case APPSTORECODE:
          if (field.type == TType.I32) {
            this.appStoreCode = iprot.readI32();
            this.__isset_appStoreCode = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_START_FIELD_DESC);
    oprot.writeI64(this.start);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_SIZE_FIELD_DESC);
    oprot.writeI32(this.size);
    oprot.writeFieldEnd();
    if (this.language != null) {
      oprot.writeFieldBegin(_LANGUAGE_FIELD_DESC);
      oprot.writeString(this.language);
      oprot.writeFieldEnd();
    }
    if (this.eddt != null) {
      oprot.writeFieldBegin(_EDDT_FIELD_DESC);
      oprot.writeString(this.eddt);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_APP_STORE_CODE_FIELD_DESC);
    oprot.writeI32(this.appStoreCode);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("CoinHistoryCondition(");

    ret.write("start:");
    ret.write(this.start);

    ret.write(", ");
    ret.write("size:");
    ret.write(this.size);

    ret.write(", ");
    ret.write("language:");
    if (this.language == null) {
      ret.write("null");
    } else {
      ret.write(this.language);
    }

    ret.write(", ");
    ret.write("eddt:");
    if (this.eddt == null) {
      ret.write("null");
    } else {
      ret.write(this.eddt);
    }

    ret.write(", ");
    ret.write("appStoreCode:");
    String appStoreCode_name = PaymentType.VALUES_TO_NAMES[this.appStoreCode];
    if (appStoreCode_name != null) {
      ret.write(appStoreCode_name);
      ret.write(" (");
    }
    ret.write(this.appStoreCode);
    if (appStoreCode_name != null) {
      ret.write(")");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetAppStoreCode() && !PaymentType.VALID_VALUES.contains(appStoreCode)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'appStoreCode' has been assigned the invalid value $appStoreCode");
    }
  }

}

