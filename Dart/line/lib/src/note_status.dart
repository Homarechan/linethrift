/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.note_status;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class NoteStatus implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("NoteStatus");
  static final TField _NOTE_COUNT_FIELD_DESC = new TField("noteCount", TType.I32, 1);
  static final TField _LATEST_CREATED_AT_FIELD_DESC = new TField("latestCreatedAt", TType.I64, 2);

  int _noteCount = 0;
  static const int NOTECOUNT = 1;
  int _latestCreatedAt = 0;
  static const int LATESTCREATEDAT = 2;

  bool __isset_noteCount = false;
  bool __isset_latestCreatedAt = false;

  NoteStatus() {
  }

  // noteCount
  int get noteCount => this._noteCount;

  set noteCount(int noteCount) {
    this._noteCount = noteCount;
    this.__isset_noteCount = true;
  }

  bool isSetNoteCount() => this.__isset_noteCount;

  unsetNoteCount() {
    this.__isset_noteCount = false;
  }

  // latestCreatedAt
  int get latestCreatedAt => this._latestCreatedAt;

  set latestCreatedAt(int latestCreatedAt) {
    this._latestCreatedAt = latestCreatedAt;
    this.__isset_latestCreatedAt = true;
  }

  bool isSetLatestCreatedAt() => this.__isset_latestCreatedAt;

  unsetLatestCreatedAt() {
    this.__isset_latestCreatedAt = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case NOTECOUNT:
        return this.noteCount;
      case LATESTCREATEDAT:
        return this.latestCreatedAt;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case NOTECOUNT:
        if (value == null) {
          unsetNoteCount();
        } else {
          this.noteCount = value;
        }
        break;

      case LATESTCREATEDAT:
        if (value == null) {
          unsetLatestCreatedAt();
        } else {
          this.latestCreatedAt = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case NOTECOUNT:
        return isSetNoteCount();
      case LATESTCREATEDAT:
        return isSetLatestCreatedAt();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case NOTECOUNT:
          if (field.type == TType.I32) {
            this.noteCount = iprot.readI32();
            this.__isset_noteCount = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LATESTCREATEDAT:
          if (field.type == TType.I64) {
            this.latestCreatedAt = iprot.readI64();
            this.__isset_latestCreatedAt = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_NOTE_COUNT_FIELD_DESC);
    oprot.writeI32(this.noteCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_LATEST_CREATED_AT_FIELD_DESC);
    oprot.writeI64(this.latestCreatedAt);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("NoteStatus(");

    ret.write("noteCount:");
    ret.write(this.noteCount);

    ret.write(", ");
    ret.write("latestCreatedAt:");
    ret.write(this.latestCreatedAt);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

