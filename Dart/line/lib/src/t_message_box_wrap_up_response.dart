/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.t_message_box_wrap_up_response;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class TMessageBoxWrapUpResponse implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("TMessageBoxWrapUpResponse");
  static final TField _MESSAGE_BOX_WRAP_UP_LIST_FIELD_DESC = new TField("messageBoxWrapUpList", TType.LIST, 1);
  static final TField _TOTAL_SIZE_FIELD_DESC = new TField("totalSize", TType.I32, 2);

  List<TMessageBoxWrapUp> _messageBoxWrapUpList;
  static const int MESSAGEBOXWRAPUPLIST = 1;
  int _totalSize = 0;
  static const int TOTALSIZE = 2;

  bool __isset_totalSize = false;

  TMessageBoxWrapUpResponse() {
  }

  // messageBoxWrapUpList
  List<TMessageBoxWrapUp> get messageBoxWrapUpList => this._messageBoxWrapUpList;

  set messageBoxWrapUpList(List<TMessageBoxWrapUp> messageBoxWrapUpList) {
    this._messageBoxWrapUpList = messageBoxWrapUpList;
  }

  bool isSetMessageBoxWrapUpList() => this.messageBoxWrapUpList != null;

  unsetMessageBoxWrapUpList() {
    this.messageBoxWrapUpList = null;
  }

  // totalSize
  int get totalSize => this._totalSize;

  set totalSize(int totalSize) {
    this._totalSize = totalSize;
    this.__isset_totalSize = true;
  }

  bool isSetTotalSize() => this.__isset_totalSize;

  unsetTotalSize() {
    this.__isset_totalSize = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case MESSAGEBOXWRAPUPLIST:
        return this.messageBoxWrapUpList;
      case TOTALSIZE:
        return this.totalSize;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case MESSAGEBOXWRAPUPLIST:
        if (value == null) {
          unsetMessageBoxWrapUpList();
        } else {
          this.messageBoxWrapUpList = value;
        }
        break;

      case TOTALSIZE:
        if (value == null) {
          unsetTotalSize();
        } else {
          this.totalSize = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case MESSAGEBOXWRAPUPLIST:
        return isSetMessageBoxWrapUpList();
      case TOTALSIZE:
        return isSetTotalSize();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case MESSAGEBOXWRAPUPLIST:
          if (field.type == TType.LIST) {
            {
              TList _list274 = iprot.readListBegin();
              this.messageBoxWrapUpList = new List<TMessageBoxWrapUp>();
              for (int _i275 = 0; _i275 < _list274.length; ++_i275) {
                TMessageBoxWrapUp _elem276;
                _elem276 = new TMessageBoxWrapUp();
                _elem276.read(iprot);
                this.messageBoxWrapUpList.add(_elem276);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TOTALSIZE:
          if (field.type == TType.I32) {
            this.totalSize = iprot.readI32();
            this.__isset_totalSize = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.messageBoxWrapUpList != null) {
      oprot.writeFieldBegin(_MESSAGE_BOX_WRAP_UP_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.messageBoxWrapUpList.length));
        for (var elem277 in this.messageBoxWrapUpList) {
          elem277.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_TOTAL_SIZE_FIELD_DESC);
    oprot.writeI32(this.totalSize);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("TMessageBoxWrapUpResponse(");

    ret.write("messageBoxWrapUpList:");
    if (this.messageBoxWrapUpList == null) {
      ret.write("null");
    } else {
      ret.write(this.messageBoxWrapUpList);
    }

    ret.write(", ");
    ret.write("totalSize:");
    ret.write(this.totalSize);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

