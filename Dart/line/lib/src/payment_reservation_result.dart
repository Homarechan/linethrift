/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.payment_reservation_result;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class PaymentReservationResult implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("PaymentReservationResult");
  static final TField _ORDER_ID_FIELD_DESC = new TField("orderId", TType.STRING, 1);
  static final TField _CONFIRM_URL_FIELD_DESC = new TField("confirmUrl", TType.STRING, 2);
  static final TField _EXTRAS_FIELD_DESC = new TField("extras", TType.MAP, 3);

  String _orderId;
  static const int ORDERID = 1;
  String _confirmUrl;
  static const int CONFIRMURL = 2;
  Map<String, String> _extras;
  static const int EXTRAS = 3;


  PaymentReservationResult() {
  }

  // orderId
  String get orderId => this._orderId;

  set orderId(String orderId) {
    this._orderId = orderId;
  }

  bool isSetOrderId() => this.orderId != null;

  unsetOrderId() {
    this.orderId = null;
  }

  // confirmUrl
  String get confirmUrl => this._confirmUrl;

  set confirmUrl(String confirmUrl) {
    this._confirmUrl = confirmUrl;
  }

  bool isSetConfirmUrl() => this.confirmUrl != null;

  unsetConfirmUrl() {
    this.confirmUrl = null;
  }

  // extras
  Map<String, String> get extras => this._extras;

  set extras(Map<String, String> extras) {
    this._extras = extras;
  }

  bool isSetExtras() => this.extras != null;

  unsetExtras() {
    this.extras = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case ORDERID:
        return this.orderId;
      case CONFIRMURL:
        return this.confirmUrl;
      case EXTRAS:
        return this.extras;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case ORDERID:
        if (value == null) {
          unsetOrderId();
        } else {
          this.orderId = value;
        }
        break;

      case CONFIRMURL:
        if (value == null) {
          unsetConfirmUrl();
        } else {
          this.confirmUrl = value;
        }
        break;

      case EXTRAS:
        if (value == null) {
          unsetExtras();
        } else {
          this.extras = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case ORDERID:
        return isSetOrderId();
      case CONFIRMURL:
        return isSetConfirmUrl();
      case EXTRAS:
        return isSetExtras();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ORDERID:
          if (field.type == TType.STRING) {
            this.orderId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CONFIRMURL:
          if (field.type == TType.STRING) {
            this.confirmUrl = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EXTRAS:
          if (field.type == TType.MAP) {
            {
              TMap _map196 = iprot.readMapBegin();
              this.extras = new Map<String, String>();
              for (int _i197 = 0; _i197 < _map196.length; ++_i197) {
                String _key198;
                String _val199;
                _key198 = iprot.readString();
                _val199 = iprot.readString();
                this.extras[_key198] = _val199;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.orderId != null) {
      oprot.writeFieldBegin(_ORDER_ID_FIELD_DESC);
      oprot.writeString(this.orderId);
      oprot.writeFieldEnd();
    }
    if (this.confirmUrl != null) {
      oprot.writeFieldBegin(_CONFIRM_URL_FIELD_DESC);
      oprot.writeString(this.confirmUrl);
      oprot.writeFieldEnd();
    }
    if (this.extras != null) {
      oprot.writeFieldBegin(_EXTRAS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.extras.length));
        for (var elem201 in this.extras.keys) {
          oprot.writeString(elem201);
          oprot.writeString(this.extras[elem201]);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("PaymentReservationResult(");

    ret.write("orderId:");
    if (this.orderId == null) {
      ret.write("null");
    } else {
      ret.write(this.orderId);
    }

    ret.write(", ");
    ret.write("confirmUrl:");
    if (this.confirmUrl == null) {
      ret.write("null");
    } else {
      ret.write(this.confirmUrl);
    }

    ret.write(", ");
    ret.write("extras:");
    if (this.extras == null) {
      ret.write("null");
    } else {
      ret.write(this.extras);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

