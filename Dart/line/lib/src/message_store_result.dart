/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.message_store_result;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class MessageStoreResult implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("MessageStoreResult");
  static final TField _REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, 1);
  static final TField _MESSAGE_IDS_FIELD_DESC = new TField("messageIds", TType.LIST, 2);

  String _requestId;
  static const int REQUESTID = 1;
  List<String> _messageIds;
  static const int MESSAGEIDS = 2;


  MessageStoreResult() {
  }

  // requestId
  String get requestId => this._requestId;

  set requestId(String requestId) {
    this._requestId = requestId;
  }

  bool isSetRequestId() => this.requestId != null;

  unsetRequestId() {
    this.requestId = null;
  }

  // messageIds
  List<String> get messageIds => this._messageIds;

  set messageIds(List<String> messageIds) {
    this._messageIds = messageIds;
  }

  bool isSetMessageIds() => this.messageIds != null;

  unsetMessageIds() {
    this.messageIds = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return this.requestId;
      case MESSAGEIDS:
        return this.messageIds;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQUESTID:
        if (value == null) {
          unsetRequestId();
        } else {
          this.requestId = value;
        }
        break;

      case MESSAGEIDS:
        if (value == null) {
          unsetMessageIds();
        } else {
          this.messageIds = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQUESTID:
        return isSetRequestId();
      case MESSAGEIDS:
        return isSetMessageIds();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQUESTID:
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MESSAGEIDS:
          if (field.type == TType.LIST) {
            {
              TList _list176 = iprot.readListBegin();
              this.messageIds = new List<String>();
              for (int _i177 = 0; _i177 < _list176.length; ++_i177) {
                String _elem178;
                _elem178 = iprot.readString();
                this.messageIds.add(_elem178);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(_REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    if (this.messageIds != null) {
      oprot.writeFieldBegin(_MESSAGE_IDS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.messageIds.length));
        for (var elem179 in this.messageIds) {
          oprot.writeString(elem179);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("MessageStoreResult(");

    ret.write("requestId:");
    if (this.requestId == null) {
      ret.write("null");
    } else {
      ret.write(this.requestId);
    }

    ret.write(", ");
    ret.write("messageIds:");
    if (this.messageIds == null) {
      ret.write("null");
    } else {
      ret.write(this.messageIds);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

