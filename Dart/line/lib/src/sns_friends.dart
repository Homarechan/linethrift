/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.sns_friends;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class SnsFriends implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("SnsFriends");
  static final TField _SNS_FRIENDS_FIELD_DESC = new TField("snsFriends", TType.LIST, 1);
  static final TField _HAS_MORE_FIELD_DESC = new TField("hasMore", TType.BOOL, 2);

  List<SnsFriend> _snsFriends;
  static const int SNSFRIENDS = 1;
  bool _hasMore = false;
  static const int HASMORE = 2;

  bool __isset_hasMore = false;

  SnsFriends() {
  }

  // snsFriends
  List<SnsFriend> get snsFriends => this._snsFriends;

  set snsFriends(List<SnsFriend> snsFriends) {
    this._snsFriends = snsFriends;
  }

  bool isSetSnsFriends() => this.snsFriends != null;

  unsetSnsFriends() {
    this.snsFriends = null;
  }

  // hasMore
  bool get hasMore => this._hasMore;

  set hasMore(bool hasMore) {
    this._hasMore = hasMore;
    this.__isset_hasMore = true;
  }

  bool isSetHasMore() => this.__isset_hasMore;

  unsetHasMore() {
    this.__isset_hasMore = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SNSFRIENDS:
        return this.snsFriends;
      case HASMORE:
        return this.hasMore;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SNSFRIENDS:
        if (value == null) {
          unsetSnsFriends();
        } else {
          this.snsFriends = value;
        }
        break;

      case HASMORE:
        if (value == null) {
          unsetHasMore();
        } else {
          this.hasMore = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SNSFRIENDS:
        return isSetSnsFriends();
      case HASMORE:
        return isSetHasMore();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SNSFRIENDS:
          if (field.type == TType.LIST) {
            {
              TList _list262 = iprot.readListBegin();
              this.snsFriends = new List<SnsFriend>();
              for (int _i263 = 0; _i263 < _list262.length; ++_i263) {
                SnsFriend _elem264;
                _elem264 = new SnsFriend();
                _elem264.read(iprot);
                this.snsFriends.add(_elem264);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case HASMORE:
          if (field.type == TType.BOOL) {
            this.hasMore = iprot.readBool();
            this.__isset_hasMore = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.snsFriends != null) {
      oprot.writeFieldBegin(_SNS_FRIENDS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.snsFriends.length));
        for (var elem265 in this.snsFriends) {
          elem265.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_HAS_MORE_FIELD_DESC);
    oprot.writeBool(this.hasMore);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("SnsFriends(");

    ret.write("snsFriends:");
    if (this.snsFriends == null) {
      ret.write("null");
    } else {
      ret.write(this.snsFriends);
    }

    ret.write(", ");
    ret.write("hasMore:");
    ret.write(this.hasMore);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

