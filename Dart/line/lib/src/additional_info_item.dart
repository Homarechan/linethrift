/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.additional_info_item;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class AdditionalInfoItem implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("AdditionalInfoItem");
  static final TField _ID_FIELD_DESC = new TField("id", TType.STRING, 1);
  static final TField _G_FIELD_DESC = new TField("g", TType.I32, 2);
  static final TField _TITLE_FIELD_DESC = new TField("title", TType.STRING, 3);
  static final TField _DESCR_FIELD_DESC = new TField("descr", TType.STRING, 4);
  static final TField _ICON_URL_FIELD_DESC = new TField("iconUrl", TType.STRING, 5);
  static final TField _LINK_FIELD_DESC = new TField("link", TType.STRING, 6);

  String _id;
  static const int ID = 1;
  int _g = 0;
  static const int G = 2;
  String _title;
  static const int TITLE = 3;
  String _descr;
  static const int DESCR = 4;
  String _iconUrl;
  static const int ICONURL = 5;
  String _link;
  static const int LINK = 6;

  bool __isset_g = false;

  AdditionalInfoItem() {
  }

  // id
  String get id => this._id;

  set id(String id) {
    this._id = id;
  }

  bool isSetId() => this.id != null;

  unsetId() {
    this.id = null;
  }

  // g
  int get g => this._g;

  set g(int g) {
    this._g = g;
    this.__isset_g = true;
  }

  bool isSetG() => this.__isset_g;

  unsetG() {
    this.__isset_g = false;
  }

  // title
  String get title => this._title;

  set title(String title) {
    this._title = title;
  }

  bool isSetTitle() => this.title != null;

  unsetTitle() {
    this.title = null;
  }

  // descr
  String get descr => this._descr;

  set descr(String descr) {
    this._descr = descr;
  }

  bool isSetDescr() => this.descr != null;

  unsetDescr() {
    this.descr = null;
  }

  // iconUrl
  String get iconUrl => this._iconUrl;

  set iconUrl(String iconUrl) {
    this._iconUrl = iconUrl;
  }

  bool isSetIconUrl() => this.iconUrl != null;

  unsetIconUrl() {
    this.iconUrl = null;
  }

  // link
  String get link => this._link;

  set link(String link) {
    this._link = link;
  }

  bool isSetLink() => this.link != null;

  unsetLink() {
    this.link = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case ID:
        return this.id;
      case G:
        return this.g;
      case TITLE:
        return this.title;
      case DESCR:
        return this.descr;
      case ICONURL:
        return this.iconUrl;
      case LINK:
        return this.link;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          this.id = value;
        }
        break;

      case G:
        if (value == null) {
          unsetG();
        } else {
          this.g = value;
        }
        break;

      case TITLE:
        if (value == null) {
          unsetTitle();
        } else {
          this.title = value;
        }
        break;

      case DESCR:
        if (value == null) {
          unsetDescr();
        } else {
          this.descr = value;
        }
        break;

      case ICONURL:
        if (value == null) {
          unsetIconUrl();
        } else {
          this.iconUrl = value;
        }
        break;

      case LINK:
        if (value == null) {
          unsetLink();
        } else {
          this.link = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case ID:
        return isSetId();
      case G:
        return isSetG();
      case TITLE:
        return isSetTitle();
      case DESCR:
        return isSetDescr();
      case ICONURL:
        return isSetIconUrl();
      case LINK:
        return isSetLink();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ID:
          if (field.type == TType.STRING) {
            this.id = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case G:
          if (field.type == TType.I32) {
            this.g = iprot.readI32();
            this.__isset_g = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TITLE:
          if (field.type == TType.STRING) {
            this.title = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DESCR:
          if (field.type == TType.STRING) {
            this.descr = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ICONURL:
          if (field.type == TType.STRING) {
            this.iconUrl = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LINK:
          if (field.type == TType.STRING) {
            this.link = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.id != null) {
      oprot.writeFieldBegin(_ID_FIELD_DESC);
      oprot.writeString(this.id);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_G_FIELD_DESC);
    oprot.writeI32(this.g);
    oprot.writeFieldEnd();
    if (this.title != null) {
      oprot.writeFieldBegin(_TITLE_FIELD_DESC);
      oprot.writeString(this.title);
      oprot.writeFieldEnd();
    }
    if (this.descr != null) {
      oprot.writeFieldBegin(_DESCR_FIELD_DESC);
      oprot.writeString(this.descr);
      oprot.writeFieldEnd();
    }
    if (this.iconUrl != null) {
      oprot.writeFieldBegin(_ICON_URL_FIELD_DESC);
      oprot.writeString(this.iconUrl);
      oprot.writeFieldEnd();
    }
    if (this.link != null) {
      oprot.writeFieldBegin(_LINK_FIELD_DESC);
      oprot.writeString(this.link);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("AdditionalInfoItem(");

    ret.write("id:");
    if (this.id == null) {
      ret.write("null");
    } else {
      ret.write(this.id);
    }

    ret.write(", ");
    ret.write("g:");
    ret.write(this.g);

    ret.write(", ");
    ret.write("title:");
    if (this.title == null) {
      ret.write("null");
    } else {
      ret.write(this.title);
    }

    ret.write(", ");
    ret.write("descr:");
    if (this.descr == null) {
      ret.write("null");
    } else {
      ret.write(this.descr);
    }

    ret.write(", ");
    ret.write("iconUrl:");
    if (this.iconUrl == null) {
      ret.write("null");
    } else {
      ret.write(this.iconUrl);
    }

    ret.write(", ");
    ret.write("link:");
    if (this.link == null) {
      ret.write("null");
    } else {
      ret.write(this.link);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

