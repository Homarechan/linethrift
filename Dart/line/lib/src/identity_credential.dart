/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.identity_credential;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class IdentityCredential implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("IdentityCredential");
  static final TField _PROVIDER_FIELD_DESC = new TField("provider", TType.I32, 1);
  static final TField _IDENTIFIER_FIELD_DESC = new TField("identifier", TType.STRING, 2);
  static final TField _PASSWORD_FIELD_DESC = new TField("password", TType.STRING, 3);

  int _provider;
  static const int PROVIDER = 1;
  String _identifier;
  static const int IDENTIFIER = 2;
  String _password;
  static const int PASSWORD = 3;

  bool __isset_provider = false;

  IdentityCredential() {
  }

  // provider
  int get provider => this._provider;

  set provider(int provider) {
    this._provider = provider;
    this.__isset_provider = true;
  }

  bool isSetProvider() => this.__isset_provider;

  unsetProvider() {
    this.__isset_provider = false;
  }

  // identifier
  String get identifier => this._identifier;

  set identifier(String identifier) {
    this._identifier = identifier;
  }

  bool isSetIdentifier() => this.identifier != null;

  unsetIdentifier() {
    this.identifier = null;
  }

  // password
  String get password => this._password;

  set password(String password) {
    this._password = password;
  }

  bool isSetPassword() => this.password != null;

  unsetPassword() {
    this.password = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case PROVIDER:
        return this.provider;
      case IDENTIFIER:
        return this.identifier;
      case PASSWORD:
        return this.password;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case PROVIDER:
        if (value == null) {
          unsetProvider();
        } else {
          this.provider = value;
        }
        break;

      case IDENTIFIER:
        if (value == null) {
          unsetIdentifier();
        } else {
          this.identifier = value;
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          this.password = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case PROVIDER:
        return isSetProvider();
      case IDENTIFIER:
        return isSetIdentifier();
      case PASSWORD:
        return isSetPassword();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case PROVIDER:
          if (field.type == TType.I32) {
            this.provider = iprot.readI32();
            this.__isset_provider = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case IDENTIFIER:
          if (field.type == TType.STRING) {
            this.identifier = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PASSWORD:
          if (field.type == TType.STRING) {
            this.password = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_PROVIDER_FIELD_DESC);
    oprot.writeI32(this.provider);
    oprot.writeFieldEnd();
    if (this.identifier != null) {
      oprot.writeFieldBegin(_IDENTIFIER_FIELD_DESC);
      oprot.writeString(this.identifier);
      oprot.writeFieldEnd();
    }
    if (this.password != null) {
      oprot.writeFieldBegin(_PASSWORD_FIELD_DESC);
      oprot.writeString(this.password);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("IdentityCredential(");

    ret.write("provider:");
    String provider_name = IdentityProvider.VALUES_TO_NAMES[this.provider];
    if (provider_name != null) {
      ret.write(provider_name);
      ret.write(" (");
    }
    ret.write(this.provider);
    if (provider_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("identifier:");
    if (this.identifier == null) {
      ret.write("null");
    } else {
      ret.write(this.identifier);
    }

    ret.write(", ");
    ret.write("password:");
    if (this.password == null) {
      ret.write("null");
    } else {
      ret.write(this.password);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetProvider() && !IdentityProvider.VALID_VALUES.contains(provider)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'provider' has been assigned the invalid value $provider");
    }
  }

}

