/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.paid_call_currency_exchange_rate;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class PaidCallCurrencyExchangeRate implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("PaidCallCurrencyExchangeRate");
  static final TField _CURRENCY_CODE_FIELD_DESC = new TField("currencyCode", TType.STRING, 1);
  static final TField _CURRENCY_NAME_FIELD_DESC = new TField("currencyName", TType.STRING, 2);
  static final TField _CURRENCY_SIGN_FIELD_DESC = new TField("currencySign", TType.STRING, 3);
  static final TField _PREFERRED_FIELD_DESC = new TField("preferred", TType.BOOL, 4);
  static final TField _COIN_RATE_FIELD_DESC = new TField("coinRate", TType.STRING, 5);
  static final TField _CREDIT_RATE_FIELD_DESC = new TField("creditRate", TType.STRING, 6);

  String _currencyCode;
  static const int CURRENCYCODE = 1;
  String _currencyName;
  static const int CURRENCYNAME = 2;
  String _currencySign;
  static const int CURRENCYSIGN = 3;
  bool _preferred = false;
  static const int PREFERRED = 4;
  String _coinRate;
  static const int COINRATE = 5;
  String _creditRate;
  static const int CREDITRATE = 6;

  bool __isset_preferred = false;

  PaidCallCurrencyExchangeRate() {
  }

  // currencyCode
  String get currencyCode => this._currencyCode;

  set currencyCode(String currencyCode) {
    this._currencyCode = currencyCode;
  }

  bool isSetCurrencyCode() => this.currencyCode != null;

  unsetCurrencyCode() {
    this.currencyCode = null;
  }

  // currencyName
  String get currencyName => this._currencyName;

  set currencyName(String currencyName) {
    this._currencyName = currencyName;
  }

  bool isSetCurrencyName() => this.currencyName != null;

  unsetCurrencyName() {
    this.currencyName = null;
  }

  // currencySign
  String get currencySign => this._currencySign;

  set currencySign(String currencySign) {
    this._currencySign = currencySign;
  }

  bool isSetCurrencySign() => this.currencySign != null;

  unsetCurrencySign() {
    this.currencySign = null;
  }

  // preferred
  bool get preferred => this._preferred;

  set preferred(bool preferred) {
    this._preferred = preferred;
    this.__isset_preferred = true;
  }

  bool isSetPreferred() => this.__isset_preferred;

  unsetPreferred() {
    this.__isset_preferred = false;
  }

  // coinRate
  String get coinRate => this._coinRate;

  set coinRate(String coinRate) {
    this._coinRate = coinRate;
  }

  bool isSetCoinRate() => this.coinRate != null;

  unsetCoinRate() {
    this.coinRate = null;
  }

  // creditRate
  String get creditRate => this._creditRate;

  set creditRate(String creditRate) {
    this._creditRate = creditRate;
  }

  bool isSetCreditRate() => this.creditRate != null;

  unsetCreditRate() {
    this.creditRate = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case CURRENCYCODE:
        return this.currencyCode;
      case CURRENCYNAME:
        return this.currencyName;
      case CURRENCYSIGN:
        return this.currencySign;
      case PREFERRED:
        return this.preferred;
      case COINRATE:
        return this.coinRate;
      case CREDITRATE:
        return this.creditRate;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case CURRENCYCODE:
        if (value == null) {
          unsetCurrencyCode();
        } else {
          this.currencyCode = value;
        }
        break;

      case CURRENCYNAME:
        if (value == null) {
          unsetCurrencyName();
        } else {
          this.currencyName = value;
        }
        break;

      case CURRENCYSIGN:
        if (value == null) {
          unsetCurrencySign();
        } else {
          this.currencySign = value;
        }
        break;

      case PREFERRED:
        if (value == null) {
          unsetPreferred();
        } else {
          this.preferred = value;
        }
        break;

      case COINRATE:
        if (value == null) {
          unsetCoinRate();
        } else {
          this.coinRate = value;
        }
        break;

      case CREDITRATE:
        if (value == null) {
          unsetCreditRate();
        } else {
          this.creditRate = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case CURRENCYCODE:
        return isSetCurrencyCode();
      case CURRENCYNAME:
        return isSetCurrencyName();
      case CURRENCYSIGN:
        return isSetCurrencySign();
      case PREFERRED:
        return isSetPreferred();
      case COINRATE:
        return isSetCoinRate();
      case CREDITRATE:
        return isSetCreditRate();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case CURRENCYCODE:
          if (field.type == TType.STRING) {
            this.currencyCode = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CURRENCYNAME:
          if (field.type == TType.STRING) {
            this.currencyName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CURRENCYSIGN:
          if (field.type == TType.STRING) {
            this.currencySign = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PREFERRED:
          if (field.type == TType.BOOL) {
            this.preferred = iprot.readBool();
            this.__isset_preferred = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COINRATE:
          if (field.type == TType.STRING) {
            this.coinRate = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CREDITRATE:
          if (field.type == TType.STRING) {
            this.creditRate = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.currencyCode != null) {
      oprot.writeFieldBegin(_CURRENCY_CODE_FIELD_DESC);
      oprot.writeString(this.currencyCode);
      oprot.writeFieldEnd();
    }
    if (this.currencyName != null) {
      oprot.writeFieldBegin(_CURRENCY_NAME_FIELD_DESC);
      oprot.writeString(this.currencyName);
      oprot.writeFieldEnd();
    }
    if (this.currencySign != null) {
      oprot.writeFieldBegin(_CURRENCY_SIGN_FIELD_DESC);
      oprot.writeString(this.currencySign);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_PREFERRED_FIELD_DESC);
    oprot.writeBool(this.preferred);
    oprot.writeFieldEnd();
    if (this.coinRate != null) {
      oprot.writeFieldBegin(_COIN_RATE_FIELD_DESC);
      oprot.writeString(this.coinRate);
      oprot.writeFieldEnd();
    }
    if (this.creditRate != null) {
      oprot.writeFieldBegin(_CREDIT_RATE_FIELD_DESC);
      oprot.writeString(this.creditRate);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("PaidCallCurrencyExchangeRate(");

    ret.write("currencyCode:");
    if (this.currencyCode == null) {
      ret.write("null");
    } else {
      ret.write(this.currencyCode);
    }

    ret.write(", ");
    ret.write("currencyName:");
    if (this.currencyName == null) {
      ret.write("null");
    } else {
      ret.write(this.currencyName);
    }

    ret.write(", ");
    ret.write("currencySign:");
    if (this.currencySign == null) {
      ret.write("null");
    } else {
      ret.write(this.currencySign);
    }

    ret.write(", ");
    ret.write("preferred:");
    ret.write(this.preferred);

    ret.write(", ");
    ret.write("coinRate:");
    if (this.coinRate == null) {
      ret.write("null");
    } else {
      ret.write(this.coinRate);
    }

    ret.write(", ");
    ret.write("creditRate:");
    if (this.creditRate == null) {
      ret.write("null");
    } else {
      ret.write(this.creditRate);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

