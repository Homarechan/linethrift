/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.product_simple;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class ProductSimple implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ProductSimple");
  static final TField _PRODUCT_ID_FIELD_DESC = new TField("productId", TType.STRING, 1);
  static final TField _PACKAGE_ID_FIELD_DESC = new TField("packageId", TType.I64, 2);
  static final TField _VERSION_FIELD_DESC = new TField("version", TType.I32, 3);
  static final TField _ON_SALE_FIELD_DESC = new TField("onSale", TType.BOOL, 4);
  static final TField _VALID_UNTIL_FIELD_DESC = new TField("validUntil", TType.I64, 5);
  static final TField _STICKER_ID_RANGES_FIELD_DESC = new TField("stickerIdRanges", TType.LIST, 10);
  static final TField _GRANTED_BY_DEFAULT_FIELD_DESC = new TField("grantedByDefault", TType.BOOL, 41);
  static final TField _DISPLAY_ORDER_FIELD_DESC = new TField("displayOrder", TType.I32, 42);

  String _productId;
  static const int PRODUCTID = 1;
  int _packageId = 0;
  static const int PACKAGEID = 2;
  int _version = 0;
  static const int VERSION = 3;
  bool _onSale = false;
  static const int ONSALE = 4;
  int _validUntil = 0;
  static const int VALIDUNTIL = 5;
  List<StickerIdRange> _stickerIdRanges;
  static const int STICKERIDRANGES = 10;
  bool _grantedByDefault = false;
  static const int GRANTEDBYDEFAULT = 41;
  int _displayOrder = 0;
  static const int DISPLAYORDER = 42;

  bool __isset_packageId = false;
  bool __isset_version = false;
  bool __isset_onSale = false;
  bool __isset_validUntil = false;
  bool __isset_grantedByDefault = false;
  bool __isset_displayOrder = false;

  ProductSimple() {
  }

  // productId
  String get productId => this._productId;

  set productId(String productId) {
    this._productId = productId;
  }

  bool isSetProductId() => this.productId != null;

  unsetProductId() {
    this.productId = null;
  }

  // packageId
  int get packageId => this._packageId;

  set packageId(int packageId) {
    this._packageId = packageId;
    this.__isset_packageId = true;
  }

  bool isSetPackageId() => this.__isset_packageId;

  unsetPackageId() {
    this.__isset_packageId = false;
  }

  // version
  int get version => this._version;

  set version(int version) {
    this._version = version;
    this.__isset_version = true;
  }

  bool isSetVersion() => this.__isset_version;

  unsetVersion() {
    this.__isset_version = false;
  }

  // onSale
  bool get onSale => this._onSale;

  set onSale(bool onSale) {
    this._onSale = onSale;
    this.__isset_onSale = true;
  }

  bool isSetOnSale() => this.__isset_onSale;

  unsetOnSale() {
    this.__isset_onSale = false;
  }

  // validUntil
  int get validUntil => this._validUntil;

  set validUntil(int validUntil) {
    this._validUntil = validUntil;
    this.__isset_validUntil = true;
  }

  bool isSetValidUntil() => this.__isset_validUntil;

  unsetValidUntil() {
    this.__isset_validUntil = false;
  }

  // stickerIdRanges
  List<StickerIdRange> get stickerIdRanges => this._stickerIdRanges;

  set stickerIdRanges(List<StickerIdRange> stickerIdRanges) {
    this._stickerIdRanges = stickerIdRanges;
  }

  bool isSetStickerIdRanges() => this.stickerIdRanges != null;

  unsetStickerIdRanges() {
    this.stickerIdRanges = null;
  }

  // grantedByDefault
  bool get grantedByDefault => this._grantedByDefault;

  set grantedByDefault(bool grantedByDefault) {
    this._grantedByDefault = grantedByDefault;
    this.__isset_grantedByDefault = true;
  }

  bool isSetGrantedByDefault() => this.__isset_grantedByDefault;

  unsetGrantedByDefault() {
    this.__isset_grantedByDefault = false;
  }

  // displayOrder
  int get displayOrder => this._displayOrder;

  set displayOrder(int displayOrder) {
    this._displayOrder = displayOrder;
    this.__isset_displayOrder = true;
  }

  bool isSetDisplayOrder() => this.__isset_displayOrder;

  unsetDisplayOrder() {
    this.__isset_displayOrder = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case PRODUCTID:
        return this.productId;
      case PACKAGEID:
        return this.packageId;
      case VERSION:
        return this.version;
      case ONSALE:
        return this.onSale;
      case VALIDUNTIL:
        return this.validUntil;
      case STICKERIDRANGES:
        return this.stickerIdRanges;
      case GRANTEDBYDEFAULT:
        return this.grantedByDefault;
      case DISPLAYORDER:
        return this.displayOrder;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case PRODUCTID:
        if (value == null) {
          unsetProductId();
        } else {
          this.productId = value;
        }
        break;

      case PACKAGEID:
        if (value == null) {
          unsetPackageId();
        } else {
          this.packageId = value;
        }
        break;

      case VERSION:
        if (value == null) {
          unsetVersion();
        } else {
          this.version = value;
        }
        break;

      case ONSALE:
        if (value == null) {
          unsetOnSale();
        } else {
          this.onSale = value;
        }
        break;

      case VALIDUNTIL:
        if (value == null) {
          unsetValidUntil();
        } else {
          this.validUntil = value;
        }
        break;

      case STICKERIDRANGES:
        if (value == null) {
          unsetStickerIdRanges();
        } else {
          this.stickerIdRanges = value;
        }
        break;

      case GRANTEDBYDEFAULT:
        if (value == null) {
          unsetGrantedByDefault();
        } else {
          this.grantedByDefault = value;
        }
        break;

      case DISPLAYORDER:
        if (value == null) {
          unsetDisplayOrder();
        } else {
          this.displayOrder = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case PRODUCTID:
        return isSetProductId();
      case PACKAGEID:
        return isSetPackageId();
      case VERSION:
        return isSetVersion();
      case ONSALE:
        return isSetOnSale();
      case VALIDUNTIL:
        return isSetValidUntil();
      case STICKERIDRANGES:
        return isSetStickerIdRanges();
      case GRANTEDBYDEFAULT:
        return isSetGrantedByDefault();
      case DISPLAYORDER:
        return isSetDisplayOrder();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case PRODUCTID:
          if (field.type == TType.STRING) {
            this.productId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PACKAGEID:
          if (field.type == TType.I64) {
            this.packageId = iprot.readI64();
            this.__isset_packageId = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case VERSION:
          if (field.type == TType.I32) {
            this.version = iprot.readI32();
            this.__isset_version = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ONSALE:
          if (field.type == TType.BOOL) {
            this.onSale = iprot.readBool();
            this.__isset_onSale = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case VALIDUNTIL:
          if (field.type == TType.I64) {
            this.validUntil = iprot.readI64();
            this.__isset_validUntil = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STICKERIDRANGES:
          if (field.type == TType.LIST) {
            {
              TList _list210 = iprot.readListBegin();
              this.stickerIdRanges = new List<StickerIdRange>();
              for (int _i211 = 0; _i211 < _list210.length; ++_i211) {
                StickerIdRange _elem212;
                _elem212 = new StickerIdRange();
                _elem212.read(iprot);
                this.stickerIdRanges.add(_elem212);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case GRANTEDBYDEFAULT:
          if (field.type == TType.BOOL) {
            this.grantedByDefault = iprot.readBool();
            this.__isset_grantedByDefault = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DISPLAYORDER:
          if (field.type == TType.I32) {
            this.displayOrder = iprot.readI32();
            this.__isset_displayOrder = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.productId != null) {
      oprot.writeFieldBegin(_PRODUCT_ID_FIELD_DESC);
      oprot.writeString(this.productId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_PACKAGE_ID_FIELD_DESC);
    oprot.writeI64(this.packageId);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_VERSION_FIELD_DESC);
    oprot.writeI32(this.version);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_ON_SALE_FIELD_DESC);
    oprot.writeBool(this.onSale);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_VALID_UNTIL_FIELD_DESC);
    oprot.writeI64(this.validUntil);
    oprot.writeFieldEnd();
    if (this.stickerIdRanges != null) {
      oprot.writeFieldBegin(_STICKER_ID_RANGES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.stickerIdRanges.length));
        for (var elem213 in this.stickerIdRanges) {
          elem213.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_GRANTED_BY_DEFAULT_FIELD_DESC);
    oprot.writeBool(this.grantedByDefault);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_DISPLAY_ORDER_FIELD_DESC);
    oprot.writeI32(this.displayOrder);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ProductSimple(");

    ret.write("productId:");
    if (this.productId == null) {
      ret.write("null");
    } else {
      ret.write(this.productId);
    }

    ret.write(", ");
    ret.write("packageId:");
    ret.write(this.packageId);

    ret.write(", ");
    ret.write("version:");
    ret.write(this.version);

    ret.write(", ");
    ret.write("onSale:");
    ret.write(this.onSale);

    ret.write(", ");
    ret.write("validUntil:");
    ret.write(this.validUntil);

    ret.write(", ");
    ret.write("stickerIdRanges:");
    if (this.stickerIdRanges == null) {
      ret.write("null");
    } else {
      ret.write(this.stickerIdRanges);
    }

    ret.write(", ");
    ret.write("grantedByDefault:");
    ret.write(this.grantedByDefault);

    ret.write(", ");
    ret.write("displayOrder:");
    ret.write(this.displayOrder);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

