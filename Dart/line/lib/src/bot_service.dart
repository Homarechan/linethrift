/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.bot_service;

import 'dart:async';
import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';


abstract class BotService {

  Future notifyLeaveGroup(String groupMid);

  Future notifyLeaveRoom(String roomMid);

  Future<BotUseInfo> getBotUseInfo(String botMid);

  Future sendChatCheckedByWatermark(int seq, String mid, int watermark, int sessionId);
}

class BotServiceClient implements BotService {

  BotServiceClient(TProtocol iprot, [TProtocol oprot = null]) {
    _iprot = iprot;
    _oprot = (oprot == null) ? iprot : oprot;
  }

  TProtocol _iprot;

  TProtocol get iprot => _iprot;

  TProtocol _oprot;

  TProtocol get oprot => _oprot;

  int _seqid = 0;

  int get seqid => _seqid;

  int nextSeqid() => ++_seqid;

  Future notifyLeaveGroup(String groupMid) async {
    oprot.writeMessageBegin(new TMessage("notifyLeaveGroup", TMessageType.CALL, nextSeqid()));
    notifyLeaveGroup_args args = new notifyLeaveGroup_args();
    args.groupMid = groupMid;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    notifyLeaveGroup_result result = new notifyLeaveGroup_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.e != null) {
      throw result.e;
    }
    return;
  }

  Future notifyLeaveRoom(String roomMid) async {
    oprot.writeMessageBegin(new TMessage("notifyLeaveRoom", TMessageType.CALL, nextSeqid()));
    notifyLeaveRoom_args args = new notifyLeaveRoom_args();
    args.roomMid = roomMid;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    notifyLeaveRoom_result result = new notifyLeaveRoom_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.e != null) {
      throw result.e;
    }
    return;
  }

  Future<BotUseInfo> getBotUseInfo(String botMid) async {
    oprot.writeMessageBegin(new TMessage("getBotUseInfo", TMessageType.CALL, nextSeqid()));
    getBotUseInfo_args args = new getBotUseInfo_args();
    args.botMid = botMid;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    getBotUseInfo_result result = new getBotUseInfo_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "getBotUseInfo failed: unknown result");
  }

  Future sendChatCheckedByWatermark(int seq, String mid, int watermark, int sessionId) async {
    oprot.writeMessageBegin(new TMessage("sendChatCheckedByWatermark", TMessageType.CALL, nextSeqid()));
    sendChatCheckedByWatermark_args args = new sendChatCheckedByWatermark_args();
    args.seq = seq;
    args.mid = mid;
    args.watermark = watermark;
    args.sessionId = sessionId;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    sendChatCheckedByWatermark_result result = new sendChatCheckedByWatermark_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.e != null) {
      throw result.e;
    }
    return;
  }

}

typedef void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);

class BotServiceProcessor implements TProcessor {
  BotServiceProcessor(BotService iface) {
    iface_ = iface;
    PROCESS_MAP["notifyLeaveGroup"] = notifyLeaveGroup;
    PROCESS_MAP["notifyLeaveRoom"] = notifyLeaveRoom;
    PROCESS_MAP["getBotUseInfo"] = getBotUseInfo;
    PROCESS_MAP["sendChatCheckedByWatermark"] = sendChatCheckedByWatermark;
  }

  BotService iface_;
  final Map<String, ProcessFunction> PROCESS_MAP = {};

  bool process(TProtocol iprot, TProtocol oprot) {
    TMessage msg = iprot.readMessageBegin();
    ProcessFunction fn = PROCESS_MAP[msg.name];
    if (fn == null) {
      TProtocolUtil.skip(iprot, TType.STRUCT);
      iprot.readMessageEnd();
      TApplicationError x = new TApplicationError(TApplicationErrorType.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
      oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return true;
    }
    fn(msg.seqid, iprot, oprot);
    return true;
  }

  notifyLeaveGroup(int seqid, TProtocol iprot, TProtocol oprot) {
    notifyLeaveGroup_args args = new notifyLeaveGroup_args();
    args.read(iprot);
    iprot.readMessageEnd();
    notifyLeaveGroup_result result = new notifyLeaveGroup_result();
    try {
      iface_.notifyLeaveGroup(args.groupMid);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing notifyLeaveGroup");
      oprot.writeMessageBegin(new TMessage("notifyLeaveGroup", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("notifyLeaveGroup", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  notifyLeaveRoom(int seqid, TProtocol iprot, TProtocol oprot) {
    notifyLeaveRoom_args args = new notifyLeaveRoom_args();
    args.read(iprot);
    iprot.readMessageEnd();
    notifyLeaveRoom_result result = new notifyLeaveRoom_result();
    try {
      iface_.notifyLeaveRoom(args.roomMid);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing notifyLeaveRoom");
      oprot.writeMessageBegin(new TMessage("notifyLeaveRoom", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("notifyLeaveRoom", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  getBotUseInfo(int seqid, TProtocol iprot, TProtocol oprot) async {
    getBotUseInfo_args args = new getBotUseInfo_args();
    args.read(iprot);
    iprot.readMessageEnd();
    getBotUseInfo_result result = new getBotUseInfo_result();
    try {
      result.success = await iface_.getBotUseInfo(args.botMid);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing getBotUseInfo");
      oprot.writeMessageBegin(new TMessage("getBotUseInfo", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("getBotUseInfo", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  sendChatCheckedByWatermark(int seqid, TProtocol iprot, TProtocol oprot) {
    sendChatCheckedByWatermark_args args = new sendChatCheckedByWatermark_args();
    args.read(iprot);
    iprot.readMessageEnd();
    sendChatCheckedByWatermark_result result = new sendChatCheckedByWatermark_result();
    try {
      iface_.sendChatCheckedByWatermark(args.seq, args.mid, args.watermark, args.sessionId);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing sendChatCheckedByWatermark");
      oprot.writeMessageBegin(new TMessage("sendChatCheckedByWatermark", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("sendChatCheckedByWatermark", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

}

class notifyLeaveGroup_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("notifyLeaveGroup_args");
  static final TField _GROUP_MID_FIELD_DESC = new TField("groupMid", TType.STRING, 1);

  String _groupMid;
  static const int GROUPMID = 1;


  notifyLeaveGroup_args() {
  }

  // groupMid
  String get groupMid => this._groupMid;

  set groupMid(String groupMid) {
    this._groupMid = groupMid;
  }

  bool isSetGroupMid() => this.groupMid != null;

  unsetGroupMid() {
    this.groupMid = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case GROUPMID:
        return this.groupMid;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case GROUPMID:
        if (value == null) {
          unsetGroupMid();
        } else {
          this.groupMid = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case GROUPMID:
        return isSetGroupMid();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case GROUPMID:
          if (field.type == TType.STRING) {
            this.groupMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.groupMid != null) {
      oprot.writeFieldBegin(_GROUP_MID_FIELD_DESC);
      oprot.writeString(this.groupMid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("notifyLeaveGroup_args(");

    ret.write("groupMid:");
    if (this.groupMid == null) {
      ret.write("null");
    } else {
      ret.write(this.groupMid);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class notifyLeaveGroup_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("notifyLeaveGroup_result");
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  TalkException _e;
  static const int E = 1;


  notifyLeaveGroup_result() {
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("notifyLeaveGroup_result(");

    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class notifyLeaveRoom_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("notifyLeaveRoom_args");
  static final TField _ROOM_MID_FIELD_DESC = new TField("roomMid", TType.STRING, 1);

  String _roomMid;
  static const int ROOMMID = 1;


  notifyLeaveRoom_args() {
  }

  // roomMid
  String get roomMid => this._roomMid;

  set roomMid(String roomMid) {
    this._roomMid = roomMid;
  }

  bool isSetRoomMid() => this.roomMid != null;

  unsetRoomMid() {
    this.roomMid = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case ROOMMID:
        return this.roomMid;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case ROOMMID:
        if (value == null) {
          unsetRoomMid();
        } else {
          this.roomMid = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case ROOMMID:
        return isSetRoomMid();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ROOMMID:
          if (field.type == TType.STRING) {
            this.roomMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.roomMid != null) {
      oprot.writeFieldBegin(_ROOM_MID_FIELD_DESC);
      oprot.writeString(this.roomMid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("notifyLeaveRoom_args(");

    ret.write("roomMid:");
    if (this.roomMid == null) {
      ret.write("null");
    } else {
      ret.write(this.roomMid);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class notifyLeaveRoom_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("notifyLeaveRoom_result");
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  TalkException _e;
  static const int E = 1;


  notifyLeaveRoom_result() {
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("notifyLeaveRoom_result(");

    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getBotUseInfo_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getBotUseInfo_args");
  static final TField _BOT_MID_FIELD_DESC = new TField("botMid", TType.STRING, 2);

  String _botMid;
  static const int BOTMID = 2;


  getBotUseInfo_args() {
  }

  // botMid
  String get botMid => this._botMid;

  set botMid(String botMid) {
    this._botMid = botMid;
  }

  bool isSetBotMid() => this.botMid != null;

  unsetBotMid() {
    this.botMid = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case BOTMID:
        return this.botMid;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case BOTMID:
        if (value == null) {
          unsetBotMid();
        } else {
          this.botMid = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case BOTMID:
        return isSetBotMid();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case BOTMID:
          if (field.type == TType.STRING) {
            this.botMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.botMid != null) {
      oprot.writeFieldBegin(_BOT_MID_FIELD_DESC);
      oprot.writeString(this.botMid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getBotUseInfo_args(");

    ret.write("botMid:");
    if (this.botMid == null) {
      ret.write("null");
    } else {
      ret.write(this.botMid);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getBotUseInfo_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getBotUseInfo_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  BotUseInfo _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  getBotUseInfo_result() {
  }

  // success
  BotUseInfo get success => this._success;

  set success(BotUseInfo success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new BotUseInfo();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getBotUseInfo_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class sendChatCheckedByWatermark_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("sendChatCheckedByWatermark_args");
  static final TField _SEQ_FIELD_DESC = new TField("seq", TType.I32, 1);
  static final TField _MID_FIELD_DESC = new TField("mid", TType.STRING, 2);
  static final TField _WATERMARK_FIELD_DESC = new TField("watermark", TType.I64, 3);
  static final TField _SESSION_ID_FIELD_DESC = new TField("sessionId", TType.BYTE, 4);

  int _seq = 0;
  static const int SEQ = 1;
  String _mid;
  static const int MID = 2;
  int _watermark = 0;
  static const int WATERMARK = 3;
  int _sessionId = 0;
  static const int SESSIONID = 4;

  bool __isset_seq = false;
  bool __isset_watermark = false;
  bool __isset_sessionId = false;

  sendChatCheckedByWatermark_args() {
  }

  // seq
  int get seq => this._seq;

  set seq(int seq) {
    this._seq = seq;
    this.__isset_seq = true;
  }

  bool isSetSeq() => this.__isset_seq;

  unsetSeq() {
    this.__isset_seq = false;
  }

  // mid
  String get mid => this._mid;

  set mid(String mid) {
    this._mid = mid;
  }

  bool isSetMid() => this.mid != null;

  unsetMid() {
    this.mid = null;
  }

  // watermark
  int get watermark => this._watermark;

  set watermark(int watermark) {
    this._watermark = watermark;
    this.__isset_watermark = true;
  }

  bool isSetWatermark() => this.__isset_watermark;

  unsetWatermark() {
    this.__isset_watermark = false;
  }

  // sessionId
  int get sessionId => this._sessionId;

  set sessionId(int sessionId) {
    this._sessionId = sessionId;
    this.__isset_sessionId = true;
  }

  bool isSetSessionId() => this.__isset_sessionId;

  unsetSessionId() {
    this.__isset_sessionId = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SEQ:
        return this.seq;
      case MID:
        return this.mid;
      case WATERMARK:
        return this.watermark;
      case SESSIONID:
        return this.sessionId;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SEQ:
        if (value == null) {
          unsetSeq();
        } else {
          this.seq = value;
        }
        break;

      case MID:
        if (value == null) {
          unsetMid();
        } else {
          this.mid = value;
        }
        break;

      case WATERMARK:
        if (value == null) {
          unsetWatermark();
        } else {
          this.watermark = value;
        }
        break;

      case SESSIONID:
        if (value == null) {
          unsetSessionId();
        } else {
          this.sessionId = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SEQ:
        return isSetSeq();
      case MID:
        return isSetMid();
      case WATERMARK:
        return isSetWatermark();
      case SESSIONID:
        return isSetSessionId();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SEQ:
          if (field.type == TType.I32) {
            this.seq = iprot.readI32();
            this.__isset_seq = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MID:
          if (field.type == TType.STRING) {
            this.mid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case WATERMARK:
          if (field.type == TType.I64) {
            this.watermark = iprot.readI64();
            this.__isset_watermark = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SESSIONID:
          if (field.type == TType.BYTE) {
            this.sessionId = iprot.readByte();
            this.__isset_sessionId = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_SEQ_FIELD_DESC);
    oprot.writeI32(this.seq);
    oprot.writeFieldEnd();
    if (this.mid != null) {
      oprot.writeFieldBegin(_MID_FIELD_DESC);
      oprot.writeString(this.mid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_WATERMARK_FIELD_DESC);
    oprot.writeI64(this.watermark);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_SESSION_ID_FIELD_DESC);
    oprot.writeByte(this.sessionId);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("sendChatCheckedByWatermark_args(");

    ret.write("seq:");
    ret.write(this.seq);

    ret.write(", ");
    ret.write("mid:");
    if (this.mid == null) {
      ret.write("null");
    } else {
      ret.write(this.mid);
    }

    ret.write(", ");
    ret.write("watermark:");
    ret.write(this.watermark);

    ret.write(", ");
    ret.write("sessionId:");
    ret.write(this.sessionId);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class sendChatCheckedByWatermark_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("sendChatCheckedByWatermark_result");
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  TalkException _e;
  static const int E = 1;


  sendChatCheckedByWatermark_result() {
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("sendChatCheckedByWatermark_result(");

    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

