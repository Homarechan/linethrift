/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.rsa_key;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class RSAKey implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("RSAKey");
  static final TField _KEYNM_FIELD_DESC = new TField("keynm", TType.STRING, 1);
  static final TField _NVALUE_FIELD_DESC = new TField("nvalue", TType.STRING, 2);
  static final TField _EVALUE_FIELD_DESC = new TField("evalue", TType.STRING, 3);
  static final TField _SESSION_KEY_FIELD_DESC = new TField("sessionKey", TType.STRING, 4);

  String _keynm;
  static const int KEYNM = 1;
  String _nvalue;
  static const int NVALUE = 2;
  String _evalue;
  static const int EVALUE = 3;
  String _sessionKey;
  static const int SESSIONKEY = 4;


  RSAKey() {
  }

  // keynm
  String get keynm => this._keynm;

  set keynm(String keynm) {
    this._keynm = keynm;
  }

  bool isSetKeynm() => this.keynm != null;

  unsetKeynm() {
    this.keynm = null;
  }

  // nvalue
  String get nvalue => this._nvalue;

  set nvalue(String nvalue) {
    this._nvalue = nvalue;
  }

  bool isSetNvalue() => this.nvalue != null;

  unsetNvalue() {
    this.nvalue = null;
  }

  // evalue
  String get evalue => this._evalue;

  set evalue(String evalue) {
    this._evalue = evalue;
  }

  bool isSetEvalue() => this.evalue != null;

  unsetEvalue() {
    this.evalue = null;
  }

  // sessionKey
  String get sessionKey => this._sessionKey;

  set sessionKey(String sessionKey) {
    this._sessionKey = sessionKey;
  }

  bool isSetSessionKey() => this.sessionKey != null;

  unsetSessionKey() {
    this.sessionKey = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case KEYNM:
        return this.keynm;
      case NVALUE:
        return this.nvalue;
      case EVALUE:
        return this.evalue;
      case SESSIONKEY:
        return this.sessionKey;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case KEYNM:
        if (value == null) {
          unsetKeynm();
        } else {
          this.keynm = value;
        }
        break;

      case NVALUE:
        if (value == null) {
          unsetNvalue();
        } else {
          this.nvalue = value;
        }
        break;

      case EVALUE:
        if (value == null) {
          unsetEvalue();
        } else {
          this.evalue = value;
        }
        break;

      case SESSIONKEY:
        if (value == null) {
          unsetSessionKey();
        } else {
          this.sessionKey = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case KEYNM:
        return isSetKeynm();
      case NVALUE:
        return isSetNvalue();
      case EVALUE:
        return isSetEvalue();
      case SESSIONKEY:
        return isSetSessionKey();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case KEYNM:
          if (field.type == TType.STRING) {
            this.keynm = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NVALUE:
          if (field.type == TType.STRING) {
            this.nvalue = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EVALUE:
          if (field.type == TType.STRING) {
            this.evalue = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SESSIONKEY:
          if (field.type == TType.STRING) {
            this.sessionKey = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.keynm != null) {
      oprot.writeFieldBegin(_KEYNM_FIELD_DESC);
      oprot.writeString(this.keynm);
      oprot.writeFieldEnd();
    }
    if (this.nvalue != null) {
      oprot.writeFieldBegin(_NVALUE_FIELD_DESC);
      oprot.writeString(this.nvalue);
      oprot.writeFieldEnd();
    }
    if (this.evalue != null) {
      oprot.writeFieldBegin(_EVALUE_FIELD_DESC);
      oprot.writeString(this.evalue);
      oprot.writeFieldEnd();
    }
    if (this.sessionKey != null) {
      oprot.writeFieldBegin(_SESSION_KEY_FIELD_DESC);
      oprot.writeString(this.sessionKey);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("RSAKey(");

    ret.write("keynm:");
    if (this.keynm == null) {
      ret.write("null");
    } else {
      ret.write(this.keynm);
    }

    ret.write(", ");
    ret.write("nvalue:");
    if (this.nvalue == null) {
      ret.write("null");
    } else {
      ret.write(this.nvalue);
    }

    ret.write(", ");
    ret.write("evalue:");
    if (this.evalue == null) {
      ret.write("null");
    } else {
      ret.write(this.evalue);
    }

    ret.write(", ");
    ret.write("sessionKey:");
    if (this.sessionKey == null) {
      ret.write("null");
    } else {
      ret.write(this.sessionKey);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

