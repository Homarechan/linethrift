/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.user_auth_status;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class UserAuthStatus implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("UserAuthStatus");
  static final TField _PHONE_NUMBER_REGISTERED_FIELD_DESC = new TField("phoneNumberRegistered", TType.BOOL, 1);
  static final TField _REGISTERED_SNS_ID_TYPES_FIELD_DESC = new TField("registeredSnsIdTypes", TType.LIST, 2);

  bool _phoneNumberRegistered = false;
  static const int PHONENUMBERREGISTERED = 1;
  List<int> _registeredSnsIdTypes;
  static const int REGISTEREDSNSIDTYPES = 2;

  bool __isset_phoneNumberRegistered = false;

  UserAuthStatus() {
  }

  // phoneNumberRegistered
  bool get phoneNumberRegistered => this._phoneNumberRegistered;

  set phoneNumberRegistered(bool phoneNumberRegistered) {
    this._phoneNumberRegistered = phoneNumberRegistered;
    this.__isset_phoneNumberRegistered = true;
  }

  bool isSetPhoneNumberRegistered() => this.__isset_phoneNumberRegistered;

  unsetPhoneNumberRegistered() {
    this.__isset_phoneNumberRegistered = false;
  }

  // registeredSnsIdTypes
  List<int> get registeredSnsIdTypes => this._registeredSnsIdTypes;

  set registeredSnsIdTypes(List<int> registeredSnsIdTypes) {
    this._registeredSnsIdTypes = registeredSnsIdTypes;
  }

  bool isSetRegisteredSnsIdTypes() => this.registeredSnsIdTypes != null;

  unsetRegisteredSnsIdTypes() {
    this.registeredSnsIdTypes = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case PHONENUMBERREGISTERED:
        return this.phoneNumberRegistered;
      case REGISTEREDSNSIDTYPES:
        return this.registeredSnsIdTypes;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case PHONENUMBERREGISTERED:
        if (value == null) {
          unsetPhoneNumberRegistered();
        } else {
          this.phoneNumberRegistered = value;
        }
        break;

      case REGISTEREDSNSIDTYPES:
        if (value == null) {
          unsetRegisteredSnsIdTypes();
        } else {
          this.registeredSnsIdTypes = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case PHONENUMBERREGISTERED:
        return isSetPhoneNumberRegistered();
      case REGISTEREDSNSIDTYPES:
        return isSetRegisteredSnsIdTypes();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case PHONENUMBERREGISTERED:
          if (field.type == TType.BOOL) {
            this.phoneNumberRegistered = iprot.readBool();
            this.__isset_phoneNumberRegistered = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case REGISTEREDSNSIDTYPES:
          if (field.type == TType.LIST) {
            {
              TList _list566 = iprot.readListBegin();
              this.registeredSnsIdTypes = new List<int>();
              for (int _i567 = 0; _i567 < _list566.length; ++_i567) {
                int _elem568;
                _elem568 = iprot.readI32();
                this.registeredSnsIdTypes.add(_elem568);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_PHONE_NUMBER_REGISTERED_FIELD_DESC);
    oprot.writeBool(this.phoneNumberRegistered);
    oprot.writeFieldEnd();
    if (this.registeredSnsIdTypes != null) {
      oprot.writeFieldBegin(_REGISTERED_SNS_ID_TYPES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.I32, this.registeredSnsIdTypes.length));
        for (var elem569 in this.registeredSnsIdTypes) {
          oprot.writeI32(elem569);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("UserAuthStatus(");

    ret.write("phoneNumberRegistered:");
    ret.write(this.phoneNumberRegistered);

    ret.write(", ");
    ret.write("registeredSnsIdTypes:");
    if (this.registeredSnsIdTypes == null) {
      ret.write("null");
    } else {
      ret.write(this.registeredSnsIdTypes);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

