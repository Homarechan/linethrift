/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.square_preference;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class SquarePreference implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("SquarePreference");
  static final TField _FAVORITE_TIMESTAMP_FIELD_DESC = new TField("favoriteTimestamp", TType.I64, 1);
  static final TField _NOTI_FOR_NEW_JOIN_REQUEST_FIELD_DESC = new TField("notiForNewJoinRequest", TType.BOOL, 2);

  int _favoriteTimestamp = 0;
  static const int FAVORITETIMESTAMP = 1;
  bool _notiForNewJoinRequest = false;
  static const int NOTIFORNEWJOINREQUEST = 2;

  bool __isset_favoriteTimestamp = false;
  bool __isset_notiForNewJoinRequest = false;

  SquarePreference() {
  }

  // favoriteTimestamp
  int get favoriteTimestamp => this._favoriteTimestamp;

  set favoriteTimestamp(int favoriteTimestamp) {
    this._favoriteTimestamp = favoriteTimestamp;
    this.__isset_favoriteTimestamp = true;
  }

  bool isSetFavoriteTimestamp() => this.__isset_favoriteTimestamp;

  unsetFavoriteTimestamp() {
    this.__isset_favoriteTimestamp = false;
  }

  // notiForNewJoinRequest
  bool get notiForNewJoinRequest => this._notiForNewJoinRequest;

  set notiForNewJoinRequest(bool notiForNewJoinRequest) {
    this._notiForNewJoinRequest = notiForNewJoinRequest;
    this.__isset_notiForNewJoinRequest = true;
  }

  bool isSetNotiForNewJoinRequest() => this.__isset_notiForNewJoinRequest;

  unsetNotiForNewJoinRequest() {
    this.__isset_notiForNewJoinRequest = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case FAVORITETIMESTAMP:
        return this.favoriteTimestamp;
      case NOTIFORNEWJOINREQUEST:
        return this.notiForNewJoinRequest;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case FAVORITETIMESTAMP:
        if (value == null) {
          unsetFavoriteTimestamp();
        } else {
          this.favoriteTimestamp = value;
        }
        break;

      case NOTIFORNEWJOINREQUEST:
        if (value == null) {
          unsetNotiForNewJoinRequest();
        } else {
          this.notiForNewJoinRequest = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case FAVORITETIMESTAMP:
        return isSetFavoriteTimestamp();
      case NOTIFORNEWJOINREQUEST:
        return isSetNotiForNewJoinRequest();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case FAVORITETIMESTAMP:
          if (field.type == TType.I64) {
            this.favoriteTimestamp = iprot.readI64();
            this.__isset_favoriteTimestamp = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NOTIFORNEWJOINREQUEST:
          if (field.type == TType.BOOL) {
            this.notiForNewJoinRequest = iprot.readBool();
            this.__isset_notiForNewJoinRequest = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_FAVORITE_TIMESTAMP_FIELD_DESC);
    oprot.writeI64(this.favoriteTimestamp);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_NOTI_FOR_NEW_JOIN_REQUEST_FIELD_DESC);
    oprot.writeBool(this.notiForNewJoinRequest);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("SquarePreference(");

    ret.write("favoriteTimestamp:");
    ret.write(this.favoriteTimestamp);

    ret.write(", ");
    ret.write("notiForNewJoinRequest:");
    ret.write(this.notiForNewJoinRequest);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

