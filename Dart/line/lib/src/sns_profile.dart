/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.sns_profile;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class SnsProfile implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("SnsProfile");
  static final TField _SNS_USER_ID_FIELD_DESC = new TField("snsUserId", TType.STRING, 1);
  static final TField _SNS_USER_NAME_FIELD_DESC = new TField("snsUserName", TType.STRING, 2);
  static final TField _EMAIL_FIELD_DESC = new TField("email", TType.STRING, 3);
  static final TField _THUMBNAIL_URL_FIELD_DESC = new TField("thumbnailUrl", TType.STRING, 4);

  String _snsUserId;
  static const int SNSUSERID = 1;
  String _snsUserName;
  static const int SNSUSERNAME = 2;
  String _email;
  static const int EMAIL = 3;
  String _thumbnailUrl;
  static const int THUMBNAILURL = 4;


  SnsProfile() {
  }

  // snsUserId
  String get snsUserId => this._snsUserId;

  set snsUserId(String snsUserId) {
    this._snsUserId = snsUserId;
  }

  bool isSetSnsUserId() => this.snsUserId != null;

  unsetSnsUserId() {
    this.snsUserId = null;
  }

  // snsUserName
  String get snsUserName => this._snsUserName;

  set snsUserName(String snsUserName) {
    this._snsUserName = snsUserName;
  }

  bool isSetSnsUserName() => this.snsUserName != null;

  unsetSnsUserName() {
    this.snsUserName = null;
  }

  // email
  String get email => this._email;

  set email(String email) {
    this._email = email;
  }

  bool isSetEmail() => this.email != null;

  unsetEmail() {
    this.email = null;
  }

  // thumbnailUrl
  String get thumbnailUrl => this._thumbnailUrl;

  set thumbnailUrl(String thumbnailUrl) {
    this._thumbnailUrl = thumbnailUrl;
  }

  bool isSetThumbnailUrl() => this.thumbnailUrl != null;

  unsetThumbnailUrl() {
    this.thumbnailUrl = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SNSUSERID:
        return this.snsUserId;
      case SNSUSERNAME:
        return this.snsUserName;
      case EMAIL:
        return this.email;
      case THUMBNAILURL:
        return this.thumbnailUrl;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SNSUSERID:
        if (value == null) {
          unsetSnsUserId();
        } else {
          this.snsUserId = value;
        }
        break;

      case SNSUSERNAME:
        if (value == null) {
          unsetSnsUserName();
        } else {
          this.snsUserName = value;
        }
        break;

      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          this.email = value;
        }
        break;

      case THUMBNAILURL:
        if (value == null) {
          unsetThumbnailUrl();
        } else {
          this.thumbnailUrl = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SNSUSERID:
        return isSetSnsUserId();
      case SNSUSERNAME:
        return isSetSnsUserName();
      case EMAIL:
        return isSetEmail();
      case THUMBNAILURL:
        return isSetThumbnailUrl();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SNSUSERID:
          if (field.type == TType.STRING) {
            this.snsUserId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SNSUSERNAME:
          if (field.type == TType.STRING) {
            this.snsUserName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EMAIL:
          if (field.type == TType.STRING) {
            this.email = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case THUMBNAILURL:
          if (field.type == TType.STRING) {
            this.thumbnailUrl = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.snsUserId != null) {
      oprot.writeFieldBegin(_SNS_USER_ID_FIELD_DESC);
      oprot.writeString(this.snsUserId);
      oprot.writeFieldEnd();
    }
    if (this.snsUserName != null) {
      oprot.writeFieldBegin(_SNS_USER_NAME_FIELD_DESC);
      oprot.writeString(this.snsUserName);
      oprot.writeFieldEnd();
    }
    if (this.email != null) {
      oprot.writeFieldBegin(_EMAIL_FIELD_DESC);
      oprot.writeString(this.email);
      oprot.writeFieldEnd();
    }
    if (this.thumbnailUrl != null) {
      oprot.writeFieldBegin(_THUMBNAIL_URL_FIELD_DESC);
      oprot.writeString(this.thumbnailUrl);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("SnsProfile(");

    ret.write("snsUserId:");
    if (this.snsUserId == null) {
      ret.write("null");
    } else {
      ret.write(this.snsUserId);
    }

    ret.write(", ");
    ret.write("snsUserName:");
    if (this.snsUserName == null) {
      ret.write("null");
    } else {
      ret.write(this.snsUserName);
    }

    ret.write(", ");
    ret.write("email:");
    if (this.email == null) {
      ret.write("null");
    } else {
      ret.write(this.email);
    }

    ret.write(", ");
    ret.write("thumbnailUrl:");
    if (this.thumbnailUrl == null) {
      ret.write("null");
    } else {
      ret.write(this.thumbnailUrl);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

