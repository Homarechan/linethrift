/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.buddy_on_air;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class BuddyOnAir implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("BuddyOnAir");
  static final TField _MID_FIELD_DESC = new TField("mid", TType.STRING, 1);
  static final TField _FRESHNESS_LIFETIME_FIELD_DESC = new TField("freshnessLifetime", TType.I64, 3);
  static final TField _ON_AIR_ID_FIELD_DESC = new TField("onAirId", TType.STRING, 4);
  static final TField _ON_AIR_FIELD_DESC = new TField("onAir", TType.BOOL, 5);
  static final TField _TEXT_FIELD_DESC = new TField("text", TType.STRING, 11);
  static final TField _VIEWER_COUNT_FIELD_DESC = new TField("viewerCount", TType.I64, 12);
  static final TField _TARGET_COUNT_FIELD_DESC = new TField("targetCount", TType.I64, 13);
  static final TField _ON_AIR_TYPE_FIELD_DESC = new TField("onAirType", TType.I32, 31);
  static final TField _ON_AIR_URLS_FIELD_DESC = new TField("onAirUrls", TType.STRUCT, 32);

  String _mid;
  static const int MID = 1;
  int _freshnessLifetime = 0;
  static const int FRESHNESSLIFETIME = 3;
  String _onAirId;
  static const int ONAIRID = 4;
  bool _onAir = false;
  static const int ONAIR = 5;
  String _text;
  static const int TEXT = 11;
  int _viewerCount = 0;
  static const int VIEWERCOUNT = 12;
  int _targetCount = 0;
  static const int TARGETCOUNT = 13;
  int _onAirType;
  static const int ONAIRTYPE = 31;
  BuddyOnAirUrls _onAirUrls;
  static const int ONAIRURLS = 32;

  bool __isset_freshnessLifetime = false;
  bool __isset_onAir = false;
  bool __isset_viewerCount = false;
  bool __isset_targetCount = false;
  bool __isset_onAirType = false;

  BuddyOnAir() {
  }

  // mid
  String get mid => this._mid;

  set mid(String mid) {
    this._mid = mid;
  }

  bool isSetMid() => this.mid != null;

  unsetMid() {
    this.mid = null;
  }

  // freshnessLifetime
  int get freshnessLifetime => this._freshnessLifetime;

  set freshnessLifetime(int freshnessLifetime) {
    this._freshnessLifetime = freshnessLifetime;
    this.__isset_freshnessLifetime = true;
  }

  bool isSetFreshnessLifetime() => this.__isset_freshnessLifetime;

  unsetFreshnessLifetime() {
    this.__isset_freshnessLifetime = false;
  }

  // onAirId
  String get onAirId => this._onAirId;

  set onAirId(String onAirId) {
    this._onAirId = onAirId;
  }

  bool isSetOnAirId() => this.onAirId != null;

  unsetOnAirId() {
    this.onAirId = null;
  }

  // onAir
  bool get onAir => this._onAir;

  set onAir(bool onAir) {
    this._onAir = onAir;
    this.__isset_onAir = true;
  }

  bool isSetOnAir() => this.__isset_onAir;

  unsetOnAir() {
    this.__isset_onAir = false;
  }

  // text
  String get text => this._text;

  set text(String text) {
    this._text = text;
  }

  bool isSetText() => this.text != null;

  unsetText() {
    this.text = null;
  }

  // viewerCount
  int get viewerCount => this._viewerCount;

  set viewerCount(int viewerCount) {
    this._viewerCount = viewerCount;
    this.__isset_viewerCount = true;
  }

  bool isSetViewerCount() => this.__isset_viewerCount;

  unsetViewerCount() {
    this.__isset_viewerCount = false;
  }

  // targetCount
  int get targetCount => this._targetCount;

  set targetCount(int targetCount) {
    this._targetCount = targetCount;
    this.__isset_targetCount = true;
  }

  bool isSetTargetCount() => this.__isset_targetCount;

  unsetTargetCount() {
    this.__isset_targetCount = false;
  }

  // onAirType
  int get onAirType => this._onAirType;

  set onAirType(int onAirType) {
    this._onAirType = onAirType;
    this.__isset_onAirType = true;
  }

  bool isSetOnAirType() => this.__isset_onAirType;

  unsetOnAirType() {
    this.__isset_onAirType = false;
  }

  // onAirUrls
  BuddyOnAirUrls get onAirUrls => this._onAirUrls;

  set onAirUrls(BuddyOnAirUrls onAirUrls) {
    this._onAirUrls = onAirUrls;
  }

  bool isSetOnAirUrls() => this.onAirUrls != null;

  unsetOnAirUrls() {
    this.onAirUrls = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case MID:
        return this.mid;
      case FRESHNESSLIFETIME:
        return this.freshnessLifetime;
      case ONAIRID:
        return this.onAirId;
      case ONAIR:
        return this.onAir;
      case TEXT:
        return this.text;
      case VIEWERCOUNT:
        return this.viewerCount;
      case TARGETCOUNT:
        return this.targetCount;
      case ONAIRTYPE:
        return this.onAirType;
      case ONAIRURLS:
        return this.onAirUrls;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case MID:
        if (value == null) {
          unsetMid();
        } else {
          this.mid = value;
        }
        break;

      case FRESHNESSLIFETIME:
        if (value == null) {
          unsetFreshnessLifetime();
        } else {
          this.freshnessLifetime = value;
        }
        break;

      case ONAIRID:
        if (value == null) {
          unsetOnAirId();
        } else {
          this.onAirId = value;
        }
        break;

      case ONAIR:
        if (value == null) {
          unsetOnAir();
        } else {
          this.onAir = value;
        }
        break;

      case TEXT:
        if (value == null) {
          unsetText();
        } else {
          this.text = value;
        }
        break;

      case VIEWERCOUNT:
        if (value == null) {
          unsetViewerCount();
        } else {
          this.viewerCount = value;
        }
        break;

      case TARGETCOUNT:
        if (value == null) {
          unsetTargetCount();
        } else {
          this.targetCount = value;
        }
        break;

      case ONAIRTYPE:
        if (value == null) {
          unsetOnAirType();
        } else {
          this.onAirType = value;
        }
        break;

      case ONAIRURLS:
        if (value == null) {
          unsetOnAirUrls();
        } else {
          this.onAirUrls = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case MID:
        return isSetMid();
      case FRESHNESSLIFETIME:
        return isSetFreshnessLifetime();
      case ONAIRID:
        return isSetOnAirId();
      case ONAIR:
        return isSetOnAir();
      case TEXT:
        return isSetText();
      case VIEWERCOUNT:
        return isSetViewerCount();
      case TARGETCOUNT:
        return isSetTargetCount();
      case ONAIRTYPE:
        return isSetOnAirType();
      case ONAIRURLS:
        return isSetOnAirUrls();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case MID:
          if (field.type == TType.STRING) {
            this.mid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FRESHNESSLIFETIME:
          if (field.type == TType.I64) {
            this.freshnessLifetime = iprot.readI64();
            this.__isset_freshnessLifetime = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ONAIRID:
          if (field.type == TType.STRING) {
            this.onAirId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ONAIR:
          if (field.type == TType.BOOL) {
            this.onAir = iprot.readBool();
            this.__isset_onAir = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TEXT:
          if (field.type == TType.STRING) {
            this.text = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case VIEWERCOUNT:
          if (field.type == TType.I64) {
            this.viewerCount = iprot.readI64();
            this.__isset_viewerCount = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TARGETCOUNT:
          if (field.type == TType.I64) {
            this.targetCount = iprot.readI64();
            this.__isset_targetCount = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ONAIRTYPE:
          if (field.type == TType.I32) {
            this.onAirType = iprot.readI32();
            this.__isset_onAirType = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ONAIRURLS:
          if (field.type == TType.STRUCT) {
            this.onAirUrls = new BuddyOnAirUrls();
            this.onAirUrls.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.mid != null) {
      oprot.writeFieldBegin(_MID_FIELD_DESC);
      oprot.writeString(this.mid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_FRESHNESS_LIFETIME_FIELD_DESC);
    oprot.writeI64(this.freshnessLifetime);
    oprot.writeFieldEnd();
    if (this.onAirId != null) {
      oprot.writeFieldBegin(_ON_AIR_ID_FIELD_DESC);
      oprot.writeString(this.onAirId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_ON_AIR_FIELD_DESC);
    oprot.writeBool(this.onAir);
    oprot.writeFieldEnd();
    if (this.text != null) {
      oprot.writeFieldBegin(_TEXT_FIELD_DESC);
      oprot.writeString(this.text);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_VIEWER_COUNT_FIELD_DESC);
    oprot.writeI64(this.viewerCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_TARGET_COUNT_FIELD_DESC);
    oprot.writeI64(this.targetCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_ON_AIR_TYPE_FIELD_DESC);
    oprot.writeI32(this.onAirType);
    oprot.writeFieldEnd();
    if (this.onAirUrls != null) {
      oprot.writeFieldBegin(_ON_AIR_URLS_FIELD_DESC);
      this.onAirUrls.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("BuddyOnAir(");

    ret.write("mid:");
    if (this.mid == null) {
      ret.write("null");
    } else {
      ret.write(this.mid);
    }

    ret.write(", ");
    ret.write("freshnessLifetime:");
    ret.write(this.freshnessLifetime);

    ret.write(", ");
    ret.write("onAirId:");
    if (this.onAirId == null) {
      ret.write("null");
    } else {
      ret.write(this.onAirId);
    }

    ret.write(", ");
    ret.write("onAir:");
    ret.write(this.onAir);

    ret.write(", ");
    ret.write("text:");
    if (this.text == null) {
      ret.write("null");
    } else {
      ret.write(this.text);
    }

    ret.write(", ");
    ret.write("viewerCount:");
    ret.write(this.viewerCount);

    ret.write(", ");
    ret.write("targetCount:");
    ret.write(this.targetCount);

    ret.write(", ");
    ret.write("onAirType:");
    String onAirType_name = BuddyOnAirType.VALUES_TO_NAMES[this.onAirType];
    if (onAirType_name != null) {
      ret.write(onAirType_name);
      ret.write(" (");
    }
    ret.write(this.onAirType);
    if (onAirType_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("onAirUrls:");
    if (this.onAirUrls == null) {
      ret.write("null");
    } else {
      ret.write(this.onAirUrls);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetOnAirType() && !BuddyOnAirType.VALID_VALUES.contains(onAirType)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'onAirType' has been assigned the invalid value $onAirType");
    }
  }

}

