/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.search_result_item;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class SearchResultItem implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("SearchResultItem");
  static final TField _ID_FIELD_DESC = new TField("id", TType.STRING, 1);
  static final TField _ITEM_TYPE_FIELD_DESC = new TField("ItemType", TType.I32, 2);
  static final TField _ITEM_FIELD_DESC = new TField("item", TType.STRUCT, 3);
  static final TField _TITLE_FIELD_DESC = new TField("title", TType.STRING, 4);
  static final TField _SUB1_FIELD_DESC = new TField("sub1", TType.STRING, 5);
  static final TField _SUB2_FIELD_DESC = new TField("sub2", TType.STRING, 6);
  static final TField _ICON_URL_FIELD_DESC = new TField("iconUrl", TType.STRING, 7);
  static final TField _TITLE_LINK_FIELD_DESC = new TField("titleLink", TType.STRING, 8);
  static final TField _ICON_LINK_FIELD_DESC = new TField("iconLink", TType.STRING, 9);
  static final TField _DISPLAY_TEMPLATE_FIELD_DESC = new TField("displayTemplate", TType.STRING, 10);
  static final TField _ADDITIONAL_INFO_FIELD_DESC = new TField("additionalInfo", TType.LIST, 11);

  String _id;
  static const int ID = 1;
  int _itemType = 0;
  static const int ITEMTYPE = 2;
  SearchItemUnion _item;
  static const int ITEM = 3;
  String _title;
  static const int TITLE = 4;
  String _sub1;
  static const int SUB1 = 5;
  String _sub2;
  static const int SUB2 = 6;
  String _iconUrl;
  static const int ICONURL = 7;
  String _titleLink;
  static const int TITLELINK = 8;
  String _iconLink;
  static const int ICONLINK = 9;
  String _displayTemplate;
  static const int DISPLAYTEMPLATE = 10;
  List<AdditionalInfoItem> _additionalInfo;
  static const int ADDITIONALINFO = 11;

  bool __isset_itemType = false;

  SearchResultItem() {
  }

  // id
  String get id => this._id;

  set id(String id) {
    this._id = id;
  }

  bool isSetId() => this.id != null;

  unsetId() {
    this.id = null;
  }

  // itemType
  int get itemType => this._itemType;

  set itemType(int itemType) {
    this._itemType = itemType;
    this.__isset_itemType = true;
  }

  bool isSetItemType() => this.__isset_itemType;

  unsetItemType() {
    this.__isset_itemType = false;
  }

  // item
  SearchItemUnion get item => this._item;

  set item(SearchItemUnion item) {
    this._item = item;
  }

  bool isSetItem() => this.item != null;

  unsetItem() {
    this.item = null;
  }

  // title
  String get title => this._title;

  set title(String title) {
    this._title = title;
  }

  bool isSetTitle() => this.title != null;

  unsetTitle() {
    this.title = null;
  }

  // sub1
  String get sub1 => this._sub1;

  set sub1(String sub1) {
    this._sub1 = sub1;
  }

  bool isSetSub1() => this.sub1 != null;

  unsetSub1() {
    this.sub1 = null;
  }

  // sub2
  String get sub2 => this._sub2;

  set sub2(String sub2) {
    this._sub2 = sub2;
  }

  bool isSetSub2() => this.sub2 != null;

  unsetSub2() {
    this.sub2 = null;
  }

  // iconUrl
  String get iconUrl => this._iconUrl;

  set iconUrl(String iconUrl) {
    this._iconUrl = iconUrl;
  }

  bool isSetIconUrl() => this.iconUrl != null;

  unsetIconUrl() {
    this.iconUrl = null;
  }

  // titleLink
  String get titleLink => this._titleLink;

  set titleLink(String titleLink) {
    this._titleLink = titleLink;
  }

  bool isSetTitleLink() => this.titleLink != null;

  unsetTitleLink() {
    this.titleLink = null;
  }

  // iconLink
  String get iconLink => this._iconLink;

  set iconLink(String iconLink) {
    this._iconLink = iconLink;
  }

  bool isSetIconLink() => this.iconLink != null;

  unsetIconLink() {
    this.iconLink = null;
  }

  // displayTemplate
  String get displayTemplate => this._displayTemplate;

  set displayTemplate(String displayTemplate) {
    this._displayTemplate = displayTemplate;
  }

  bool isSetDisplayTemplate() => this.displayTemplate != null;

  unsetDisplayTemplate() {
    this.displayTemplate = null;
  }

  // additionalInfo
  List<AdditionalInfoItem> get additionalInfo => this._additionalInfo;

  set additionalInfo(List<AdditionalInfoItem> additionalInfo) {
    this._additionalInfo = additionalInfo;
  }

  bool isSetAdditionalInfo() => this.additionalInfo != null;

  unsetAdditionalInfo() {
    this.additionalInfo = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case ID:
        return this.id;
      case ITEMTYPE:
        return this.itemType;
      case ITEM:
        return this.item;
      case TITLE:
        return this.title;
      case SUB1:
        return this.sub1;
      case SUB2:
        return this.sub2;
      case ICONURL:
        return this.iconUrl;
      case TITLELINK:
        return this.titleLink;
      case ICONLINK:
        return this.iconLink;
      case DISPLAYTEMPLATE:
        return this.displayTemplate;
      case ADDITIONALINFO:
        return this.additionalInfo;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          this.id = value;
        }
        break;

      case ITEMTYPE:
        if (value == null) {
          unsetItemType();
        } else {
          this.itemType = value;
        }
        break;

      case ITEM:
        if (value == null) {
          unsetItem();
        } else {
          this.item = value;
        }
        break;

      case TITLE:
        if (value == null) {
          unsetTitle();
        } else {
          this.title = value;
        }
        break;

      case SUB1:
        if (value == null) {
          unsetSub1();
        } else {
          this.sub1 = value;
        }
        break;

      case SUB2:
        if (value == null) {
          unsetSub2();
        } else {
          this.sub2 = value;
        }
        break;

      case ICONURL:
        if (value == null) {
          unsetIconUrl();
        } else {
          this.iconUrl = value;
        }
        break;

      case TITLELINK:
        if (value == null) {
          unsetTitleLink();
        } else {
          this.titleLink = value;
        }
        break;

      case ICONLINK:
        if (value == null) {
          unsetIconLink();
        } else {
          this.iconLink = value;
        }
        break;

      case DISPLAYTEMPLATE:
        if (value == null) {
          unsetDisplayTemplate();
        } else {
          this.displayTemplate = value;
        }
        break;

      case ADDITIONALINFO:
        if (value == null) {
          unsetAdditionalInfo();
        } else {
          this.additionalInfo = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case ID:
        return isSetId();
      case ITEMTYPE:
        return isSetItemType();
      case ITEM:
        return isSetItem();
      case TITLE:
        return isSetTitle();
      case SUB1:
        return isSetSub1();
      case SUB2:
        return isSetSub2();
      case ICONURL:
        return isSetIconUrl();
      case TITLELINK:
        return isSetTitleLink();
      case ICONLINK:
        return isSetIconLink();
      case DISPLAYTEMPLATE:
        return isSetDisplayTemplate();
      case ADDITIONALINFO:
        return isSetAdditionalInfo();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ID:
          if (field.type == TType.STRING) {
            this.id = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ITEMTYPE:
          if (field.type == TType.I32) {
            this.itemType = iprot.readI32();
            this.__isset_itemType = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ITEM:
          if (field.type == TType.STRUCT) {
            this.item = new SearchItemUnion();
            this.item.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TITLE:
          if (field.type == TType.STRING) {
            this.title = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SUB1:
          if (field.type == TType.STRING) {
            this.sub1 = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SUB2:
          if (field.type == TType.STRING) {
            this.sub2 = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ICONURL:
          if (field.type == TType.STRING) {
            this.iconUrl = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TITLELINK:
          if (field.type == TType.STRING) {
            this.titleLink = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ICONLINK:
          if (field.type == TType.STRING) {
            this.iconLink = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DISPLAYTEMPLATE:
          if (field.type == TType.STRING) {
            this.displayTemplate = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ADDITIONALINFO:
          if (field.type == TType.LIST) {
            {
              TList _list66 = iprot.readListBegin();
              this.additionalInfo = new List<AdditionalInfoItem>();
              for (int _i67 = 0; _i67 < _list66.length; ++_i67) {
                AdditionalInfoItem _elem68;
                _elem68 = new AdditionalInfoItem();
                _elem68.read(iprot);
                this.additionalInfo.add(_elem68);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.id != null) {
      oprot.writeFieldBegin(_ID_FIELD_DESC);
      oprot.writeString(this.id);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_ITEM_TYPE_FIELD_DESC);
    oprot.writeI32(this.itemType);
    oprot.writeFieldEnd();
    if (this.item != null) {
      oprot.writeFieldBegin(_ITEM_FIELD_DESC);
      this.item.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.title != null) {
      oprot.writeFieldBegin(_TITLE_FIELD_DESC);
      oprot.writeString(this.title);
      oprot.writeFieldEnd();
    }
    if (this.sub1 != null) {
      oprot.writeFieldBegin(_SUB1_FIELD_DESC);
      oprot.writeString(this.sub1);
      oprot.writeFieldEnd();
    }
    if (this.sub2 != null) {
      oprot.writeFieldBegin(_SUB2_FIELD_DESC);
      oprot.writeString(this.sub2);
      oprot.writeFieldEnd();
    }
    if (this.iconUrl != null) {
      oprot.writeFieldBegin(_ICON_URL_FIELD_DESC);
      oprot.writeString(this.iconUrl);
      oprot.writeFieldEnd();
    }
    if (this.titleLink != null) {
      oprot.writeFieldBegin(_TITLE_LINK_FIELD_DESC);
      oprot.writeString(this.titleLink);
      oprot.writeFieldEnd();
    }
    if (this.iconLink != null) {
      oprot.writeFieldBegin(_ICON_LINK_FIELD_DESC);
      oprot.writeString(this.iconLink);
      oprot.writeFieldEnd();
    }
    if (this.displayTemplate != null) {
      oprot.writeFieldBegin(_DISPLAY_TEMPLATE_FIELD_DESC);
      oprot.writeString(this.displayTemplate);
      oprot.writeFieldEnd();
    }
    if (this.additionalInfo != null) {
      oprot.writeFieldBegin(_ADDITIONAL_INFO_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.additionalInfo.length));
        for (var elem69 in this.additionalInfo) {
          elem69.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("SearchResultItem(");

    ret.write("id:");
    if (this.id == null) {
      ret.write("null");
    } else {
      ret.write(this.id);
    }

    ret.write(", ");
    ret.write("itemType:");
    ret.write(this.itemType);

    ret.write(", ");
    ret.write("item:");
    if (this.item == null) {
      ret.write("null");
    } else {
      ret.write(this.item);
    }

    ret.write(", ");
    ret.write("title:");
    if (this.title == null) {
      ret.write("null");
    } else {
      ret.write(this.title);
    }

    ret.write(", ");
    ret.write("sub1:");
    if (this.sub1 == null) {
      ret.write("null");
    } else {
      ret.write(this.sub1);
    }

    ret.write(", ");
    ret.write("sub2:");
    if (this.sub2 == null) {
      ret.write("null");
    } else {
      ret.write(this.sub2);
    }

    ret.write(", ");
    ret.write("iconUrl:");
    if (this.iconUrl == null) {
      ret.write("null");
    } else {
      ret.write(this.iconUrl);
    }

    ret.write(", ");
    ret.write("titleLink:");
    if (this.titleLink == null) {
      ret.write("null");
    } else {
      ret.write(this.titleLink);
    }

    ret.write(", ");
    ret.write("iconLink:");
    if (this.iconLink == null) {
      ret.write("null");
    } else {
      ret.write(this.iconLink);
    }

    ret.write(", ");
    ret.write("displayTemplate:");
    if (this.displayTemplate == null) {
      ret.write("null");
    } else {
      ret.write(this.displayTemplate);
    }

    ret.write(", ");
    ret.write("additionalInfo:");
    if (this.additionalInfo == null) {
      ret.write("null");
    } else {
      ret.write(this.additionalInfo);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

