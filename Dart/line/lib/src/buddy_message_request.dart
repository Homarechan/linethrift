/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.buddy_message_request;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class BuddyMessageRequest implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("BuddyMessageRequest");
  static final TField _CONTENT_TYPE_FIELD_DESC = new TField("contentType", TType.I32, 1);
  static final TField _TEXT_FIELD_DESC = new TField("text", TType.STRING, 2);
  static final TField _LOCATION_FIELD_DESC = new TField("location", TType.STRUCT, 3);
  static final TField _CONTENT_FIELD_DESC = new TField("content", TType.STRING, 4);
  static final TField _CONTENT_METADATA_FIELD_DESC = new TField("contentMetadata", TType.MAP, 5);

  int _contentType;
  static const int CONTENTTYPE = 1;
  String _text;
  static const int TEXT = 2;
  Location _location;
  static const int LOCATION = 3;
  Uint8List _content;
  static const int CONTENT = 4;
  Map<String, String> _contentMetadata;
  static const int CONTENTMETADATA = 5;

  bool __isset_contentType = false;

  BuddyMessageRequest() {
  }

  // contentType
  int get contentType => this._contentType;

  set contentType(int contentType) {
    this._contentType = contentType;
    this.__isset_contentType = true;
  }

  bool isSetContentType() => this.__isset_contentType;

  unsetContentType() {
    this.__isset_contentType = false;
  }

  // text
  String get text => this._text;

  set text(String text) {
    this._text = text;
  }

  bool isSetText() => this.text != null;

  unsetText() {
    this.text = null;
  }

  // location
  Location get location => this._location;

  set location(Location location) {
    this._location = location;
  }

  bool isSetLocation() => this.location != null;

  unsetLocation() {
    this.location = null;
  }

  // content
  Uint8List get content => this._content;

  set content(Uint8List content) {
    this._content = content;
  }

  bool isSetContent() => this.content != null;

  unsetContent() {
    this.content = null;
  }

  // contentMetadata
  Map<String, String> get contentMetadata => this._contentMetadata;

  set contentMetadata(Map<String, String> contentMetadata) {
    this._contentMetadata = contentMetadata;
  }

  bool isSetContentMetadata() => this.contentMetadata != null;

  unsetContentMetadata() {
    this.contentMetadata = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case CONTENTTYPE:
        return this.contentType;
      case TEXT:
        return this.text;
      case LOCATION:
        return this.location;
      case CONTENT:
        return this.content;
      case CONTENTMETADATA:
        return this.contentMetadata;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case CONTENTTYPE:
        if (value == null) {
          unsetContentType();
        } else {
          this.contentType = value;
        }
        break;

      case TEXT:
        if (value == null) {
          unsetText();
        } else {
          this.text = value;
        }
        break;

      case LOCATION:
        if (value == null) {
          unsetLocation();
        } else {
          this.location = value;
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          this.content = value;
        }
        break;

      case CONTENTMETADATA:
        if (value == null) {
          unsetContentMetadata();
        } else {
          this.contentMetadata = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case CONTENTTYPE:
        return isSetContentType();
      case TEXT:
        return isSetText();
      case LOCATION:
        return isSetLocation();
      case CONTENT:
        return isSetContent();
      case CONTENTMETADATA:
        return isSetContentMetadata();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case CONTENTTYPE:
          if (field.type == TType.I32) {
            this.contentType = iprot.readI32();
            this.__isset_contentType = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TEXT:
          if (field.type == TType.STRING) {
            this.text = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LOCATION:
          if (field.type == TType.STRUCT) {
            this.location = new Location();
            this.location.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CONTENT:
          if (field.type == TType.STRING) {
            this.content = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CONTENTMETADATA:
          if (field.type == TType.MAP) {
            {
              TMap _map64 = iprot.readMapBegin();
              this.contentMetadata = new Map<String, String>();
              for (int _i65 = 0; _i65 < _map64.length; ++_i65) {
                String _key66;
                String _val67;
                _key66 = iprot.readString();
                _val67 = iprot.readString();
                this.contentMetadata[_key66] = _val67;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_CONTENT_TYPE_FIELD_DESC);
    oprot.writeI32(this.contentType);
    oprot.writeFieldEnd();
    if (this.text != null) {
      oprot.writeFieldBegin(_TEXT_FIELD_DESC);
      oprot.writeString(this.text);
      oprot.writeFieldEnd();
    }
    if (this.location != null) {
      oprot.writeFieldBegin(_LOCATION_FIELD_DESC);
      this.location.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.content != null) {
      oprot.writeFieldBegin(_CONTENT_FIELD_DESC);
      oprot.writeBinary(this.content);
      oprot.writeFieldEnd();
    }
    if (this.contentMetadata != null) {
      oprot.writeFieldBegin(_CONTENT_METADATA_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.contentMetadata.length));
        for (var elem69 in this.contentMetadata.keys) {
          oprot.writeString(elem69);
          oprot.writeString(this.contentMetadata[elem69]);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("BuddyMessageRequest(");

    ret.write("contentType:");
    String contentType_name = ContentType.VALUES_TO_NAMES[this.contentType];
    if (contentType_name != null) {
      ret.write(contentType_name);
      ret.write(" (");
    }
    ret.write(this.contentType);
    if (contentType_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("text:");
    if (this.text == null) {
      ret.write("null");
    } else {
      ret.write(this.text);
    }

    ret.write(", ");
    ret.write("location:");
    if (this.location == null) {
      ret.write("null");
    } else {
      ret.write(this.location);
    }

    ret.write(", ");
    ret.write("content:");
    if (this.content == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("contentMetadata:");
    if (this.contentMetadata == null) {
      ret.write("null");
    } else {
      ret.write(this.contentMetadata);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetContentType() && !ContentType.VALID_VALUES.contains(contentType)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'contentType' has been assigned the invalid value $contentType");
    }
  }

}

