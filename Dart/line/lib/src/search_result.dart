/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.search_result;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class SearchResult implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("SearchResult");
  static final TField _SID_FIELD_DESC = new TField("sid", TType.STRING, 1);
  static final TField _COLLECTIONS_FIELD_DESC = new TField("collections", TType.LIST, 2);
  static final TField _START_FIELD_DESC = new TField("start", TType.I32, 3);
  static final TField _LENGTH_FIELD_DESC = new TField("length", TType.I32, 4);

  String _sid;
  static const int SID = 1;
  List<SearchResultCollection> _collections;
  static const int COLLECTIONS = 2;
  int _start = 0;
  static const int START = 3;
  int _length = 0;
  static const int LENGTH = 4;

  bool __isset_start = false;
  bool __isset_length = false;

  SearchResult() {
  }

  // sid
  String get sid => this._sid;

  set sid(String sid) {
    this._sid = sid;
  }

  bool isSetSid() => this.sid != null;

  unsetSid() {
    this.sid = null;
  }

  // collections
  List<SearchResultCollection> get collections => this._collections;

  set collections(List<SearchResultCollection> collections) {
    this._collections = collections;
  }

  bool isSetCollections() => this.collections != null;

  unsetCollections() {
    this.collections = null;
  }

  // start
  int get start => this._start;

  set start(int start) {
    this._start = start;
    this.__isset_start = true;
  }

  bool isSetStart() => this.__isset_start;

  unsetStart() {
    this.__isset_start = false;
  }

  // length
  int get length => this._length;

  set length(int length) {
    this._length = length;
    this.__isset_length = true;
  }

  bool isSetLength() => this.__isset_length;

  unsetLength() {
    this.__isset_length = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SID:
        return this.sid;
      case COLLECTIONS:
        return this.collections;
      case START:
        return this.start;
      case LENGTH:
        return this.length;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SID:
        if (value == null) {
          unsetSid();
        } else {
          this.sid = value;
        }
        break;

      case COLLECTIONS:
        if (value == null) {
          unsetCollections();
        } else {
          this.collections = value;
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          this.start = value;
        }
        break;

      case LENGTH:
        if (value == null) {
          unsetLength();
        } else {
          this.length = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SID:
        return isSetSid();
      case COLLECTIONS:
        return isSetCollections();
      case START:
        return isSetStart();
      case LENGTH:
        return isSetLength();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SID:
          if (field.type == TType.STRING) {
            this.sid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COLLECTIONS:
          if (field.type == TType.LIST) {
            {
              TList _list78 = iprot.readListBegin();
              this.collections = new List<SearchResultCollection>();
              for (int _i79 = 0; _i79 < _list78.length; ++_i79) {
                SearchResultCollection _elem80;
                _elem80 = new SearchResultCollection();
                _elem80.read(iprot);
                this.collections.add(_elem80);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case START:
          if (field.type == TType.I32) {
            this.start = iprot.readI32();
            this.__isset_start = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LENGTH:
          if (field.type == TType.I32) {
            this.length = iprot.readI32();
            this.__isset_length = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.sid != null) {
      oprot.writeFieldBegin(_SID_FIELD_DESC);
      oprot.writeString(this.sid);
      oprot.writeFieldEnd();
    }
    if (this.collections != null) {
      oprot.writeFieldBegin(_COLLECTIONS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.collections.length));
        for (var elem81 in this.collections) {
          elem81.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_START_FIELD_DESC);
    oprot.writeI32(this.start);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_LENGTH_FIELD_DESC);
    oprot.writeI32(this.length);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("SearchResult(");

    ret.write("sid:");
    if (this.sid == null) {
      ret.write("null");
    } else {
      ret.write(this.sid);
    }

    ret.write(", ");
    ret.write("collections:");
    if (this.collections == null) {
      ret.write("null");
    } else {
      ret.write(this.collections);
    }

    ret.write(", ");
    ret.write("start:");
    ret.write(this.start);

    ret.write(", ");
    ret.write("length:");
    ret.write(this.length);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

