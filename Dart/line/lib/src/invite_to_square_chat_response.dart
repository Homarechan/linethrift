/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.invite_to_square_chat_response;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class InviteToSquareChatResponse implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("InviteToSquareChatResponse");
  static final TField _INVITEE_MIDS_FIELD_DESC = new TField("inviteeMids", TType.LIST, 1);

  List<String> _inviteeMids;
  static const int INVITEEMIDS = 1;


  InviteToSquareChatResponse() {
  }

  // inviteeMids
  List<String> get inviteeMids => this._inviteeMids;

  set inviteeMids(List<String> inviteeMids) {
    this._inviteeMids = inviteeMids;
  }

  bool isSetInviteeMids() => this.inviteeMids != null;

  unsetInviteeMids() {
    this.inviteeMids = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case INVITEEMIDS:
        return this.inviteeMids;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case INVITEEMIDS:
        if (value == null) {
          unsetInviteeMids();
        } else {
          this.inviteeMids = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case INVITEEMIDS:
        return isSetInviteeMids();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case INVITEEMIDS:
          if (field.type == TType.LIST) {
            {
              TList _list378 = iprot.readListBegin();
              this.inviteeMids = new List<String>();
              for (int _i379 = 0; _i379 < _list378.length; ++_i379) {
                String _elem380;
                _elem380 = iprot.readString();
                this.inviteeMids.add(_elem380);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.inviteeMids != null) {
      oprot.writeFieldBegin(_INVITEE_MIDS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.inviteeMids.length));
        for (var elem381 in this.inviteeMids) {
          oprot.writeString(elem381);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("InviteToSquareChatResponse(");

    ret.write("inviteeMids:");
    if (this.inviteeMids == null) {
      ret.write("null");
    } else {
      ret.write(this.inviteeMids);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

