/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.square_event;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class SquareEvent implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("SquareEvent");
  static final TField _CREATED_TIME_FIELD_DESC = new TField("createdTime", TType.I64, 2);
  static final TField _TYPE_FIELD_DESC = new TField("type", TType.I32, 3);
  static final TField _PAYLOAD_FIELD_DESC = new TField("payload", TType.STRUCT, 4);
  static final TField _SYNC_TOKEN_FIELD_DESC = new TField("syncToken", TType.STRING, 5);
  static final TField _EVENT_STATUS_FIELD_DESC = new TField("eventStatus", TType.I32, 6);

  int _createdTime = 0;
  static const int CREATEDTIME = 2;
  int _type;
  static const int TYPE = 3;
  SquareEventPayload _payload;
  static const int PAYLOAD = 4;
  String _syncToken;
  static const int SYNCTOKEN = 5;
  int _eventStatus;
  static const int EVENTSTATUS = 6;

  bool __isset_createdTime = false;
  bool __isset_type = false;
  bool __isset_eventStatus = false;

  SquareEvent() {
  }

  // createdTime
  int get createdTime => this._createdTime;

  set createdTime(int createdTime) {
    this._createdTime = createdTime;
    this.__isset_createdTime = true;
  }

  bool isSetCreatedTime() => this.__isset_createdTime;

  unsetCreatedTime() {
    this.__isset_createdTime = false;
  }

  // type
  int get type => this._type;

  set type(int type) {
    this._type = type;
    this.__isset_type = true;
  }

  bool isSetType() => this.__isset_type;

  unsetType() {
    this.__isset_type = false;
  }

  // payload
  SquareEventPayload get payload => this._payload;

  set payload(SquareEventPayload payload) {
    this._payload = payload;
  }

  bool isSetPayload() => this.payload != null;

  unsetPayload() {
    this.payload = null;
  }

  // syncToken
  String get syncToken => this._syncToken;

  set syncToken(String syncToken) {
    this._syncToken = syncToken;
  }

  bool isSetSyncToken() => this.syncToken != null;

  unsetSyncToken() {
    this.syncToken = null;
  }

  // eventStatus
  int get eventStatus => this._eventStatus;

  set eventStatus(int eventStatus) {
    this._eventStatus = eventStatus;
    this.__isset_eventStatus = true;
  }

  bool isSetEventStatus() => this.__isset_eventStatus;

  unsetEventStatus() {
    this.__isset_eventStatus = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case CREATEDTIME:
        return this.createdTime;
      case TYPE:
        return this.type;
      case PAYLOAD:
        return this.payload;
      case SYNCTOKEN:
        return this.syncToken;
      case EVENTSTATUS:
        return this.eventStatus;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case CREATEDTIME:
        if (value == null) {
          unsetCreatedTime();
        } else {
          this.createdTime = value;
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          this.type = value;
        }
        break;

      case PAYLOAD:
        if (value == null) {
          unsetPayload();
        } else {
          this.payload = value;
        }
        break;

      case SYNCTOKEN:
        if (value == null) {
          unsetSyncToken();
        } else {
          this.syncToken = value;
        }
        break;

      case EVENTSTATUS:
        if (value == null) {
          unsetEventStatus();
        } else {
          this.eventStatus = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case CREATEDTIME:
        return isSetCreatedTime();
      case TYPE:
        return isSetType();
      case PAYLOAD:
        return isSetPayload();
      case SYNCTOKEN:
        return isSetSyncToken();
      case EVENTSTATUS:
        return isSetEventStatus();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case CREATEDTIME:
          if (field.type == TType.I64) {
            this.createdTime = iprot.readI64();
            this.__isset_createdTime = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TYPE:
          if (field.type == TType.I32) {
            this.type = iprot.readI32();
            this.__isset_type = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PAYLOAD:
          if (field.type == TType.STRUCT) {
            this.payload = new SquareEventPayload();
            this.payload.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SYNCTOKEN:
          if (field.type == TType.STRING) {
            this.syncToken = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EVENTSTATUS:
          if (field.type == TType.I32) {
            this.eventStatus = iprot.readI32();
            this.__isset_eventStatus = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_CREATED_TIME_FIELD_DESC);
    oprot.writeI64(this.createdTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_TYPE_FIELD_DESC);
    oprot.writeI32(this.type);
    oprot.writeFieldEnd();
    if (this.payload != null) {
      oprot.writeFieldBegin(_PAYLOAD_FIELD_DESC);
      this.payload.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.syncToken != null) {
      oprot.writeFieldBegin(_SYNC_TOKEN_FIELD_DESC);
      oprot.writeString(this.syncToken);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_EVENT_STATUS_FIELD_DESC);
    oprot.writeI32(this.eventStatus);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("SquareEvent(");

    ret.write("createdTime:");
    ret.write(this.createdTime);

    ret.write(", ");
    ret.write("type:");
    String type_name = SquareEventType.VALUES_TO_NAMES[this.type];
    if (type_name != null) {
      ret.write(type_name);
      ret.write(" (");
    }
    ret.write(this.type);
    if (type_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("payload:");
    if (this.payload == null) {
      ret.write("null");
    } else {
      ret.write(this.payload);
    }

    ret.write(", ");
    ret.write("syncToken:");
    if (this.syncToken == null) {
      ret.write("null");
    } else {
      ret.write(this.syncToken);
    }

    ret.write(", ");
    ret.write("eventStatus:");
    String eventStatus_name = SquareEventStatus.VALUES_TO_NAMES[this.eventStatus];
    if (eventStatus_name != null) {
      ret.write(eventStatus_name);
      ret.write(" (");
    }
    ret.write(this.eventStatus);
    if (eventStatus_name != null) {
      ret.write(")");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetType() && !SquareEventType.VALID_VALUES.contains(type)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'type' has been assigned the invalid value $type");
    }
    if (isSetEventStatus() && !SquareEventStatus.VALID_VALUES.contains(eventStatus)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'eventStatus' has been assigned the invalid value $eventStatus");
    }
  }

}

