/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.phone_info_for_channel;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class PhoneInfoForChannel implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("PhoneInfoForChannel");
  static final TField _MID_FIELD_DESC = new TField("mid", TType.STRING, 1);
  static final TField _NORMALIZED_PHONE_NUMBER_FIELD_DESC = new TField("normalizedPhoneNumber", TType.STRING, 2);
  static final TField _ALLOWED_TO_SEARCH_BY_PHONE_NUMBER_FIELD_DESC = new TField("allowedToSearchByPhoneNumber", TType.BOOL, 3);
  static final TField _ALLOWED_TO_RECEIVE_MESSAGE_FROM_NON_FRIEND_FIELD_DESC = new TField("allowedToReceiveMessageFromNonFriend", TType.BOOL, 4);
  static final TField _REGION_FIELD_DESC = new TField("region", TType.STRING, 5);

  String _mid;
  static const int MID = 1;
  String _normalizedPhoneNumber;
  static const int NORMALIZEDPHONENUMBER = 2;
  bool _allowedToSearchByPhoneNumber = false;
  static const int ALLOWEDTOSEARCHBYPHONENUMBER = 3;
  bool _allowedToReceiveMessageFromNonFriend = false;
  static const int ALLOWEDTORECEIVEMESSAGEFROMNONFRIEND = 4;
  String _region;
  static const int REGION = 5;

  bool __isset_allowedToSearchByPhoneNumber = false;
  bool __isset_allowedToReceiveMessageFromNonFriend = false;

  PhoneInfoForChannel() {
  }

  // mid
  String get mid => this._mid;

  set mid(String mid) {
    this._mid = mid;
  }

  bool isSetMid() => this.mid != null;

  unsetMid() {
    this.mid = null;
  }

  // normalizedPhoneNumber
  String get normalizedPhoneNumber => this._normalizedPhoneNumber;

  set normalizedPhoneNumber(String normalizedPhoneNumber) {
    this._normalizedPhoneNumber = normalizedPhoneNumber;
  }

  bool isSetNormalizedPhoneNumber() => this.normalizedPhoneNumber != null;

  unsetNormalizedPhoneNumber() {
    this.normalizedPhoneNumber = null;
  }

  // allowedToSearchByPhoneNumber
  bool get allowedToSearchByPhoneNumber => this._allowedToSearchByPhoneNumber;

  set allowedToSearchByPhoneNumber(bool allowedToSearchByPhoneNumber) {
    this._allowedToSearchByPhoneNumber = allowedToSearchByPhoneNumber;
    this.__isset_allowedToSearchByPhoneNumber = true;
  }

  bool isSetAllowedToSearchByPhoneNumber() => this.__isset_allowedToSearchByPhoneNumber;

  unsetAllowedToSearchByPhoneNumber() {
    this.__isset_allowedToSearchByPhoneNumber = false;
  }

  // allowedToReceiveMessageFromNonFriend
  bool get allowedToReceiveMessageFromNonFriend => this._allowedToReceiveMessageFromNonFriend;

  set allowedToReceiveMessageFromNonFriend(bool allowedToReceiveMessageFromNonFriend) {
    this._allowedToReceiveMessageFromNonFriend = allowedToReceiveMessageFromNonFriend;
    this.__isset_allowedToReceiveMessageFromNonFriend = true;
  }

  bool isSetAllowedToReceiveMessageFromNonFriend() => this.__isset_allowedToReceiveMessageFromNonFriend;

  unsetAllowedToReceiveMessageFromNonFriend() {
    this.__isset_allowedToReceiveMessageFromNonFriend = false;
  }

  // region
  String get region => this._region;

  set region(String region) {
    this._region = region;
  }

  bool isSetRegion() => this.region != null;

  unsetRegion() {
    this.region = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case MID:
        return this.mid;
      case NORMALIZEDPHONENUMBER:
        return this.normalizedPhoneNumber;
      case ALLOWEDTOSEARCHBYPHONENUMBER:
        return this.allowedToSearchByPhoneNumber;
      case ALLOWEDTORECEIVEMESSAGEFROMNONFRIEND:
        return this.allowedToReceiveMessageFromNonFriend;
      case REGION:
        return this.region;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case MID:
        if (value == null) {
          unsetMid();
        } else {
          this.mid = value;
        }
        break;

      case NORMALIZEDPHONENUMBER:
        if (value == null) {
          unsetNormalizedPhoneNumber();
        } else {
          this.normalizedPhoneNumber = value;
        }
        break;

      case ALLOWEDTOSEARCHBYPHONENUMBER:
        if (value == null) {
          unsetAllowedToSearchByPhoneNumber();
        } else {
          this.allowedToSearchByPhoneNumber = value;
        }
        break;

      case ALLOWEDTORECEIVEMESSAGEFROMNONFRIEND:
        if (value == null) {
          unsetAllowedToReceiveMessageFromNonFriend();
        } else {
          this.allowedToReceiveMessageFromNonFriend = value;
        }
        break;

      case REGION:
        if (value == null) {
          unsetRegion();
        } else {
          this.region = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case MID:
        return isSetMid();
      case NORMALIZEDPHONENUMBER:
        return isSetNormalizedPhoneNumber();
      case ALLOWEDTOSEARCHBYPHONENUMBER:
        return isSetAllowedToSearchByPhoneNumber();
      case ALLOWEDTORECEIVEMESSAGEFROMNONFRIEND:
        return isSetAllowedToReceiveMessageFromNonFriend();
      case REGION:
        return isSetRegion();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case MID:
          if (field.type == TType.STRING) {
            this.mid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NORMALIZEDPHONENUMBER:
          if (field.type == TType.STRING) {
            this.normalizedPhoneNumber = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ALLOWEDTOSEARCHBYPHONENUMBER:
          if (field.type == TType.BOOL) {
            this.allowedToSearchByPhoneNumber = iprot.readBool();
            this.__isset_allowedToSearchByPhoneNumber = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ALLOWEDTORECEIVEMESSAGEFROMNONFRIEND:
          if (field.type == TType.BOOL) {
            this.allowedToReceiveMessageFromNonFriend = iprot.readBool();
            this.__isset_allowedToReceiveMessageFromNonFriend = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case REGION:
          if (field.type == TType.STRING) {
            this.region = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.mid != null) {
      oprot.writeFieldBegin(_MID_FIELD_DESC);
      oprot.writeString(this.mid);
      oprot.writeFieldEnd();
    }
    if (this.normalizedPhoneNumber != null) {
      oprot.writeFieldBegin(_NORMALIZED_PHONE_NUMBER_FIELD_DESC);
      oprot.writeString(this.normalizedPhoneNumber);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_ALLOWED_TO_SEARCH_BY_PHONE_NUMBER_FIELD_DESC);
    oprot.writeBool(this.allowedToSearchByPhoneNumber);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_ALLOWED_TO_RECEIVE_MESSAGE_FROM_NON_FRIEND_FIELD_DESC);
    oprot.writeBool(this.allowedToReceiveMessageFromNonFriend);
    oprot.writeFieldEnd();
    if (this.region != null) {
      oprot.writeFieldBegin(_REGION_FIELD_DESC);
      oprot.writeString(this.region);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("PhoneInfoForChannel(");

    ret.write("mid:");
    if (this.mid == null) {
      ret.write("null");
    } else {
      ret.write(this.mid);
    }

    ret.write(", ");
    ret.write("normalizedPhoneNumber:");
    if (this.normalizedPhoneNumber == null) {
      ret.write("null");
    } else {
      ret.write(this.normalizedPhoneNumber);
    }

    ret.write(", ");
    ret.write("allowedToSearchByPhoneNumber:");
    ret.write(this.allowedToSearchByPhoneNumber);

    ret.write(", ");
    ret.write("allowedToReceiveMessageFromNonFriend:");
    ret.write(this.allowedToReceiveMessageFromNonFriend);

    ret.write(", ");
    ret.write("region:");
    if (this.region == null) {
      ret.write("null");
    } else {
      ret.write(this.region);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

