/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.yellowpage_item;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class YellowpageItem implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("YellowpageItem");
  static final TField _ID_FIELD_DESC = new TField("id", TType.STRING, 1);
  static final TField _MID_FIELD_DESC = new TField("mid", TType.STRING, 2);
  static final TField _NAME_FIELD_DESC = new TField("name", TType.STRING, 3);
  static final TField _ADDRESS_FIELD_DESC = new TField("address", TType.STRING, 4);
  static final TField _LATITUDE_FIELD_DESC = new TField("latitude", TType.DOUBLE, 5);
  static final TField _LONGITUDE_FIELD_DESC = new TField("longitude", TType.DOUBLE, 6);
  static final TField _DISTANCE_FIELD_DESC = new TField("distance", TType.DOUBLE, 7);
  static final TField _CAN_FREE_CALL_FIELD_DESC = new TField("canFreeCall", TType.BOOL, 8);
  static final TField _K_FIELD_DESC = new TField("k", TType.I32, 9);
  static final TField _PHONE_NUMBER_FIELD_DESC = new TField("phoneNumber", TType.STRING, 10);
  static final TField _CAT_FIELD_DESC = new TField("cat", TType.I32, 11);
  static final TField _CATEGORY_ICON_FIELD_DESC = new TField("categoryIcon", TType.I32, 12);
  static final TField _ADDITIONAL_INFO_FIELD_DESC = new TField("additionalInfo", TType.LIST, 13);

  String _id;
  static const int ID = 1;
  String _mid;
  static const int MID = 2;
  String _name;
  static const int NAME = 3;
  String _address;
  static const int ADDRESS = 4;
  double _latitude = 0.0;
  static const int LATITUDE = 5;
  double _longitude = 0.0;
  static const int LONGITUDE = 6;
  double _distance = 0.0;
  static const int DISTANCE = 7;
  bool _canFreeCall = false;
  static const int CANFREECALL = 8;
  int _k = 0;
  static const int K = 9;
  String _phoneNumber;
  static const int PHONENUMBER = 10;
  int _cat = 0;
  static const int CAT = 11;
  int _categoryIcon = 0;
  static const int CATEGORYICON = 12;
  List<AdditionalInfoItem> _additionalInfo;
  static const int ADDITIONALINFO = 13;

  bool __isset_latitude = false;
  bool __isset_longitude = false;
  bool __isset_distance = false;
  bool __isset_canFreeCall = false;
  bool __isset_k = false;
  bool __isset_cat = false;
  bool __isset_categoryIcon = false;

  YellowpageItem() {
  }

  // id
  String get id => this._id;

  set id(String id) {
    this._id = id;
  }

  bool isSetId() => this.id != null;

  unsetId() {
    this.id = null;
  }

  // mid
  String get mid => this._mid;

  set mid(String mid) {
    this._mid = mid;
  }

  bool isSetMid() => this.mid != null;

  unsetMid() {
    this.mid = null;
  }

  // name
  String get name => this._name;

  set name(String name) {
    this._name = name;
  }

  bool isSetName() => this.name != null;

  unsetName() {
    this.name = null;
  }

  // address
  String get address => this._address;

  set address(String address) {
    this._address = address;
  }

  bool isSetAddress() => this.address != null;

  unsetAddress() {
    this.address = null;
  }

  // latitude
  double get latitude => this._latitude;

  set latitude(double latitude) {
    this._latitude = latitude;
    this.__isset_latitude = true;
  }

  bool isSetLatitude() => this.__isset_latitude;

  unsetLatitude() {
    this.__isset_latitude = false;
  }

  // longitude
  double get longitude => this._longitude;

  set longitude(double longitude) {
    this._longitude = longitude;
    this.__isset_longitude = true;
  }

  bool isSetLongitude() => this.__isset_longitude;

  unsetLongitude() {
    this.__isset_longitude = false;
  }

  // distance
  double get distance => this._distance;

  set distance(double distance) {
    this._distance = distance;
    this.__isset_distance = true;
  }

  bool isSetDistance() => this.__isset_distance;

  unsetDistance() {
    this.__isset_distance = false;
  }

  // canFreeCall
  bool get canFreeCall => this._canFreeCall;

  set canFreeCall(bool canFreeCall) {
    this._canFreeCall = canFreeCall;
    this.__isset_canFreeCall = true;
  }

  bool isSetCanFreeCall() => this.__isset_canFreeCall;

  unsetCanFreeCall() {
    this.__isset_canFreeCall = false;
  }

  // k
  int get k => this._k;

  set k(int k) {
    this._k = k;
    this.__isset_k = true;
  }

  bool isSetK() => this.__isset_k;

  unsetK() {
    this.__isset_k = false;
  }

  // phoneNumber
  String get phoneNumber => this._phoneNumber;

  set phoneNumber(String phoneNumber) {
    this._phoneNumber = phoneNumber;
  }

  bool isSetPhoneNumber() => this.phoneNumber != null;

  unsetPhoneNumber() {
    this.phoneNumber = null;
  }

  // cat
  int get cat => this._cat;

  set cat(int cat) {
    this._cat = cat;
    this.__isset_cat = true;
  }

  bool isSetCat() => this.__isset_cat;

  unsetCat() {
    this.__isset_cat = false;
  }

  // categoryIcon
  int get categoryIcon => this._categoryIcon;

  set categoryIcon(int categoryIcon) {
    this._categoryIcon = categoryIcon;
    this.__isset_categoryIcon = true;
  }

  bool isSetCategoryIcon() => this.__isset_categoryIcon;

  unsetCategoryIcon() {
    this.__isset_categoryIcon = false;
  }

  // additionalInfo
  List<AdditionalInfoItem> get additionalInfo => this._additionalInfo;

  set additionalInfo(List<AdditionalInfoItem> additionalInfo) {
    this._additionalInfo = additionalInfo;
  }

  bool isSetAdditionalInfo() => this.additionalInfo != null;

  unsetAdditionalInfo() {
    this.additionalInfo = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case ID:
        return this.id;
      case MID:
        return this.mid;
      case NAME:
        return this.name;
      case ADDRESS:
        return this.address;
      case LATITUDE:
        return this.latitude;
      case LONGITUDE:
        return this.longitude;
      case DISTANCE:
        return this.distance;
      case CANFREECALL:
        return this.canFreeCall;
      case K:
        return this.k;
      case PHONENUMBER:
        return this.phoneNumber;
      case CAT:
        return this.cat;
      case CATEGORYICON:
        return this.categoryIcon;
      case ADDITIONALINFO:
        return this.additionalInfo;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          this.id = value;
        }
        break;

      case MID:
        if (value == null) {
          unsetMid();
        } else {
          this.mid = value;
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          this.name = value;
        }
        break;

      case ADDRESS:
        if (value == null) {
          unsetAddress();
        } else {
          this.address = value;
        }
        break;

      case LATITUDE:
        if (value == null) {
          unsetLatitude();
        } else {
          this.latitude = value;
        }
        break;

      case LONGITUDE:
        if (value == null) {
          unsetLongitude();
        } else {
          this.longitude = value;
        }
        break;

      case DISTANCE:
        if (value == null) {
          unsetDistance();
        } else {
          this.distance = value;
        }
        break;

      case CANFREECALL:
        if (value == null) {
          unsetCanFreeCall();
        } else {
          this.canFreeCall = value;
        }
        break;

      case K:
        if (value == null) {
          unsetK();
        } else {
          this.k = value;
        }
        break;

      case PHONENUMBER:
        if (value == null) {
          unsetPhoneNumber();
        } else {
          this.phoneNumber = value;
        }
        break;

      case CAT:
        if (value == null) {
          unsetCat();
        } else {
          this.cat = value;
        }
        break;

      case CATEGORYICON:
        if (value == null) {
          unsetCategoryIcon();
        } else {
          this.categoryIcon = value;
        }
        break;

      case ADDITIONALINFO:
        if (value == null) {
          unsetAdditionalInfo();
        } else {
          this.additionalInfo = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case ID:
        return isSetId();
      case MID:
        return isSetMid();
      case NAME:
        return isSetName();
      case ADDRESS:
        return isSetAddress();
      case LATITUDE:
        return isSetLatitude();
      case LONGITUDE:
        return isSetLongitude();
      case DISTANCE:
        return isSetDistance();
      case CANFREECALL:
        return isSetCanFreeCall();
      case K:
        return isSetK();
      case PHONENUMBER:
        return isSetPhoneNumber();
      case CAT:
        return isSetCat();
      case CATEGORYICON:
        return isSetCategoryIcon();
      case ADDITIONALINFO:
        return isSetAdditionalInfo();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ID:
          if (field.type == TType.STRING) {
            this.id = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MID:
          if (field.type == TType.STRING) {
            this.mid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NAME:
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ADDRESS:
          if (field.type == TType.STRING) {
            this.address = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LATITUDE:
          if (field.type == TType.DOUBLE) {
            this.latitude = iprot.readDouble();
            this.__isset_latitude = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LONGITUDE:
          if (field.type == TType.DOUBLE) {
            this.longitude = iprot.readDouble();
            this.__isset_longitude = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DISTANCE:
          if (field.type == TType.DOUBLE) {
            this.distance = iprot.readDouble();
            this.__isset_distance = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CANFREECALL:
          if (field.type == TType.BOOL) {
            this.canFreeCall = iprot.readBool();
            this.__isset_canFreeCall = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case K:
          if (field.type == TType.I32) {
            this.k = iprot.readI32();
            this.__isset_k = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PHONENUMBER:
          if (field.type == TType.STRING) {
            this.phoneNumber = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CAT:
          if (field.type == TType.I32) {
            this.cat = iprot.readI32();
            this.__isset_cat = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CATEGORYICON:
          if (field.type == TType.I32) {
            this.categoryIcon = iprot.readI32();
            this.__isset_categoryIcon = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ADDITIONALINFO:
          if (field.type == TType.LIST) {
            {
              TList _list52 = iprot.readListBegin();
              this.additionalInfo = new List<AdditionalInfoItem>();
              for (int _i53 = 0; _i53 < _list52.length; ++_i53) {
                AdditionalInfoItem _elem54;
                _elem54 = new AdditionalInfoItem();
                _elem54.read(iprot);
                this.additionalInfo.add(_elem54);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.id != null) {
      oprot.writeFieldBegin(_ID_FIELD_DESC);
      oprot.writeString(this.id);
      oprot.writeFieldEnd();
    }
    if (this.mid != null) {
      oprot.writeFieldBegin(_MID_FIELD_DESC);
      oprot.writeString(this.mid);
      oprot.writeFieldEnd();
    }
    if (this.name != null) {
      oprot.writeFieldBegin(_NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.address != null) {
      oprot.writeFieldBegin(_ADDRESS_FIELD_DESC);
      oprot.writeString(this.address);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_LATITUDE_FIELD_DESC);
    oprot.writeDouble(this.latitude);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_LONGITUDE_FIELD_DESC);
    oprot.writeDouble(this.longitude);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_DISTANCE_FIELD_DESC);
    oprot.writeDouble(this.distance);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_CAN_FREE_CALL_FIELD_DESC);
    oprot.writeBool(this.canFreeCall);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_K_FIELD_DESC);
    oprot.writeI32(this.k);
    oprot.writeFieldEnd();
    if (this.phoneNumber != null) {
      oprot.writeFieldBegin(_PHONE_NUMBER_FIELD_DESC);
      oprot.writeString(this.phoneNumber);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_CAT_FIELD_DESC);
    oprot.writeI32(this.cat);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_CATEGORY_ICON_FIELD_DESC);
    oprot.writeI32(this.categoryIcon);
    oprot.writeFieldEnd();
    if (this.additionalInfo != null) {
      oprot.writeFieldBegin(_ADDITIONAL_INFO_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.additionalInfo.length));
        for (var elem55 in this.additionalInfo) {
          elem55.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("YellowpageItem(");

    ret.write("id:");
    if (this.id == null) {
      ret.write("null");
    } else {
      ret.write(this.id);
    }

    ret.write(", ");
    ret.write("mid:");
    if (this.mid == null) {
      ret.write("null");
    } else {
      ret.write(this.mid);
    }

    ret.write(", ");
    ret.write("name:");
    if (this.name == null) {
      ret.write("null");
    } else {
      ret.write(this.name);
    }

    ret.write(", ");
    ret.write("address:");
    if (this.address == null) {
      ret.write("null");
    } else {
      ret.write(this.address);
    }

    ret.write(", ");
    ret.write("latitude:");
    ret.write(this.latitude);

    ret.write(", ");
    ret.write("longitude:");
    ret.write(this.longitude);

    ret.write(", ");
    ret.write("distance:");
    ret.write(this.distance);

    ret.write(", ");
    ret.write("canFreeCall:");
    ret.write(this.canFreeCall);

    ret.write(", ");
    ret.write("k:");
    ret.write(this.k);

    ret.write(", ");
    ret.write("phoneNumber:");
    if (this.phoneNumber == null) {
      ret.write("null");
    } else {
      ret.write(this.phoneNumber);
    }

    ret.write(", ");
    ret.write("cat:");
    ret.write(this.cat);

    ret.write(", ");
    ret.write("categoryIcon:");
    ret.write(this.categoryIcon);

    ret.write(", ");
    ret.write("additionalInfo:");
    if (this.additionalInfo == null) {
      ret.write("null");
    } else {
      ret.write(this.additionalInfo);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

