/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.contact_transition;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class ContactTransition implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ContactTransition");
  static final TField _OWNER_MID_FIELD_DESC = new TField("ownerMid", TType.STRING, 1);
  static final TField _TARGET_MID_FIELD_DESC = new TField("targetMid", TType.STRING, 2);
  static final TField _PREVIOUS_STATUS_FIELD_DESC = new TField("previousStatus", TType.I32, 3);
  static final TField _RESULT_STATUS_FIELD_DESC = new TField("resultStatus", TType.I32, 4);

  String _ownerMid;
  static const int OWNERMID = 1;
  String _targetMid;
  static const int TARGETMID = 2;
  int _previousStatus;
  static const int PREVIOUSSTATUS = 3;
  int _resultStatus;
  static const int RESULTSTATUS = 4;

  bool __isset_previousStatus = false;
  bool __isset_resultStatus = false;

  ContactTransition() {
  }

  // ownerMid
  String get ownerMid => this._ownerMid;

  set ownerMid(String ownerMid) {
    this._ownerMid = ownerMid;
  }

  bool isSetOwnerMid() => this.ownerMid != null;

  unsetOwnerMid() {
    this.ownerMid = null;
  }

  // targetMid
  String get targetMid => this._targetMid;

  set targetMid(String targetMid) {
    this._targetMid = targetMid;
  }

  bool isSetTargetMid() => this.targetMid != null;

  unsetTargetMid() {
    this.targetMid = null;
  }

  // previousStatus
  int get previousStatus => this._previousStatus;

  set previousStatus(int previousStatus) {
    this._previousStatus = previousStatus;
    this.__isset_previousStatus = true;
  }

  bool isSetPreviousStatus() => this.__isset_previousStatus;

  unsetPreviousStatus() {
    this.__isset_previousStatus = false;
  }

  // resultStatus
  int get resultStatus => this._resultStatus;

  set resultStatus(int resultStatus) {
    this._resultStatus = resultStatus;
    this.__isset_resultStatus = true;
  }

  bool isSetResultStatus() => this.__isset_resultStatus;

  unsetResultStatus() {
    this.__isset_resultStatus = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case OWNERMID:
        return this.ownerMid;
      case TARGETMID:
        return this.targetMid;
      case PREVIOUSSTATUS:
        return this.previousStatus;
      case RESULTSTATUS:
        return this.resultStatus;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case OWNERMID:
        if (value == null) {
          unsetOwnerMid();
        } else {
          this.ownerMid = value;
        }
        break;

      case TARGETMID:
        if (value == null) {
          unsetTargetMid();
        } else {
          this.targetMid = value;
        }
        break;

      case PREVIOUSSTATUS:
        if (value == null) {
          unsetPreviousStatus();
        } else {
          this.previousStatus = value;
        }
        break;

      case RESULTSTATUS:
        if (value == null) {
          unsetResultStatus();
        } else {
          this.resultStatus = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case OWNERMID:
        return isSetOwnerMid();
      case TARGETMID:
        return isSetTargetMid();
      case PREVIOUSSTATUS:
        return isSetPreviousStatus();
      case RESULTSTATUS:
        return isSetResultStatus();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case OWNERMID:
          if (field.type == TType.STRING) {
            this.ownerMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TARGETMID:
          if (field.type == TType.STRING) {
            this.targetMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PREVIOUSSTATUS:
          if (field.type == TType.I32) {
            this.previousStatus = iprot.readI32();
            this.__isset_previousStatus = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RESULTSTATUS:
          if (field.type == TType.I32) {
            this.resultStatus = iprot.readI32();
            this.__isset_resultStatus = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.ownerMid != null) {
      oprot.writeFieldBegin(_OWNER_MID_FIELD_DESC);
      oprot.writeString(this.ownerMid);
      oprot.writeFieldEnd();
    }
    if (this.targetMid != null) {
      oprot.writeFieldBegin(_TARGET_MID_FIELD_DESC);
      oprot.writeString(this.targetMid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_PREVIOUS_STATUS_FIELD_DESC);
    oprot.writeI32(this.previousStatus);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_RESULT_STATUS_FIELD_DESC);
    oprot.writeI32(this.resultStatus);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ContactTransition(");

    ret.write("ownerMid:");
    if (this.ownerMid == null) {
      ret.write("null");
    } else {
      ret.write(this.ownerMid);
    }

    ret.write(", ");
    ret.write("targetMid:");
    if (this.targetMid == null) {
      ret.write("null");
    } else {
      ret.write(this.targetMid);
    }

    ret.write(", ");
    ret.write("previousStatus:");
    String previousStatus_name = ContactStatus.VALUES_TO_NAMES[this.previousStatus];
    if (previousStatus_name != null) {
      ret.write(previousStatus_name);
      ret.write(" (");
    }
    ret.write(this.previousStatus);
    if (previousStatus_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("resultStatus:");
    String resultStatus_name = ContactStatus.VALUES_TO_NAMES[this.resultStatus];
    if (resultStatus_name != null) {
      ret.write(resultStatus_name);
      ret.write(" (");
    }
    ret.write(this.resultStatus);
    if (resultStatus_name != null) {
      ret.write(")");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetPreviousStatus() && !ContactStatus.VALID_VALUES.contains(previousStatus)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'previousStatus' has been assigned the invalid value $previousStatus");
    }
    if (isSetResultStatus() && !ContactStatus.VALID_VALUES.contains(resultStatus)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'resultStatus' has been assigned the invalid value $resultStatus");
    }
  }

}

