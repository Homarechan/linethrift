/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.theme_property;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class ThemeProperty implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ThemeProperty");
  static final TField _THUMBNAIL_URL_FIELD_DESC = new TField("thumbnailUrl", TType.STRING, 1);
  static final TField _THEME_RESOURCE_TYPE_FIELD_DESC = new TField("themeResourceType", TType.I32, 2);

  String _thumbnailUrl;
  static const int THUMBNAILURL = 1;
  int _themeResourceType;
  static const int THEMERESOURCETYPE = 2;

  bool __isset_themeResourceType = false;

  ThemeProperty() {
  }

  // thumbnailUrl
  String get thumbnailUrl => this._thumbnailUrl;

  set thumbnailUrl(String thumbnailUrl) {
    this._thumbnailUrl = thumbnailUrl;
  }

  bool isSetThumbnailUrl() => this.thumbnailUrl != null;

  unsetThumbnailUrl() {
    this.thumbnailUrl = null;
  }

  // themeResourceType
  int get themeResourceType => this._themeResourceType;

  set themeResourceType(int themeResourceType) {
    this._themeResourceType = themeResourceType;
    this.__isset_themeResourceType = true;
  }

  bool isSetThemeResourceType() => this.__isset_themeResourceType;

  unsetThemeResourceType() {
    this.__isset_themeResourceType = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case THUMBNAILURL:
        return this.thumbnailUrl;
      case THEMERESOURCETYPE:
        return this.themeResourceType;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case THUMBNAILURL:
        if (value == null) {
          unsetThumbnailUrl();
        } else {
          this.thumbnailUrl = value;
        }
        break;

      case THEMERESOURCETYPE:
        if (value == null) {
          unsetThemeResourceType();
        } else {
          this.themeResourceType = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case THUMBNAILURL:
        return isSetThumbnailUrl();
      case THEMERESOURCETYPE:
        return isSetThemeResourceType();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case THUMBNAILURL:
          if (field.type == TType.STRING) {
            this.thumbnailUrl = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case THEMERESOURCETYPE:
          if (field.type == TType.I32) {
            this.themeResourceType = iprot.readI32();
            this.__isset_themeResourceType = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.thumbnailUrl != null) {
      oprot.writeFieldBegin(_THUMBNAIL_URL_FIELD_DESC);
      oprot.writeString(this.thumbnailUrl);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_THEME_RESOURCE_TYPE_FIELD_DESC);
    oprot.writeI32(this.themeResourceType);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ThemeProperty(");

    ret.write("thumbnailUrl:");
    if (this.thumbnailUrl == null) {
      ret.write("null");
    } else {
      ret.write(this.thumbnailUrl);
    }

    ret.write(", ");
    ret.write("themeResourceType:");
    String themeResourceType_name = TRType.VALUES_TO_NAMES[this.themeResourceType];
    if (themeResourceType_name != null) {
      ret.write(themeResourceType_name);
      ret.write(" (");
    }
    ret.write(this.themeResourceType);
    if (themeResourceType_name != null) {
      ret.write(")");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetThemeResourceType() && !TRType.VALID_VALUES.contains(themeResourceType)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'themeResourceType' has been assigned the invalid value $themeResourceType");
    }
  }

}

