/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.get_joinable_square_chats_response;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class GetJoinableSquareChatsResponse implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("GetJoinableSquareChatsResponse");
  static final TField _SQUARE_CHATS_FIELD_DESC = new TField("squareChats", TType.LIST, 1);
  static final TField _CONTINUATION_TOKEN_FIELD_DESC = new TField("continuationToken", TType.STRING, 2);
  static final TField _TOTAL_SQUARE_CHAT_COUNT_FIELD_DESC = new TField("totalSquareChatCount", TType.I32, 3);
  static final TField _SQUARE_CHAT_STATUSES_FIELD_DESC = new TField("squareChatStatuses", TType.MAP, 4);

  List<SquareChat> _squareChats;
  static const int SQUARECHATS = 1;
  String _continuationToken;
  static const int CONTINUATIONTOKEN = 2;
  int _totalSquareChatCount = 0;
  static const int TOTALSQUARECHATCOUNT = 3;
  Map<String, SquareChatStatus> _squareChatStatuses;
  static const int SQUARECHATSTATUSES = 4;

  bool __isset_totalSquareChatCount = false;

  GetJoinableSquareChatsResponse() {
  }

  // squareChats
  List<SquareChat> get squareChats => this._squareChats;

  set squareChats(List<SquareChat> squareChats) {
    this._squareChats = squareChats;
  }

  bool isSetSquareChats() => this.squareChats != null;

  unsetSquareChats() {
    this.squareChats = null;
  }

  // continuationToken
  String get continuationToken => this._continuationToken;

  set continuationToken(String continuationToken) {
    this._continuationToken = continuationToken;
  }

  bool isSetContinuationToken() => this.continuationToken != null;

  unsetContinuationToken() {
    this.continuationToken = null;
  }

  // totalSquareChatCount
  int get totalSquareChatCount => this._totalSquareChatCount;

  set totalSquareChatCount(int totalSquareChatCount) {
    this._totalSquareChatCount = totalSquareChatCount;
    this.__isset_totalSquareChatCount = true;
  }

  bool isSetTotalSquareChatCount() => this.__isset_totalSquareChatCount;

  unsetTotalSquareChatCount() {
    this.__isset_totalSquareChatCount = false;
  }

  // squareChatStatuses
  Map<String, SquareChatStatus> get squareChatStatuses => this._squareChatStatuses;

  set squareChatStatuses(Map<String, SquareChatStatus> squareChatStatuses) {
    this._squareChatStatuses = squareChatStatuses;
  }

  bool isSetSquareChatStatuses() => this.squareChatStatuses != null;

  unsetSquareChatStatuses() {
    this.squareChatStatuses = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SQUARECHATS:
        return this.squareChats;
      case CONTINUATIONTOKEN:
        return this.continuationToken;
      case TOTALSQUARECHATCOUNT:
        return this.totalSquareChatCount;
      case SQUARECHATSTATUSES:
        return this.squareChatStatuses;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SQUARECHATS:
        if (value == null) {
          unsetSquareChats();
        } else {
          this.squareChats = value;
        }
        break;

      case CONTINUATIONTOKEN:
        if (value == null) {
          unsetContinuationToken();
        } else {
          this.continuationToken = value;
        }
        break;

      case TOTALSQUARECHATCOUNT:
        if (value == null) {
          unsetTotalSquareChatCount();
        } else {
          this.totalSquareChatCount = value;
        }
        break;

      case SQUARECHATSTATUSES:
        if (value == null) {
          unsetSquareChatStatuses();
        } else {
          this.squareChatStatuses = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SQUARECHATS:
        return isSetSquareChats();
      case CONTINUATIONTOKEN:
        return isSetContinuationToken();
      case TOTALSQUARECHATCOUNT:
        return isSetTotalSquareChatCount();
      case SQUARECHATSTATUSES:
        return isSetSquareChatStatuses();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SQUARECHATS:
          if (field.type == TType.LIST) {
            {
              TList _list432 = iprot.readListBegin();
              this.squareChats = new List<SquareChat>();
              for (int _i433 = 0; _i433 < _list432.length; ++_i433) {
                SquareChat _elem434;
                _elem434 = new SquareChat();
                _elem434.read(iprot);
                this.squareChats.add(_elem434);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CONTINUATIONTOKEN:
          if (field.type == TType.STRING) {
            this.continuationToken = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TOTALSQUARECHATCOUNT:
          if (field.type == TType.I32) {
            this.totalSquareChatCount = iprot.readI32();
            this.__isset_totalSquareChatCount = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SQUARECHATSTATUSES:
          if (field.type == TType.MAP) {
            {
              TMap _map435 = iprot.readMapBegin();
              this.squareChatStatuses = new Map<String, SquareChatStatus>();
              for (int _i436 = 0; _i436 < _map435.length; ++_i436) {
                String _key437;
                SquareChatStatus _val438;
                _key437 = iprot.readString();
                _val438 = new SquareChatStatus();
                _val438.read(iprot);
                this.squareChatStatuses[_key437] = _val438;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.squareChats != null) {
      oprot.writeFieldBegin(_SQUARE_CHATS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.squareChats.length));
        for (var elem439 in this.squareChats) {
          elem439.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.continuationToken != null) {
      oprot.writeFieldBegin(_CONTINUATION_TOKEN_FIELD_DESC);
      oprot.writeString(this.continuationToken);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_TOTAL_SQUARE_CHAT_COUNT_FIELD_DESC);
    oprot.writeI32(this.totalSquareChatCount);
    oprot.writeFieldEnd();
    if (this.squareChatStatuses != null) {
      oprot.writeFieldBegin(_SQUARE_CHAT_STATUSES_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.squareChatStatuses.length));
        for (var elem441 in this.squareChatStatuses.keys) {
          oprot.writeString(elem441);
          this.squareChatStatuses[elem441].write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("GetJoinableSquareChatsResponse(");

    ret.write("squareChats:");
    if (this.squareChats == null) {
      ret.write("null");
    } else {
      ret.write(this.squareChats);
    }

    ret.write(", ");
    ret.write("continuationToken:");
    if (this.continuationToken == null) {
      ret.write("null");
    } else {
      ret.write(this.continuationToken);
    }

    ret.write(", ");
    ret.write("totalSquareChatCount:");
    ret.write(this.totalSquareChatCount);

    ret.write(", ");
    ret.write("squareChatStatuses:");
    if (this.squareChatStatuses == null) {
      ret.write("null");
    } else {
      ret.write(this.squareChatStatuses);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

