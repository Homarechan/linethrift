/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.spot_item;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class SpotItem implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("SpotItem");
  static final TField _NAME_FIELD_DESC = new TField("name", TType.STRING, 2);
  static final TField _PHONE_FIELD_DESC = new TField("phone", TType.STRING, 3);
  static final TField _CATEGORY_FIELD_DESC = new TField("category", TType.I32, 4);
  static final TField _MID_FIELD_DESC = new TField("mid", TType.STRING, 5);
  static final TField _COUNTRY_AREA_CODE_FIELD_DESC = new TField("countryAreaCode", TType.STRING, 6);
  static final TField _FREE_PHONE_CALLABLE_FIELD_DESC = new TField("freePhoneCallable", TType.BOOL, 10);

  String _name;
  static const int NAME = 2;
  String _phone;
  static const int PHONE = 3;
  int _category;
  static const int CATEGORY = 4;
  String _mid;
  static const int MID = 5;
  String _countryAreaCode;
  static const int COUNTRYAREACODE = 6;
  bool _freePhoneCallable = false;
  static const int FREEPHONECALLABLE = 10;

  bool __isset_category = false;
  bool __isset_freePhoneCallable = false;

  SpotItem() {
  }

  // name
  String get name => this._name;

  set name(String name) {
    this._name = name;
  }

  bool isSetName() => this.name != null;

  unsetName() {
    this.name = null;
  }

  // phone
  String get phone => this._phone;

  set phone(String phone) {
    this._phone = phone;
  }

  bool isSetPhone() => this.phone != null;

  unsetPhone() {
    this.phone = null;
  }

  // category
  int get category => this._category;

  set category(int category) {
    this._category = category;
    this.__isset_category = true;
  }

  bool isSetCategory() => this.__isset_category;

  unsetCategory() {
    this.__isset_category = false;
  }

  // mid
  String get mid => this._mid;

  set mid(String mid) {
    this._mid = mid;
  }

  bool isSetMid() => this.mid != null;

  unsetMid() {
    this.mid = null;
  }

  // countryAreaCode
  String get countryAreaCode => this._countryAreaCode;

  set countryAreaCode(String countryAreaCode) {
    this._countryAreaCode = countryAreaCode;
  }

  bool isSetCountryAreaCode() => this.countryAreaCode != null;

  unsetCountryAreaCode() {
    this.countryAreaCode = null;
  }

  // freePhoneCallable
  bool get freePhoneCallable => this._freePhoneCallable;

  set freePhoneCallable(bool freePhoneCallable) {
    this._freePhoneCallable = freePhoneCallable;
    this.__isset_freePhoneCallable = true;
  }

  bool isSetFreePhoneCallable() => this.__isset_freePhoneCallable;

  unsetFreePhoneCallable() {
    this.__isset_freePhoneCallable = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case NAME:
        return this.name;
      case PHONE:
        return this.phone;
      case CATEGORY:
        return this.category;
      case MID:
        return this.mid;
      case COUNTRYAREACODE:
        return this.countryAreaCode;
      case FREEPHONECALLABLE:
        return this.freePhoneCallable;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          this.name = value;
        }
        break;

      case PHONE:
        if (value == null) {
          unsetPhone();
        } else {
          this.phone = value;
        }
        break;

      case CATEGORY:
        if (value == null) {
          unsetCategory();
        } else {
          this.category = value;
        }
        break;

      case MID:
        if (value == null) {
          unsetMid();
        } else {
          this.mid = value;
        }
        break;

      case COUNTRYAREACODE:
        if (value == null) {
          unsetCountryAreaCode();
        } else {
          this.countryAreaCode = value;
        }
        break;

      case FREEPHONECALLABLE:
        if (value == null) {
          unsetFreePhoneCallable();
        } else {
          this.freePhoneCallable = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case NAME:
        return isSetName();
      case PHONE:
        return isSetPhone();
      case CATEGORY:
        return isSetCategory();
      case MID:
        return isSetMid();
      case COUNTRYAREACODE:
        return isSetCountryAreaCode();
      case FREEPHONECALLABLE:
        return isSetFreePhoneCallable();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case NAME:
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PHONE:
          if (field.type == TType.STRING) {
            this.phone = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CATEGORY:
          if (field.type == TType.I32) {
            this.category = iprot.readI32();
            this.__isset_category = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MID:
          if (field.type == TType.STRING) {
            this.mid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COUNTRYAREACODE:
          if (field.type == TType.STRING) {
            this.countryAreaCode = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FREEPHONECALLABLE:
          if (field.type == TType.BOOL) {
            this.freePhoneCallable = iprot.readBool();
            this.__isset_freePhoneCallable = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.name != null) {
      oprot.writeFieldBegin(_NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.phone != null) {
      oprot.writeFieldBegin(_PHONE_FIELD_DESC);
      oprot.writeString(this.phone);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_CATEGORY_FIELD_DESC);
    oprot.writeI32(this.category);
    oprot.writeFieldEnd();
    if (this.mid != null) {
      oprot.writeFieldBegin(_MID_FIELD_DESC);
      oprot.writeString(this.mid);
      oprot.writeFieldEnd();
    }
    if (this.countryAreaCode != null) {
      oprot.writeFieldBegin(_COUNTRY_AREA_CODE_FIELD_DESC);
      oprot.writeString(this.countryAreaCode);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_FREE_PHONE_CALLABLE_FIELD_DESC);
    oprot.writeBool(this.freePhoneCallable);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("SpotItem(");

    ret.write("name:");
    if (this.name == null) {
      ret.write("null");
    } else {
      ret.write(this.name);
    }

    ret.write(", ");
    ret.write("phone:");
    if (this.phone == null) {
      ret.write("null");
    } else {
      ret.write(this.phone);
    }

    ret.write(", ");
    ret.write("category:");
    String category_name = SpotCategory.VALUES_TO_NAMES[this.category];
    if (category_name != null) {
      ret.write(category_name);
      ret.write(" (");
    }
    ret.write(this.category);
    if (category_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("mid:");
    if (this.mid == null) {
      ret.write("null");
    } else {
      ret.write(this.mid);
    }

    ret.write(", ");
    ret.write("countryAreaCode:");
    if (this.countryAreaCode == null) {
      ret.write("null");
    } else {
      ret.write(this.countryAreaCode);
    }

    ret.write(", ");
    ret.write("freePhoneCallable:");
    ret.write(this.freePhoneCallable);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetCategory() && !SpotCategory.VALID_VALUES.contains(category)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'category' has been assigned the invalid value $category");
    }
  }

}

