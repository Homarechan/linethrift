/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.create_square_chat_request;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class CreateSquareChatRequest implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("CreateSquareChatRequest");
  static final TField _REQ_SEQ_FIELD_DESC = new TField("reqSeq", TType.I32, 1);
  static final TField _SQUARE_CHAT_FIELD_DESC = new TField("squareChat", TType.STRUCT, 2);
  static final TField _SQUARE_MEMBER_MIDS_FIELD_DESC = new TField("squareMemberMids", TType.LIST, 3);

  int _reqSeq = 0;
  static const int REQSEQ = 1;
  SquareChat _squareChat;
  static const int SQUARECHAT = 2;
  List<String> _squareMemberMids;
  static const int SQUAREMEMBERMIDS = 3;

  bool __isset_reqSeq = false;

  CreateSquareChatRequest() {
  }

  // reqSeq
  int get reqSeq => this._reqSeq;

  set reqSeq(int reqSeq) {
    this._reqSeq = reqSeq;
    this.__isset_reqSeq = true;
  }

  bool isSetReqSeq() => this.__isset_reqSeq;

  unsetReqSeq() {
    this.__isset_reqSeq = false;
  }

  // squareChat
  SquareChat get squareChat => this._squareChat;

  set squareChat(SquareChat squareChat) {
    this._squareChat = squareChat;
  }

  bool isSetSquareChat() => this.squareChat != null;

  unsetSquareChat() {
    this.squareChat = null;
  }

  // squareMemberMids
  List<String> get squareMemberMids => this._squareMemberMids;

  set squareMemberMids(List<String> squareMemberMids) {
    this._squareMemberMids = squareMemberMids;
  }

  bool isSetSquareMemberMids() => this.squareMemberMids != null;

  unsetSquareMemberMids() {
    this.squareMemberMids = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQSEQ:
        return this.reqSeq;
      case SQUARECHAT:
        return this.squareChat;
      case SQUAREMEMBERMIDS:
        return this.squareMemberMids;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQSEQ:
        if (value == null) {
          unsetReqSeq();
        } else {
          this.reqSeq = value;
        }
        break;

      case SQUARECHAT:
        if (value == null) {
          unsetSquareChat();
        } else {
          this.squareChat = value;
        }
        break;

      case SQUAREMEMBERMIDS:
        if (value == null) {
          unsetSquareMemberMids();
        } else {
          this.squareMemberMids = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQSEQ:
        return isSetReqSeq();
      case SQUARECHAT:
        return isSetSquareChat();
      case SQUAREMEMBERMIDS:
        return isSetSquareMemberMids();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQSEQ:
          if (field.type == TType.I32) {
            this.reqSeq = iprot.readI32();
            this.__isset_reqSeq = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SQUARECHAT:
          if (field.type == TType.STRUCT) {
            this.squareChat = new SquareChat();
            this.squareChat.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SQUAREMEMBERMIDS:
          if (field.type == TType.LIST) {
            {
              TList _list304 = iprot.readListBegin();
              this.squareMemberMids = new List<String>();
              for (int _i305 = 0; _i305 < _list304.length; ++_i305) {
                String _elem306;
                _elem306 = iprot.readString();
                this.squareMemberMids.add(_elem306);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_REQ_SEQ_FIELD_DESC);
    oprot.writeI32(this.reqSeq);
    oprot.writeFieldEnd();
    if (this.squareChat != null) {
      oprot.writeFieldBegin(_SQUARE_CHAT_FIELD_DESC);
      this.squareChat.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.squareMemberMids != null) {
      oprot.writeFieldBegin(_SQUARE_MEMBER_MIDS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.squareMemberMids.length));
        for (var elem307 in this.squareMemberMids) {
          oprot.writeString(elem307);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("CreateSquareChatRequest(");

    ret.write("reqSeq:");
    ret.write(this.reqSeq);

    ret.write(", ");
    ret.write("squareChat:");
    if (this.squareChat == null) {
      ret.write("null");
    } else {
      ret.write(this.squareChat);
    }

    ret.write(", ");
    ret.write("squareMemberMids:");
    if (this.squareMemberMids == null) {
      ret.write("null");
    } else {
      ret.write(this.squareMemberMids);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

