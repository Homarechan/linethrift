/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.t_message_read_range_entry;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class TMessageReadRangeEntry implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("TMessageReadRangeEntry");
  static final TField _START_MESSAGE_ID_FIELD_DESC = new TField("startMessageId", TType.I64, 1);
  static final TField _END_MESSAGE_ID_FIELD_DESC = new TField("endMessageId", TType.I64, 2);
  static final TField _START_TIME_FIELD_DESC = new TField("startTime", TType.I64, 3);
  static final TField _END_TIME_FIELD_DESC = new TField("endTime", TType.I64, 4);

  int _startMessageId = 0;
  static const int STARTMESSAGEID = 1;
  int _endMessageId = 0;
  static const int ENDMESSAGEID = 2;
  int _startTime = 0;
  static const int STARTTIME = 3;
  int _endTime = 0;
  static const int ENDTIME = 4;

  bool __isset_startMessageId = false;
  bool __isset_endMessageId = false;
  bool __isset_startTime = false;
  bool __isset_endTime = false;

  TMessageReadRangeEntry() {
  }

  // startMessageId
  int get startMessageId => this._startMessageId;

  set startMessageId(int startMessageId) {
    this._startMessageId = startMessageId;
    this.__isset_startMessageId = true;
  }

  bool isSetStartMessageId() => this.__isset_startMessageId;

  unsetStartMessageId() {
    this.__isset_startMessageId = false;
  }

  // endMessageId
  int get endMessageId => this._endMessageId;

  set endMessageId(int endMessageId) {
    this._endMessageId = endMessageId;
    this.__isset_endMessageId = true;
  }

  bool isSetEndMessageId() => this.__isset_endMessageId;

  unsetEndMessageId() {
    this.__isset_endMessageId = false;
  }

  // startTime
  int get startTime => this._startTime;

  set startTime(int startTime) {
    this._startTime = startTime;
    this.__isset_startTime = true;
  }

  bool isSetStartTime() => this.__isset_startTime;

  unsetStartTime() {
    this.__isset_startTime = false;
  }

  // endTime
  int get endTime => this._endTime;

  set endTime(int endTime) {
    this._endTime = endTime;
    this.__isset_endTime = true;
  }

  bool isSetEndTime() => this.__isset_endTime;

  unsetEndTime() {
    this.__isset_endTime = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case STARTMESSAGEID:
        return this.startMessageId;
      case ENDMESSAGEID:
        return this.endMessageId;
      case STARTTIME:
        return this.startTime;
      case ENDTIME:
        return this.endTime;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case STARTMESSAGEID:
        if (value == null) {
          unsetStartMessageId();
        } else {
          this.startMessageId = value;
        }
        break;

      case ENDMESSAGEID:
        if (value == null) {
          unsetEndMessageId();
        } else {
          this.endMessageId = value;
        }
        break;

      case STARTTIME:
        if (value == null) {
          unsetStartTime();
        } else {
          this.startTime = value;
        }
        break;

      case ENDTIME:
        if (value == null) {
          unsetEndTime();
        } else {
          this.endTime = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case STARTMESSAGEID:
        return isSetStartMessageId();
      case ENDMESSAGEID:
        return isSetEndMessageId();
      case STARTTIME:
        return isSetStartTime();
      case ENDTIME:
        return isSetEndTime();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case STARTMESSAGEID:
          if (field.type == TType.I64) {
            this.startMessageId = iprot.readI64();
            this.__isset_startMessageId = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ENDMESSAGEID:
          if (field.type == TType.I64) {
            this.endMessageId = iprot.readI64();
            this.__isset_endMessageId = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STARTTIME:
          if (field.type == TType.I64) {
            this.startTime = iprot.readI64();
            this.__isset_startTime = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ENDTIME:
          if (field.type == TType.I64) {
            this.endTime = iprot.readI64();
            this.__isset_endTime = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_START_MESSAGE_ID_FIELD_DESC);
    oprot.writeI64(this.startMessageId);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_END_MESSAGE_ID_FIELD_DESC);
    oprot.writeI64(this.endMessageId);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_START_TIME_FIELD_DESC);
    oprot.writeI64(this.startTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_END_TIME_FIELD_DESC);
    oprot.writeI64(this.endTime);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("TMessageReadRangeEntry(");

    ret.write("startMessageId:");
    ret.write(this.startMessageId);

    ret.write(", ");
    ret.write("endMessageId:");
    ret.write(this.endMessageId);

    ret.write(", ");
    ret.write("startTime:");
    ret.write(this.startTime);

    ret.write(", ");
    ret.write("endTime:");
    ret.write(this.endTime);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

