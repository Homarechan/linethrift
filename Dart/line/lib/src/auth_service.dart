/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.auth_service;

import 'dart:async';
import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';


abstract class AuthService {

  Future<String> normalizePhoneNumber(String countryCode, String phoneNumber, String countryCodeHint);

  Future respondE2EELoginRequest(String verifier, E2EEPublicKey publicKey, Uint8List encryptedKeyChain, Uint8List hashKeyChain, int errorCode);

  Future<String> confirmE2EELogin(String verifier, Uint8List deviceSecret);

  Future logoutZ();

  Future<LoginResult> loginZ(LoginRequest loginRequest);

  Future<SecurityCenterResult> issueTokenForAccountMigrationSettings(bool enforce);

  Future<SecurityCenterResult> issueTokenForAccountMigration(String migrationSessionId);

  Future<String> verifyQrcodeWithE2EE(String verifier, String pinCode, int errorCode, E2EEPublicKey publicKey, Uint8List encryptedKeyChain, Uint8List hashKeyChain);
}

class AuthServiceClient implements AuthService {

  AuthServiceClient(TProtocol iprot, [TProtocol oprot = null]) {
    _iprot = iprot;
    _oprot = (oprot == null) ? iprot : oprot;
  }

  TProtocol _iprot;

  TProtocol get iprot => _iprot;

  TProtocol _oprot;

  TProtocol get oprot => _oprot;

  int _seqid = 0;

  int get seqid => _seqid;

  int nextSeqid() => ++_seqid;

  Future<String> normalizePhoneNumber(String countryCode, String phoneNumber, String countryCodeHint) async {
    oprot.writeMessageBegin(new TMessage("normalizePhoneNumber", TMessageType.CALL, nextSeqid()));
    normalizePhoneNumber_args args = new normalizePhoneNumber_args();
    args.countryCode = countryCode;
    args.phoneNumber = phoneNumber;
    args.countryCodeHint = countryCodeHint;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    normalizePhoneNumber_result result = new normalizePhoneNumber_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "normalizePhoneNumber failed: unknown result");
  }

  Future respondE2EELoginRequest(String verifier, E2EEPublicKey publicKey, Uint8List encryptedKeyChain, Uint8List hashKeyChain, int errorCode) async {
    oprot.writeMessageBegin(new TMessage("respondE2EELoginRequest", TMessageType.CALL, nextSeqid()));
    respondE2EELoginRequest_args args = new respondE2EELoginRequest_args();
    args.verifier = verifier;
    args.publicKey = publicKey;
    args.encryptedKeyChain = encryptedKeyChain;
    args.hashKeyChain = hashKeyChain;
    args.errorCode = errorCode;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    respondE2EELoginRequest_result result = new respondE2EELoginRequest_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.e != null) {
      throw result.e;
    }
    return;
  }

  Future<String> confirmE2EELogin(String verifier, Uint8List deviceSecret) async {
    oprot.writeMessageBegin(new TMessage("confirmE2EELogin", TMessageType.CALL, nextSeqid()));
    confirmE2EELogin_args args = new confirmE2EELogin_args();
    args.verifier = verifier;
    args.deviceSecret = deviceSecret;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    confirmE2EELogin_result result = new confirmE2EELogin_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "confirmE2EELogin failed: unknown result");
  }

  Future logoutZ() async {
    oprot.writeMessageBegin(new TMessage("logoutZ", TMessageType.CALL, nextSeqid()));
    logoutZ_args args = new logoutZ_args();
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    logoutZ_result result = new logoutZ_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.e != null) {
      throw result.e;
    }
    return;
  }

  Future<LoginResult> loginZ(LoginRequest loginRequest) async {
    oprot.writeMessageBegin(new TMessage("loginZ", TMessageType.CALL, nextSeqid()));
    loginZ_args args = new loginZ_args();
    args.loginRequest = loginRequest;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    loginZ_result result = new loginZ_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "loginZ failed: unknown result");
  }

  Future<SecurityCenterResult> issueTokenForAccountMigrationSettings(bool enforce) async {
    oprot.writeMessageBegin(new TMessage("issueTokenForAccountMigrationSettings", TMessageType.CALL, nextSeqid()));
    issueTokenForAccountMigrationSettings_args args = new issueTokenForAccountMigrationSettings_args();
    args.enforce = enforce;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    issueTokenForAccountMigrationSettings_result result = new issueTokenForAccountMigrationSettings_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "issueTokenForAccountMigrationSettings failed: unknown result");
  }

  Future<SecurityCenterResult> issueTokenForAccountMigration(String migrationSessionId) async {
    oprot.writeMessageBegin(new TMessage("issueTokenForAccountMigration", TMessageType.CALL, nextSeqid()));
    issueTokenForAccountMigration_args args = new issueTokenForAccountMigration_args();
    args.migrationSessionId = migrationSessionId;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    issueTokenForAccountMigration_result result = new issueTokenForAccountMigration_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "issueTokenForAccountMigration failed: unknown result");
  }

  Future<String> verifyQrcodeWithE2EE(String verifier, String pinCode, int errorCode, E2EEPublicKey publicKey, Uint8List encryptedKeyChain, Uint8List hashKeyChain) async {
    oprot.writeMessageBegin(new TMessage("verifyQrcodeWithE2EE", TMessageType.CALL, nextSeqid()));
    verifyQrcodeWithE2EE_args args = new verifyQrcodeWithE2EE_args();
    args.verifier = verifier;
    args.pinCode = pinCode;
    args.errorCode = errorCode;
    args.publicKey = publicKey;
    args.encryptedKeyChain = encryptedKeyChain;
    args.hashKeyChain = hashKeyChain;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    verifyQrcodeWithE2EE_result result = new verifyQrcodeWithE2EE_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "verifyQrcodeWithE2EE failed: unknown result");
  }

}

typedef void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);

class AuthServiceProcessor implements TProcessor {
  AuthServiceProcessor(AuthService iface) {
    iface_ = iface;
    PROCESS_MAP["normalizePhoneNumber"] = normalizePhoneNumber;
    PROCESS_MAP["respondE2EELoginRequest"] = respondE2EELoginRequest;
    PROCESS_MAP["confirmE2EELogin"] = confirmE2EELogin;
    PROCESS_MAP["logoutZ"] = logoutZ;
    PROCESS_MAP["loginZ"] = loginZ;
    PROCESS_MAP["issueTokenForAccountMigrationSettings"] = issueTokenForAccountMigrationSettings;
    PROCESS_MAP["issueTokenForAccountMigration"] = issueTokenForAccountMigration;
    PROCESS_MAP["verifyQrcodeWithE2EE"] = verifyQrcodeWithE2EE;
  }

  AuthService iface_;
  final Map<String, ProcessFunction> PROCESS_MAP = {};

  bool process(TProtocol iprot, TProtocol oprot) {
    TMessage msg = iprot.readMessageBegin();
    ProcessFunction fn = PROCESS_MAP[msg.name];
    if (fn == null) {
      TProtocolUtil.skip(iprot, TType.STRUCT);
      iprot.readMessageEnd();
      TApplicationError x = new TApplicationError(TApplicationErrorType.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
      oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return true;
    }
    fn(msg.seqid, iprot, oprot);
    return true;
  }

  normalizePhoneNumber(int seqid, TProtocol iprot, TProtocol oprot) async {
    normalizePhoneNumber_args args = new normalizePhoneNumber_args();
    args.read(iprot);
    iprot.readMessageEnd();
    normalizePhoneNumber_result result = new normalizePhoneNumber_result();
    try {
      result.success = await iface_.normalizePhoneNumber(args.countryCode, args.phoneNumber, args.countryCodeHint);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing normalizePhoneNumber");
      oprot.writeMessageBegin(new TMessage("normalizePhoneNumber", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("normalizePhoneNumber", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  respondE2EELoginRequest(int seqid, TProtocol iprot, TProtocol oprot) {
    respondE2EELoginRequest_args args = new respondE2EELoginRequest_args();
    args.read(iprot);
    iprot.readMessageEnd();
    respondE2EELoginRequest_result result = new respondE2EELoginRequest_result();
    try {
      iface_.respondE2EELoginRequest(args.verifier, args.publicKey, args.encryptedKeyChain, args.hashKeyChain, args.errorCode);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing respondE2EELoginRequest");
      oprot.writeMessageBegin(new TMessage("respondE2EELoginRequest", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("respondE2EELoginRequest", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  confirmE2EELogin(int seqid, TProtocol iprot, TProtocol oprot) async {
    confirmE2EELogin_args args = new confirmE2EELogin_args();
    args.read(iprot);
    iprot.readMessageEnd();
    confirmE2EELogin_result result = new confirmE2EELogin_result();
    try {
      result.success = await iface_.confirmE2EELogin(args.verifier, args.deviceSecret);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing confirmE2EELogin");
      oprot.writeMessageBegin(new TMessage("confirmE2EELogin", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("confirmE2EELogin", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  logoutZ(int seqid, TProtocol iprot, TProtocol oprot) {
    logoutZ_args args = new logoutZ_args();
    args.read(iprot);
    iprot.readMessageEnd();
    logoutZ_result result = new logoutZ_result();
    try {
      iface_.logoutZ();
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing logoutZ");
      oprot.writeMessageBegin(new TMessage("logoutZ", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("logoutZ", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  loginZ(int seqid, TProtocol iprot, TProtocol oprot) async {
    loginZ_args args = new loginZ_args();
    args.read(iprot);
    iprot.readMessageEnd();
    loginZ_result result = new loginZ_result();
    try {
      result.success = await iface_.loginZ(args.loginRequest);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing loginZ");
      oprot.writeMessageBegin(new TMessage("loginZ", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("loginZ", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  issueTokenForAccountMigrationSettings(int seqid, TProtocol iprot, TProtocol oprot) async {
    issueTokenForAccountMigrationSettings_args args = new issueTokenForAccountMigrationSettings_args();
    args.read(iprot);
    iprot.readMessageEnd();
    issueTokenForAccountMigrationSettings_result result = new issueTokenForAccountMigrationSettings_result();
    try {
      result.success = await iface_.issueTokenForAccountMigrationSettings(args.enforce);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing issueTokenForAccountMigrationSettings");
      oprot.writeMessageBegin(new TMessage("issueTokenForAccountMigrationSettings", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("issueTokenForAccountMigrationSettings", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  issueTokenForAccountMigration(int seqid, TProtocol iprot, TProtocol oprot) async {
    issueTokenForAccountMigration_args args = new issueTokenForAccountMigration_args();
    args.read(iprot);
    iprot.readMessageEnd();
    issueTokenForAccountMigration_result result = new issueTokenForAccountMigration_result();
    try {
      result.success = await iface_.issueTokenForAccountMigration(args.migrationSessionId);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing issueTokenForAccountMigration");
      oprot.writeMessageBegin(new TMessage("issueTokenForAccountMigration", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("issueTokenForAccountMigration", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  verifyQrcodeWithE2EE(int seqid, TProtocol iprot, TProtocol oprot) async {
    verifyQrcodeWithE2EE_args args = new verifyQrcodeWithE2EE_args();
    args.read(iprot);
    iprot.readMessageEnd();
    verifyQrcodeWithE2EE_result result = new verifyQrcodeWithE2EE_result();
    try {
      result.success = await iface_.verifyQrcodeWithE2EE(args.verifier, args.pinCode, args.errorCode, args.publicKey, args.encryptedKeyChain, args.hashKeyChain);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing verifyQrcodeWithE2EE");
      oprot.writeMessageBegin(new TMessage("verifyQrcodeWithE2EE", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("verifyQrcodeWithE2EE", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

}

class normalizePhoneNumber_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("normalizePhoneNumber_args");
  static final TField _COUNTRY_CODE_FIELD_DESC = new TField("countryCode", TType.STRING, 2);
  static final TField _PHONE_NUMBER_FIELD_DESC = new TField("phoneNumber", TType.STRING, 3);
  static final TField _COUNTRY_CODE_HINT_FIELD_DESC = new TField("countryCodeHint", TType.STRING, 4);

  String _countryCode;
  static const int COUNTRYCODE = 2;
  String _phoneNumber;
  static const int PHONENUMBER = 3;
  String _countryCodeHint;
  static const int COUNTRYCODEHINT = 4;


  normalizePhoneNumber_args() {
  }

  // countryCode
  String get countryCode => this._countryCode;

  set countryCode(String countryCode) {
    this._countryCode = countryCode;
  }

  bool isSetCountryCode() => this.countryCode != null;

  unsetCountryCode() {
    this.countryCode = null;
  }

  // phoneNumber
  String get phoneNumber => this._phoneNumber;

  set phoneNumber(String phoneNumber) {
    this._phoneNumber = phoneNumber;
  }

  bool isSetPhoneNumber() => this.phoneNumber != null;

  unsetPhoneNumber() {
    this.phoneNumber = null;
  }

  // countryCodeHint
  String get countryCodeHint => this._countryCodeHint;

  set countryCodeHint(String countryCodeHint) {
    this._countryCodeHint = countryCodeHint;
  }

  bool isSetCountryCodeHint() => this.countryCodeHint != null;

  unsetCountryCodeHint() {
    this.countryCodeHint = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case COUNTRYCODE:
        return this.countryCode;
      case PHONENUMBER:
        return this.phoneNumber;
      case COUNTRYCODEHINT:
        return this.countryCodeHint;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case COUNTRYCODE:
        if (value == null) {
          unsetCountryCode();
        } else {
          this.countryCode = value;
        }
        break;

      case PHONENUMBER:
        if (value == null) {
          unsetPhoneNumber();
        } else {
          this.phoneNumber = value;
        }
        break;

      case COUNTRYCODEHINT:
        if (value == null) {
          unsetCountryCodeHint();
        } else {
          this.countryCodeHint = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case COUNTRYCODE:
        return isSetCountryCode();
      case PHONENUMBER:
        return isSetPhoneNumber();
      case COUNTRYCODEHINT:
        return isSetCountryCodeHint();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case COUNTRYCODE:
          if (field.type == TType.STRING) {
            this.countryCode = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PHONENUMBER:
          if (field.type == TType.STRING) {
            this.phoneNumber = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COUNTRYCODEHINT:
          if (field.type == TType.STRING) {
            this.countryCodeHint = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.countryCode != null) {
      oprot.writeFieldBegin(_COUNTRY_CODE_FIELD_DESC);
      oprot.writeString(this.countryCode);
      oprot.writeFieldEnd();
    }
    if (this.phoneNumber != null) {
      oprot.writeFieldBegin(_PHONE_NUMBER_FIELD_DESC);
      oprot.writeString(this.phoneNumber);
      oprot.writeFieldEnd();
    }
    if (this.countryCodeHint != null) {
      oprot.writeFieldBegin(_COUNTRY_CODE_HINT_FIELD_DESC);
      oprot.writeString(this.countryCodeHint);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("normalizePhoneNumber_args(");

    ret.write("countryCode:");
    if (this.countryCode == null) {
      ret.write("null");
    } else {
      ret.write(this.countryCode);
    }

    ret.write(", ");
    ret.write("phoneNumber:");
    if (this.phoneNumber == null) {
      ret.write("null");
    } else {
      ret.write(this.phoneNumber);
    }

    ret.write(", ");
    ret.write("countryCodeHint:");
    if (this.countryCodeHint == null) {
      ret.write("null");
    } else {
      ret.write(this.countryCodeHint);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class normalizePhoneNumber_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("normalizePhoneNumber_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRING, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  String _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  normalizePhoneNumber_result() {
  }

  // success
  String get success => this._success;

  set success(String success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRING) {
            this.success = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeString(this.success);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("normalizePhoneNumber_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class respondE2EELoginRequest_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("respondE2EELoginRequest_args");
  static final TField _VERIFIER_FIELD_DESC = new TField("verifier", TType.STRING, 1);
  static final TField _PUBLIC_KEY_FIELD_DESC = new TField("publicKey", TType.STRUCT, 2);
  static final TField _ENCRYPTED_KEY_CHAIN_FIELD_DESC = new TField("encryptedKeyChain", TType.STRING, 3);
  static final TField _HASH_KEY_CHAIN_FIELD_DESC = new TField("hashKeyChain", TType.STRING, 4);
  static final TField _ERROR_CODE_FIELD_DESC = new TField("errorCode", TType.I32, 5);

  String _verifier;
  static const int VERIFIER = 1;
  E2EEPublicKey _publicKey;
  static const int PUBLICKEY = 2;
  Uint8List _encryptedKeyChain;
  static const int ENCRYPTEDKEYCHAIN = 3;
  Uint8List _hashKeyChain;
  static const int HASHKEYCHAIN = 4;
  int _errorCode;
  static const int ERRORCODE = 5;

  bool __isset_errorCode = false;

  respondE2EELoginRequest_args() {
  }

  // verifier
  String get verifier => this._verifier;

  set verifier(String verifier) {
    this._verifier = verifier;
  }

  bool isSetVerifier() => this.verifier != null;

  unsetVerifier() {
    this.verifier = null;
  }

  // publicKey
  E2EEPublicKey get publicKey => this._publicKey;

  set publicKey(E2EEPublicKey publicKey) {
    this._publicKey = publicKey;
  }

  bool isSetPublicKey() => this.publicKey != null;

  unsetPublicKey() {
    this.publicKey = null;
  }

  // encryptedKeyChain
  Uint8List get encryptedKeyChain => this._encryptedKeyChain;

  set encryptedKeyChain(Uint8List encryptedKeyChain) {
    this._encryptedKeyChain = encryptedKeyChain;
  }

  bool isSetEncryptedKeyChain() => this.encryptedKeyChain != null;

  unsetEncryptedKeyChain() {
    this.encryptedKeyChain = null;
  }

  // hashKeyChain
  Uint8List get hashKeyChain => this._hashKeyChain;

  set hashKeyChain(Uint8List hashKeyChain) {
    this._hashKeyChain = hashKeyChain;
  }

  bool isSetHashKeyChain() => this.hashKeyChain != null;

  unsetHashKeyChain() {
    this.hashKeyChain = null;
  }

  // errorCode
  int get errorCode => this._errorCode;

  set errorCode(int errorCode) {
    this._errorCode = errorCode;
    this.__isset_errorCode = true;
  }

  bool isSetErrorCode() => this.__isset_errorCode;

  unsetErrorCode() {
    this.__isset_errorCode = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case VERIFIER:
        return this.verifier;
      case PUBLICKEY:
        return this.publicKey;
      case ENCRYPTEDKEYCHAIN:
        return this.encryptedKeyChain;
      case HASHKEYCHAIN:
        return this.hashKeyChain;
      case ERRORCODE:
        return this.errorCode;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case VERIFIER:
        if (value == null) {
          unsetVerifier();
        } else {
          this.verifier = value;
        }
        break;

      case PUBLICKEY:
        if (value == null) {
          unsetPublicKey();
        } else {
          this.publicKey = value;
        }
        break;

      case ENCRYPTEDKEYCHAIN:
        if (value == null) {
          unsetEncryptedKeyChain();
        } else {
          this.encryptedKeyChain = value;
        }
        break;

      case HASHKEYCHAIN:
        if (value == null) {
          unsetHashKeyChain();
        } else {
          this.hashKeyChain = value;
        }
        break;

      case ERRORCODE:
        if (value == null) {
          unsetErrorCode();
        } else {
          this.errorCode = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case VERIFIER:
        return isSetVerifier();
      case PUBLICKEY:
        return isSetPublicKey();
      case ENCRYPTEDKEYCHAIN:
        return isSetEncryptedKeyChain();
      case HASHKEYCHAIN:
        return isSetHashKeyChain();
      case ERRORCODE:
        return isSetErrorCode();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case VERIFIER:
          if (field.type == TType.STRING) {
            this.verifier = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PUBLICKEY:
          if (field.type == TType.STRUCT) {
            this.publicKey = new E2EEPublicKey();
            this.publicKey.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ENCRYPTEDKEYCHAIN:
          if (field.type == TType.STRING) {
            this.encryptedKeyChain = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case HASHKEYCHAIN:
          if (field.type == TType.STRING) {
            this.hashKeyChain = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ERRORCODE:
          if (field.type == TType.I32) {
            this.errorCode = iprot.readI32();
            this.__isset_errorCode = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.verifier != null) {
      oprot.writeFieldBegin(_VERIFIER_FIELD_DESC);
      oprot.writeString(this.verifier);
      oprot.writeFieldEnd();
    }
    if (this.publicKey != null) {
      oprot.writeFieldBegin(_PUBLIC_KEY_FIELD_DESC);
      this.publicKey.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.encryptedKeyChain != null) {
      oprot.writeFieldBegin(_ENCRYPTED_KEY_CHAIN_FIELD_DESC);
      oprot.writeBinary(this.encryptedKeyChain);
      oprot.writeFieldEnd();
    }
    if (this.hashKeyChain != null) {
      oprot.writeFieldBegin(_HASH_KEY_CHAIN_FIELD_DESC);
      oprot.writeBinary(this.hashKeyChain);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_ERROR_CODE_FIELD_DESC);
    oprot.writeI32(this.errorCode);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("respondE2EELoginRequest_args(");

    ret.write("verifier:");
    if (this.verifier == null) {
      ret.write("null");
    } else {
      ret.write(this.verifier);
    }

    ret.write(", ");
    ret.write("publicKey:");
    if (this.publicKey == null) {
      ret.write("null");
    } else {
      ret.write(this.publicKey);
    }

    ret.write(", ");
    ret.write("encryptedKeyChain:");
    if (this.encryptedKeyChain == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("hashKeyChain:");
    if (this.hashKeyChain == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("errorCode:");
    String errorCode_name = ErrorCode.VALUES_TO_NAMES[this.errorCode];
    if (errorCode_name != null) {
      ret.write(errorCode_name);
      ret.write(" (");
    }
    ret.write(this.errorCode);
    if (errorCode_name != null) {
      ret.write(")");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetErrorCode() && !ErrorCode.VALID_VALUES.contains(errorCode)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'errorCode' has been assigned the invalid value $errorCode");
    }
  }

}

class respondE2EELoginRequest_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("respondE2EELoginRequest_result");
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  TalkException _e;
  static const int E = 1;


  respondE2EELoginRequest_result() {
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("respondE2EELoginRequest_result(");

    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class confirmE2EELogin_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("confirmE2EELogin_args");
  static final TField _VERIFIER_FIELD_DESC = new TField("verifier", TType.STRING, 1);
  static final TField _DEVICE_SECRET_FIELD_DESC = new TField("deviceSecret", TType.STRING, 2);

  String _verifier;
  static const int VERIFIER = 1;
  Uint8List _deviceSecret;
  static const int DEVICESECRET = 2;


  confirmE2EELogin_args() {
  }

  // verifier
  String get verifier => this._verifier;

  set verifier(String verifier) {
    this._verifier = verifier;
  }

  bool isSetVerifier() => this.verifier != null;

  unsetVerifier() {
    this.verifier = null;
  }

  // deviceSecret
  Uint8List get deviceSecret => this._deviceSecret;

  set deviceSecret(Uint8List deviceSecret) {
    this._deviceSecret = deviceSecret;
  }

  bool isSetDeviceSecret() => this.deviceSecret != null;

  unsetDeviceSecret() {
    this.deviceSecret = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case VERIFIER:
        return this.verifier;
      case DEVICESECRET:
        return this.deviceSecret;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case VERIFIER:
        if (value == null) {
          unsetVerifier();
        } else {
          this.verifier = value;
        }
        break;

      case DEVICESECRET:
        if (value == null) {
          unsetDeviceSecret();
        } else {
          this.deviceSecret = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case VERIFIER:
        return isSetVerifier();
      case DEVICESECRET:
        return isSetDeviceSecret();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case VERIFIER:
          if (field.type == TType.STRING) {
            this.verifier = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DEVICESECRET:
          if (field.type == TType.STRING) {
            this.deviceSecret = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.verifier != null) {
      oprot.writeFieldBegin(_VERIFIER_FIELD_DESC);
      oprot.writeString(this.verifier);
      oprot.writeFieldEnd();
    }
    if (this.deviceSecret != null) {
      oprot.writeFieldBegin(_DEVICE_SECRET_FIELD_DESC);
      oprot.writeBinary(this.deviceSecret);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("confirmE2EELogin_args(");

    ret.write("verifier:");
    if (this.verifier == null) {
      ret.write("null");
    } else {
      ret.write(this.verifier);
    }

    ret.write(", ");
    ret.write("deviceSecret:");
    if (this.deviceSecret == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class confirmE2EELogin_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("confirmE2EELogin_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRING, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  String _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  confirmE2EELogin_result() {
  }

  // success
  String get success => this._success;

  set success(String success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRING) {
            this.success = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeString(this.success);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("confirmE2EELogin_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class logoutZ_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("logoutZ_args");



  logoutZ_args() {
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("logoutZ_args(");

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class logoutZ_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("logoutZ_result");
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  TalkException _e;
  static const int E = 1;


  logoutZ_result() {
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("logoutZ_result(");

    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class loginZ_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("loginZ_args");
  static final TField _LOGIN_REQUEST_FIELD_DESC = new TField("loginRequest", TType.STRUCT, 2);

  LoginRequest _loginRequest;
  static const int LOGINREQUEST = 2;


  loginZ_args() {
  }

  // loginRequest
  LoginRequest get loginRequest => this._loginRequest;

  set loginRequest(LoginRequest loginRequest) {
    this._loginRequest = loginRequest;
  }

  bool isSetLoginRequest() => this.loginRequest != null;

  unsetLoginRequest() {
    this.loginRequest = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case LOGINREQUEST:
        return this.loginRequest;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case LOGINREQUEST:
        if (value == null) {
          unsetLoginRequest();
        } else {
          this.loginRequest = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case LOGINREQUEST:
        return isSetLoginRequest();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case LOGINREQUEST:
          if (field.type == TType.STRUCT) {
            this.loginRequest = new LoginRequest();
            this.loginRequest.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.loginRequest != null) {
      oprot.writeFieldBegin(_LOGIN_REQUEST_FIELD_DESC);
      this.loginRequest.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("loginZ_args(");

    ret.write("loginRequest:");
    if (this.loginRequest == null) {
      ret.write("null");
    } else {
      ret.write(this.loginRequest);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class loginZ_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("loginZ_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  LoginResult _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  loginZ_result() {
  }

  // success
  LoginResult get success => this._success;

  set success(LoginResult success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new LoginResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("loginZ_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class issueTokenForAccountMigrationSettings_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("issueTokenForAccountMigrationSettings_args");
  static final TField _ENFORCE_FIELD_DESC = new TField("enforce", TType.BOOL, 2);

  bool _enforce = false;
  static const int ENFORCE = 2;

  bool __isset_enforce = false;

  issueTokenForAccountMigrationSettings_args() {
  }

  // enforce
  bool get enforce => this._enforce;

  set enforce(bool enforce) {
    this._enforce = enforce;
    this.__isset_enforce = true;
  }

  bool isSetEnforce() => this.__isset_enforce;

  unsetEnforce() {
    this.__isset_enforce = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case ENFORCE:
        return this.enforce;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case ENFORCE:
        if (value == null) {
          unsetEnforce();
        } else {
          this.enforce = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case ENFORCE:
        return isSetEnforce();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ENFORCE:
          if (field.type == TType.BOOL) {
            this.enforce = iprot.readBool();
            this.__isset_enforce = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_ENFORCE_FIELD_DESC);
    oprot.writeBool(this.enforce);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("issueTokenForAccountMigrationSettings_args(");

    ret.write("enforce:");
    ret.write(this.enforce);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class issueTokenForAccountMigrationSettings_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("issueTokenForAccountMigrationSettings_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  SecurityCenterResult _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  issueTokenForAccountMigrationSettings_result() {
  }

  // success
  SecurityCenterResult get success => this._success;

  set success(SecurityCenterResult success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new SecurityCenterResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("issueTokenForAccountMigrationSettings_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class issueTokenForAccountMigration_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("issueTokenForAccountMigration_args");
  static final TField _MIGRATION_SESSION_ID_FIELD_DESC = new TField("migrationSessionId", TType.STRING, 2);

  String _migrationSessionId;
  static const int MIGRATIONSESSIONID = 2;


  issueTokenForAccountMigration_args() {
  }

  // migrationSessionId
  String get migrationSessionId => this._migrationSessionId;

  set migrationSessionId(String migrationSessionId) {
    this._migrationSessionId = migrationSessionId;
  }

  bool isSetMigrationSessionId() => this.migrationSessionId != null;

  unsetMigrationSessionId() {
    this.migrationSessionId = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case MIGRATIONSESSIONID:
        return this.migrationSessionId;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case MIGRATIONSESSIONID:
        if (value == null) {
          unsetMigrationSessionId();
        } else {
          this.migrationSessionId = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case MIGRATIONSESSIONID:
        return isSetMigrationSessionId();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case MIGRATIONSESSIONID:
          if (field.type == TType.STRING) {
            this.migrationSessionId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.migrationSessionId != null) {
      oprot.writeFieldBegin(_MIGRATION_SESSION_ID_FIELD_DESC);
      oprot.writeString(this.migrationSessionId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("issueTokenForAccountMigration_args(");

    ret.write("migrationSessionId:");
    if (this.migrationSessionId == null) {
      ret.write("null");
    } else {
      ret.write(this.migrationSessionId);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class issueTokenForAccountMigration_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("issueTokenForAccountMigration_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  SecurityCenterResult _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  issueTokenForAccountMigration_result() {
  }

  // success
  SecurityCenterResult get success => this._success;

  set success(SecurityCenterResult success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new SecurityCenterResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("issueTokenForAccountMigration_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class verifyQrcodeWithE2EE_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("verifyQrcodeWithE2EE_args");
  static final TField _VERIFIER_FIELD_DESC = new TField("verifier", TType.STRING, 2);
  static final TField _PIN_CODE_FIELD_DESC = new TField("pinCode", TType.STRING, 3);
  static final TField _ERROR_CODE_FIELD_DESC = new TField("errorCode", TType.I32, 4);
  static final TField _PUBLIC_KEY_FIELD_DESC = new TField("publicKey", TType.STRUCT, 5);
  static final TField _ENCRYPTED_KEY_CHAIN_FIELD_DESC = new TField("encryptedKeyChain", TType.STRING, 6);
  static final TField _HASH_KEY_CHAIN_FIELD_DESC = new TField("hashKeyChain", TType.STRING, 7);

  String _verifier;
  static const int VERIFIER = 2;
  String _pinCode;
  static const int PINCODE = 3;
  int _errorCode;
  static const int ERRORCODE = 4;
  E2EEPublicKey _publicKey;
  static const int PUBLICKEY = 5;
  Uint8List _encryptedKeyChain;
  static const int ENCRYPTEDKEYCHAIN = 6;
  Uint8List _hashKeyChain;
  static const int HASHKEYCHAIN = 7;

  bool __isset_errorCode = false;

  verifyQrcodeWithE2EE_args() {
  }

  // verifier
  String get verifier => this._verifier;

  set verifier(String verifier) {
    this._verifier = verifier;
  }

  bool isSetVerifier() => this.verifier != null;

  unsetVerifier() {
    this.verifier = null;
  }

  // pinCode
  String get pinCode => this._pinCode;

  set pinCode(String pinCode) {
    this._pinCode = pinCode;
  }

  bool isSetPinCode() => this.pinCode != null;

  unsetPinCode() {
    this.pinCode = null;
  }

  // errorCode
  int get errorCode => this._errorCode;

  set errorCode(int errorCode) {
    this._errorCode = errorCode;
    this.__isset_errorCode = true;
  }

  bool isSetErrorCode() => this.__isset_errorCode;

  unsetErrorCode() {
    this.__isset_errorCode = false;
  }

  // publicKey
  E2EEPublicKey get publicKey => this._publicKey;

  set publicKey(E2EEPublicKey publicKey) {
    this._publicKey = publicKey;
  }

  bool isSetPublicKey() => this.publicKey != null;

  unsetPublicKey() {
    this.publicKey = null;
  }

  // encryptedKeyChain
  Uint8List get encryptedKeyChain => this._encryptedKeyChain;

  set encryptedKeyChain(Uint8List encryptedKeyChain) {
    this._encryptedKeyChain = encryptedKeyChain;
  }

  bool isSetEncryptedKeyChain() => this.encryptedKeyChain != null;

  unsetEncryptedKeyChain() {
    this.encryptedKeyChain = null;
  }

  // hashKeyChain
  Uint8List get hashKeyChain => this._hashKeyChain;

  set hashKeyChain(Uint8List hashKeyChain) {
    this._hashKeyChain = hashKeyChain;
  }

  bool isSetHashKeyChain() => this.hashKeyChain != null;

  unsetHashKeyChain() {
    this.hashKeyChain = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case VERIFIER:
        return this.verifier;
      case PINCODE:
        return this.pinCode;
      case ERRORCODE:
        return this.errorCode;
      case PUBLICKEY:
        return this.publicKey;
      case ENCRYPTEDKEYCHAIN:
        return this.encryptedKeyChain;
      case HASHKEYCHAIN:
        return this.hashKeyChain;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case VERIFIER:
        if (value == null) {
          unsetVerifier();
        } else {
          this.verifier = value;
        }
        break;

      case PINCODE:
        if (value == null) {
          unsetPinCode();
        } else {
          this.pinCode = value;
        }
        break;

      case ERRORCODE:
        if (value == null) {
          unsetErrorCode();
        } else {
          this.errorCode = value;
        }
        break;

      case PUBLICKEY:
        if (value == null) {
          unsetPublicKey();
        } else {
          this.publicKey = value;
        }
        break;

      case ENCRYPTEDKEYCHAIN:
        if (value == null) {
          unsetEncryptedKeyChain();
        } else {
          this.encryptedKeyChain = value;
        }
        break;

      case HASHKEYCHAIN:
        if (value == null) {
          unsetHashKeyChain();
        } else {
          this.hashKeyChain = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case VERIFIER:
        return isSetVerifier();
      case PINCODE:
        return isSetPinCode();
      case ERRORCODE:
        return isSetErrorCode();
      case PUBLICKEY:
        return isSetPublicKey();
      case ENCRYPTEDKEYCHAIN:
        return isSetEncryptedKeyChain();
      case HASHKEYCHAIN:
        return isSetHashKeyChain();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case VERIFIER:
          if (field.type == TType.STRING) {
            this.verifier = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PINCODE:
          if (field.type == TType.STRING) {
            this.pinCode = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ERRORCODE:
          if (field.type == TType.I32) {
            this.errorCode = iprot.readI32();
            this.__isset_errorCode = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PUBLICKEY:
          if (field.type == TType.STRUCT) {
            this.publicKey = new E2EEPublicKey();
            this.publicKey.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ENCRYPTEDKEYCHAIN:
          if (field.type == TType.STRING) {
            this.encryptedKeyChain = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case HASHKEYCHAIN:
          if (field.type == TType.STRING) {
            this.hashKeyChain = iprot.readBinary();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.verifier != null) {
      oprot.writeFieldBegin(_VERIFIER_FIELD_DESC);
      oprot.writeString(this.verifier);
      oprot.writeFieldEnd();
    }
    if (this.pinCode != null) {
      oprot.writeFieldBegin(_PIN_CODE_FIELD_DESC);
      oprot.writeString(this.pinCode);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_ERROR_CODE_FIELD_DESC);
    oprot.writeI32(this.errorCode);
    oprot.writeFieldEnd();
    if (this.publicKey != null) {
      oprot.writeFieldBegin(_PUBLIC_KEY_FIELD_DESC);
      this.publicKey.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.encryptedKeyChain != null) {
      oprot.writeFieldBegin(_ENCRYPTED_KEY_CHAIN_FIELD_DESC);
      oprot.writeBinary(this.encryptedKeyChain);
      oprot.writeFieldEnd();
    }
    if (this.hashKeyChain != null) {
      oprot.writeFieldBegin(_HASH_KEY_CHAIN_FIELD_DESC);
      oprot.writeBinary(this.hashKeyChain);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("verifyQrcodeWithE2EE_args(");

    ret.write("verifier:");
    if (this.verifier == null) {
      ret.write("null");
    } else {
      ret.write(this.verifier);
    }

    ret.write(", ");
    ret.write("pinCode:");
    if (this.pinCode == null) {
      ret.write("null");
    } else {
      ret.write(this.pinCode);
    }

    ret.write(", ");
    ret.write("errorCode:");
    String errorCode_name = ErrorCode.VALUES_TO_NAMES[this.errorCode];
    if (errorCode_name != null) {
      ret.write(errorCode_name);
      ret.write(" (");
    }
    ret.write(this.errorCode);
    if (errorCode_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("publicKey:");
    if (this.publicKey == null) {
      ret.write("null");
    } else {
      ret.write(this.publicKey);
    }

    ret.write(", ");
    ret.write("encryptedKeyChain:");
    if (this.encryptedKeyChain == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(", ");
    ret.write("hashKeyChain:");
    if (this.hashKeyChain == null) {
      ret.write("null");
    } else {
      ret.write("BINARY");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetErrorCode() && !ErrorCode.VALID_VALUES.contains(errorCode)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'errorCode' has been assigned the invalid value $errorCode");
    }
  }

}

class verifyQrcodeWithE2EE_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("verifyQrcodeWithE2EE_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRING, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  String _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  verifyQrcodeWithE2EE_result() {
  }

  // success
  String get success => this._success;

  set success(String success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRING) {
            this.success = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeString(this.success);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("verifyQrcodeWithE2EE_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

