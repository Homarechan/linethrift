/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.global_event;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class GlobalEvent implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("GlobalEvent");
  static final TField _KEY_FIELD_DESC = new TField("key", TType.STRING, 1);
  static final TField _TARGETS_FIELD_DESC = new TField("targets", TType.LIST, 2);
  static final TField _CREATED_TIME_FIELD_DESC = new TField("createdTime", TType.I64, 3);
  static final TField _DATA_FIELD_DESC = new TField("data", TType.I64, 4);
  static final TField _MAX_DELAY_FIELD_DESC = new TField("maxDelay", TType.I32, 5);

  String _key;
  static const int KEY = 1;
  List<NotificationTarget> _targets;
  static const int TARGETS = 2;
  int _createdTime = 0;
  static const int CREATEDTIME = 3;
  int _data = 0;
  static const int DATA = 4;
  int _maxDelay = 0;
  static const int MAXDELAY = 5;

  bool __isset_createdTime = false;
  bool __isset_data = false;
  bool __isset_maxDelay = false;

  GlobalEvent() {
  }

  // key
  String get key => this._key;

  set key(String key) {
    this._key = key;
  }

  bool isSetKey() => this.key != null;

  unsetKey() {
    this.key = null;
  }

  // targets
  List<NotificationTarget> get targets => this._targets;

  set targets(List<NotificationTarget> targets) {
    this._targets = targets;
  }

  bool isSetTargets() => this.targets != null;

  unsetTargets() {
    this.targets = null;
  }

  // createdTime
  int get createdTime => this._createdTime;

  set createdTime(int createdTime) {
    this._createdTime = createdTime;
    this.__isset_createdTime = true;
  }

  bool isSetCreatedTime() => this.__isset_createdTime;

  unsetCreatedTime() {
    this.__isset_createdTime = false;
  }

  // data
  int get data => this._data;

  set data(int data) {
    this._data = data;
    this.__isset_data = true;
  }

  bool isSetData() => this.__isset_data;

  unsetData() {
    this.__isset_data = false;
  }

  // maxDelay
  int get maxDelay => this._maxDelay;

  set maxDelay(int maxDelay) {
    this._maxDelay = maxDelay;
    this.__isset_maxDelay = true;
  }

  bool isSetMaxDelay() => this.__isset_maxDelay;

  unsetMaxDelay() {
    this.__isset_maxDelay = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case KEY:
        return this.key;
      case TARGETS:
        return this.targets;
      case CREATEDTIME:
        return this.createdTime;
      case DATA:
        return this.data;
      case MAXDELAY:
        return this.maxDelay;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          this.key = value;
        }
        break;

      case TARGETS:
        if (value == null) {
          unsetTargets();
        } else {
          this.targets = value;
        }
        break;

      case CREATEDTIME:
        if (value == null) {
          unsetCreatedTime();
        } else {
          this.createdTime = value;
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          this.data = value;
        }
        break;

      case MAXDELAY:
        if (value == null) {
          unsetMaxDelay();
        } else {
          this.maxDelay = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case KEY:
        return isSetKey();
      case TARGETS:
        return isSetTargets();
      case CREATEDTIME:
        return isSetCreatedTime();
      case DATA:
        return isSetData();
      case MAXDELAY:
        return isSetMaxDelay();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case KEY:
          if (field.type == TType.STRING) {
            this.key = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TARGETS:
          if (field.type == TType.LIST) {
            {
              TList _list230 = iprot.readListBegin();
              this.targets = new List<NotificationTarget>();
              for (int _i231 = 0; _i231 < _list230.length; ++_i231) {
                NotificationTarget _elem232;
                _elem232 = new NotificationTarget();
                _elem232.read(iprot);
                this.targets.add(_elem232);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CREATEDTIME:
          if (field.type == TType.I64) {
            this.createdTime = iprot.readI64();
            this.__isset_createdTime = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DATA:
          if (field.type == TType.I64) {
            this.data = iprot.readI64();
            this.__isset_data = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MAXDELAY:
          if (field.type == TType.I32) {
            this.maxDelay = iprot.readI32();
            this.__isset_maxDelay = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.key != null) {
      oprot.writeFieldBegin(_KEY_FIELD_DESC);
      oprot.writeString(this.key);
      oprot.writeFieldEnd();
    }
    if (this.targets != null) {
      oprot.writeFieldBegin(_TARGETS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.targets.length));
        for (var elem233 in this.targets) {
          elem233.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_CREATED_TIME_FIELD_DESC);
    oprot.writeI64(this.createdTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_DATA_FIELD_DESC);
    oprot.writeI64(this.data);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_MAX_DELAY_FIELD_DESC);
    oprot.writeI32(this.maxDelay);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("GlobalEvent(");

    ret.write("key:");
    if (this.key == null) {
      ret.write("null");
    } else {
      ret.write(this.key);
    }

    ret.write(", ");
    ret.write("targets:");
    if (this.targets == null) {
      ret.write("null");
    } else {
      ret.write(this.targets);
    }

    ret.write(", ");
    ret.write("createdTime:");
    ret.write(this.createdTime);

    ret.write(", ");
    ret.write("data:");
    ret.write(this.data);

    ret.write(", ");
    ret.write("maxDelay:");
    ret.write(this.maxDelay);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

