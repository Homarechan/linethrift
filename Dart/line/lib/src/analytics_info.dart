/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.analytics_info;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class AnalyticsInfo implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("AnalyticsInfo");
  static final TField _GA_SAMPLING_RATE_FIELD_DESC = new TField("gaSamplingRate", TType.DOUBLE, 1);
  static final TField _TMID_FIELD_DESC = new TField("tmid", TType.STRING, 2);

  double _gaSamplingRate = 0.0;
  static const int GASAMPLINGRATE = 1;
  String _tmid;
  static const int TMID = 2;

  bool __isset_gaSamplingRate = false;

  AnalyticsInfo() {
  }

  // gaSamplingRate
  double get gaSamplingRate => this._gaSamplingRate;

  set gaSamplingRate(double gaSamplingRate) {
    this._gaSamplingRate = gaSamplingRate;
    this.__isset_gaSamplingRate = true;
  }

  bool isSetGaSamplingRate() => this.__isset_gaSamplingRate;

  unsetGaSamplingRate() {
    this.__isset_gaSamplingRate = false;
  }

  // tmid
  String get tmid => this._tmid;

  set tmid(String tmid) {
    this._tmid = tmid;
  }

  bool isSetTmid() => this.tmid != null;

  unsetTmid() {
    this.tmid = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case GASAMPLINGRATE:
        return this.gaSamplingRate;
      case TMID:
        return this.tmid;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case GASAMPLINGRATE:
        if (value == null) {
          unsetGaSamplingRate();
        } else {
          this.gaSamplingRate = value;
        }
        break;

      case TMID:
        if (value == null) {
          unsetTmid();
        } else {
          this.tmid = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case GASAMPLINGRATE:
        return isSetGaSamplingRate();
      case TMID:
        return isSetTmid();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case GASAMPLINGRATE:
          if (field.type == TType.DOUBLE) {
            this.gaSamplingRate = iprot.readDouble();
            this.__isset_gaSamplingRate = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TMID:
          if (field.type == TType.STRING) {
            this.tmid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_GA_SAMPLING_RATE_FIELD_DESC);
    oprot.writeDouble(this.gaSamplingRate);
    oprot.writeFieldEnd();
    if (this.tmid != null) {
      oprot.writeFieldBegin(_TMID_FIELD_DESC);
      oprot.writeString(this.tmid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("AnalyticsInfo(");

    ret.write("gaSamplingRate:");
    ret.write(this.gaSamplingRate);

    ret.write(", ");
    ret.write("tmid:");
    if (this.tmid == null) {
      ret.write("null");
    } else {
      ret.write(this.tmid);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

