/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.search_square_members_request;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class SearchSquareMembersRequest implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("SearchSquareMembersRequest");
  static final TField _SQUARE_MID_FIELD_DESC = new TField("squareMid", TType.STRING, 2);
  static final TField _SEARCH_OPTION_FIELD_DESC = new TField("searchOption", TType.STRUCT, 3);
  static final TField _CONTINUATION_TOKEN_FIELD_DESC = new TField("continuationToken", TType.STRING, 4);
  static final TField _LIMIT_FIELD_DESC = new TField("limit", TType.I32, 5);

  String _squareMid;
  static const int SQUAREMID = 2;
  SquareMemberSearchOption _searchOption;
  static const int SEARCHOPTION = 3;
  String _continuationToken;
  static const int CONTINUATIONTOKEN = 4;
  int _limit = 0;
  static const int LIMIT = 5;

  bool __isset_limit = false;

  SearchSquareMembersRequest() {
  }

  // squareMid
  String get squareMid => this._squareMid;

  set squareMid(String squareMid) {
    this._squareMid = squareMid;
  }

  bool isSetSquareMid() => this.squareMid != null;

  unsetSquareMid() {
    this.squareMid = null;
  }

  // searchOption
  SquareMemberSearchOption get searchOption => this._searchOption;

  set searchOption(SquareMemberSearchOption searchOption) {
    this._searchOption = searchOption;
  }

  bool isSetSearchOption() => this.searchOption != null;

  unsetSearchOption() {
    this.searchOption = null;
  }

  // continuationToken
  String get continuationToken => this._continuationToken;

  set continuationToken(String continuationToken) {
    this._continuationToken = continuationToken;
  }

  bool isSetContinuationToken() => this.continuationToken != null;

  unsetContinuationToken() {
    this.continuationToken = null;
  }

  // limit
  int get limit => this._limit;

  set limit(int limit) {
    this._limit = limit;
    this.__isset_limit = true;
  }

  bool isSetLimit() => this.__isset_limit;

  unsetLimit() {
    this.__isset_limit = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SQUAREMID:
        return this.squareMid;
      case SEARCHOPTION:
        return this.searchOption;
      case CONTINUATIONTOKEN:
        return this.continuationToken;
      case LIMIT:
        return this.limit;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SQUAREMID:
        if (value == null) {
          unsetSquareMid();
        } else {
          this.squareMid = value;
        }
        break;

      case SEARCHOPTION:
        if (value == null) {
          unsetSearchOption();
        } else {
          this.searchOption = value;
        }
        break;

      case CONTINUATIONTOKEN:
        if (value == null) {
          unsetContinuationToken();
        } else {
          this.continuationToken = value;
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          this.limit = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SQUAREMID:
        return isSetSquareMid();
      case SEARCHOPTION:
        return isSetSearchOption();
      case CONTINUATIONTOKEN:
        return isSetContinuationToken();
      case LIMIT:
        return isSetLimit();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SQUAREMID:
          if (field.type == TType.STRING) {
            this.squareMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SEARCHOPTION:
          if (field.type == TType.STRUCT) {
            this.searchOption = new SquareMemberSearchOption();
            this.searchOption.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CONTINUATIONTOKEN:
          if (field.type == TType.STRING) {
            this.continuationToken = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LIMIT:
          if (field.type == TType.I32) {
            this.limit = iprot.readI32();
            this.__isset_limit = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.squareMid != null) {
      oprot.writeFieldBegin(_SQUARE_MID_FIELD_DESC);
      oprot.writeString(this.squareMid);
      oprot.writeFieldEnd();
    }
    if (this.searchOption != null) {
      oprot.writeFieldBegin(_SEARCH_OPTION_FIELD_DESC);
      this.searchOption.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.continuationToken != null) {
      oprot.writeFieldBegin(_CONTINUATION_TOKEN_FIELD_DESC);
      oprot.writeString(this.continuationToken);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_LIMIT_FIELD_DESC);
    oprot.writeI32(this.limit);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("SearchSquareMembersRequest(");

    ret.write("squareMid:");
    if (this.squareMid == null) {
      ret.write("null");
    } else {
      ret.write(this.squareMid);
    }

    ret.write(", ");
    ret.write("searchOption:");
    if (this.searchOption == null) {
      ret.write("null");
    } else {
      ret.write(this.searchOption);
    }

    ret.write(", ");
    ret.write("continuationToken:");
    if (this.continuationToken == null) {
      ret.write("null");
    } else {
      ret.write(this.continuationToken);
    }

    ret.write(", ");
    ret.write("limit:");
    ret.write(this.limit);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

