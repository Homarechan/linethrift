/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.product_property;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class ProductProperty implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ProductProperty");
  static final TField _STICKER_PROPERTY_FIELD_DESC = new TField("stickerProperty", TType.STRUCT, 1);
  static final TField _STICON_PROPERTY_FIELD_DESC = new TField("sticonProperty", TType.STRUCT, 3);
  static final TField _THEME_PROPERTY_FIELD_DESC = new TField("themeProperty", TType.STRUCT, 2);

  StickerProperty _stickerProperty;
  static const int STICKERPROPERTY = 1;
  SticonProperty _sticonProperty;
  static const int STICONPROPERTY = 3;
  ThemeProperty _themeProperty;
  static const int THEMEPROPERTY = 2;


  ProductProperty() {
  }

  // stickerProperty
  StickerProperty get stickerProperty => this._stickerProperty;

  set stickerProperty(StickerProperty stickerProperty) {
    this._stickerProperty = stickerProperty;
  }

  bool isSetStickerProperty() => this.stickerProperty != null;

  unsetStickerProperty() {
    this.stickerProperty = null;
  }

  // sticonProperty
  SticonProperty get sticonProperty => this._sticonProperty;

  set sticonProperty(SticonProperty sticonProperty) {
    this._sticonProperty = sticonProperty;
  }

  bool isSetSticonProperty() => this.sticonProperty != null;

  unsetSticonProperty() {
    this.sticonProperty = null;
  }

  // themeProperty
  ThemeProperty get themeProperty => this._themeProperty;

  set themeProperty(ThemeProperty themeProperty) {
    this._themeProperty = themeProperty;
  }

  bool isSetThemeProperty() => this.themeProperty != null;

  unsetThemeProperty() {
    this.themeProperty = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case STICKERPROPERTY:
        return this.stickerProperty;
      case STICONPROPERTY:
        return this.sticonProperty;
      case THEMEPROPERTY:
        return this.themeProperty;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case STICKERPROPERTY:
        if (value == null) {
          unsetStickerProperty();
        } else {
          this.stickerProperty = value;
        }
        break;

      case STICONPROPERTY:
        if (value == null) {
          unsetSticonProperty();
        } else {
          this.sticonProperty = value;
        }
        break;

      case THEMEPROPERTY:
        if (value == null) {
          unsetThemeProperty();
        } else {
          this.themeProperty = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case STICKERPROPERTY:
        return isSetStickerProperty();
      case STICONPROPERTY:
        return isSetSticonProperty();
      case THEMEPROPERTY:
        return isSetThemeProperty();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case STICKERPROPERTY:
          if (field.type == TType.STRUCT) {
            this.stickerProperty = new StickerProperty();
            this.stickerProperty.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STICONPROPERTY:
          if (field.type == TType.STRUCT) {
            this.sticonProperty = new SticonProperty();
            this.sticonProperty.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case THEMEPROPERTY:
          if (field.type == TType.STRUCT) {
            this.themeProperty = new ThemeProperty();
            this.themeProperty.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.stickerProperty != null) {
      oprot.writeFieldBegin(_STICKER_PROPERTY_FIELD_DESC);
      this.stickerProperty.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.themeProperty != null) {
      oprot.writeFieldBegin(_THEME_PROPERTY_FIELD_DESC);
      this.themeProperty.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.sticonProperty != null) {
      oprot.writeFieldBegin(_STICON_PROPERTY_FIELD_DESC);
      this.sticonProperty.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ProductProperty(");

    ret.write("stickerProperty:");
    if (this.stickerProperty == null) {
      ret.write("null");
    } else {
      ret.write(this.stickerProperty);
    }

    ret.write(", ");
    ret.write("sticonProperty:");
    if (this.sticonProperty == null) {
      ret.write("null");
    } else {
      ret.write(this.sticonProperty);
    }

    ret.write(", ");
    ret.write("themeProperty:");
    if (this.themeProperty == null) {
      ret.write("null");
    } else {
      ret.write(this.themeProperty);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

