/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.message_service;

import 'dart:async';
import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';


abstract class MessageService {

  Future<MessageOperations> fetchMessageOperations(int localRevision, int lastOpTimestamp, int count);

  Future<LastReadMessageIds> getLastReadMessageIds(String chatId);

  Future<List<LastReadMessageIds>> multiGetLastReadMessageIds(List<String> chatIds);
}

class MessageServiceClient implements MessageService {

  MessageServiceClient(TProtocol iprot, [TProtocol oprot = null]) {
    _iprot = iprot;
    _oprot = (oprot == null) ? iprot : oprot;
  }

  TProtocol _iprot;

  TProtocol get iprot => _iprot;

  TProtocol _oprot;

  TProtocol get oprot => _oprot;

  int _seqid = 0;

  int get seqid => _seqid;

  int nextSeqid() => ++_seqid;

  Future<MessageOperations> fetchMessageOperations(int localRevision, int lastOpTimestamp, int count) async {
    oprot.writeMessageBegin(new TMessage("fetchMessageOperations", TMessageType.CALL, nextSeqid()));
    fetchMessageOperations_args args = new fetchMessageOperations_args();
    args.localRevision = localRevision;
    args.lastOpTimestamp = lastOpTimestamp;
    args.count = count;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    fetchMessageOperations_result result = new fetchMessageOperations_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "fetchMessageOperations failed: unknown result");
  }

  Future<LastReadMessageIds> getLastReadMessageIds(String chatId) async {
    oprot.writeMessageBegin(new TMessage("getLastReadMessageIds", TMessageType.CALL, nextSeqid()));
    getLastReadMessageIds_args args = new getLastReadMessageIds_args();
    args.chatId = chatId;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    getLastReadMessageIds_result result = new getLastReadMessageIds_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "getLastReadMessageIds failed: unknown result");
  }

  Future<List<LastReadMessageIds>> multiGetLastReadMessageIds(List<String> chatIds) async {
    oprot.writeMessageBegin(new TMessage("multiGetLastReadMessageIds", TMessageType.CALL, nextSeqid()));
    multiGetLastReadMessageIds_args args = new multiGetLastReadMessageIds_args();
    args.chatIds = chatIds;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    multiGetLastReadMessageIds_result result = new multiGetLastReadMessageIds_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "multiGetLastReadMessageIds failed: unknown result");
  }

}

typedef void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);

class MessageServiceProcessor implements TProcessor {
  MessageServiceProcessor(MessageService iface) {
    iface_ = iface;
    PROCESS_MAP["fetchMessageOperations"] = fetchMessageOperations;
    PROCESS_MAP["getLastReadMessageIds"] = getLastReadMessageIds;
    PROCESS_MAP["multiGetLastReadMessageIds"] = multiGetLastReadMessageIds;
  }

  MessageService iface_;
  final Map<String, ProcessFunction> PROCESS_MAP = {};

  bool process(TProtocol iprot, TProtocol oprot) {
    TMessage msg = iprot.readMessageBegin();
    ProcessFunction fn = PROCESS_MAP[msg.name];
    if (fn == null) {
      TProtocolUtil.skip(iprot, TType.STRUCT);
      iprot.readMessageEnd();
      TApplicationError x = new TApplicationError(TApplicationErrorType.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
      oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return true;
    }
    fn(msg.seqid, iprot, oprot);
    return true;
  }

  fetchMessageOperations(int seqid, TProtocol iprot, TProtocol oprot) async {
    fetchMessageOperations_args args = new fetchMessageOperations_args();
    args.read(iprot);
    iprot.readMessageEnd();
    fetchMessageOperations_result result = new fetchMessageOperations_result();
    try {
      result.success = await iface_.fetchMessageOperations(args.localRevision, args.lastOpTimestamp, args.count);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing fetchMessageOperations");
      oprot.writeMessageBegin(new TMessage("fetchMessageOperations", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("fetchMessageOperations", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  getLastReadMessageIds(int seqid, TProtocol iprot, TProtocol oprot) async {
    getLastReadMessageIds_args args = new getLastReadMessageIds_args();
    args.read(iprot);
    iprot.readMessageEnd();
    getLastReadMessageIds_result result = new getLastReadMessageIds_result();
    try {
      result.success = await iface_.getLastReadMessageIds(args.chatId);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing getLastReadMessageIds");
      oprot.writeMessageBegin(new TMessage("getLastReadMessageIds", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("getLastReadMessageIds", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  multiGetLastReadMessageIds(int seqid, TProtocol iprot, TProtocol oprot) async {
    multiGetLastReadMessageIds_args args = new multiGetLastReadMessageIds_args();
    args.read(iprot);
    iprot.readMessageEnd();
    multiGetLastReadMessageIds_result result = new multiGetLastReadMessageIds_result();
    try {
      result.success = await iface_.multiGetLastReadMessageIds(args.chatIds);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing multiGetLastReadMessageIds");
      oprot.writeMessageBegin(new TMessage("multiGetLastReadMessageIds", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("multiGetLastReadMessageIds", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

}

class fetchMessageOperations_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("fetchMessageOperations_args");
  static final TField _LOCAL_REVISION_FIELD_DESC = new TField("localRevision", TType.I64, 2);
  static final TField _LAST_OP_TIMESTAMP_FIELD_DESC = new TField("lastOpTimestamp", TType.I64, 3);
  static final TField _COUNT_FIELD_DESC = new TField("count", TType.I32, 4);

  int _localRevision = 0;
  static const int LOCALREVISION = 2;
  int _lastOpTimestamp = 0;
  static const int LASTOPTIMESTAMP = 3;
  int _count = 0;
  static const int COUNT = 4;

  bool __isset_localRevision = false;
  bool __isset_lastOpTimestamp = false;
  bool __isset_count = false;

  fetchMessageOperations_args() {
  }

  // localRevision
  int get localRevision => this._localRevision;

  set localRevision(int localRevision) {
    this._localRevision = localRevision;
    this.__isset_localRevision = true;
  }

  bool isSetLocalRevision() => this.__isset_localRevision;

  unsetLocalRevision() {
    this.__isset_localRevision = false;
  }

  // lastOpTimestamp
  int get lastOpTimestamp => this._lastOpTimestamp;

  set lastOpTimestamp(int lastOpTimestamp) {
    this._lastOpTimestamp = lastOpTimestamp;
    this.__isset_lastOpTimestamp = true;
  }

  bool isSetLastOpTimestamp() => this.__isset_lastOpTimestamp;

  unsetLastOpTimestamp() {
    this.__isset_lastOpTimestamp = false;
  }

  // count
  int get count => this._count;

  set count(int count) {
    this._count = count;
    this.__isset_count = true;
  }

  bool isSetCount() => this.__isset_count;

  unsetCount() {
    this.__isset_count = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case LOCALREVISION:
        return this.localRevision;
      case LASTOPTIMESTAMP:
        return this.lastOpTimestamp;
      case COUNT:
        return this.count;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case LOCALREVISION:
        if (value == null) {
          unsetLocalRevision();
        } else {
          this.localRevision = value;
        }
        break;

      case LASTOPTIMESTAMP:
        if (value == null) {
          unsetLastOpTimestamp();
        } else {
          this.lastOpTimestamp = value;
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          this.count = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case LOCALREVISION:
        return isSetLocalRevision();
      case LASTOPTIMESTAMP:
        return isSetLastOpTimestamp();
      case COUNT:
        return isSetCount();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case LOCALREVISION:
          if (field.type == TType.I64) {
            this.localRevision = iprot.readI64();
            this.__isset_localRevision = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LASTOPTIMESTAMP:
          if (field.type == TType.I64) {
            this.lastOpTimestamp = iprot.readI64();
            this.__isset_lastOpTimestamp = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COUNT:
          if (field.type == TType.I32) {
            this.count = iprot.readI32();
            this.__isset_count = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_LOCAL_REVISION_FIELD_DESC);
    oprot.writeI64(this.localRevision);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_LAST_OP_TIMESTAMP_FIELD_DESC);
    oprot.writeI64(this.lastOpTimestamp);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_COUNT_FIELD_DESC);
    oprot.writeI32(this.count);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("fetchMessageOperations_args(");

    ret.write("localRevision:");
    ret.write(this.localRevision);

    ret.write(", ");
    ret.write("lastOpTimestamp:");
    ret.write(this.lastOpTimestamp);

    ret.write(", ");
    ret.write("count:");
    ret.write(this.count);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class fetchMessageOperations_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("fetchMessageOperations_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  MessageOperations _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  fetchMessageOperations_result() {
  }

  // success
  MessageOperations get success => this._success;

  set success(MessageOperations success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new MessageOperations();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("fetchMessageOperations_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getLastReadMessageIds_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getLastReadMessageIds_args");
  static final TField _CHAT_ID_FIELD_DESC = new TField("chatId", TType.STRING, 2);

  String _chatId;
  static const int CHATID = 2;


  getLastReadMessageIds_args() {
  }

  // chatId
  String get chatId => this._chatId;

  set chatId(String chatId) {
    this._chatId = chatId;
  }

  bool isSetChatId() => this.chatId != null;

  unsetChatId() {
    this.chatId = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case CHATID:
        return this.chatId;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case CHATID:
        if (value == null) {
          unsetChatId();
        } else {
          this.chatId = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case CHATID:
        return isSetChatId();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case CHATID:
          if (field.type == TType.STRING) {
            this.chatId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.chatId != null) {
      oprot.writeFieldBegin(_CHAT_ID_FIELD_DESC);
      oprot.writeString(this.chatId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getLastReadMessageIds_args(");

    ret.write("chatId:");
    if (this.chatId == null) {
      ret.write("null");
    } else {
      ret.write(this.chatId);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getLastReadMessageIds_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getLastReadMessageIds_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  LastReadMessageIds _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  getLastReadMessageIds_result() {
  }

  // success
  LastReadMessageIds get success => this._success;

  set success(LastReadMessageIds success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new LastReadMessageIds();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getLastReadMessageIds_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class multiGetLastReadMessageIds_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("multiGetLastReadMessageIds_args");
  static final TField _CHAT_IDS_FIELD_DESC = new TField("chatIds", TType.LIST, 2);

  List<String> _chatIds;
  static const int CHATIDS = 2;


  multiGetLastReadMessageIds_args() {
  }

  // chatIds
  List<String> get chatIds => this._chatIds;

  set chatIds(List<String> chatIds) {
    this._chatIds = chatIds;
  }

  bool isSetChatIds() => this.chatIds != null;

  unsetChatIds() {
    this.chatIds = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case CHATIDS:
        return this.chatIds;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case CHATIDS:
        if (value == null) {
          unsetChatIds();
        } else {
          this.chatIds = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case CHATIDS:
        return isSetChatIds();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case CHATIDS:
          if (field.type == TType.LIST) {
            {
              TList _list778 = iprot.readListBegin();
              this.chatIds = new List<String>();
              for (int _i779 = 0; _i779 < _list778.length; ++_i779) {
                String _elem780;
                _elem780 = iprot.readString();
                this.chatIds.add(_elem780);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.chatIds != null) {
      oprot.writeFieldBegin(_CHAT_IDS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.chatIds.length));
        for (var elem781 in this.chatIds) {
          oprot.writeString(elem781);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("multiGetLastReadMessageIds_args(");

    ret.write("chatIds:");
    if (this.chatIds == null) {
      ret.write("null");
    } else {
      ret.write(this.chatIds);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class multiGetLastReadMessageIds_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("multiGetLastReadMessageIds_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.LIST, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  List<LastReadMessageIds> _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  multiGetLastReadMessageIds_result() {
  }

  // success
  List<LastReadMessageIds> get success => this._success;

  set success(List<LastReadMessageIds> success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.LIST) {
            {
              TList _list782 = iprot.readListBegin();
              this.success = new List<LastReadMessageIds>();
              for (int _i783 = 0; _i783 < _list782.length; ++_i783) {
                LastReadMessageIds _elem784;
                _elem784 = new LastReadMessageIds();
                _elem784.read(iprot);
                this.success.add(_elem784);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.success.length));
        for (var elem785 in this.success) {
          elem785.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("multiGetLastReadMessageIds_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

