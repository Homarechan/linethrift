/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.verification_session_data;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class VerificationSessionData implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("VerificationSessionData");
  static final TField _SESSION_ID_FIELD_DESC = new TField("sessionId", TType.STRING, 1);
  static final TField _METHOD_FIELD_DESC = new TField("method", TType.I32, 2);
  static final TField _CALLBACK_FIELD_DESC = new TField("callback", TType.STRING, 3);
  static final TField _NORMALIZED_PHONE_FIELD_DESC = new TField("normalizedPhone", TType.STRING, 4);
  static final TField _COUNTRY_CODE_FIELD_DESC = new TField("countryCode", TType.STRING, 5);
  static final TField _NATIONAL_SIGNIFICANT_NUMBER_FIELD_DESC = new TField("nationalSignificantNumber", TType.STRING, 6);
  static final TField _AVAILABLE_VERIFICATION_METHODS_FIELD_DESC = new TField("availableVerificationMethods", TType.LIST, 7);
  static final TField _CALLER_ID_MASK_FIELD_DESC = new TField("callerIdMask", TType.STRING, 8);

  String _sessionId;
  static const int SESSIONID = 1;
  int _method;
  static const int METHOD = 2;
  String _callback;
  static const int CALLBACK = 3;
  String _normalizedPhone;
  static const int NORMALIZEDPHONE = 4;
  String _countryCode;
  static const int COUNTRYCODE = 5;
  String _nationalSignificantNumber;
  static const int NATIONALSIGNIFICANTNUMBER = 6;
  List<int> _availableVerificationMethods;
  static const int AVAILABLEVERIFICATIONMETHODS = 7;
  String _callerIdMask;
  static const int CALLERIDMASK = 8;

  bool __isset_method = false;

  VerificationSessionData() {
  }

  // sessionId
  String get sessionId => this._sessionId;

  set sessionId(String sessionId) {
    this._sessionId = sessionId;
  }

  bool isSetSessionId() => this.sessionId != null;

  unsetSessionId() {
    this.sessionId = null;
  }

  // method
  int get method => this._method;

  set method(int method) {
    this._method = method;
    this.__isset_method = true;
  }

  bool isSetMethod() => this.__isset_method;

  unsetMethod() {
    this.__isset_method = false;
  }

  // callback
  String get callback => this._callback;

  set callback(String callback) {
    this._callback = callback;
  }

  bool isSetCallback() => this.callback != null;

  unsetCallback() {
    this.callback = null;
  }

  // normalizedPhone
  String get normalizedPhone => this._normalizedPhone;

  set normalizedPhone(String normalizedPhone) {
    this._normalizedPhone = normalizedPhone;
  }

  bool isSetNormalizedPhone() => this.normalizedPhone != null;

  unsetNormalizedPhone() {
    this.normalizedPhone = null;
  }

  // countryCode
  String get countryCode => this._countryCode;

  set countryCode(String countryCode) {
    this._countryCode = countryCode;
  }

  bool isSetCountryCode() => this.countryCode != null;

  unsetCountryCode() {
    this.countryCode = null;
  }

  // nationalSignificantNumber
  String get nationalSignificantNumber => this._nationalSignificantNumber;

  set nationalSignificantNumber(String nationalSignificantNumber) {
    this._nationalSignificantNumber = nationalSignificantNumber;
  }

  bool isSetNationalSignificantNumber() => this.nationalSignificantNumber != null;

  unsetNationalSignificantNumber() {
    this.nationalSignificantNumber = null;
  }

  // availableVerificationMethods
  List<int> get availableVerificationMethods => this._availableVerificationMethods;

  set availableVerificationMethods(List<int> availableVerificationMethods) {
    this._availableVerificationMethods = availableVerificationMethods;
  }

  bool isSetAvailableVerificationMethods() => this.availableVerificationMethods != null;

  unsetAvailableVerificationMethods() {
    this.availableVerificationMethods = null;
  }

  // callerIdMask
  String get callerIdMask => this._callerIdMask;

  set callerIdMask(String callerIdMask) {
    this._callerIdMask = callerIdMask;
  }

  bool isSetCallerIdMask() => this.callerIdMask != null;

  unsetCallerIdMask() {
    this.callerIdMask = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SESSIONID:
        return this.sessionId;
      case METHOD:
        return this.method;
      case CALLBACK:
        return this.callback;
      case NORMALIZEDPHONE:
        return this.normalizedPhone;
      case COUNTRYCODE:
        return this.countryCode;
      case NATIONALSIGNIFICANTNUMBER:
        return this.nationalSignificantNumber;
      case AVAILABLEVERIFICATIONMETHODS:
        return this.availableVerificationMethods;
      case CALLERIDMASK:
        return this.callerIdMask;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SESSIONID:
        if (value == null) {
          unsetSessionId();
        } else {
          this.sessionId = value;
        }
        break;

      case METHOD:
        if (value == null) {
          unsetMethod();
        } else {
          this.method = value;
        }
        break;

      case CALLBACK:
        if (value == null) {
          unsetCallback();
        } else {
          this.callback = value;
        }
        break;

      case NORMALIZEDPHONE:
        if (value == null) {
          unsetNormalizedPhone();
        } else {
          this.normalizedPhone = value;
        }
        break;

      case COUNTRYCODE:
        if (value == null) {
          unsetCountryCode();
        } else {
          this.countryCode = value;
        }
        break;

      case NATIONALSIGNIFICANTNUMBER:
        if (value == null) {
          unsetNationalSignificantNumber();
        } else {
          this.nationalSignificantNumber = value;
        }
        break;

      case AVAILABLEVERIFICATIONMETHODS:
        if (value == null) {
          unsetAvailableVerificationMethods();
        } else {
          this.availableVerificationMethods = value;
        }
        break;

      case CALLERIDMASK:
        if (value == null) {
          unsetCallerIdMask();
        } else {
          this.callerIdMask = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SESSIONID:
        return isSetSessionId();
      case METHOD:
        return isSetMethod();
      case CALLBACK:
        return isSetCallback();
      case NORMALIZEDPHONE:
        return isSetNormalizedPhone();
      case COUNTRYCODE:
        return isSetCountryCode();
      case NATIONALSIGNIFICANTNUMBER:
        return isSetNationalSignificantNumber();
      case AVAILABLEVERIFICATIONMETHODS:
        return isSetAvailableVerificationMethods();
      case CALLERIDMASK:
        return isSetCallerIdMask();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SESSIONID:
          if (field.type == TType.STRING) {
            this.sessionId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case METHOD:
          if (field.type == TType.I32) {
            this.method = iprot.readI32();
            this.__isset_method = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CALLBACK:
          if (field.type == TType.STRING) {
            this.callback = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NORMALIZEDPHONE:
          if (field.type == TType.STRING) {
            this.normalizedPhone = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COUNTRYCODE:
          if (field.type == TType.STRING) {
            this.countryCode = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NATIONALSIGNIFICANTNUMBER:
          if (field.type == TType.STRING) {
            this.nationalSignificantNumber = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AVAILABLEVERIFICATIONMETHODS:
          if (field.type == TType.LIST) {
            {
              TList _list254 = iprot.readListBegin();
              this.availableVerificationMethods = new List<int>();
              for (int _i255 = 0; _i255 < _list254.length; ++_i255) {
                int _elem256;
                _elem256 = iprot.readI32();
                this.availableVerificationMethods.add(_elem256);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CALLERIDMASK:
          if (field.type == TType.STRING) {
            this.callerIdMask = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.sessionId != null) {
      oprot.writeFieldBegin(_SESSION_ID_FIELD_DESC);
      oprot.writeString(this.sessionId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_METHOD_FIELD_DESC);
    oprot.writeI32(this.method);
    oprot.writeFieldEnd();
    if (this.callback != null) {
      oprot.writeFieldBegin(_CALLBACK_FIELD_DESC);
      oprot.writeString(this.callback);
      oprot.writeFieldEnd();
    }
    if (this.normalizedPhone != null) {
      oprot.writeFieldBegin(_NORMALIZED_PHONE_FIELD_DESC);
      oprot.writeString(this.normalizedPhone);
      oprot.writeFieldEnd();
    }
    if (this.countryCode != null) {
      oprot.writeFieldBegin(_COUNTRY_CODE_FIELD_DESC);
      oprot.writeString(this.countryCode);
      oprot.writeFieldEnd();
    }
    if (this.nationalSignificantNumber != null) {
      oprot.writeFieldBegin(_NATIONAL_SIGNIFICANT_NUMBER_FIELD_DESC);
      oprot.writeString(this.nationalSignificantNumber);
      oprot.writeFieldEnd();
    }
    if (this.availableVerificationMethods != null) {
      oprot.writeFieldBegin(_AVAILABLE_VERIFICATION_METHODS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.I32, this.availableVerificationMethods.length));
        for (var elem257 in this.availableVerificationMethods) {
          oprot.writeI32(elem257);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.callerIdMask != null) {
      oprot.writeFieldBegin(_CALLER_ID_MASK_FIELD_DESC);
      oprot.writeString(this.callerIdMask);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("VerificationSessionData(");

    ret.write("sessionId:");
    if (this.sessionId == null) {
      ret.write("null");
    } else {
      ret.write(this.sessionId);
    }

    ret.write(", ");
    ret.write("method:");
    String method_name = VerificationMethod.VALUES_TO_NAMES[this.method];
    if (method_name != null) {
      ret.write(method_name);
      ret.write(" (");
    }
    ret.write(this.method);
    if (method_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("callback:");
    if (this.callback == null) {
      ret.write("null");
    } else {
      ret.write(this.callback);
    }

    ret.write(", ");
    ret.write("normalizedPhone:");
    if (this.normalizedPhone == null) {
      ret.write("null");
    } else {
      ret.write(this.normalizedPhone);
    }

    ret.write(", ");
    ret.write("countryCode:");
    if (this.countryCode == null) {
      ret.write("null");
    } else {
      ret.write(this.countryCode);
    }

    ret.write(", ");
    ret.write("nationalSignificantNumber:");
    if (this.nationalSignificantNumber == null) {
      ret.write("null");
    } else {
      ret.write(this.nationalSignificantNumber);
    }

    ret.write(", ");
    ret.write("availableVerificationMethods:");
    if (this.availableVerificationMethods == null) {
      ret.write("null");
    } else {
      ret.write(this.availableVerificationMethods);
    }

    ret.write(", ");
    ret.write("callerIdMask:");
    if (this.callerIdMask == null) {
      ret.write("null");
    } else {
      ret.write(this.callerIdMask);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetMethod() && !VerificationMethod.VALID_VALUES.contains(method)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'method' has been assigned the invalid value $method");
    }
  }

}

