/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.sns_friend_modification;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class SnsFriendModification implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("SnsFriendModification");
  static final TField _TYPE_FIELD_DESC = new TField("type", TType.I32, 1);
  static final TField _SNS_FRIEND_FIELD_DESC = new TField("snsFriend", TType.STRUCT, 2);

  int _type;
  static const int TYPE = 1;
  SnsFriend _snsFriend;
  static const int SNSFRIEND = 2;

  bool __isset_type = false;

  SnsFriendModification() {
  }

  // type
  int get type => this._type;

  set type(int type) {
    this._type = type;
    this.__isset_type = true;
  }

  bool isSetType() => this.__isset_type;

  unsetType() {
    this.__isset_type = false;
  }

  // snsFriend
  SnsFriend get snsFriend => this._snsFriend;

  set snsFriend(SnsFriend snsFriend) {
    this._snsFriend = snsFriend;
  }

  bool isSetSnsFriend() => this.snsFriend != null;

  unsetSnsFriend() {
    this.snsFriend = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case TYPE:
        return this.type;
      case SNSFRIEND:
        return this.snsFriend;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          this.type = value;
        }
        break;

      case SNSFRIEND:
        if (value == null) {
          unsetSnsFriend();
        } else {
          this.snsFriend = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case TYPE:
        return isSetType();
      case SNSFRIEND:
        return isSetSnsFriend();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case TYPE:
          if (field.type == TType.I32) {
            this.type = iprot.readI32();
            this.__isset_type = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SNSFRIEND:
          if (field.type == TType.STRUCT) {
            this.snsFriend = new SnsFriend();
            this.snsFriend.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_TYPE_FIELD_DESC);
    oprot.writeI32(this.type);
    oprot.writeFieldEnd();
    if (this.snsFriend != null) {
      oprot.writeFieldBegin(_SNS_FRIEND_FIELD_DESC);
      this.snsFriend.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("SnsFriendModification(");

    ret.write("type:");
    String type_name = ModificationType.VALUES_TO_NAMES[this.type];
    if (type_name != null) {
      ret.write(type_name);
      ret.write(" (");
    }
    ret.write(this.type);
    if (type_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("snsFriend:");
    if (this.snsFriend == null) {
      ret.write("null");
    } else {
      ret.write(this.snsFriend);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetType() && !ModificationType.VALID_VALUES.contains(type)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'type' has been assigned the invalid value $type");
    }
  }

}

