/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.search_square_members_response;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class SearchSquareMembersResponse implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("SearchSquareMembersResponse");
  static final TField _MEMBERS_FIELD_DESC = new TField("members", TType.LIST, 1);
  static final TField _REVISION_FIELD_DESC = new TField("revision", TType.I64, 2);
  static final TField _CONTINUATION_TOKEN_FIELD_DESC = new TField("continuationToken", TType.STRING, 3);
  static final TField _TOTAL_COUNT_FIELD_DESC = new TField("totalCount", TType.I32, 4);

  List<SquareMember> _members;
  static const int MEMBERS = 1;
  int _revision = 0;
  static const int REVISION = 2;
  String _continuationToken;
  static const int CONTINUATIONTOKEN = 3;
  int _totalCount = 0;
  static const int TOTALCOUNT = 4;

  bool __isset_revision = false;
  bool __isset_totalCount = false;

  SearchSquareMembersResponse() {
  }

  // members
  List<SquareMember> get members => this._members;

  set members(List<SquareMember> members) {
    this._members = members;
  }

  bool isSetMembers() => this.members != null;

  unsetMembers() {
    this.members = null;
  }

  // revision
  int get revision => this._revision;

  set revision(int revision) {
    this._revision = revision;
    this.__isset_revision = true;
  }

  bool isSetRevision() => this.__isset_revision;

  unsetRevision() {
    this.__isset_revision = false;
  }

  // continuationToken
  String get continuationToken => this._continuationToken;

  set continuationToken(String continuationToken) {
    this._continuationToken = continuationToken;
  }

  bool isSetContinuationToken() => this.continuationToken != null;

  unsetContinuationToken() {
    this.continuationToken = null;
  }

  // totalCount
  int get totalCount => this._totalCount;

  set totalCount(int totalCount) {
    this._totalCount = totalCount;
    this.__isset_totalCount = true;
  }

  bool isSetTotalCount() => this.__isset_totalCount;

  unsetTotalCount() {
    this.__isset_totalCount = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case MEMBERS:
        return this.members;
      case REVISION:
        return this.revision;
      case CONTINUATIONTOKEN:
        return this.continuationToken;
      case TOTALCOUNT:
        return this.totalCount;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case MEMBERS:
        if (value == null) {
          unsetMembers();
        } else {
          this.members = value;
        }
        break;

      case REVISION:
        if (value == null) {
          unsetRevision();
        } else {
          this.revision = value;
        }
        break;

      case CONTINUATIONTOKEN:
        if (value == null) {
          unsetContinuationToken();
        } else {
          this.continuationToken = value;
        }
        break;

      case TOTALCOUNT:
        if (value == null) {
          unsetTotalCount();
        } else {
          this.totalCount = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case MEMBERS:
        return isSetMembers();
      case REVISION:
        return isSetRevision();
      case CONTINUATIONTOKEN:
        return isSetContinuationToken();
      case TOTALCOUNT:
        return isSetTotalCount();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case MEMBERS:
          if (field.type == TType.LIST) {
            {
              TList _list446 = iprot.readListBegin();
              this.members = new List<SquareMember>();
              for (int _i447 = 0; _i447 < _list446.length; ++_i447) {
                SquareMember _elem448;
                _elem448 = new SquareMember();
                _elem448.read(iprot);
                this.members.add(_elem448);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case REVISION:
          if (field.type == TType.I64) {
            this.revision = iprot.readI64();
            this.__isset_revision = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CONTINUATIONTOKEN:
          if (field.type == TType.STRING) {
            this.continuationToken = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TOTALCOUNT:
          if (field.type == TType.I32) {
            this.totalCount = iprot.readI32();
            this.__isset_totalCount = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.members != null) {
      oprot.writeFieldBegin(_MEMBERS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.members.length));
        for (var elem449 in this.members) {
          elem449.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_REVISION_FIELD_DESC);
    oprot.writeI64(this.revision);
    oprot.writeFieldEnd();
    if (this.continuationToken != null) {
      oprot.writeFieldBegin(_CONTINUATION_TOKEN_FIELD_DESC);
      oprot.writeString(this.continuationToken);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_TOTAL_COUNT_FIELD_DESC);
    oprot.writeI32(this.totalCount);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("SearchSquareMembersResponse(");

    ret.write("members:");
    if (this.members == null) {
      ret.write("null");
    } else {
      ret.write(this.members);
    }

    ret.write(", ");
    ret.write("revision:");
    ret.write(this.revision);

    ret.write(", ");
    ret.write("continuationToken:");
    if (this.continuationToken == null) {
      ret.write("null");
    } else {
      ret.write(this.continuationToken);
    }

    ret.write(", ");
    ret.write("totalCount:");
    ret.write(this.totalCount);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

