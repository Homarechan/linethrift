/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.paid_call_response;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class PaidCallResponse implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("PaidCallResponse");
  static final TField _HOST_FIELD_DESC = new TField("host", TType.STRUCT, 1);
  static final TField _DIALING_FIELD_DESC = new TField("dialing", TType.STRUCT, 2);
  static final TField _TOKEN_FIELD_DESC = new TField("token", TType.STRING, 3);
  static final TField _SPOT_ITEMS_FIELD_DESC = new TField("spotItems", TType.LIST, 4);

  CallHost _host;
  static const int HOST = 1;
  PaidCallDialing _dialing;
  static const int DIALING = 2;
  String _token;
  static const int TOKEN = 3;
  List<SpotItem> _spotItems;
  static const int SPOTITEMS = 4;


  PaidCallResponse() {
  }

  // host
  CallHost get host => this._host;

  set host(CallHost host) {
    this._host = host;
  }

  bool isSetHost() => this.host != null;

  unsetHost() {
    this.host = null;
  }

  // dialing
  PaidCallDialing get dialing => this._dialing;

  set dialing(PaidCallDialing dialing) {
    this._dialing = dialing;
  }

  bool isSetDialing() => this.dialing != null;

  unsetDialing() {
    this.dialing = null;
  }

  // token
  String get token => this._token;

  set token(String token) {
    this._token = token;
  }

  bool isSetToken() => this.token != null;

  unsetToken() {
    this.token = null;
  }

  // spotItems
  List<SpotItem> get spotItems => this._spotItems;

  set spotItems(List<SpotItem> spotItems) {
    this._spotItems = spotItems;
  }

  bool isSetSpotItems() => this.spotItems != null;

  unsetSpotItems() {
    this.spotItems = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case HOST:
        return this.host;
      case DIALING:
        return this.dialing;
      case TOKEN:
        return this.token;
      case SPOTITEMS:
        return this.spotItems;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case HOST:
        if (value == null) {
          unsetHost();
        } else {
          this.host = value;
        }
        break;

      case DIALING:
        if (value == null) {
          unsetDialing();
        } else {
          this.dialing = value;
        }
        break;

      case TOKEN:
        if (value == null) {
          unsetToken();
        } else {
          this.token = value;
        }
        break;

      case SPOTITEMS:
        if (value == null) {
          unsetSpotItems();
        } else {
          this.spotItems = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case HOST:
        return isSetHost();
      case DIALING:
        return isSetDialing();
      case TOKEN:
        return isSetToken();
      case SPOTITEMS:
        return isSetSpotItems();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case HOST:
          if (field.type == TType.STRUCT) {
            this.host = new CallHost();
            this.host.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DIALING:
          if (field.type == TType.STRUCT) {
            this.dialing = new PaidCallDialing();
            this.dialing.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TOKEN:
          if (field.type == TType.STRING) {
            this.token = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SPOTITEMS:
          if (field.type == TType.LIST) {
            {
              TList _list114 = iprot.readListBegin();
              this.spotItems = new List<SpotItem>();
              for (int _i115 = 0; _i115 < _list114.length; ++_i115) {
                SpotItem _elem116;
                _elem116 = new SpotItem();
                _elem116.read(iprot);
                this.spotItems.add(_elem116);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.host != null) {
      oprot.writeFieldBegin(_HOST_FIELD_DESC);
      this.host.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.dialing != null) {
      oprot.writeFieldBegin(_DIALING_FIELD_DESC);
      this.dialing.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.token != null) {
      oprot.writeFieldBegin(_TOKEN_FIELD_DESC);
      oprot.writeString(this.token);
      oprot.writeFieldEnd();
    }
    if (this.spotItems != null) {
      oprot.writeFieldBegin(_SPOT_ITEMS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.spotItems.length));
        for (var elem117 in this.spotItems) {
          elem117.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("PaidCallResponse(");

    ret.write("host:");
    if (this.host == null) {
      ret.write("null");
    } else {
      ret.write(this.host);
    }

    ret.write(", ");
    ret.write("dialing:");
    if (this.dialing == null) {
      ret.write("null");
    } else {
      ret.write(this.dialing);
    }

    ret.write(", ");
    ret.write("token:");
    if (this.token == null) {
      ret.write("null");
    } else {
      ret.write(this.token);
    }

    ret.write(", ");
    ret.write("spotItems:");
    if (this.spotItems == null) {
      ret.write("null");
    } else {
      ret.write(this.spotItems);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

