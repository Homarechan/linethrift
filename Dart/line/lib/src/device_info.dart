/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.device_info;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class DeviceInfo implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("DeviceInfo");
  static final TField _DEVICE_NAME_FIELD_DESC = new TField("deviceName", TType.STRING, 1);
  static final TField _SYSTEM_NAME_FIELD_DESC = new TField("systemName", TType.STRING, 2);
  static final TField _SYSTEM_VERSION_FIELD_DESC = new TField("systemVersion", TType.STRING, 3);
  static final TField _MODEL_FIELD_DESC = new TField("model", TType.STRING, 4);
  static final TField _CARRIER_CODE_FIELD_DESC = new TField("carrierCode", TType.I32, 10);
  static final TField _CARRIER_NAME_FIELD_DESC = new TField("carrierName", TType.STRING, 11);
  static final TField _APPLICATION_TYPE_FIELD_DESC = new TField("applicationType", TType.I32, 20);

  String _deviceName;
  static const int DEVICENAME = 1;
  String _systemName;
  static const int SYSTEMNAME = 2;
  String _systemVersion;
  static const int SYSTEMVERSION = 3;
  String _model;
  static const int MODEL = 4;
  int _carrierCode;
  static const int CARRIERCODE = 10;
  String _carrierName;
  static const int CARRIERNAME = 11;
  int _applicationType;
  static const int APPLICATIONTYPE = 20;

  bool __isset_carrierCode = false;
  bool __isset_applicationType = false;

  DeviceInfo() {
  }

  // deviceName
  String get deviceName => this._deviceName;

  set deviceName(String deviceName) {
    this._deviceName = deviceName;
  }

  bool isSetDeviceName() => this.deviceName != null;

  unsetDeviceName() {
    this.deviceName = null;
  }

  // systemName
  String get systemName => this._systemName;

  set systemName(String systemName) {
    this._systemName = systemName;
  }

  bool isSetSystemName() => this.systemName != null;

  unsetSystemName() {
    this.systemName = null;
  }

  // systemVersion
  String get systemVersion => this._systemVersion;

  set systemVersion(String systemVersion) {
    this._systemVersion = systemVersion;
  }

  bool isSetSystemVersion() => this.systemVersion != null;

  unsetSystemVersion() {
    this.systemVersion = null;
  }

  // model
  String get model => this._model;

  set model(String model) {
    this._model = model;
  }

  bool isSetModel() => this.model != null;

  unsetModel() {
    this.model = null;
  }

  // carrierCode
  int get carrierCode => this._carrierCode;

  set carrierCode(int carrierCode) {
    this._carrierCode = carrierCode;
    this.__isset_carrierCode = true;
  }

  bool isSetCarrierCode() => this.__isset_carrierCode;

  unsetCarrierCode() {
    this.__isset_carrierCode = false;
  }

  // carrierName
  String get carrierName => this._carrierName;

  set carrierName(String carrierName) {
    this._carrierName = carrierName;
  }

  bool isSetCarrierName() => this.carrierName != null;

  unsetCarrierName() {
    this.carrierName = null;
  }

  // applicationType
  int get applicationType => this._applicationType;

  set applicationType(int applicationType) {
    this._applicationType = applicationType;
    this.__isset_applicationType = true;
  }

  bool isSetApplicationType() => this.__isset_applicationType;

  unsetApplicationType() {
    this.__isset_applicationType = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case DEVICENAME:
        return this.deviceName;
      case SYSTEMNAME:
        return this.systemName;
      case SYSTEMVERSION:
        return this.systemVersion;
      case MODEL:
        return this.model;
      case CARRIERCODE:
        return this.carrierCode;
      case CARRIERNAME:
        return this.carrierName;
      case APPLICATIONTYPE:
        return this.applicationType;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case DEVICENAME:
        if (value == null) {
          unsetDeviceName();
        } else {
          this.deviceName = value;
        }
        break;

      case SYSTEMNAME:
        if (value == null) {
          unsetSystemName();
        } else {
          this.systemName = value;
        }
        break;

      case SYSTEMVERSION:
        if (value == null) {
          unsetSystemVersion();
        } else {
          this.systemVersion = value;
        }
        break;

      case MODEL:
        if (value == null) {
          unsetModel();
        } else {
          this.model = value;
        }
        break;

      case CARRIERCODE:
        if (value == null) {
          unsetCarrierCode();
        } else {
          this.carrierCode = value;
        }
        break;

      case CARRIERNAME:
        if (value == null) {
          unsetCarrierName();
        } else {
          this.carrierName = value;
        }
        break;

      case APPLICATIONTYPE:
        if (value == null) {
          unsetApplicationType();
        } else {
          this.applicationType = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case DEVICENAME:
        return isSetDeviceName();
      case SYSTEMNAME:
        return isSetSystemName();
      case SYSTEMVERSION:
        return isSetSystemVersion();
      case MODEL:
        return isSetModel();
      case CARRIERCODE:
        return isSetCarrierCode();
      case CARRIERNAME:
        return isSetCarrierName();
      case APPLICATIONTYPE:
        return isSetApplicationType();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case DEVICENAME:
          if (field.type == TType.STRING) {
            this.deviceName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SYSTEMNAME:
          if (field.type == TType.STRING) {
            this.systemName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SYSTEMVERSION:
          if (field.type == TType.STRING) {
            this.systemVersion = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MODEL:
          if (field.type == TType.STRING) {
            this.model = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CARRIERCODE:
          if (field.type == TType.I32) {
            this.carrierCode = iprot.readI32();
            this.__isset_carrierCode = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CARRIERNAME:
          if (field.type == TType.STRING) {
            this.carrierName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case APPLICATIONTYPE:
          if (field.type == TType.I32) {
            this.applicationType = iprot.readI32();
            this.__isset_applicationType = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.deviceName != null) {
      oprot.writeFieldBegin(_DEVICE_NAME_FIELD_DESC);
      oprot.writeString(this.deviceName);
      oprot.writeFieldEnd();
    }
    if (this.systemName != null) {
      oprot.writeFieldBegin(_SYSTEM_NAME_FIELD_DESC);
      oprot.writeString(this.systemName);
      oprot.writeFieldEnd();
    }
    if (this.systemVersion != null) {
      oprot.writeFieldBegin(_SYSTEM_VERSION_FIELD_DESC);
      oprot.writeString(this.systemVersion);
      oprot.writeFieldEnd();
    }
    if (this.model != null) {
      oprot.writeFieldBegin(_MODEL_FIELD_DESC);
      oprot.writeString(this.model);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_CARRIER_CODE_FIELD_DESC);
    oprot.writeI32(this.carrierCode);
    oprot.writeFieldEnd();
    if (this.carrierName != null) {
      oprot.writeFieldBegin(_CARRIER_NAME_FIELD_DESC);
      oprot.writeString(this.carrierName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_APPLICATION_TYPE_FIELD_DESC);
    oprot.writeI32(this.applicationType);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("DeviceInfo(");

    ret.write("deviceName:");
    if (this.deviceName == null) {
      ret.write("null");
    } else {
      ret.write(this.deviceName);
    }

    ret.write(", ");
    ret.write("systemName:");
    if (this.systemName == null) {
      ret.write("null");
    } else {
      ret.write(this.systemName);
    }

    ret.write(", ");
    ret.write("systemVersion:");
    if (this.systemVersion == null) {
      ret.write("null");
    } else {
      ret.write(this.systemVersion);
    }

    ret.write(", ");
    ret.write("model:");
    if (this.model == null) {
      ret.write("null");
    } else {
      ret.write(this.model);
    }

    ret.write(", ");
    ret.write("carrierCode:");
    String carrierCode_name = CarrierCode.VALUES_TO_NAMES[this.carrierCode];
    if (carrierCode_name != null) {
      ret.write(carrierCode_name);
      ret.write(" (");
    }
    ret.write(this.carrierCode);
    if (carrierCode_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("carrierName:");
    if (this.carrierName == null) {
      ret.write("null");
    } else {
      ret.write(this.carrierName);
    }

    ret.write(", ");
    ret.write("applicationType:");
    String applicationType_name = ApplicationType.VALUES_TO_NAMES[this.applicationType];
    if (applicationType_name != null) {
      ret.write(applicationType_name);
      ret.write(" (");
    }
    ret.write(this.applicationType);
    if (applicationType_name != null) {
      ret.write(")");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetCarrierCode() && !CarrierCode.VALID_VALUES.contains(carrierCode)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'carrierCode' has been assigned the invalid value $carrierCode");
    }
    if (isSetApplicationType() && !ApplicationType.VALID_VALUES.contains(applicationType)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'applicationType' has been assigned the invalid value $applicationType");
    }
  }

}

