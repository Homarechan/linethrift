/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.find_square_by_invitation_ticket_response;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class FindSquareByInvitationTicketResponse implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("FindSquareByInvitationTicketResponse");
  static final TField _SQUARE_FIELD_DESC = new TField("square", TType.STRUCT, 1);
  static final TField _MY_MEMBERSHIP_FIELD_DESC = new TField("myMembership", TType.STRUCT, 2);
  static final TField _SQUARE_AUTHORITY_FIELD_DESC = new TField("squareAuthority", TType.STRUCT, 3);
  static final TField _SQUARE_STATUS_FIELD_DESC = new TField("squareStatus", TType.STRUCT, 4);

  Square _square;
  static const int SQUARE = 1;
  SquareMember _myMembership;
  static const int MYMEMBERSHIP = 2;
  SquareAuthority _squareAuthority;
  static const int SQUAREAUTHORITY = 3;
  SquareStatus _squareStatus;
  static const int SQUARESTATUS = 4;


  FindSquareByInvitationTicketResponse() {
  }

  // square
  Square get square => this._square;

  set square(Square square) {
    this._square = square;
  }

  bool isSetSquare() => this.square != null;

  unsetSquare() {
    this.square = null;
  }

  // myMembership
  SquareMember get myMembership => this._myMembership;

  set myMembership(SquareMember myMembership) {
    this._myMembership = myMembership;
  }

  bool isSetMyMembership() => this.myMembership != null;

  unsetMyMembership() {
    this.myMembership = null;
  }

  // squareAuthority
  SquareAuthority get squareAuthority => this._squareAuthority;

  set squareAuthority(SquareAuthority squareAuthority) {
    this._squareAuthority = squareAuthority;
  }

  bool isSetSquareAuthority() => this.squareAuthority != null;

  unsetSquareAuthority() {
    this.squareAuthority = null;
  }

  // squareStatus
  SquareStatus get squareStatus => this._squareStatus;

  set squareStatus(SquareStatus squareStatus) {
    this._squareStatus = squareStatus;
  }

  bool isSetSquareStatus() => this.squareStatus != null;

  unsetSquareStatus() {
    this.squareStatus = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SQUARE:
        return this.square;
      case MYMEMBERSHIP:
        return this.myMembership;
      case SQUAREAUTHORITY:
        return this.squareAuthority;
      case SQUARESTATUS:
        return this.squareStatus;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SQUARE:
        if (value == null) {
          unsetSquare();
        } else {
          this.square = value;
        }
        break;

      case MYMEMBERSHIP:
        if (value == null) {
          unsetMyMembership();
        } else {
          this.myMembership = value;
        }
        break;

      case SQUAREAUTHORITY:
        if (value == null) {
          unsetSquareAuthority();
        } else {
          this.squareAuthority = value;
        }
        break;

      case SQUARESTATUS:
        if (value == null) {
          unsetSquareStatus();
        } else {
          this.squareStatus = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SQUARE:
        return isSetSquare();
      case MYMEMBERSHIP:
        return isSetMyMembership();
      case SQUAREAUTHORITY:
        return isSetSquareAuthority();
      case SQUARESTATUS:
        return isSetSquareStatus();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SQUARE:
          if (field.type == TType.STRUCT) {
            this.square = new Square();
            this.square.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MYMEMBERSHIP:
          if (field.type == TType.STRUCT) {
            this.myMembership = new SquareMember();
            this.myMembership.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SQUAREAUTHORITY:
          if (field.type == TType.STRUCT) {
            this.squareAuthority = new SquareAuthority();
            this.squareAuthority.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SQUARESTATUS:
          if (field.type == TType.STRUCT) {
            this.squareStatus = new SquareStatus();
            this.squareStatus.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.square != null) {
      oprot.writeFieldBegin(_SQUARE_FIELD_DESC);
      this.square.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.myMembership != null) {
      oprot.writeFieldBegin(_MY_MEMBERSHIP_FIELD_DESC);
      this.myMembership.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.squareAuthority != null) {
      oprot.writeFieldBegin(_SQUARE_AUTHORITY_FIELD_DESC);
      this.squareAuthority.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.squareStatus != null) {
      oprot.writeFieldBegin(_SQUARE_STATUS_FIELD_DESC);
      this.squareStatus.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("FindSquareByInvitationTicketResponse(");

    ret.write("square:");
    if (this.square == null) {
      ret.write("null");
    } else {
      ret.write(this.square);
    }

    ret.write(", ");
    ret.write("myMembership:");
    if (this.myMembership == null) {
      ret.write("null");
    } else {
      ret.write(this.myMembership);
    }

    ret.write(", ");
    ret.write("squareAuthority:");
    if (this.squareAuthority == null) {
      ret.write("null");
    } else {
      ret.write(this.squareAuthority);
    }

    ret.write(", ");
    ret.write("squareStatus:");
    if (this.squareStatus == null) {
      ret.write("null");
    } else {
      ret.write(this.squareStatus);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

