/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.channel_sync_datas;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class ChannelSyncDatas implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ChannelSyncDatas");
  static final TField _CHANNEL_INFOS_FIELD_DESC = new TField("channelInfos", TType.LIST, 1);
  static final TField _CHANNEL_DOMAINS_FIELD_DESC = new TField("channelDomains", TType.LIST, 2);
  static final TField _REVISION_FIELD_DESC = new TField("revision", TType.I64, 3);
  static final TField _EXPIRES_FIELD_DESC = new TField("expires", TType.I64, 4);

  List<ChannelInfo> _channelInfos;
  static const int CHANNELINFOS = 1;
  List<ChannelDomain> _channelDomains;
  static const int CHANNELDOMAINS = 2;
  int _revision = 0;
  static const int REVISION = 3;
  int _expires = 0;
  static const int EXPIRES = 4;

  bool __isset_revision = false;
  bool __isset_expires = false;

  ChannelSyncDatas() {
  }

  // channelInfos
  List<ChannelInfo> get channelInfos => this._channelInfos;

  set channelInfos(List<ChannelInfo> channelInfos) {
    this._channelInfos = channelInfos;
  }

  bool isSetChannelInfos() => this.channelInfos != null;

  unsetChannelInfos() {
    this.channelInfos = null;
  }

  // channelDomains
  List<ChannelDomain> get channelDomains => this._channelDomains;

  set channelDomains(List<ChannelDomain> channelDomains) {
    this._channelDomains = channelDomains;
  }

  bool isSetChannelDomains() => this.channelDomains != null;

  unsetChannelDomains() {
    this.channelDomains = null;
  }

  // revision
  int get revision => this._revision;

  set revision(int revision) {
    this._revision = revision;
    this.__isset_revision = true;
  }

  bool isSetRevision() => this.__isset_revision;

  unsetRevision() {
    this.__isset_revision = false;
  }

  // expires
  int get expires => this._expires;

  set expires(int expires) {
    this._expires = expires;
    this.__isset_expires = true;
  }

  bool isSetExpires() => this.__isset_expires;

  unsetExpires() {
    this.__isset_expires = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case CHANNELINFOS:
        return this.channelInfos;
      case CHANNELDOMAINS:
        return this.channelDomains;
      case REVISION:
        return this.revision;
      case EXPIRES:
        return this.expires;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case CHANNELINFOS:
        if (value == null) {
          unsetChannelInfos();
        } else {
          this.channelInfos = value;
        }
        break;

      case CHANNELDOMAINS:
        if (value == null) {
          unsetChannelDomains();
        } else {
          this.channelDomains = value;
        }
        break;

      case REVISION:
        if (value == null) {
          unsetRevision();
        } else {
          this.revision = value;
        }
        break;

      case EXPIRES:
        if (value == null) {
          unsetExpires();
        } else {
          this.expires = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case CHANNELINFOS:
        return isSetChannelInfos();
      case CHANNELDOMAINS:
        return isSetChannelDomains();
      case REVISION:
        return isSetRevision();
      case EXPIRES:
        return isSetExpires();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case CHANNELINFOS:
          if (field.type == TType.LIST) {
            {
              TList _list90 = iprot.readListBegin();
              this.channelInfos = new List<ChannelInfo>();
              for (int _i91 = 0; _i91 < _list90.length; ++_i91) {
                ChannelInfo _elem92;
                _elem92 = new ChannelInfo();
                _elem92.read(iprot);
                this.channelInfos.add(_elem92);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CHANNELDOMAINS:
          if (field.type == TType.LIST) {
            {
              TList _list93 = iprot.readListBegin();
              this.channelDomains = new List<ChannelDomain>();
              for (int _i94 = 0; _i94 < _list93.length; ++_i94) {
                ChannelDomain _elem95;
                _elem95 = new ChannelDomain();
                _elem95.read(iprot);
                this.channelDomains.add(_elem95);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case REVISION:
          if (field.type == TType.I64) {
            this.revision = iprot.readI64();
            this.__isset_revision = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EXPIRES:
          if (field.type == TType.I64) {
            this.expires = iprot.readI64();
            this.__isset_expires = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.channelInfos != null) {
      oprot.writeFieldBegin(_CHANNEL_INFOS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.channelInfos.length));
        for (var elem96 in this.channelInfos) {
          elem96.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.channelDomains != null) {
      oprot.writeFieldBegin(_CHANNEL_DOMAINS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.channelDomains.length));
        for (var elem97 in this.channelDomains) {
          elem97.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_REVISION_FIELD_DESC);
    oprot.writeI64(this.revision);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_EXPIRES_FIELD_DESC);
    oprot.writeI64(this.expires);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ChannelSyncDatas(");

    ret.write("channelInfos:");
    if (this.channelInfos == null) {
      ret.write("null");
    } else {
      ret.write(this.channelInfos);
    }

    ret.write(", ");
    ret.write("channelDomains:");
    if (this.channelDomains == null) {
      ret.write("null");
    } else {
      ret.write(this.channelDomains);
    }

    ret.write(", ");
    ret.write("revision:");
    ret.write(this.revision);

    ret.write(", ");
    ret.write("expires:");
    ret.write(this.expires);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

