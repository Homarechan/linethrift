/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.update_square_member_relation_request;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class UpdateSquareMemberRelationRequest implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("UpdateSquareMemberRelationRequest");
  static final TField _SQUARE_MID_FIELD_DESC = new TField("squareMid", TType.STRING, 2);
  static final TField _TARGET_SQUARE_MEMBER_MID_FIELD_DESC = new TField("targetSquareMemberMid", TType.STRING, 3);
  static final TField _UPDATED_ATTRS_FIELD_DESC = new TField("updatedAttrs", TType.SET, 4);
  static final TField _RELATION_FIELD_DESC = new TField("relation", TType.STRUCT, 5);

  String _squareMid;
  static const int SQUAREMID = 2;
  String _targetSquareMemberMid;
  static const int TARGETSQUAREMEMBERMID = 3;
  Set<int> _updatedAttrs;
  static const int UPDATEDATTRS = 4;
  SquareMemberRelation _relation;
  static const int RELATION = 5;


  UpdateSquareMemberRelationRequest() {
  }

  // squareMid
  String get squareMid => this._squareMid;

  set squareMid(String squareMid) {
    this._squareMid = squareMid;
  }

  bool isSetSquareMid() => this.squareMid != null;

  unsetSquareMid() {
    this.squareMid = null;
  }

  // targetSquareMemberMid
  String get targetSquareMemberMid => this._targetSquareMemberMid;

  set targetSquareMemberMid(String targetSquareMemberMid) {
    this._targetSquareMemberMid = targetSquareMemberMid;
  }

  bool isSetTargetSquareMemberMid() => this.targetSquareMemberMid != null;

  unsetTargetSquareMemberMid() {
    this.targetSquareMemberMid = null;
  }

  // updatedAttrs
  Set<int> get updatedAttrs => this._updatedAttrs;

  set updatedAttrs(Set<int> updatedAttrs) {
    this._updatedAttrs = updatedAttrs;
  }

  bool isSetUpdatedAttrs() => this.updatedAttrs != null;

  unsetUpdatedAttrs() {
    this.updatedAttrs = null;
  }

  // relation
  SquareMemberRelation get relation => this._relation;

  set relation(SquareMemberRelation relation) {
    this._relation = relation;
  }

  bool isSetRelation() => this.relation != null;

  unsetRelation() {
    this.relation = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SQUAREMID:
        return this.squareMid;
      case TARGETSQUAREMEMBERMID:
        return this.targetSquareMemberMid;
      case UPDATEDATTRS:
        return this.updatedAttrs;
      case RELATION:
        return this.relation;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SQUAREMID:
        if (value == null) {
          unsetSquareMid();
        } else {
          this.squareMid = value;
        }
        break;

      case TARGETSQUAREMEMBERMID:
        if (value == null) {
          unsetTargetSquareMemberMid();
        } else {
          this.targetSquareMemberMid = value;
        }
        break;

      case UPDATEDATTRS:
        if (value == null) {
          unsetUpdatedAttrs();
        } else {
          this.updatedAttrs = value;
        }
        break;

      case RELATION:
        if (value == null) {
          unsetRelation();
        } else {
          this.relation = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SQUAREMID:
        return isSetSquareMid();
      case TARGETSQUAREMEMBERMID:
        return isSetTargetSquareMemberMid();
      case UPDATEDATTRS:
        return isSetUpdatedAttrs();
      case RELATION:
        return isSetRelation();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SQUAREMID:
          if (field.type == TType.STRING) {
            this.squareMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TARGETSQUAREMEMBERMID:
          if (field.type == TType.STRING) {
            this.targetSquareMemberMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case UPDATEDATTRS:
          if (field.type == TType.SET) {
            {
              TSet _set610 = iprot.readSetBegin();
              this.updatedAttrs = new Set<int>();
              for (int _i611 = 0; _i611 < _set610.length; ++_i611) {
                int _elem612;
                _elem612 = iprot.readI32();
                this.updatedAttrs.add(_elem612);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RELATION:
          if (field.type == TType.STRUCT) {
            this.relation = new SquareMemberRelation();
            this.relation.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.squareMid != null) {
      oprot.writeFieldBegin(_SQUARE_MID_FIELD_DESC);
      oprot.writeString(this.squareMid);
      oprot.writeFieldEnd();
    }
    if (this.targetSquareMemberMid != null) {
      oprot.writeFieldBegin(_TARGET_SQUARE_MEMBER_MID_FIELD_DESC);
      oprot.writeString(this.targetSquareMemberMid);
      oprot.writeFieldEnd();
    }
    if (this.updatedAttrs != null) {
      oprot.writeFieldBegin(_UPDATED_ATTRS_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.I32, this.updatedAttrs.length));
        for (var elem613 in this.updatedAttrs) {
          oprot.writeI32(elem613);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.relation != null) {
      oprot.writeFieldBegin(_RELATION_FIELD_DESC);
      this.relation.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("UpdateSquareMemberRelationRequest(");

    ret.write("squareMid:");
    if (this.squareMid == null) {
      ret.write("null");
    } else {
      ret.write(this.squareMid);
    }

    ret.write(", ");
    ret.write("targetSquareMemberMid:");
    if (this.targetSquareMemberMid == null) {
      ret.write("null");
    } else {
      ret.write(this.targetSquareMemberMid);
    }

    ret.write(", ");
    ret.write("updatedAttrs:");
    if (this.updatedAttrs == null) {
      ret.write("null");
    } else {
      ret.write(this.updatedAttrs);
    }

    ret.write(", ");
    ret.write("relation:");
    if (this.relation == null) {
      ret.write("null");
    } else {
      ret.write(this.relation);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

