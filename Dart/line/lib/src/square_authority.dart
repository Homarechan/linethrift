/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.square_authority;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class SquareAuthority implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("SquareAuthority");
  static final TField _SQUARE_MID_FIELD_DESC = new TField("squareMid", TType.STRING, 1);
  static final TField _UPDATE_SQUARE_PROFILE_FIELD_DESC = new TField("updateSquareProfile", TType.I32, 2);
  static final TField _INVITE_NEW_MEMBER_FIELD_DESC = new TField("inviteNewMember", TType.I32, 3);
  static final TField _APPROVE_JOIN_REQUEST_FIELD_DESC = new TField("approveJoinRequest", TType.I32, 4);
  static final TField _CREATE_POST_FIELD_DESC = new TField("createPost", TType.I32, 5);
  static final TField _CREATE_OPEN_SQUARE_CHAT_FIELD_DESC = new TField("createOpenSquareChat", TType.I32, 6);
  static final TField _DELETE_SQUARE_CHAT_OR_POST_FIELD_DESC = new TField("deleteSquareChatOrPost", TType.I32, 7);
  static final TField _REMOVE_SQUARE_MEMBER_FIELD_DESC = new TField("removeSquareMember", TType.I32, 8);
  static final TField _GRANT_ROLE_FIELD_DESC = new TField("grantRole", TType.I32, 9);
  static final TField _ENABLE_INVITATION_TICKET_FIELD_DESC = new TField("enableInvitationTicket", TType.I32, 10);
  static final TField _REVISION_FIELD_DESC = new TField("revision", TType.I64, 11);

  String _squareMid;
  static const int SQUAREMID = 1;
  int _updateSquareProfile;
  static const int UPDATESQUAREPROFILE = 2;
  int _inviteNewMember;
  static const int INVITENEWMEMBER = 3;
  int _approveJoinRequest;
  static const int APPROVEJOINREQUEST = 4;
  int _createPost;
  static const int CREATEPOST = 5;
  int _createOpenSquareChat;
  static const int CREATEOPENSQUARECHAT = 6;
  int _deleteSquareChatOrPost;
  static const int DELETESQUARECHATORPOST = 7;
  int _removeSquareMember;
  static const int REMOVESQUAREMEMBER = 8;
  int _grantRole;
  static const int GRANTROLE = 9;
  int _enableInvitationTicket;
  static const int ENABLEINVITATIONTICKET = 10;
  int _revision = 0;
  static const int REVISION = 11;

  bool __isset_updateSquareProfile = false;
  bool __isset_inviteNewMember = false;
  bool __isset_approveJoinRequest = false;
  bool __isset_createPost = false;
  bool __isset_createOpenSquareChat = false;
  bool __isset_deleteSquareChatOrPost = false;
  bool __isset_removeSquareMember = false;
  bool __isset_grantRole = false;
  bool __isset_enableInvitationTicket = false;
  bool __isset_revision = false;

  SquareAuthority() {
  }

  // squareMid
  String get squareMid => this._squareMid;

  set squareMid(String squareMid) {
    this._squareMid = squareMid;
  }

  bool isSetSquareMid() => this.squareMid != null;

  unsetSquareMid() {
    this.squareMid = null;
  }

  // updateSquareProfile
  int get updateSquareProfile => this._updateSquareProfile;

  set updateSquareProfile(int updateSquareProfile) {
    this._updateSquareProfile = updateSquareProfile;
    this.__isset_updateSquareProfile = true;
  }

  bool isSetUpdateSquareProfile() => this.__isset_updateSquareProfile;

  unsetUpdateSquareProfile() {
    this.__isset_updateSquareProfile = false;
  }

  // inviteNewMember
  int get inviteNewMember => this._inviteNewMember;

  set inviteNewMember(int inviteNewMember) {
    this._inviteNewMember = inviteNewMember;
    this.__isset_inviteNewMember = true;
  }

  bool isSetInviteNewMember() => this.__isset_inviteNewMember;

  unsetInviteNewMember() {
    this.__isset_inviteNewMember = false;
  }

  // approveJoinRequest
  int get approveJoinRequest => this._approveJoinRequest;

  set approveJoinRequest(int approveJoinRequest) {
    this._approveJoinRequest = approveJoinRequest;
    this.__isset_approveJoinRequest = true;
  }

  bool isSetApproveJoinRequest() => this.__isset_approveJoinRequest;

  unsetApproveJoinRequest() {
    this.__isset_approveJoinRequest = false;
  }

  // createPost
  int get createPost => this._createPost;

  set createPost(int createPost) {
    this._createPost = createPost;
    this.__isset_createPost = true;
  }

  bool isSetCreatePost() => this.__isset_createPost;

  unsetCreatePost() {
    this.__isset_createPost = false;
  }

  // createOpenSquareChat
  int get createOpenSquareChat => this._createOpenSquareChat;

  set createOpenSquareChat(int createOpenSquareChat) {
    this._createOpenSquareChat = createOpenSquareChat;
    this.__isset_createOpenSquareChat = true;
  }

  bool isSetCreateOpenSquareChat() => this.__isset_createOpenSquareChat;

  unsetCreateOpenSquareChat() {
    this.__isset_createOpenSquareChat = false;
  }

  // deleteSquareChatOrPost
  int get deleteSquareChatOrPost => this._deleteSquareChatOrPost;

  set deleteSquareChatOrPost(int deleteSquareChatOrPost) {
    this._deleteSquareChatOrPost = deleteSquareChatOrPost;
    this.__isset_deleteSquareChatOrPost = true;
  }

  bool isSetDeleteSquareChatOrPost() => this.__isset_deleteSquareChatOrPost;

  unsetDeleteSquareChatOrPost() {
    this.__isset_deleteSquareChatOrPost = false;
  }

  // removeSquareMember
  int get removeSquareMember => this._removeSquareMember;

  set removeSquareMember(int removeSquareMember) {
    this._removeSquareMember = removeSquareMember;
    this.__isset_removeSquareMember = true;
  }

  bool isSetRemoveSquareMember() => this.__isset_removeSquareMember;

  unsetRemoveSquareMember() {
    this.__isset_removeSquareMember = false;
  }

  // grantRole
  int get grantRole => this._grantRole;

  set grantRole(int grantRole) {
    this._grantRole = grantRole;
    this.__isset_grantRole = true;
  }

  bool isSetGrantRole() => this.__isset_grantRole;

  unsetGrantRole() {
    this.__isset_grantRole = false;
  }

  // enableInvitationTicket
  int get enableInvitationTicket => this._enableInvitationTicket;

  set enableInvitationTicket(int enableInvitationTicket) {
    this._enableInvitationTicket = enableInvitationTicket;
    this.__isset_enableInvitationTicket = true;
  }

  bool isSetEnableInvitationTicket() => this.__isset_enableInvitationTicket;

  unsetEnableInvitationTicket() {
    this.__isset_enableInvitationTicket = false;
  }

  // revision
  int get revision => this._revision;

  set revision(int revision) {
    this._revision = revision;
    this.__isset_revision = true;
  }

  bool isSetRevision() => this.__isset_revision;

  unsetRevision() {
    this.__isset_revision = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SQUAREMID:
        return this.squareMid;
      case UPDATESQUAREPROFILE:
        return this.updateSquareProfile;
      case INVITENEWMEMBER:
        return this.inviteNewMember;
      case APPROVEJOINREQUEST:
        return this.approveJoinRequest;
      case CREATEPOST:
        return this.createPost;
      case CREATEOPENSQUARECHAT:
        return this.createOpenSquareChat;
      case DELETESQUARECHATORPOST:
        return this.deleteSquareChatOrPost;
      case REMOVESQUAREMEMBER:
        return this.removeSquareMember;
      case GRANTROLE:
        return this.grantRole;
      case ENABLEINVITATIONTICKET:
        return this.enableInvitationTicket;
      case REVISION:
        return this.revision;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SQUAREMID:
        if (value == null) {
          unsetSquareMid();
        } else {
          this.squareMid = value;
        }
        break;

      case UPDATESQUAREPROFILE:
        if (value == null) {
          unsetUpdateSquareProfile();
        } else {
          this.updateSquareProfile = value;
        }
        break;

      case INVITENEWMEMBER:
        if (value == null) {
          unsetInviteNewMember();
        } else {
          this.inviteNewMember = value;
        }
        break;

      case APPROVEJOINREQUEST:
        if (value == null) {
          unsetApproveJoinRequest();
        } else {
          this.approveJoinRequest = value;
        }
        break;

      case CREATEPOST:
        if (value == null) {
          unsetCreatePost();
        } else {
          this.createPost = value;
        }
        break;

      case CREATEOPENSQUARECHAT:
        if (value == null) {
          unsetCreateOpenSquareChat();
        } else {
          this.createOpenSquareChat = value;
        }
        break;

      case DELETESQUARECHATORPOST:
        if (value == null) {
          unsetDeleteSquareChatOrPost();
        } else {
          this.deleteSquareChatOrPost = value;
        }
        break;

      case REMOVESQUAREMEMBER:
        if (value == null) {
          unsetRemoveSquareMember();
        } else {
          this.removeSquareMember = value;
        }
        break;

      case GRANTROLE:
        if (value == null) {
          unsetGrantRole();
        } else {
          this.grantRole = value;
        }
        break;

      case ENABLEINVITATIONTICKET:
        if (value == null) {
          unsetEnableInvitationTicket();
        } else {
          this.enableInvitationTicket = value;
        }
        break;

      case REVISION:
        if (value == null) {
          unsetRevision();
        } else {
          this.revision = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SQUAREMID:
        return isSetSquareMid();
      case UPDATESQUAREPROFILE:
        return isSetUpdateSquareProfile();
      case INVITENEWMEMBER:
        return isSetInviteNewMember();
      case APPROVEJOINREQUEST:
        return isSetApproveJoinRequest();
      case CREATEPOST:
        return isSetCreatePost();
      case CREATEOPENSQUARECHAT:
        return isSetCreateOpenSquareChat();
      case DELETESQUARECHATORPOST:
        return isSetDeleteSquareChatOrPost();
      case REMOVESQUAREMEMBER:
        return isSetRemoveSquareMember();
      case GRANTROLE:
        return isSetGrantRole();
      case ENABLEINVITATIONTICKET:
        return isSetEnableInvitationTicket();
      case REVISION:
        return isSetRevision();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SQUAREMID:
          if (field.type == TType.STRING) {
            this.squareMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case UPDATESQUAREPROFILE:
          if (field.type == TType.I32) {
            this.updateSquareProfile = iprot.readI32();
            this.__isset_updateSquareProfile = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case INVITENEWMEMBER:
          if (field.type == TType.I32) {
            this.inviteNewMember = iprot.readI32();
            this.__isset_inviteNewMember = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case APPROVEJOINREQUEST:
          if (field.type == TType.I32) {
            this.approveJoinRequest = iprot.readI32();
            this.__isset_approveJoinRequest = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CREATEPOST:
          if (field.type == TType.I32) {
            this.createPost = iprot.readI32();
            this.__isset_createPost = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CREATEOPENSQUARECHAT:
          if (field.type == TType.I32) {
            this.createOpenSquareChat = iprot.readI32();
            this.__isset_createOpenSquareChat = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DELETESQUARECHATORPOST:
          if (field.type == TType.I32) {
            this.deleteSquareChatOrPost = iprot.readI32();
            this.__isset_deleteSquareChatOrPost = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case REMOVESQUAREMEMBER:
          if (field.type == TType.I32) {
            this.removeSquareMember = iprot.readI32();
            this.__isset_removeSquareMember = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case GRANTROLE:
          if (field.type == TType.I32) {
            this.grantRole = iprot.readI32();
            this.__isset_grantRole = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ENABLEINVITATIONTICKET:
          if (field.type == TType.I32) {
            this.enableInvitationTicket = iprot.readI32();
            this.__isset_enableInvitationTicket = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case REVISION:
          if (field.type == TType.I64) {
            this.revision = iprot.readI64();
            this.__isset_revision = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.squareMid != null) {
      oprot.writeFieldBegin(_SQUARE_MID_FIELD_DESC);
      oprot.writeString(this.squareMid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_UPDATE_SQUARE_PROFILE_FIELD_DESC);
    oprot.writeI32(this.updateSquareProfile);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_INVITE_NEW_MEMBER_FIELD_DESC);
    oprot.writeI32(this.inviteNewMember);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_APPROVE_JOIN_REQUEST_FIELD_DESC);
    oprot.writeI32(this.approveJoinRequest);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_CREATE_POST_FIELD_DESC);
    oprot.writeI32(this.createPost);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_CREATE_OPEN_SQUARE_CHAT_FIELD_DESC);
    oprot.writeI32(this.createOpenSquareChat);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_DELETE_SQUARE_CHAT_OR_POST_FIELD_DESC);
    oprot.writeI32(this.deleteSquareChatOrPost);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_REMOVE_SQUARE_MEMBER_FIELD_DESC);
    oprot.writeI32(this.removeSquareMember);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_GRANT_ROLE_FIELD_DESC);
    oprot.writeI32(this.grantRole);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_ENABLE_INVITATION_TICKET_FIELD_DESC);
    oprot.writeI32(this.enableInvitationTicket);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_REVISION_FIELD_DESC);
    oprot.writeI64(this.revision);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("SquareAuthority(");

    ret.write("squareMid:");
    if (this.squareMid == null) {
      ret.write("null");
    } else {
      ret.write(this.squareMid);
    }

    ret.write(", ");
    ret.write("updateSquareProfile:");
    String updateSquareProfile_name = SquareMemberRole.VALUES_TO_NAMES[this.updateSquareProfile];
    if (updateSquareProfile_name != null) {
      ret.write(updateSquareProfile_name);
      ret.write(" (");
    }
    ret.write(this.updateSquareProfile);
    if (updateSquareProfile_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("inviteNewMember:");
    String inviteNewMember_name = SquareMemberRole.VALUES_TO_NAMES[this.inviteNewMember];
    if (inviteNewMember_name != null) {
      ret.write(inviteNewMember_name);
      ret.write(" (");
    }
    ret.write(this.inviteNewMember);
    if (inviteNewMember_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("approveJoinRequest:");
    String approveJoinRequest_name = SquareMemberRole.VALUES_TO_NAMES[this.approveJoinRequest];
    if (approveJoinRequest_name != null) {
      ret.write(approveJoinRequest_name);
      ret.write(" (");
    }
    ret.write(this.approveJoinRequest);
    if (approveJoinRequest_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("createPost:");
    String createPost_name = SquareMemberRole.VALUES_TO_NAMES[this.createPost];
    if (createPost_name != null) {
      ret.write(createPost_name);
      ret.write(" (");
    }
    ret.write(this.createPost);
    if (createPost_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("createOpenSquareChat:");
    String createOpenSquareChat_name = SquareMemberRole.VALUES_TO_NAMES[this.createOpenSquareChat];
    if (createOpenSquareChat_name != null) {
      ret.write(createOpenSquareChat_name);
      ret.write(" (");
    }
    ret.write(this.createOpenSquareChat);
    if (createOpenSquareChat_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("deleteSquareChatOrPost:");
    String deleteSquareChatOrPost_name = SquareMemberRole.VALUES_TO_NAMES[this.deleteSquareChatOrPost];
    if (deleteSquareChatOrPost_name != null) {
      ret.write(deleteSquareChatOrPost_name);
      ret.write(" (");
    }
    ret.write(this.deleteSquareChatOrPost);
    if (deleteSquareChatOrPost_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("removeSquareMember:");
    String removeSquareMember_name = SquareMemberRole.VALUES_TO_NAMES[this.removeSquareMember];
    if (removeSquareMember_name != null) {
      ret.write(removeSquareMember_name);
      ret.write(" (");
    }
    ret.write(this.removeSquareMember);
    if (removeSquareMember_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("grantRole:");
    String grantRole_name = SquareMemberRole.VALUES_TO_NAMES[this.grantRole];
    if (grantRole_name != null) {
      ret.write(grantRole_name);
      ret.write(" (");
    }
    ret.write(this.grantRole);
    if (grantRole_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("enableInvitationTicket:");
    String enableInvitationTicket_name = SquareMemberRole.VALUES_TO_NAMES[this.enableInvitationTicket];
    if (enableInvitationTicket_name != null) {
      ret.write(enableInvitationTicket_name);
      ret.write(" (");
    }
    ret.write(this.enableInvitationTicket);
    if (enableInvitationTicket_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("revision:");
    ret.write(this.revision);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetUpdateSquareProfile() && !SquareMemberRole.VALID_VALUES.contains(updateSquareProfile)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'updateSquareProfile' has been assigned the invalid value $updateSquareProfile");
    }
    if (isSetInviteNewMember() && !SquareMemberRole.VALID_VALUES.contains(inviteNewMember)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'inviteNewMember' has been assigned the invalid value $inviteNewMember");
    }
    if (isSetApproveJoinRequest() && !SquareMemberRole.VALID_VALUES.contains(approveJoinRequest)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'approveJoinRequest' has been assigned the invalid value $approveJoinRequest");
    }
    if (isSetCreatePost() && !SquareMemberRole.VALID_VALUES.contains(createPost)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'createPost' has been assigned the invalid value $createPost");
    }
    if (isSetCreateOpenSquareChat() && !SquareMemberRole.VALID_VALUES.contains(createOpenSquareChat)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'createOpenSquareChat' has been assigned the invalid value $createOpenSquareChat");
    }
    if (isSetDeleteSquareChatOrPost() && !SquareMemberRole.VALID_VALUES.contains(deleteSquareChatOrPost)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'deleteSquareChatOrPost' has been assigned the invalid value $deleteSquareChatOrPost");
    }
    if (isSetRemoveSquareMember() && !SquareMemberRole.VALID_VALUES.contains(removeSquareMember)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'removeSquareMember' has been assigned the invalid value $removeSquareMember");
    }
    if (isSetGrantRole() && !SquareMemberRole.VALID_VALUES.contains(grantRole)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'grantRole' has been assigned the invalid value $grantRole");
    }
    if (isSetEnableInvitationTicket() && !SquareMemberRole.VALID_VALUES.contains(enableInvitationTicket)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'enableInvitationTicket' has been assigned the invalid value $enableInvitationTicket");
    }
  }

}

