/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.sync_scope;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class SyncScope implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("SyncScope");
  static final TField _SYNC_PROFILE_FIELD_DESC = new TField("syncProfile", TType.BOOL, 1);
  static final TField _SYNC_SETTINGS_FIELD_DESC = new TField("syncSettings", TType.BOOL, 2);
  static final TField _SYNC_STICKER_FIELD_DESC = new TField("syncSticker", TType.BOOL, 3);
  static final TField _SYNC_THEME_SHOP_FIELD_DESC = new TField("syncThemeShop", TType.BOOL, 4);
  static final TField _CONTACT_FIELD_DESC = new TField("contact", TType.STRUCT, 10);
  static final TField _GROUP_FIELD_DESC = new TField("group", TType.STRUCT, 11);
  static final TField _ROOM_FIELD_DESC = new TField("room", TType.STRUCT, 12);
  static final TField _CHAT_FIELD_DESC = new TField("chat", TType.STRUCT, 13);

  bool _syncProfile = false;
  static const int SYNCPROFILE = 1;
  bool _syncSettings = false;
  static const int SYNCSETTINGS = 2;
  bool _syncSticker = false;
  static const int SYNCSTICKER = 3;
  bool _syncThemeShop = false;
  static const int SYNCTHEMESHOP = 4;
  SyncRelations _contact;
  static const int CONTACT = 10;
  SyncRelations _group;
  static const int GROUP = 11;
  SyncRelations _room;
  static const int ROOM = 12;
  SyncRelations _chat;
  static const int CHAT = 13;

  bool __isset_syncProfile = false;
  bool __isset_syncSettings = false;
  bool __isset_syncSticker = false;
  bool __isset_syncThemeShop = false;

  SyncScope() {
  }

  // syncProfile
  bool get syncProfile => this._syncProfile;

  set syncProfile(bool syncProfile) {
    this._syncProfile = syncProfile;
    this.__isset_syncProfile = true;
  }

  bool isSetSyncProfile() => this.__isset_syncProfile;

  unsetSyncProfile() {
    this.__isset_syncProfile = false;
  }

  // syncSettings
  bool get syncSettings => this._syncSettings;

  set syncSettings(bool syncSettings) {
    this._syncSettings = syncSettings;
    this.__isset_syncSettings = true;
  }

  bool isSetSyncSettings() => this.__isset_syncSettings;

  unsetSyncSettings() {
    this.__isset_syncSettings = false;
  }

  // syncSticker
  bool get syncSticker => this._syncSticker;

  set syncSticker(bool syncSticker) {
    this._syncSticker = syncSticker;
    this.__isset_syncSticker = true;
  }

  bool isSetSyncSticker() => this.__isset_syncSticker;

  unsetSyncSticker() {
    this.__isset_syncSticker = false;
  }

  // syncThemeShop
  bool get syncThemeShop => this._syncThemeShop;

  set syncThemeShop(bool syncThemeShop) {
    this._syncThemeShop = syncThemeShop;
    this.__isset_syncThemeShop = true;
  }

  bool isSetSyncThemeShop() => this.__isset_syncThemeShop;

  unsetSyncThemeShop() {
    this.__isset_syncThemeShop = false;
  }

  // contact
  SyncRelations get contact => this._contact;

  set contact(SyncRelations contact) {
    this._contact = contact;
  }

  bool isSetContact() => this.contact != null;

  unsetContact() {
    this.contact = null;
  }

  // group
  SyncRelations get group => this._group;

  set group(SyncRelations group) {
    this._group = group;
  }

  bool isSetGroup() => this.group != null;

  unsetGroup() {
    this.group = null;
  }

  // room
  SyncRelations get room => this._room;

  set room(SyncRelations room) {
    this._room = room;
  }

  bool isSetRoom() => this.room != null;

  unsetRoom() {
    this.room = null;
  }

  // chat
  SyncRelations get chat => this._chat;

  set chat(SyncRelations chat) {
    this._chat = chat;
  }

  bool isSetChat() => this.chat != null;

  unsetChat() {
    this.chat = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SYNCPROFILE:
        return this.syncProfile;
      case SYNCSETTINGS:
        return this.syncSettings;
      case SYNCSTICKER:
        return this.syncSticker;
      case SYNCTHEMESHOP:
        return this.syncThemeShop;
      case CONTACT:
        return this.contact;
      case GROUP:
        return this.group;
      case ROOM:
        return this.room;
      case CHAT:
        return this.chat;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SYNCPROFILE:
        if (value == null) {
          unsetSyncProfile();
        } else {
          this.syncProfile = value;
        }
        break;

      case SYNCSETTINGS:
        if (value == null) {
          unsetSyncSettings();
        } else {
          this.syncSettings = value;
        }
        break;

      case SYNCSTICKER:
        if (value == null) {
          unsetSyncSticker();
        } else {
          this.syncSticker = value;
        }
        break;

      case SYNCTHEMESHOP:
        if (value == null) {
          unsetSyncThemeShop();
        } else {
          this.syncThemeShop = value;
        }
        break;

      case CONTACT:
        if (value == null) {
          unsetContact();
        } else {
          this.contact = value;
        }
        break;

      case GROUP:
        if (value == null) {
          unsetGroup();
        } else {
          this.group = value;
        }
        break;

      case ROOM:
        if (value == null) {
          unsetRoom();
        } else {
          this.room = value;
        }
        break;

      case CHAT:
        if (value == null) {
          unsetChat();
        } else {
          this.chat = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SYNCPROFILE:
        return isSetSyncProfile();
      case SYNCSETTINGS:
        return isSetSyncSettings();
      case SYNCSTICKER:
        return isSetSyncSticker();
      case SYNCTHEMESHOP:
        return isSetSyncThemeShop();
      case CONTACT:
        return isSetContact();
      case GROUP:
        return isSetGroup();
      case ROOM:
        return isSetRoom();
      case CHAT:
        return isSetChat();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SYNCPROFILE:
          if (field.type == TType.BOOL) {
            this.syncProfile = iprot.readBool();
            this.__isset_syncProfile = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SYNCSETTINGS:
          if (field.type == TType.BOOL) {
            this.syncSettings = iprot.readBool();
            this.__isset_syncSettings = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SYNCSTICKER:
          if (field.type == TType.BOOL) {
            this.syncSticker = iprot.readBool();
            this.__isset_syncSticker = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SYNCTHEMESHOP:
          if (field.type == TType.BOOL) {
            this.syncThemeShop = iprot.readBool();
            this.__isset_syncThemeShop = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CONTACT:
          if (field.type == TType.STRUCT) {
            this.contact = new SyncRelations();
            this.contact.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case GROUP:
          if (field.type == TType.STRUCT) {
            this.group = new SyncRelations();
            this.group.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ROOM:
          if (field.type == TType.STRUCT) {
            this.room = new SyncRelations();
            this.room.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CHAT:
          if (field.type == TType.STRUCT) {
            this.chat = new SyncRelations();
            this.chat.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_SYNC_PROFILE_FIELD_DESC);
    oprot.writeBool(this.syncProfile);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_SYNC_SETTINGS_FIELD_DESC);
    oprot.writeBool(this.syncSettings);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_SYNC_STICKER_FIELD_DESC);
    oprot.writeBool(this.syncSticker);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_SYNC_THEME_SHOP_FIELD_DESC);
    oprot.writeBool(this.syncThemeShop);
    oprot.writeFieldEnd();
    if (this.contact != null) {
      oprot.writeFieldBegin(_CONTACT_FIELD_DESC);
      this.contact.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.group != null) {
      oprot.writeFieldBegin(_GROUP_FIELD_DESC);
      this.group.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.room != null) {
      oprot.writeFieldBegin(_ROOM_FIELD_DESC);
      this.room.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.chat != null) {
      oprot.writeFieldBegin(_CHAT_FIELD_DESC);
      this.chat.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("SyncScope(");

    ret.write("syncProfile:");
    ret.write(this.syncProfile);

    ret.write(", ");
    ret.write("syncSettings:");
    ret.write(this.syncSettings);

    ret.write(", ");
    ret.write("syncSticker:");
    ret.write(this.syncSticker);

    ret.write(", ");
    ret.write("syncThemeShop:");
    ret.write(this.syncThemeShop);

    ret.write(", ");
    ret.write("contact:");
    if (this.contact == null) {
      ret.write("null");
    } else {
      ret.write(this.contact);
    }

    ret.write(", ");
    ret.write("group:");
    if (this.group == null) {
      ret.write("null");
    } else {
      ret.write(this.group);
    }

    ret.write(", ");
    ret.write("room:");
    if (this.room == null) {
      ret.write("null");
    } else {
      ret.write(this.room);
    }

    ret.write(", ");
    ret.write("chat:");
    if (this.chat == null) {
      ret.write("null");
    } else {
      ret.write(this.chat);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

