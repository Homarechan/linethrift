/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.search_squares_response;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class SearchSquaresResponse implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("SearchSquaresResponse");
  static final TField _SQUARES_FIELD_DESC = new TField("squares", TType.LIST, 1);
  static final TField _SQUARE_STATUSES_FIELD_DESC = new TField("squareStatuses", TType.MAP, 2);
  static final TField _MY_MEMBERSHIPS_FIELD_DESC = new TField("myMemberships", TType.MAP, 3);
  static final TField _CONTINUATION_TOKEN_FIELD_DESC = new TField("continuationToken", TType.STRING, 4);
  static final TField _NOTE_STATUSES_FIELD_DESC = new TField("noteStatuses", TType.MAP, 5);

  List<Square> _squares;
  static const int SQUARES = 1;
  Map<String, SquareStatus> _squareStatuses;
  static const int SQUARESTATUSES = 2;
  Map<String, SquareMember> _myMemberships;
  static const int MYMEMBERSHIPS = 3;
  String _continuationToken;
  static const int CONTINUATIONTOKEN = 4;
  Map<String, NoteStatus> _noteStatuses;
  static const int NOTESTATUSES = 5;


  SearchSquaresResponse() {
  }

  // squares
  List<Square> get squares => this._squares;

  set squares(List<Square> squares) {
    this._squares = squares;
  }

  bool isSetSquares() => this.squares != null;

  unsetSquares() {
    this.squares = null;
  }

  // squareStatuses
  Map<String, SquareStatus> get squareStatuses => this._squareStatuses;

  set squareStatuses(Map<String, SquareStatus> squareStatuses) {
    this._squareStatuses = squareStatuses;
  }

  bool isSetSquareStatuses() => this.squareStatuses != null;

  unsetSquareStatuses() {
    this.squareStatuses = null;
  }

  // myMemberships
  Map<String, SquareMember> get myMemberships => this._myMemberships;

  set myMemberships(Map<String, SquareMember> myMemberships) {
    this._myMemberships = myMemberships;
  }

  bool isSetMyMemberships() => this.myMemberships != null;

  unsetMyMemberships() {
    this.myMemberships = null;
  }

  // continuationToken
  String get continuationToken => this._continuationToken;

  set continuationToken(String continuationToken) {
    this._continuationToken = continuationToken;
  }

  bool isSetContinuationToken() => this.continuationToken != null;

  unsetContinuationToken() {
    this.continuationToken = null;
  }

  // noteStatuses
  Map<String, NoteStatus> get noteStatuses => this._noteStatuses;

  set noteStatuses(Map<String, NoteStatus> noteStatuses) {
    this._noteStatuses = noteStatuses;
  }

  bool isSetNoteStatuses() => this.noteStatuses != null;

  unsetNoteStatuses() {
    this.noteStatuses = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SQUARES:
        return this.squares;
      case SQUARESTATUSES:
        return this.squareStatuses;
      case MYMEMBERSHIPS:
        return this.myMemberships;
      case CONTINUATIONTOKEN:
        return this.continuationToken;
      case NOTESTATUSES:
        return this.noteStatuses;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SQUARES:
        if (value == null) {
          unsetSquares();
        } else {
          this.squares = value;
        }
        break;

      case SQUARESTATUSES:
        if (value == null) {
          unsetSquareStatuses();
        } else {
          this.squareStatuses = value;
        }
        break;

      case MYMEMBERSHIPS:
        if (value == null) {
          unsetMyMemberships();
        } else {
          this.myMemberships = value;
        }
        break;

      case CONTINUATIONTOKEN:
        if (value == null) {
          unsetContinuationToken();
        } else {
          this.continuationToken = value;
        }
        break;

      case NOTESTATUSES:
        if (value == null) {
          unsetNoteStatuses();
        } else {
          this.noteStatuses = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SQUARES:
        return isSetSquares();
      case SQUARESTATUSES:
        return isSetSquareStatuses();
      case MYMEMBERSHIPS:
        return isSetMyMemberships();
      case CONTINUATIONTOKEN:
        return isSetContinuationToken();
      case NOTESTATUSES:
        return isSetNoteStatuses();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SQUARES:
          if (field.type == TType.LIST) {
            {
              TList _list408 = iprot.readListBegin();
              this.squares = new List<Square>();
              for (int _i409 = 0; _i409 < _list408.length; ++_i409) {
                Square _elem410;
                _elem410 = new Square();
                _elem410.read(iprot);
                this.squares.add(_elem410);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SQUARESTATUSES:
          if (field.type == TType.MAP) {
            {
              TMap _map411 = iprot.readMapBegin();
              this.squareStatuses = new Map<String, SquareStatus>();
              for (int _i412 = 0; _i412 < _map411.length; ++_i412) {
                String _key413;
                SquareStatus _val414;
                _key413 = iprot.readString();
                _val414 = new SquareStatus();
                _val414.read(iprot);
                this.squareStatuses[_key413] = _val414;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MYMEMBERSHIPS:
          if (field.type == TType.MAP) {
            {
              TMap _map415 = iprot.readMapBegin();
              this.myMemberships = new Map<String, SquareMember>();
              for (int _i416 = 0; _i416 < _map415.length; ++_i416) {
                String _key417;
                SquareMember _val418;
                _key417 = iprot.readString();
                _val418 = new SquareMember();
                _val418.read(iprot);
                this.myMemberships[_key417] = _val418;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CONTINUATIONTOKEN:
          if (field.type == TType.STRING) {
            this.continuationToken = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NOTESTATUSES:
          if (field.type == TType.MAP) {
            {
              TMap _map419 = iprot.readMapBegin();
              this.noteStatuses = new Map<String, NoteStatus>();
              for (int _i420 = 0; _i420 < _map419.length; ++_i420) {
                String _key421;
                NoteStatus _val422;
                _key421 = iprot.readString();
                _val422 = new NoteStatus();
                _val422.read(iprot);
                this.noteStatuses[_key421] = _val422;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.squares != null) {
      oprot.writeFieldBegin(_SQUARES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.squares.length));
        for (var elem423 in this.squares) {
          elem423.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.squareStatuses != null) {
      oprot.writeFieldBegin(_SQUARE_STATUSES_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.squareStatuses.length));
        for (var elem425 in this.squareStatuses.keys) {
          oprot.writeString(elem425);
          this.squareStatuses[elem425].write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.myMemberships != null) {
      oprot.writeFieldBegin(_MY_MEMBERSHIPS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.myMemberships.length));
        for (var elem427 in this.myMemberships.keys) {
          oprot.writeString(elem427);
          this.myMemberships[elem427].write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.continuationToken != null) {
      oprot.writeFieldBegin(_CONTINUATION_TOKEN_FIELD_DESC);
      oprot.writeString(this.continuationToken);
      oprot.writeFieldEnd();
    }
    if (this.noteStatuses != null) {
      oprot.writeFieldBegin(_NOTE_STATUSES_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.noteStatuses.length));
        for (var elem429 in this.noteStatuses.keys) {
          oprot.writeString(elem429);
          this.noteStatuses[elem429].write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("SearchSquaresResponse(");

    ret.write("squares:");
    if (this.squares == null) {
      ret.write("null");
    } else {
      ret.write(this.squares);
    }

    ret.write(", ");
    ret.write("squareStatuses:");
    if (this.squareStatuses == null) {
      ret.write("null");
    } else {
      ret.write(this.squareStatuses);
    }

    ret.write(", ");
    ret.write("myMemberships:");
    if (this.myMemberships == null) {
      ret.write("null");
    } else {
      ret.write(this.myMemberships);
    }

    ret.write(", ");
    ret.write("continuationToken:");
    if (this.continuationToken == null) {
      ret.write("null");
    } else {
      ret.write(this.continuationToken);
    }

    ret.write(", ");
    ret.write("noteStatuses:");
    if (this.noteStatuses == null) {
      ret.write("null");
    } else {
      ret.write(this.noteStatuses);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

