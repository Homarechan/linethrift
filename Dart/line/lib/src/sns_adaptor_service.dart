/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.sns_adaptor_service;

import 'dart:async';
import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';


abstract class SnsAdaptorService {

  Future<SnsFriends> getSnsFriends(int snsIdType, String snsAccessToken, int startIdx, int limit);

  Future<SnsProfile> getSnsMyProfile(int snsIdType, String snsAccessToken);

  Future postSnsInvitationMessage(int snsIdType, String snsAccessToken, String toSnsUserId);
}

class SnsAdaptorServiceClient implements SnsAdaptorService {

  SnsAdaptorServiceClient(TProtocol iprot, [TProtocol oprot = null]) {
    _iprot = iprot;
    _oprot = (oprot == null) ? iprot : oprot;
  }

  TProtocol _iprot;

  TProtocol get iprot => _iprot;

  TProtocol _oprot;

  TProtocol get oprot => _oprot;

  int _seqid = 0;

  int get seqid => _seqid;

  int nextSeqid() => ++_seqid;

  Future<SnsFriends> getSnsFriends(int snsIdType, String snsAccessToken, int startIdx, int limit) async {
    oprot.writeMessageBegin(new TMessage("getSnsFriends", TMessageType.CALL, nextSeqid()));
    getSnsFriends_args args = new getSnsFriends_args();
    args.snsIdType = snsIdType;
    args.snsAccessToken = snsAccessToken;
    args.startIdx = startIdx;
    args.limit = limit;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    getSnsFriends_result result = new getSnsFriends_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "getSnsFriends failed: unknown result");
  }

  Future<SnsProfile> getSnsMyProfile(int snsIdType, String snsAccessToken) async {
    oprot.writeMessageBegin(new TMessage("getSnsMyProfile", TMessageType.CALL, nextSeqid()));
    getSnsMyProfile_args args = new getSnsMyProfile_args();
    args.snsIdType = snsIdType;
    args.snsAccessToken = snsAccessToken;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    getSnsMyProfile_result result = new getSnsMyProfile_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "getSnsMyProfile failed: unknown result");
  }

  Future postSnsInvitationMessage(int snsIdType, String snsAccessToken, String toSnsUserId) async {
    oprot.writeMessageBegin(new TMessage("postSnsInvitationMessage", TMessageType.CALL, nextSeqid()));
    postSnsInvitationMessage_args args = new postSnsInvitationMessage_args();
    args.snsIdType = snsIdType;
    args.snsAccessToken = snsAccessToken;
    args.toSnsUserId = toSnsUserId;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    postSnsInvitationMessage_result result = new postSnsInvitationMessage_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.e != null) {
      throw result.e;
    }
    return;
  }

}

typedef void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);

class SnsAdaptorServiceProcessor implements TProcessor {
  SnsAdaptorServiceProcessor(SnsAdaptorService iface) {
    iface_ = iface;
    PROCESS_MAP["getSnsFriends"] = getSnsFriends;
    PROCESS_MAP["getSnsMyProfile"] = getSnsMyProfile;
    PROCESS_MAP["postSnsInvitationMessage"] = postSnsInvitationMessage;
  }

  SnsAdaptorService iface_;
  final Map<String, ProcessFunction> PROCESS_MAP = {};

  bool process(TProtocol iprot, TProtocol oprot) {
    TMessage msg = iprot.readMessageBegin();
    ProcessFunction fn = PROCESS_MAP[msg.name];
    if (fn == null) {
      TProtocolUtil.skip(iprot, TType.STRUCT);
      iprot.readMessageEnd();
      TApplicationError x = new TApplicationError(TApplicationErrorType.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
      oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return true;
    }
    fn(msg.seqid, iprot, oprot);
    return true;
  }

  getSnsFriends(int seqid, TProtocol iprot, TProtocol oprot) async {
    getSnsFriends_args args = new getSnsFriends_args();
    args.read(iprot);
    iprot.readMessageEnd();
    getSnsFriends_result result = new getSnsFriends_result();
    try {
      result.success = await iface_.getSnsFriends(args.snsIdType, args.snsAccessToken, args.startIdx, args.limit);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing getSnsFriends");
      oprot.writeMessageBegin(new TMessage("getSnsFriends", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("getSnsFriends", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  getSnsMyProfile(int seqid, TProtocol iprot, TProtocol oprot) async {
    getSnsMyProfile_args args = new getSnsMyProfile_args();
    args.read(iprot);
    iprot.readMessageEnd();
    getSnsMyProfile_result result = new getSnsMyProfile_result();
    try {
      result.success = await iface_.getSnsMyProfile(args.snsIdType, args.snsAccessToken);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing getSnsMyProfile");
      oprot.writeMessageBegin(new TMessage("getSnsMyProfile", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("getSnsMyProfile", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  postSnsInvitationMessage(int seqid, TProtocol iprot, TProtocol oprot) {
    postSnsInvitationMessage_args args = new postSnsInvitationMessage_args();
    args.read(iprot);
    iprot.readMessageEnd();
    postSnsInvitationMessage_result result = new postSnsInvitationMessage_result();
    try {
      iface_.postSnsInvitationMessage(args.snsIdType, args.snsAccessToken, args.toSnsUserId);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing postSnsInvitationMessage");
      oprot.writeMessageBegin(new TMessage("postSnsInvitationMessage", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("postSnsInvitationMessage", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

}

class getSnsFriends_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getSnsFriends_args");
  static final TField _SNS_ID_TYPE_FIELD_DESC = new TField("snsIdType", TType.I32, 2);
  static final TField _SNS_ACCESS_TOKEN_FIELD_DESC = new TField("snsAccessToken", TType.STRING, 3);
  static final TField _START_IDX_FIELD_DESC = new TField("startIdx", TType.I32, 4);
  static final TField _LIMIT_FIELD_DESC = new TField("limit", TType.I32, 5);

  int _snsIdType;
  static const int SNSIDTYPE = 2;
  String _snsAccessToken;
  static const int SNSACCESSTOKEN = 3;
  int _startIdx = 0;
  static const int STARTIDX = 4;
  int _limit = 0;
  static const int LIMIT = 5;

  bool __isset_snsIdType = false;
  bool __isset_startIdx = false;
  bool __isset_limit = false;

  getSnsFriends_args() {
  }

  // snsIdType
  int get snsIdType => this._snsIdType;

  set snsIdType(int snsIdType) {
    this._snsIdType = snsIdType;
    this.__isset_snsIdType = true;
  }

  bool isSetSnsIdType() => this.__isset_snsIdType;

  unsetSnsIdType() {
    this.__isset_snsIdType = false;
  }

  // snsAccessToken
  String get snsAccessToken => this._snsAccessToken;

  set snsAccessToken(String snsAccessToken) {
    this._snsAccessToken = snsAccessToken;
  }

  bool isSetSnsAccessToken() => this.snsAccessToken != null;

  unsetSnsAccessToken() {
    this.snsAccessToken = null;
  }

  // startIdx
  int get startIdx => this._startIdx;

  set startIdx(int startIdx) {
    this._startIdx = startIdx;
    this.__isset_startIdx = true;
  }

  bool isSetStartIdx() => this.__isset_startIdx;

  unsetStartIdx() {
    this.__isset_startIdx = false;
  }

  // limit
  int get limit => this._limit;

  set limit(int limit) {
    this._limit = limit;
    this.__isset_limit = true;
  }

  bool isSetLimit() => this.__isset_limit;

  unsetLimit() {
    this.__isset_limit = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SNSIDTYPE:
        return this.snsIdType;
      case SNSACCESSTOKEN:
        return this.snsAccessToken;
      case STARTIDX:
        return this.startIdx;
      case LIMIT:
        return this.limit;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SNSIDTYPE:
        if (value == null) {
          unsetSnsIdType();
        } else {
          this.snsIdType = value;
        }
        break;

      case SNSACCESSTOKEN:
        if (value == null) {
          unsetSnsAccessToken();
        } else {
          this.snsAccessToken = value;
        }
        break;

      case STARTIDX:
        if (value == null) {
          unsetStartIdx();
        } else {
          this.startIdx = value;
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          this.limit = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SNSIDTYPE:
        return isSetSnsIdType();
      case SNSACCESSTOKEN:
        return isSetSnsAccessToken();
      case STARTIDX:
        return isSetStartIdx();
      case LIMIT:
        return isSetLimit();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SNSIDTYPE:
          if (field.type == TType.I32) {
            this.snsIdType = iprot.readI32();
            this.__isset_snsIdType = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SNSACCESSTOKEN:
          if (field.type == TType.STRING) {
            this.snsAccessToken = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STARTIDX:
          if (field.type == TType.I32) {
            this.startIdx = iprot.readI32();
            this.__isset_startIdx = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LIMIT:
          if (field.type == TType.I32) {
            this.limit = iprot.readI32();
            this.__isset_limit = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_SNS_ID_TYPE_FIELD_DESC);
    oprot.writeI32(this.snsIdType);
    oprot.writeFieldEnd();
    if (this.snsAccessToken != null) {
      oprot.writeFieldBegin(_SNS_ACCESS_TOKEN_FIELD_DESC);
      oprot.writeString(this.snsAccessToken);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_START_IDX_FIELD_DESC);
    oprot.writeI32(this.startIdx);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_LIMIT_FIELD_DESC);
    oprot.writeI32(this.limit);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getSnsFriends_args(");

    ret.write("snsIdType:");
    String snsIdType_name = SnsIdType.VALUES_TO_NAMES[this.snsIdType];
    if (snsIdType_name != null) {
      ret.write(snsIdType_name);
      ret.write(" (");
    }
    ret.write(this.snsIdType);
    if (snsIdType_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("snsAccessToken:");
    if (this.snsAccessToken == null) {
      ret.write("null");
    } else {
      ret.write(this.snsAccessToken);
    }

    ret.write(", ");
    ret.write("startIdx:");
    ret.write(this.startIdx);

    ret.write(", ");
    ret.write("limit:");
    ret.write(this.limit);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetSnsIdType() && !SnsIdType.VALID_VALUES.contains(snsIdType)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'snsIdType' has been assigned the invalid value $snsIdType");
    }
  }

}

class getSnsFriends_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getSnsFriends_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  SnsFriends _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  getSnsFriends_result() {
  }

  // success
  SnsFriends get success => this._success;

  set success(SnsFriends success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new SnsFriends();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getSnsFriends_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getSnsMyProfile_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getSnsMyProfile_args");
  static final TField _SNS_ID_TYPE_FIELD_DESC = new TField("snsIdType", TType.I32, 2);
  static final TField _SNS_ACCESS_TOKEN_FIELD_DESC = new TField("snsAccessToken", TType.STRING, 3);

  int _snsIdType;
  static const int SNSIDTYPE = 2;
  String _snsAccessToken;
  static const int SNSACCESSTOKEN = 3;

  bool __isset_snsIdType = false;

  getSnsMyProfile_args() {
  }

  // snsIdType
  int get snsIdType => this._snsIdType;

  set snsIdType(int snsIdType) {
    this._snsIdType = snsIdType;
    this.__isset_snsIdType = true;
  }

  bool isSetSnsIdType() => this.__isset_snsIdType;

  unsetSnsIdType() {
    this.__isset_snsIdType = false;
  }

  // snsAccessToken
  String get snsAccessToken => this._snsAccessToken;

  set snsAccessToken(String snsAccessToken) {
    this._snsAccessToken = snsAccessToken;
  }

  bool isSetSnsAccessToken() => this.snsAccessToken != null;

  unsetSnsAccessToken() {
    this.snsAccessToken = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SNSIDTYPE:
        return this.snsIdType;
      case SNSACCESSTOKEN:
        return this.snsAccessToken;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SNSIDTYPE:
        if (value == null) {
          unsetSnsIdType();
        } else {
          this.snsIdType = value;
        }
        break;

      case SNSACCESSTOKEN:
        if (value == null) {
          unsetSnsAccessToken();
        } else {
          this.snsAccessToken = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SNSIDTYPE:
        return isSetSnsIdType();
      case SNSACCESSTOKEN:
        return isSetSnsAccessToken();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SNSIDTYPE:
          if (field.type == TType.I32) {
            this.snsIdType = iprot.readI32();
            this.__isset_snsIdType = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SNSACCESSTOKEN:
          if (field.type == TType.STRING) {
            this.snsAccessToken = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_SNS_ID_TYPE_FIELD_DESC);
    oprot.writeI32(this.snsIdType);
    oprot.writeFieldEnd();
    if (this.snsAccessToken != null) {
      oprot.writeFieldBegin(_SNS_ACCESS_TOKEN_FIELD_DESC);
      oprot.writeString(this.snsAccessToken);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getSnsMyProfile_args(");

    ret.write("snsIdType:");
    String snsIdType_name = SnsIdType.VALUES_TO_NAMES[this.snsIdType];
    if (snsIdType_name != null) {
      ret.write(snsIdType_name);
      ret.write(" (");
    }
    ret.write(this.snsIdType);
    if (snsIdType_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("snsAccessToken:");
    if (this.snsAccessToken == null) {
      ret.write("null");
    } else {
      ret.write(this.snsAccessToken);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetSnsIdType() && !SnsIdType.VALID_VALUES.contains(snsIdType)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'snsIdType' has been assigned the invalid value $snsIdType");
    }
  }

}

class getSnsMyProfile_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getSnsMyProfile_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  SnsProfile _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  getSnsMyProfile_result() {
  }

  // success
  SnsProfile get success => this._success;

  set success(SnsProfile success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new SnsProfile();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getSnsMyProfile_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class postSnsInvitationMessage_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("postSnsInvitationMessage_args");
  static final TField _SNS_ID_TYPE_FIELD_DESC = new TField("snsIdType", TType.I32, 2);
  static final TField _SNS_ACCESS_TOKEN_FIELD_DESC = new TField("snsAccessToken", TType.STRING, 3);
  static final TField _TO_SNS_USER_ID_FIELD_DESC = new TField("toSnsUserId", TType.STRING, 4);

  int _snsIdType;
  static const int SNSIDTYPE = 2;
  String _snsAccessToken;
  static const int SNSACCESSTOKEN = 3;
  String _toSnsUserId;
  static const int TOSNSUSERID = 4;

  bool __isset_snsIdType = false;

  postSnsInvitationMessage_args() {
  }

  // snsIdType
  int get snsIdType => this._snsIdType;

  set snsIdType(int snsIdType) {
    this._snsIdType = snsIdType;
    this.__isset_snsIdType = true;
  }

  bool isSetSnsIdType() => this.__isset_snsIdType;

  unsetSnsIdType() {
    this.__isset_snsIdType = false;
  }

  // snsAccessToken
  String get snsAccessToken => this._snsAccessToken;

  set snsAccessToken(String snsAccessToken) {
    this._snsAccessToken = snsAccessToken;
  }

  bool isSetSnsAccessToken() => this.snsAccessToken != null;

  unsetSnsAccessToken() {
    this.snsAccessToken = null;
  }

  // toSnsUserId
  String get toSnsUserId => this._toSnsUserId;

  set toSnsUserId(String toSnsUserId) {
    this._toSnsUserId = toSnsUserId;
  }

  bool isSetToSnsUserId() => this.toSnsUserId != null;

  unsetToSnsUserId() {
    this.toSnsUserId = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SNSIDTYPE:
        return this.snsIdType;
      case SNSACCESSTOKEN:
        return this.snsAccessToken;
      case TOSNSUSERID:
        return this.toSnsUserId;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SNSIDTYPE:
        if (value == null) {
          unsetSnsIdType();
        } else {
          this.snsIdType = value;
        }
        break;

      case SNSACCESSTOKEN:
        if (value == null) {
          unsetSnsAccessToken();
        } else {
          this.snsAccessToken = value;
        }
        break;

      case TOSNSUSERID:
        if (value == null) {
          unsetToSnsUserId();
        } else {
          this.toSnsUserId = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SNSIDTYPE:
        return isSetSnsIdType();
      case SNSACCESSTOKEN:
        return isSetSnsAccessToken();
      case TOSNSUSERID:
        return isSetToSnsUserId();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SNSIDTYPE:
          if (field.type == TType.I32) {
            this.snsIdType = iprot.readI32();
            this.__isset_snsIdType = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SNSACCESSTOKEN:
          if (field.type == TType.STRING) {
            this.snsAccessToken = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TOSNSUSERID:
          if (field.type == TType.STRING) {
            this.toSnsUserId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_SNS_ID_TYPE_FIELD_DESC);
    oprot.writeI32(this.snsIdType);
    oprot.writeFieldEnd();
    if (this.snsAccessToken != null) {
      oprot.writeFieldBegin(_SNS_ACCESS_TOKEN_FIELD_DESC);
      oprot.writeString(this.snsAccessToken);
      oprot.writeFieldEnd();
    }
    if (this.toSnsUserId != null) {
      oprot.writeFieldBegin(_TO_SNS_USER_ID_FIELD_DESC);
      oprot.writeString(this.toSnsUserId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("postSnsInvitationMessage_args(");

    ret.write("snsIdType:");
    String snsIdType_name = SnsIdType.VALUES_TO_NAMES[this.snsIdType];
    if (snsIdType_name != null) {
      ret.write(snsIdType_name);
      ret.write(" (");
    }
    ret.write(this.snsIdType);
    if (snsIdType_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("snsAccessToken:");
    if (this.snsAccessToken == null) {
      ret.write("null");
    } else {
      ret.write(this.snsAccessToken);
    }

    ret.write(", ");
    ret.write("toSnsUserId:");
    if (this.toSnsUserId == null) {
      ret.write("null");
    } else {
      ret.write(this.toSnsUserId);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetSnsIdType() && !SnsIdType.VALID_VALUES.contains(snsIdType)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'snsIdType' has been assigned the invalid value $snsIdType");
    }
  }

}

class postSnsInvitationMessage_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("postSnsInvitationMessage_result");
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  TalkException _e;
  static const int E = 1;


  postSnsInvitationMessage_result() {
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("postSnsInvitationMessage_result(");

    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

