/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.update_square_members_response;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class UpdateSquareMembersResponse implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("UpdateSquareMembersResponse");
  static final TField _UPDATED_ATTRS_FIELD_DESC = new TField("updatedAttrs", TType.SET, 1);
  static final TField _EDITOR_FIELD_DESC = new TField("editor", TType.STRUCT, 2);
  static final TField _MEMBERS_FIELD_DESC = new TField("members", TType.MAP, 3);

  Set<int> _updatedAttrs;
  static const int UPDATEDATTRS = 1;
  SquareMember _editor;
  static const int EDITOR = 2;
  Map<String, SquareMember> _members;
  static const int MEMBERS = 3;


  UpdateSquareMembersResponse() {
  }

  // updatedAttrs
  Set<int> get updatedAttrs => this._updatedAttrs;

  set updatedAttrs(Set<int> updatedAttrs) {
    this._updatedAttrs = updatedAttrs;
  }

  bool isSetUpdatedAttrs() => this.updatedAttrs != null;

  unsetUpdatedAttrs() {
    this.updatedAttrs = null;
  }

  // editor
  SquareMember get editor => this._editor;

  set editor(SquareMember editor) {
    this._editor = editor;
  }

  bool isSetEditor() => this.editor != null;

  unsetEditor() {
    this.editor = null;
  }

  // members
  Map<String, SquareMember> get members => this._members;

  set members(Map<String, SquareMember> members) {
    this._members = members;
  }

  bool isSetMembers() => this.members != null;

  unsetMembers() {
    this.members = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case UPDATEDATTRS:
        return this.updatedAttrs;
      case EDITOR:
        return this.editor;
      case MEMBERS:
        return this.members;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case UPDATEDATTRS:
        if (value == null) {
          unsetUpdatedAttrs();
        } else {
          this.updatedAttrs = value;
        }
        break;

      case EDITOR:
        if (value == null) {
          unsetEditor();
        } else {
          this.editor = value;
        }
        break;

      case MEMBERS:
        if (value == null) {
          unsetMembers();
        } else {
          this.members = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case UPDATEDATTRS:
        return isSetUpdatedAttrs();
      case EDITOR:
        return isSetEditor();
      case MEMBERS:
        return isSetMembers();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case UPDATEDATTRS:
          if (field.type == TType.SET) {
            {
              TSet _set462 = iprot.readSetBegin();
              this.updatedAttrs = new Set<int>();
              for (int _i463 = 0; _i463 < _set462.length; ++_i463) {
                int _elem464;
                _elem464 = iprot.readI32();
                this.updatedAttrs.add(_elem464);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EDITOR:
          if (field.type == TType.STRUCT) {
            this.editor = new SquareMember();
            this.editor.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MEMBERS:
          if (field.type == TType.MAP) {
            {
              TMap _map465 = iprot.readMapBegin();
              this.members = new Map<String, SquareMember>();
              for (int _i466 = 0; _i466 < _map465.length; ++_i466) {
                String _key467;
                SquareMember _val468;
                _key467 = iprot.readString();
                _val468 = new SquareMember();
                _val468.read(iprot);
                this.members[_key467] = _val468;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.updatedAttrs != null) {
      oprot.writeFieldBegin(_UPDATED_ATTRS_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.I32, this.updatedAttrs.length));
        for (var elem469 in this.updatedAttrs) {
          oprot.writeI32(elem469);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.editor != null) {
      oprot.writeFieldBegin(_EDITOR_FIELD_DESC);
      this.editor.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.members != null) {
      oprot.writeFieldBegin(_MEMBERS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.members.length));
        for (var elem471 in this.members.keys) {
          oprot.writeString(elem471);
          this.members[elem471].write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("UpdateSquareMembersResponse(");

    ret.write("updatedAttrs:");
    if (this.updatedAttrs == null) {
      ret.write("null");
    } else {
      ret.write(this.updatedAttrs);
    }

    ret.write(", ");
    ret.write("editor:");
    if (this.editor == null) {
      ret.write("null");
    } else {
      ret.write(this.editor);
    }

    ret.write(", ");
    ret.write("members:");
    if (this.members == null) {
      ret.write("null");
    } else {
      ret.write(this.members);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

