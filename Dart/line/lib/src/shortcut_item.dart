/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.shortcut_item;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class ShortcutItem implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ShortcutItem");
  static final TField _ID_FIELD_DESC = new TField("id", TType.STRING, 1);
  static final TField _TITLE_FIELD_DESC = new TField("title", TType.STRING, 2);
  static final TField _DESCR_FIELD_DESC = new TField("descr", TType.STRING, 3);
  static final TField _ICON_PATH_FIELD_DESC = new TField("iconPath", TType.STRING, 4);
  static final TField _URL_FIELD_DESC = new TField("url", TType.STRING, 5);
  static final TField _BUTTONS_FIELD_DESC = new TField("buttons", TType.LIST, 6);
  static final TField _ACTION_FIELD_DESC = new TField("action", TType.STRUCT, 7);

  String _id;
  static const int ID = 1;
  String _title;
  static const int TITLE = 2;
  String _descr;
  static const int DESCR = 3;
  String _iconPath;
  static const int ICONPATH = 4;
  String _url;
  static const int URL = 5;
  List<ShortcutButton> _buttons;
  static const int BUTTONS = 6;
  ShortcutButtonAction _action;
  static const int ACTION = 7;


  ShortcutItem() {
  }

  // id
  String get id => this._id;

  set id(String id) {
    this._id = id;
  }

  bool isSetId() => this.id != null;

  unsetId() {
    this.id = null;
  }

  // title
  String get title => this._title;

  set title(String title) {
    this._title = title;
  }

  bool isSetTitle() => this.title != null;

  unsetTitle() {
    this.title = null;
  }

  // descr
  String get descr => this._descr;

  set descr(String descr) {
    this._descr = descr;
  }

  bool isSetDescr() => this.descr != null;

  unsetDescr() {
    this.descr = null;
  }

  // iconPath
  String get iconPath => this._iconPath;

  set iconPath(String iconPath) {
    this._iconPath = iconPath;
  }

  bool isSetIconPath() => this.iconPath != null;

  unsetIconPath() {
    this.iconPath = null;
  }

  // url
  String get url => this._url;

  set url(String url) {
    this._url = url;
  }

  bool isSetUrl() => this.url != null;

  unsetUrl() {
    this.url = null;
  }

  // buttons
  List<ShortcutButton> get buttons => this._buttons;

  set buttons(List<ShortcutButton> buttons) {
    this._buttons = buttons;
  }

  bool isSetButtons() => this.buttons != null;

  unsetButtons() {
    this.buttons = null;
  }

  // action
  ShortcutButtonAction get action => this._action;

  set action(ShortcutButtonAction action) {
    this._action = action;
  }

  bool isSetAction() => this.action != null;

  unsetAction() {
    this.action = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case ID:
        return this.id;
      case TITLE:
        return this.title;
      case DESCR:
        return this.descr;
      case ICONPATH:
        return this.iconPath;
      case URL:
        return this.url;
      case BUTTONS:
        return this.buttons;
      case ACTION:
        return this.action;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          this.id = value;
        }
        break;

      case TITLE:
        if (value == null) {
          unsetTitle();
        } else {
          this.title = value;
        }
        break;

      case DESCR:
        if (value == null) {
          unsetDescr();
        } else {
          this.descr = value;
        }
        break;

      case ICONPATH:
        if (value == null) {
          unsetIconPath();
        } else {
          this.iconPath = value;
        }
        break;

      case URL:
        if (value == null) {
          unsetUrl();
        } else {
          this.url = value;
        }
        break;

      case BUTTONS:
        if (value == null) {
          unsetButtons();
        } else {
          this.buttons = value;
        }
        break;

      case ACTION:
        if (value == null) {
          unsetAction();
        } else {
          this.action = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case ID:
        return isSetId();
      case TITLE:
        return isSetTitle();
      case DESCR:
        return isSetDescr();
      case ICONPATH:
        return isSetIconPath();
      case URL:
        return isSetUrl();
      case BUTTONS:
        return isSetButtons();
      case ACTION:
        return isSetAction();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ID:
          if (field.type == TType.STRING) {
            this.id = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TITLE:
          if (field.type == TType.STRING) {
            this.title = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DESCR:
          if (field.type == TType.STRING) {
            this.descr = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ICONPATH:
          if (field.type == TType.STRING) {
            this.iconPath = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case URL:
          if (field.type == TType.STRING) {
            this.url = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BUTTONS:
          if (field.type == TType.LIST) {
            {
              TList _list62 = iprot.readListBegin();
              this.buttons = new List<ShortcutButton>();
              for (int _i63 = 0; _i63 < _list62.length; ++_i63) {
                ShortcutButton _elem64;
                _elem64 = new ShortcutButton();
                _elem64.read(iprot);
                this.buttons.add(_elem64);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ACTION:
          if (field.type == TType.STRUCT) {
            this.action = new ShortcutButtonAction();
            this.action.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.id != null) {
      oprot.writeFieldBegin(_ID_FIELD_DESC);
      oprot.writeString(this.id);
      oprot.writeFieldEnd();
    }
    if (this.title != null) {
      oprot.writeFieldBegin(_TITLE_FIELD_DESC);
      oprot.writeString(this.title);
      oprot.writeFieldEnd();
    }
    if (this.descr != null) {
      oprot.writeFieldBegin(_DESCR_FIELD_DESC);
      oprot.writeString(this.descr);
      oprot.writeFieldEnd();
    }
    if (this.iconPath != null) {
      oprot.writeFieldBegin(_ICON_PATH_FIELD_DESC);
      oprot.writeString(this.iconPath);
      oprot.writeFieldEnd();
    }
    if (this.url != null) {
      oprot.writeFieldBegin(_URL_FIELD_DESC);
      oprot.writeString(this.url);
      oprot.writeFieldEnd();
    }
    if (this.buttons != null) {
      oprot.writeFieldBegin(_BUTTONS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.buttons.length));
        for (var elem65 in this.buttons) {
          elem65.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.action != null) {
      oprot.writeFieldBegin(_ACTION_FIELD_DESC);
      this.action.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ShortcutItem(");

    ret.write("id:");
    if (this.id == null) {
      ret.write("null");
    } else {
      ret.write(this.id);
    }

    ret.write(", ");
    ret.write("title:");
    if (this.title == null) {
      ret.write("null");
    } else {
      ret.write(this.title);
    }

    ret.write(", ");
    ret.write("descr:");
    if (this.descr == null) {
      ret.write("null");
    } else {
      ret.write(this.descr);
    }

    ret.write(", ");
    ret.write("iconPath:");
    if (this.iconPath == null) {
      ret.write("null");
    } else {
      ret.write(this.iconPath);
    }

    ret.write(", ");
    ret.write("url:");
    if (this.url == null) {
      ret.write("null");
    } else {
      ret.write(this.url);
    }

    ret.write(", ");
    ret.write("buttons:");
    if (this.buttons == null) {
      ret.write("null");
    } else {
      ret.write(this.buttons);
    }

    ret.write(", ");
    ret.write("action:");
    if (this.action == null) {
      ret.write("null");
    } else {
      ret.write(this.action);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

