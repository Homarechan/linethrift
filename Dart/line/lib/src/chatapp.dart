/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.chatapp;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class Chatapp implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("Chatapp");
  static final TField _CHATAPP_ID_FIELD_DESC = new TField("chatappId", TType.STRING, 1);
  static final TField _NAME_FIELD_DESC = new TField("name", TType.STRING, 2);
  static final TField _ICON_FIELD_DESC = new TField("icon", TType.STRING, 3);
  static final TField _URL_FIELD_DESC = new TField("url", TType.STRING, 4);
  static final TField _AVAILABLE_CHAT_TYPES_FIELD_DESC = new TField("availableChatTypes", TType.LIST, 5);

  String _chatappId;
  static const int CHATAPPID = 1;
  String _name;
  static const int NAME = 2;
  String _icon;
  static const int ICON = 3;
  String _url;
  static const int URL = 4;
  List<int> _availableChatTypes;
  static const int AVAILABLECHATTYPES = 5;


  Chatapp() {
  }

  // chatappId
  String get chatappId => this._chatappId;

  set chatappId(String chatappId) {
    this._chatappId = chatappId;
  }

  bool isSetChatappId() => this.chatappId != null;

  unsetChatappId() {
    this.chatappId = null;
  }

  // name
  String get name => this._name;

  set name(String name) {
    this._name = name;
  }

  bool isSetName() => this.name != null;

  unsetName() {
    this.name = null;
  }

  // icon
  String get icon => this._icon;

  set icon(String icon) {
    this._icon = icon;
  }

  bool isSetIcon() => this.icon != null;

  unsetIcon() {
    this.icon = null;
  }

  // url
  String get url => this._url;

  set url(String url) {
    this._url = url;
  }

  bool isSetUrl() => this.url != null;

  unsetUrl() {
    this.url = null;
  }

  // availableChatTypes
  List<int> get availableChatTypes => this._availableChatTypes;

  set availableChatTypes(List<int> availableChatTypes) {
    this._availableChatTypes = availableChatTypes;
  }

  bool isSetAvailableChatTypes() => this.availableChatTypes != null;

  unsetAvailableChatTypes() {
    this.availableChatTypes = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case CHATAPPID:
        return this.chatappId;
      case NAME:
        return this.name;
      case ICON:
        return this.icon;
      case URL:
        return this.url;
      case AVAILABLECHATTYPES:
        return this.availableChatTypes;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case CHATAPPID:
        if (value == null) {
          unsetChatappId();
        } else {
          this.chatappId = value;
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          this.name = value;
        }
        break;

      case ICON:
        if (value == null) {
          unsetIcon();
        } else {
          this.icon = value;
        }
        break;

      case URL:
        if (value == null) {
          unsetUrl();
        } else {
          this.url = value;
        }
        break;

      case AVAILABLECHATTYPES:
        if (value == null) {
          unsetAvailableChatTypes();
        } else {
          this.availableChatTypes = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case CHATAPPID:
        return isSetChatappId();
      case NAME:
        return isSetName();
      case ICON:
        return isSetIcon();
      case URL:
        return isSetUrl();
      case AVAILABLECHATTYPES:
        return isSetAvailableChatTypes();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case CHATAPPID:
          if (field.type == TType.STRING) {
            this.chatappId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NAME:
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ICON:
          if (field.type == TType.STRING) {
            this.icon = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case URL:
          if (field.type == TType.STRING) {
            this.url = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AVAILABLECHATTYPES:
          if (field.type == TType.LIST) {
            {
              TList _list0 = iprot.readListBegin();
              this.availableChatTypes = new List<int>();
              for (int _i1 = 0; _i1 < _list0.length; ++_i1) {
                int _elem2;
                _elem2 = iprot.readI32();
                this.availableChatTypes.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.chatappId != null) {
      oprot.writeFieldBegin(_CHATAPP_ID_FIELD_DESC);
      oprot.writeString(this.chatappId);
      oprot.writeFieldEnd();
    }
    if (this.name != null) {
      oprot.writeFieldBegin(_NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.icon != null) {
      oprot.writeFieldBegin(_ICON_FIELD_DESC);
      oprot.writeString(this.icon);
      oprot.writeFieldEnd();
    }
    if (this.url != null) {
      oprot.writeFieldBegin(_URL_FIELD_DESC);
      oprot.writeString(this.url);
      oprot.writeFieldEnd();
    }
    if (this.availableChatTypes != null) {
      oprot.writeFieldBegin(_AVAILABLE_CHAT_TYPES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.I32, this.availableChatTypes.length));
        for (var elem3 in this.availableChatTypes) {
          oprot.writeI32(elem3);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("Chatapp(");

    ret.write("chatappId:");
    if (this.chatappId == null) {
      ret.write("null");
    } else {
      ret.write(this.chatappId);
    }

    ret.write(", ");
    ret.write("name:");
    if (this.name == null) {
      ret.write("null");
    } else {
      ret.write(this.name);
    }

    ret.write(", ");
    ret.write("icon:");
    if (this.icon == null) {
      ret.write("null");
    } else {
      ret.write(this.icon);
    }

    ret.write(", ");
    ret.write("url:");
    if (this.url == null) {
      ret.write("null");
    } else {
      ret.write(this.url);
    }

    ret.write(", ");
    ret.write("availableChatTypes:");
    if (this.availableChatTypes == null) {
      ret.write("null");
    } else {
      ret.write(this.availableChatTypes);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

