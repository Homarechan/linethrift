/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.buddy_profile;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class BuddyProfile implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("BuddyProfile");
  static final TField _BUDDY_ID_FIELD_DESC = new TField("buddyId", TType.STRING, 1);
  static final TField _MID_FIELD_DESC = new TField("mid", TType.STRING, 2);
  static final TField _SEARCH_ID_FIELD_DESC = new TField("searchId", TType.STRING, 3);
  static final TField _DISPLAY_NAME_FIELD_DESC = new TField("displayName", TType.STRING, 4);
  static final TField _STATUS_MESSAGE_FIELD_DESC = new TField("statusMessage", TType.STRING, 5);
  static final TField _CONTACT_COUNT_FIELD_DESC = new TField("contactCount", TType.I64, 11);

  String _buddyId;
  static const int BUDDYID = 1;
  String _mid;
  static const int MID = 2;
  String _searchId;
  static const int SEARCHID = 3;
  String _displayName;
  static const int DISPLAYNAME = 4;
  String _statusMessage;
  static const int STATUSMESSAGE = 5;
  int _contactCount = 0;
  static const int CONTACTCOUNT = 11;

  bool __isset_contactCount = false;

  BuddyProfile() {
  }

  // buddyId
  String get buddyId => this._buddyId;

  set buddyId(String buddyId) {
    this._buddyId = buddyId;
  }

  bool isSetBuddyId() => this.buddyId != null;

  unsetBuddyId() {
    this.buddyId = null;
  }

  // mid
  String get mid => this._mid;

  set mid(String mid) {
    this._mid = mid;
  }

  bool isSetMid() => this.mid != null;

  unsetMid() {
    this.mid = null;
  }

  // searchId
  String get searchId => this._searchId;

  set searchId(String searchId) {
    this._searchId = searchId;
  }

  bool isSetSearchId() => this.searchId != null;

  unsetSearchId() {
    this.searchId = null;
  }

  // displayName
  String get displayName => this._displayName;

  set displayName(String displayName) {
    this._displayName = displayName;
  }

  bool isSetDisplayName() => this.displayName != null;

  unsetDisplayName() {
    this.displayName = null;
  }

  // statusMessage
  String get statusMessage => this._statusMessage;

  set statusMessage(String statusMessage) {
    this._statusMessage = statusMessage;
  }

  bool isSetStatusMessage() => this.statusMessage != null;

  unsetStatusMessage() {
    this.statusMessage = null;
  }

  // contactCount
  int get contactCount => this._contactCount;

  set contactCount(int contactCount) {
    this._contactCount = contactCount;
    this.__isset_contactCount = true;
  }

  bool isSetContactCount() => this.__isset_contactCount;

  unsetContactCount() {
    this.__isset_contactCount = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case BUDDYID:
        return this.buddyId;
      case MID:
        return this.mid;
      case SEARCHID:
        return this.searchId;
      case DISPLAYNAME:
        return this.displayName;
      case STATUSMESSAGE:
        return this.statusMessage;
      case CONTACTCOUNT:
        return this.contactCount;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case BUDDYID:
        if (value == null) {
          unsetBuddyId();
        } else {
          this.buddyId = value;
        }
        break;

      case MID:
        if (value == null) {
          unsetMid();
        } else {
          this.mid = value;
        }
        break;

      case SEARCHID:
        if (value == null) {
          unsetSearchId();
        } else {
          this.searchId = value;
        }
        break;

      case DISPLAYNAME:
        if (value == null) {
          unsetDisplayName();
        } else {
          this.displayName = value;
        }
        break;

      case STATUSMESSAGE:
        if (value == null) {
          unsetStatusMessage();
        } else {
          this.statusMessage = value;
        }
        break;

      case CONTACTCOUNT:
        if (value == null) {
          unsetContactCount();
        } else {
          this.contactCount = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case BUDDYID:
        return isSetBuddyId();
      case MID:
        return isSetMid();
      case SEARCHID:
        return isSetSearchId();
      case DISPLAYNAME:
        return isSetDisplayName();
      case STATUSMESSAGE:
        return isSetStatusMessage();
      case CONTACTCOUNT:
        return isSetContactCount();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case BUDDYID:
          if (field.type == TType.STRING) {
            this.buddyId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MID:
          if (field.type == TType.STRING) {
            this.mid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SEARCHID:
          if (field.type == TType.STRING) {
            this.searchId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DISPLAYNAME:
          if (field.type == TType.STRING) {
            this.displayName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STATUSMESSAGE:
          if (field.type == TType.STRING) {
            this.statusMessage = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CONTACTCOUNT:
          if (field.type == TType.I64) {
            this.contactCount = iprot.readI64();
            this.__isset_contactCount = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.buddyId != null) {
      oprot.writeFieldBegin(_BUDDY_ID_FIELD_DESC);
      oprot.writeString(this.buddyId);
      oprot.writeFieldEnd();
    }
    if (this.mid != null) {
      oprot.writeFieldBegin(_MID_FIELD_DESC);
      oprot.writeString(this.mid);
      oprot.writeFieldEnd();
    }
    if (this.searchId != null) {
      oprot.writeFieldBegin(_SEARCH_ID_FIELD_DESC);
      oprot.writeString(this.searchId);
      oprot.writeFieldEnd();
    }
    if (this.displayName != null) {
      oprot.writeFieldBegin(_DISPLAY_NAME_FIELD_DESC);
      oprot.writeString(this.displayName);
      oprot.writeFieldEnd();
    }
    if (this.statusMessage != null) {
      oprot.writeFieldBegin(_STATUS_MESSAGE_FIELD_DESC);
      oprot.writeString(this.statusMessage);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_CONTACT_COUNT_FIELD_DESC);
    oprot.writeI64(this.contactCount);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("BuddyProfile(");

    ret.write("buddyId:");
    if (this.buddyId == null) {
      ret.write("null");
    } else {
      ret.write(this.buddyId);
    }

    ret.write(", ");
    ret.write("mid:");
    if (this.mid == null) {
      ret.write("null");
    } else {
      ret.write(this.mid);
    }

    ret.write(", ");
    ret.write("searchId:");
    if (this.searchId == null) {
      ret.write("null");
    } else {
      ret.write(this.searchId);
    }

    ret.write(", ");
    ret.write("displayName:");
    if (this.displayName == null) {
      ret.write("null");
    } else {
      ret.write(this.displayName);
    }

    ret.write(", ");
    ret.write("statusMessage:");
    if (this.statusMessage == null) {
      ret.write("null");
    } else {
      ret.write(this.statusMessage);
    }

    ret.write(", ");
    ret.write("contactCount:");
    ret.write(this.contactCount);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

