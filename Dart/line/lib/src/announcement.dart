/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.announcement;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class Announcement implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("Announcement");
  static final TField _INDEX_FIELD_DESC = new TField("index", TType.I32, 1);
  static final TField _FORCE_UPDATE_FIELD_DESC = new TField("forceUpdate", TType.BOOL, 10);
  static final TField _TITLE_FIELD_DESC = new TField("title", TType.STRING, 11);
  static final TField _TEXT_FIELD_DESC = new TField("text", TType.STRING, 12);
  static final TField _CREATED_TIME_FIELD_DESC = new TField("createdTime", TType.I64, 13);
  static final TField _PICTURE_URL_FIELD_DESC = new TField("pictureUrl", TType.STRING, 14);
  static final TField _THUMBNAIL_URL_FIELD_DESC = new TField("thumbnailUrl", TType.STRING, 15);

  int _index = 0;
  static const int INDEX = 1;
  bool _forceUpdate = false;
  static const int FORCEUPDATE = 10;
  String _title;
  static const int TITLE = 11;
  String _text;
  static const int TEXT = 12;
  int _createdTime = 0;
  static const int CREATEDTIME = 13;
  String _pictureUrl;
  static const int PICTUREURL = 14;
  String _thumbnailUrl;
  static const int THUMBNAILURL = 15;

  bool __isset_index = false;
  bool __isset_forceUpdate = false;
  bool __isset_createdTime = false;

  Announcement() {
  }

  // index
  int get index => this._index;

  set index(int index) {
    this._index = index;
    this.__isset_index = true;
  }

  bool isSetIndex() => this.__isset_index;

  unsetIndex() {
    this.__isset_index = false;
  }

  // forceUpdate
  bool get forceUpdate => this._forceUpdate;

  set forceUpdate(bool forceUpdate) {
    this._forceUpdate = forceUpdate;
    this.__isset_forceUpdate = true;
  }

  bool isSetForceUpdate() => this.__isset_forceUpdate;

  unsetForceUpdate() {
    this.__isset_forceUpdate = false;
  }

  // title
  String get title => this._title;

  set title(String title) {
    this._title = title;
  }

  bool isSetTitle() => this.title != null;

  unsetTitle() {
    this.title = null;
  }

  // text
  String get text => this._text;

  set text(String text) {
    this._text = text;
  }

  bool isSetText() => this.text != null;

  unsetText() {
    this.text = null;
  }

  // createdTime
  int get createdTime => this._createdTime;

  set createdTime(int createdTime) {
    this._createdTime = createdTime;
    this.__isset_createdTime = true;
  }

  bool isSetCreatedTime() => this.__isset_createdTime;

  unsetCreatedTime() {
    this.__isset_createdTime = false;
  }

  // pictureUrl
  String get pictureUrl => this._pictureUrl;

  set pictureUrl(String pictureUrl) {
    this._pictureUrl = pictureUrl;
  }

  bool isSetPictureUrl() => this.pictureUrl != null;

  unsetPictureUrl() {
    this.pictureUrl = null;
  }

  // thumbnailUrl
  String get thumbnailUrl => this._thumbnailUrl;

  set thumbnailUrl(String thumbnailUrl) {
    this._thumbnailUrl = thumbnailUrl;
  }

  bool isSetThumbnailUrl() => this.thumbnailUrl != null;

  unsetThumbnailUrl() {
    this.thumbnailUrl = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case INDEX:
        return this.index;
      case FORCEUPDATE:
        return this.forceUpdate;
      case TITLE:
        return this.title;
      case TEXT:
        return this.text;
      case CREATEDTIME:
        return this.createdTime;
      case PICTUREURL:
        return this.pictureUrl;
      case THUMBNAILURL:
        return this.thumbnailUrl;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case INDEX:
        if (value == null) {
          unsetIndex();
        } else {
          this.index = value;
        }
        break;

      case FORCEUPDATE:
        if (value == null) {
          unsetForceUpdate();
        } else {
          this.forceUpdate = value;
        }
        break;

      case TITLE:
        if (value == null) {
          unsetTitle();
        } else {
          this.title = value;
        }
        break;

      case TEXT:
        if (value == null) {
          unsetText();
        } else {
          this.text = value;
        }
        break;

      case CREATEDTIME:
        if (value == null) {
          unsetCreatedTime();
        } else {
          this.createdTime = value;
        }
        break;

      case PICTUREURL:
        if (value == null) {
          unsetPictureUrl();
        } else {
          this.pictureUrl = value;
        }
        break;

      case THUMBNAILURL:
        if (value == null) {
          unsetThumbnailUrl();
        } else {
          this.thumbnailUrl = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case INDEX:
        return isSetIndex();
      case FORCEUPDATE:
        return isSetForceUpdate();
      case TITLE:
        return isSetTitle();
      case TEXT:
        return isSetText();
      case CREATEDTIME:
        return isSetCreatedTime();
      case PICTUREURL:
        return isSetPictureUrl();
      case THUMBNAILURL:
        return isSetThumbnailUrl();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case INDEX:
          if (field.type == TType.I32) {
            this.index = iprot.readI32();
            this.__isset_index = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FORCEUPDATE:
          if (field.type == TType.BOOL) {
            this.forceUpdate = iprot.readBool();
            this.__isset_forceUpdate = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TITLE:
          if (field.type == TType.STRING) {
            this.title = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TEXT:
          if (field.type == TType.STRING) {
            this.text = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CREATEDTIME:
          if (field.type == TType.I64) {
            this.createdTime = iprot.readI64();
            this.__isset_createdTime = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PICTUREURL:
          if (field.type == TType.STRING) {
            this.pictureUrl = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case THUMBNAILURL:
          if (field.type == TType.STRING) {
            this.thumbnailUrl = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_INDEX_FIELD_DESC);
    oprot.writeI32(this.index);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_FORCE_UPDATE_FIELD_DESC);
    oprot.writeBool(this.forceUpdate);
    oprot.writeFieldEnd();
    if (this.title != null) {
      oprot.writeFieldBegin(_TITLE_FIELD_DESC);
      oprot.writeString(this.title);
      oprot.writeFieldEnd();
    }
    if (this.text != null) {
      oprot.writeFieldBegin(_TEXT_FIELD_DESC);
      oprot.writeString(this.text);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_CREATED_TIME_FIELD_DESC);
    oprot.writeI64(this.createdTime);
    oprot.writeFieldEnd();
    if (this.pictureUrl != null) {
      oprot.writeFieldBegin(_PICTURE_URL_FIELD_DESC);
      oprot.writeString(this.pictureUrl);
      oprot.writeFieldEnd();
    }
    if (this.thumbnailUrl != null) {
      oprot.writeFieldBegin(_THUMBNAIL_URL_FIELD_DESC);
      oprot.writeString(this.thumbnailUrl);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("Announcement(");

    ret.write("index:");
    ret.write(this.index);

    ret.write(", ");
    ret.write("forceUpdate:");
    ret.write(this.forceUpdate);

    ret.write(", ");
    ret.write("title:");
    if (this.title == null) {
      ret.write("null");
    } else {
      ret.write(this.title);
    }

    ret.write(", ");
    ret.write("text:");
    if (this.text == null) {
      ret.write("null");
    } else {
      ret.write(this.text);
    }

    ret.write(", ");
    ret.write("createdTime:");
    ret.write(this.createdTime);

    ret.write(", ");
    ret.write("pictureUrl:");
    if (this.pictureUrl == null) {
      ret.write("null");
    } else {
      ret.write(this.pictureUrl);
    }

    ret.write(", ");
    ret.write("thumbnailUrl:");
    if (this.thumbnailUrl == null) {
      ret.write("null");
    } else {
      ret.write(this.thumbnailUrl);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

