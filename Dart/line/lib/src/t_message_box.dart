/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.t_message_box;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class TMessageBox implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("TMessageBox");
  static final TField _ID_FIELD_DESC = new TField("id", TType.STRING, 1);
  static final TField _CHANNEL_ID_FIELD_DESC = new TField("channelId", TType.STRING, 2);
  static final TField _LAST_SEQ_FIELD_DESC = new TField("lastSeq", TType.I64, 5);
  static final TField _UNREAD_COUNT_FIELD_DESC = new TField("unreadCount", TType.I64, 6);
  static final TField _LAST_MODIFIED_TIME_FIELD_DESC = new TField("lastModifiedTime", TType.I64, 7);
  static final TField _STATUS_FIELD_DESC = new TField("status", TType.I32, 8);
  static final TField _MID_TYPE_FIELD_DESC = new TField("midType", TType.I32, 9);
  static final TField _LAST_MESSAGES_FIELD_DESC = new TField("lastMessages", TType.LIST, 10);

  String _id;
  static const int ID = 1;
  String _channelId;
  static const int CHANNELID = 2;
  int _lastSeq = 0;
  static const int LASTSEQ = 5;
  int _unreadCount = 0;
  static const int UNREADCOUNT = 6;
  int _lastModifiedTime = 0;
  static const int LASTMODIFIEDTIME = 7;
  int _status = 0;
  static const int STATUS = 8;
  int _midType;
  static const int MIDTYPE = 9;
  List<Message> _lastMessages;
  static const int LASTMESSAGES = 10;

  bool __isset_lastSeq = false;
  bool __isset_unreadCount = false;
  bool __isset_lastModifiedTime = false;
  bool __isset_status = false;
  bool __isset_midType = false;

  TMessageBox() {
  }

  // id
  String get id => this._id;

  set id(String id) {
    this._id = id;
  }

  bool isSetId() => this.id != null;

  unsetId() {
    this.id = null;
  }

  // channelId
  String get channelId => this._channelId;

  set channelId(String channelId) {
    this._channelId = channelId;
  }

  bool isSetChannelId() => this.channelId != null;

  unsetChannelId() {
    this.channelId = null;
  }

  // lastSeq
  int get lastSeq => this._lastSeq;

  set lastSeq(int lastSeq) {
    this._lastSeq = lastSeq;
    this.__isset_lastSeq = true;
  }

  bool isSetLastSeq() => this.__isset_lastSeq;

  unsetLastSeq() {
    this.__isset_lastSeq = false;
  }

  // unreadCount
  int get unreadCount => this._unreadCount;

  set unreadCount(int unreadCount) {
    this._unreadCount = unreadCount;
    this.__isset_unreadCount = true;
  }

  bool isSetUnreadCount() => this.__isset_unreadCount;

  unsetUnreadCount() {
    this.__isset_unreadCount = false;
  }

  // lastModifiedTime
  int get lastModifiedTime => this._lastModifiedTime;

  set lastModifiedTime(int lastModifiedTime) {
    this._lastModifiedTime = lastModifiedTime;
    this.__isset_lastModifiedTime = true;
  }

  bool isSetLastModifiedTime() => this.__isset_lastModifiedTime;

  unsetLastModifiedTime() {
    this.__isset_lastModifiedTime = false;
  }

  // status
  int get status => this._status;

  set status(int status) {
    this._status = status;
    this.__isset_status = true;
  }

  bool isSetStatus() => this.__isset_status;

  unsetStatus() {
    this.__isset_status = false;
  }

  // midType
  int get midType => this._midType;

  set midType(int midType) {
    this._midType = midType;
    this.__isset_midType = true;
  }

  bool isSetMidType() => this.__isset_midType;

  unsetMidType() {
    this.__isset_midType = false;
  }

  // lastMessages
  List<Message> get lastMessages => this._lastMessages;

  set lastMessages(List<Message> lastMessages) {
    this._lastMessages = lastMessages;
  }

  bool isSetLastMessages() => this.lastMessages != null;

  unsetLastMessages() {
    this.lastMessages = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case ID:
        return this.id;
      case CHANNELID:
        return this.channelId;
      case LASTSEQ:
        return this.lastSeq;
      case UNREADCOUNT:
        return this.unreadCount;
      case LASTMODIFIEDTIME:
        return this.lastModifiedTime;
      case STATUS:
        return this.status;
      case MIDTYPE:
        return this.midType;
      case LASTMESSAGES:
        return this.lastMessages;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          this.id = value;
        }
        break;

      case CHANNELID:
        if (value == null) {
          unsetChannelId();
        } else {
          this.channelId = value;
        }
        break;

      case LASTSEQ:
        if (value == null) {
          unsetLastSeq();
        } else {
          this.lastSeq = value;
        }
        break;

      case UNREADCOUNT:
        if (value == null) {
          unsetUnreadCount();
        } else {
          this.unreadCount = value;
        }
        break;

      case LASTMODIFIEDTIME:
        if (value == null) {
          unsetLastModifiedTime();
        } else {
          this.lastModifiedTime = value;
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          this.status = value;
        }
        break;

      case MIDTYPE:
        if (value == null) {
          unsetMidType();
        } else {
          this.midType = value;
        }
        break;

      case LASTMESSAGES:
        if (value == null) {
          unsetLastMessages();
        } else {
          this.lastMessages = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case ID:
        return isSetId();
      case CHANNELID:
        return isSetChannelId();
      case LASTSEQ:
        return isSetLastSeq();
      case UNREADCOUNT:
        return isSetUnreadCount();
      case LASTMODIFIEDTIME:
        return isSetLastModifiedTime();
      case STATUS:
        return isSetStatus();
      case MIDTYPE:
        return isSetMidType();
      case LASTMESSAGES:
        return isSetLastMessages();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ID:
          if (field.type == TType.STRING) {
            this.id = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CHANNELID:
          if (field.type == TType.STRING) {
            this.channelId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LASTSEQ:
          if (field.type == TType.I64) {
            this.lastSeq = iprot.readI64();
            this.__isset_lastSeq = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case UNREADCOUNT:
          if (field.type == TType.I64) {
            this.unreadCount = iprot.readI64();
            this.__isset_unreadCount = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LASTMODIFIEDTIME:
          if (field.type == TType.I64) {
            this.lastModifiedTime = iprot.readI64();
            this.__isset_lastModifiedTime = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STATUS:
          if (field.type == TType.I32) {
            this.status = iprot.readI32();
            this.__isset_status = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MIDTYPE:
          if (field.type == TType.I32) {
            this.midType = iprot.readI32();
            this.__isset_midType = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LASTMESSAGES:
          if (field.type == TType.LIST) {
            {
              TList _list266 = iprot.readListBegin();
              this.lastMessages = new List<Message>();
              for (int _i267 = 0; _i267 < _list266.length; ++_i267) {
                Message _elem268;
                _elem268 = new Message();
                _elem268.read(iprot);
                this.lastMessages.add(_elem268);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.id != null) {
      oprot.writeFieldBegin(_ID_FIELD_DESC);
      oprot.writeString(this.id);
      oprot.writeFieldEnd();
    }
    if (this.channelId != null) {
      oprot.writeFieldBegin(_CHANNEL_ID_FIELD_DESC);
      oprot.writeString(this.channelId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_LAST_SEQ_FIELD_DESC);
    oprot.writeI64(this.lastSeq);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_UNREAD_COUNT_FIELD_DESC);
    oprot.writeI64(this.unreadCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_LAST_MODIFIED_TIME_FIELD_DESC);
    oprot.writeI64(this.lastModifiedTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_STATUS_FIELD_DESC);
    oprot.writeI32(this.status);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_MID_TYPE_FIELD_DESC);
    oprot.writeI32(this.midType);
    oprot.writeFieldEnd();
    if (this.lastMessages != null) {
      oprot.writeFieldBegin(_LAST_MESSAGES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.lastMessages.length));
        for (var elem269 in this.lastMessages) {
          elem269.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("TMessageBox(");

    ret.write("id:");
    if (this.id == null) {
      ret.write("null");
    } else {
      ret.write(this.id);
    }

    ret.write(", ");
    ret.write("channelId:");
    if (this.channelId == null) {
      ret.write("null");
    } else {
      ret.write(this.channelId);
    }

    ret.write(", ");
    ret.write("lastSeq:");
    ret.write(this.lastSeq);

    ret.write(", ");
    ret.write("unreadCount:");
    ret.write(this.unreadCount);

    ret.write(", ");
    ret.write("lastModifiedTime:");
    ret.write(this.lastModifiedTime);

    ret.write(", ");
    ret.write("status:");
    ret.write(this.status);

    ret.write(", ");
    ret.write("midType:");
    String midType_name = MIDType.VALUES_TO_NAMES[this.midType];
    if (midType_name != null) {
      ret.write(midType_name);
      ret.write(" (");
    }
    ret.write(this.midType);
    if (midType_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("lastMessages:");
    if (this.lastMessages == null) {
      ret.write("null");
    } else {
      ret.write(this.lastMessages);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetMidType() && !MIDType.VALID_VALUES.contains(midType)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'midType' has been assigned the invalid value $midType");
    }
  }

}

