/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.install_app_data;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class InstallAppData implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("InstallAppData");
  static final TField _INSTALL_DATA_FIELD_DESC = new TField("installData", TType.MAP, 1);

  Map<String, String> _installData;
  static const int INSTALLDATA = 1;


  InstallAppData() {
  }

  // installData
  Map<String, String> get installData => this._installData;

  set installData(Map<String, String> installData) {
    this._installData = installData;
  }

  bool isSetInstallData() => this.installData != null;

  unsetInstallData() {
    this.installData = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case INSTALLDATA:
        return this.installData;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case INSTALLDATA:
        if (value == null) {
          unsetInstallData();
        } else {
          this.installData = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case INSTALLDATA:
        return isSetInstallData();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case INSTALLDATA:
          if (field.type == TType.MAP) {
            {
              TMap _map56 = iprot.readMapBegin();
              this.installData = new Map<String, String>();
              for (int _i57 = 0; _i57 < _map56.length; ++_i57) {
                String _key58;
                String _val59;
                _key58 = iprot.readString();
                _val59 = iprot.readString();
                this.installData[_key58] = _val59;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.installData != null) {
      oprot.writeFieldBegin(_INSTALL_DATA_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.installData.length));
        for (var elem61 in this.installData.keys) {
          oprot.writeString(elem61);
          oprot.writeString(this.installData[elem61]);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("InstallAppData(");

    ret.write("installData:");
    if (this.installData == null) {
      ret.write("null");
    } else {
      ret.write(this.installData);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

