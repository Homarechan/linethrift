/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.contact_registration;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class ContactRegistration implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ContactRegistration");
  static final TField _CONTACT_FIELD_DESC = new TField("contact", TType.STRUCT, 1);
  static final TField _LUID_FIELD_DESC = new TField("luid", TType.STRING, 10);
  static final TField _CONTACT_TYPE_FIELD_DESC = new TField("contactType", TType.I32, 11);
  static final TField _CONTACT_KEY_FIELD_DESC = new TField("contactKey", TType.STRING, 12);

  Contact _contact;
  static const int CONTACT = 1;
  String _luid;
  static const int LUID = 10;
  int _contactType;
  static const int CONTACTTYPE = 11;
  String _contactKey;
  static const int CONTACTKEY = 12;

  bool __isset_contactType = false;

  ContactRegistration() {
  }

  // contact
  Contact get contact => this._contact;

  set contact(Contact contact) {
    this._contact = contact;
  }

  bool isSetContact() => this.contact != null;

  unsetContact() {
    this.contact = null;
  }

  // luid
  String get luid => this._luid;

  set luid(String luid) {
    this._luid = luid;
  }

  bool isSetLuid() => this.luid != null;

  unsetLuid() {
    this.luid = null;
  }

  // contactType
  int get contactType => this._contactType;

  set contactType(int contactType) {
    this._contactType = contactType;
    this.__isset_contactType = true;
  }

  bool isSetContactType() => this.__isset_contactType;

  unsetContactType() {
    this.__isset_contactType = false;
  }

  // contactKey
  String get contactKey => this._contactKey;

  set contactKey(String contactKey) {
    this._contactKey = contactKey;
  }

  bool isSetContactKey() => this.contactKey != null;

  unsetContactKey() {
    this.contactKey = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case CONTACT:
        return this.contact;
      case LUID:
        return this.luid;
      case CONTACTTYPE:
        return this.contactType;
      case CONTACTKEY:
        return this.contactKey;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case CONTACT:
        if (value == null) {
          unsetContact();
        } else {
          this.contact = value;
        }
        break;

      case LUID:
        if (value == null) {
          unsetLuid();
        } else {
          this.luid = value;
        }
        break;

      case CONTACTTYPE:
        if (value == null) {
          unsetContactType();
        } else {
          this.contactType = value;
        }
        break;

      case CONTACTKEY:
        if (value == null) {
          unsetContactKey();
        } else {
          this.contactKey = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case CONTACT:
        return isSetContact();
      case LUID:
        return isSetLuid();
      case CONTACTTYPE:
        return isSetContactType();
      case CONTACTKEY:
        return isSetContactKey();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case CONTACT:
          if (field.type == TType.STRUCT) {
            this.contact = new Contact();
            this.contact.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LUID:
          if (field.type == TType.STRING) {
            this.luid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CONTACTTYPE:
          if (field.type == TType.I32) {
            this.contactType = iprot.readI32();
            this.__isset_contactType = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CONTACTKEY:
          if (field.type == TType.STRING) {
            this.contactKey = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.contact != null) {
      oprot.writeFieldBegin(_CONTACT_FIELD_DESC);
      this.contact.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.luid != null) {
      oprot.writeFieldBegin(_LUID_FIELD_DESC);
      oprot.writeString(this.luid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_CONTACT_TYPE_FIELD_DESC);
    oprot.writeI32(this.contactType);
    oprot.writeFieldEnd();
    if (this.contactKey != null) {
      oprot.writeFieldBegin(_CONTACT_KEY_FIELD_DESC);
      oprot.writeString(this.contactKey);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ContactRegistration(");

    ret.write("contact:");
    if (this.contact == null) {
      ret.write("null");
    } else {
      ret.write(this.contact);
    }

    ret.write(", ");
    ret.write("luid:");
    if (this.luid == null) {
      ret.write("null");
    } else {
      ret.write(this.luid);
    }

    ret.write(", ");
    ret.write("contactType:");
    String contactType_name = ContactType.VALUES_TO_NAMES[this.contactType];
    if (contactType_name != null) {
      ret.write(contactType_name);
      ret.write(" (");
    }
    ret.write(this.contactType);
    if (contactType_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("contactKey:");
    if (this.contactKey == null) {
      ret.write("null");
    } else {
      ret.write(this.contactKey);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetContactType() && !ContactType.VALID_VALUES.contains(contactType)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'contactType' has been assigned the invalid value $contactType");
    }
  }

}

