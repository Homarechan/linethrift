/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.update_profile_attributes_request;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class UpdateProfileAttributesRequest implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("UpdateProfileAttributesRequest");
  static final TField _PROFILE_ATTRIBUTES_FIELD_DESC = new TField("profileAttributes", TType.MAP, 1);

  Map<int, ProfileContent> _profileAttributes;
  static const int PROFILEATTRIBUTES = 1;


  UpdateProfileAttributesRequest() {
  }

  // profileAttributes
  Map<int, ProfileContent> get profileAttributes => this._profileAttributes;

  set profileAttributes(Map<int, ProfileContent> profileAttributes) {
    this._profileAttributes = profileAttributes;
  }

  bool isSetProfileAttributes() => this.profileAttributes != null;

  unsetProfileAttributes() {
    this.profileAttributes = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case PROFILEATTRIBUTES:
        return this.profileAttributes;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case PROFILEATTRIBUTES:
        if (value == null) {
          unsetProfileAttributes();
        } else {
          this.profileAttributes = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case PROFILEATTRIBUTES:
        return isSetProfileAttributes();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case PROFILEATTRIBUTES:
          if (field.type == TType.MAP) {
            {
              TMap _map14 = iprot.readMapBegin();
              this.profileAttributes = new Map<int, ProfileContent>();
              for (int _i15 = 0; _i15 < _map14.length; ++_i15) {
                int _key16;
                ProfileContent _val17;
                _key16 = iprot.readI32();
                _val17 = new ProfileContent();
                _val17.read(iprot);
                this.profileAttributes[_key16] = _val17;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.profileAttributes != null) {
      oprot.writeFieldBegin(_PROFILE_ATTRIBUTES_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.STRUCT, this.profileAttributes.length));
        for (var elem19 in this.profileAttributes.keys) {
          oprot.writeI32(elem19);
          this.profileAttributes[elem19].write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("UpdateProfileAttributesRequest(");

    ret.write("profileAttributes:");
    if (this.profileAttributes == null) {
      ret.write("null");
    } else {
      ret.write(this.profileAttributes);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

