/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.search_item_union;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class SearchItemUnion implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("SearchItemUnion");
  static final TField _CATEGORY_ITEM_FIELD_DESC = new TField("categoryItem", TType.STRUCT, 1);
  static final TField _SPOT_ITEM_FIELD_DESC = new TField("spotItem", TType.STRUCT, 2);
  static final TField _PRODUCT_ITEM_FIELD_DESC = new TField("productItem", TType.STRUCT, 3);
  static final TField _SERVICE_ITEM_FIELD_DESC = new TField("serviceItem", TType.STRUCT, 4);
  static final TField _YELLOWPAGE_ITEM_FIELD_DESC = new TField("yellowpageItem", TType.STRUCT, 5);
  static final TField _OA_ITEM_FIELD_DESC = new TField("oaItem", TType.STRUCT, 6);
  static final TField _GEO_ADDRESS_ITEM_FIELD_DESC = new TField("geoAddressItem", TType.STRUCT, 7);
  static final TField _SHORTCUT_ITEM_FIELD_DESC = new TField("shortcutItem", TType.STRUCT, 8);
  static final TField _SQUARE_ITEM_FIELD_DESC = new TField("squareItem", TType.STRUCT, 9);
  static final TField _SQUARE_CATEGORY_ITEM_FIELD_DESC = new TField("squareCategoryItem", TType.STRUCT, 10);

  CategoryItem _categoryItem;
  static const int CATEGORYITEM = 1;
  SpotItem _spotItem;
  static const int SPOTITEM = 2;
  ProductSearchSummary _productItem;
  static const int PRODUCTITEM = 3;
  ServiceItem _serviceItem;
  static const int SERVICEITEM = 4;
  YellowpageItem _yellowpageItem;
  static const int YELLOWPAGEITEM = 5;
  BuddySearchResult _oaItem;
  static const int OAITEM = 6;
  GeoAddressItem _geoAddressItem;
  static const int GEOADDRESSITEM = 7;
  ShortcutItem _shortcutItem;
  static const int SHORTCUTITEM = 8;
  SquareInfo _squareItem;
  static const int SQUAREITEM = 9;
  SQCat _squareCategoryItem;
  static const int SQUARECATEGORYITEM = 10;


  SearchItemUnion() {
  }

  // categoryItem
  CategoryItem get categoryItem => this._categoryItem;

  set categoryItem(CategoryItem categoryItem) {
    this._categoryItem = categoryItem;
  }

  bool isSetCategoryItem() => this.categoryItem != null;

  unsetCategoryItem() {
    this.categoryItem = null;
  }

  // spotItem
  SpotItem get spotItem => this._spotItem;

  set spotItem(SpotItem spotItem) {
    this._spotItem = spotItem;
  }

  bool isSetSpotItem() => this.spotItem != null;

  unsetSpotItem() {
    this.spotItem = null;
  }

  // productItem
  ProductSearchSummary get productItem => this._productItem;

  set productItem(ProductSearchSummary productItem) {
    this._productItem = productItem;
  }

  bool isSetProductItem() => this.productItem != null;

  unsetProductItem() {
    this.productItem = null;
  }

  // serviceItem
  ServiceItem get serviceItem => this._serviceItem;

  set serviceItem(ServiceItem serviceItem) {
    this._serviceItem = serviceItem;
  }

  bool isSetServiceItem() => this.serviceItem != null;

  unsetServiceItem() {
    this.serviceItem = null;
  }

  // yellowpageItem
  YellowpageItem get yellowpageItem => this._yellowpageItem;

  set yellowpageItem(YellowpageItem yellowpageItem) {
    this._yellowpageItem = yellowpageItem;
  }

  bool isSetYellowpageItem() => this.yellowpageItem != null;

  unsetYellowpageItem() {
    this.yellowpageItem = null;
  }

  // oaItem
  BuddySearchResult get oaItem => this._oaItem;

  set oaItem(BuddySearchResult oaItem) {
    this._oaItem = oaItem;
  }

  bool isSetOaItem() => this.oaItem != null;

  unsetOaItem() {
    this.oaItem = null;
  }

  // geoAddressItem
  GeoAddressItem get geoAddressItem => this._geoAddressItem;

  set geoAddressItem(GeoAddressItem geoAddressItem) {
    this._geoAddressItem = geoAddressItem;
  }

  bool isSetGeoAddressItem() => this.geoAddressItem != null;

  unsetGeoAddressItem() {
    this.geoAddressItem = null;
  }

  // shortcutItem
  ShortcutItem get shortcutItem => this._shortcutItem;

  set shortcutItem(ShortcutItem shortcutItem) {
    this._shortcutItem = shortcutItem;
  }

  bool isSetShortcutItem() => this.shortcutItem != null;

  unsetShortcutItem() {
    this.shortcutItem = null;
  }

  // squareItem
  SquareInfo get squareItem => this._squareItem;

  set squareItem(SquareInfo squareItem) {
    this._squareItem = squareItem;
  }

  bool isSetSquareItem() => this.squareItem != null;

  unsetSquareItem() {
    this.squareItem = null;
  }

  // squareCategoryItem
  SQCat get squareCategoryItem => this._squareCategoryItem;

  set squareCategoryItem(SQCat squareCategoryItem) {
    this._squareCategoryItem = squareCategoryItem;
  }

  bool isSetSquareCategoryItem() => this.squareCategoryItem != null;

  unsetSquareCategoryItem() {
    this.squareCategoryItem = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case CATEGORYITEM:
        return this.categoryItem;
      case SPOTITEM:
        return this.spotItem;
      case PRODUCTITEM:
        return this.productItem;
      case SERVICEITEM:
        return this.serviceItem;
      case YELLOWPAGEITEM:
        return this.yellowpageItem;
      case OAITEM:
        return this.oaItem;
      case GEOADDRESSITEM:
        return this.geoAddressItem;
      case SHORTCUTITEM:
        return this.shortcutItem;
      case SQUAREITEM:
        return this.squareItem;
      case SQUARECATEGORYITEM:
        return this.squareCategoryItem;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case CATEGORYITEM:
        if (value == null) {
          unsetCategoryItem();
        } else {
          this.categoryItem = value;
        }
        break;

      case SPOTITEM:
        if (value == null) {
          unsetSpotItem();
        } else {
          this.spotItem = value;
        }
        break;

      case PRODUCTITEM:
        if (value == null) {
          unsetProductItem();
        } else {
          this.productItem = value;
        }
        break;

      case SERVICEITEM:
        if (value == null) {
          unsetServiceItem();
        } else {
          this.serviceItem = value;
        }
        break;

      case YELLOWPAGEITEM:
        if (value == null) {
          unsetYellowpageItem();
        } else {
          this.yellowpageItem = value;
        }
        break;

      case OAITEM:
        if (value == null) {
          unsetOaItem();
        } else {
          this.oaItem = value;
        }
        break;

      case GEOADDRESSITEM:
        if (value == null) {
          unsetGeoAddressItem();
        } else {
          this.geoAddressItem = value;
        }
        break;

      case SHORTCUTITEM:
        if (value == null) {
          unsetShortcutItem();
        } else {
          this.shortcutItem = value;
        }
        break;

      case SQUAREITEM:
        if (value == null) {
          unsetSquareItem();
        } else {
          this.squareItem = value;
        }
        break;

      case SQUARECATEGORYITEM:
        if (value == null) {
          unsetSquareCategoryItem();
        } else {
          this.squareCategoryItem = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case CATEGORYITEM:
        return isSetCategoryItem();
      case SPOTITEM:
        return isSetSpotItem();
      case PRODUCTITEM:
        return isSetProductItem();
      case SERVICEITEM:
        return isSetServiceItem();
      case YELLOWPAGEITEM:
        return isSetYellowpageItem();
      case OAITEM:
        return isSetOaItem();
      case GEOADDRESSITEM:
        return isSetGeoAddressItem();
      case SHORTCUTITEM:
        return isSetShortcutItem();
      case SQUAREITEM:
        return isSetSquareItem();
      case SQUARECATEGORYITEM:
        return isSetSquareCategoryItem();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case CATEGORYITEM:
          if (field.type == TType.STRUCT) {
            this.categoryItem = new CategoryItem();
            this.categoryItem.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SPOTITEM:
          if (field.type == TType.STRUCT) {
            this.spotItem = new SpotItem();
            this.spotItem.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PRODUCTITEM:
          if (field.type == TType.STRUCT) {
            this.productItem = new ProductSearchSummary();
            this.productItem.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SERVICEITEM:
          if (field.type == TType.STRUCT) {
            this.serviceItem = new ServiceItem();
            this.serviceItem.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case YELLOWPAGEITEM:
          if (field.type == TType.STRUCT) {
            this.yellowpageItem = new YellowpageItem();
            this.yellowpageItem.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case OAITEM:
          if (field.type == TType.STRUCT) {
            this.oaItem = new BuddySearchResult();
            this.oaItem.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case GEOADDRESSITEM:
          if (field.type == TType.STRUCT) {
            this.geoAddressItem = new GeoAddressItem();
            this.geoAddressItem.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SHORTCUTITEM:
          if (field.type == TType.STRUCT) {
            this.shortcutItem = new ShortcutItem();
            this.shortcutItem.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SQUAREITEM:
          if (field.type == TType.STRUCT) {
            this.squareItem = new SquareInfo();
            this.squareItem.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SQUARECATEGORYITEM:
          if (field.type == TType.STRUCT) {
            this.squareCategoryItem = new SQCat();
            this.squareCategoryItem.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.categoryItem != null) {
      oprot.writeFieldBegin(_CATEGORY_ITEM_FIELD_DESC);
      this.categoryItem.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.spotItem != null) {
      oprot.writeFieldBegin(_SPOT_ITEM_FIELD_DESC);
      this.spotItem.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.productItem != null) {
      oprot.writeFieldBegin(_PRODUCT_ITEM_FIELD_DESC);
      this.productItem.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.serviceItem != null) {
      oprot.writeFieldBegin(_SERVICE_ITEM_FIELD_DESC);
      this.serviceItem.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.yellowpageItem != null) {
      oprot.writeFieldBegin(_YELLOWPAGE_ITEM_FIELD_DESC);
      this.yellowpageItem.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.oaItem != null) {
      oprot.writeFieldBegin(_OA_ITEM_FIELD_DESC);
      this.oaItem.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.geoAddressItem != null) {
      oprot.writeFieldBegin(_GEO_ADDRESS_ITEM_FIELD_DESC);
      this.geoAddressItem.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.shortcutItem != null) {
      oprot.writeFieldBegin(_SHORTCUT_ITEM_FIELD_DESC);
      this.shortcutItem.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.squareItem != null) {
      oprot.writeFieldBegin(_SQUARE_ITEM_FIELD_DESC);
      this.squareItem.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.squareCategoryItem != null) {
      oprot.writeFieldBegin(_SQUARE_CATEGORY_ITEM_FIELD_DESC);
      this.squareCategoryItem.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("SearchItemUnion(");

    ret.write("categoryItem:");
    if (this.categoryItem == null) {
      ret.write("null");
    } else {
      ret.write(this.categoryItem);
    }

    ret.write(", ");
    ret.write("spotItem:");
    if (this.spotItem == null) {
      ret.write("null");
    } else {
      ret.write(this.spotItem);
    }

    ret.write(", ");
    ret.write("productItem:");
    if (this.productItem == null) {
      ret.write("null");
    } else {
      ret.write(this.productItem);
    }

    ret.write(", ");
    ret.write("serviceItem:");
    if (this.serviceItem == null) {
      ret.write("null");
    } else {
      ret.write(this.serviceItem);
    }

    ret.write(", ");
    ret.write("yellowpageItem:");
    if (this.yellowpageItem == null) {
      ret.write("null");
    } else {
      ret.write(this.yellowpageItem);
    }

    ret.write(", ");
    ret.write("oaItem:");
    if (this.oaItem == null) {
      ret.write("null");
    } else {
      ret.write(this.oaItem);
    }

    ret.write(", ");
    ret.write("geoAddressItem:");
    if (this.geoAddressItem == null) {
      ret.write("null");
    } else {
      ret.write(this.geoAddressItem);
    }

    ret.write(", ");
    ret.write("shortcutItem:");
    if (this.shortcutItem == null) {
      ret.write("null");
    } else {
      ret.write(this.shortcutItem);
    }

    ret.write(", ");
    ret.write("squareItem:");
    if (this.squareItem == null) {
      ret.write("null");
    } else {
      ret.write(this.squareItem);
    }

    ret.write(", ");
    ret.write("squareCategoryItem:");
    if (this.squareCategoryItem == null) {
      ret.write("null");
    } else {
      ret.write(this.squareCategoryItem);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

