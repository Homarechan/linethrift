/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.register_with_phone_number_result;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class RegisterWithPhoneNumberResult implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("RegisterWithPhoneNumberResult");
  static final TField _AUTH_TOKEN_FIELD_DESC = new TField("authToken", TType.STRING, 1);
  static final TField _RECOMMEND_EMAIL_REGISTRATION_FIELD_DESC = new TField("recommendEmailRegistration", TType.BOOL, 2);
  static final TField _CERTIFICATE_FIELD_DESC = new TField("certificate", TType.STRING, 3);

  String _authToken;
  static const int AUTHTOKEN = 1;
  bool _recommendEmailRegistration = false;
  static const int RECOMMENDEMAILREGISTRATION = 2;
  String _certificate;
  static const int CERTIFICATE = 3;

  bool __isset_recommendEmailRegistration = false;

  RegisterWithPhoneNumberResult() {
  }

  // authToken
  String get authToken => this._authToken;

  set authToken(String authToken) {
    this._authToken = authToken;
  }

  bool isSetAuthToken() => this.authToken != null;

  unsetAuthToken() {
    this.authToken = null;
  }

  // recommendEmailRegistration
  bool get recommendEmailRegistration => this._recommendEmailRegistration;

  set recommendEmailRegistration(bool recommendEmailRegistration) {
    this._recommendEmailRegistration = recommendEmailRegistration;
    this.__isset_recommendEmailRegistration = true;
  }

  bool isSetRecommendEmailRegistration() => this.__isset_recommendEmailRegistration;

  unsetRecommendEmailRegistration() {
    this.__isset_recommendEmailRegistration = false;
  }

  // certificate
  String get certificate => this._certificate;

  set certificate(String certificate) {
    this._certificate = certificate;
  }

  bool isSetCertificate() => this.certificate != null;

  unsetCertificate() {
    this.certificate = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case AUTHTOKEN:
        return this.authToken;
      case RECOMMENDEMAILREGISTRATION:
        return this.recommendEmailRegistration;
      case CERTIFICATE:
        return this.certificate;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case AUTHTOKEN:
        if (value == null) {
          unsetAuthToken();
        } else {
          this.authToken = value;
        }
        break;

      case RECOMMENDEMAILREGISTRATION:
        if (value == null) {
          unsetRecommendEmailRegistration();
        } else {
          this.recommendEmailRegistration = value;
        }
        break;

      case CERTIFICATE:
        if (value == null) {
          unsetCertificate();
        } else {
          this.certificate = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case AUTHTOKEN:
        return isSetAuthToken();
      case RECOMMENDEMAILREGISTRATION:
        return isSetRecommendEmailRegistration();
      case CERTIFICATE:
        return isSetCertificate();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case AUTHTOKEN:
          if (field.type == TType.STRING) {
            this.authToken = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RECOMMENDEMAILREGISTRATION:
          if (field.type == TType.BOOL) {
            this.recommendEmailRegistration = iprot.readBool();
            this.__isset_recommendEmailRegistration = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CERTIFICATE:
          if (field.type == TType.STRING) {
            this.certificate = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.authToken != null) {
      oprot.writeFieldBegin(_AUTH_TOKEN_FIELD_DESC);
      oprot.writeString(this.authToken);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_RECOMMEND_EMAIL_REGISTRATION_FIELD_DESC);
    oprot.writeBool(this.recommendEmailRegistration);
    oprot.writeFieldEnd();
    if (this.certificate != null) {
      oprot.writeFieldBegin(_CERTIFICATE_FIELD_DESC);
      oprot.writeString(this.certificate);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("RegisterWithPhoneNumberResult(");

    ret.write("authToken:");
    if (this.authToken == null) {
      ret.write("null");
    } else {
      ret.write(this.authToken);
    }

    ret.write(", ");
    ret.write("recommendEmailRegistration:");
    ret.write(this.recommendEmailRegistration);

    ret.write(", ");
    ret.write("certificate:");
    if (this.certificate == null) {
      ret.write("null");
    } else {
      ret.write(this.certificate);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

