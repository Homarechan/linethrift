/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.get_joined_squares_response;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class GetJoinedSquaresResponse implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("GetJoinedSquaresResponse");
  static final TField _SQUARES_FIELD_DESC = new TField("squares", TType.LIST, 1);
  static final TField _MEMBERS_FIELD_DESC = new TField("members", TType.MAP, 2);
  static final TField _AUTHORITIES_FIELD_DESC = new TField("authorities", TType.MAP, 3);
  static final TField _STATUSES_FIELD_DESC = new TField("statuses", TType.MAP, 4);
  static final TField _CONTINUATION_TOKEN_FIELD_DESC = new TField("continuationToken", TType.STRING, 5);
  static final TField _NOTE_STATUSES_FIELD_DESC = new TField("noteStatuses", TType.MAP, 6);

  List<Square> _squares;
  static const int SQUARES = 1;
  Map<String, SquareMember> _members;
  static const int MEMBERS = 2;
  Map<String, SquareAuthority> _authorities;
  static const int AUTHORITIES = 3;
  Map<String, SquareStatus> _statuses;
  static const int STATUSES = 4;
  String _continuationToken;
  static const int CONTINUATIONTOKEN = 5;
  Map<String, NoteStatus> _noteStatuses;
  static const int NOTESTATUSES = 6;


  GetJoinedSquaresResponse() {
  }

  // squares
  List<Square> get squares => this._squares;

  set squares(List<Square> squares) {
    this._squares = squares;
  }

  bool isSetSquares() => this.squares != null;

  unsetSquares() {
    this.squares = null;
  }

  // members
  Map<String, SquareMember> get members => this._members;

  set members(Map<String, SquareMember> members) {
    this._members = members;
  }

  bool isSetMembers() => this.members != null;

  unsetMembers() {
    this.members = null;
  }

  // authorities
  Map<String, SquareAuthority> get authorities => this._authorities;

  set authorities(Map<String, SquareAuthority> authorities) {
    this._authorities = authorities;
  }

  bool isSetAuthorities() => this.authorities != null;

  unsetAuthorities() {
    this.authorities = null;
  }

  // statuses
  Map<String, SquareStatus> get statuses => this._statuses;

  set statuses(Map<String, SquareStatus> statuses) {
    this._statuses = statuses;
  }

  bool isSetStatuses() => this.statuses != null;

  unsetStatuses() {
    this.statuses = null;
  }

  // continuationToken
  String get continuationToken => this._continuationToken;

  set continuationToken(String continuationToken) {
    this._continuationToken = continuationToken;
  }

  bool isSetContinuationToken() => this.continuationToken != null;

  unsetContinuationToken() {
    this.continuationToken = null;
  }

  // noteStatuses
  Map<String, NoteStatus> get noteStatuses => this._noteStatuses;

  set noteStatuses(Map<String, NoteStatus> noteStatuses) {
    this._noteStatuses = noteStatuses;
  }

  bool isSetNoteStatuses() => this.noteStatuses != null;

  unsetNoteStatuses() {
    this.noteStatuses = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SQUARES:
        return this.squares;
      case MEMBERS:
        return this.members;
      case AUTHORITIES:
        return this.authorities;
      case STATUSES:
        return this.statuses;
      case CONTINUATIONTOKEN:
        return this.continuationToken;
      case NOTESTATUSES:
        return this.noteStatuses;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SQUARES:
        if (value == null) {
          unsetSquares();
        } else {
          this.squares = value;
        }
        break;

      case MEMBERS:
        if (value == null) {
          unsetMembers();
        } else {
          this.members = value;
        }
        break;

      case AUTHORITIES:
        if (value == null) {
          unsetAuthorities();
        } else {
          this.authorities = value;
        }
        break;

      case STATUSES:
        if (value == null) {
          unsetStatuses();
        } else {
          this.statuses = value;
        }
        break;

      case CONTINUATIONTOKEN:
        if (value == null) {
          unsetContinuationToken();
        } else {
          this.continuationToken = value;
        }
        break;

      case NOTESTATUSES:
        if (value == null) {
          unsetNoteStatuses();
        } else {
          this.noteStatuses = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SQUARES:
        return isSetSquares();
      case MEMBERS:
        return isSetMembers();
      case AUTHORITIES:
        return isSetAuthorities();
      case STATUSES:
        return isSetStatuses();
      case CONTINUATIONTOKEN:
        return isSetContinuationToken();
      case NOTESTATUSES:
        return isSetNoteStatuses();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SQUARES:
          if (field.type == TType.LIST) {
            {
              TList _list308 = iprot.readListBegin();
              this.squares = new List<Square>();
              for (int _i309 = 0; _i309 < _list308.length; ++_i309) {
                Square _elem310;
                _elem310 = new Square();
                _elem310.read(iprot);
                this.squares.add(_elem310);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MEMBERS:
          if (field.type == TType.MAP) {
            {
              TMap _map311 = iprot.readMapBegin();
              this.members = new Map<String, SquareMember>();
              for (int _i312 = 0; _i312 < _map311.length; ++_i312) {
                String _key313;
                SquareMember _val314;
                _key313 = iprot.readString();
                _val314 = new SquareMember();
                _val314.read(iprot);
                this.members[_key313] = _val314;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AUTHORITIES:
          if (field.type == TType.MAP) {
            {
              TMap _map315 = iprot.readMapBegin();
              this.authorities = new Map<String, SquareAuthority>();
              for (int _i316 = 0; _i316 < _map315.length; ++_i316) {
                String _key317;
                SquareAuthority _val318;
                _key317 = iprot.readString();
                _val318 = new SquareAuthority();
                _val318.read(iprot);
                this.authorities[_key317] = _val318;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STATUSES:
          if (field.type == TType.MAP) {
            {
              TMap _map319 = iprot.readMapBegin();
              this.statuses = new Map<String, SquareStatus>();
              for (int _i320 = 0; _i320 < _map319.length; ++_i320) {
                String _key321;
                SquareStatus _val322;
                _key321 = iprot.readString();
                _val322 = new SquareStatus();
                _val322.read(iprot);
                this.statuses[_key321] = _val322;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CONTINUATIONTOKEN:
          if (field.type == TType.STRING) {
            this.continuationToken = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NOTESTATUSES:
          if (field.type == TType.MAP) {
            {
              TMap _map323 = iprot.readMapBegin();
              this.noteStatuses = new Map<String, NoteStatus>();
              for (int _i324 = 0; _i324 < _map323.length; ++_i324) {
                String _key325;
                NoteStatus _val326;
                _key325 = iprot.readString();
                _val326 = new NoteStatus();
                _val326.read(iprot);
                this.noteStatuses[_key325] = _val326;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.squares != null) {
      oprot.writeFieldBegin(_SQUARES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.squares.length));
        for (var elem327 in this.squares) {
          elem327.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.members != null) {
      oprot.writeFieldBegin(_MEMBERS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.members.length));
        for (var elem329 in this.members.keys) {
          oprot.writeString(elem329);
          this.members[elem329].write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.authorities != null) {
      oprot.writeFieldBegin(_AUTHORITIES_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.authorities.length));
        for (var elem331 in this.authorities.keys) {
          oprot.writeString(elem331);
          this.authorities[elem331].write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.statuses != null) {
      oprot.writeFieldBegin(_STATUSES_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.statuses.length));
        for (var elem333 in this.statuses.keys) {
          oprot.writeString(elem333);
          this.statuses[elem333].write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.continuationToken != null) {
      oprot.writeFieldBegin(_CONTINUATION_TOKEN_FIELD_DESC);
      oprot.writeString(this.continuationToken);
      oprot.writeFieldEnd();
    }
    if (this.noteStatuses != null) {
      oprot.writeFieldBegin(_NOTE_STATUSES_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.noteStatuses.length));
        for (var elem335 in this.noteStatuses.keys) {
          oprot.writeString(elem335);
          this.noteStatuses[elem335].write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("GetJoinedSquaresResponse(");

    ret.write("squares:");
    if (this.squares == null) {
      ret.write("null");
    } else {
      ret.write(this.squares);
    }

    ret.write(", ");
    ret.write("members:");
    if (this.members == null) {
      ret.write("null");
    } else {
      ret.write(this.members);
    }

    ret.write(", ");
    ret.write("authorities:");
    if (this.authorities == null) {
      ret.write("null");
    } else {
      ret.write(this.authorities);
    }

    ret.write(", ");
    ret.write("statuses:");
    if (this.statuses == null) {
      ret.write("null");
    } else {
      ret.write(this.statuses);
    }

    ret.write(", ");
    ret.write("continuationToken:");
    if (this.continuationToken == null) {
      ret.write("null");
    } else {
      ret.write(this.continuationToken);
    }

    ret.write(", ");
    ret.write("noteStatuses:");
    if (this.noteStatuses == null) {
      ret.write("null");
    } else {
      ret.write(this.noteStatuses);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

