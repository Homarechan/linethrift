/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.spot_nearby_item;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class SpotNearbyItem implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("SpotNearbyItem");
  static final TField _SPOT_ITEM_FIELD_DESC = new TField("spotItem", TType.STRUCT, 2);
  static final TField _LOCATION_FIELD_DESC = new TField("location", TType.STRUCT, 11);

  SpotItem _spotItem;
  static const int SPOTITEM = 2;
  Location _location;
  static const int LOCATION = 11;


  SpotNearbyItem() {
  }

  // spotItem
  SpotItem get spotItem => this._spotItem;

  set spotItem(SpotItem spotItem) {
    this._spotItem = spotItem;
  }

  bool isSetSpotItem() => this.spotItem != null;

  unsetSpotItem() {
    this.spotItem = null;
  }

  // location
  Location get location => this._location;

  set location(Location location) {
    this._location = location;
  }

  bool isSetLocation() => this.location != null;

  unsetLocation() {
    this.location = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SPOTITEM:
        return this.spotItem;
      case LOCATION:
        return this.location;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SPOTITEM:
        if (value == null) {
          unsetSpotItem();
        } else {
          this.spotItem = value;
        }
        break;

      case LOCATION:
        if (value == null) {
          unsetLocation();
        } else {
          this.location = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SPOTITEM:
        return isSetSpotItem();
      case LOCATION:
        return isSetLocation();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SPOTITEM:
          if (field.type == TType.STRUCT) {
            this.spotItem = new SpotItem();
            this.spotItem.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LOCATION:
          if (field.type == TType.STRUCT) {
            this.location = new Location();
            this.location.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.spotItem != null) {
      oprot.writeFieldBegin(_SPOT_ITEM_FIELD_DESC);
      this.spotItem.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.location != null) {
      oprot.writeFieldBegin(_LOCATION_FIELD_DESC);
      this.location.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("SpotNearbyItem(");

    ret.write("spotItem:");
    if (this.spotItem == null) {
      ret.write("null");
    } else {
      ret.write(this.spotItem);
    }

    ret.write(", ");
    ret.write("location:");
    if (this.location == null) {
      ret.write("null");
    } else {
      ret.write(this.location);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

