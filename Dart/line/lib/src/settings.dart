/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.settings;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class Settings implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("Settings");
  static final TField _NOTIFICATION_ENABLE_FIELD_DESC = new TField("notificationEnable", TType.BOOL, 10);
  static final TField _NOTIFICATION_MUTE_EXPIRATION_FIELD_DESC = new TField("notificationMuteExpiration", TType.I64, 11);
  static final TField _NOTIFICATION_NEW_MESSAGE_FIELD_DESC = new TField("notificationNewMessage", TType.BOOL, 12);
  static final TField _NOTIFICATION_GROUP_INVITATION_FIELD_DESC = new TField("notificationGroupInvitation", TType.BOOL, 13);
  static final TField _NOTIFICATION_SHOW_MESSAGE_FIELD_DESC = new TField("notificationShowMessage", TType.BOOL, 14);
  static final TField _NOTIFICATION_INCOMING_CALL_FIELD_DESC = new TField("notificationIncomingCall", TType.BOOL, 15);
  static final TField _NOTIFICATION_SOUND_MESSAGE_FIELD_DESC = new TField("notificationSoundMessage", TType.STRING, 16);
  static final TField _NOTIFICATION_SOUND_GROUP_FIELD_DESC = new TField("notificationSoundGroup", TType.STRING, 17);
  static final TField _NOTIFICATION_DISABLED_WITH_SUB_FIELD_DESC = new TField("notificationDisabledWithSub", TType.BOOL, 18);
  static final TField _PRIVACY_SYNC_CONTACTS_FIELD_DESC = new TField("privacySyncContacts", TType.BOOL, 20);
  static final TField _PRIVACY_SEARCH_BY_PHONE_NUMBER_FIELD_DESC = new TField("privacySearchByPhoneNumber", TType.BOOL, 21);
  static final TField _PRIVACY_SEARCH_BY_USERID_FIELD_DESC = new TField("privacySearchByUserid", TType.BOOL, 22);
  static final TField _PRIVACY_SEARCH_BY_EMAIL_FIELD_DESC = new TField("privacySearchByEmail", TType.BOOL, 23);
  static final TField _PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN_FIELD_DESC = new TField("privacyAllowSecondaryDeviceLogin", TType.BOOL, 24);
  static final TField _PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME_FIELD_DESC = new TField("privacyProfileImagePostToMyhome", TType.BOOL, 25);
  static final TField _PRIVACY_RECEIVE_MESSAGES_FROM_NOT_FRIEND_FIELD_DESC = new TField("privacyReceiveMessagesFromNotFriend", TType.BOOL, 26);
  static final TField _CONTACT_MY_TICKET_FIELD_DESC = new TField("contactMyTicket", TType.STRING, 30);
  static final TField _IDENTITY_PROVIDER_FIELD_DESC = new TField("identityProvider", TType.I32, 40);
  static final TField _IDENTITY_IDENTIFIER_FIELD_DESC = new TField("identityIdentifier", TType.STRING, 41);
  static final TField _SNS_ACCOUNTS_FIELD_DESC = new TField("snsAccounts", TType.MAP, 42);
  static final TField _PHONE_REGISTRATION_FIELD_DESC = new TField("phoneRegistration", TType.BOOL, 43);
  static final TField _EMAIL_CONFIRMATION_STATUS_FIELD_DESC = new TField("emailConfirmationStatus", TType.I32, 44);
  static final TField _PREFERENCE_LOCALE_FIELD_DESC = new TField("preferenceLocale", TType.STRING, 50);
  static final TField _CUSTOM_MODES_FIELD_DESC = new TField("customModes", TType.MAP, 60);
  static final TField _E2EE_ENABLE_FIELD_DESC = new TField("e2eeEnable", TType.BOOL, 61);
  static final TField _HITOKOTO_BACKUP_REQUESTED_FIELD_DESC = new TField("hitokotoBackupRequested", TType.BOOL, 62);
  static final TField _PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME_FIELD_DESC = new TField("privacyProfileMusicPostToMyhome", TType.BOOL, 63);
  static final TField _PRIVACY_ALLOW_NEARBY_FIELD_DESC = new TField("privacyAllowNearby", TType.BOOL, 65);
  static final TField _AGREEMENT_NEARBY_TIME_FIELD_DESC = new TField("agreementNearbyTime", TType.I64, 66);
  static final TField _AGREEMENT_SQUARE_TIME_FIELD_DESC = new TField("agreementSquareTime", TType.I64, 67);
  static final TField _NOTIFICATION_MENTION_FIELD_DESC = new TField("notificationMention", TType.BOOL, 68);
  static final TField _BOT_USE_AGREEMENT_ACCEPTED_AT_FIELD_DESC = new TField("botUseAgreementAcceptedAt", TType.I64, 69);

  bool _notificationEnable = false;
  static const int NOTIFICATIONENABLE = 10;
  int _notificationMuteExpiration = 0;
  static const int NOTIFICATIONMUTEEXPIRATION = 11;
  bool _notificationNewMessage = false;
  static const int NOTIFICATIONNEWMESSAGE = 12;
  bool _notificationGroupInvitation = false;
  static const int NOTIFICATIONGROUPINVITATION = 13;
  bool _notificationShowMessage = false;
  static const int NOTIFICATIONSHOWMESSAGE = 14;
  bool _notificationIncomingCall = false;
  static const int NOTIFICATIONINCOMINGCALL = 15;
  String _notificationSoundMessage;
  static const int NOTIFICATIONSOUNDMESSAGE = 16;
  String _notificationSoundGroup;
  static const int NOTIFICATIONSOUNDGROUP = 17;
  bool _notificationDisabledWithSub = false;
  static const int NOTIFICATIONDISABLEDWITHSUB = 18;
  bool _privacySyncContacts = false;
  static const int PRIVACYSYNCCONTACTS = 20;
  bool _privacySearchByPhoneNumber = false;
  static const int PRIVACYSEARCHBYPHONENUMBER = 21;
  bool _privacySearchByUserid = false;
  static const int PRIVACYSEARCHBYUSERID = 22;
  bool _privacySearchByEmail = false;
  static const int PRIVACYSEARCHBYEMAIL = 23;
  bool _privacyAllowSecondaryDeviceLogin = false;
  static const int PRIVACYALLOWSECONDARYDEVICELOGIN = 24;
  bool _privacyProfileImagePostToMyhome = false;
  static const int PRIVACYPROFILEIMAGEPOSTTOMYHOME = 25;
  bool _privacyReceiveMessagesFromNotFriend = false;
  static const int PRIVACYRECEIVEMESSAGESFROMNOTFRIEND = 26;
  String _contactMyTicket;
  static const int CONTACTMYTICKET = 30;
  int _identityProvider;
  static const int IDENTITYPROVIDER = 40;
  String _identityIdentifier;
  static const int IDENTITYIDENTIFIER = 41;
  Map<int, String> _snsAccounts;
  static const int SNSACCOUNTS = 42;
  bool _phoneRegistration = false;
  static const int PHONEREGISTRATION = 43;
  int _emailConfirmationStatus;
  static const int EMAILCONFIRMATIONSTATUS = 44;
  String _preferenceLocale;
  static const int PREFERENCELOCALE = 50;
  Map<int, String> _customModes;
  static const int CUSTOMMODES = 60;
  bool _e2eeEnable = false;
  static const int E2EEENABLE = 61;
  bool _hitokotoBackupRequested = false;
  static const int HITOKOTOBACKUPREQUESTED = 62;
  bool _privacyProfileMusicPostToMyhome = false;
  static const int PRIVACYPROFILEMUSICPOSTTOMYHOME = 63;
  bool _privacyAllowNearby = false;
  static const int PRIVACYALLOWNEARBY = 65;
  int _agreementNearbyTime = 0;
  static const int AGREEMENTNEARBYTIME = 66;
  int _agreementSquareTime = 0;
  static const int AGREEMENTSQUARETIME = 67;
  bool _notificationMention = false;
  static const int NOTIFICATIONMENTION = 68;
  int _botUseAgreementAcceptedAt = 0;
  static const int BOTUSEAGREEMENTACCEPTEDAT = 69;

  bool __isset_notificationEnable = false;
  bool __isset_notificationMuteExpiration = false;
  bool __isset_notificationNewMessage = false;
  bool __isset_notificationGroupInvitation = false;
  bool __isset_notificationShowMessage = false;
  bool __isset_notificationIncomingCall = false;
  bool __isset_notificationDisabledWithSub = false;
  bool __isset_privacySyncContacts = false;
  bool __isset_privacySearchByPhoneNumber = false;
  bool __isset_privacySearchByUserid = false;
  bool __isset_privacySearchByEmail = false;
  bool __isset_privacyAllowSecondaryDeviceLogin = false;
  bool __isset_privacyProfileImagePostToMyhome = false;
  bool __isset_privacyReceiveMessagesFromNotFriend = false;
  bool __isset_identityProvider = false;
  bool __isset_phoneRegistration = false;
  bool __isset_emailConfirmationStatus = false;
  bool __isset_e2eeEnable = false;
  bool __isset_hitokotoBackupRequested = false;
  bool __isset_privacyProfileMusicPostToMyhome = false;
  bool __isset_privacyAllowNearby = false;
  bool __isset_agreementNearbyTime = false;
  bool __isset_agreementSquareTime = false;
  bool __isset_notificationMention = false;
  bool __isset_botUseAgreementAcceptedAt = false;

  Settings() {
  }

  // notificationEnable
  bool get notificationEnable => this._notificationEnable;

  set notificationEnable(bool notificationEnable) {
    this._notificationEnable = notificationEnable;
    this.__isset_notificationEnable = true;
  }

  bool isSetNotificationEnable() => this.__isset_notificationEnable;

  unsetNotificationEnable() {
    this.__isset_notificationEnable = false;
  }

  // notificationMuteExpiration
  int get notificationMuteExpiration => this._notificationMuteExpiration;

  set notificationMuteExpiration(int notificationMuteExpiration) {
    this._notificationMuteExpiration = notificationMuteExpiration;
    this.__isset_notificationMuteExpiration = true;
  }

  bool isSetNotificationMuteExpiration() => this.__isset_notificationMuteExpiration;

  unsetNotificationMuteExpiration() {
    this.__isset_notificationMuteExpiration = false;
  }

  // notificationNewMessage
  bool get notificationNewMessage => this._notificationNewMessage;

  set notificationNewMessage(bool notificationNewMessage) {
    this._notificationNewMessage = notificationNewMessage;
    this.__isset_notificationNewMessage = true;
  }

  bool isSetNotificationNewMessage() => this.__isset_notificationNewMessage;

  unsetNotificationNewMessage() {
    this.__isset_notificationNewMessage = false;
  }

  // notificationGroupInvitation
  bool get notificationGroupInvitation => this._notificationGroupInvitation;

  set notificationGroupInvitation(bool notificationGroupInvitation) {
    this._notificationGroupInvitation = notificationGroupInvitation;
    this.__isset_notificationGroupInvitation = true;
  }

  bool isSetNotificationGroupInvitation() => this.__isset_notificationGroupInvitation;

  unsetNotificationGroupInvitation() {
    this.__isset_notificationGroupInvitation = false;
  }

  // notificationShowMessage
  bool get notificationShowMessage => this._notificationShowMessage;

  set notificationShowMessage(bool notificationShowMessage) {
    this._notificationShowMessage = notificationShowMessage;
    this.__isset_notificationShowMessage = true;
  }

  bool isSetNotificationShowMessage() => this.__isset_notificationShowMessage;

  unsetNotificationShowMessage() {
    this.__isset_notificationShowMessage = false;
  }

  // notificationIncomingCall
  bool get notificationIncomingCall => this._notificationIncomingCall;

  set notificationIncomingCall(bool notificationIncomingCall) {
    this._notificationIncomingCall = notificationIncomingCall;
    this.__isset_notificationIncomingCall = true;
  }

  bool isSetNotificationIncomingCall() => this.__isset_notificationIncomingCall;

  unsetNotificationIncomingCall() {
    this.__isset_notificationIncomingCall = false;
  }

  // notificationSoundMessage
  String get notificationSoundMessage => this._notificationSoundMessage;

  set notificationSoundMessage(String notificationSoundMessage) {
    this._notificationSoundMessage = notificationSoundMessage;
  }

  bool isSetNotificationSoundMessage() => this.notificationSoundMessage != null;

  unsetNotificationSoundMessage() {
    this.notificationSoundMessage = null;
  }

  // notificationSoundGroup
  String get notificationSoundGroup => this._notificationSoundGroup;

  set notificationSoundGroup(String notificationSoundGroup) {
    this._notificationSoundGroup = notificationSoundGroup;
  }

  bool isSetNotificationSoundGroup() => this.notificationSoundGroup != null;

  unsetNotificationSoundGroup() {
    this.notificationSoundGroup = null;
  }

  // notificationDisabledWithSub
  bool get notificationDisabledWithSub => this._notificationDisabledWithSub;

  set notificationDisabledWithSub(bool notificationDisabledWithSub) {
    this._notificationDisabledWithSub = notificationDisabledWithSub;
    this.__isset_notificationDisabledWithSub = true;
  }

  bool isSetNotificationDisabledWithSub() => this.__isset_notificationDisabledWithSub;

  unsetNotificationDisabledWithSub() {
    this.__isset_notificationDisabledWithSub = false;
  }

  // privacySyncContacts
  bool get privacySyncContacts => this._privacySyncContacts;

  set privacySyncContacts(bool privacySyncContacts) {
    this._privacySyncContacts = privacySyncContacts;
    this.__isset_privacySyncContacts = true;
  }

  bool isSetPrivacySyncContacts() => this.__isset_privacySyncContacts;

  unsetPrivacySyncContacts() {
    this.__isset_privacySyncContacts = false;
  }

  // privacySearchByPhoneNumber
  bool get privacySearchByPhoneNumber => this._privacySearchByPhoneNumber;

  set privacySearchByPhoneNumber(bool privacySearchByPhoneNumber) {
    this._privacySearchByPhoneNumber = privacySearchByPhoneNumber;
    this.__isset_privacySearchByPhoneNumber = true;
  }

  bool isSetPrivacySearchByPhoneNumber() => this.__isset_privacySearchByPhoneNumber;

  unsetPrivacySearchByPhoneNumber() {
    this.__isset_privacySearchByPhoneNumber = false;
  }

  // privacySearchByUserid
  bool get privacySearchByUserid => this._privacySearchByUserid;

  set privacySearchByUserid(bool privacySearchByUserid) {
    this._privacySearchByUserid = privacySearchByUserid;
    this.__isset_privacySearchByUserid = true;
  }

  bool isSetPrivacySearchByUserid() => this.__isset_privacySearchByUserid;

  unsetPrivacySearchByUserid() {
    this.__isset_privacySearchByUserid = false;
  }

  // privacySearchByEmail
  bool get privacySearchByEmail => this._privacySearchByEmail;

  set privacySearchByEmail(bool privacySearchByEmail) {
    this._privacySearchByEmail = privacySearchByEmail;
    this.__isset_privacySearchByEmail = true;
  }

  bool isSetPrivacySearchByEmail() => this.__isset_privacySearchByEmail;

  unsetPrivacySearchByEmail() {
    this.__isset_privacySearchByEmail = false;
  }

  // privacyAllowSecondaryDeviceLogin
  bool get privacyAllowSecondaryDeviceLogin => this._privacyAllowSecondaryDeviceLogin;

  set privacyAllowSecondaryDeviceLogin(bool privacyAllowSecondaryDeviceLogin) {
    this._privacyAllowSecondaryDeviceLogin = privacyAllowSecondaryDeviceLogin;
    this.__isset_privacyAllowSecondaryDeviceLogin = true;
  }

  bool isSetPrivacyAllowSecondaryDeviceLogin() => this.__isset_privacyAllowSecondaryDeviceLogin;

  unsetPrivacyAllowSecondaryDeviceLogin() {
    this.__isset_privacyAllowSecondaryDeviceLogin = false;
  }

  // privacyProfileImagePostToMyhome
  bool get privacyProfileImagePostToMyhome => this._privacyProfileImagePostToMyhome;

  set privacyProfileImagePostToMyhome(bool privacyProfileImagePostToMyhome) {
    this._privacyProfileImagePostToMyhome = privacyProfileImagePostToMyhome;
    this.__isset_privacyProfileImagePostToMyhome = true;
  }

  bool isSetPrivacyProfileImagePostToMyhome() => this.__isset_privacyProfileImagePostToMyhome;

  unsetPrivacyProfileImagePostToMyhome() {
    this.__isset_privacyProfileImagePostToMyhome = false;
  }

  // privacyReceiveMessagesFromNotFriend
  bool get privacyReceiveMessagesFromNotFriend => this._privacyReceiveMessagesFromNotFriend;

  set privacyReceiveMessagesFromNotFriend(bool privacyReceiveMessagesFromNotFriend) {
    this._privacyReceiveMessagesFromNotFriend = privacyReceiveMessagesFromNotFriend;
    this.__isset_privacyReceiveMessagesFromNotFriend = true;
  }

  bool isSetPrivacyReceiveMessagesFromNotFriend() => this.__isset_privacyReceiveMessagesFromNotFriend;

  unsetPrivacyReceiveMessagesFromNotFriend() {
    this.__isset_privacyReceiveMessagesFromNotFriend = false;
  }

  // contactMyTicket
  String get contactMyTicket => this._contactMyTicket;

  set contactMyTicket(String contactMyTicket) {
    this._contactMyTicket = contactMyTicket;
  }

  bool isSetContactMyTicket() => this.contactMyTicket != null;

  unsetContactMyTicket() {
    this.contactMyTicket = null;
  }

  // identityProvider
  int get identityProvider => this._identityProvider;

  set identityProvider(int identityProvider) {
    this._identityProvider = identityProvider;
    this.__isset_identityProvider = true;
  }

  bool isSetIdentityProvider() => this.__isset_identityProvider;

  unsetIdentityProvider() {
    this.__isset_identityProvider = false;
  }

  // identityIdentifier
  String get identityIdentifier => this._identityIdentifier;

  set identityIdentifier(String identityIdentifier) {
    this._identityIdentifier = identityIdentifier;
  }

  bool isSetIdentityIdentifier() => this.identityIdentifier != null;

  unsetIdentityIdentifier() {
    this.identityIdentifier = null;
  }

  // snsAccounts
  Map<int, String> get snsAccounts => this._snsAccounts;

  set snsAccounts(Map<int, String> snsAccounts) {
    this._snsAccounts = snsAccounts;
  }

  bool isSetSnsAccounts() => this.snsAccounts != null;

  unsetSnsAccounts() {
    this.snsAccounts = null;
  }

  // phoneRegistration
  bool get phoneRegistration => this._phoneRegistration;

  set phoneRegistration(bool phoneRegistration) {
    this._phoneRegistration = phoneRegistration;
    this.__isset_phoneRegistration = true;
  }

  bool isSetPhoneRegistration() => this.__isset_phoneRegistration;

  unsetPhoneRegistration() {
    this.__isset_phoneRegistration = false;
  }

  // emailConfirmationStatus
  int get emailConfirmationStatus => this._emailConfirmationStatus;

  set emailConfirmationStatus(int emailConfirmationStatus) {
    this._emailConfirmationStatus = emailConfirmationStatus;
    this.__isset_emailConfirmationStatus = true;
  }

  bool isSetEmailConfirmationStatus() => this.__isset_emailConfirmationStatus;

  unsetEmailConfirmationStatus() {
    this.__isset_emailConfirmationStatus = false;
  }

  // preferenceLocale
  String get preferenceLocale => this._preferenceLocale;

  set preferenceLocale(String preferenceLocale) {
    this._preferenceLocale = preferenceLocale;
  }

  bool isSetPreferenceLocale() => this.preferenceLocale != null;

  unsetPreferenceLocale() {
    this.preferenceLocale = null;
  }

  // customModes
  Map<int, String> get customModes => this._customModes;

  set customModes(Map<int, String> customModes) {
    this._customModes = customModes;
  }

  bool isSetCustomModes() => this.customModes != null;

  unsetCustomModes() {
    this.customModes = null;
  }

  // e2eeEnable
  bool get e2eeEnable => this._e2eeEnable;

  set e2eeEnable(bool e2eeEnable) {
    this._e2eeEnable = e2eeEnable;
    this.__isset_e2eeEnable = true;
  }

  bool isSetE2eeEnable() => this.__isset_e2eeEnable;

  unsetE2eeEnable() {
    this.__isset_e2eeEnable = false;
  }

  // hitokotoBackupRequested
  bool get hitokotoBackupRequested => this._hitokotoBackupRequested;

  set hitokotoBackupRequested(bool hitokotoBackupRequested) {
    this._hitokotoBackupRequested = hitokotoBackupRequested;
    this.__isset_hitokotoBackupRequested = true;
  }

  bool isSetHitokotoBackupRequested() => this.__isset_hitokotoBackupRequested;

  unsetHitokotoBackupRequested() {
    this.__isset_hitokotoBackupRequested = false;
  }

  // privacyProfileMusicPostToMyhome
  bool get privacyProfileMusicPostToMyhome => this._privacyProfileMusicPostToMyhome;

  set privacyProfileMusicPostToMyhome(bool privacyProfileMusicPostToMyhome) {
    this._privacyProfileMusicPostToMyhome = privacyProfileMusicPostToMyhome;
    this.__isset_privacyProfileMusicPostToMyhome = true;
  }

  bool isSetPrivacyProfileMusicPostToMyhome() => this.__isset_privacyProfileMusicPostToMyhome;

  unsetPrivacyProfileMusicPostToMyhome() {
    this.__isset_privacyProfileMusicPostToMyhome = false;
  }

  // privacyAllowNearby
  bool get privacyAllowNearby => this._privacyAllowNearby;

  set privacyAllowNearby(bool privacyAllowNearby) {
    this._privacyAllowNearby = privacyAllowNearby;
    this.__isset_privacyAllowNearby = true;
  }

  bool isSetPrivacyAllowNearby() => this.__isset_privacyAllowNearby;

  unsetPrivacyAllowNearby() {
    this.__isset_privacyAllowNearby = false;
  }

  // agreementNearbyTime
  int get agreementNearbyTime => this._agreementNearbyTime;

  set agreementNearbyTime(int agreementNearbyTime) {
    this._agreementNearbyTime = agreementNearbyTime;
    this.__isset_agreementNearbyTime = true;
  }

  bool isSetAgreementNearbyTime() => this.__isset_agreementNearbyTime;

  unsetAgreementNearbyTime() {
    this.__isset_agreementNearbyTime = false;
  }

  // agreementSquareTime
  int get agreementSquareTime => this._agreementSquareTime;

  set agreementSquareTime(int agreementSquareTime) {
    this._agreementSquareTime = agreementSquareTime;
    this.__isset_agreementSquareTime = true;
  }

  bool isSetAgreementSquareTime() => this.__isset_agreementSquareTime;

  unsetAgreementSquareTime() {
    this.__isset_agreementSquareTime = false;
  }

  // notificationMention
  bool get notificationMention => this._notificationMention;

  set notificationMention(bool notificationMention) {
    this._notificationMention = notificationMention;
    this.__isset_notificationMention = true;
  }

  bool isSetNotificationMention() => this.__isset_notificationMention;

  unsetNotificationMention() {
    this.__isset_notificationMention = false;
  }

  // botUseAgreementAcceptedAt
  int get botUseAgreementAcceptedAt => this._botUseAgreementAcceptedAt;

  set botUseAgreementAcceptedAt(int botUseAgreementAcceptedAt) {
    this._botUseAgreementAcceptedAt = botUseAgreementAcceptedAt;
    this.__isset_botUseAgreementAcceptedAt = true;
  }

  bool isSetBotUseAgreementAcceptedAt() => this.__isset_botUseAgreementAcceptedAt;

  unsetBotUseAgreementAcceptedAt() {
    this.__isset_botUseAgreementAcceptedAt = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case NOTIFICATIONENABLE:
        return this.notificationEnable;
      case NOTIFICATIONMUTEEXPIRATION:
        return this.notificationMuteExpiration;
      case NOTIFICATIONNEWMESSAGE:
        return this.notificationNewMessage;
      case NOTIFICATIONGROUPINVITATION:
        return this.notificationGroupInvitation;
      case NOTIFICATIONSHOWMESSAGE:
        return this.notificationShowMessage;
      case NOTIFICATIONINCOMINGCALL:
        return this.notificationIncomingCall;
      case NOTIFICATIONSOUNDMESSAGE:
        return this.notificationSoundMessage;
      case NOTIFICATIONSOUNDGROUP:
        return this.notificationSoundGroup;
      case NOTIFICATIONDISABLEDWITHSUB:
        return this.notificationDisabledWithSub;
      case PRIVACYSYNCCONTACTS:
        return this.privacySyncContacts;
      case PRIVACYSEARCHBYPHONENUMBER:
        return this.privacySearchByPhoneNumber;
      case PRIVACYSEARCHBYUSERID:
        return this.privacySearchByUserid;
      case PRIVACYSEARCHBYEMAIL:
        return this.privacySearchByEmail;
      case PRIVACYALLOWSECONDARYDEVICELOGIN:
        return this.privacyAllowSecondaryDeviceLogin;
      case PRIVACYPROFILEIMAGEPOSTTOMYHOME:
        return this.privacyProfileImagePostToMyhome;
      case PRIVACYRECEIVEMESSAGESFROMNOTFRIEND:
        return this.privacyReceiveMessagesFromNotFriend;
      case CONTACTMYTICKET:
        return this.contactMyTicket;
      case IDENTITYPROVIDER:
        return this.identityProvider;
      case IDENTITYIDENTIFIER:
        return this.identityIdentifier;
      case SNSACCOUNTS:
        return this.snsAccounts;
      case PHONEREGISTRATION:
        return this.phoneRegistration;
      case EMAILCONFIRMATIONSTATUS:
        return this.emailConfirmationStatus;
      case PREFERENCELOCALE:
        return this.preferenceLocale;
      case CUSTOMMODES:
        return this.customModes;
      case E2EEENABLE:
        return this.e2eeEnable;
      case HITOKOTOBACKUPREQUESTED:
        return this.hitokotoBackupRequested;
      case PRIVACYPROFILEMUSICPOSTTOMYHOME:
        return this.privacyProfileMusicPostToMyhome;
      case PRIVACYALLOWNEARBY:
        return this.privacyAllowNearby;
      case AGREEMENTNEARBYTIME:
        return this.agreementNearbyTime;
      case AGREEMENTSQUARETIME:
        return this.agreementSquareTime;
      case NOTIFICATIONMENTION:
        return this.notificationMention;
      case BOTUSEAGREEMENTACCEPTEDAT:
        return this.botUseAgreementAcceptedAt;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case NOTIFICATIONENABLE:
        if (value == null) {
          unsetNotificationEnable();
        } else {
          this.notificationEnable = value;
        }
        break;

      case NOTIFICATIONMUTEEXPIRATION:
        if (value == null) {
          unsetNotificationMuteExpiration();
        } else {
          this.notificationMuteExpiration = value;
        }
        break;

      case NOTIFICATIONNEWMESSAGE:
        if (value == null) {
          unsetNotificationNewMessage();
        } else {
          this.notificationNewMessage = value;
        }
        break;

      case NOTIFICATIONGROUPINVITATION:
        if (value == null) {
          unsetNotificationGroupInvitation();
        } else {
          this.notificationGroupInvitation = value;
        }
        break;

      case NOTIFICATIONSHOWMESSAGE:
        if (value == null) {
          unsetNotificationShowMessage();
        } else {
          this.notificationShowMessage = value;
        }
        break;

      case NOTIFICATIONINCOMINGCALL:
        if (value == null) {
          unsetNotificationIncomingCall();
        } else {
          this.notificationIncomingCall = value;
        }
        break;

      case NOTIFICATIONSOUNDMESSAGE:
        if (value == null) {
          unsetNotificationSoundMessage();
        } else {
          this.notificationSoundMessage = value;
        }
        break;

      case NOTIFICATIONSOUNDGROUP:
        if (value == null) {
          unsetNotificationSoundGroup();
        } else {
          this.notificationSoundGroup = value;
        }
        break;

      case NOTIFICATIONDISABLEDWITHSUB:
        if (value == null) {
          unsetNotificationDisabledWithSub();
        } else {
          this.notificationDisabledWithSub = value;
        }
        break;

      case PRIVACYSYNCCONTACTS:
        if (value == null) {
          unsetPrivacySyncContacts();
        } else {
          this.privacySyncContacts = value;
        }
        break;

      case PRIVACYSEARCHBYPHONENUMBER:
        if (value == null) {
          unsetPrivacySearchByPhoneNumber();
        } else {
          this.privacySearchByPhoneNumber = value;
        }
        break;

      case PRIVACYSEARCHBYUSERID:
        if (value == null) {
          unsetPrivacySearchByUserid();
        } else {
          this.privacySearchByUserid = value;
        }
        break;

      case PRIVACYSEARCHBYEMAIL:
        if (value == null) {
          unsetPrivacySearchByEmail();
        } else {
          this.privacySearchByEmail = value;
        }
        break;

      case PRIVACYALLOWSECONDARYDEVICELOGIN:
        if (value == null) {
          unsetPrivacyAllowSecondaryDeviceLogin();
        } else {
          this.privacyAllowSecondaryDeviceLogin = value;
        }
        break;

      case PRIVACYPROFILEIMAGEPOSTTOMYHOME:
        if (value == null) {
          unsetPrivacyProfileImagePostToMyhome();
        } else {
          this.privacyProfileImagePostToMyhome = value;
        }
        break;

      case PRIVACYRECEIVEMESSAGESFROMNOTFRIEND:
        if (value == null) {
          unsetPrivacyReceiveMessagesFromNotFriend();
        } else {
          this.privacyReceiveMessagesFromNotFriend = value;
        }
        break;

      case CONTACTMYTICKET:
        if (value == null) {
          unsetContactMyTicket();
        } else {
          this.contactMyTicket = value;
        }
        break;

      case IDENTITYPROVIDER:
        if (value == null) {
          unsetIdentityProvider();
        } else {
          this.identityProvider = value;
        }
        break;

      case IDENTITYIDENTIFIER:
        if (value == null) {
          unsetIdentityIdentifier();
        } else {
          this.identityIdentifier = value;
        }
        break;

      case SNSACCOUNTS:
        if (value == null) {
          unsetSnsAccounts();
        } else {
          this.snsAccounts = value;
        }
        break;

      case PHONEREGISTRATION:
        if (value == null) {
          unsetPhoneRegistration();
        } else {
          this.phoneRegistration = value;
        }
        break;

      case EMAILCONFIRMATIONSTATUS:
        if (value == null) {
          unsetEmailConfirmationStatus();
        } else {
          this.emailConfirmationStatus = value;
        }
        break;

      case PREFERENCELOCALE:
        if (value == null) {
          unsetPreferenceLocale();
        } else {
          this.preferenceLocale = value;
        }
        break;

      case CUSTOMMODES:
        if (value == null) {
          unsetCustomModes();
        } else {
          this.customModes = value;
        }
        break;

      case E2EEENABLE:
        if (value == null) {
          unsetE2eeEnable();
        } else {
          this.e2eeEnable = value;
        }
        break;

      case HITOKOTOBACKUPREQUESTED:
        if (value == null) {
          unsetHitokotoBackupRequested();
        } else {
          this.hitokotoBackupRequested = value;
        }
        break;

      case PRIVACYPROFILEMUSICPOSTTOMYHOME:
        if (value == null) {
          unsetPrivacyProfileMusicPostToMyhome();
        } else {
          this.privacyProfileMusicPostToMyhome = value;
        }
        break;

      case PRIVACYALLOWNEARBY:
        if (value == null) {
          unsetPrivacyAllowNearby();
        } else {
          this.privacyAllowNearby = value;
        }
        break;

      case AGREEMENTNEARBYTIME:
        if (value == null) {
          unsetAgreementNearbyTime();
        } else {
          this.agreementNearbyTime = value;
        }
        break;

      case AGREEMENTSQUARETIME:
        if (value == null) {
          unsetAgreementSquareTime();
        } else {
          this.agreementSquareTime = value;
        }
        break;

      case NOTIFICATIONMENTION:
        if (value == null) {
          unsetNotificationMention();
        } else {
          this.notificationMention = value;
        }
        break;

      case BOTUSEAGREEMENTACCEPTEDAT:
        if (value == null) {
          unsetBotUseAgreementAcceptedAt();
        } else {
          this.botUseAgreementAcceptedAt = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case NOTIFICATIONENABLE:
        return isSetNotificationEnable();
      case NOTIFICATIONMUTEEXPIRATION:
        return isSetNotificationMuteExpiration();
      case NOTIFICATIONNEWMESSAGE:
        return isSetNotificationNewMessage();
      case NOTIFICATIONGROUPINVITATION:
        return isSetNotificationGroupInvitation();
      case NOTIFICATIONSHOWMESSAGE:
        return isSetNotificationShowMessage();
      case NOTIFICATIONINCOMINGCALL:
        return isSetNotificationIncomingCall();
      case NOTIFICATIONSOUNDMESSAGE:
        return isSetNotificationSoundMessage();
      case NOTIFICATIONSOUNDGROUP:
        return isSetNotificationSoundGroup();
      case NOTIFICATIONDISABLEDWITHSUB:
        return isSetNotificationDisabledWithSub();
      case PRIVACYSYNCCONTACTS:
        return isSetPrivacySyncContacts();
      case PRIVACYSEARCHBYPHONENUMBER:
        return isSetPrivacySearchByPhoneNumber();
      case PRIVACYSEARCHBYUSERID:
        return isSetPrivacySearchByUserid();
      case PRIVACYSEARCHBYEMAIL:
        return isSetPrivacySearchByEmail();
      case PRIVACYALLOWSECONDARYDEVICELOGIN:
        return isSetPrivacyAllowSecondaryDeviceLogin();
      case PRIVACYPROFILEIMAGEPOSTTOMYHOME:
        return isSetPrivacyProfileImagePostToMyhome();
      case PRIVACYRECEIVEMESSAGESFROMNOTFRIEND:
        return isSetPrivacyReceiveMessagesFromNotFriend();
      case CONTACTMYTICKET:
        return isSetContactMyTicket();
      case IDENTITYPROVIDER:
        return isSetIdentityProvider();
      case IDENTITYIDENTIFIER:
        return isSetIdentityIdentifier();
      case SNSACCOUNTS:
        return isSetSnsAccounts();
      case PHONEREGISTRATION:
        return isSetPhoneRegistration();
      case EMAILCONFIRMATIONSTATUS:
        return isSetEmailConfirmationStatus();
      case PREFERENCELOCALE:
        return isSetPreferenceLocale();
      case CUSTOMMODES:
        return isSetCustomModes();
      case E2EEENABLE:
        return isSetE2eeEnable();
      case HITOKOTOBACKUPREQUESTED:
        return isSetHitokotoBackupRequested();
      case PRIVACYPROFILEMUSICPOSTTOMYHOME:
        return isSetPrivacyProfileMusicPostToMyhome();
      case PRIVACYALLOWNEARBY:
        return isSetPrivacyAllowNearby();
      case AGREEMENTNEARBYTIME:
        return isSetAgreementNearbyTime();
      case AGREEMENTSQUARETIME:
        return isSetAgreementSquareTime();
      case NOTIFICATIONMENTION:
        return isSetNotificationMention();
      case BOTUSEAGREEMENTACCEPTEDAT:
        return isSetBotUseAgreementAcceptedAt();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case NOTIFICATIONENABLE:
          if (field.type == TType.BOOL) {
            this.notificationEnable = iprot.readBool();
            this.__isset_notificationEnable = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NOTIFICATIONMUTEEXPIRATION:
          if (field.type == TType.I64) {
            this.notificationMuteExpiration = iprot.readI64();
            this.__isset_notificationMuteExpiration = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NOTIFICATIONNEWMESSAGE:
          if (field.type == TType.BOOL) {
            this.notificationNewMessage = iprot.readBool();
            this.__isset_notificationNewMessage = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NOTIFICATIONGROUPINVITATION:
          if (field.type == TType.BOOL) {
            this.notificationGroupInvitation = iprot.readBool();
            this.__isset_notificationGroupInvitation = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NOTIFICATIONSHOWMESSAGE:
          if (field.type == TType.BOOL) {
            this.notificationShowMessage = iprot.readBool();
            this.__isset_notificationShowMessage = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NOTIFICATIONINCOMINGCALL:
          if (field.type == TType.BOOL) {
            this.notificationIncomingCall = iprot.readBool();
            this.__isset_notificationIncomingCall = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NOTIFICATIONSOUNDMESSAGE:
          if (field.type == TType.STRING) {
            this.notificationSoundMessage = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NOTIFICATIONSOUNDGROUP:
          if (field.type == TType.STRING) {
            this.notificationSoundGroup = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NOTIFICATIONDISABLEDWITHSUB:
          if (field.type == TType.BOOL) {
            this.notificationDisabledWithSub = iprot.readBool();
            this.__isset_notificationDisabledWithSub = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PRIVACYSYNCCONTACTS:
          if (field.type == TType.BOOL) {
            this.privacySyncContacts = iprot.readBool();
            this.__isset_privacySyncContacts = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PRIVACYSEARCHBYPHONENUMBER:
          if (field.type == TType.BOOL) {
            this.privacySearchByPhoneNumber = iprot.readBool();
            this.__isset_privacySearchByPhoneNumber = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PRIVACYSEARCHBYUSERID:
          if (field.type == TType.BOOL) {
            this.privacySearchByUserid = iprot.readBool();
            this.__isset_privacySearchByUserid = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PRIVACYSEARCHBYEMAIL:
          if (field.type == TType.BOOL) {
            this.privacySearchByEmail = iprot.readBool();
            this.__isset_privacySearchByEmail = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PRIVACYALLOWSECONDARYDEVICELOGIN:
          if (field.type == TType.BOOL) {
            this.privacyAllowSecondaryDeviceLogin = iprot.readBool();
            this.__isset_privacyAllowSecondaryDeviceLogin = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PRIVACYPROFILEIMAGEPOSTTOMYHOME:
          if (field.type == TType.BOOL) {
            this.privacyProfileImagePostToMyhome = iprot.readBool();
            this.__isset_privacyProfileImagePostToMyhome = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PRIVACYRECEIVEMESSAGESFROMNOTFRIEND:
          if (field.type == TType.BOOL) {
            this.privacyReceiveMessagesFromNotFriend = iprot.readBool();
            this.__isset_privacyReceiveMessagesFromNotFriend = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CONTACTMYTICKET:
          if (field.type == TType.STRING) {
            this.contactMyTicket = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case IDENTITYPROVIDER:
          if (field.type == TType.I32) {
            this.identityProvider = iprot.readI32();
            this.__isset_identityProvider = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case IDENTITYIDENTIFIER:
          if (field.type == TType.STRING) {
            this.identityIdentifier = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SNSACCOUNTS:
          if (field.type == TType.MAP) {
            {
              TMap _map250 = iprot.readMapBegin();
              this.snsAccounts = new Map<int, String>();
              for (int _i251 = 0; _i251 < _map250.length; ++_i251) {
                int _key252;
                String _val253;
                _key252 = iprot.readI32();
                _val253 = iprot.readString();
                this.snsAccounts[_key252] = _val253;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PHONEREGISTRATION:
          if (field.type == TType.BOOL) {
            this.phoneRegistration = iprot.readBool();
            this.__isset_phoneRegistration = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EMAILCONFIRMATIONSTATUS:
          if (field.type == TType.I32) {
            this.emailConfirmationStatus = iprot.readI32();
            this.__isset_emailConfirmationStatus = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PREFERENCELOCALE:
          if (field.type == TType.STRING) {
            this.preferenceLocale = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CUSTOMMODES:
          if (field.type == TType.MAP) {
            {
              TMap _map254 = iprot.readMapBegin();
              this.customModes = new Map<int, String>();
              for (int _i255 = 0; _i255 < _map254.length; ++_i255) {
                int _key256;
                String _val257;
                _key256 = iprot.readI32();
                _val257 = iprot.readString();
                this.customModes[_key256] = _val257;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E2EEENABLE:
          if (field.type == TType.BOOL) {
            this.e2eeEnable = iprot.readBool();
            this.__isset_e2eeEnable = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case HITOKOTOBACKUPREQUESTED:
          if (field.type == TType.BOOL) {
            this.hitokotoBackupRequested = iprot.readBool();
            this.__isset_hitokotoBackupRequested = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PRIVACYPROFILEMUSICPOSTTOMYHOME:
          if (field.type == TType.BOOL) {
            this.privacyProfileMusicPostToMyhome = iprot.readBool();
            this.__isset_privacyProfileMusicPostToMyhome = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PRIVACYALLOWNEARBY:
          if (field.type == TType.BOOL) {
            this.privacyAllowNearby = iprot.readBool();
            this.__isset_privacyAllowNearby = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AGREEMENTNEARBYTIME:
          if (field.type == TType.I64) {
            this.agreementNearbyTime = iprot.readI64();
            this.__isset_agreementNearbyTime = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AGREEMENTSQUARETIME:
          if (field.type == TType.I64) {
            this.agreementSquareTime = iprot.readI64();
            this.__isset_agreementSquareTime = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NOTIFICATIONMENTION:
          if (field.type == TType.BOOL) {
            this.notificationMention = iprot.readBool();
            this.__isset_notificationMention = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BOTUSEAGREEMENTACCEPTEDAT:
          if (field.type == TType.I64) {
            this.botUseAgreementAcceptedAt = iprot.readI64();
            this.__isset_botUseAgreementAcceptedAt = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_NOTIFICATION_ENABLE_FIELD_DESC);
    oprot.writeBool(this.notificationEnable);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_NOTIFICATION_MUTE_EXPIRATION_FIELD_DESC);
    oprot.writeI64(this.notificationMuteExpiration);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_NOTIFICATION_NEW_MESSAGE_FIELD_DESC);
    oprot.writeBool(this.notificationNewMessage);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_NOTIFICATION_GROUP_INVITATION_FIELD_DESC);
    oprot.writeBool(this.notificationGroupInvitation);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_NOTIFICATION_SHOW_MESSAGE_FIELD_DESC);
    oprot.writeBool(this.notificationShowMessage);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_NOTIFICATION_INCOMING_CALL_FIELD_DESC);
    oprot.writeBool(this.notificationIncomingCall);
    oprot.writeFieldEnd();
    if (this.notificationSoundMessage != null) {
      oprot.writeFieldBegin(_NOTIFICATION_SOUND_MESSAGE_FIELD_DESC);
      oprot.writeString(this.notificationSoundMessage);
      oprot.writeFieldEnd();
    }
    if (this.notificationSoundGroup != null) {
      oprot.writeFieldBegin(_NOTIFICATION_SOUND_GROUP_FIELD_DESC);
      oprot.writeString(this.notificationSoundGroup);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_NOTIFICATION_DISABLED_WITH_SUB_FIELD_DESC);
    oprot.writeBool(this.notificationDisabledWithSub);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_PRIVACY_SYNC_CONTACTS_FIELD_DESC);
    oprot.writeBool(this.privacySyncContacts);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_PRIVACY_SEARCH_BY_PHONE_NUMBER_FIELD_DESC);
    oprot.writeBool(this.privacySearchByPhoneNumber);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_PRIVACY_SEARCH_BY_USERID_FIELD_DESC);
    oprot.writeBool(this.privacySearchByUserid);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_PRIVACY_SEARCH_BY_EMAIL_FIELD_DESC);
    oprot.writeBool(this.privacySearchByEmail);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN_FIELD_DESC);
    oprot.writeBool(this.privacyAllowSecondaryDeviceLogin);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME_FIELD_DESC);
    oprot.writeBool(this.privacyProfileImagePostToMyhome);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_PRIVACY_RECEIVE_MESSAGES_FROM_NOT_FRIEND_FIELD_DESC);
    oprot.writeBool(this.privacyReceiveMessagesFromNotFriend);
    oprot.writeFieldEnd();
    if (this.contactMyTicket != null) {
      oprot.writeFieldBegin(_CONTACT_MY_TICKET_FIELD_DESC);
      oprot.writeString(this.contactMyTicket);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_IDENTITY_PROVIDER_FIELD_DESC);
    oprot.writeI32(this.identityProvider);
    oprot.writeFieldEnd();
    if (this.identityIdentifier != null) {
      oprot.writeFieldBegin(_IDENTITY_IDENTIFIER_FIELD_DESC);
      oprot.writeString(this.identityIdentifier);
      oprot.writeFieldEnd();
    }
    if (this.snsAccounts != null) {
      oprot.writeFieldBegin(_SNS_ACCOUNTS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.STRING, this.snsAccounts.length));
        for (var elem259 in this.snsAccounts.keys) {
          oprot.writeI32(elem259);
          oprot.writeString(this.snsAccounts[elem259]);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_PHONE_REGISTRATION_FIELD_DESC);
    oprot.writeBool(this.phoneRegistration);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_EMAIL_CONFIRMATION_STATUS_FIELD_DESC);
    oprot.writeI32(this.emailConfirmationStatus);
    oprot.writeFieldEnd();
    if (this.preferenceLocale != null) {
      oprot.writeFieldBegin(_PREFERENCE_LOCALE_FIELD_DESC);
      oprot.writeString(this.preferenceLocale);
      oprot.writeFieldEnd();
    }
    if (this.customModes != null) {
      oprot.writeFieldBegin(_CUSTOM_MODES_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.STRING, this.customModes.length));
        for (var elem261 in this.customModes.keys) {
          oprot.writeI32(elem261);
          oprot.writeString(this.customModes[elem261]);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_E2EE_ENABLE_FIELD_DESC);
    oprot.writeBool(this.e2eeEnable);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_HITOKOTO_BACKUP_REQUESTED_FIELD_DESC);
    oprot.writeBool(this.hitokotoBackupRequested);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME_FIELD_DESC);
    oprot.writeBool(this.privacyProfileMusicPostToMyhome);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_PRIVACY_ALLOW_NEARBY_FIELD_DESC);
    oprot.writeBool(this.privacyAllowNearby);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_AGREEMENT_NEARBY_TIME_FIELD_DESC);
    oprot.writeI64(this.agreementNearbyTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_AGREEMENT_SQUARE_TIME_FIELD_DESC);
    oprot.writeI64(this.agreementSquareTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_NOTIFICATION_MENTION_FIELD_DESC);
    oprot.writeBool(this.notificationMention);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_BOT_USE_AGREEMENT_ACCEPTED_AT_FIELD_DESC);
    oprot.writeI64(this.botUseAgreementAcceptedAt);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("Settings(");

    ret.write("notificationEnable:");
    ret.write(this.notificationEnable);

    ret.write(", ");
    ret.write("notificationMuteExpiration:");
    ret.write(this.notificationMuteExpiration);

    ret.write(", ");
    ret.write("notificationNewMessage:");
    ret.write(this.notificationNewMessage);

    ret.write(", ");
    ret.write("notificationGroupInvitation:");
    ret.write(this.notificationGroupInvitation);

    ret.write(", ");
    ret.write("notificationShowMessage:");
    ret.write(this.notificationShowMessage);

    ret.write(", ");
    ret.write("notificationIncomingCall:");
    ret.write(this.notificationIncomingCall);

    ret.write(", ");
    ret.write("notificationSoundMessage:");
    if (this.notificationSoundMessage == null) {
      ret.write("null");
    } else {
      ret.write(this.notificationSoundMessage);
    }

    ret.write(", ");
    ret.write("notificationSoundGroup:");
    if (this.notificationSoundGroup == null) {
      ret.write("null");
    } else {
      ret.write(this.notificationSoundGroup);
    }

    ret.write(", ");
    ret.write("notificationDisabledWithSub:");
    ret.write(this.notificationDisabledWithSub);

    ret.write(", ");
    ret.write("privacySyncContacts:");
    ret.write(this.privacySyncContacts);

    ret.write(", ");
    ret.write("privacySearchByPhoneNumber:");
    ret.write(this.privacySearchByPhoneNumber);

    ret.write(", ");
    ret.write("privacySearchByUserid:");
    ret.write(this.privacySearchByUserid);

    ret.write(", ");
    ret.write("privacySearchByEmail:");
    ret.write(this.privacySearchByEmail);

    ret.write(", ");
    ret.write("privacyAllowSecondaryDeviceLogin:");
    ret.write(this.privacyAllowSecondaryDeviceLogin);

    ret.write(", ");
    ret.write("privacyProfileImagePostToMyhome:");
    ret.write(this.privacyProfileImagePostToMyhome);

    ret.write(", ");
    ret.write("privacyReceiveMessagesFromNotFriend:");
    ret.write(this.privacyReceiveMessagesFromNotFriend);

    ret.write(", ");
    ret.write("contactMyTicket:");
    if (this.contactMyTicket == null) {
      ret.write("null");
    } else {
      ret.write(this.contactMyTicket);
    }

    ret.write(", ");
    ret.write("identityProvider:");
    String identityProvider_name = IdentityProvider.VALUES_TO_NAMES[this.identityProvider];
    if (identityProvider_name != null) {
      ret.write(identityProvider_name);
      ret.write(" (");
    }
    ret.write(this.identityProvider);
    if (identityProvider_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("identityIdentifier:");
    if (this.identityIdentifier == null) {
      ret.write("null");
    } else {
      ret.write(this.identityIdentifier);
    }

    ret.write(", ");
    ret.write("snsAccounts:");
    if (this.snsAccounts == null) {
      ret.write("null");
    } else {
      ret.write(this.snsAccounts);
    }

    ret.write(", ");
    ret.write("phoneRegistration:");
    ret.write(this.phoneRegistration);

    ret.write(", ");
    ret.write("emailConfirmationStatus:");
    String emailConfirmationStatus_name = EmailConfirmationStatus.VALUES_TO_NAMES[this.emailConfirmationStatus];
    if (emailConfirmationStatus_name != null) {
      ret.write(emailConfirmationStatus_name);
      ret.write(" (");
    }
    ret.write(this.emailConfirmationStatus);
    if (emailConfirmationStatus_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("preferenceLocale:");
    if (this.preferenceLocale == null) {
      ret.write("null");
    } else {
      ret.write(this.preferenceLocale);
    }

    ret.write(", ");
    ret.write("customModes:");
    if (this.customModes == null) {
      ret.write("null");
    } else {
      ret.write(this.customModes);
    }

    ret.write(", ");
    ret.write("e2eeEnable:");
    ret.write(this.e2eeEnable);

    ret.write(", ");
    ret.write("hitokotoBackupRequested:");
    ret.write(this.hitokotoBackupRequested);

    ret.write(", ");
    ret.write("privacyProfileMusicPostToMyhome:");
    ret.write(this.privacyProfileMusicPostToMyhome);

    ret.write(", ");
    ret.write("privacyAllowNearby:");
    ret.write(this.privacyAllowNearby);

    ret.write(", ");
    ret.write("agreementNearbyTime:");
    ret.write(this.agreementNearbyTime);

    ret.write(", ");
    ret.write("agreementSquareTime:");
    ret.write(this.agreementSquareTime);

    ret.write(", ");
    ret.write("notificationMention:");
    ret.write(this.notificationMention);

    ret.write(", ");
    ret.write("botUseAgreementAcceptedAt:");
    ret.write(this.botUseAgreementAcceptedAt);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetIdentityProvider() && !IdentityProvider.VALID_VALUES.contains(identityProvider)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'identityProvider' has been assigned the invalid value $identityProvider");
    }
    if (isSetEmailConfirmationStatus() && !EmailConfirmationStatus.VALID_VALUES.contains(emailConfirmationStatus)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'emailConfirmationStatus' has been assigned the invalid value $emailConfirmationStatus");
    }
  }

}

