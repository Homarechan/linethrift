/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.square_feature_set;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class SquareFeatureSet implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("SquareFeatureSet");
  static final TField _SQUARE_MID_FIELD_DESC = new TField("squareMid", TType.STRING, 1);
  static final TField _REVISION_FIELD_DESC = new TField("revision", TType.I64, 2);
  static final TField _CREATING_SECRET_SQUARE_CHAT_FIELD_DESC = new TField("creatingSecretSquareChat", TType.STRUCT, 11);
  static final TField _INVITING_INTO_OPEN_SQUARE_CHAT_FIELD_DESC = new TField("invitingIntoOpenSquareChat", TType.STRUCT, 12);

  String _squareMid;
  static const int SQUAREMID = 1;
  int _revision = 0;
  static const int REVISION = 2;
  SquareFeature _creatingSecretSquareChat;
  static const int CREATINGSECRETSQUARECHAT = 11;
  SquareFeature _invitingIntoOpenSquareChat;
  static const int INVITINGINTOOPENSQUARECHAT = 12;

  bool __isset_revision = false;

  SquareFeatureSet() {
  }

  // squareMid
  String get squareMid => this._squareMid;

  set squareMid(String squareMid) {
    this._squareMid = squareMid;
  }

  bool isSetSquareMid() => this.squareMid != null;

  unsetSquareMid() {
    this.squareMid = null;
  }

  // revision
  int get revision => this._revision;

  set revision(int revision) {
    this._revision = revision;
    this.__isset_revision = true;
  }

  bool isSetRevision() => this.__isset_revision;

  unsetRevision() {
    this.__isset_revision = false;
  }

  // creatingSecretSquareChat
  SquareFeature get creatingSecretSquareChat => this._creatingSecretSquareChat;

  set creatingSecretSquareChat(SquareFeature creatingSecretSquareChat) {
    this._creatingSecretSquareChat = creatingSecretSquareChat;
  }

  bool isSetCreatingSecretSquareChat() => this.creatingSecretSquareChat != null;

  unsetCreatingSecretSquareChat() {
    this.creatingSecretSquareChat = null;
  }

  // invitingIntoOpenSquareChat
  SquareFeature get invitingIntoOpenSquareChat => this._invitingIntoOpenSquareChat;

  set invitingIntoOpenSquareChat(SquareFeature invitingIntoOpenSquareChat) {
    this._invitingIntoOpenSquareChat = invitingIntoOpenSquareChat;
  }

  bool isSetInvitingIntoOpenSquareChat() => this.invitingIntoOpenSquareChat != null;

  unsetInvitingIntoOpenSquareChat() {
    this.invitingIntoOpenSquareChat = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SQUAREMID:
        return this.squareMid;
      case REVISION:
        return this.revision;
      case CREATINGSECRETSQUARECHAT:
        return this.creatingSecretSquareChat;
      case INVITINGINTOOPENSQUARECHAT:
        return this.invitingIntoOpenSquareChat;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SQUAREMID:
        if (value == null) {
          unsetSquareMid();
        } else {
          this.squareMid = value;
        }
        break;

      case REVISION:
        if (value == null) {
          unsetRevision();
        } else {
          this.revision = value;
        }
        break;

      case CREATINGSECRETSQUARECHAT:
        if (value == null) {
          unsetCreatingSecretSquareChat();
        } else {
          this.creatingSecretSquareChat = value;
        }
        break;

      case INVITINGINTOOPENSQUARECHAT:
        if (value == null) {
          unsetInvitingIntoOpenSquareChat();
        } else {
          this.invitingIntoOpenSquareChat = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SQUAREMID:
        return isSetSquareMid();
      case REVISION:
        return isSetRevision();
      case CREATINGSECRETSQUARECHAT:
        return isSetCreatingSecretSquareChat();
      case INVITINGINTOOPENSQUARECHAT:
        return isSetInvitingIntoOpenSquareChat();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SQUAREMID:
          if (field.type == TType.STRING) {
            this.squareMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case REVISION:
          if (field.type == TType.I64) {
            this.revision = iprot.readI64();
            this.__isset_revision = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CREATINGSECRETSQUARECHAT:
          if (field.type == TType.STRUCT) {
            this.creatingSecretSquareChat = new SquareFeature();
            this.creatingSecretSquareChat.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case INVITINGINTOOPENSQUARECHAT:
          if (field.type == TType.STRUCT) {
            this.invitingIntoOpenSquareChat = new SquareFeature();
            this.invitingIntoOpenSquareChat.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.squareMid != null) {
      oprot.writeFieldBegin(_SQUARE_MID_FIELD_DESC);
      oprot.writeString(this.squareMid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_REVISION_FIELD_DESC);
    oprot.writeI64(this.revision);
    oprot.writeFieldEnd();
    if (this.creatingSecretSquareChat != null) {
      oprot.writeFieldBegin(_CREATING_SECRET_SQUARE_CHAT_FIELD_DESC);
      this.creatingSecretSquareChat.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.invitingIntoOpenSquareChat != null) {
      oprot.writeFieldBegin(_INVITING_INTO_OPEN_SQUARE_CHAT_FIELD_DESC);
      this.invitingIntoOpenSquareChat.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("SquareFeatureSet(");

    ret.write("squareMid:");
    if (this.squareMid == null) {
      ret.write("null");
    } else {
      ret.write(this.squareMid);
    }

    ret.write(", ");
    ret.write("revision:");
    ret.write(this.revision);

    ret.write(", ");
    ret.write("creatingSecretSquareChat:");
    if (this.creatingSecretSquareChat == null) {
      ret.write("null");
    } else {
      ret.write(this.creatingSecretSquareChat);
    }

    ret.write(", ");
    ret.write("invitingIntoOpenSquareChat:");
    if (this.invitingIntoOpenSquareChat == null) {
      ret.write("null");
    } else {
      ret.write(this.invitingIntoOpenSquareChat);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

