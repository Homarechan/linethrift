/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.contact_report;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class ContactReport implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ContactReport");
  static final TField _MID_FIELD_DESC = new TField("mid", TType.STRING, 1);
  static final TField _EXISTS_FIELD_DESC = new TField("exists", TType.BOOL, 2);
  static final TField _CONTACT_FIELD_DESC = new TField("contact", TType.STRUCT, 3);

  String _mid;
  static const int MID = 1;
  bool _exists = false;
  static const int EXISTS = 2;
  Contact _contact;
  static const int CONTACT = 3;

  bool __isset_exists = false;

  ContactReport() {
  }

  // mid
  String get mid => this._mid;

  set mid(String mid) {
    this._mid = mid;
  }

  bool isSetMid() => this.mid != null;

  unsetMid() {
    this.mid = null;
  }

  // exists
  bool get exists => this._exists;

  set exists(bool exists) {
    this._exists = exists;
    this.__isset_exists = true;
  }

  bool isSetExists() => this.__isset_exists;

  unsetExists() {
    this.__isset_exists = false;
  }

  // contact
  Contact get contact => this._contact;

  set contact(Contact contact) {
    this._contact = contact;
  }

  bool isSetContact() => this.contact != null;

  unsetContact() {
    this.contact = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case MID:
        return this.mid;
      case EXISTS:
        return this.exists;
      case CONTACT:
        return this.contact;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case MID:
        if (value == null) {
          unsetMid();
        } else {
          this.mid = value;
        }
        break;

      case EXISTS:
        if (value == null) {
          unsetExists();
        } else {
          this.exists = value;
        }
        break;

      case CONTACT:
        if (value == null) {
          unsetContact();
        } else {
          this.contact = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case MID:
        return isSetMid();
      case EXISTS:
        return isSetExists();
      case CONTACT:
        return isSetContact();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case MID:
          if (field.type == TType.STRING) {
            this.mid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EXISTS:
          if (field.type == TType.BOOL) {
            this.exists = iprot.readBool();
            this.__isset_exists = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CONTACT:
          if (field.type == TType.STRUCT) {
            this.contact = new Contact();
            this.contact.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.mid != null) {
      oprot.writeFieldBegin(_MID_FIELD_DESC);
      oprot.writeString(this.mid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_EXISTS_FIELD_DESC);
    oprot.writeBool(this.exists);
    oprot.writeFieldEnd();
    if (this.contact != null) {
      oprot.writeFieldBegin(_CONTACT_FIELD_DESC);
      this.contact.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ContactReport(");

    ret.write("mid:");
    if (this.mid == null) {
      ret.write("null");
    } else {
      ret.write(this.mid);
    }

    ret.write(", ");
    ret.write("exists:");
    ret.write(this.exists);

    ret.write(", ");
    ret.write("contact:");
    if (this.contact == null) {
      ret.write("null");
    } else {
      ret.write(this.contact);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

