/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.login_session;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class LoginSession implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("LoginSession");
  static final TField _TOKEN_KEY_FIELD_DESC = new TField("tokenKey", TType.STRING, 1);
  static final TField _EXPIRATION_TIME_FIELD_DESC = new TField("expirationTime", TType.I64, 3);
  static final TField _APPLICATION_TYPE_FIELD_DESC = new TField("applicationType", TType.I32, 11);
  static final TField _SYSTEM_NAME_FIELD_DESC = new TField("systemName", TType.STRING, 12);
  static final TField _ACCESS_LOCATION_FIELD_DESC = new TField("accessLocation", TType.STRING, 22);

  String _tokenKey;
  static const int TOKENKEY = 1;
  int _expirationTime = 0;
  static const int EXPIRATIONTIME = 3;
  int _applicationType;
  static const int APPLICATIONTYPE = 11;
  String _systemName;
  static const int SYSTEMNAME = 12;
  String _accessLocation;
  static const int ACCESSLOCATION = 22;

  bool __isset_expirationTime = false;
  bool __isset_applicationType = false;

  LoginSession() {
  }

  // tokenKey
  String get tokenKey => this._tokenKey;

  set tokenKey(String tokenKey) {
    this._tokenKey = tokenKey;
  }

  bool isSetTokenKey() => this.tokenKey != null;

  unsetTokenKey() {
    this.tokenKey = null;
  }

  // expirationTime
  int get expirationTime => this._expirationTime;

  set expirationTime(int expirationTime) {
    this._expirationTime = expirationTime;
    this.__isset_expirationTime = true;
  }

  bool isSetExpirationTime() => this.__isset_expirationTime;

  unsetExpirationTime() {
    this.__isset_expirationTime = false;
  }

  // applicationType
  int get applicationType => this._applicationType;

  set applicationType(int applicationType) {
    this._applicationType = applicationType;
    this.__isset_applicationType = true;
  }

  bool isSetApplicationType() => this.__isset_applicationType;

  unsetApplicationType() {
    this.__isset_applicationType = false;
  }

  // systemName
  String get systemName => this._systemName;

  set systemName(String systemName) {
    this._systemName = systemName;
  }

  bool isSetSystemName() => this.systemName != null;

  unsetSystemName() {
    this.systemName = null;
  }

  // accessLocation
  String get accessLocation => this._accessLocation;

  set accessLocation(String accessLocation) {
    this._accessLocation = accessLocation;
  }

  bool isSetAccessLocation() => this.accessLocation != null;

  unsetAccessLocation() {
    this.accessLocation = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case TOKENKEY:
        return this.tokenKey;
      case EXPIRATIONTIME:
        return this.expirationTime;
      case APPLICATIONTYPE:
        return this.applicationType;
      case SYSTEMNAME:
        return this.systemName;
      case ACCESSLOCATION:
        return this.accessLocation;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case TOKENKEY:
        if (value == null) {
          unsetTokenKey();
        } else {
          this.tokenKey = value;
        }
        break;

      case EXPIRATIONTIME:
        if (value == null) {
          unsetExpirationTime();
        } else {
          this.expirationTime = value;
        }
        break;

      case APPLICATIONTYPE:
        if (value == null) {
          unsetApplicationType();
        } else {
          this.applicationType = value;
        }
        break;

      case SYSTEMNAME:
        if (value == null) {
          unsetSystemName();
        } else {
          this.systemName = value;
        }
        break;

      case ACCESSLOCATION:
        if (value == null) {
          unsetAccessLocation();
        } else {
          this.accessLocation = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case TOKENKEY:
        return isSetTokenKey();
      case EXPIRATIONTIME:
        return isSetExpirationTime();
      case APPLICATIONTYPE:
        return isSetApplicationType();
      case SYSTEMNAME:
        return isSetSystemName();
      case ACCESSLOCATION:
        return isSetAccessLocation();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case TOKENKEY:
          if (field.type == TType.STRING) {
            this.tokenKey = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EXPIRATIONTIME:
          if (field.type == TType.I64) {
            this.expirationTime = iprot.readI64();
            this.__isset_expirationTime = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case APPLICATIONTYPE:
          if (field.type == TType.I32) {
            this.applicationType = iprot.readI32();
            this.__isset_applicationType = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SYSTEMNAME:
          if (field.type == TType.STRING) {
            this.systemName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ACCESSLOCATION:
          if (field.type == TType.STRING) {
            this.accessLocation = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.tokenKey != null) {
      oprot.writeFieldBegin(_TOKEN_KEY_FIELD_DESC);
      oprot.writeString(this.tokenKey);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_EXPIRATION_TIME_FIELD_DESC);
    oprot.writeI64(this.expirationTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_APPLICATION_TYPE_FIELD_DESC);
    oprot.writeI32(this.applicationType);
    oprot.writeFieldEnd();
    if (this.systemName != null) {
      oprot.writeFieldBegin(_SYSTEM_NAME_FIELD_DESC);
      oprot.writeString(this.systemName);
      oprot.writeFieldEnd();
    }
    if (this.accessLocation != null) {
      oprot.writeFieldBegin(_ACCESS_LOCATION_FIELD_DESC);
      oprot.writeString(this.accessLocation);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("LoginSession(");

    ret.write("tokenKey:");
    if (this.tokenKey == null) {
      ret.write("null");
    } else {
      ret.write(this.tokenKey);
    }

    ret.write(", ");
    ret.write("expirationTime:");
    ret.write(this.expirationTime);

    ret.write(", ");
    ret.write("applicationType:");
    String applicationType_name = ApplicationType.VALUES_TO_NAMES[this.applicationType];
    if (applicationType_name != null) {
      ret.write(applicationType_name);
      ret.write(" (");
    }
    ret.write(this.applicationType);
    if (applicationType_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("systemName:");
    if (this.systemName == null) {
      ret.write("null");
    } else {
      ret.write(this.systemName);
    }

    ret.write(", ");
    ret.write("accessLocation:");
    if (this.accessLocation == null) {
      ret.write("null");
    } else {
      ret.write(this.accessLocation);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetApplicationType() && !ApplicationType.VALID_VALUES.contains(applicationType)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'applicationType' has been assigned the invalid value $applicationType");
    }
  }

}

