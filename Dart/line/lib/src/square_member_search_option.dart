/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.square_member_search_option;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class SquareMemberSearchOption implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("SquareMemberSearchOption");
  static final TField _MEMBERSHIP_STATE_FIELD_DESC = new TField("membershipState", TType.I32, 1);
  static final TField _MEMBER_ROLES_FIELD_DESC = new TField("memberRoles", TType.SET, 2);
  static final TField _DISPLAY_NAME_FIELD_DESC = new TField("displayName", TType.STRING, 3);
  static final TField _ABLE_TO_RECEIVE_MESSAGE_FIELD_DESC = new TField("ableToReceiveMessage", TType.I32, 4);
  static final TField _ABLE_TO_RECEIVE_FRIEND_REQUEST_FIELD_DESC = new TField("ableToReceiveFriendRequest", TType.I32, 5);
  static final TField _CHAT_MID_TO_EXCLUDE_MEMBERS_FIELD_DESC = new TField("chatMidToExcludeMembers", TType.STRING, 6);
  static final TField _INCLUDING_ME_FIELD_DESC = new TField("includingMe", TType.BOOL, 7);

  int _membershipState;
  static const int MEMBERSHIPSTATE = 1;
  Set<int> _memberRoles;
  static const int MEMBERROLES = 2;
  String _displayName;
  static const int DISPLAYNAME = 3;
  int _ableToReceiveMessage;
  static const int ABLETORECEIVEMESSAGE = 4;
  int _ableToReceiveFriendRequest;
  static const int ABLETORECEIVEFRIENDREQUEST = 5;
  String _chatMidToExcludeMembers;
  static const int CHATMIDTOEXCLUDEMEMBERS = 6;
  bool _includingMe = false;
  static const int INCLUDINGME = 7;

  bool __isset_membershipState = false;
  bool __isset_ableToReceiveMessage = false;
  bool __isset_ableToReceiveFriendRequest = false;
  bool __isset_includingMe = false;

  SquareMemberSearchOption() {
  }

  // membershipState
  int get membershipState => this._membershipState;

  set membershipState(int membershipState) {
    this._membershipState = membershipState;
    this.__isset_membershipState = true;
  }

  bool isSetMembershipState() => this.__isset_membershipState;

  unsetMembershipState() {
    this.__isset_membershipState = false;
  }

  // memberRoles
  Set<int> get memberRoles => this._memberRoles;

  set memberRoles(Set<int> memberRoles) {
    this._memberRoles = memberRoles;
  }

  bool isSetMemberRoles() => this.memberRoles != null;

  unsetMemberRoles() {
    this.memberRoles = null;
  }

  // displayName
  String get displayName => this._displayName;

  set displayName(String displayName) {
    this._displayName = displayName;
  }

  bool isSetDisplayName() => this.displayName != null;

  unsetDisplayName() {
    this.displayName = null;
  }

  // ableToReceiveMessage
  int get ableToReceiveMessage => this._ableToReceiveMessage;

  set ableToReceiveMessage(int ableToReceiveMessage) {
    this._ableToReceiveMessage = ableToReceiveMessage;
    this.__isset_ableToReceiveMessage = true;
  }

  bool isSetAbleToReceiveMessage() => this.__isset_ableToReceiveMessage;

  unsetAbleToReceiveMessage() {
    this.__isset_ableToReceiveMessage = false;
  }

  // ableToReceiveFriendRequest
  int get ableToReceiveFriendRequest => this._ableToReceiveFriendRequest;

  set ableToReceiveFriendRequest(int ableToReceiveFriendRequest) {
    this._ableToReceiveFriendRequest = ableToReceiveFriendRequest;
    this.__isset_ableToReceiveFriendRequest = true;
  }

  bool isSetAbleToReceiveFriendRequest() => this.__isset_ableToReceiveFriendRequest;

  unsetAbleToReceiveFriendRequest() {
    this.__isset_ableToReceiveFriendRequest = false;
  }

  // chatMidToExcludeMembers
  String get chatMidToExcludeMembers => this._chatMidToExcludeMembers;

  set chatMidToExcludeMembers(String chatMidToExcludeMembers) {
    this._chatMidToExcludeMembers = chatMidToExcludeMembers;
  }

  bool isSetChatMidToExcludeMembers() => this.chatMidToExcludeMembers != null;

  unsetChatMidToExcludeMembers() {
    this.chatMidToExcludeMembers = null;
  }

  // includingMe
  bool get includingMe => this._includingMe;

  set includingMe(bool includingMe) {
    this._includingMe = includingMe;
    this.__isset_includingMe = true;
  }

  bool isSetIncludingMe() => this.__isset_includingMe;

  unsetIncludingMe() {
    this.__isset_includingMe = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case MEMBERSHIPSTATE:
        return this.membershipState;
      case MEMBERROLES:
        return this.memberRoles;
      case DISPLAYNAME:
        return this.displayName;
      case ABLETORECEIVEMESSAGE:
        return this.ableToReceiveMessage;
      case ABLETORECEIVEFRIENDREQUEST:
        return this.ableToReceiveFriendRequest;
      case CHATMIDTOEXCLUDEMEMBERS:
        return this.chatMidToExcludeMembers;
      case INCLUDINGME:
        return this.includingMe;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case MEMBERSHIPSTATE:
        if (value == null) {
          unsetMembershipState();
        } else {
          this.membershipState = value;
        }
        break;

      case MEMBERROLES:
        if (value == null) {
          unsetMemberRoles();
        } else {
          this.memberRoles = value;
        }
        break;

      case DISPLAYNAME:
        if (value == null) {
          unsetDisplayName();
        } else {
          this.displayName = value;
        }
        break;

      case ABLETORECEIVEMESSAGE:
        if (value == null) {
          unsetAbleToReceiveMessage();
        } else {
          this.ableToReceiveMessage = value;
        }
        break;

      case ABLETORECEIVEFRIENDREQUEST:
        if (value == null) {
          unsetAbleToReceiveFriendRequest();
        } else {
          this.ableToReceiveFriendRequest = value;
        }
        break;

      case CHATMIDTOEXCLUDEMEMBERS:
        if (value == null) {
          unsetChatMidToExcludeMembers();
        } else {
          this.chatMidToExcludeMembers = value;
        }
        break;

      case INCLUDINGME:
        if (value == null) {
          unsetIncludingMe();
        } else {
          this.includingMe = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case MEMBERSHIPSTATE:
        return isSetMembershipState();
      case MEMBERROLES:
        return isSetMemberRoles();
      case DISPLAYNAME:
        return isSetDisplayName();
      case ABLETORECEIVEMESSAGE:
        return isSetAbleToReceiveMessage();
      case ABLETORECEIVEFRIENDREQUEST:
        return isSetAbleToReceiveFriendRequest();
      case CHATMIDTOEXCLUDEMEMBERS:
        return isSetChatMidToExcludeMembers();
      case INCLUDINGME:
        return isSetIncludingMe();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case MEMBERSHIPSTATE:
          if (field.type == TType.I32) {
            this.membershipState = iprot.readI32();
            this.__isset_membershipState = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MEMBERROLES:
          if (field.type == TType.SET) {
            {
              TSet _set346 = iprot.readSetBegin();
              this.memberRoles = new Set<int>();
              for (int _i347 = 0; _i347 < _set346.length; ++_i347) {
                int _elem348;
                _elem348 = iprot.readI32();
                this.memberRoles.add(_elem348);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DISPLAYNAME:
          if (field.type == TType.STRING) {
            this.displayName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ABLETORECEIVEMESSAGE:
          if (field.type == TType.I32) {
            this.ableToReceiveMessage = iprot.readI32();
            this.__isset_ableToReceiveMessage = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ABLETORECEIVEFRIENDREQUEST:
          if (field.type == TType.I32) {
            this.ableToReceiveFriendRequest = iprot.readI32();
            this.__isset_ableToReceiveFriendRequest = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CHATMIDTOEXCLUDEMEMBERS:
          if (field.type == TType.STRING) {
            this.chatMidToExcludeMembers = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case INCLUDINGME:
          if (field.type == TType.BOOL) {
            this.includingMe = iprot.readBool();
            this.__isset_includingMe = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_MEMBERSHIP_STATE_FIELD_DESC);
    oprot.writeI32(this.membershipState);
    oprot.writeFieldEnd();
    if (this.memberRoles != null) {
      oprot.writeFieldBegin(_MEMBER_ROLES_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.I32, this.memberRoles.length));
        for (var elem349 in this.memberRoles) {
          oprot.writeI32(elem349);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.displayName != null) {
      oprot.writeFieldBegin(_DISPLAY_NAME_FIELD_DESC);
      oprot.writeString(this.displayName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_ABLE_TO_RECEIVE_MESSAGE_FIELD_DESC);
    oprot.writeI32(this.ableToReceiveMessage);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_ABLE_TO_RECEIVE_FRIEND_REQUEST_FIELD_DESC);
    oprot.writeI32(this.ableToReceiveFriendRequest);
    oprot.writeFieldEnd();
    if (this.chatMidToExcludeMembers != null) {
      oprot.writeFieldBegin(_CHAT_MID_TO_EXCLUDE_MEMBERS_FIELD_DESC);
      oprot.writeString(this.chatMidToExcludeMembers);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_INCLUDING_ME_FIELD_DESC);
    oprot.writeBool(this.includingMe);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("SquareMemberSearchOption(");

    ret.write("membershipState:");
    String membershipState_name = SquareMembershipState.VALUES_TO_NAMES[this.membershipState];
    if (membershipState_name != null) {
      ret.write(membershipState_name);
      ret.write(" (");
    }
    ret.write(this.membershipState);
    if (membershipState_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("memberRoles:");
    if (this.memberRoles == null) {
      ret.write("null");
    } else {
      ret.write(this.memberRoles);
    }

    ret.write(", ");
    ret.write("displayName:");
    if (this.displayName == null) {
      ret.write("null");
    } else {
      ret.write(this.displayName);
    }

    ret.write(", ");
    ret.write("ableToReceiveMessage:");
    String ableToReceiveMessage_name = BooleanState.VALUES_TO_NAMES[this.ableToReceiveMessage];
    if (ableToReceiveMessage_name != null) {
      ret.write(ableToReceiveMessage_name);
      ret.write(" (");
    }
    ret.write(this.ableToReceiveMessage);
    if (ableToReceiveMessage_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("ableToReceiveFriendRequest:");
    String ableToReceiveFriendRequest_name = BooleanState.VALUES_TO_NAMES[this.ableToReceiveFriendRequest];
    if (ableToReceiveFriendRequest_name != null) {
      ret.write(ableToReceiveFriendRequest_name);
      ret.write(" (");
    }
    ret.write(this.ableToReceiveFriendRequest);
    if (ableToReceiveFriendRequest_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("chatMidToExcludeMembers:");
    if (this.chatMidToExcludeMembers == null) {
      ret.write("null");
    } else {
      ret.write(this.chatMidToExcludeMembers);
    }

    ret.write(", ");
    ret.write("includingMe:");
    ret.write(this.includingMe);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetMembershipState() && !SquareMembershipState.VALID_VALUES.contains(membershipState)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'membershipState' has been assigned the invalid value $membershipState");
    }
    if (isSetAbleToReceiveMessage() && !BooleanState.VALID_VALUES.contains(ableToReceiveMessage)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'ableToReceiveMessage' has been assigned the invalid value $ableToReceiveMessage");
    }
    if (isSetAbleToReceiveFriendRequest() && !BooleanState.VALID_VALUES.contains(ableToReceiveFriendRequest)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'ableToReceiveFriendRequest' has been assigned the invalid value $ableToReceiveFriendRequest");
    }
  }

}

