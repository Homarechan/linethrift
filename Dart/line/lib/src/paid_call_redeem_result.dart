/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.paid_call_redeem_result;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class PaidCallRedeemResult implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("PaidCallRedeemResult");
  static final TField _EVENT_NAME_FIELD_DESC = new TField("eventName", TType.STRING, 1);
  static final TField _EVENT_AMOUNT_FIELD_DESC = new TField("eventAmount", TType.I32, 2);

  String _eventName;
  static const int EVENTNAME = 1;
  int _eventAmount = 0;
  static const int EVENTAMOUNT = 2;

  bool __isset_eventAmount = false;

  PaidCallRedeemResult() {
  }

  // eventName
  String get eventName => this._eventName;

  set eventName(String eventName) {
    this._eventName = eventName;
  }

  bool isSetEventName() => this.eventName != null;

  unsetEventName() {
    this.eventName = null;
  }

  // eventAmount
  int get eventAmount => this._eventAmount;

  set eventAmount(int eventAmount) {
    this._eventAmount = eventAmount;
    this.__isset_eventAmount = true;
  }

  bool isSetEventAmount() => this.__isset_eventAmount;

  unsetEventAmount() {
    this.__isset_eventAmount = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case EVENTNAME:
        return this.eventName;
      case EVENTAMOUNT:
        return this.eventAmount;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case EVENTNAME:
        if (value == null) {
          unsetEventName();
        } else {
          this.eventName = value;
        }
        break;

      case EVENTAMOUNT:
        if (value == null) {
          unsetEventAmount();
        } else {
          this.eventAmount = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case EVENTNAME:
        return isSetEventName();
      case EVENTAMOUNT:
        return isSetEventAmount();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case EVENTNAME:
          if (field.type == TType.STRING) {
            this.eventName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EVENTAMOUNT:
          if (field.type == TType.I32) {
            this.eventAmount = iprot.readI32();
            this.__isset_eventAmount = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.eventName != null) {
      oprot.writeFieldBegin(_EVENT_NAME_FIELD_DESC);
      oprot.writeString(this.eventName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_EVENT_AMOUNT_FIELD_DESC);
    oprot.writeI32(this.eventAmount);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("PaidCallRedeemResult(");

    ret.write("eventName:");
    if (this.eventName == null) {
      ret.write("null");
    } else {
      ret.write(this.eventName);
    }

    ret.write(", ");
    ret.write("eventAmount:");
    ret.write(this.eventAmount);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

