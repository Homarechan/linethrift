/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.buddy_detail;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class BuddyDetail implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("BuddyDetail");
  static final TField _MID_FIELD_DESC = new TField("mid", TType.STRING, 1);
  static final TField _MEMBER_COUNT_FIELD_DESC = new TField("memberCount", TType.I64, 2);
  static final TField _ON_AIR_FIELD_DESC = new TField("onAir", TType.BOOL, 3);
  static final TField _BUSINESS_ACCOUNT_FIELD_DESC = new TField("businessAccount", TType.BOOL, 4);
  static final TField _ADDABLE_FIELD_DESC = new TField("addable", TType.BOOL, 5);
  static final TField _ACCEPTABLE_CONTENT_TYPES_FIELD_DESC = new TField("acceptableContentTypes", TType.SET, 6);
  static final TField _CAPABLE_MYHOME_FIELD_DESC = new TField("capableMyhome", TType.BOOL, 7);

  String _mid;
  static const int MID = 1;
  int _memberCount = 0;
  static const int MEMBERCOUNT = 2;
  bool _onAir = false;
  static const int ONAIR = 3;
  bool _businessAccount = false;
  static const int BUSINESSACCOUNT = 4;
  bool _addable = false;
  static const int ADDABLE = 5;
  Set<int> _acceptableContentTypes;
  static const int ACCEPTABLECONTENTTYPES = 6;
  bool _capableMyhome = false;
  static const int CAPABLEMYHOME = 7;

  bool __isset_memberCount = false;
  bool __isset_onAir = false;
  bool __isset_businessAccount = false;
  bool __isset_addable = false;
  bool __isset_capableMyhome = false;

  BuddyDetail() {
  }

  // mid
  String get mid => this._mid;

  set mid(String mid) {
    this._mid = mid;
  }

  bool isSetMid() => this.mid != null;

  unsetMid() {
    this.mid = null;
  }

  // memberCount
  int get memberCount => this._memberCount;

  set memberCount(int memberCount) {
    this._memberCount = memberCount;
    this.__isset_memberCount = true;
  }

  bool isSetMemberCount() => this.__isset_memberCount;

  unsetMemberCount() {
    this.__isset_memberCount = false;
  }

  // onAir
  bool get onAir => this._onAir;

  set onAir(bool onAir) {
    this._onAir = onAir;
    this.__isset_onAir = true;
  }

  bool isSetOnAir() => this.__isset_onAir;

  unsetOnAir() {
    this.__isset_onAir = false;
  }

  // businessAccount
  bool get businessAccount => this._businessAccount;

  set businessAccount(bool businessAccount) {
    this._businessAccount = businessAccount;
    this.__isset_businessAccount = true;
  }

  bool isSetBusinessAccount() => this.__isset_businessAccount;

  unsetBusinessAccount() {
    this.__isset_businessAccount = false;
  }

  // addable
  bool get addable => this._addable;

  set addable(bool addable) {
    this._addable = addable;
    this.__isset_addable = true;
  }

  bool isSetAddable() => this.__isset_addable;

  unsetAddable() {
    this.__isset_addable = false;
  }

  // acceptableContentTypes
  Set<int> get acceptableContentTypes => this._acceptableContentTypes;

  set acceptableContentTypes(Set<int> acceptableContentTypes) {
    this._acceptableContentTypes = acceptableContentTypes;
  }

  bool isSetAcceptableContentTypes() => this.acceptableContentTypes != null;

  unsetAcceptableContentTypes() {
    this.acceptableContentTypes = null;
  }

  // capableMyhome
  bool get capableMyhome => this._capableMyhome;

  set capableMyhome(bool capableMyhome) {
    this._capableMyhome = capableMyhome;
    this.__isset_capableMyhome = true;
  }

  bool isSetCapableMyhome() => this.__isset_capableMyhome;

  unsetCapableMyhome() {
    this.__isset_capableMyhome = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case MID:
        return this.mid;
      case MEMBERCOUNT:
        return this.memberCount;
      case ONAIR:
        return this.onAir;
      case BUSINESSACCOUNT:
        return this.businessAccount;
      case ADDABLE:
        return this.addable;
      case ACCEPTABLECONTENTTYPES:
        return this.acceptableContentTypes;
      case CAPABLEMYHOME:
        return this.capableMyhome;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case MID:
        if (value == null) {
          unsetMid();
        } else {
          this.mid = value;
        }
        break;

      case MEMBERCOUNT:
        if (value == null) {
          unsetMemberCount();
        } else {
          this.memberCount = value;
        }
        break;

      case ONAIR:
        if (value == null) {
          unsetOnAir();
        } else {
          this.onAir = value;
        }
        break;

      case BUSINESSACCOUNT:
        if (value == null) {
          unsetBusinessAccount();
        } else {
          this.businessAccount = value;
        }
        break;

      case ADDABLE:
        if (value == null) {
          unsetAddable();
        } else {
          this.addable = value;
        }
        break;

      case ACCEPTABLECONTENTTYPES:
        if (value == null) {
          unsetAcceptableContentTypes();
        } else {
          this.acceptableContentTypes = value;
        }
        break;

      case CAPABLEMYHOME:
        if (value == null) {
          unsetCapableMyhome();
        } else {
          this.capableMyhome = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case MID:
        return isSetMid();
      case MEMBERCOUNT:
        return isSetMemberCount();
      case ONAIR:
        return isSetOnAir();
      case BUSINESSACCOUNT:
        return isSetBusinessAccount();
      case ADDABLE:
        return isSetAddable();
      case ACCEPTABLECONTENTTYPES:
        return isSetAcceptableContentTypes();
      case CAPABLEMYHOME:
        return isSetCapableMyhome();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case MID:
          if (field.type == TType.STRING) {
            this.mid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MEMBERCOUNT:
          if (field.type == TType.I64) {
            this.memberCount = iprot.readI64();
            this.__isset_memberCount = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ONAIR:
          if (field.type == TType.BOOL) {
            this.onAir = iprot.readBool();
            this.__isset_onAir = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BUSINESSACCOUNT:
          if (field.type == TType.BOOL) {
            this.businessAccount = iprot.readBool();
            this.__isset_businessAccount = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ADDABLE:
          if (field.type == TType.BOOL) {
            this.addable = iprot.readBool();
            this.__isset_addable = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ACCEPTABLECONTENTTYPES:
          if (field.type == TType.SET) {
            {
              TSet _set56 = iprot.readSetBegin();
              this.acceptableContentTypes = new Set<int>();
              for (int _i57 = 0; _i57 < _set56.length; ++_i57) {
                int _elem58;
                _elem58 = iprot.readI32();
                this.acceptableContentTypes.add(_elem58);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CAPABLEMYHOME:
          if (field.type == TType.BOOL) {
            this.capableMyhome = iprot.readBool();
            this.__isset_capableMyhome = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.mid != null) {
      oprot.writeFieldBegin(_MID_FIELD_DESC);
      oprot.writeString(this.mid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_MEMBER_COUNT_FIELD_DESC);
    oprot.writeI64(this.memberCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_ON_AIR_FIELD_DESC);
    oprot.writeBool(this.onAir);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_BUSINESS_ACCOUNT_FIELD_DESC);
    oprot.writeBool(this.businessAccount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_ADDABLE_FIELD_DESC);
    oprot.writeBool(this.addable);
    oprot.writeFieldEnd();
    if (this.acceptableContentTypes != null) {
      oprot.writeFieldBegin(_ACCEPTABLE_CONTENT_TYPES_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.I32, this.acceptableContentTypes.length));
        for (var elem59 in this.acceptableContentTypes) {
          oprot.writeI32(elem59);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_CAPABLE_MYHOME_FIELD_DESC);
    oprot.writeBool(this.capableMyhome);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("BuddyDetail(");

    ret.write("mid:");
    if (this.mid == null) {
      ret.write("null");
    } else {
      ret.write(this.mid);
    }

    ret.write(", ");
    ret.write("memberCount:");
    ret.write(this.memberCount);

    ret.write(", ");
    ret.write("onAir:");
    ret.write(this.onAir);

    ret.write(", ");
    ret.write("businessAccount:");
    ret.write(this.businessAccount);

    ret.write(", ");
    ret.write("addable:");
    ret.write(this.addable);

    ret.write(", ");
    ret.write("acceptableContentTypes:");
    if (this.acceptableContentTypes == null) {
      ret.write("null");
    } else {
      ret.write(this.acceptableContentTypes);
    }

    ret.write(", ");
    ret.write("capableMyhome:");
    ret.write(this.capableMyhome);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

