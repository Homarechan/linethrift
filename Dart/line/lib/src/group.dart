/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.group;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class Group implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("Group");
  static final TField _ID_FIELD_DESC = new TField("id", TType.STRING, 1);
  static final TField _CREATED_TIME_FIELD_DESC = new TField("createdTime", TType.I64, 2);
  static final TField _NAME_FIELD_DESC = new TField("name", TType.STRING, 10);
  static final TField _PICTURE_STATUS_FIELD_DESC = new TField("pictureStatus", TType.STRING, 11);
  static final TField _PREVENTED_JOIN_BY_TICKET_FIELD_DESC = new TField("preventedJoinByTicket", TType.BOOL, 12);
  static final TField _GROUP_PREFERENCE_FIELD_DESC = new TField("groupPreference", TType.STRUCT, 13);
  static final TField _MEMBERS_FIELD_DESC = new TField("members", TType.LIST, 20);
  static final TField _CREATOR_FIELD_DESC = new TField("creator", TType.STRUCT, 21);
  static final TField _INVITEE_FIELD_DESC = new TField("invitee", TType.LIST, 22);
  static final TField _NOTIFICATION_DISABLED_FIELD_DESC = new TField("notificationDisabled", TType.BOOL, 31);

  String _id;
  static const int ID = 1;
  int _createdTime = 0;
  static const int CREATEDTIME = 2;
  String _name;
  static const int NAME = 10;
  String _pictureStatus;
  static const int PICTURESTATUS = 11;
  bool _preventedJoinByTicket = false;
  static const int PREVENTEDJOINBYTICKET = 12;
  GroupPreference _groupPreference;
  static const int GROUPPREFERENCE = 13;
  List<Contact> _members;
  static const int MEMBERS = 20;
  Contact _creator;
  static const int CREATOR = 21;
  List<Contact> _invitee;
  static const int INVITEE = 22;
  bool _notificationDisabled = false;
  static const int NOTIFICATIONDISABLED = 31;

  bool __isset_createdTime = false;
  bool __isset_preventedJoinByTicket = false;
  bool __isset_notificationDisabled = false;

  Group() {
  }

  // id
  String get id => this._id;

  set id(String id) {
    this._id = id;
  }

  bool isSetId() => this.id != null;

  unsetId() {
    this.id = null;
  }

  // createdTime
  int get createdTime => this._createdTime;

  set createdTime(int createdTime) {
    this._createdTime = createdTime;
    this.__isset_createdTime = true;
  }

  bool isSetCreatedTime() => this.__isset_createdTime;

  unsetCreatedTime() {
    this.__isset_createdTime = false;
  }

  // name
  String get name => this._name;

  set name(String name) {
    this._name = name;
  }

  bool isSetName() => this.name != null;

  unsetName() {
    this.name = null;
  }

  // pictureStatus
  String get pictureStatus => this._pictureStatus;

  set pictureStatus(String pictureStatus) {
    this._pictureStatus = pictureStatus;
  }

  bool isSetPictureStatus() => this.pictureStatus != null;

  unsetPictureStatus() {
    this.pictureStatus = null;
  }

  // preventedJoinByTicket
  bool get preventedJoinByTicket => this._preventedJoinByTicket;

  set preventedJoinByTicket(bool preventedJoinByTicket) {
    this._preventedJoinByTicket = preventedJoinByTicket;
    this.__isset_preventedJoinByTicket = true;
  }

  bool isSetPreventedJoinByTicket() => this.__isset_preventedJoinByTicket;

  unsetPreventedJoinByTicket() {
    this.__isset_preventedJoinByTicket = false;
  }

  // groupPreference
  GroupPreference get groupPreference => this._groupPreference;

  set groupPreference(GroupPreference groupPreference) {
    this._groupPreference = groupPreference;
  }

  bool isSetGroupPreference() => this.groupPreference != null;

  unsetGroupPreference() {
    this.groupPreference = null;
  }

  // members
  List<Contact> get members => this._members;

  set members(List<Contact> members) {
    this._members = members;
  }

  bool isSetMembers() => this.members != null;

  unsetMembers() {
    this.members = null;
  }

  // creator
  Contact get creator => this._creator;

  set creator(Contact creator) {
    this._creator = creator;
  }

  bool isSetCreator() => this.creator != null;

  unsetCreator() {
    this.creator = null;
  }

  // invitee
  List<Contact> get invitee => this._invitee;

  set invitee(List<Contact> invitee) {
    this._invitee = invitee;
  }

  bool isSetInvitee() => this.invitee != null;

  unsetInvitee() {
    this.invitee = null;
  }

  // notificationDisabled
  bool get notificationDisabled => this._notificationDisabled;

  set notificationDisabled(bool notificationDisabled) {
    this._notificationDisabled = notificationDisabled;
    this.__isset_notificationDisabled = true;
  }

  bool isSetNotificationDisabled() => this.__isset_notificationDisabled;

  unsetNotificationDisabled() {
    this.__isset_notificationDisabled = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case ID:
        return this.id;
      case CREATEDTIME:
        return this.createdTime;
      case NAME:
        return this.name;
      case PICTURESTATUS:
        return this.pictureStatus;
      case PREVENTEDJOINBYTICKET:
        return this.preventedJoinByTicket;
      case GROUPPREFERENCE:
        return this.groupPreference;
      case MEMBERS:
        return this.members;
      case CREATOR:
        return this.creator;
      case INVITEE:
        return this.invitee;
      case NOTIFICATIONDISABLED:
        return this.notificationDisabled;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          this.id = value;
        }
        break;

      case CREATEDTIME:
        if (value == null) {
          unsetCreatedTime();
        } else {
          this.createdTime = value;
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          this.name = value;
        }
        break;

      case PICTURESTATUS:
        if (value == null) {
          unsetPictureStatus();
        } else {
          this.pictureStatus = value;
        }
        break;

      case PREVENTEDJOINBYTICKET:
        if (value == null) {
          unsetPreventedJoinByTicket();
        } else {
          this.preventedJoinByTicket = value;
        }
        break;

      case GROUPPREFERENCE:
        if (value == null) {
          unsetGroupPreference();
        } else {
          this.groupPreference = value;
        }
        break;

      case MEMBERS:
        if (value == null) {
          unsetMembers();
        } else {
          this.members = value;
        }
        break;

      case CREATOR:
        if (value == null) {
          unsetCreator();
        } else {
          this.creator = value;
        }
        break;

      case INVITEE:
        if (value == null) {
          unsetInvitee();
        } else {
          this.invitee = value;
        }
        break;

      case NOTIFICATIONDISABLED:
        if (value == null) {
          unsetNotificationDisabled();
        } else {
          this.notificationDisabled = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case ID:
        return isSetId();
      case CREATEDTIME:
        return isSetCreatedTime();
      case NAME:
        return isSetName();
      case PICTURESTATUS:
        return isSetPictureStatus();
      case PREVENTEDJOINBYTICKET:
        return isSetPreventedJoinByTicket();
      case GROUPPREFERENCE:
        return isSetGroupPreference();
      case MEMBERS:
        return isSetMembers();
      case CREATOR:
        return isSetCreator();
      case INVITEE:
        return isSetInvitee();
      case NOTIFICATIONDISABLED:
        return isSetNotificationDisabled();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ID:
          if (field.type == TType.STRING) {
            this.id = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CREATEDTIME:
          if (field.type == TType.I64) {
            this.createdTime = iprot.readI64();
            this.__isset_createdTime = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NAME:
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PICTURESTATUS:
          if (field.type == TType.STRING) {
            this.pictureStatus = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PREVENTEDJOINBYTICKET:
          if (field.type == TType.BOOL) {
            this.preventedJoinByTicket = iprot.readBool();
            this.__isset_preventedJoinByTicket = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case GROUPPREFERENCE:
          if (field.type == TType.STRUCT) {
            this.groupPreference = new GroupPreference();
            this.groupPreference.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MEMBERS:
          if (field.type == TType.LIST) {
            {
              TList _list146 = iprot.readListBegin();
              this.members = new List<Contact>();
              for (int _i147 = 0; _i147 < _list146.length; ++_i147) {
                Contact _elem148;
                _elem148 = new Contact();
                _elem148.read(iprot);
                this.members.add(_elem148);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CREATOR:
          if (field.type == TType.STRUCT) {
            this.creator = new Contact();
            this.creator.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case INVITEE:
          if (field.type == TType.LIST) {
            {
              TList _list149 = iprot.readListBegin();
              this.invitee = new List<Contact>();
              for (int _i150 = 0; _i150 < _list149.length; ++_i150) {
                Contact _elem151;
                _elem151 = new Contact();
                _elem151.read(iprot);
                this.invitee.add(_elem151);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NOTIFICATIONDISABLED:
          if (field.type == TType.BOOL) {
            this.notificationDisabled = iprot.readBool();
            this.__isset_notificationDisabled = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.id != null) {
      oprot.writeFieldBegin(_ID_FIELD_DESC);
      oprot.writeString(this.id);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_CREATED_TIME_FIELD_DESC);
    oprot.writeI64(this.createdTime);
    oprot.writeFieldEnd();
    if (this.name != null) {
      oprot.writeFieldBegin(_NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.pictureStatus != null) {
      oprot.writeFieldBegin(_PICTURE_STATUS_FIELD_DESC);
      oprot.writeString(this.pictureStatus);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_PREVENTED_JOIN_BY_TICKET_FIELD_DESC);
    oprot.writeBool(this.preventedJoinByTicket);
    oprot.writeFieldEnd();
    if (this.groupPreference != null) {
      oprot.writeFieldBegin(_GROUP_PREFERENCE_FIELD_DESC);
      this.groupPreference.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.members != null) {
      oprot.writeFieldBegin(_MEMBERS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.members.length));
        for (var elem152 in this.members) {
          elem152.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.creator != null) {
      oprot.writeFieldBegin(_CREATOR_FIELD_DESC);
      this.creator.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.invitee != null) {
      oprot.writeFieldBegin(_INVITEE_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.invitee.length));
        for (var elem153 in this.invitee) {
          elem153.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_NOTIFICATION_DISABLED_FIELD_DESC);
    oprot.writeBool(this.notificationDisabled);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("Group(");

    ret.write("id:");
    if (this.id == null) {
      ret.write("null");
    } else {
      ret.write(this.id);
    }

    ret.write(", ");
    ret.write("createdTime:");
    ret.write(this.createdTime);

    ret.write(", ");
    ret.write("name:");
    if (this.name == null) {
      ret.write("null");
    } else {
      ret.write(this.name);
    }

    ret.write(", ");
    ret.write("pictureStatus:");
    if (this.pictureStatus == null) {
      ret.write("null");
    } else {
      ret.write(this.pictureStatus);
    }

    ret.write(", ");
    ret.write("preventedJoinByTicket:");
    ret.write(this.preventedJoinByTicket);

    ret.write(", ");
    ret.write("groupPreference:");
    if (this.groupPreference == null) {
      ret.write("null");
    } else {
      ret.write(this.groupPreference);
    }

    ret.write(", ");
    ret.write("members:");
    if (this.members == null) {
      ret.write("null");
    } else {
      ret.write(this.members);
    }

    ret.write(", ");
    ret.write("creator:");
    if (this.creator == null) {
      ret.write("null");
    } else {
      ret.write(this.creator);
    }

    ret.write(", ");
    ret.write("invitee:");
    if (this.invitee == null) {
      ret.write("null");
    } else {
      ret.write(this.invitee);
    }

    ret.write(", ");
    ret.write("notificationDisabled:");
    ret.write(this.notificationDisabled);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

