/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.approve_square_members_response;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class ApproveSquareMembersResponse implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ApproveSquareMembersResponse");
  static final TField _APPROVED_MEMBERS_FIELD_DESC = new TField("approvedMembers", TType.LIST, 1);
  static final TField _STATUS_FIELD_DESC = new TField("status", TType.STRUCT, 2);

  List<SquareMember> _approvedMembers;
  static const int APPROVEDMEMBERS = 1;
  SquareStatus _status;
  static const int STATUS = 2;


  ApproveSquareMembersResponse() {
  }

  // approvedMembers
  List<SquareMember> get approvedMembers => this._approvedMembers;

  set approvedMembers(List<SquareMember> approvedMembers) {
    this._approvedMembers = approvedMembers;
  }

  bool isSetApprovedMembers() => this.approvedMembers != null;

  unsetApprovedMembers() {
    this.approvedMembers = null;
  }

  // status
  SquareStatus get status => this._status;

  set status(SquareStatus status) {
    this._status = status;
  }

  bool isSetStatus() => this.status != null;

  unsetStatus() {
    this.status = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case APPROVEDMEMBERS:
        return this.approvedMembers;
      case STATUS:
        return this.status;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case APPROVEDMEMBERS:
        if (value == null) {
          unsetApprovedMembers();
        } else {
          this.approvedMembers = value;
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          this.status = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case APPROVEDMEMBERS:
        return isSetApprovedMembers();
      case STATUS:
        return isSetStatus();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case APPROVEDMEMBERS:
          if (field.type == TType.LIST) {
            {
              TList _list392 = iprot.readListBegin();
              this.approvedMembers = new List<SquareMember>();
              for (int _i393 = 0; _i393 < _list392.length; ++_i393) {
                SquareMember _elem394;
                _elem394 = new SquareMember();
                _elem394.read(iprot);
                this.approvedMembers.add(_elem394);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STATUS:
          if (field.type == TType.STRUCT) {
            this.status = new SquareStatus();
            this.status.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.approvedMembers != null) {
      oprot.writeFieldBegin(_APPROVED_MEMBERS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.approvedMembers.length));
        for (var elem395 in this.approvedMembers) {
          elem395.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.status != null) {
      oprot.writeFieldBegin(_STATUS_FIELD_DESC);
      this.status.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ApproveSquareMembersResponse(");

    ret.write("approvedMembers:");
    if (this.approvedMembers == null) {
      ret.write("null");
    } else {
      ret.write(this.approvedMembers);
    }

    ret.write(", ");
    ret.write("status:");
    if (this.status == null) {
      ret.write("null");
    } else {
      ret.write(this.status);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

