/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.service_item;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class ServiceItem implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ServiceItem");
  static final TField _ID_FIELD_DESC = new TField("id", TType.STRING, 1);
  static final TField _TITLE_FIELD_DESC = new TField("title", TType.STRING, 2);
  static final TField _G_FIELD_DESC = new TField("g", TType.I32, 3);
  static final TField _SUB_TYPE_FIELD_DESC = new TField("subType", TType.I32, 4);
  static final TField _APP_ID_FIELD_DESC = new TField("appId", TType.STRING, 5);
  static final TField _CHANNEL_ID_FIELD_DESC = new TField("channelId", TType.STRING, 6);
  static final TField _BADGE_FIELD_DESC = new TField("badge", TType.STRING, 7);
  static final TField _ICON_URL_FIELD_DESC = new TField("iconUrl", TType.STRING, 8);
  static final TField _DOWNLOAD_URL_FIELD_DESC = new TField("downloadUrl", TType.STRING, 9);
  static final TField _LAUNCH_SCHEME_FIELD_DESC = new TField("launchScheme", TType.STRING, 10);
  static final TField _ICON_TINT_FIELD_DESC = new TField("iconTint", TType.BOOL, 11);

  String _id;
  static const int ID = 1;
  String _title;
  static const int TITLE = 2;
  int _g = 0;
  static const int G = 3;
  int _subType;
  static const int SUBTYPE = 4;
  String _appId;
  static const int APPID = 5;
  String _channelId;
  static const int CHANNELID = 6;
  String _badge;
  static const int BADGE = 7;
  String _iconUrl;
  static const int ICONURL = 8;
  String _downloadUrl;
  static const int DOWNLOADURL = 9;
  String _launchScheme;
  static const int LAUNCHSCHEME = 10;
  bool _iconTint = false;
  static const int ICONTINT = 11;

  bool __isset_g = false;
  bool __isset_subType = false;
  bool __isset_iconTint = false;

  ServiceItem() {
  }

  // id
  String get id => this._id;

  set id(String id) {
    this._id = id;
  }

  bool isSetId() => this.id != null;

  unsetId() {
    this.id = null;
  }

  // title
  String get title => this._title;

  set title(String title) {
    this._title = title;
  }

  bool isSetTitle() => this.title != null;

  unsetTitle() {
    this.title = null;
  }

  // g
  int get g => this._g;

  set g(int g) {
    this._g = g;
    this.__isset_g = true;
  }

  bool isSetG() => this.__isset_g;

  unsetG() {
    this.__isset_g = false;
  }

  // subType
  int get subType => this._subType;

  set subType(int subType) {
    this._subType = subType;
    this.__isset_subType = true;
  }

  bool isSetSubType() => this.__isset_subType;

  unsetSubType() {
    this.__isset_subType = false;
  }

  // appId
  String get appId => this._appId;

  set appId(String appId) {
    this._appId = appId;
  }

  bool isSetAppId() => this.appId != null;

  unsetAppId() {
    this.appId = null;
  }

  // channelId
  String get channelId => this._channelId;

  set channelId(String channelId) {
    this._channelId = channelId;
  }

  bool isSetChannelId() => this.channelId != null;

  unsetChannelId() {
    this.channelId = null;
  }

  // badge
  String get badge => this._badge;

  set badge(String badge) {
    this._badge = badge;
  }

  bool isSetBadge() => this.badge != null;

  unsetBadge() {
    this.badge = null;
  }

  // iconUrl
  String get iconUrl => this._iconUrl;

  set iconUrl(String iconUrl) {
    this._iconUrl = iconUrl;
  }

  bool isSetIconUrl() => this.iconUrl != null;

  unsetIconUrl() {
    this.iconUrl = null;
  }

  // downloadUrl
  String get downloadUrl => this._downloadUrl;

  set downloadUrl(String downloadUrl) {
    this._downloadUrl = downloadUrl;
  }

  bool isSetDownloadUrl() => this.downloadUrl != null;

  unsetDownloadUrl() {
    this.downloadUrl = null;
  }

  // launchScheme
  String get launchScheme => this._launchScheme;

  set launchScheme(String launchScheme) {
    this._launchScheme = launchScheme;
  }

  bool isSetLaunchScheme() => this.launchScheme != null;

  unsetLaunchScheme() {
    this.launchScheme = null;
  }

  // iconTint
  bool get iconTint => this._iconTint;

  set iconTint(bool iconTint) {
    this._iconTint = iconTint;
    this.__isset_iconTint = true;
  }

  bool isSetIconTint() => this.__isset_iconTint;

  unsetIconTint() {
    this.__isset_iconTint = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case ID:
        return this.id;
      case TITLE:
        return this.title;
      case G:
        return this.g;
      case SUBTYPE:
        return this.subType;
      case APPID:
        return this.appId;
      case CHANNELID:
        return this.channelId;
      case BADGE:
        return this.badge;
      case ICONURL:
        return this.iconUrl;
      case DOWNLOADURL:
        return this.downloadUrl;
      case LAUNCHSCHEME:
        return this.launchScheme;
      case ICONTINT:
        return this.iconTint;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          this.id = value;
        }
        break;

      case TITLE:
        if (value == null) {
          unsetTitle();
        } else {
          this.title = value;
        }
        break;

      case G:
        if (value == null) {
          unsetG();
        } else {
          this.g = value;
        }
        break;

      case SUBTYPE:
        if (value == null) {
          unsetSubType();
        } else {
          this.subType = value;
        }
        break;

      case APPID:
        if (value == null) {
          unsetAppId();
        } else {
          this.appId = value;
        }
        break;

      case CHANNELID:
        if (value == null) {
          unsetChannelId();
        } else {
          this.channelId = value;
        }
        break;

      case BADGE:
        if (value == null) {
          unsetBadge();
        } else {
          this.badge = value;
        }
        break;

      case ICONURL:
        if (value == null) {
          unsetIconUrl();
        } else {
          this.iconUrl = value;
        }
        break;

      case DOWNLOADURL:
        if (value == null) {
          unsetDownloadUrl();
        } else {
          this.downloadUrl = value;
        }
        break;

      case LAUNCHSCHEME:
        if (value == null) {
          unsetLaunchScheme();
        } else {
          this.launchScheme = value;
        }
        break;

      case ICONTINT:
        if (value == null) {
          unsetIconTint();
        } else {
          this.iconTint = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case ID:
        return isSetId();
      case TITLE:
        return isSetTitle();
      case G:
        return isSetG();
      case SUBTYPE:
        return isSetSubType();
      case APPID:
        return isSetAppId();
      case CHANNELID:
        return isSetChannelId();
      case BADGE:
        return isSetBadge();
      case ICONURL:
        return isSetIconUrl();
      case DOWNLOADURL:
        return isSetDownloadUrl();
      case LAUNCHSCHEME:
        return isSetLaunchScheme();
      case ICONTINT:
        return isSetIconTint();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ID:
          if (field.type == TType.STRING) {
            this.id = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TITLE:
          if (field.type == TType.STRING) {
            this.title = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case G:
          if (field.type == TType.I32) {
            this.g = iprot.readI32();
            this.__isset_g = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SUBTYPE:
          if (field.type == TType.I32) {
            this.subType = iprot.readI32();
            this.__isset_subType = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case APPID:
          if (field.type == TType.STRING) {
            this.appId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CHANNELID:
          if (field.type == TType.STRING) {
            this.channelId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BADGE:
          if (field.type == TType.STRING) {
            this.badge = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ICONURL:
          if (field.type == TType.STRING) {
            this.iconUrl = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DOWNLOADURL:
          if (field.type == TType.STRING) {
            this.downloadUrl = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LAUNCHSCHEME:
          if (field.type == TType.STRING) {
            this.launchScheme = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ICONTINT:
          if (field.type == TType.BOOL) {
            this.iconTint = iprot.readBool();
            this.__isset_iconTint = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.id != null) {
      oprot.writeFieldBegin(_ID_FIELD_DESC);
      oprot.writeString(this.id);
      oprot.writeFieldEnd();
    }
    if (this.title != null) {
      oprot.writeFieldBegin(_TITLE_FIELD_DESC);
      oprot.writeString(this.title);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_G_FIELD_DESC);
    oprot.writeI32(this.g);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_SUB_TYPE_FIELD_DESC);
    oprot.writeI32(this.subType);
    oprot.writeFieldEnd();
    if (this.appId != null) {
      oprot.writeFieldBegin(_APP_ID_FIELD_DESC);
      oprot.writeString(this.appId);
      oprot.writeFieldEnd();
    }
    if (this.channelId != null) {
      oprot.writeFieldBegin(_CHANNEL_ID_FIELD_DESC);
      oprot.writeString(this.channelId);
      oprot.writeFieldEnd();
    }
    if (this.badge != null) {
      oprot.writeFieldBegin(_BADGE_FIELD_DESC);
      oprot.writeString(this.badge);
      oprot.writeFieldEnd();
    }
    if (this.iconUrl != null) {
      oprot.writeFieldBegin(_ICON_URL_FIELD_DESC);
      oprot.writeString(this.iconUrl);
      oprot.writeFieldEnd();
    }
    if (this.downloadUrl != null) {
      oprot.writeFieldBegin(_DOWNLOAD_URL_FIELD_DESC);
      oprot.writeString(this.downloadUrl);
      oprot.writeFieldEnd();
    }
    if (this.launchScheme != null) {
      oprot.writeFieldBegin(_LAUNCH_SCHEME_FIELD_DESC);
      oprot.writeString(this.launchScheme);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_ICON_TINT_FIELD_DESC);
    oprot.writeBool(this.iconTint);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ServiceItem(");

    ret.write("id:");
    if (this.id == null) {
      ret.write("null");
    } else {
      ret.write(this.id);
    }

    ret.write(", ");
    ret.write("title:");
    if (this.title == null) {
      ret.write("null");
    } else {
      ret.write(this.title);
    }

    ret.write(", ");
    ret.write("g:");
    ret.write(this.g);

    ret.write(", ");
    ret.write("subType:");
    String subType_name = SubType.VALUES_TO_NAMES[this.subType];
    if (subType_name != null) {
      ret.write(subType_name);
      ret.write(" (");
    }
    ret.write(this.subType);
    if (subType_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("appId:");
    if (this.appId == null) {
      ret.write("null");
    } else {
      ret.write(this.appId);
    }

    ret.write(", ");
    ret.write("channelId:");
    if (this.channelId == null) {
      ret.write("null");
    } else {
      ret.write(this.channelId);
    }

    ret.write(", ");
    ret.write("badge:");
    if (this.badge == null) {
      ret.write("null");
    } else {
      ret.write(this.badge);
    }

    ret.write(", ");
    ret.write("iconUrl:");
    if (this.iconUrl == null) {
      ret.write("null");
    } else {
      ret.write(this.iconUrl);
    }

    ret.write(", ");
    ret.write("downloadUrl:");
    if (this.downloadUrl == null) {
      ret.write("null");
    } else {
      ret.write(this.downloadUrl);
    }

    ret.write(", ");
    ret.write("launchScheme:");
    if (this.launchScheme == null) {
      ret.write("null");
    } else {
      ret.write(this.launchScheme);
    }

    ret.write(", ");
    ret.write("iconTint:");
    ret.write(this.iconTint);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetSubType() && !SubType.VALID_VALUES.contains(subType)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'subType' has been assigned the invalid value $subType");
    }
  }

}

