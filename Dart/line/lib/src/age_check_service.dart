/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.age_check_service;

import 'dart:async';
import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';


abstract class AgeCheckService {

  Future<int> checkUserAge(int carrier, String sessionId, String verifier, int standardAge);

  Future<AgeCheckDocomoResult> checkUserAgeWithDocomo(String openIdRedirectUrl, int standardAge, String verifier);

  Future<String> retrieveOpenIdAuthUrlWithDocomo();

  Future<AgeCheckRequestResult> retrieveRequestToken(int carrier);
}

class AgeCheckServiceClient implements AgeCheckService {

  AgeCheckServiceClient(TProtocol iprot, [TProtocol oprot = null]) {
    _iprot = iprot;
    _oprot = (oprot == null) ? iprot : oprot;
  }

  TProtocol _iprot;

  TProtocol get iprot => _iprot;

  TProtocol _oprot;

  TProtocol get oprot => _oprot;

  int _seqid = 0;

  int get seqid => _seqid;

  int nextSeqid() => ++_seqid;

  Future<int> checkUserAge(int carrier, String sessionId, String verifier, int standardAge) async {
    oprot.writeMessageBegin(new TMessage("checkUserAge", TMessageType.CALL, nextSeqid()));
    checkUserAge_args args = new checkUserAge_args();
    args.carrier = carrier;
    args.sessionId = sessionId;
    args.verifier = verifier;
    args.standardAge = standardAge;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    checkUserAge_result result = new checkUserAge_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "checkUserAge failed: unknown result");
  }

  Future<AgeCheckDocomoResult> checkUserAgeWithDocomo(String openIdRedirectUrl, int standardAge, String verifier) async {
    oprot.writeMessageBegin(new TMessage("checkUserAgeWithDocomo", TMessageType.CALL, nextSeqid()));
    checkUserAgeWithDocomo_args args = new checkUserAgeWithDocomo_args();
    args.openIdRedirectUrl = openIdRedirectUrl;
    args.standardAge = standardAge;
    args.verifier = verifier;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    checkUserAgeWithDocomo_result result = new checkUserAgeWithDocomo_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "checkUserAgeWithDocomo failed: unknown result");
  }

  Future<String> retrieveOpenIdAuthUrlWithDocomo() async {
    oprot.writeMessageBegin(new TMessage("retrieveOpenIdAuthUrlWithDocomo", TMessageType.CALL, nextSeqid()));
    retrieveOpenIdAuthUrlWithDocomo_args args = new retrieveOpenIdAuthUrlWithDocomo_args();
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    retrieveOpenIdAuthUrlWithDocomo_result result = new retrieveOpenIdAuthUrlWithDocomo_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "retrieveOpenIdAuthUrlWithDocomo failed: unknown result");
  }

  Future<AgeCheckRequestResult> retrieveRequestToken(int carrier) async {
    oprot.writeMessageBegin(new TMessage("retrieveRequestToken", TMessageType.CALL, nextSeqid()));
    retrieveRequestToken_args args = new retrieveRequestToken_args();
    args.carrier = carrier;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    retrieveRequestToken_result result = new retrieveRequestToken_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "retrieveRequestToken failed: unknown result");
  }

}

typedef void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);

class AgeCheckServiceProcessor implements TProcessor {
  AgeCheckServiceProcessor(AgeCheckService iface) {
    iface_ = iface;
    PROCESS_MAP["checkUserAge"] = checkUserAge;
    PROCESS_MAP["checkUserAgeWithDocomo"] = checkUserAgeWithDocomo;
    PROCESS_MAP["retrieveOpenIdAuthUrlWithDocomo"] = retrieveOpenIdAuthUrlWithDocomo;
    PROCESS_MAP["retrieveRequestToken"] = retrieveRequestToken;
  }

  AgeCheckService iface_;
  final Map<String, ProcessFunction> PROCESS_MAP = {};

  bool process(TProtocol iprot, TProtocol oprot) {
    TMessage msg = iprot.readMessageBegin();
    ProcessFunction fn = PROCESS_MAP[msg.name];
    if (fn == null) {
      TProtocolUtil.skip(iprot, TType.STRUCT);
      iprot.readMessageEnd();
      TApplicationError x = new TApplicationError(TApplicationErrorType.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
      oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return true;
    }
    fn(msg.seqid, iprot, oprot);
    return true;
  }

  checkUserAge(int seqid, TProtocol iprot, TProtocol oprot) async {
    checkUserAge_args args = new checkUserAge_args();
    args.read(iprot);
    iprot.readMessageEnd();
    checkUserAge_result result = new checkUserAge_result();
    try {
      result.success = await iface_.checkUserAge(args.carrier, args.sessionId, args.verifier, args.standardAge);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing checkUserAge");
      oprot.writeMessageBegin(new TMessage("checkUserAge", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("checkUserAge", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  checkUserAgeWithDocomo(int seqid, TProtocol iprot, TProtocol oprot) async {
    checkUserAgeWithDocomo_args args = new checkUserAgeWithDocomo_args();
    args.read(iprot);
    iprot.readMessageEnd();
    checkUserAgeWithDocomo_result result = new checkUserAgeWithDocomo_result();
    try {
      result.success = await iface_.checkUserAgeWithDocomo(args.openIdRedirectUrl, args.standardAge, args.verifier);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing checkUserAgeWithDocomo");
      oprot.writeMessageBegin(new TMessage("checkUserAgeWithDocomo", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("checkUserAgeWithDocomo", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  retrieveOpenIdAuthUrlWithDocomo(int seqid, TProtocol iprot, TProtocol oprot) async {
    retrieveOpenIdAuthUrlWithDocomo_args args = new retrieveOpenIdAuthUrlWithDocomo_args();
    args.read(iprot);
    iprot.readMessageEnd();
    retrieveOpenIdAuthUrlWithDocomo_result result = new retrieveOpenIdAuthUrlWithDocomo_result();
    try {
      result.success = await iface_.retrieveOpenIdAuthUrlWithDocomo();
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing retrieveOpenIdAuthUrlWithDocomo");
      oprot.writeMessageBegin(new TMessage("retrieveOpenIdAuthUrlWithDocomo", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("retrieveOpenIdAuthUrlWithDocomo", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  retrieveRequestToken(int seqid, TProtocol iprot, TProtocol oprot) async {
    retrieveRequestToken_args args = new retrieveRequestToken_args();
    args.read(iprot);
    iprot.readMessageEnd();
    retrieveRequestToken_result result = new retrieveRequestToken_result();
    try {
      result.success = await iface_.retrieveRequestToken(args.carrier);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing retrieveRequestToken");
      oprot.writeMessageBegin(new TMessage("retrieveRequestToken", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("retrieveRequestToken", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

}

class checkUserAge_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("checkUserAge_args");
  static final TField _CARRIER_FIELD_DESC = new TField("carrier", TType.I32, 2);
  static final TField _SESSION_ID_FIELD_DESC = new TField("sessionId", TType.STRING, 3);
  static final TField _VERIFIER_FIELD_DESC = new TField("verifier", TType.STRING, 4);
  static final TField _STANDARD_AGE_FIELD_DESC = new TField("standardAge", TType.I32, 5);

  int _carrier;
  static const int CARRIER = 2;
  String _sessionId;
  static const int SESSIONID = 3;
  String _verifier;
  static const int VERIFIER = 4;
  int _standardAge = 0;
  static const int STANDARDAGE = 5;

  bool __isset_carrier = false;
  bool __isset_standardAge = false;

  checkUserAge_args() {
  }

  // carrier
  int get carrier => this._carrier;

  set carrier(int carrier) {
    this._carrier = carrier;
    this.__isset_carrier = true;
  }

  bool isSetCarrier() => this.__isset_carrier;

  unsetCarrier() {
    this.__isset_carrier = false;
  }

  // sessionId
  String get sessionId => this._sessionId;

  set sessionId(String sessionId) {
    this._sessionId = sessionId;
  }

  bool isSetSessionId() => this.sessionId != null;

  unsetSessionId() {
    this.sessionId = null;
  }

  // verifier
  String get verifier => this._verifier;

  set verifier(String verifier) {
    this._verifier = verifier;
  }

  bool isSetVerifier() => this.verifier != null;

  unsetVerifier() {
    this.verifier = null;
  }

  // standardAge
  int get standardAge => this._standardAge;

  set standardAge(int standardAge) {
    this._standardAge = standardAge;
    this.__isset_standardAge = true;
  }

  bool isSetStandardAge() => this.__isset_standardAge;

  unsetStandardAge() {
    this.__isset_standardAge = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case CARRIER:
        return this.carrier;
      case SESSIONID:
        return this.sessionId;
      case VERIFIER:
        return this.verifier;
      case STANDARDAGE:
        return this.standardAge;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case CARRIER:
        if (value == null) {
          unsetCarrier();
        } else {
          this.carrier = value;
        }
        break;

      case SESSIONID:
        if (value == null) {
          unsetSessionId();
        } else {
          this.sessionId = value;
        }
        break;

      case VERIFIER:
        if (value == null) {
          unsetVerifier();
        } else {
          this.verifier = value;
        }
        break;

      case STANDARDAGE:
        if (value == null) {
          unsetStandardAge();
        } else {
          this.standardAge = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case CARRIER:
        return isSetCarrier();
      case SESSIONID:
        return isSetSessionId();
      case VERIFIER:
        return isSetVerifier();
      case STANDARDAGE:
        return isSetStandardAge();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case CARRIER:
          if (field.type == TType.I32) {
            this.carrier = iprot.readI32();
            this.__isset_carrier = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SESSIONID:
          if (field.type == TType.STRING) {
            this.sessionId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case VERIFIER:
          if (field.type == TType.STRING) {
            this.verifier = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STANDARDAGE:
          if (field.type == TType.I32) {
            this.standardAge = iprot.readI32();
            this.__isset_standardAge = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_CARRIER_FIELD_DESC);
    oprot.writeI32(this.carrier);
    oprot.writeFieldEnd();
    if (this.sessionId != null) {
      oprot.writeFieldBegin(_SESSION_ID_FIELD_DESC);
      oprot.writeString(this.sessionId);
      oprot.writeFieldEnd();
    }
    if (this.verifier != null) {
      oprot.writeFieldBegin(_VERIFIER_FIELD_DESC);
      oprot.writeString(this.verifier);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_STANDARD_AGE_FIELD_DESC);
    oprot.writeI32(this.standardAge);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("checkUserAge_args(");

    ret.write("carrier:");
    String carrier_name = CarrierCode.VALUES_TO_NAMES[this.carrier];
    if (carrier_name != null) {
      ret.write(carrier_name);
      ret.write(" (");
    }
    ret.write(this.carrier);
    if (carrier_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("sessionId:");
    if (this.sessionId == null) {
      ret.write("null");
    } else {
      ret.write(this.sessionId);
    }

    ret.write(", ");
    ret.write("verifier:");
    if (this.verifier == null) {
      ret.write("null");
    } else {
      ret.write(this.verifier);
    }

    ret.write(", ");
    ret.write("standardAge:");
    ret.write(this.standardAge);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetCarrier() && !CarrierCode.VALID_VALUES.contains(carrier)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'carrier' has been assigned the invalid value $carrier");
    }
  }

}

class checkUserAge_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("checkUserAge_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.I32, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  int _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;

  bool __isset_success = false;

  checkUserAge_result() {
  }

  // success
  int get success => this._success;

  set success(int success) {
    this._success = success;
    this.__isset_success = true;
  }

  bool isSetSuccess() => this.__isset_success;

  unsetSuccess() {
    this.__isset_success = false;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.I32) {
            this.success = iprot.readI32();
            this.__isset_success = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeI32(this.success);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("checkUserAge_result(");

    ret.write("success:");
    String success_name = UserAgeType.VALUES_TO_NAMES[this.success];
    if (success_name != null) {
      ret.write(success_name);
      ret.write(" (");
    }
    ret.write(this.success);
    if (success_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetSuccess() && !UserAgeType.VALID_VALUES.contains(success)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'success' has been assigned the invalid value $success");
    }
  }

}

class checkUserAgeWithDocomo_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("checkUserAgeWithDocomo_args");
  static final TField _OPEN_ID_REDIRECT_URL_FIELD_DESC = new TField("openIdRedirectUrl", TType.STRING, 2);
  static final TField _STANDARD_AGE_FIELD_DESC = new TField("standardAge", TType.I32, 3);
  static final TField _VERIFIER_FIELD_DESC = new TField("verifier", TType.STRING, 4);

  String _openIdRedirectUrl;
  static const int OPENIDREDIRECTURL = 2;
  int _standardAge = 0;
  static const int STANDARDAGE = 3;
  String _verifier;
  static const int VERIFIER = 4;

  bool __isset_standardAge = false;

  checkUserAgeWithDocomo_args() {
  }

  // openIdRedirectUrl
  String get openIdRedirectUrl => this._openIdRedirectUrl;

  set openIdRedirectUrl(String openIdRedirectUrl) {
    this._openIdRedirectUrl = openIdRedirectUrl;
  }

  bool isSetOpenIdRedirectUrl() => this.openIdRedirectUrl != null;

  unsetOpenIdRedirectUrl() {
    this.openIdRedirectUrl = null;
  }

  // standardAge
  int get standardAge => this._standardAge;

  set standardAge(int standardAge) {
    this._standardAge = standardAge;
    this.__isset_standardAge = true;
  }

  bool isSetStandardAge() => this.__isset_standardAge;

  unsetStandardAge() {
    this.__isset_standardAge = false;
  }

  // verifier
  String get verifier => this._verifier;

  set verifier(String verifier) {
    this._verifier = verifier;
  }

  bool isSetVerifier() => this.verifier != null;

  unsetVerifier() {
    this.verifier = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case OPENIDREDIRECTURL:
        return this.openIdRedirectUrl;
      case STANDARDAGE:
        return this.standardAge;
      case VERIFIER:
        return this.verifier;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case OPENIDREDIRECTURL:
        if (value == null) {
          unsetOpenIdRedirectUrl();
        } else {
          this.openIdRedirectUrl = value;
        }
        break;

      case STANDARDAGE:
        if (value == null) {
          unsetStandardAge();
        } else {
          this.standardAge = value;
        }
        break;

      case VERIFIER:
        if (value == null) {
          unsetVerifier();
        } else {
          this.verifier = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case OPENIDREDIRECTURL:
        return isSetOpenIdRedirectUrl();
      case STANDARDAGE:
        return isSetStandardAge();
      case VERIFIER:
        return isSetVerifier();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case OPENIDREDIRECTURL:
          if (field.type == TType.STRING) {
            this.openIdRedirectUrl = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STANDARDAGE:
          if (field.type == TType.I32) {
            this.standardAge = iprot.readI32();
            this.__isset_standardAge = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case VERIFIER:
          if (field.type == TType.STRING) {
            this.verifier = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.openIdRedirectUrl != null) {
      oprot.writeFieldBegin(_OPEN_ID_REDIRECT_URL_FIELD_DESC);
      oprot.writeString(this.openIdRedirectUrl);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_STANDARD_AGE_FIELD_DESC);
    oprot.writeI32(this.standardAge);
    oprot.writeFieldEnd();
    if (this.verifier != null) {
      oprot.writeFieldBegin(_VERIFIER_FIELD_DESC);
      oprot.writeString(this.verifier);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("checkUserAgeWithDocomo_args(");

    ret.write("openIdRedirectUrl:");
    if (this.openIdRedirectUrl == null) {
      ret.write("null");
    } else {
      ret.write(this.openIdRedirectUrl);
    }

    ret.write(", ");
    ret.write("standardAge:");
    ret.write(this.standardAge);

    ret.write(", ");
    ret.write("verifier:");
    if (this.verifier == null) {
      ret.write("null");
    } else {
      ret.write(this.verifier);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class checkUserAgeWithDocomo_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("checkUserAgeWithDocomo_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  AgeCheckDocomoResult _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  checkUserAgeWithDocomo_result() {
  }

  // success
  AgeCheckDocomoResult get success => this._success;

  set success(AgeCheckDocomoResult success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new AgeCheckDocomoResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("checkUserAgeWithDocomo_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class retrieveOpenIdAuthUrlWithDocomo_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("retrieveOpenIdAuthUrlWithDocomo_args");



  retrieveOpenIdAuthUrlWithDocomo_args() {
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("retrieveOpenIdAuthUrlWithDocomo_args(");

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class retrieveOpenIdAuthUrlWithDocomo_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("retrieveOpenIdAuthUrlWithDocomo_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRING, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  String _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  retrieveOpenIdAuthUrlWithDocomo_result() {
  }

  // success
  String get success => this._success;

  set success(String success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRING) {
            this.success = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeString(this.success);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("retrieveOpenIdAuthUrlWithDocomo_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class retrieveRequestToken_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("retrieveRequestToken_args");
  static final TField _CARRIER_FIELD_DESC = new TField("carrier", TType.I32, 2);

  int _carrier;
  static const int CARRIER = 2;

  bool __isset_carrier = false;

  retrieveRequestToken_args() {
  }

  // carrier
  int get carrier => this._carrier;

  set carrier(int carrier) {
    this._carrier = carrier;
    this.__isset_carrier = true;
  }

  bool isSetCarrier() => this.__isset_carrier;

  unsetCarrier() {
    this.__isset_carrier = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case CARRIER:
        return this.carrier;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case CARRIER:
        if (value == null) {
          unsetCarrier();
        } else {
          this.carrier = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case CARRIER:
        return isSetCarrier();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case CARRIER:
          if (field.type == TType.I32) {
            this.carrier = iprot.readI32();
            this.__isset_carrier = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_CARRIER_FIELD_DESC);
    oprot.writeI32(this.carrier);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("retrieveRequestToken_args(");

    ret.write("carrier:");
    String carrier_name = CarrierCode.VALUES_TO_NAMES[this.carrier];
    if (carrier_name != null) {
      ret.write(carrier_name);
      ret.write(" (");
    }
    ret.write(this.carrier);
    if (carrier_name != null) {
      ret.write(")");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetCarrier() && !CarrierCode.VALID_VALUES.contains(carrier)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'carrier' has been assigned the invalid value $carrier");
    }
  }

}

class retrieveRequestToken_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("retrieveRequestToken_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  AgeCheckRequestResult _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  retrieveRequestToken_result() {
  }

  // success
  AgeCheckRequestResult get success => this._success;

  set success(AgeCheckRequestResult success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new AgeCheckRequestResult();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("retrieveRequestToken_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

