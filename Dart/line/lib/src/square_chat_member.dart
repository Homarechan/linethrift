/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.square_chat_member;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class SquareChatMember implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("SquareChatMember");
  static final TField _SQUARE_MEMBER_MID_FIELD_DESC = new TField("squareMemberMid", TType.STRING, 1);
  static final TField _SQUARE_CHAT_MID_FIELD_DESC = new TField("squareChatMid", TType.STRING, 2);
  static final TField _REVISION_FIELD_DESC = new TField("revision", TType.I64, 3);
  static final TField _MEMBERSHIP_STATE_FIELD_DESC = new TField("membershipState", TType.I32, 4);
  static final TField _NOTIFICATION_FOR_MESSAGE_FIELD_DESC = new TField("notificationForMessage", TType.BOOL, 5);

  String _squareMemberMid;
  static const int SQUAREMEMBERMID = 1;
  String _squareChatMid;
  static const int SQUARECHATMID = 2;
  int _revision = 0;
  static const int REVISION = 3;
  int _membershipState;
  static const int MEMBERSHIPSTATE = 4;
  bool _notificationForMessage = false;
  static const int NOTIFICATIONFORMESSAGE = 5;

  bool __isset_revision = false;
  bool __isset_membershipState = false;
  bool __isset_notificationForMessage = false;

  SquareChatMember() {
  }

  // squareMemberMid
  String get squareMemberMid => this._squareMemberMid;

  set squareMemberMid(String squareMemberMid) {
    this._squareMemberMid = squareMemberMid;
  }

  bool isSetSquareMemberMid() => this.squareMemberMid != null;

  unsetSquareMemberMid() {
    this.squareMemberMid = null;
  }

  // squareChatMid
  String get squareChatMid => this._squareChatMid;

  set squareChatMid(String squareChatMid) {
    this._squareChatMid = squareChatMid;
  }

  bool isSetSquareChatMid() => this.squareChatMid != null;

  unsetSquareChatMid() {
    this.squareChatMid = null;
  }

  // revision
  int get revision => this._revision;

  set revision(int revision) {
    this._revision = revision;
    this.__isset_revision = true;
  }

  bool isSetRevision() => this.__isset_revision;

  unsetRevision() {
    this.__isset_revision = false;
  }

  // membershipState
  int get membershipState => this._membershipState;

  set membershipState(int membershipState) {
    this._membershipState = membershipState;
    this.__isset_membershipState = true;
  }

  bool isSetMembershipState() => this.__isset_membershipState;

  unsetMembershipState() {
    this.__isset_membershipState = false;
  }

  // notificationForMessage
  bool get notificationForMessage => this._notificationForMessage;

  set notificationForMessage(bool notificationForMessage) {
    this._notificationForMessage = notificationForMessage;
    this.__isset_notificationForMessage = true;
  }

  bool isSetNotificationForMessage() => this.__isset_notificationForMessage;

  unsetNotificationForMessage() {
    this.__isset_notificationForMessage = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SQUAREMEMBERMID:
        return this.squareMemberMid;
      case SQUARECHATMID:
        return this.squareChatMid;
      case REVISION:
        return this.revision;
      case MEMBERSHIPSTATE:
        return this.membershipState;
      case NOTIFICATIONFORMESSAGE:
        return this.notificationForMessage;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SQUAREMEMBERMID:
        if (value == null) {
          unsetSquareMemberMid();
        } else {
          this.squareMemberMid = value;
        }
        break;

      case SQUARECHATMID:
        if (value == null) {
          unsetSquareChatMid();
        } else {
          this.squareChatMid = value;
        }
        break;

      case REVISION:
        if (value == null) {
          unsetRevision();
        } else {
          this.revision = value;
        }
        break;

      case MEMBERSHIPSTATE:
        if (value == null) {
          unsetMembershipState();
        } else {
          this.membershipState = value;
        }
        break;

      case NOTIFICATIONFORMESSAGE:
        if (value == null) {
          unsetNotificationForMessage();
        } else {
          this.notificationForMessage = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SQUAREMEMBERMID:
        return isSetSquareMemberMid();
      case SQUARECHATMID:
        return isSetSquareChatMid();
      case REVISION:
        return isSetRevision();
      case MEMBERSHIPSTATE:
        return isSetMembershipState();
      case NOTIFICATIONFORMESSAGE:
        return isSetNotificationForMessage();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SQUAREMEMBERMID:
          if (field.type == TType.STRING) {
            this.squareMemberMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SQUARECHATMID:
          if (field.type == TType.STRING) {
            this.squareChatMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case REVISION:
          if (field.type == TType.I64) {
            this.revision = iprot.readI64();
            this.__isset_revision = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MEMBERSHIPSTATE:
          if (field.type == TType.I32) {
            this.membershipState = iprot.readI32();
            this.__isset_membershipState = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NOTIFICATIONFORMESSAGE:
          if (field.type == TType.BOOL) {
            this.notificationForMessage = iprot.readBool();
            this.__isset_notificationForMessage = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.squareMemberMid != null) {
      oprot.writeFieldBegin(_SQUARE_MEMBER_MID_FIELD_DESC);
      oprot.writeString(this.squareMemberMid);
      oprot.writeFieldEnd();
    }
    if (this.squareChatMid != null) {
      oprot.writeFieldBegin(_SQUARE_CHAT_MID_FIELD_DESC);
      oprot.writeString(this.squareChatMid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_REVISION_FIELD_DESC);
    oprot.writeI64(this.revision);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_MEMBERSHIP_STATE_FIELD_DESC);
    oprot.writeI32(this.membershipState);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_NOTIFICATION_FOR_MESSAGE_FIELD_DESC);
    oprot.writeBool(this.notificationForMessage);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("SquareChatMember(");

    ret.write("squareMemberMid:");
    if (this.squareMemberMid == null) {
      ret.write("null");
    } else {
      ret.write(this.squareMemberMid);
    }

    ret.write(", ");
    ret.write("squareChatMid:");
    if (this.squareChatMid == null) {
      ret.write("null");
    } else {
      ret.write(this.squareChatMid);
    }

    ret.write(", ");
    ret.write("revision:");
    ret.write(this.revision);

    ret.write(", ");
    ret.write("membershipState:");
    String membershipState_name = SquareChatMembershipState.VALUES_TO_NAMES[this.membershipState];
    if (membershipState_name != null) {
      ret.write(membershipState_name);
      ret.write(" (");
    }
    ret.write(this.membershipState);
    if (membershipState_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("notificationForMessage:");
    ret.write(this.notificationForMessage);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetMembershipState() && !SquareChatMembershipState.VALID_VALUES.contains(membershipState)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'membershipState' has been assigned the invalid value $membershipState");
    }
  }

}

