/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.product;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class Product implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("Product");
  static final TField _PRODUCT_ID_FIELD_DESC = new TField("productId", TType.STRING, 1);
  static final TField _PACKAGE_ID_FIELD_DESC = new TField("packageId", TType.I64, 2);
  static final TField _VERSION_FIELD_DESC = new TField("version", TType.I32, 3);
  static final TField _AUTHOR_NAME_FIELD_DESC = new TField("authorName", TType.STRING, 4);
  static final TField _ON_SALE_FIELD_DESC = new TField("onSale", TType.BOOL, 5);
  static final TField _VALID_DAYS_FIELD_DESC = new TField("validDays", TType.I32, 6);
  static final TField _SALE_TYPE_FIELD_DESC = new TField("saleType", TType.I32, 7);
  static final TField _COPYRIGHT_FIELD_DESC = new TField("copyright", TType.STRING, 8);
  static final TField _TITLE_FIELD_DESC = new TField("title", TType.STRING, 9);
  static final TField _DESCRIPTION_TEXT_FIELD_DESC = new TField("descriptionText", TType.STRING, 10);
  static final TField _SHOP_ORDER_ID_FIELD_DESC = new TField("shopOrderId", TType.I64, 11);
  static final TField _FROM_MID_FIELD_DESC = new TField("fromMid", TType.STRING, 12);
  static final TField _TO_MID_FIELD_DESC = new TField("toMid", TType.STRING, 13);
  static final TField _VALID_UNTIL_FIELD_DESC = new TField("validUntil", TType.I64, 14);
  static final TField _PRICE_TIER_FIELD_DESC = new TField("priceTier", TType.I32, 15);
  static final TField _PRICE_FIELD_DESC = new TField("price", TType.STRING, 16);
  static final TField _CURRENCY_FIELD_DESC = new TField("currency", TType.STRING, 17);
  static final TField _CURRENCY_SYMBOL_FIELD_DESC = new TField("currencySymbol", TType.STRING, 18);
  static final TField _PAYMENT_TYPE_FIELD_DESC = new TField("paymentType", TType.I32, 19);
  static final TField _CREATE_DATE_FIELD_DESC = new TField("createDate", TType.I64, 20);
  static final TField _OWN_FLAG_FIELD_DESC = new TField("ownFlag", TType.BOOL, 21);
  static final TField _EVENT_TYPE_FIELD_DESC = new TField("eventType", TType.I32, 22);
  static final TField _URL_SCHEMA_FIELD_DESC = new TField("urlSchema", TType.STRING, 23);
  static final TField _DOWNLOAD_URL_FIELD_DESC = new TField("downloadUrl", TType.STRING, 24);
  static final TField _BUDDY_MID_FIELD_DESC = new TField("buddyMid", TType.STRING, 25);
  static final TField _PUBLISH_SINCE_FIELD_DESC = new TField("publishSince", TType.I64, 26);
  static final TField _NEW_FLAG_FIELD_DESC = new TField("newFlag", TType.BOOL, 27);
  static final TField _MISSION_FLAG_FIELD_DESC = new TField("missionFlag", TType.BOOL, 28);
  static final TField _CATEGORIES_FIELD_DESC = new TField("categories", TType.LIST, 29);
  static final TField _MISSION_BUTTON_TEXT_FIELD_DESC = new TField("missionButtonText", TType.STRING, 30);
  static final TField _MISSION_SHORT_DESCRIPTION_FIELD_DESC = new TField("missionShortDescription", TType.STRING, 31);
  static final TField _AUTHOR_ID_FIELD_DESC = new TField("authorId", TType.STRING, 32);
  static final TField _GRANTED_BY_DEFAULT_FIELD_DESC = new TField("grantedByDefault", TType.BOOL, 41);
  static final TField _DISPLAY_ORDER_FIELD_DESC = new TField("displayOrder", TType.I32, 42);
  static final TField _AVAILABLE_FOR_PRESENT_FIELD_DESC = new TField("availableForPresent", TType.BOOL, 43);
  static final TField _AVAILABLE_FOR_MYSELF_FIELD_DESC = new TField("availableForMyself", TType.BOOL, 44);
  static final TField _HAS_ANIMATION_FIELD_DESC = new TField("hasAnimation", TType.BOOL, 51);
  static final TField _HAS_SOUND_FIELD_DESC = new TField("hasSound", TType.BOOL, 52);
  static final TField _RECOMMENDATIONS_ENABLED_FIELD_DESC = new TField("recommendationsEnabled", TType.BOOL, 53);
  static final TField _STICKER_RESOURCE_TYPE_FIELD_DESC = new TField("stickerResourceType", TType.I32, 54);

  String _productId;
  static const int PRODUCTID = 1;
  int _packageId = 0;
  static const int PACKAGEID = 2;
  int _version = 0;
  static const int VERSION = 3;
  String _authorName;
  static const int AUTHORNAME = 4;
  bool _onSale = false;
  static const int ONSALE = 5;
  int _validDays = 0;
  static const int VALIDDAYS = 6;
  int _saleType = 0;
  static const int SALETYPE = 7;
  String _copyright;
  static const int COPYRIGHT = 8;
  String _title;
  static const int TITLE = 9;
  String _descriptionText;
  static const int DESCRIPTIONTEXT = 10;
  int _shopOrderId = 0;
  static const int SHOPORDERID = 11;
  String _fromMid;
  static const int FROMMID = 12;
  String _toMid;
  static const int TOMID = 13;
  int _validUntil = 0;
  static const int VALIDUNTIL = 14;
  int _priceTier = 0;
  static const int PRICETIER = 15;
  String _price;
  static const int PRICE = 16;
  String _currency;
  static const int CURRENCY = 17;
  String _currencySymbol;
  static const int CURRENCYSYMBOL = 18;
  int _paymentType;
  static const int PAYMENTTYPE = 19;
  int _createDate = 0;
  static const int CREATEDATE = 20;
  bool _ownFlag = false;
  static const int OWNFLAG = 21;
  int _eventType;
  static const int EVENTTYPE = 22;
  String _urlSchema;
  static const int URLSCHEMA = 23;
  String _downloadUrl;
  static const int DOWNLOADURL = 24;
  String _buddyMid;
  static const int BUDDYMID = 25;
  int _publishSince = 0;
  static const int PUBLISHSINCE = 26;
  bool _newFlag = false;
  static const int NEWFLAG = 27;
  bool _missionFlag = false;
  static const int MISSIONFLAG = 28;
  List<ProductCategory> _categories;
  static const int CATEGORIES = 29;
  String _missionButtonText;
  static const int MISSIONBUTTONTEXT = 30;
  String _missionShortDescription;
  static const int MISSIONSHORTDESCRIPTION = 31;
  String _authorId;
  static const int AUTHORID = 32;
  bool _grantedByDefault = false;
  static const int GRANTEDBYDEFAULT = 41;
  int _displayOrder = 0;
  static const int DISPLAYORDER = 42;
  bool _availableForPresent = false;
  static const int AVAILABLEFORPRESENT = 43;
  bool _availableForMyself = false;
  static const int AVAILABLEFORMYSELF = 44;
  bool _hasAnimation = false;
  static const int HASANIMATION = 51;
  bool _hasSound = false;
  static const int HASSOUND = 52;
  bool _recommendationsEnabled = false;
  static const int RECOMMENDATIONSENABLED = 53;
  int _stickerResourceType;
  static const int STICKERRESOURCETYPE = 54;

  bool __isset_packageId = false;
  bool __isset_version = false;
  bool __isset_onSale = false;
  bool __isset_validDays = false;
  bool __isset_saleType = false;
  bool __isset_shopOrderId = false;
  bool __isset_validUntil = false;
  bool __isset_priceTier = false;
  bool __isset_paymentType = false;
  bool __isset_createDate = false;
  bool __isset_ownFlag = false;
  bool __isset_eventType = false;
  bool __isset_publishSince = false;
  bool __isset_newFlag = false;
  bool __isset_missionFlag = false;
  bool __isset_grantedByDefault = false;
  bool __isset_displayOrder = false;
  bool __isset_availableForPresent = false;
  bool __isset_availableForMyself = false;
  bool __isset_hasAnimation = false;
  bool __isset_hasSound = false;
  bool __isset_recommendationsEnabled = false;
  bool __isset_stickerResourceType = false;

  Product() {
  }

  // productId
  String get productId => this._productId;

  set productId(String productId) {
    this._productId = productId;
  }

  bool isSetProductId() => this.productId != null;

  unsetProductId() {
    this.productId = null;
  }

  // packageId
  int get packageId => this._packageId;

  set packageId(int packageId) {
    this._packageId = packageId;
    this.__isset_packageId = true;
  }

  bool isSetPackageId() => this.__isset_packageId;

  unsetPackageId() {
    this.__isset_packageId = false;
  }

  // version
  int get version => this._version;

  set version(int version) {
    this._version = version;
    this.__isset_version = true;
  }

  bool isSetVersion() => this.__isset_version;

  unsetVersion() {
    this.__isset_version = false;
  }

  // authorName
  String get authorName => this._authorName;

  set authorName(String authorName) {
    this._authorName = authorName;
  }

  bool isSetAuthorName() => this.authorName != null;

  unsetAuthorName() {
    this.authorName = null;
  }

  // onSale
  bool get onSale => this._onSale;

  set onSale(bool onSale) {
    this._onSale = onSale;
    this.__isset_onSale = true;
  }

  bool isSetOnSale() => this.__isset_onSale;

  unsetOnSale() {
    this.__isset_onSale = false;
  }

  // validDays
  int get validDays => this._validDays;

  set validDays(int validDays) {
    this._validDays = validDays;
    this.__isset_validDays = true;
  }

  bool isSetValidDays() => this.__isset_validDays;

  unsetValidDays() {
    this.__isset_validDays = false;
  }

  // saleType
  int get saleType => this._saleType;

  set saleType(int saleType) {
    this._saleType = saleType;
    this.__isset_saleType = true;
  }

  bool isSetSaleType() => this.__isset_saleType;

  unsetSaleType() {
    this.__isset_saleType = false;
  }

  // copyright
  String get copyright => this._copyright;

  set copyright(String copyright) {
    this._copyright = copyright;
  }

  bool isSetCopyright() => this.copyright != null;

  unsetCopyright() {
    this.copyright = null;
  }

  // title
  String get title => this._title;

  set title(String title) {
    this._title = title;
  }

  bool isSetTitle() => this.title != null;

  unsetTitle() {
    this.title = null;
  }

  // descriptionText
  String get descriptionText => this._descriptionText;

  set descriptionText(String descriptionText) {
    this._descriptionText = descriptionText;
  }

  bool isSetDescriptionText() => this.descriptionText != null;

  unsetDescriptionText() {
    this.descriptionText = null;
  }

  // shopOrderId
  int get shopOrderId => this._shopOrderId;

  set shopOrderId(int shopOrderId) {
    this._shopOrderId = shopOrderId;
    this.__isset_shopOrderId = true;
  }

  bool isSetShopOrderId() => this.__isset_shopOrderId;

  unsetShopOrderId() {
    this.__isset_shopOrderId = false;
  }

  // fromMid
  String get fromMid => this._fromMid;

  set fromMid(String fromMid) {
    this._fromMid = fromMid;
  }

  bool isSetFromMid() => this.fromMid != null;

  unsetFromMid() {
    this.fromMid = null;
  }

  // toMid
  String get toMid => this._toMid;

  set toMid(String toMid) {
    this._toMid = toMid;
  }

  bool isSetToMid() => this.toMid != null;

  unsetToMid() {
    this.toMid = null;
  }

  // validUntil
  int get validUntil => this._validUntil;

  set validUntil(int validUntil) {
    this._validUntil = validUntil;
    this.__isset_validUntil = true;
  }

  bool isSetValidUntil() => this.__isset_validUntil;

  unsetValidUntil() {
    this.__isset_validUntil = false;
  }

  // priceTier
  int get priceTier => this._priceTier;

  set priceTier(int priceTier) {
    this._priceTier = priceTier;
    this.__isset_priceTier = true;
  }

  bool isSetPriceTier() => this.__isset_priceTier;

  unsetPriceTier() {
    this.__isset_priceTier = false;
  }

  // price
  String get price => this._price;

  set price(String price) {
    this._price = price;
  }

  bool isSetPrice() => this.price != null;

  unsetPrice() {
    this.price = null;
  }

  // currency
  String get currency => this._currency;

  set currency(String currency) {
    this._currency = currency;
  }

  bool isSetCurrency() => this.currency != null;

  unsetCurrency() {
    this.currency = null;
  }

  // currencySymbol
  String get currencySymbol => this._currencySymbol;

  set currencySymbol(String currencySymbol) {
    this._currencySymbol = currencySymbol;
  }

  bool isSetCurrencySymbol() => this.currencySymbol != null;

  unsetCurrencySymbol() {
    this.currencySymbol = null;
  }

  // paymentType
  int get paymentType => this._paymentType;

  set paymentType(int paymentType) {
    this._paymentType = paymentType;
    this.__isset_paymentType = true;
  }

  bool isSetPaymentType() => this.__isset_paymentType;

  unsetPaymentType() {
    this.__isset_paymentType = false;
  }

  // createDate
  int get createDate => this._createDate;

  set createDate(int createDate) {
    this._createDate = createDate;
    this.__isset_createDate = true;
  }

  bool isSetCreateDate() => this.__isset_createDate;

  unsetCreateDate() {
    this.__isset_createDate = false;
  }

  // ownFlag
  bool get ownFlag => this._ownFlag;

  set ownFlag(bool ownFlag) {
    this._ownFlag = ownFlag;
    this.__isset_ownFlag = true;
  }

  bool isSetOwnFlag() => this.__isset_ownFlag;

  unsetOwnFlag() {
    this.__isset_ownFlag = false;
  }

  // eventType
  int get eventType => this._eventType;

  set eventType(int eventType) {
    this._eventType = eventType;
    this.__isset_eventType = true;
  }

  bool isSetEventType() => this.__isset_eventType;

  unsetEventType() {
    this.__isset_eventType = false;
  }

  // urlSchema
  String get urlSchema => this._urlSchema;

  set urlSchema(String urlSchema) {
    this._urlSchema = urlSchema;
  }

  bool isSetUrlSchema() => this.urlSchema != null;

  unsetUrlSchema() {
    this.urlSchema = null;
  }

  // downloadUrl
  String get downloadUrl => this._downloadUrl;

  set downloadUrl(String downloadUrl) {
    this._downloadUrl = downloadUrl;
  }

  bool isSetDownloadUrl() => this.downloadUrl != null;

  unsetDownloadUrl() {
    this.downloadUrl = null;
  }

  // buddyMid
  String get buddyMid => this._buddyMid;

  set buddyMid(String buddyMid) {
    this._buddyMid = buddyMid;
  }

  bool isSetBuddyMid() => this.buddyMid != null;

  unsetBuddyMid() {
    this.buddyMid = null;
  }

  // publishSince
  int get publishSince => this._publishSince;

  set publishSince(int publishSince) {
    this._publishSince = publishSince;
    this.__isset_publishSince = true;
  }

  bool isSetPublishSince() => this.__isset_publishSince;

  unsetPublishSince() {
    this.__isset_publishSince = false;
  }

  // newFlag
  bool get newFlag => this._newFlag;

  set newFlag(bool newFlag) {
    this._newFlag = newFlag;
    this.__isset_newFlag = true;
  }

  bool isSetNewFlag() => this.__isset_newFlag;

  unsetNewFlag() {
    this.__isset_newFlag = false;
  }

  // missionFlag
  bool get missionFlag => this._missionFlag;

  set missionFlag(bool missionFlag) {
    this._missionFlag = missionFlag;
    this.__isset_missionFlag = true;
  }

  bool isSetMissionFlag() => this.__isset_missionFlag;

  unsetMissionFlag() {
    this.__isset_missionFlag = false;
  }

  // categories
  List<ProductCategory> get categories => this._categories;

  set categories(List<ProductCategory> categories) {
    this._categories = categories;
  }

  bool isSetCategories() => this.categories != null;

  unsetCategories() {
    this.categories = null;
  }

  // missionButtonText
  String get missionButtonText => this._missionButtonText;

  set missionButtonText(String missionButtonText) {
    this._missionButtonText = missionButtonText;
  }

  bool isSetMissionButtonText() => this.missionButtonText != null;

  unsetMissionButtonText() {
    this.missionButtonText = null;
  }

  // missionShortDescription
  String get missionShortDescription => this._missionShortDescription;

  set missionShortDescription(String missionShortDescription) {
    this._missionShortDescription = missionShortDescription;
  }

  bool isSetMissionShortDescription() => this.missionShortDescription != null;

  unsetMissionShortDescription() {
    this.missionShortDescription = null;
  }

  // authorId
  String get authorId => this._authorId;

  set authorId(String authorId) {
    this._authorId = authorId;
  }

  bool isSetAuthorId() => this.authorId != null;

  unsetAuthorId() {
    this.authorId = null;
  }

  // grantedByDefault
  bool get grantedByDefault => this._grantedByDefault;

  set grantedByDefault(bool grantedByDefault) {
    this._grantedByDefault = grantedByDefault;
    this.__isset_grantedByDefault = true;
  }

  bool isSetGrantedByDefault() => this.__isset_grantedByDefault;

  unsetGrantedByDefault() {
    this.__isset_grantedByDefault = false;
  }

  // displayOrder
  int get displayOrder => this._displayOrder;

  set displayOrder(int displayOrder) {
    this._displayOrder = displayOrder;
    this.__isset_displayOrder = true;
  }

  bool isSetDisplayOrder() => this.__isset_displayOrder;

  unsetDisplayOrder() {
    this.__isset_displayOrder = false;
  }

  // availableForPresent
  bool get availableForPresent => this._availableForPresent;

  set availableForPresent(bool availableForPresent) {
    this._availableForPresent = availableForPresent;
    this.__isset_availableForPresent = true;
  }

  bool isSetAvailableForPresent() => this.__isset_availableForPresent;

  unsetAvailableForPresent() {
    this.__isset_availableForPresent = false;
  }

  // availableForMyself
  bool get availableForMyself => this._availableForMyself;

  set availableForMyself(bool availableForMyself) {
    this._availableForMyself = availableForMyself;
    this.__isset_availableForMyself = true;
  }

  bool isSetAvailableForMyself() => this.__isset_availableForMyself;

  unsetAvailableForMyself() {
    this.__isset_availableForMyself = false;
  }

  // hasAnimation
  bool get hasAnimation => this._hasAnimation;

  set hasAnimation(bool hasAnimation) {
    this._hasAnimation = hasAnimation;
    this.__isset_hasAnimation = true;
  }

  bool isSetHasAnimation() => this.__isset_hasAnimation;

  unsetHasAnimation() {
    this.__isset_hasAnimation = false;
  }

  // hasSound
  bool get hasSound => this._hasSound;

  set hasSound(bool hasSound) {
    this._hasSound = hasSound;
    this.__isset_hasSound = true;
  }

  bool isSetHasSound() => this.__isset_hasSound;

  unsetHasSound() {
    this.__isset_hasSound = false;
  }

  // recommendationsEnabled
  bool get recommendationsEnabled => this._recommendationsEnabled;

  set recommendationsEnabled(bool recommendationsEnabled) {
    this._recommendationsEnabled = recommendationsEnabled;
    this.__isset_recommendationsEnabled = true;
  }

  bool isSetRecommendationsEnabled() => this.__isset_recommendationsEnabled;

  unsetRecommendationsEnabled() {
    this.__isset_recommendationsEnabled = false;
  }

  // stickerResourceType
  int get stickerResourceType => this._stickerResourceType;

  set stickerResourceType(int stickerResourceType) {
    this._stickerResourceType = stickerResourceType;
    this.__isset_stickerResourceType = true;
  }

  bool isSetStickerResourceType() => this.__isset_stickerResourceType;

  unsetStickerResourceType() {
    this.__isset_stickerResourceType = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case PRODUCTID:
        return this.productId;
      case PACKAGEID:
        return this.packageId;
      case VERSION:
        return this.version;
      case AUTHORNAME:
        return this.authorName;
      case ONSALE:
        return this.onSale;
      case VALIDDAYS:
        return this.validDays;
      case SALETYPE:
        return this.saleType;
      case COPYRIGHT:
        return this.copyright;
      case TITLE:
        return this.title;
      case DESCRIPTIONTEXT:
        return this.descriptionText;
      case SHOPORDERID:
        return this.shopOrderId;
      case FROMMID:
        return this.fromMid;
      case TOMID:
        return this.toMid;
      case VALIDUNTIL:
        return this.validUntil;
      case PRICETIER:
        return this.priceTier;
      case PRICE:
        return this.price;
      case CURRENCY:
        return this.currency;
      case CURRENCYSYMBOL:
        return this.currencySymbol;
      case PAYMENTTYPE:
        return this.paymentType;
      case CREATEDATE:
        return this.createDate;
      case OWNFLAG:
        return this.ownFlag;
      case EVENTTYPE:
        return this.eventType;
      case URLSCHEMA:
        return this.urlSchema;
      case DOWNLOADURL:
        return this.downloadUrl;
      case BUDDYMID:
        return this.buddyMid;
      case PUBLISHSINCE:
        return this.publishSince;
      case NEWFLAG:
        return this.newFlag;
      case MISSIONFLAG:
        return this.missionFlag;
      case CATEGORIES:
        return this.categories;
      case MISSIONBUTTONTEXT:
        return this.missionButtonText;
      case MISSIONSHORTDESCRIPTION:
        return this.missionShortDescription;
      case AUTHORID:
        return this.authorId;
      case GRANTEDBYDEFAULT:
        return this.grantedByDefault;
      case DISPLAYORDER:
        return this.displayOrder;
      case AVAILABLEFORPRESENT:
        return this.availableForPresent;
      case AVAILABLEFORMYSELF:
        return this.availableForMyself;
      case HASANIMATION:
        return this.hasAnimation;
      case HASSOUND:
        return this.hasSound;
      case RECOMMENDATIONSENABLED:
        return this.recommendationsEnabled;
      case STICKERRESOURCETYPE:
        return this.stickerResourceType;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case PRODUCTID:
        if (value == null) {
          unsetProductId();
        } else {
          this.productId = value;
        }
        break;

      case PACKAGEID:
        if (value == null) {
          unsetPackageId();
        } else {
          this.packageId = value;
        }
        break;

      case VERSION:
        if (value == null) {
          unsetVersion();
        } else {
          this.version = value;
        }
        break;

      case AUTHORNAME:
        if (value == null) {
          unsetAuthorName();
        } else {
          this.authorName = value;
        }
        break;

      case ONSALE:
        if (value == null) {
          unsetOnSale();
        } else {
          this.onSale = value;
        }
        break;

      case VALIDDAYS:
        if (value == null) {
          unsetValidDays();
        } else {
          this.validDays = value;
        }
        break;

      case SALETYPE:
        if (value == null) {
          unsetSaleType();
        } else {
          this.saleType = value;
        }
        break;

      case COPYRIGHT:
        if (value == null) {
          unsetCopyright();
        } else {
          this.copyright = value;
        }
        break;

      case TITLE:
        if (value == null) {
          unsetTitle();
        } else {
          this.title = value;
        }
        break;

      case DESCRIPTIONTEXT:
        if (value == null) {
          unsetDescriptionText();
        } else {
          this.descriptionText = value;
        }
        break;

      case SHOPORDERID:
        if (value == null) {
          unsetShopOrderId();
        } else {
          this.shopOrderId = value;
        }
        break;

      case FROMMID:
        if (value == null) {
          unsetFromMid();
        } else {
          this.fromMid = value;
        }
        break;

      case TOMID:
        if (value == null) {
          unsetToMid();
        } else {
          this.toMid = value;
        }
        break;

      case VALIDUNTIL:
        if (value == null) {
          unsetValidUntil();
        } else {
          this.validUntil = value;
        }
        break;

      case PRICETIER:
        if (value == null) {
          unsetPriceTier();
        } else {
          this.priceTier = value;
        }
        break;

      case PRICE:
        if (value == null) {
          unsetPrice();
        } else {
          this.price = value;
        }
        break;

      case CURRENCY:
        if (value == null) {
          unsetCurrency();
        } else {
          this.currency = value;
        }
        break;

      case CURRENCYSYMBOL:
        if (value == null) {
          unsetCurrencySymbol();
        } else {
          this.currencySymbol = value;
        }
        break;

      case PAYMENTTYPE:
        if (value == null) {
          unsetPaymentType();
        } else {
          this.paymentType = value;
        }
        break;

      case CREATEDATE:
        if (value == null) {
          unsetCreateDate();
        } else {
          this.createDate = value;
        }
        break;

      case OWNFLAG:
        if (value == null) {
          unsetOwnFlag();
        } else {
          this.ownFlag = value;
        }
        break;

      case EVENTTYPE:
        if (value == null) {
          unsetEventType();
        } else {
          this.eventType = value;
        }
        break;

      case URLSCHEMA:
        if (value == null) {
          unsetUrlSchema();
        } else {
          this.urlSchema = value;
        }
        break;

      case DOWNLOADURL:
        if (value == null) {
          unsetDownloadUrl();
        } else {
          this.downloadUrl = value;
        }
        break;

      case BUDDYMID:
        if (value == null) {
          unsetBuddyMid();
        } else {
          this.buddyMid = value;
        }
        break;

      case PUBLISHSINCE:
        if (value == null) {
          unsetPublishSince();
        } else {
          this.publishSince = value;
        }
        break;

      case NEWFLAG:
        if (value == null) {
          unsetNewFlag();
        } else {
          this.newFlag = value;
        }
        break;

      case MISSIONFLAG:
        if (value == null) {
          unsetMissionFlag();
        } else {
          this.missionFlag = value;
        }
        break;

      case CATEGORIES:
        if (value == null) {
          unsetCategories();
        } else {
          this.categories = value;
        }
        break;

      case MISSIONBUTTONTEXT:
        if (value == null) {
          unsetMissionButtonText();
        } else {
          this.missionButtonText = value;
        }
        break;

      case MISSIONSHORTDESCRIPTION:
        if (value == null) {
          unsetMissionShortDescription();
        } else {
          this.missionShortDescription = value;
        }
        break;

      case AUTHORID:
        if (value == null) {
          unsetAuthorId();
        } else {
          this.authorId = value;
        }
        break;

      case GRANTEDBYDEFAULT:
        if (value == null) {
          unsetGrantedByDefault();
        } else {
          this.grantedByDefault = value;
        }
        break;

      case DISPLAYORDER:
        if (value == null) {
          unsetDisplayOrder();
        } else {
          this.displayOrder = value;
        }
        break;

      case AVAILABLEFORPRESENT:
        if (value == null) {
          unsetAvailableForPresent();
        } else {
          this.availableForPresent = value;
        }
        break;

      case AVAILABLEFORMYSELF:
        if (value == null) {
          unsetAvailableForMyself();
        } else {
          this.availableForMyself = value;
        }
        break;

      case HASANIMATION:
        if (value == null) {
          unsetHasAnimation();
        } else {
          this.hasAnimation = value;
        }
        break;

      case HASSOUND:
        if (value == null) {
          unsetHasSound();
        } else {
          this.hasSound = value;
        }
        break;

      case RECOMMENDATIONSENABLED:
        if (value == null) {
          unsetRecommendationsEnabled();
        } else {
          this.recommendationsEnabled = value;
        }
        break;

      case STICKERRESOURCETYPE:
        if (value == null) {
          unsetStickerResourceType();
        } else {
          this.stickerResourceType = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case PRODUCTID:
        return isSetProductId();
      case PACKAGEID:
        return isSetPackageId();
      case VERSION:
        return isSetVersion();
      case AUTHORNAME:
        return isSetAuthorName();
      case ONSALE:
        return isSetOnSale();
      case VALIDDAYS:
        return isSetValidDays();
      case SALETYPE:
        return isSetSaleType();
      case COPYRIGHT:
        return isSetCopyright();
      case TITLE:
        return isSetTitle();
      case DESCRIPTIONTEXT:
        return isSetDescriptionText();
      case SHOPORDERID:
        return isSetShopOrderId();
      case FROMMID:
        return isSetFromMid();
      case TOMID:
        return isSetToMid();
      case VALIDUNTIL:
        return isSetValidUntil();
      case PRICETIER:
        return isSetPriceTier();
      case PRICE:
        return isSetPrice();
      case CURRENCY:
        return isSetCurrency();
      case CURRENCYSYMBOL:
        return isSetCurrencySymbol();
      case PAYMENTTYPE:
        return isSetPaymentType();
      case CREATEDATE:
        return isSetCreateDate();
      case OWNFLAG:
        return isSetOwnFlag();
      case EVENTTYPE:
        return isSetEventType();
      case URLSCHEMA:
        return isSetUrlSchema();
      case DOWNLOADURL:
        return isSetDownloadUrl();
      case BUDDYMID:
        return isSetBuddyMid();
      case PUBLISHSINCE:
        return isSetPublishSince();
      case NEWFLAG:
        return isSetNewFlag();
      case MISSIONFLAG:
        return isSetMissionFlag();
      case CATEGORIES:
        return isSetCategories();
      case MISSIONBUTTONTEXT:
        return isSetMissionButtonText();
      case MISSIONSHORTDESCRIPTION:
        return isSetMissionShortDescription();
      case AUTHORID:
        return isSetAuthorId();
      case GRANTEDBYDEFAULT:
        return isSetGrantedByDefault();
      case DISPLAYORDER:
        return isSetDisplayOrder();
      case AVAILABLEFORPRESENT:
        return isSetAvailableForPresent();
      case AVAILABLEFORMYSELF:
        return isSetAvailableForMyself();
      case HASANIMATION:
        return isSetHasAnimation();
      case HASSOUND:
        return isSetHasSound();
      case RECOMMENDATIONSENABLED:
        return isSetRecommendationsEnabled();
      case STICKERRESOURCETYPE:
        return isSetStickerResourceType();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case PRODUCTID:
          if (field.type == TType.STRING) {
            this.productId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PACKAGEID:
          if (field.type == TType.I64) {
            this.packageId = iprot.readI64();
            this.__isset_packageId = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case VERSION:
          if (field.type == TType.I32) {
            this.version = iprot.readI32();
            this.__isset_version = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AUTHORNAME:
          if (field.type == TType.STRING) {
            this.authorName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ONSALE:
          if (field.type == TType.BOOL) {
            this.onSale = iprot.readBool();
            this.__isset_onSale = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case VALIDDAYS:
          if (field.type == TType.I32) {
            this.validDays = iprot.readI32();
            this.__isset_validDays = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SALETYPE:
          if (field.type == TType.I32) {
            this.saleType = iprot.readI32();
            this.__isset_saleType = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COPYRIGHT:
          if (field.type == TType.STRING) {
            this.copyright = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TITLE:
          if (field.type == TType.STRING) {
            this.title = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DESCRIPTIONTEXT:
          if (field.type == TType.STRING) {
            this.descriptionText = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SHOPORDERID:
          if (field.type == TType.I64) {
            this.shopOrderId = iprot.readI64();
            this.__isset_shopOrderId = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FROMMID:
          if (field.type == TType.STRING) {
            this.fromMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TOMID:
          if (field.type == TType.STRING) {
            this.toMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case VALIDUNTIL:
          if (field.type == TType.I64) {
            this.validUntil = iprot.readI64();
            this.__isset_validUntil = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PRICETIER:
          if (field.type == TType.I32) {
            this.priceTier = iprot.readI32();
            this.__isset_priceTier = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PRICE:
          if (field.type == TType.STRING) {
            this.price = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CURRENCY:
          if (field.type == TType.STRING) {
            this.currency = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CURRENCYSYMBOL:
          if (field.type == TType.STRING) {
            this.currencySymbol = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PAYMENTTYPE:
          if (field.type == TType.I32) {
            this.paymentType = iprot.readI32();
            this.__isset_paymentType = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CREATEDATE:
          if (field.type == TType.I64) {
            this.createDate = iprot.readI64();
            this.__isset_createDate = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case OWNFLAG:
          if (field.type == TType.BOOL) {
            this.ownFlag = iprot.readBool();
            this.__isset_ownFlag = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EVENTTYPE:
          if (field.type == TType.I32) {
            this.eventType = iprot.readI32();
            this.__isset_eventType = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case URLSCHEMA:
          if (field.type == TType.STRING) {
            this.urlSchema = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DOWNLOADURL:
          if (field.type == TType.STRING) {
            this.downloadUrl = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BUDDYMID:
          if (field.type == TType.STRING) {
            this.buddyMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PUBLISHSINCE:
          if (field.type == TType.I64) {
            this.publishSince = iprot.readI64();
            this.__isset_publishSince = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NEWFLAG:
          if (field.type == TType.BOOL) {
            this.newFlag = iprot.readBool();
            this.__isset_newFlag = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MISSIONFLAG:
          if (field.type == TType.BOOL) {
            this.missionFlag = iprot.readBool();
            this.__isset_missionFlag = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CATEGORIES:
          if (field.type == TType.LIST) {
            {
              TList _list202 = iprot.readListBegin();
              this.categories = new List<ProductCategory>();
              for (int _i203 = 0; _i203 < _list202.length; ++_i203) {
                ProductCategory _elem204;
                _elem204 = new ProductCategory();
                _elem204.read(iprot);
                this.categories.add(_elem204);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MISSIONBUTTONTEXT:
          if (field.type == TType.STRING) {
            this.missionButtonText = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MISSIONSHORTDESCRIPTION:
          if (field.type == TType.STRING) {
            this.missionShortDescription = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AUTHORID:
          if (field.type == TType.STRING) {
            this.authorId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case GRANTEDBYDEFAULT:
          if (field.type == TType.BOOL) {
            this.grantedByDefault = iprot.readBool();
            this.__isset_grantedByDefault = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DISPLAYORDER:
          if (field.type == TType.I32) {
            this.displayOrder = iprot.readI32();
            this.__isset_displayOrder = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AVAILABLEFORPRESENT:
          if (field.type == TType.BOOL) {
            this.availableForPresent = iprot.readBool();
            this.__isset_availableForPresent = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AVAILABLEFORMYSELF:
          if (field.type == TType.BOOL) {
            this.availableForMyself = iprot.readBool();
            this.__isset_availableForMyself = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case HASANIMATION:
          if (field.type == TType.BOOL) {
            this.hasAnimation = iprot.readBool();
            this.__isset_hasAnimation = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case HASSOUND:
          if (field.type == TType.BOOL) {
            this.hasSound = iprot.readBool();
            this.__isset_hasSound = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RECOMMENDATIONSENABLED:
          if (field.type == TType.BOOL) {
            this.recommendationsEnabled = iprot.readBool();
            this.__isset_recommendationsEnabled = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STICKERRESOURCETYPE:
          if (field.type == TType.I32) {
            this.stickerResourceType = iprot.readI32();
            this.__isset_stickerResourceType = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.productId != null) {
      oprot.writeFieldBegin(_PRODUCT_ID_FIELD_DESC);
      oprot.writeString(this.productId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_PACKAGE_ID_FIELD_DESC);
    oprot.writeI64(this.packageId);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_VERSION_FIELD_DESC);
    oprot.writeI32(this.version);
    oprot.writeFieldEnd();
    if (this.authorName != null) {
      oprot.writeFieldBegin(_AUTHOR_NAME_FIELD_DESC);
      oprot.writeString(this.authorName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_ON_SALE_FIELD_DESC);
    oprot.writeBool(this.onSale);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_VALID_DAYS_FIELD_DESC);
    oprot.writeI32(this.validDays);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_SALE_TYPE_FIELD_DESC);
    oprot.writeI32(this.saleType);
    oprot.writeFieldEnd();
    if (this.copyright != null) {
      oprot.writeFieldBegin(_COPYRIGHT_FIELD_DESC);
      oprot.writeString(this.copyright);
      oprot.writeFieldEnd();
    }
    if (this.title != null) {
      oprot.writeFieldBegin(_TITLE_FIELD_DESC);
      oprot.writeString(this.title);
      oprot.writeFieldEnd();
    }
    if (this.descriptionText != null) {
      oprot.writeFieldBegin(_DESCRIPTION_TEXT_FIELD_DESC);
      oprot.writeString(this.descriptionText);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_SHOP_ORDER_ID_FIELD_DESC);
    oprot.writeI64(this.shopOrderId);
    oprot.writeFieldEnd();
    if (this.fromMid != null) {
      oprot.writeFieldBegin(_FROM_MID_FIELD_DESC);
      oprot.writeString(this.fromMid);
      oprot.writeFieldEnd();
    }
    if (this.toMid != null) {
      oprot.writeFieldBegin(_TO_MID_FIELD_DESC);
      oprot.writeString(this.toMid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_VALID_UNTIL_FIELD_DESC);
    oprot.writeI64(this.validUntil);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_PRICE_TIER_FIELD_DESC);
    oprot.writeI32(this.priceTier);
    oprot.writeFieldEnd();
    if (this.price != null) {
      oprot.writeFieldBegin(_PRICE_FIELD_DESC);
      oprot.writeString(this.price);
      oprot.writeFieldEnd();
    }
    if (this.currency != null) {
      oprot.writeFieldBegin(_CURRENCY_FIELD_DESC);
      oprot.writeString(this.currency);
      oprot.writeFieldEnd();
    }
    if (this.currencySymbol != null) {
      oprot.writeFieldBegin(_CURRENCY_SYMBOL_FIELD_DESC);
      oprot.writeString(this.currencySymbol);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_PAYMENT_TYPE_FIELD_DESC);
    oprot.writeI32(this.paymentType);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_CREATE_DATE_FIELD_DESC);
    oprot.writeI64(this.createDate);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_OWN_FLAG_FIELD_DESC);
    oprot.writeBool(this.ownFlag);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_EVENT_TYPE_FIELD_DESC);
    oprot.writeI32(this.eventType);
    oprot.writeFieldEnd();
    if (this.urlSchema != null) {
      oprot.writeFieldBegin(_URL_SCHEMA_FIELD_DESC);
      oprot.writeString(this.urlSchema);
      oprot.writeFieldEnd();
    }
    if (this.downloadUrl != null) {
      oprot.writeFieldBegin(_DOWNLOAD_URL_FIELD_DESC);
      oprot.writeString(this.downloadUrl);
      oprot.writeFieldEnd();
    }
    if (this.buddyMid != null) {
      oprot.writeFieldBegin(_BUDDY_MID_FIELD_DESC);
      oprot.writeString(this.buddyMid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_PUBLISH_SINCE_FIELD_DESC);
    oprot.writeI64(this.publishSince);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_NEW_FLAG_FIELD_DESC);
    oprot.writeBool(this.newFlag);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_MISSION_FLAG_FIELD_DESC);
    oprot.writeBool(this.missionFlag);
    oprot.writeFieldEnd();
    if (this.categories != null) {
      oprot.writeFieldBegin(_CATEGORIES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.categories.length));
        for (var elem205 in this.categories) {
          elem205.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.missionButtonText != null) {
      oprot.writeFieldBegin(_MISSION_BUTTON_TEXT_FIELD_DESC);
      oprot.writeString(this.missionButtonText);
      oprot.writeFieldEnd();
    }
    if (this.missionShortDescription != null) {
      oprot.writeFieldBegin(_MISSION_SHORT_DESCRIPTION_FIELD_DESC);
      oprot.writeString(this.missionShortDescription);
      oprot.writeFieldEnd();
    }
    if (this.authorId != null) {
      oprot.writeFieldBegin(_AUTHOR_ID_FIELD_DESC);
      oprot.writeString(this.authorId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_GRANTED_BY_DEFAULT_FIELD_DESC);
    oprot.writeBool(this.grantedByDefault);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_DISPLAY_ORDER_FIELD_DESC);
    oprot.writeI32(this.displayOrder);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_AVAILABLE_FOR_PRESENT_FIELD_DESC);
    oprot.writeBool(this.availableForPresent);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_AVAILABLE_FOR_MYSELF_FIELD_DESC);
    oprot.writeBool(this.availableForMyself);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_HAS_ANIMATION_FIELD_DESC);
    oprot.writeBool(this.hasAnimation);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_HAS_SOUND_FIELD_DESC);
    oprot.writeBool(this.hasSound);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_RECOMMENDATIONS_ENABLED_FIELD_DESC);
    oprot.writeBool(this.recommendationsEnabled);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_STICKER_RESOURCE_TYPE_FIELD_DESC);
    oprot.writeI32(this.stickerResourceType);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("Product(");

    ret.write("productId:");
    if (this.productId == null) {
      ret.write("null");
    } else {
      ret.write(this.productId);
    }

    ret.write(", ");
    ret.write("packageId:");
    ret.write(this.packageId);

    ret.write(", ");
    ret.write("version:");
    ret.write(this.version);

    ret.write(", ");
    ret.write("authorName:");
    if (this.authorName == null) {
      ret.write("null");
    } else {
      ret.write(this.authorName);
    }

    ret.write(", ");
    ret.write("onSale:");
    ret.write(this.onSale);

    ret.write(", ");
    ret.write("validDays:");
    ret.write(this.validDays);

    ret.write(", ");
    ret.write("saleType:");
    ret.write(this.saleType);

    ret.write(", ");
    ret.write("copyright:");
    if (this.copyright == null) {
      ret.write("null");
    } else {
      ret.write(this.copyright);
    }

    ret.write(", ");
    ret.write("title:");
    if (this.title == null) {
      ret.write("null");
    } else {
      ret.write(this.title);
    }

    ret.write(", ");
    ret.write("descriptionText:");
    if (this.descriptionText == null) {
      ret.write("null");
    } else {
      ret.write(this.descriptionText);
    }

    ret.write(", ");
    ret.write("shopOrderId:");
    ret.write(this.shopOrderId);

    ret.write(", ");
    ret.write("fromMid:");
    if (this.fromMid == null) {
      ret.write("null");
    } else {
      ret.write(this.fromMid);
    }

    ret.write(", ");
    ret.write("toMid:");
    if (this.toMid == null) {
      ret.write("null");
    } else {
      ret.write(this.toMid);
    }

    ret.write(", ");
    ret.write("validUntil:");
    ret.write(this.validUntil);

    ret.write(", ");
    ret.write("priceTier:");
    ret.write(this.priceTier);

    ret.write(", ");
    ret.write("price:");
    if (this.price == null) {
      ret.write("null");
    } else {
      ret.write(this.price);
    }

    ret.write(", ");
    ret.write("currency:");
    if (this.currency == null) {
      ret.write("null");
    } else {
      ret.write(this.currency);
    }

    ret.write(", ");
    ret.write("currencySymbol:");
    if (this.currencySymbol == null) {
      ret.write("null");
    } else {
      ret.write(this.currencySymbol);
    }

    ret.write(", ");
    ret.write("paymentType:");
    String paymentType_name = PaymentType.VALUES_TO_NAMES[this.paymentType];
    if (paymentType_name != null) {
      ret.write(paymentType_name);
      ret.write(" (");
    }
    ret.write(this.paymentType);
    if (paymentType_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("createDate:");
    ret.write(this.createDate);

    ret.write(", ");
    ret.write("ownFlag:");
    ret.write(this.ownFlag);

    ret.write(", ");
    ret.write("eventType:");
    String eventType_name = ProductEventType.VALUES_TO_NAMES[this.eventType];
    if (eventType_name != null) {
      ret.write(eventType_name);
      ret.write(" (");
    }
    ret.write(this.eventType);
    if (eventType_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("urlSchema:");
    if (this.urlSchema == null) {
      ret.write("null");
    } else {
      ret.write(this.urlSchema);
    }

    ret.write(", ");
    ret.write("downloadUrl:");
    if (this.downloadUrl == null) {
      ret.write("null");
    } else {
      ret.write(this.downloadUrl);
    }

    ret.write(", ");
    ret.write("buddyMid:");
    if (this.buddyMid == null) {
      ret.write("null");
    } else {
      ret.write(this.buddyMid);
    }

    ret.write(", ");
    ret.write("publishSince:");
    ret.write(this.publishSince);

    ret.write(", ");
    ret.write("newFlag:");
    ret.write(this.newFlag);

    ret.write(", ");
    ret.write("missionFlag:");
    ret.write(this.missionFlag);

    ret.write(", ");
    ret.write("categories:");
    if (this.categories == null) {
      ret.write("null");
    } else {
      ret.write(this.categories);
    }

    ret.write(", ");
    ret.write("missionButtonText:");
    if (this.missionButtonText == null) {
      ret.write("null");
    } else {
      ret.write(this.missionButtonText);
    }

    ret.write(", ");
    ret.write("missionShortDescription:");
    if (this.missionShortDescription == null) {
      ret.write("null");
    } else {
      ret.write(this.missionShortDescription);
    }

    ret.write(", ");
    ret.write("authorId:");
    if (this.authorId == null) {
      ret.write("null");
    } else {
      ret.write(this.authorId);
    }

    ret.write(", ");
    ret.write("grantedByDefault:");
    ret.write(this.grantedByDefault);

    ret.write(", ");
    ret.write("displayOrder:");
    ret.write(this.displayOrder);

    ret.write(", ");
    ret.write("availableForPresent:");
    ret.write(this.availableForPresent);

    ret.write(", ");
    ret.write("availableForMyself:");
    ret.write(this.availableForMyself);

    ret.write(", ");
    ret.write("hasAnimation:");
    ret.write(this.hasAnimation);

    ret.write(", ");
    ret.write("hasSound:");
    ret.write(this.hasSound);

    ret.write(", ");
    ret.write("recommendationsEnabled:");
    ret.write(this.recommendationsEnabled);

    ret.write(", ");
    ret.write("stickerResourceType:");
    String stickerResourceType_name = StickerResourceType.VALUES_TO_NAMES[this.stickerResourceType];
    if (stickerResourceType_name != null) {
      ret.write(stickerResourceType_name);
      ret.write(" (");
    }
    ret.write(this.stickerResourceType);
    if (stickerResourceType_name != null) {
      ret.write(")");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetPaymentType() && !PaymentType.VALID_VALUES.contains(paymentType)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'paymentType' has been assigned the invalid value $paymentType");
    }
    if (isSetEventType() && !ProductEventType.VALID_VALUES.contains(eventType)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'eventType' has been assigned the invalid value $eventType");
    }
    if (isSetStickerResourceType() && !StickerResourceType.VALID_VALUES.contains(stickerResourceType)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'stickerResourceType' has been assigned the invalid value $stickerResourceType");
    }
  }

}

