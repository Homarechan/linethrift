/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.contact_modification;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class ContactModification implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ContactModification");
  static final TField _TYPE_FIELD_DESC = new TField("type", TType.I32, 1);
  static final TField _LUID_FIELD_DESC = new TField("luid", TType.STRING, 2);
  static final TField _PHONES_FIELD_DESC = new TField("phones", TType.LIST, 11);
  static final TField _EMAILS_FIELD_DESC = new TField("emails", TType.LIST, 12);
  static final TField _USERIDS_FIELD_DESC = new TField("userids", TType.LIST, 13);

  int _type;
  static const int TYPE = 1;
  String _luid;
  static const int LUID = 2;
  List<String> _phones;
  static const int PHONES = 11;
  List<String> _emails;
  static const int EMAILS = 12;
  List<String> _userids;
  static const int USERIDS = 13;

  bool __isset_type = false;

  ContactModification() {
  }

  // type
  int get type => this._type;

  set type(int type) {
    this._type = type;
    this.__isset_type = true;
  }

  bool isSetType() => this.__isset_type;

  unsetType() {
    this.__isset_type = false;
  }

  // luid
  String get luid => this._luid;

  set luid(String luid) {
    this._luid = luid;
  }

  bool isSetLuid() => this.luid != null;

  unsetLuid() {
    this.luid = null;
  }

  // phones
  List<String> get phones => this._phones;

  set phones(List<String> phones) {
    this._phones = phones;
  }

  bool isSetPhones() => this.phones != null;

  unsetPhones() {
    this.phones = null;
  }

  // emails
  List<String> get emails => this._emails;

  set emails(List<String> emails) {
    this._emails = emails;
  }

  bool isSetEmails() => this.emails != null;

  unsetEmails() {
    this.emails = null;
  }

  // userids
  List<String> get userids => this._userids;

  set userids(List<String> userids) {
    this._userids = userids;
  }

  bool isSetUserids() => this.userids != null;

  unsetUserids() {
    this.userids = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case TYPE:
        return this.type;
      case LUID:
        return this.luid;
      case PHONES:
        return this.phones;
      case EMAILS:
        return this.emails;
      case USERIDS:
        return this.userids;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          this.type = value;
        }
        break;

      case LUID:
        if (value == null) {
          unsetLuid();
        } else {
          this.luid = value;
        }
        break;

      case PHONES:
        if (value == null) {
          unsetPhones();
        } else {
          this.phones = value;
        }
        break;

      case EMAILS:
        if (value == null) {
          unsetEmails();
        } else {
          this.emails = value;
        }
        break;

      case USERIDS:
        if (value == null) {
          unsetUserids();
        } else {
          this.userids = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case TYPE:
        return isSetType();
      case LUID:
        return isSetLuid();
      case PHONES:
        return isSetPhones();
      case EMAILS:
        return isSetEmails();
      case USERIDS:
        return isSetUserids();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case TYPE:
          if (field.type == TType.I32) {
            this.type = iprot.readI32();
            this.__isset_type = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LUID:
          if (field.type == TType.STRING) {
            this.luid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PHONES:
          if (field.type == TType.LIST) {
            {
              TList _list206 = iprot.readListBegin();
              this.phones = new List<String>();
              for (int _i207 = 0; _i207 < _list206.length; ++_i207) {
                String _elem208;
                _elem208 = iprot.readString();
                this.phones.add(_elem208);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EMAILS:
          if (field.type == TType.LIST) {
            {
              TList _list209 = iprot.readListBegin();
              this.emails = new List<String>();
              for (int _i210 = 0; _i210 < _list209.length; ++_i210) {
                String _elem211;
                _elem211 = iprot.readString();
                this.emails.add(_elem211);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case USERIDS:
          if (field.type == TType.LIST) {
            {
              TList _list212 = iprot.readListBegin();
              this.userids = new List<String>();
              for (int _i213 = 0; _i213 < _list212.length; ++_i213) {
                String _elem214;
                _elem214 = iprot.readString();
                this.userids.add(_elem214);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_TYPE_FIELD_DESC);
    oprot.writeI32(this.type);
    oprot.writeFieldEnd();
    if (this.luid != null) {
      oprot.writeFieldBegin(_LUID_FIELD_DESC);
      oprot.writeString(this.luid);
      oprot.writeFieldEnd();
    }
    if (this.phones != null) {
      oprot.writeFieldBegin(_PHONES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.phones.length));
        for (var elem215 in this.phones) {
          oprot.writeString(elem215);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.emails != null) {
      oprot.writeFieldBegin(_EMAILS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.emails.length));
        for (var elem216 in this.emails) {
          oprot.writeString(elem216);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.userids != null) {
      oprot.writeFieldBegin(_USERIDS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.userids.length));
        for (var elem217 in this.userids) {
          oprot.writeString(elem217);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ContactModification(");

    ret.write("type:");
    String type_name = ModificationType.VALUES_TO_NAMES[this.type];
    if (type_name != null) {
      ret.write(type_name);
      ret.write(" (");
    }
    ret.write(this.type);
    if (type_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("luid:");
    if (this.luid == null) {
      ret.write("null");
    } else {
      ret.write(this.luid);
    }

    ret.write(", ");
    ret.write("phones:");
    if (this.phones == null) {
      ret.write("null");
    } else {
      ret.write(this.phones);
    }

    ret.write(", ");
    ret.write("emails:");
    if (this.emails == null) {
      ret.write("null");
    } else {
      ret.write(this.emails);
    }

    ret.write(", ");
    ret.write("userids:");
    if (this.userids == null) {
      ret.write("null");
    } else {
      ret.write(this.userids);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetType() && !ModificationType.VALID_VALUES.contains(type)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'type' has been assigned the invalid value $type");
    }
  }

}

