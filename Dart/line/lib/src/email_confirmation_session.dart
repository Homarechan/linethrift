/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.email_confirmation_session;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class EmailConfirmationSession implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("EmailConfirmationSession");
  static final TField _EMAIL_CONFIRMATION_TYPE_FIELD_DESC = new TField("emailConfirmationType", TType.I32, 1);
  static final TField _VERIFIER_FIELD_DESC = new TField("verifier", TType.STRING, 2);
  static final TField _TARGET_EMAIL_FIELD_DESC = new TField("targetEmail", TType.STRING, 3);

  int _emailConfirmationType;
  static const int EMAILCONFIRMATIONTYPE = 1;
  String _verifier;
  static const int VERIFIER = 2;
  String _targetEmail;
  static const int TARGETEMAIL = 3;

  bool __isset_emailConfirmationType = false;

  EmailConfirmationSession() {
  }

  // emailConfirmationType
  int get emailConfirmationType => this._emailConfirmationType;

  set emailConfirmationType(int emailConfirmationType) {
    this._emailConfirmationType = emailConfirmationType;
    this.__isset_emailConfirmationType = true;
  }

  bool isSetEmailConfirmationType() => this.__isset_emailConfirmationType;

  unsetEmailConfirmationType() {
    this.__isset_emailConfirmationType = false;
  }

  // verifier
  String get verifier => this._verifier;

  set verifier(String verifier) {
    this._verifier = verifier;
  }

  bool isSetVerifier() => this.verifier != null;

  unsetVerifier() {
    this.verifier = null;
  }

  // targetEmail
  String get targetEmail => this._targetEmail;

  set targetEmail(String targetEmail) {
    this._targetEmail = targetEmail;
  }

  bool isSetTargetEmail() => this.targetEmail != null;

  unsetTargetEmail() {
    this.targetEmail = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case EMAILCONFIRMATIONTYPE:
        return this.emailConfirmationType;
      case VERIFIER:
        return this.verifier;
      case TARGETEMAIL:
        return this.targetEmail;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case EMAILCONFIRMATIONTYPE:
        if (value == null) {
          unsetEmailConfirmationType();
        } else {
          this.emailConfirmationType = value;
        }
        break;

      case VERIFIER:
        if (value == null) {
          unsetVerifier();
        } else {
          this.verifier = value;
        }
        break;

      case TARGETEMAIL:
        if (value == null) {
          unsetTargetEmail();
        } else {
          this.targetEmail = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case EMAILCONFIRMATIONTYPE:
        return isSetEmailConfirmationType();
      case VERIFIER:
        return isSetVerifier();
      case TARGETEMAIL:
        return isSetTargetEmail();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case EMAILCONFIRMATIONTYPE:
          if (field.type == TType.I32) {
            this.emailConfirmationType = iprot.readI32();
            this.__isset_emailConfirmationType = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case VERIFIER:
          if (field.type == TType.STRING) {
            this.verifier = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TARGETEMAIL:
          if (field.type == TType.STRING) {
            this.targetEmail = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_EMAIL_CONFIRMATION_TYPE_FIELD_DESC);
    oprot.writeI32(this.emailConfirmationType);
    oprot.writeFieldEnd();
    if (this.verifier != null) {
      oprot.writeFieldBegin(_VERIFIER_FIELD_DESC);
      oprot.writeString(this.verifier);
      oprot.writeFieldEnd();
    }
    if (this.targetEmail != null) {
      oprot.writeFieldBegin(_TARGET_EMAIL_FIELD_DESC);
      oprot.writeString(this.targetEmail);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("EmailConfirmationSession(");

    ret.write("emailConfirmationType:");
    String emailConfirmationType_name = EmailConfirmationType.VALUES_TO_NAMES[this.emailConfirmationType];
    if (emailConfirmationType_name != null) {
      ret.write(emailConfirmationType_name);
      ret.write(" (");
    }
    ret.write(this.emailConfirmationType);
    if (emailConfirmationType_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("verifier:");
    if (this.verifier == null) {
      ret.write("null");
    } else {
      ret.write(this.verifier);
    }

    ret.write(", ");
    ret.write("targetEmail:");
    if (this.targetEmail == null) {
      ret.write("null");
    } else {
      ret.write(this.targetEmail);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetEmailConfirmationType() && !EmailConfirmationType.VALID_VALUES.contains(emailConfirmationType)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'emailConfirmationType' has been assigned the invalid value $emailConfirmationType");
    }
  }

}

