/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.ticket;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class Ticket implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("Ticket");
  static final TField _ID_FIELD_DESC = new TField("id", TType.STRING, 1);
  static final TField _EXPIRATION_TIME_FIELD_DESC = new TField("expirationTime", TType.I64, 10);
  static final TField _MAX_USE_COUNT_FIELD_DESC = new TField("maxUseCount", TType.I32, 21);

  String _id;
  static const int ID = 1;
  int _expirationTime = 0;
  static const int EXPIRATIONTIME = 10;
  int _maxUseCount = 0;
  static const int MAXUSECOUNT = 21;

  bool __isset_expirationTime = false;
  bool __isset_maxUseCount = false;

  Ticket() {
  }

  // id
  String get id => this._id;

  set id(String id) {
    this._id = id;
  }

  bool isSetId() => this.id != null;

  unsetId() {
    this.id = null;
  }

  // expirationTime
  int get expirationTime => this._expirationTime;

  set expirationTime(int expirationTime) {
    this._expirationTime = expirationTime;
    this.__isset_expirationTime = true;
  }

  bool isSetExpirationTime() => this.__isset_expirationTime;

  unsetExpirationTime() {
    this.__isset_expirationTime = false;
  }

  // maxUseCount
  int get maxUseCount => this._maxUseCount;

  set maxUseCount(int maxUseCount) {
    this._maxUseCount = maxUseCount;
    this.__isset_maxUseCount = true;
  }

  bool isSetMaxUseCount() => this.__isset_maxUseCount;

  unsetMaxUseCount() {
    this.__isset_maxUseCount = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case ID:
        return this.id;
      case EXPIRATIONTIME:
        return this.expirationTime;
      case MAXUSECOUNT:
        return this.maxUseCount;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          this.id = value;
        }
        break;

      case EXPIRATIONTIME:
        if (value == null) {
          unsetExpirationTime();
        } else {
          this.expirationTime = value;
        }
        break;

      case MAXUSECOUNT:
        if (value == null) {
          unsetMaxUseCount();
        } else {
          this.maxUseCount = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case ID:
        return isSetId();
      case EXPIRATIONTIME:
        return isSetExpirationTime();
      case MAXUSECOUNT:
        return isSetMaxUseCount();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ID:
          if (field.type == TType.STRING) {
            this.id = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EXPIRATIONTIME:
          if (field.type == TType.I64) {
            this.expirationTime = iprot.readI64();
            this.__isset_expirationTime = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MAXUSECOUNT:
          if (field.type == TType.I32) {
            this.maxUseCount = iprot.readI32();
            this.__isset_maxUseCount = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.id != null) {
      oprot.writeFieldBegin(_ID_FIELD_DESC);
      oprot.writeString(this.id);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_EXPIRATION_TIME_FIELD_DESC);
    oprot.writeI64(this.expirationTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_MAX_USE_COUNT_FIELD_DESC);
    oprot.writeI32(this.maxUseCount);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("Ticket(");

    ret.write("id:");
    if (this.id == null) {
      ret.write("null");
    } else {
      ret.write(this.id);
    }

    ret.write(", ");
    ret.write("expirationTime:");
    ret.write(this.expirationTime);

    ret.write(", ");
    ret.write("maxUseCount:");
    ret.write(this.maxUseCount);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

