/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.account_supervisor_service;

import 'dart:async';
import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';


abstract class AccountSupervisorService {

  Future<RSAKey> getRSAKey();

  Future notifyEmailConfirmationResult(Map<String, String> parameterMap);

  Future<String> registerVirtualAccount(String locale, String encryptedVirtualUserId, String encryptedPassword);

  Future requestVirtualAccountPasswordChange(String virtualMid, String encryptedVirtualUserId, String encryptedOldPassword, String encryptedNewPassword);

  Future requestVirtualAccountPasswordSet(String virtualMid, String encryptedVirtualUserId, String encryptedNewPassword);

  Future unregisterVirtualAccount(String virtualMid);
}

class AccountSupervisorServiceClient implements AccountSupervisorService {

  AccountSupervisorServiceClient(TProtocol iprot, [TProtocol oprot = null]) {
    _iprot = iprot;
    _oprot = (oprot == null) ? iprot : oprot;
  }

  TProtocol _iprot;

  TProtocol get iprot => _iprot;

  TProtocol _oprot;

  TProtocol get oprot => _oprot;

  int _seqid = 0;

  int get seqid => _seqid;

  int nextSeqid() => ++_seqid;

  Future<RSAKey> getRSAKey() async {
    oprot.writeMessageBegin(new TMessage("getRSAKey", TMessageType.CALL, nextSeqid()));
    getRSAKey_args args = new getRSAKey_args();
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    getRSAKey_result result = new getRSAKey_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "getRSAKey failed: unknown result");
  }

  Future notifyEmailConfirmationResult(Map<String, String> parameterMap) async {
    oprot.writeMessageBegin(new TMessage("notifyEmailConfirmationResult", TMessageType.CALL, nextSeqid()));
    notifyEmailConfirmationResult_args args = new notifyEmailConfirmationResult_args();
    args.parameterMap = parameterMap;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    notifyEmailConfirmationResult_result result = new notifyEmailConfirmationResult_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.e != null) {
      throw result.e;
    }
    return;
  }

  Future<String> registerVirtualAccount(String locale, String encryptedVirtualUserId, String encryptedPassword) async {
    oprot.writeMessageBegin(new TMessage("registerVirtualAccount", TMessageType.CALL, nextSeqid()));
    registerVirtualAccount_args args = new registerVirtualAccount_args();
    args.locale = locale;
    args.encryptedVirtualUserId = encryptedVirtualUserId;
    args.encryptedPassword = encryptedPassword;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    registerVirtualAccount_result result = new registerVirtualAccount_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "registerVirtualAccount failed: unknown result");
  }

  Future requestVirtualAccountPasswordChange(String virtualMid, String encryptedVirtualUserId, String encryptedOldPassword, String encryptedNewPassword) async {
    oprot.writeMessageBegin(new TMessage("requestVirtualAccountPasswordChange", TMessageType.CALL, nextSeqid()));
    requestVirtualAccountPasswordChange_args args = new requestVirtualAccountPasswordChange_args();
    args.virtualMid = virtualMid;
    args.encryptedVirtualUserId = encryptedVirtualUserId;
    args.encryptedOldPassword = encryptedOldPassword;
    args.encryptedNewPassword = encryptedNewPassword;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    requestVirtualAccountPasswordChange_result result = new requestVirtualAccountPasswordChange_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.e != null) {
      throw result.e;
    }
    return;
  }

  Future requestVirtualAccountPasswordSet(String virtualMid, String encryptedVirtualUserId, String encryptedNewPassword) async {
    oprot.writeMessageBegin(new TMessage("requestVirtualAccountPasswordSet", TMessageType.CALL, nextSeqid()));
    requestVirtualAccountPasswordSet_args args = new requestVirtualAccountPasswordSet_args();
    args.virtualMid = virtualMid;
    args.encryptedVirtualUserId = encryptedVirtualUserId;
    args.encryptedNewPassword = encryptedNewPassword;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    requestVirtualAccountPasswordSet_result result = new requestVirtualAccountPasswordSet_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.e != null) {
      throw result.e;
    }
    return;
  }

  Future unregisterVirtualAccount(String virtualMid) async {
    oprot.writeMessageBegin(new TMessage("unregisterVirtualAccount", TMessageType.CALL, nextSeqid()));
    unregisterVirtualAccount_args args = new unregisterVirtualAccount_args();
    args.virtualMid = virtualMid;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    unregisterVirtualAccount_result result = new unregisterVirtualAccount_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.e != null) {
      throw result.e;
    }
    return;
  }

}

typedef void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);

class AccountSupervisorServiceProcessor implements TProcessor {
  AccountSupervisorServiceProcessor(AccountSupervisorService iface) {
    iface_ = iface;
    PROCESS_MAP["getRSAKey"] = getRSAKey;
    PROCESS_MAP["notifyEmailConfirmationResult"] = notifyEmailConfirmationResult;
    PROCESS_MAP["registerVirtualAccount"] = registerVirtualAccount;
    PROCESS_MAP["requestVirtualAccountPasswordChange"] = requestVirtualAccountPasswordChange;
    PROCESS_MAP["requestVirtualAccountPasswordSet"] = requestVirtualAccountPasswordSet;
    PROCESS_MAP["unregisterVirtualAccount"] = unregisterVirtualAccount;
  }

  AccountSupervisorService iface_;
  final Map<String, ProcessFunction> PROCESS_MAP = {};

  bool process(TProtocol iprot, TProtocol oprot) {
    TMessage msg = iprot.readMessageBegin();
    ProcessFunction fn = PROCESS_MAP[msg.name];
    if (fn == null) {
      TProtocolUtil.skip(iprot, TType.STRUCT);
      iprot.readMessageEnd();
      TApplicationError x = new TApplicationError(TApplicationErrorType.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
      oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return true;
    }
    fn(msg.seqid, iprot, oprot);
    return true;
  }

  getRSAKey(int seqid, TProtocol iprot, TProtocol oprot) async {
    getRSAKey_args args = new getRSAKey_args();
    args.read(iprot);
    iprot.readMessageEnd();
    getRSAKey_result result = new getRSAKey_result();
    try {
      result.success = await iface_.getRSAKey();
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing getRSAKey");
      oprot.writeMessageBegin(new TMessage("getRSAKey", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("getRSAKey", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  notifyEmailConfirmationResult(int seqid, TProtocol iprot, TProtocol oprot) {
    notifyEmailConfirmationResult_args args = new notifyEmailConfirmationResult_args();
    args.read(iprot);
    iprot.readMessageEnd();
    notifyEmailConfirmationResult_result result = new notifyEmailConfirmationResult_result();
    try {
      iface_.notifyEmailConfirmationResult(args.parameterMap);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing notifyEmailConfirmationResult");
      oprot.writeMessageBegin(new TMessage("notifyEmailConfirmationResult", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("notifyEmailConfirmationResult", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  registerVirtualAccount(int seqid, TProtocol iprot, TProtocol oprot) async {
    registerVirtualAccount_args args = new registerVirtualAccount_args();
    args.read(iprot);
    iprot.readMessageEnd();
    registerVirtualAccount_result result = new registerVirtualAccount_result();
    try {
      result.success = await iface_.registerVirtualAccount(args.locale, args.encryptedVirtualUserId, args.encryptedPassword);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing registerVirtualAccount");
      oprot.writeMessageBegin(new TMessage("registerVirtualAccount", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("registerVirtualAccount", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  requestVirtualAccountPasswordChange(int seqid, TProtocol iprot, TProtocol oprot) {
    requestVirtualAccountPasswordChange_args args = new requestVirtualAccountPasswordChange_args();
    args.read(iprot);
    iprot.readMessageEnd();
    requestVirtualAccountPasswordChange_result result = new requestVirtualAccountPasswordChange_result();
    try {
      iface_.requestVirtualAccountPasswordChange(args.virtualMid, args.encryptedVirtualUserId, args.encryptedOldPassword, args.encryptedNewPassword);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing requestVirtualAccountPasswordChange");
      oprot.writeMessageBegin(new TMessage("requestVirtualAccountPasswordChange", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("requestVirtualAccountPasswordChange", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  requestVirtualAccountPasswordSet(int seqid, TProtocol iprot, TProtocol oprot) {
    requestVirtualAccountPasswordSet_args args = new requestVirtualAccountPasswordSet_args();
    args.read(iprot);
    iprot.readMessageEnd();
    requestVirtualAccountPasswordSet_result result = new requestVirtualAccountPasswordSet_result();
    try {
      iface_.requestVirtualAccountPasswordSet(args.virtualMid, args.encryptedVirtualUserId, args.encryptedNewPassword);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing requestVirtualAccountPasswordSet");
      oprot.writeMessageBegin(new TMessage("requestVirtualAccountPasswordSet", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("requestVirtualAccountPasswordSet", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  unregisterVirtualAccount(int seqid, TProtocol iprot, TProtocol oprot) {
    unregisterVirtualAccount_args args = new unregisterVirtualAccount_args();
    args.read(iprot);
    iprot.readMessageEnd();
    unregisterVirtualAccount_result result = new unregisterVirtualAccount_result();
    try {
      iface_.unregisterVirtualAccount(args.virtualMid);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing unregisterVirtualAccount");
      oprot.writeMessageBegin(new TMessage("unregisterVirtualAccount", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("unregisterVirtualAccount", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

}

class getRSAKey_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getRSAKey_args");



  getRSAKey_args() {
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getRSAKey_args(");

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class getRSAKey_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("getRSAKey_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  RSAKey _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  getRSAKey_result() {
  }

  // success
  RSAKey get success => this._success;

  set success(RSAKey success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new RSAKey();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("getRSAKey_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class notifyEmailConfirmationResult_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("notifyEmailConfirmationResult_args");
  static final TField _PARAMETER_MAP_FIELD_DESC = new TField("parameterMap", TType.MAP, 2);

  Map<String, String> _parameterMap;
  static const int PARAMETERMAP = 2;


  notifyEmailConfirmationResult_args() {
  }

  // parameterMap
  Map<String, String> get parameterMap => this._parameterMap;

  set parameterMap(Map<String, String> parameterMap) {
    this._parameterMap = parameterMap;
  }

  bool isSetParameterMap() => this.parameterMap != null;

  unsetParameterMap() {
    this.parameterMap = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case PARAMETERMAP:
        return this.parameterMap;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case PARAMETERMAP:
        if (value == null) {
          unsetParameterMap();
        } else {
          this.parameterMap = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case PARAMETERMAP:
        return isSetParameterMap();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case PARAMETERMAP:
          if (field.type == TType.MAP) {
            {
              TMap _map574 = iprot.readMapBegin();
              this.parameterMap = new Map<String, String>();
              for (int _i575 = 0; _i575 < _map574.length; ++_i575) {
                String _key576;
                String _val577;
                _key576 = iprot.readString();
                _val577 = iprot.readString();
                this.parameterMap[_key576] = _val577;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.parameterMap != null) {
      oprot.writeFieldBegin(_PARAMETER_MAP_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.parameterMap.length));
        for (var elem579 in this.parameterMap.keys) {
          oprot.writeString(elem579);
          oprot.writeString(this.parameterMap[elem579]);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("notifyEmailConfirmationResult_args(");

    ret.write("parameterMap:");
    if (this.parameterMap == null) {
      ret.write("null");
    } else {
      ret.write(this.parameterMap);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class notifyEmailConfirmationResult_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("notifyEmailConfirmationResult_result");
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  TalkException _e;
  static const int E = 1;


  notifyEmailConfirmationResult_result() {
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("notifyEmailConfirmationResult_result(");

    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class registerVirtualAccount_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("registerVirtualAccount_args");
  static final TField _LOCALE_FIELD_DESC = new TField("locale", TType.STRING, 2);
  static final TField _ENCRYPTED_VIRTUAL_USER_ID_FIELD_DESC = new TField("encryptedVirtualUserId", TType.STRING, 3);
  static final TField _ENCRYPTED_PASSWORD_FIELD_DESC = new TField("encryptedPassword", TType.STRING, 4);

  String _locale;
  static const int LOCALE = 2;
  String _encryptedVirtualUserId;
  static const int ENCRYPTEDVIRTUALUSERID = 3;
  String _encryptedPassword;
  static const int ENCRYPTEDPASSWORD = 4;


  registerVirtualAccount_args() {
  }

  // locale
  String get locale => this._locale;

  set locale(String locale) {
    this._locale = locale;
  }

  bool isSetLocale() => this.locale != null;

  unsetLocale() {
    this.locale = null;
  }

  // encryptedVirtualUserId
  String get encryptedVirtualUserId => this._encryptedVirtualUserId;

  set encryptedVirtualUserId(String encryptedVirtualUserId) {
    this._encryptedVirtualUserId = encryptedVirtualUserId;
  }

  bool isSetEncryptedVirtualUserId() => this.encryptedVirtualUserId != null;

  unsetEncryptedVirtualUserId() {
    this.encryptedVirtualUserId = null;
  }

  // encryptedPassword
  String get encryptedPassword => this._encryptedPassword;

  set encryptedPassword(String encryptedPassword) {
    this._encryptedPassword = encryptedPassword;
  }

  bool isSetEncryptedPassword() => this.encryptedPassword != null;

  unsetEncryptedPassword() {
    this.encryptedPassword = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case LOCALE:
        return this.locale;
      case ENCRYPTEDVIRTUALUSERID:
        return this.encryptedVirtualUserId;
      case ENCRYPTEDPASSWORD:
        return this.encryptedPassword;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          this.locale = value;
        }
        break;

      case ENCRYPTEDVIRTUALUSERID:
        if (value == null) {
          unsetEncryptedVirtualUserId();
        } else {
          this.encryptedVirtualUserId = value;
        }
        break;

      case ENCRYPTEDPASSWORD:
        if (value == null) {
          unsetEncryptedPassword();
        } else {
          this.encryptedPassword = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case LOCALE:
        return isSetLocale();
      case ENCRYPTEDVIRTUALUSERID:
        return isSetEncryptedVirtualUserId();
      case ENCRYPTEDPASSWORD:
        return isSetEncryptedPassword();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case LOCALE:
          if (field.type == TType.STRING) {
            this.locale = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ENCRYPTEDVIRTUALUSERID:
          if (field.type == TType.STRING) {
            this.encryptedVirtualUserId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ENCRYPTEDPASSWORD:
          if (field.type == TType.STRING) {
            this.encryptedPassword = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.locale != null) {
      oprot.writeFieldBegin(_LOCALE_FIELD_DESC);
      oprot.writeString(this.locale);
      oprot.writeFieldEnd();
    }
    if (this.encryptedVirtualUserId != null) {
      oprot.writeFieldBegin(_ENCRYPTED_VIRTUAL_USER_ID_FIELD_DESC);
      oprot.writeString(this.encryptedVirtualUserId);
      oprot.writeFieldEnd();
    }
    if (this.encryptedPassword != null) {
      oprot.writeFieldBegin(_ENCRYPTED_PASSWORD_FIELD_DESC);
      oprot.writeString(this.encryptedPassword);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("registerVirtualAccount_args(");

    ret.write("locale:");
    if (this.locale == null) {
      ret.write("null");
    } else {
      ret.write(this.locale);
    }

    ret.write(", ");
    ret.write("encryptedVirtualUserId:");
    if (this.encryptedVirtualUserId == null) {
      ret.write("null");
    } else {
      ret.write(this.encryptedVirtualUserId);
    }

    ret.write(", ");
    ret.write("encryptedPassword:");
    if (this.encryptedPassword == null) {
      ret.write("null");
    } else {
      ret.write(this.encryptedPassword);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class registerVirtualAccount_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("registerVirtualAccount_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRING, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  String _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  registerVirtualAccount_result() {
  }

  // success
  String get success => this._success;

  set success(String success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRING) {
            this.success = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeString(this.success);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("registerVirtualAccount_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class requestVirtualAccountPasswordChange_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("requestVirtualAccountPasswordChange_args");
  static final TField _VIRTUAL_MID_FIELD_DESC = new TField("virtualMid", TType.STRING, 2);
  static final TField _ENCRYPTED_VIRTUAL_USER_ID_FIELD_DESC = new TField("encryptedVirtualUserId", TType.STRING, 3);
  static final TField _ENCRYPTED_OLD_PASSWORD_FIELD_DESC = new TField("encryptedOldPassword", TType.STRING, 4);
  static final TField _ENCRYPTED_NEW_PASSWORD_FIELD_DESC = new TField("encryptedNewPassword", TType.STRING, 5);

  String _virtualMid;
  static const int VIRTUALMID = 2;
  String _encryptedVirtualUserId;
  static const int ENCRYPTEDVIRTUALUSERID = 3;
  String _encryptedOldPassword;
  static const int ENCRYPTEDOLDPASSWORD = 4;
  String _encryptedNewPassword;
  static const int ENCRYPTEDNEWPASSWORD = 5;


  requestVirtualAccountPasswordChange_args() {
  }

  // virtualMid
  String get virtualMid => this._virtualMid;

  set virtualMid(String virtualMid) {
    this._virtualMid = virtualMid;
  }

  bool isSetVirtualMid() => this.virtualMid != null;

  unsetVirtualMid() {
    this.virtualMid = null;
  }

  // encryptedVirtualUserId
  String get encryptedVirtualUserId => this._encryptedVirtualUserId;

  set encryptedVirtualUserId(String encryptedVirtualUserId) {
    this._encryptedVirtualUserId = encryptedVirtualUserId;
  }

  bool isSetEncryptedVirtualUserId() => this.encryptedVirtualUserId != null;

  unsetEncryptedVirtualUserId() {
    this.encryptedVirtualUserId = null;
  }

  // encryptedOldPassword
  String get encryptedOldPassword => this._encryptedOldPassword;

  set encryptedOldPassword(String encryptedOldPassword) {
    this._encryptedOldPassword = encryptedOldPassword;
  }

  bool isSetEncryptedOldPassword() => this.encryptedOldPassword != null;

  unsetEncryptedOldPassword() {
    this.encryptedOldPassword = null;
  }

  // encryptedNewPassword
  String get encryptedNewPassword => this._encryptedNewPassword;

  set encryptedNewPassword(String encryptedNewPassword) {
    this._encryptedNewPassword = encryptedNewPassword;
  }

  bool isSetEncryptedNewPassword() => this.encryptedNewPassword != null;

  unsetEncryptedNewPassword() {
    this.encryptedNewPassword = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case VIRTUALMID:
        return this.virtualMid;
      case ENCRYPTEDVIRTUALUSERID:
        return this.encryptedVirtualUserId;
      case ENCRYPTEDOLDPASSWORD:
        return this.encryptedOldPassword;
      case ENCRYPTEDNEWPASSWORD:
        return this.encryptedNewPassword;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case VIRTUALMID:
        if (value == null) {
          unsetVirtualMid();
        } else {
          this.virtualMid = value;
        }
        break;

      case ENCRYPTEDVIRTUALUSERID:
        if (value == null) {
          unsetEncryptedVirtualUserId();
        } else {
          this.encryptedVirtualUserId = value;
        }
        break;

      case ENCRYPTEDOLDPASSWORD:
        if (value == null) {
          unsetEncryptedOldPassword();
        } else {
          this.encryptedOldPassword = value;
        }
        break;

      case ENCRYPTEDNEWPASSWORD:
        if (value == null) {
          unsetEncryptedNewPassword();
        } else {
          this.encryptedNewPassword = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case VIRTUALMID:
        return isSetVirtualMid();
      case ENCRYPTEDVIRTUALUSERID:
        return isSetEncryptedVirtualUserId();
      case ENCRYPTEDOLDPASSWORD:
        return isSetEncryptedOldPassword();
      case ENCRYPTEDNEWPASSWORD:
        return isSetEncryptedNewPassword();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case VIRTUALMID:
          if (field.type == TType.STRING) {
            this.virtualMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ENCRYPTEDVIRTUALUSERID:
          if (field.type == TType.STRING) {
            this.encryptedVirtualUserId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ENCRYPTEDOLDPASSWORD:
          if (field.type == TType.STRING) {
            this.encryptedOldPassword = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ENCRYPTEDNEWPASSWORD:
          if (field.type == TType.STRING) {
            this.encryptedNewPassword = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.virtualMid != null) {
      oprot.writeFieldBegin(_VIRTUAL_MID_FIELD_DESC);
      oprot.writeString(this.virtualMid);
      oprot.writeFieldEnd();
    }
    if (this.encryptedVirtualUserId != null) {
      oprot.writeFieldBegin(_ENCRYPTED_VIRTUAL_USER_ID_FIELD_DESC);
      oprot.writeString(this.encryptedVirtualUserId);
      oprot.writeFieldEnd();
    }
    if (this.encryptedOldPassword != null) {
      oprot.writeFieldBegin(_ENCRYPTED_OLD_PASSWORD_FIELD_DESC);
      oprot.writeString(this.encryptedOldPassword);
      oprot.writeFieldEnd();
    }
    if (this.encryptedNewPassword != null) {
      oprot.writeFieldBegin(_ENCRYPTED_NEW_PASSWORD_FIELD_DESC);
      oprot.writeString(this.encryptedNewPassword);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("requestVirtualAccountPasswordChange_args(");

    ret.write("virtualMid:");
    if (this.virtualMid == null) {
      ret.write("null");
    } else {
      ret.write(this.virtualMid);
    }

    ret.write(", ");
    ret.write("encryptedVirtualUserId:");
    if (this.encryptedVirtualUserId == null) {
      ret.write("null");
    } else {
      ret.write(this.encryptedVirtualUserId);
    }

    ret.write(", ");
    ret.write("encryptedOldPassword:");
    if (this.encryptedOldPassword == null) {
      ret.write("null");
    } else {
      ret.write(this.encryptedOldPassword);
    }

    ret.write(", ");
    ret.write("encryptedNewPassword:");
    if (this.encryptedNewPassword == null) {
      ret.write("null");
    } else {
      ret.write(this.encryptedNewPassword);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class requestVirtualAccountPasswordChange_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("requestVirtualAccountPasswordChange_result");
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  TalkException _e;
  static const int E = 1;


  requestVirtualAccountPasswordChange_result() {
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("requestVirtualAccountPasswordChange_result(");

    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class requestVirtualAccountPasswordSet_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("requestVirtualAccountPasswordSet_args");
  static final TField _VIRTUAL_MID_FIELD_DESC = new TField("virtualMid", TType.STRING, 2);
  static final TField _ENCRYPTED_VIRTUAL_USER_ID_FIELD_DESC = new TField("encryptedVirtualUserId", TType.STRING, 3);
  static final TField _ENCRYPTED_NEW_PASSWORD_FIELD_DESC = new TField("encryptedNewPassword", TType.STRING, 4);

  String _virtualMid;
  static const int VIRTUALMID = 2;
  String _encryptedVirtualUserId;
  static const int ENCRYPTEDVIRTUALUSERID = 3;
  String _encryptedNewPassword;
  static const int ENCRYPTEDNEWPASSWORD = 4;


  requestVirtualAccountPasswordSet_args() {
  }

  // virtualMid
  String get virtualMid => this._virtualMid;

  set virtualMid(String virtualMid) {
    this._virtualMid = virtualMid;
  }

  bool isSetVirtualMid() => this.virtualMid != null;

  unsetVirtualMid() {
    this.virtualMid = null;
  }

  // encryptedVirtualUserId
  String get encryptedVirtualUserId => this._encryptedVirtualUserId;

  set encryptedVirtualUserId(String encryptedVirtualUserId) {
    this._encryptedVirtualUserId = encryptedVirtualUserId;
  }

  bool isSetEncryptedVirtualUserId() => this.encryptedVirtualUserId != null;

  unsetEncryptedVirtualUserId() {
    this.encryptedVirtualUserId = null;
  }

  // encryptedNewPassword
  String get encryptedNewPassword => this._encryptedNewPassword;

  set encryptedNewPassword(String encryptedNewPassword) {
    this._encryptedNewPassword = encryptedNewPassword;
  }

  bool isSetEncryptedNewPassword() => this.encryptedNewPassword != null;

  unsetEncryptedNewPassword() {
    this.encryptedNewPassword = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case VIRTUALMID:
        return this.virtualMid;
      case ENCRYPTEDVIRTUALUSERID:
        return this.encryptedVirtualUserId;
      case ENCRYPTEDNEWPASSWORD:
        return this.encryptedNewPassword;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case VIRTUALMID:
        if (value == null) {
          unsetVirtualMid();
        } else {
          this.virtualMid = value;
        }
        break;

      case ENCRYPTEDVIRTUALUSERID:
        if (value == null) {
          unsetEncryptedVirtualUserId();
        } else {
          this.encryptedVirtualUserId = value;
        }
        break;

      case ENCRYPTEDNEWPASSWORD:
        if (value == null) {
          unsetEncryptedNewPassword();
        } else {
          this.encryptedNewPassword = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case VIRTUALMID:
        return isSetVirtualMid();
      case ENCRYPTEDVIRTUALUSERID:
        return isSetEncryptedVirtualUserId();
      case ENCRYPTEDNEWPASSWORD:
        return isSetEncryptedNewPassword();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case VIRTUALMID:
          if (field.type == TType.STRING) {
            this.virtualMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ENCRYPTEDVIRTUALUSERID:
          if (field.type == TType.STRING) {
            this.encryptedVirtualUserId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ENCRYPTEDNEWPASSWORD:
          if (field.type == TType.STRING) {
            this.encryptedNewPassword = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.virtualMid != null) {
      oprot.writeFieldBegin(_VIRTUAL_MID_FIELD_DESC);
      oprot.writeString(this.virtualMid);
      oprot.writeFieldEnd();
    }
    if (this.encryptedVirtualUserId != null) {
      oprot.writeFieldBegin(_ENCRYPTED_VIRTUAL_USER_ID_FIELD_DESC);
      oprot.writeString(this.encryptedVirtualUserId);
      oprot.writeFieldEnd();
    }
    if (this.encryptedNewPassword != null) {
      oprot.writeFieldBegin(_ENCRYPTED_NEW_PASSWORD_FIELD_DESC);
      oprot.writeString(this.encryptedNewPassword);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("requestVirtualAccountPasswordSet_args(");

    ret.write("virtualMid:");
    if (this.virtualMid == null) {
      ret.write("null");
    } else {
      ret.write(this.virtualMid);
    }

    ret.write(", ");
    ret.write("encryptedVirtualUserId:");
    if (this.encryptedVirtualUserId == null) {
      ret.write("null");
    } else {
      ret.write(this.encryptedVirtualUserId);
    }

    ret.write(", ");
    ret.write("encryptedNewPassword:");
    if (this.encryptedNewPassword == null) {
      ret.write("null");
    } else {
      ret.write(this.encryptedNewPassword);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class requestVirtualAccountPasswordSet_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("requestVirtualAccountPasswordSet_result");
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  TalkException _e;
  static const int E = 1;


  requestVirtualAccountPasswordSet_result() {
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("requestVirtualAccountPasswordSet_result(");

    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class unregisterVirtualAccount_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("unregisterVirtualAccount_args");
  static final TField _VIRTUAL_MID_FIELD_DESC = new TField("virtualMid", TType.STRING, 2);

  String _virtualMid;
  static const int VIRTUALMID = 2;


  unregisterVirtualAccount_args() {
  }

  // virtualMid
  String get virtualMid => this._virtualMid;

  set virtualMid(String virtualMid) {
    this._virtualMid = virtualMid;
  }

  bool isSetVirtualMid() => this.virtualMid != null;

  unsetVirtualMid() {
    this.virtualMid = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case VIRTUALMID:
        return this.virtualMid;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case VIRTUALMID:
        if (value == null) {
          unsetVirtualMid();
        } else {
          this.virtualMid = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case VIRTUALMID:
        return isSetVirtualMid();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case VIRTUALMID:
          if (field.type == TType.STRING) {
            this.virtualMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.virtualMid != null) {
      oprot.writeFieldBegin(_VIRTUAL_MID_FIELD_DESC);
      oprot.writeString(this.virtualMid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("unregisterVirtualAccount_args(");

    ret.write("virtualMid:");
    if (this.virtualMid == null) {
      ret.write("null");
    } else {
      ret.write(this.virtualMid);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class unregisterVirtualAccount_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("unregisterVirtualAccount_result");
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  TalkException _e;
  static const int E = 1;


  unregisterVirtualAccount_result() {
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("unregisterVirtualAccount_result(");

    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

