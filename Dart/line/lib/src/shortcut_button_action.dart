/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.shortcut_button_action;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class ShortcutButtonAction implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ShortcutButtonAction");
  static final TField _ACTION_TYPE_FIELD_DESC = new TField("actionType", TType.I32, 1);
  static final TField _ACTION_DATA_FIELD_DESC = new TField("actionData", TType.STRUCT, 2);

  int _actionType = 0;
  static const int ACTIONTYPE = 1;
  ButtonActionData _actionData;
  static const int ACTIONDATA = 2;

  bool __isset_actionType = false;

  ShortcutButtonAction() {
  }

  // actionType
  int get actionType => this._actionType;

  set actionType(int actionType) {
    this._actionType = actionType;
    this.__isset_actionType = true;
  }

  bool isSetActionType() => this.__isset_actionType;

  unsetActionType() {
    this.__isset_actionType = false;
  }

  // actionData
  ButtonActionData get actionData => this._actionData;

  set actionData(ButtonActionData actionData) {
    this._actionData = actionData;
  }

  bool isSetActionData() => this.actionData != null;

  unsetActionData() {
    this.actionData = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case ACTIONTYPE:
        return this.actionType;
      case ACTIONDATA:
        return this.actionData;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case ACTIONTYPE:
        if (value == null) {
          unsetActionType();
        } else {
          this.actionType = value;
        }
        break;

      case ACTIONDATA:
        if (value == null) {
          unsetActionData();
        } else {
          this.actionData = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case ACTIONTYPE:
        return isSetActionType();
      case ACTIONDATA:
        return isSetActionData();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ACTIONTYPE:
          if (field.type == TType.I32) {
            this.actionType = iprot.readI32();
            this.__isset_actionType = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ACTIONDATA:
          if (field.type == TType.STRUCT) {
            this.actionData = new ButtonActionData();
            this.actionData.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_ACTION_TYPE_FIELD_DESC);
    oprot.writeI32(this.actionType);
    oprot.writeFieldEnd();
    if (this.actionData != null) {
      oprot.writeFieldBegin(_ACTION_DATA_FIELD_DESC);
      this.actionData.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ShortcutButtonAction(");

    ret.write("actionType:");
    ret.write(this.actionType);

    ret.write(", ");
    ret.write("actionData:");
    if (this.actionData == null) {
      ret.write("null");
    } else {
      ret.write(this.actionData);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

