/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.t_message_box_wrap_up;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class TMessageBoxWrapUp implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("TMessageBoxWrapUp");
  static final TField _MESSAGE_BOX_FIELD_DESC = new TField("messageBox", TType.STRUCT, 1);
  static final TField _NAME_FIELD_DESC = new TField("name", TType.STRING, 2);
  static final TField _CONTACTS_FIELD_DESC = new TField("contacts", TType.LIST, 3);
  static final TField _PICTURE_REVISION_FIELD_DESC = new TField("pictureRevision", TType.STRING, 4);

  TMessageBox _messageBox;
  static const int MESSAGEBOX = 1;
  String _name;
  static const int NAME = 2;
  List<Contact> _contacts;
  static const int CONTACTS = 3;
  String _pictureRevision;
  static const int PICTUREREVISION = 4;


  TMessageBoxWrapUp() {
  }

  // messageBox
  TMessageBox get messageBox => this._messageBox;

  set messageBox(TMessageBox messageBox) {
    this._messageBox = messageBox;
  }

  bool isSetMessageBox() => this.messageBox != null;

  unsetMessageBox() {
    this.messageBox = null;
  }

  // name
  String get name => this._name;

  set name(String name) {
    this._name = name;
  }

  bool isSetName() => this.name != null;

  unsetName() {
    this.name = null;
  }

  // contacts
  List<Contact> get contacts => this._contacts;

  set contacts(List<Contact> contacts) {
    this._contacts = contacts;
  }

  bool isSetContacts() => this.contacts != null;

  unsetContacts() {
    this.contacts = null;
  }

  // pictureRevision
  String get pictureRevision => this._pictureRevision;

  set pictureRevision(String pictureRevision) {
    this._pictureRevision = pictureRevision;
  }

  bool isSetPictureRevision() => this.pictureRevision != null;

  unsetPictureRevision() {
    this.pictureRevision = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case MESSAGEBOX:
        return this.messageBox;
      case NAME:
        return this.name;
      case CONTACTS:
        return this.contacts;
      case PICTUREREVISION:
        return this.pictureRevision;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case MESSAGEBOX:
        if (value == null) {
          unsetMessageBox();
        } else {
          this.messageBox = value;
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          this.name = value;
        }
        break;

      case CONTACTS:
        if (value == null) {
          unsetContacts();
        } else {
          this.contacts = value;
        }
        break;

      case PICTUREREVISION:
        if (value == null) {
          unsetPictureRevision();
        } else {
          this.pictureRevision = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case MESSAGEBOX:
        return isSetMessageBox();
      case NAME:
        return isSetName();
      case CONTACTS:
        return isSetContacts();
      case PICTUREREVISION:
        return isSetPictureRevision();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case MESSAGEBOX:
          if (field.type == TType.STRUCT) {
            this.messageBox = new TMessageBox();
            this.messageBox.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NAME:
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CONTACTS:
          if (field.type == TType.LIST) {
            {
              TList _list270 = iprot.readListBegin();
              this.contacts = new List<Contact>();
              for (int _i271 = 0; _i271 < _list270.length; ++_i271) {
                Contact _elem272;
                _elem272 = new Contact();
                _elem272.read(iprot);
                this.contacts.add(_elem272);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PICTUREREVISION:
          if (field.type == TType.STRING) {
            this.pictureRevision = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.messageBox != null) {
      oprot.writeFieldBegin(_MESSAGE_BOX_FIELD_DESC);
      this.messageBox.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.name != null) {
      oprot.writeFieldBegin(_NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.contacts != null) {
      oprot.writeFieldBegin(_CONTACTS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.contacts.length));
        for (var elem273 in this.contacts) {
          elem273.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.pictureRevision != null) {
      oprot.writeFieldBegin(_PICTURE_REVISION_FIELD_DESC);
      oprot.writeString(this.pictureRevision);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("TMessageBoxWrapUp(");

    ret.write("messageBox:");
    if (this.messageBox == null) {
      ret.write("null");
    } else {
      ret.write(this.messageBox);
    }

    ret.write(", ");
    ret.write("name:");
    if (this.name == null) {
      ret.write("null");
    } else {
      ret.write(this.name);
    }

    ret.write(", ");
    ret.write("contacts:");
    if (this.contacts == null) {
      ret.write("null");
    } else {
      ret.write(this.contacts);
    }

    ret.write(", ");
    ret.write("pictureRevision:");
    if (this.pictureRevision == null) {
      ret.write("null");
    } else {
      ret.write(this.pictureRevision);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

