/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.get_square_member_relations_response;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class GetSquareMemberRelationsResponse implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("GetSquareMemberRelationsResponse");
  static final TField _SQUARE_MEMBERS_FIELD_DESC = new TField("squareMembers", TType.LIST, 1);
  static final TField _RELATIONS_FIELD_DESC = new TField("relations", TType.MAP, 2);
  static final TField _CONTINUATION_TOKEN_FIELD_DESC = new TField("continuationToken", TType.STRING, 3);

  List<SquareMember> _squareMembers;
  static const int SQUAREMEMBERS = 1;
  Map<String, SquareMemberRelation> _relations;
  static const int RELATIONS = 2;
  String _continuationToken;
  static const int CONTINUATIONTOKEN = 3;


  GetSquareMemberRelationsResponse() {
  }

  // squareMembers
  List<SquareMember> get squareMembers => this._squareMembers;

  set squareMembers(List<SquareMember> squareMembers) {
    this._squareMembers = squareMembers;
  }

  bool isSetSquareMembers() => this.squareMembers != null;

  unsetSquareMembers() {
    this.squareMembers = null;
  }

  // relations
  Map<String, SquareMemberRelation> get relations => this._relations;

  set relations(Map<String, SquareMemberRelation> relations) {
    this._relations = relations;
  }

  bool isSetRelations() => this.relations != null;

  unsetRelations() {
    this.relations = null;
  }

  // continuationToken
  String get continuationToken => this._continuationToken;

  set continuationToken(String continuationToken) {
    this._continuationToken = continuationToken;
  }

  bool isSetContinuationToken() => this.continuationToken != null;

  unsetContinuationToken() {
    this.continuationToken = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SQUAREMEMBERS:
        return this.squareMembers;
      case RELATIONS:
        return this.relations;
      case CONTINUATIONTOKEN:
        return this.continuationToken;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SQUAREMEMBERS:
        if (value == null) {
          unsetSquareMembers();
        } else {
          this.squareMembers = value;
        }
        break;

      case RELATIONS:
        if (value == null) {
          unsetRelations();
        } else {
          this.relations = value;
        }
        break;

      case CONTINUATIONTOKEN:
        if (value == null) {
          unsetContinuationToken();
        } else {
          this.continuationToken = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SQUAREMEMBERS:
        return isSetSquareMembers();
      case RELATIONS:
        return isSetRelations();
      case CONTINUATIONTOKEN:
        return isSetContinuationToken();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SQUAREMEMBERS:
          if (field.type == TType.LIST) {
            {
              TList _list482 = iprot.readListBegin();
              this.squareMembers = new List<SquareMember>();
              for (int _i483 = 0; _i483 < _list482.length; ++_i483) {
                SquareMember _elem484;
                _elem484 = new SquareMember();
                _elem484.read(iprot);
                this.squareMembers.add(_elem484);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RELATIONS:
          if (field.type == TType.MAP) {
            {
              TMap _map485 = iprot.readMapBegin();
              this.relations = new Map<String, SquareMemberRelation>();
              for (int _i486 = 0; _i486 < _map485.length; ++_i486) {
                String _key487;
                SquareMemberRelation _val488;
                _key487 = iprot.readString();
                _val488 = new SquareMemberRelation();
                _val488.read(iprot);
                this.relations[_key487] = _val488;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CONTINUATIONTOKEN:
          if (field.type == TType.STRING) {
            this.continuationToken = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.squareMembers != null) {
      oprot.writeFieldBegin(_SQUARE_MEMBERS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.squareMembers.length));
        for (var elem489 in this.squareMembers) {
          elem489.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.relations != null) {
      oprot.writeFieldBegin(_RELATIONS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.relations.length));
        for (var elem491 in this.relations.keys) {
          oprot.writeString(elem491);
          this.relations[elem491].write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.continuationToken != null) {
      oprot.writeFieldBegin(_CONTINUATION_TOKEN_FIELD_DESC);
      oprot.writeString(this.continuationToken);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("GetSquareMemberRelationsResponse(");

    ret.write("squareMembers:");
    if (this.squareMembers == null) {
      ret.write("null");
    } else {
      ret.write(this.squareMembers);
    }

    ret.write(", ");
    ret.write("relations:");
    if (this.relations == null) {
      ret.write("null");
    } else {
      ret.write(this.relations);
    }

    ret.write(", ");
    ret.write("continuationToken:");
    if (this.continuationToken == null) {
      ret.write("null");
    } else {
      ret.write(this.continuationToken);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

