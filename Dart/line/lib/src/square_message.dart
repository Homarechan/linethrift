/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.square_message;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class SquareMessage implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("SquareMessage");
  static final TField _MESSAGE_FIELD_DESC = new TField("message", TType.STRUCT, 1);
  static final TField _FROM_TYPE_FIELD_DESC = new TField("fromType", TType.I32, 3);
  static final TField _SQUARE_MESSAGE_REVISION_FIELD_DESC = new TField("squareMessageRevision", TType.I64, 4);

  Message _message;
  static const int MESSAGE = 1;
  int _fromType;
  static const int FROMTYPE = 3;
  int _squareMessageRevision = 0;
  static const int SQUAREMESSAGEREVISION = 4;

  bool __isset_fromType = false;
  bool __isset_squareMessageRevision = false;

  SquareMessage() {
  }

  // message
  Message get message => this._message;

  set message(Message message) {
    this._message = message;
  }

  bool isSetMessage() => this.message != null;

  unsetMessage() {
    this.message = null;
  }

  // fromType
  int get fromType => this._fromType;

  set fromType(int fromType) {
    this._fromType = fromType;
    this.__isset_fromType = true;
  }

  bool isSetFromType() => this.__isset_fromType;

  unsetFromType() {
    this.__isset_fromType = false;
  }

  // squareMessageRevision
  int get squareMessageRevision => this._squareMessageRevision;

  set squareMessageRevision(int squareMessageRevision) {
    this._squareMessageRevision = squareMessageRevision;
    this.__isset_squareMessageRevision = true;
  }

  bool isSetSquareMessageRevision() => this.__isset_squareMessageRevision;

  unsetSquareMessageRevision() {
    this.__isset_squareMessageRevision = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case MESSAGE:
        return this.message;
      case FROMTYPE:
        return this.fromType;
      case SQUAREMESSAGEREVISION:
        return this.squareMessageRevision;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case MESSAGE:
        if (value == null) {
          unsetMessage();
        } else {
          this.message = value;
        }
        break;

      case FROMTYPE:
        if (value == null) {
          unsetFromType();
        } else {
          this.fromType = value;
        }
        break;

      case SQUAREMESSAGEREVISION:
        if (value == null) {
          unsetSquareMessageRevision();
        } else {
          this.squareMessageRevision = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case MESSAGE:
        return isSetMessage();
      case FROMTYPE:
        return isSetFromType();
      case SQUAREMESSAGEREVISION:
        return isSetSquareMessageRevision();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case MESSAGE:
          if (field.type == TType.STRUCT) {
            this.message = new Message();
            this.message.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FROMTYPE:
          if (field.type == TType.I32) {
            this.fromType = iprot.readI32();
            this.__isset_fromType = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SQUAREMESSAGEREVISION:
          if (field.type == TType.I64) {
            this.squareMessageRevision = iprot.readI64();
            this.__isset_squareMessageRevision = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.message != null) {
      oprot.writeFieldBegin(_MESSAGE_FIELD_DESC);
      this.message.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_FROM_TYPE_FIELD_DESC);
    oprot.writeI32(this.fromType);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_SQUARE_MESSAGE_REVISION_FIELD_DESC);
    oprot.writeI64(this.squareMessageRevision);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("SquareMessage(");

    ret.write("message:");
    if (this.message == null) {
      ret.write("null");
    } else {
      ret.write(this.message);
    }

    ret.write(", ");
    ret.write("fromType:");
    String fromType_name = MIDType.VALUES_TO_NAMES[this.fromType];
    if (fromType_name != null) {
      ret.write(fromType_name);
      ret.write(" (");
    }
    ret.write(this.fromType);
    if (fromType_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("squareMessageRevision:");
    ret.write(this.squareMessageRevision);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetFromType() && !MIDType.VALID_VALUES.contains(fromType)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'fromType' has been assigned the invalid value $fromType");
    }
  }

}

