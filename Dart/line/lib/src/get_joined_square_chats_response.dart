/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.get_joined_square_chats_response;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class GetJoinedSquareChatsResponse implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("GetJoinedSquareChatsResponse");
  static final TField _CHATS_FIELD_DESC = new TField("chats", TType.LIST, 1);
  static final TField _CHAT_MEMBERS_FIELD_DESC = new TField("chatMembers", TType.MAP, 2);
  static final TField _STATUSES_FIELD_DESC = new TField("statuses", TType.MAP, 3);
  static final TField _CONTINUATION_TOKEN_FIELD_DESC = new TField("continuationToken", TType.STRING, 4);

  List<SquareChat> _chats;
  static const int CHATS = 1;
  Map<String, SquareChatMember> _chatMembers;
  static const int CHATMEMBERS = 2;
  Map<String, SquareChatStatus> _statuses;
  static const int STATUSES = 3;
  String _continuationToken;
  static const int CONTINUATIONTOKEN = 4;


  GetJoinedSquareChatsResponse() {
  }

  // chats
  List<SquareChat> get chats => this._chats;

  set chats(List<SquareChat> chats) {
    this._chats = chats;
  }

  bool isSetChats() => this.chats != null;

  unsetChats() {
    this.chats = null;
  }

  // chatMembers
  Map<String, SquareChatMember> get chatMembers => this._chatMembers;

  set chatMembers(Map<String, SquareChatMember> chatMembers) {
    this._chatMembers = chatMembers;
  }

  bool isSetChatMembers() => this.chatMembers != null;

  unsetChatMembers() {
    this.chatMembers = null;
  }

  // statuses
  Map<String, SquareChatStatus> get statuses => this._statuses;

  set statuses(Map<String, SquareChatStatus> statuses) {
    this._statuses = statuses;
  }

  bool isSetStatuses() => this.statuses != null;

  unsetStatuses() {
    this.statuses = null;
  }

  // continuationToken
  String get continuationToken => this._continuationToken;

  set continuationToken(String continuationToken) {
    this._continuationToken = continuationToken;
  }

  bool isSetContinuationToken() => this.continuationToken != null;

  unsetContinuationToken() {
    this.continuationToken = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case CHATS:
        return this.chats;
      case CHATMEMBERS:
        return this.chatMembers;
      case STATUSES:
        return this.statuses;
      case CONTINUATIONTOKEN:
        return this.continuationToken;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case CHATS:
        if (value == null) {
          unsetChats();
        } else {
          this.chats = value;
        }
        break;

      case CHATMEMBERS:
        if (value == null) {
          unsetChatMembers();
        } else {
          this.chatMembers = value;
        }
        break;

      case STATUSES:
        if (value == null) {
          unsetStatuses();
        } else {
          this.statuses = value;
        }
        break;

      case CONTINUATIONTOKEN:
        if (value == null) {
          unsetContinuationToken();
        } else {
          this.continuationToken = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case CHATS:
        return isSetChats();
      case CHATMEMBERS:
        return isSetChatMembers();
      case STATUSES:
        return isSetStatuses();
      case CONTINUATIONTOKEN:
        return isSetContinuationToken();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case CHATS:
          if (field.type == TType.LIST) {
            {
              TList _list526 = iprot.readListBegin();
              this.chats = new List<SquareChat>();
              for (int _i527 = 0; _i527 < _list526.length; ++_i527) {
                SquareChat _elem528;
                _elem528 = new SquareChat();
                _elem528.read(iprot);
                this.chats.add(_elem528);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CHATMEMBERS:
          if (field.type == TType.MAP) {
            {
              TMap _map529 = iprot.readMapBegin();
              this.chatMembers = new Map<String, SquareChatMember>();
              for (int _i530 = 0; _i530 < _map529.length; ++_i530) {
                String _key531;
                SquareChatMember _val532;
                _key531 = iprot.readString();
                _val532 = new SquareChatMember();
                _val532.read(iprot);
                this.chatMembers[_key531] = _val532;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STATUSES:
          if (field.type == TType.MAP) {
            {
              TMap _map533 = iprot.readMapBegin();
              this.statuses = new Map<String, SquareChatStatus>();
              for (int _i534 = 0; _i534 < _map533.length; ++_i534) {
                String _key535;
                SquareChatStatus _val536;
                _key535 = iprot.readString();
                _val536 = new SquareChatStatus();
                _val536.read(iprot);
                this.statuses[_key535] = _val536;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CONTINUATIONTOKEN:
          if (field.type == TType.STRING) {
            this.continuationToken = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.chats != null) {
      oprot.writeFieldBegin(_CHATS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.chats.length));
        for (var elem537 in this.chats) {
          elem537.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.chatMembers != null) {
      oprot.writeFieldBegin(_CHAT_MEMBERS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.chatMembers.length));
        for (var elem539 in this.chatMembers.keys) {
          oprot.writeString(elem539);
          this.chatMembers[elem539].write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.statuses != null) {
      oprot.writeFieldBegin(_STATUSES_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.statuses.length));
        for (var elem541 in this.statuses.keys) {
          oprot.writeString(elem541);
          this.statuses[elem541].write(oprot);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.continuationToken != null) {
      oprot.writeFieldBegin(_CONTINUATION_TOKEN_FIELD_DESC);
      oprot.writeString(this.continuationToken);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("GetJoinedSquareChatsResponse(");

    ret.write("chats:");
    if (this.chats == null) {
      ret.write("null");
    } else {
      ret.write(this.chats);
    }

    ret.write(", ");
    ret.write("chatMembers:");
    if (this.chatMembers == null) {
      ret.write("null");
    } else {
      ret.write(this.chatMembers);
    }

    ret.write(", ");
    ret.write("statuses:");
    if (this.statuses == null) {
      ret.write("null");
    } else {
      ret.write(this.statuses);
    }

    ret.write(", ");
    ret.write("continuationToken:");
    if (this.continuationToken == null) {
      ret.write("null");
    } else {
      ret.write(this.continuationToken);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

