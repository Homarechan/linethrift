/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.paid_call_balance;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class PaidCallBalance implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("PaidCallBalance");
  static final TField _PRODUCT_TYPE_FIELD_DESC = new TField("productType", TType.I32, 1);
  static final TField _PRODUCT_NAME_FIELD_DESC = new TField("productName", TType.STRING, 2);
  static final TField _UNIT_FIELD_DESC = new TField("unit", TType.STRING, 3);
  static final TField _LIMITED_PAID_BALANCE_FIELD_DESC = new TField("limitedPaidBalance", TType.I32, 4);
  static final TField _LIMITED_FREE_BALANCE_FIELD_DESC = new TField("limitedFreeBalance", TType.I32, 5);
  static final TField _UNLIMITED_PAID_BALANCE_FIELD_DESC = new TField("unlimitedPaidBalance", TType.I32, 6);
  static final TField _UNLIMITED_FREE_BALANCE_FIELD_DESC = new TField("unlimitedFreeBalance", TType.I32, 7);
  static final TField _START_TIME_FIELD_DESC = new TField("startTime", TType.I64, 8);
  static final TField _END_TIME_FIELD_DESC = new TField("endTime", TType.I64, 9);
  static final TField _AUTOPAY_ENABLED_FIELD_DESC = new TField("autopayEnabled", TType.BOOL, 10);

  int _productType;
  static const int PRODUCTTYPE = 1;
  String _productName;
  static const int PRODUCTNAME = 2;
  String _unit;
  static const int UNIT = 3;
  int _limitedPaidBalance = 0;
  static const int LIMITEDPAIDBALANCE = 4;
  int _limitedFreeBalance = 0;
  static const int LIMITEDFREEBALANCE = 5;
  int _unlimitedPaidBalance = 0;
  static const int UNLIMITEDPAIDBALANCE = 6;
  int _unlimitedFreeBalance = 0;
  static const int UNLIMITEDFREEBALANCE = 7;
  int _startTime = 0;
  static const int STARTTIME = 8;
  int _endTime = 0;
  static const int ENDTIME = 9;
  bool _autopayEnabled = false;
  static const int AUTOPAYENABLED = 10;

  bool __isset_productType = false;
  bool __isset_limitedPaidBalance = false;
  bool __isset_limitedFreeBalance = false;
  bool __isset_unlimitedPaidBalance = false;
  bool __isset_unlimitedFreeBalance = false;
  bool __isset_startTime = false;
  bool __isset_endTime = false;
  bool __isset_autopayEnabled = false;

  PaidCallBalance() {
  }

  // productType
  int get productType => this._productType;

  set productType(int productType) {
    this._productType = productType;
    this.__isset_productType = true;
  }

  bool isSetProductType() => this.__isset_productType;

  unsetProductType() {
    this.__isset_productType = false;
  }

  // productName
  String get productName => this._productName;

  set productName(String productName) {
    this._productName = productName;
  }

  bool isSetProductName() => this.productName != null;

  unsetProductName() {
    this.productName = null;
  }

  // unit
  String get unit => this._unit;

  set unit(String unit) {
    this._unit = unit;
  }

  bool isSetUnit() => this.unit != null;

  unsetUnit() {
    this.unit = null;
  }

  // limitedPaidBalance
  int get limitedPaidBalance => this._limitedPaidBalance;

  set limitedPaidBalance(int limitedPaidBalance) {
    this._limitedPaidBalance = limitedPaidBalance;
    this.__isset_limitedPaidBalance = true;
  }

  bool isSetLimitedPaidBalance() => this.__isset_limitedPaidBalance;

  unsetLimitedPaidBalance() {
    this.__isset_limitedPaidBalance = false;
  }

  // limitedFreeBalance
  int get limitedFreeBalance => this._limitedFreeBalance;

  set limitedFreeBalance(int limitedFreeBalance) {
    this._limitedFreeBalance = limitedFreeBalance;
    this.__isset_limitedFreeBalance = true;
  }

  bool isSetLimitedFreeBalance() => this.__isset_limitedFreeBalance;

  unsetLimitedFreeBalance() {
    this.__isset_limitedFreeBalance = false;
  }

  // unlimitedPaidBalance
  int get unlimitedPaidBalance => this._unlimitedPaidBalance;

  set unlimitedPaidBalance(int unlimitedPaidBalance) {
    this._unlimitedPaidBalance = unlimitedPaidBalance;
    this.__isset_unlimitedPaidBalance = true;
  }

  bool isSetUnlimitedPaidBalance() => this.__isset_unlimitedPaidBalance;

  unsetUnlimitedPaidBalance() {
    this.__isset_unlimitedPaidBalance = false;
  }

  // unlimitedFreeBalance
  int get unlimitedFreeBalance => this._unlimitedFreeBalance;

  set unlimitedFreeBalance(int unlimitedFreeBalance) {
    this._unlimitedFreeBalance = unlimitedFreeBalance;
    this.__isset_unlimitedFreeBalance = true;
  }

  bool isSetUnlimitedFreeBalance() => this.__isset_unlimitedFreeBalance;

  unsetUnlimitedFreeBalance() {
    this.__isset_unlimitedFreeBalance = false;
  }

  // startTime
  int get startTime => this._startTime;

  set startTime(int startTime) {
    this._startTime = startTime;
    this.__isset_startTime = true;
  }

  bool isSetStartTime() => this.__isset_startTime;

  unsetStartTime() {
    this.__isset_startTime = false;
  }

  // endTime
  int get endTime => this._endTime;

  set endTime(int endTime) {
    this._endTime = endTime;
    this.__isset_endTime = true;
  }

  bool isSetEndTime() => this.__isset_endTime;

  unsetEndTime() {
    this.__isset_endTime = false;
  }

  // autopayEnabled
  bool get autopayEnabled => this._autopayEnabled;

  set autopayEnabled(bool autopayEnabled) {
    this._autopayEnabled = autopayEnabled;
    this.__isset_autopayEnabled = true;
  }

  bool isSetAutopayEnabled() => this.__isset_autopayEnabled;

  unsetAutopayEnabled() {
    this.__isset_autopayEnabled = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case PRODUCTTYPE:
        return this.productType;
      case PRODUCTNAME:
        return this.productName;
      case UNIT:
        return this.unit;
      case LIMITEDPAIDBALANCE:
        return this.limitedPaidBalance;
      case LIMITEDFREEBALANCE:
        return this.limitedFreeBalance;
      case UNLIMITEDPAIDBALANCE:
        return this.unlimitedPaidBalance;
      case UNLIMITEDFREEBALANCE:
        return this.unlimitedFreeBalance;
      case STARTTIME:
        return this.startTime;
      case ENDTIME:
        return this.endTime;
      case AUTOPAYENABLED:
        return this.autopayEnabled;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case PRODUCTTYPE:
        if (value == null) {
          unsetProductType();
        } else {
          this.productType = value;
        }
        break;

      case PRODUCTNAME:
        if (value == null) {
          unsetProductName();
        } else {
          this.productName = value;
        }
        break;

      case UNIT:
        if (value == null) {
          unsetUnit();
        } else {
          this.unit = value;
        }
        break;

      case LIMITEDPAIDBALANCE:
        if (value == null) {
          unsetLimitedPaidBalance();
        } else {
          this.limitedPaidBalance = value;
        }
        break;

      case LIMITEDFREEBALANCE:
        if (value == null) {
          unsetLimitedFreeBalance();
        } else {
          this.limitedFreeBalance = value;
        }
        break;

      case UNLIMITEDPAIDBALANCE:
        if (value == null) {
          unsetUnlimitedPaidBalance();
        } else {
          this.unlimitedPaidBalance = value;
        }
        break;

      case UNLIMITEDFREEBALANCE:
        if (value == null) {
          unsetUnlimitedFreeBalance();
        } else {
          this.unlimitedFreeBalance = value;
        }
        break;

      case STARTTIME:
        if (value == null) {
          unsetStartTime();
        } else {
          this.startTime = value;
        }
        break;

      case ENDTIME:
        if (value == null) {
          unsetEndTime();
        } else {
          this.endTime = value;
        }
        break;

      case AUTOPAYENABLED:
        if (value == null) {
          unsetAutopayEnabled();
        } else {
          this.autopayEnabled = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case PRODUCTTYPE:
        return isSetProductType();
      case PRODUCTNAME:
        return isSetProductName();
      case UNIT:
        return isSetUnit();
      case LIMITEDPAIDBALANCE:
        return isSetLimitedPaidBalance();
      case LIMITEDFREEBALANCE:
        return isSetLimitedFreeBalance();
      case UNLIMITEDPAIDBALANCE:
        return isSetUnlimitedPaidBalance();
      case UNLIMITEDFREEBALANCE:
        return isSetUnlimitedFreeBalance();
      case STARTTIME:
        return isSetStartTime();
      case ENDTIME:
        return isSetEndTime();
      case AUTOPAYENABLED:
        return isSetAutopayEnabled();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case PRODUCTTYPE:
          if (field.type == TType.I32) {
            this.productType = iprot.readI32();
            this.__isset_productType = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PRODUCTNAME:
          if (field.type == TType.STRING) {
            this.productName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case UNIT:
          if (field.type == TType.STRING) {
            this.unit = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LIMITEDPAIDBALANCE:
          if (field.type == TType.I32) {
            this.limitedPaidBalance = iprot.readI32();
            this.__isset_limitedPaidBalance = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LIMITEDFREEBALANCE:
          if (field.type == TType.I32) {
            this.limitedFreeBalance = iprot.readI32();
            this.__isset_limitedFreeBalance = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case UNLIMITEDPAIDBALANCE:
          if (field.type == TType.I32) {
            this.unlimitedPaidBalance = iprot.readI32();
            this.__isset_unlimitedPaidBalance = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case UNLIMITEDFREEBALANCE:
          if (field.type == TType.I32) {
            this.unlimitedFreeBalance = iprot.readI32();
            this.__isset_unlimitedFreeBalance = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STARTTIME:
          if (field.type == TType.I64) {
            this.startTime = iprot.readI64();
            this.__isset_startTime = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ENDTIME:
          if (field.type == TType.I64) {
            this.endTime = iprot.readI64();
            this.__isset_endTime = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AUTOPAYENABLED:
          if (field.type == TType.BOOL) {
            this.autopayEnabled = iprot.readBool();
            this.__isset_autopayEnabled = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_PRODUCT_TYPE_FIELD_DESC);
    oprot.writeI32(this.productType);
    oprot.writeFieldEnd();
    if (this.productName != null) {
      oprot.writeFieldBegin(_PRODUCT_NAME_FIELD_DESC);
      oprot.writeString(this.productName);
      oprot.writeFieldEnd();
    }
    if (this.unit != null) {
      oprot.writeFieldBegin(_UNIT_FIELD_DESC);
      oprot.writeString(this.unit);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_LIMITED_PAID_BALANCE_FIELD_DESC);
    oprot.writeI32(this.limitedPaidBalance);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_LIMITED_FREE_BALANCE_FIELD_DESC);
    oprot.writeI32(this.limitedFreeBalance);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_UNLIMITED_PAID_BALANCE_FIELD_DESC);
    oprot.writeI32(this.unlimitedPaidBalance);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_UNLIMITED_FREE_BALANCE_FIELD_DESC);
    oprot.writeI32(this.unlimitedFreeBalance);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_START_TIME_FIELD_DESC);
    oprot.writeI64(this.startTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_END_TIME_FIELD_DESC);
    oprot.writeI64(this.endTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_AUTOPAY_ENABLED_FIELD_DESC);
    oprot.writeBool(this.autopayEnabled);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("PaidCallBalance(");

    ret.write("productType:");
    String productType_name = PaidCallProductType.VALUES_TO_NAMES[this.productType];
    if (productType_name != null) {
      ret.write(productType_name);
      ret.write(" (");
    }
    ret.write(this.productType);
    if (productType_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("productName:");
    if (this.productName == null) {
      ret.write("null");
    } else {
      ret.write(this.productName);
    }

    ret.write(", ");
    ret.write("unit:");
    if (this.unit == null) {
      ret.write("null");
    } else {
      ret.write(this.unit);
    }

    ret.write(", ");
    ret.write("limitedPaidBalance:");
    ret.write(this.limitedPaidBalance);

    ret.write(", ");
    ret.write("limitedFreeBalance:");
    ret.write(this.limitedFreeBalance);

    ret.write(", ");
    ret.write("unlimitedPaidBalance:");
    ret.write(this.unlimitedPaidBalance);

    ret.write(", ");
    ret.write("unlimitedFreeBalance:");
    ret.write(this.unlimitedFreeBalance);

    ret.write(", ");
    ret.write("startTime:");
    ret.write(this.startTime);

    ret.write(", ");
    ret.write("endTime:");
    ret.write(this.endTime);

    ret.write(", ");
    ret.write("autopayEnabled:");
    ret.write(this.autopayEnabled);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetProductType() && !PaidCallProductType.VALID_VALUES.contains(productType)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'productType' has been assigned the invalid value $productType");
    }
  }

}

