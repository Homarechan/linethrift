/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.text_message_announcement_contents;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class TextMessageAnnouncementContents implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("TextMessageAnnouncementContents");
  static final TField _MESSAGE_ID_FIELD_DESC = new TField("messageId", TType.STRING, 1);
  static final TField _TEXT_FIELD_DESC = new TField("text", TType.STRING, 2);
  static final TField _SENDER_SQUARE_MEMBER_MID_FIELD_DESC = new TField("senderSquareMemberMid", TType.STRING, 3);
  static final TField _CREATED_AT_FIELD_DESC = new TField("createdAt", TType.I64, 4);

  String _messageId;
  static const int MESSAGEID = 1;
  String _text;
  static const int TEXT = 2;
  String _senderSquareMemberMid;
  static const int SENDERSQUAREMEMBERMID = 3;
  int _createdAt = 0;
  static const int CREATEDAT = 4;

  bool __isset_createdAt = false;

  TextMessageAnnouncementContents() {
  }

  // messageId
  String get messageId => this._messageId;

  set messageId(String messageId) {
    this._messageId = messageId;
  }

  bool isSetMessageId() => this.messageId != null;

  unsetMessageId() {
    this.messageId = null;
  }

  // text
  String get text => this._text;

  set text(String text) {
    this._text = text;
  }

  bool isSetText() => this.text != null;

  unsetText() {
    this.text = null;
  }

  // senderSquareMemberMid
  String get senderSquareMemberMid => this._senderSquareMemberMid;

  set senderSquareMemberMid(String senderSquareMemberMid) {
    this._senderSquareMemberMid = senderSquareMemberMid;
  }

  bool isSetSenderSquareMemberMid() => this.senderSquareMemberMid != null;

  unsetSenderSquareMemberMid() {
    this.senderSquareMemberMid = null;
  }

  // createdAt
  int get createdAt => this._createdAt;

  set createdAt(int createdAt) {
    this._createdAt = createdAt;
    this.__isset_createdAt = true;
  }

  bool isSetCreatedAt() => this.__isset_createdAt;

  unsetCreatedAt() {
    this.__isset_createdAt = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case MESSAGEID:
        return this.messageId;
      case TEXT:
        return this.text;
      case SENDERSQUAREMEMBERMID:
        return this.senderSquareMemberMid;
      case CREATEDAT:
        return this.createdAt;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case MESSAGEID:
        if (value == null) {
          unsetMessageId();
        } else {
          this.messageId = value;
        }
        break;

      case TEXT:
        if (value == null) {
          unsetText();
        } else {
          this.text = value;
        }
        break;

      case SENDERSQUAREMEMBERMID:
        if (value == null) {
          unsetSenderSquareMemberMid();
        } else {
          this.senderSquareMemberMid = value;
        }
        break;

      case CREATEDAT:
        if (value == null) {
          unsetCreatedAt();
        } else {
          this.createdAt = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case MESSAGEID:
        return isSetMessageId();
      case TEXT:
        return isSetText();
      case SENDERSQUAREMEMBERMID:
        return isSetSenderSquareMemberMid();
      case CREATEDAT:
        return isSetCreatedAt();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case MESSAGEID:
          if (field.type == TType.STRING) {
            this.messageId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TEXT:
          if (field.type == TType.STRING) {
            this.text = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SENDERSQUAREMEMBERMID:
          if (field.type == TType.STRING) {
            this.senderSquareMemberMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CREATEDAT:
          if (field.type == TType.I64) {
            this.createdAt = iprot.readI64();
            this.__isset_createdAt = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.messageId != null) {
      oprot.writeFieldBegin(_MESSAGE_ID_FIELD_DESC);
      oprot.writeString(this.messageId);
      oprot.writeFieldEnd();
    }
    if (this.text != null) {
      oprot.writeFieldBegin(_TEXT_FIELD_DESC);
      oprot.writeString(this.text);
      oprot.writeFieldEnd();
    }
    if (this.senderSquareMemberMid != null) {
      oprot.writeFieldBegin(_SENDER_SQUARE_MEMBER_MID_FIELD_DESC);
      oprot.writeString(this.senderSquareMemberMid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_CREATED_AT_FIELD_DESC);
    oprot.writeI64(this.createdAt);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("TextMessageAnnouncementContents(");

    ret.write("messageId:");
    if (this.messageId == null) {
      ret.write("null");
    } else {
      ret.write(this.messageId);
    }

    ret.write(", ");
    ret.write("text:");
    if (this.text == null) {
      ret.write("null");
    } else {
      ret.write(this.text);
    }

    ret.write(", ");
    ret.write("senderSquareMemberMid:");
    if (this.senderSquareMemberMid == null) {
      ret.write("null");
    } else {
      ret.write(this.senderSquareMemberMid);
    }

    ret.write(", ");
    ret.write("createdAt:");
    ret.write(this.createdAt);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

