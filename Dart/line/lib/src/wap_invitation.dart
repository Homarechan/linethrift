/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.wap_invitation;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class WapInvitation implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("WapInvitation");
  static final TField _TYPE_FIELD_DESC = new TField("type", TType.I32, 1);
  static final TField _INVITEE_EMAIL_FIELD_DESC = new TField("inviteeEmail", TType.STRING, 10);
  static final TField _INVITER_MID_FIELD_DESC = new TField("inviterMid", TType.STRING, 11);
  static final TField _ROOM_MID_FIELD_DESC = new TField("roomMid", TType.STRING, 12);

  int _type;
  static const int TYPE = 1;
  String _inviteeEmail;
  static const int INVITEEEMAIL = 10;
  String _inviterMid;
  static const int INVITERMID = 11;
  String _roomMid;
  static const int ROOMMID = 12;

  bool __isset_type = false;

  WapInvitation() {
  }

  // type
  int get type => this._type;

  set type(int type) {
    this._type = type;
    this.__isset_type = true;
  }

  bool isSetType() => this.__isset_type;

  unsetType() {
    this.__isset_type = false;
  }

  // inviteeEmail
  String get inviteeEmail => this._inviteeEmail;

  set inviteeEmail(String inviteeEmail) {
    this._inviteeEmail = inviteeEmail;
  }

  bool isSetInviteeEmail() => this.inviteeEmail != null;

  unsetInviteeEmail() {
    this.inviteeEmail = null;
  }

  // inviterMid
  String get inviterMid => this._inviterMid;

  set inviterMid(String inviterMid) {
    this._inviterMid = inviterMid;
  }

  bool isSetInviterMid() => this.inviterMid != null;

  unsetInviterMid() {
    this.inviterMid = null;
  }

  // roomMid
  String get roomMid => this._roomMid;

  set roomMid(String roomMid) {
    this._roomMid = roomMid;
  }

  bool isSetRoomMid() => this.roomMid != null;

  unsetRoomMid() {
    this.roomMid = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case TYPE:
        return this.type;
      case INVITEEEMAIL:
        return this.inviteeEmail;
      case INVITERMID:
        return this.inviterMid;
      case ROOMMID:
        return this.roomMid;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          this.type = value;
        }
        break;

      case INVITEEEMAIL:
        if (value == null) {
          unsetInviteeEmail();
        } else {
          this.inviteeEmail = value;
        }
        break;

      case INVITERMID:
        if (value == null) {
          unsetInviterMid();
        } else {
          this.inviterMid = value;
        }
        break;

      case ROOMMID:
        if (value == null) {
          unsetRoomMid();
        } else {
          this.roomMid = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case TYPE:
        return isSetType();
      case INVITEEEMAIL:
        return isSetInviteeEmail();
      case INVITERMID:
        return isSetInviterMid();
      case ROOMMID:
        return isSetRoomMid();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case TYPE:
          if (field.type == TType.I32) {
            this.type = iprot.readI32();
            this.__isset_type = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case INVITEEEMAIL:
          if (field.type == TType.STRING) {
            this.inviteeEmail = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case INVITERMID:
          if (field.type == TType.STRING) {
            this.inviterMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ROOMMID:
          if (field.type == TType.STRING) {
            this.roomMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_TYPE_FIELD_DESC);
    oprot.writeI32(this.type);
    oprot.writeFieldEnd();
    if (this.inviteeEmail != null) {
      oprot.writeFieldBegin(_INVITEE_EMAIL_FIELD_DESC);
      oprot.writeString(this.inviteeEmail);
      oprot.writeFieldEnd();
    }
    if (this.inviterMid != null) {
      oprot.writeFieldBegin(_INVITER_MID_FIELD_DESC);
      oprot.writeString(this.inviterMid);
      oprot.writeFieldEnd();
    }
    if (this.roomMid != null) {
      oprot.writeFieldBegin(_ROOM_MID_FIELD_DESC);
      oprot.writeString(this.roomMid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("WapInvitation(");

    ret.write("type:");
    String type_name = WapInvitationType.VALUES_TO_NAMES[this.type];
    if (type_name != null) {
      ret.write(type_name);
      ret.write(" (");
    }
    ret.write(this.type);
    if (type_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("inviteeEmail:");
    if (this.inviteeEmail == null) {
      ret.write("null");
    } else {
      ret.write(this.inviteeEmail);
    }

    ret.write(", ");
    ret.write("inviterMid:");
    if (this.inviterMid == null) {
      ret.write("null");
    } else {
      ret.write(this.inviterMid);
    }

    ret.write(", ");
    ret.write("roomMid:");
    if (this.roomMid == null) {
      ret.write("null");
    } else {
      ret.write(this.roomMid);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetType() && !WapInvitationType.VALID_VALUES.contains(type)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'type' has been assigned the invalid value $type");
    }
  }

}

