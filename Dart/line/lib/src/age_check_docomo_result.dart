/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.age_check_docomo_result;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class AgeCheckDocomoResult implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("AgeCheckDocomoResult");
  static final TField _AUTH_URL_FIELD_DESC = new TField("authUrl", TType.STRING, 1);
  static final TField _USER_AGE_TYPE_FIELD_DESC = new TField("userAgeType", TType.I32, 2);

  String _authUrl;
  static const int AUTHURL = 1;
  int _userAgeType;
  static const int USERAGETYPE = 2;

  bool __isset_userAgeType = false;

  AgeCheckDocomoResult() {
  }

  // authUrl
  String get authUrl => this._authUrl;

  set authUrl(String authUrl) {
    this._authUrl = authUrl;
  }

  bool isSetAuthUrl() => this.authUrl != null;

  unsetAuthUrl() {
    this.authUrl = null;
  }

  // userAgeType
  int get userAgeType => this._userAgeType;

  set userAgeType(int userAgeType) {
    this._userAgeType = userAgeType;
    this.__isset_userAgeType = true;
  }

  bool isSetUserAgeType() => this.__isset_userAgeType;

  unsetUserAgeType() {
    this.__isset_userAgeType = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case AUTHURL:
        return this.authUrl;
      case USERAGETYPE:
        return this.userAgeType;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case AUTHURL:
        if (value == null) {
          unsetAuthUrl();
        } else {
          this.authUrl = value;
        }
        break;

      case USERAGETYPE:
        if (value == null) {
          unsetUserAgeType();
        } else {
          this.userAgeType = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case AUTHURL:
        return isSetAuthUrl();
      case USERAGETYPE:
        return isSetUserAgeType();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case AUTHURL:
          if (field.type == TType.STRING) {
            this.authUrl = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case USERAGETYPE:
          if (field.type == TType.I32) {
            this.userAgeType = iprot.readI32();
            this.__isset_userAgeType = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.authUrl != null) {
      oprot.writeFieldBegin(_AUTH_URL_FIELD_DESC);
      oprot.writeString(this.authUrl);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_USER_AGE_TYPE_FIELD_DESC);
    oprot.writeI32(this.userAgeType);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("AgeCheckDocomoResult(");

    ret.write("authUrl:");
    if (this.authUrl == null) {
      ret.write("null");
    } else {
      ret.write(this.authUrl);
    }

    ret.write(", ");
    ret.write("userAgeType:");
    String userAgeType_name = UserAgeType.VALUES_TO_NAMES[this.userAgeType];
    if (userAgeType_name != null) {
      ret.write(userAgeType_name);
      ret.write(" (");
    }
    ret.write(this.userAgeType);
    if (userAgeType_name != null) {
      ret.write(")");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetUserAgeType() && !UserAgeType.VALID_VALUES.contains(userAgeType)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'userAgeType' has been assigned the invalid value $userAgeType");
    }
  }

}

