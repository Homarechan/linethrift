/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.get_chatapp_response;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class GetChatappResponse implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("GetChatappResponse");
  static final TField _APP_FIELD_DESC = new TField("app", TType.STRUCT, 1);

  Chatapp _app;
  static const int APP = 1;


  GetChatappResponse() {
  }

  // app
  Chatapp get app => this._app;

  set app(Chatapp app) {
    this._app = app;
  }

  bool isSetApp() => this.app != null;

  unsetApp() {
    this.app = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case APP:
        return this.app;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case APP:
        if (value == null) {
          unsetApp();
        } else {
          this.app = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case APP:
        return isSetApp();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case APP:
          if (field.type == TType.STRUCT) {
            this.app = new Chatapp();
            this.app.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.app != null) {
      oprot.writeFieldBegin(_APP_FIELD_DESC);
      this.app.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("GetChatappResponse(");

    ret.write("app:");
    if (this.app == null) {
      ret.write("null");
    } else {
      ret.write(this.app);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

