/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.update_square_authority_request;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class UpdateSquareAuthorityRequest implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("UpdateSquareAuthorityRequest");
  static final TField _UPDATE_ATTRIBUTES_FIELD_DESC = new TField("updateAttributes", TType.SET, 2);
  static final TField _AUTHORITY_FIELD_DESC = new TField("authority", TType.STRUCT, 3);

  Set<int> _updateAttributes;
  static const int UPDATEATTRIBUTES = 2;
  SquareAuthority _authority;
  static const int AUTHORITY = 3;


  UpdateSquareAuthorityRequest() {
  }

  // updateAttributes
  Set<int> get updateAttributes => this._updateAttributes;

  set updateAttributes(Set<int> updateAttributes) {
    this._updateAttributes = updateAttributes;
  }

  bool isSetUpdateAttributes() => this.updateAttributes != null;

  unsetUpdateAttributes() {
    this.updateAttributes = null;
  }

  // authority
  SquareAuthority get authority => this._authority;

  set authority(SquareAuthority authority) {
    this._authority = authority;
  }

  bool isSetAuthority() => this.authority != null;

  unsetAuthority() {
    this.authority = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case UPDATEATTRIBUTES:
        return this.updateAttributes;
      case AUTHORITY:
        return this.authority;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case UPDATEATTRIBUTES:
        if (value == null) {
          unsetUpdateAttributes();
        } else {
          this.updateAttributes = value;
        }
        break;

      case AUTHORITY:
        if (value == null) {
          unsetAuthority();
        } else {
          this.authority = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case UPDATEATTRIBUTES:
        return isSetUpdateAttributes();
      case AUTHORITY:
        return isSetAuthority();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case UPDATEATTRIBUTES:
          if (field.type == TType.SET) {
            {
              TSet _set506 = iprot.readSetBegin();
              this.updateAttributes = new Set<int>();
              for (int _i507 = 0; _i507 < _set506.length; ++_i507) {
                int _elem508;
                _elem508 = iprot.readI32();
                this.updateAttributes.add(_elem508);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AUTHORITY:
          if (field.type == TType.STRUCT) {
            this.authority = new SquareAuthority();
            this.authority.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.updateAttributes != null) {
      oprot.writeFieldBegin(_UPDATE_ATTRIBUTES_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.I32, this.updateAttributes.length));
        for (var elem509 in this.updateAttributes) {
          oprot.writeI32(elem509);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.authority != null) {
      oprot.writeFieldBegin(_AUTHORITY_FIELD_DESC);
      this.authority.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("UpdateSquareAuthorityRequest(");

    ret.write("updateAttributes:");
    if (this.updateAttributes == null) {
      ret.write("null");
    } else {
      ret.write(this.updateAttributes);
    }

    ret.write(", ");
    ret.write("authority:");
    if (this.authority == null) {
      ret.write("null");
    } else {
      ret.write(this.authority);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

