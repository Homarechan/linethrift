/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.product_search_summary;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class ProductSearchSummary implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ProductSearchSummary");
  static final TField _ID_FIELD_DESC = new TField("id", TType.STRING, 1);
  static final TField _TYPE_FIELD_DESC = new TField("type", TType.I32, 2);
  static final TField _NAME_FIELD_DESC = new TField("name", TType.STRING, 3);
  static final TField _AUTHOR_FIELD_DESC = new TField("author", TType.STRING, 4);
  static final TField _PROMOTION_INFO_FIELD_DESC = new TField("promotionInfo", TType.STRUCT, 5);
  static final TField _VERSION_FIELD_DESC = new TField("version", TType.I64, 6);
  static final TField _NEW_FLAG_FIELD_DESC = new TField("newFlag", TType.BOOL, 7);
  static final TField _PRICE_TIER_FIELD_DESC = new TField("priceTier", TType.I32, 8);
  static final TField _PRICE_IN_LINE_COIN_FIELD_DESC = new TField("priceInLineCoin", TType.STRING, 9);
  static final TField _PROPERTY_FIELD_DESC = new TField("property", TType.STRUCT, 10);
  static final TField _SUB_TYPE_FIELD_DESC = new TField("subType", TType.I32, 11);
  static final TField _ON_SALE_FIELD_DESC = new TField("onSale", TType.BOOL, 12);
  static final TField _AVAILABLE_FOR_PRESENT_FIELD_DESC = new TField("availableForPresent", TType.BOOL, 13);
  static final TField _AVAILABLE_FOR_PURCHASE_FIELD_DESC = new TField("availableForPurchase", TType.BOOL, 14);
  static final TField _VALID_DAYS_FIELD_DESC = new TField("validDays", TType.I32, 15);
  static final TField _AUTHOR_ID_FIELD_DESC = new TField("authorId", TType.STRING, 16);
  static final TField _SALE_FLAG_FIELD_DESC = new TField("saleFlag", TType.BOOL, 17);

  String _id;
  static const int ID = 1;
  int _type;
  static const int TYPE = 2;
  String _name;
  static const int NAME = 3;
  String _author;
  static const int AUTHOR = 4;
  PromotionInfo _promotionInfo;
  static const int PROMOTIONINFO = 5;
  int _version = 0;
  static const int VERSION = 6;
  bool _newFlag = false;
  static const int NEWFLAG = 7;
  int _priceTier = 0;
  static const int PRICETIER = 8;
  String _priceInLineCoin;
  static const int PRICEINLINECOIN = 9;
  ProductProperty _property;
  static const int PROPERTY = 10;
  int _subType;
  static const int SUBTYPE = 11;
  bool _onSale = false;
  static const int ONSALE = 12;
  bool _availableForPresent = false;
  static const int AVAILABLEFORPRESENT = 13;
  bool _availableForPurchase = false;
  static const int AVAILABLEFORPURCHASE = 14;
  int _validDays = 0;
  static const int VALIDDAYS = 15;
  String _authorId;
  static const int AUTHORID = 16;
  bool _saleFlag = false;
  static const int SALEFLAG = 17;

  bool __isset_type = false;
  bool __isset_version = false;
  bool __isset_newFlag = false;
  bool __isset_priceTier = false;
  bool __isset_subType = false;
  bool __isset_onSale = false;
  bool __isset_availableForPresent = false;
  bool __isset_availableForPurchase = false;
  bool __isset_validDays = false;
  bool __isset_saleFlag = false;

  ProductSearchSummary() {
  }

  // id
  String get id => this._id;

  set id(String id) {
    this._id = id;
  }

  bool isSetId() => this.id != null;

  unsetId() {
    this.id = null;
  }

  // type
  int get type => this._type;

  set type(int type) {
    this._type = type;
    this.__isset_type = true;
  }

  bool isSetType() => this.__isset_type;

  unsetType() {
    this.__isset_type = false;
  }

  // name
  String get name => this._name;

  set name(String name) {
    this._name = name;
  }

  bool isSetName() => this.name != null;

  unsetName() {
    this.name = null;
  }

  // author
  String get author => this._author;

  set author(String author) {
    this._author = author;
  }

  bool isSetAuthor() => this.author != null;

  unsetAuthor() {
    this.author = null;
  }

  // promotionInfo
  PromotionInfo get promotionInfo => this._promotionInfo;

  set promotionInfo(PromotionInfo promotionInfo) {
    this._promotionInfo = promotionInfo;
  }

  bool isSetPromotionInfo() => this.promotionInfo != null;

  unsetPromotionInfo() {
    this.promotionInfo = null;
  }

  // version
  int get version => this._version;

  set version(int version) {
    this._version = version;
    this.__isset_version = true;
  }

  bool isSetVersion() => this.__isset_version;

  unsetVersion() {
    this.__isset_version = false;
  }

  // newFlag
  bool get newFlag => this._newFlag;

  set newFlag(bool newFlag) {
    this._newFlag = newFlag;
    this.__isset_newFlag = true;
  }

  bool isSetNewFlag() => this.__isset_newFlag;

  unsetNewFlag() {
    this.__isset_newFlag = false;
  }

  // priceTier
  int get priceTier => this._priceTier;

  set priceTier(int priceTier) {
    this._priceTier = priceTier;
    this.__isset_priceTier = true;
  }

  bool isSetPriceTier() => this.__isset_priceTier;

  unsetPriceTier() {
    this.__isset_priceTier = false;
  }

  // priceInLineCoin
  String get priceInLineCoin => this._priceInLineCoin;

  set priceInLineCoin(String priceInLineCoin) {
    this._priceInLineCoin = priceInLineCoin;
  }

  bool isSetPriceInLineCoin() => this.priceInLineCoin != null;

  unsetPriceInLineCoin() {
    this.priceInLineCoin = null;
  }

  // property
  ProductProperty get property => this._property;

  set property(ProductProperty property) {
    this._property = property;
  }

  bool isSetProperty() => this.property != null;

  unsetProperty() {
    this.property = null;
  }

  // subType
  int get subType => this._subType;

  set subType(int subType) {
    this._subType = subType;
    this.__isset_subType = true;
  }

  bool isSetSubType() => this.__isset_subType;

  unsetSubType() {
    this.__isset_subType = false;
  }

  // onSale
  bool get onSale => this._onSale;

  set onSale(bool onSale) {
    this._onSale = onSale;
    this.__isset_onSale = true;
  }

  bool isSetOnSale() => this.__isset_onSale;

  unsetOnSale() {
    this.__isset_onSale = false;
  }

  // availableForPresent
  bool get availableForPresent => this._availableForPresent;

  set availableForPresent(bool availableForPresent) {
    this._availableForPresent = availableForPresent;
    this.__isset_availableForPresent = true;
  }

  bool isSetAvailableForPresent() => this.__isset_availableForPresent;

  unsetAvailableForPresent() {
    this.__isset_availableForPresent = false;
  }

  // availableForPurchase
  bool get availableForPurchase => this._availableForPurchase;

  set availableForPurchase(bool availableForPurchase) {
    this._availableForPurchase = availableForPurchase;
    this.__isset_availableForPurchase = true;
  }

  bool isSetAvailableForPurchase() => this.__isset_availableForPurchase;

  unsetAvailableForPurchase() {
    this.__isset_availableForPurchase = false;
  }

  // validDays
  int get validDays => this._validDays;

  set validDays(int validDays) {
    this._validDays = validDays;
    this.__isset_validDays = true;
  }

  bool isSetValidDays() => this.__isset_validDays;

  unsetValidDays() {
    this.__isset_validDays = false;
  }

  // authorId
  String get authorId => this._authorId;

  set authorId(String authorId) {
    this._authorId = authorId;
  }

  bool isSetAuthorId() => this.authorId != null;

  unsetAuthorId() {
    this.authorId = null;
  }

  // saleFlag
  bool get saleFlag => this._saleFlag;

  set saleFlag(bool saleFlag) {
    this._saleFlag = saleFlag;
    this.__isset_saleFlag = true;
  }

  bool isSetSaleFlag() => this.__isset_saleFlag;

  unsetSaleFlag() {
    this.__isset_saleFlag = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case ID:
        return this.id;
      case TYPE:
        return this.type;
      case NAME:
        return this.name;
      case AUTHOR:
        return this.author;
      case PROMOTIONINFO:
        return this.promotionInfo;
      case VERSION:
        return this.version;
      case NEWFLAG:
        return this.newFlag;
      case PRICETIER:
        return this.priceTier;
      case PRICEINLINECOIN:
        return this.priceInLineCoin;
      case PROPERTY:
        return this.property;
      case SUBTYPE:
        return this.subType;
      case ONSALE:
        return this.onSale;
      case AVAILABLEFORPRESENT:
        return this.availableForPresent;
      case AVAILABLEFORPURCHASE:
        return this.availableForPurchase;
      case VALIDDAYS:
        return this.validDays;
      case AUTHORID:
        return this.authorId;
      case SALEFLAG:
        return this.saleFlag;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          this.id = value;
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          this.type = value;
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          this.name = value;
        }
        break;

      case AUTHOR:
        if (value == null) {
          unsetAuthor();
        } else {
          this.author = value;
        }
        break;

      case PROMOTIONINFO:
        if (value == null) {
          unsetPromotionInfo();
        } else {
          this.promotionInfo = value;
        }
        break;

      case VERSION:
        if (value == null) {
          unsetVersion();
        } else {
          this.version = value;
        }
        break;

      case NEWFLAG:
        if (value == null) {
          unsetNewFlag();
        } else {
          this.newFlag = value;
        }
        break;

      case PRICETIER:
        if (value == null) {
          unsetPriceTier();
        } else {
          this.priceTier = value;
        }
        break;

      case PRICEINLINECOIN:
        if (value == null) {
          unsetPriceInLineCoin();
        } else {
          this.priceInLineCoin = value;
        }
        break;

      case PROPERTY:
        if (value == null) {
          unsetProperty();
        } else {
          this.property = value;
        }
        break;

      case SUBTYPE:
        if (value == null) {
          unsetSubType();
        } else {
          this.subType = value;
        }
        break;

      case ONSALE:
        if (value == null) {
          unsetOnSale();
        } else {
          this.onSale = value;
        }
        break;

      case AVAILABLEFORPRESENT:
        if (value == null) {
          unsetAvailableForPresent();
        } else {
          this.availableForPresent = value;
        }
        break;

      case AVAILABLEFORPURCHASE:
        if (value == null) {
          unsetAvailableForPurchase();
        } else {
          this.availableForPurchase = value;
        }
        break;

      case VALIDDAYS:
        if (value == null) {
          unsetValidDays();
        } else {
          this.validDays = value;
        }
        break;

      case AUTHORID:
        if (value == null) {
          unsetAuthorId();
        } else {
          this.authorId = value;
        }
        break;

      case SALEFLAG:
        if (value == null) {
          unsetSaleFlag();
        } else {
          this.saleFlag = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case ID:
        return isSetId();
      case TYPE:
        return isSetType();
      case NAME:
        return isSetName();
      case AUTHOR:
        return isSetAuthor();
      case PROMOTIONINFO:
        return isSetPromotionInfo();
      case VERSION:
        return isSetVersion();
      case NEWFLAG:
        return isSetNewFlag();
      case PRICETIER:
        return isSetPriceTier();
      case PRICEINLINECOIN:
        return isSetPriceInLineCoin();
      case PROPERTY:
        return isSetProperty();
      case SUBTYPE:
        return isSetSubType();
      case ONSALE:
        return isSetOnSale();
      case AVAILABLEFORPRESENT:
        return isSetAvailableForPresent();
      case AVAILABLEFORPURCHASE:
        return isSetAvailableForPurchase();
      case VALIDDAYS:
        return isSetValidDays();
      case AUTHORID:
        return isSetAuthorId();
      case SALEFLAG:
        return isSetSaleFlag();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ID:
          if (field.type == TType.STRING) {
            this.id = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TYPE:
          if (field.type == TType.I32) {
            this.type = iprot.readI32();
            this.__isset_type = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NAME:
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AUTHOR:
          if (field.type == TType.STRING) {
            this.author = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PROMOTIONINFO:
          if (field.type == TType.STRUCT) {
            this.promotionInfo = new PromotionInfo();
            this.promotionInfo.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case VERSION:
          if (field.type == TType.I64) {
            this.version = iprot.readI64();
            this.__isset_version = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NEWFLAG:
          if (field.type == TType.BOOL) {
            this.newFlag = iprot.readBool();
            this.__isset_newFlag = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PRICETIER:
          if (field.type == TType.I32) {
            this.priceTier = iprot.readI32();
            this.__isset_priceTier = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PRICEINLINECOIN:
          if (field.type == TType.STRING) {
            this.priceInLineCoin = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PROPERTY:
          if (field.type == TType.STRUCT) {
            this.property = new ProductProperty();
            this.property.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SUBTYPE:
          if (field.type == TType.I32) {
            this.subType = iprot.readI32();
            this.__isset_subType = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ONSALE:
          if (field.type == TType.BOOL) {
            this.onSale = iprot.readBool();
            this.__isset_onSale = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AVAILABLEFORPRESENT:
          if (field.type == TType.BOOL) {
            this.availableForPresent = iprot.readBool();
            this.__isset_availableForPresent = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AVAILABLEFORPURCHASE:
          if (field.type == TType.BOOL) {
            this.availableForPurchase = iprot.readBool();
            this.__isset_availableForPurchase = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case VALIDDAYS:
          if (field.type == TType.I32) {
            this.validDays = iprot.readI32();
            this.__isset_validDays = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AUTHORID:
          if (field.type == TType.STRING) {
            this.authorId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SALEFLAG:
          if (field.type == TType.BOOL) {
            this.saleFlag = iprot.readBool();
            this.__isset_saleFlag = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.id != null) {
      oprot.writeFieldBegin(_ID_FIELD_DESC);
      oprot.writeString(this.id);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_TYPE_FIELD_DESC);
    oprot.writeI32(this.type);
    oprot.writeFieldEnd();
    if (this.name != null) {
      oprot.writeFieldBegin(_NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.author != null) {
      oprot.writeFieldBegin(_AUTHOR_FIELD_DESC);
      oprot.writeString(this.author);
      oprot.writeFieldEnd();
    }
    if (this.promotionInfo != null) {
      oprot.writeFieldBegin(_PROMOTION_INFO_FIELD_DESC);
      this.promotionInfo.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_VERSION_FIELD_DESC);
    oprot.writeI64(this.version);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_NEW_FLAG_FIELD_DESC);
    oprot.writeBool(this.newFlag);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_PRICE_TIER_FIELD_DESC);
    oprot.writeI32(this.priceTier);
    oprot.writeFieldEnd();
    if (this.priceInLineCoin != null) {
      oprot.writeFieldBegin(_PRICE_IN_LINE_COIN_FIELD_DESC);
      oprot.writeString(this.priceInLineCoin);
      oprot.writeFieldEnd();
    }
    if (this.property != null) {
      oprot.writeFieldBegin(_PROPERTY_FIELD_DESC);
      this.property.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_SUB_TYPE_FIELD_DESC);
    oprot.writeI32(this.subType);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_ON_SALE_FIELD_DESC);
    oprot.writeBool(this.onSale);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_AVAILABLE_FOR_PRESENT_FIELD_DESC);
    oprot.writeBool(this.availableForPresent);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_AVAILABLE_FOR_PURCHASE_FIELD_DESC);
    oprot.writeBool(this.availableForPurchase);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_VALID_DAYS_FIELD_DESC);
    oprot.writeI32(this.validDays);
    oprot.writeFieldEnd();
    if (this.authorId != null) {
      oprot.writeFieldBegin(_AUTHOR_ID_FIELD_DESC);
      oprot.writeString(this.authorId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_SALE_FLAG_FIELD_DESC);
    oprot.writeBool(this.saleFlag);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ProductSearchSummary(");

    ret.write("id:");
    if (this.id == null) {
      ret.write("null");
    } else {
      ret.write(this.id);
    }

    ret.write(", ");
    ret.write("type:");
    String type_name = PType.VALUES_TO_NAMES[this.type];
    if (type_name != null) {
      ret.write(type_name);
      ret.write(" (");
    }
    ret.write(this.type);
    if (type_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("name:");
    if (this.name == null) {
      ret.write("null");
    } else {
      ret.write(this.name);
    }

    ret.write(", ");
    ret.write("author:");
    if (this.author == null) {
      ret.write("null");
    } else {
      ret.write(this.author);
    }

    ret.write(", ");
    ret.write("promotionInfo:");
    if (this.promotionInfo == null) {
      ret.write("null");
    } else {
      ret.write(this.promotionInfo);
    }

    ret.write(", ");
    ret.write("version:");
    ret.write(this.version);

    ret.write(", ");
    ret.write("newFlag:");
    ret.write(this.newFlag);

    ret.write(", ");
    ret.write("priceTier:");
    ret.write(this.priceTier);

    ret.write(", ");
    ret.write("priceInLineCoin:");
    if (this.priceInLineCoin == null) {
      ret.write("null");
    } else {
      ret.write(this.priceInLineCoin);
    }

    ret.write(", ");
    ret.write("property:");
    if (this.property == null) {
      ret.write("null");
    } else {
      ret.write(this.property);
    }

    ret.write(", ");
    ret.write("subType:");
    String subType_name = SubType.VALUES_TO_NAMES[this.subType];
    if (subType_name != null) {
      ret.write(subType_name);
      ret.write(" (");
    }
    ret.write(this.subType);
    if (subType_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("onSale:");
    ret.write(this.onSale);

    ret.write(", ");
    ret.write("availableForPresent:");
    ret.write(this.availableForPresent);

    ret.write(", ");
    ret.write("availableForPurchase:");
    ret.write(this.availableForPurchase);

    ret.write(", ");
    ret.write("validDays:");
    ret.write(this.validDays);

    ret.write(", ");
    ret.write("authorId:");
    if (this.authorId == null) {
      ret.write("null");
    } else {
      ret.write(this.authorId);
    }

    ret.write(", ");
    ret.write("saleFlag:");
    ret.write(this.saleFlag);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetType() && !PType.VALID_VALUES.contains(type)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'type' has been assigned the invalid value $type");
    }
    if (isSetSubType() && !SubType.VALID_VALUES.contains(subType)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'subType' has been assigned the invalid value $subType");
    }
  }

}

