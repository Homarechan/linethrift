/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.get_my_chatapps_response;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class GetMyChatappsResponse implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("GetMyChatappsResponse");
  static final TField _APPS_FIELD_DESC = new TField("apps", TType.LIST, 1);
  static final TField _CONTINUATION_TOKEN_FIELD_DESC = new TField("continuationToken", TType.STRING, 2);

  List<MyChatapp> _apps;
  static const int APPS = 1;
  String _continuationToken;
  static const int CONTINUATIONTOKEN = 2;


  GetMyChatappsResponse() {
  }

  // apps
  List<MyChatapp> get apps => this._apps;

  set apps(List<MyChatapp> apps) {
    this._apps = apps;
  }

  bool isSetApps() => this.apps != null;

  unsetApps() {
    this.apps = null;
  }

  // continuationToken
  String get continuationToken => this._continuationToken;

  set continuationToken(String continuationToken) {
    this._continuationToken = continuationToken;
  }

  bool isSetContinuationToken() => this.continuationToken != null;

  unsetContinuationToken() {
    this.continuationToken = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case APPS:
        return this.apps;
      case CONTINUATIONTOKEN:
        return this.continuationToken;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case APPS:
        if (value == null) {
          unsetApps();
        } else {
          this.apps = value;
        }
        break;

      case CONTINUATIONTOKEN:
        if (value == null) {
          unsetContinuationToken();
        } else {
          this.continuationToken = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case APPS:
        return isSetApps();
      case CONTINUATIONTOKEN:
        return isSetContinuationToken();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case APPS:
          if (field.type == TType.LIST) {
            {
              TList _list4 = iprot.readListBegin();
              this.apps = new List<MyChatapp>();
              for (int _i5 = 0; _i5 < _list4.length; ++_i5) {
                MyChatapp _elem6;
                _elem6 = new MyChatapp();
                _elem6.read(iprot);
                this.apps.add(_elem6);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CONTINUATIONTOKEN:
          if (field.type == TType.STRING) {
            this.continuationToken = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.apps != null) {
      oprot.writeFieldBegin(_APPS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.apps.length));
        for (var elem7 in this.apps) {
          elem7.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.continuationToken != null) {
      oprot.writeFieldBegin(_CONTINUATION_TOKEN_FIELD_DESC);
      oprot.writeString(this.continuationToken);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("GetMyChatappsResponse(");

    ret.write("apps:");
    if (this.apps == null) {
      ret.write("null");
    } else {
      ret.write(this.apps);
    }

    ret.write(", ");
    ret.write("continuationToken:");
    if (this.continuationToken == null) {
      ret.write("null");
    } else {
      ret.write(this.continuationToken);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

