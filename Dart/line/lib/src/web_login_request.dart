/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.web_login_request;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class WebLoginRequest implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("WebLoginRequest");
  static final TField _HOOKED_FULL_URL_FIELD_DESC = new TField("hookedFullUrl", TType.STRING, 1);
  static final TField _SESSION_STRING_FIELD_DESC = new TField("sessionString", TType.STRING, 2);
  static final TField _FROM_IAB_FIELD_DESC = new TField("fromIAB", TType.BOOL, 3);

  String _hookedFullUrl;
  static const int HOOKEDFULLURL = 1;
  String _sessionString;
  static const int SESSIONSTRING = 2;
  bool _fromIAB = false;
  static const int FROMIAB = 3;

  bool __isset_fromIAB = false;

  WebLoginRequest() {
  }

  // hookedFullUrl
  String get hookedFullUrl => this._hookedFullUrl;

  set hookedFullUrl(String hookedFullUrl) {
    this._hookedFullUrl = hookedFullUrl;
  }

  bool isSetHookedFullUrl() => this.hookedFullUrl != null;

  unsetHookedFullUrl() {
    this.hookedFullUrl = null;
  }

  // sessionString
  String get sessionString => this._sessionString;

  set sessionString(String sessionString) {
    this._sessionString = sessionString;
  }

  bool isSetSessionString() => this.sessionString != null;

  unsetSessionString() {
    this.sessionString = null;
  }

  // fromIAB
  bool get fromIAB => this._fromIAB;

  set fromIAB(bool fromIAB) {
    this._fromIAB = fromIAB;
    this.__isset_fromIAB = true;
  }

  bool isSetFromIAB() => this.__isset_fromIAB;

  unsetFromIAB() {
    this.__isset_fromIAB = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case HOOKEDFULLURL:
        return this.hookedFullUrl;
      case SESSIONSTRING:
        return this.sessionString;
      case FROMIAB:
        return this.fromIAB;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case HOOKEDFULLURL:
        if (value == null) {
          unsetHookedFullUrl();
        } else {
          this.hookedFullUrl = value;
        }
        break;

      case SESSIONSTRING:
        if (value == null) {
          unsetSessionString();
        } else {
          this.sessionString = value;
        }
        break;

      case FROMIAB:
        if (value == null) {
          unsetFromIAB();
        } else {
          this.fromIAB = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case HOOKEDFULLURL:
        return isSetHookedFullUrl();
      case SESSIONSTRING:
        return isSetSessionString();
      case FROMIAB:
        return isSetFromIAB();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case HOOKEDFULLURL:
          if (field.type == TType.STRING) {
            this.hookedFullUrl = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SESSIONSTRING:
          if (field.type == TType.STRING) {
            this.sessionString = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FROMIAB:
          if (field.type == TType.BOOL) {
            this.fromIAB = iprot.readBool();
            this.__isset_fromIAB = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.hookedFullUrl != null) {
      oprot.writeFieldBegin(_HOOKED_FULL_URL_FIELD_DESC);
      oprot.writeString(this.hookedFullUrl);
      oprot.writeFieldEnd();
    }
    if (this.sessionString != null) {
      oprot.writeFieldBegin(_SESSION_STRING_FIELD_DESC);
      oprot.writeString(this.sessionString);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_FROM_IAB_FIELD_DESC);
    oprot.writeBool(this.fromIAB);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("WebLoginRequest(");

    ret.write("hookedFullUrl:");
    if (this.hookedFullUrl == null) {
      ret.write("null");
    } else {
      ret.write(this.hookedFullUrl);
    }

    ret.write(", ");
    ret.write("sessionString:");
    if (this.sessionString == null) {
      ret.write("null");
    } else {
      ret.write(this.sessionString);
    }

    ret.write(", ");
    ret.write("fromIAB:");
    ret.write(this.fromIAB);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

