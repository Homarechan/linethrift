/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.product_simple_list;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class ProductSimpleList implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ProductSimpleList");
  static final TField _HAS_NEXT_FIELD_DESC = new TField("hasNext", TType.BOOL, 1);
  static final TField _REINVOKE_HOUR_FIELD_DESC = new TField("reinvokeHour", TType.I32, 2);
  static final TField _LAST_VERSION_SEQ_FIELD_DESC = new TField("lastVersionSeq", TType.I64, 3);
  static final TField _PRODUCT_LIST_FIELD_DESC = new TField("productList", TType.LIST, 4);
  static final TField _RECENT_NEW_RELEASE_DATE_FIELD_DESC = new TField("recentNewReleaseDate", TType.I64, 5);
  static final TField _RECENT_EVENT_RELEASE_DATE_FIELD_DESC = new TField("recentEventReleaseDate", TType.I64, 6);

  bool _hasNext = false;
  static const int HASNEXT = 1;
  int _reinvokeHour = 0;
  static const int REINVOKEHOUR = 2;
  int _lastVersionSeq = 0;
  static const int LASTVERSIONSEQ = 3;
  List<ProductSimple> _productList;
  static const int PRODUCTLIST = 4;
  int _recentNewReleaseDate = 0;
  static const int RECENTNEWRELEASEDATE = 5;
  int _recentEventReleaseDate = 0;
  static const int RECENTEVENTRELEASEDATE = 6;

  bool __isset_hasNext = false;
  bool __isset_reinvokeHour = false;
  bool __isset_lastVersionSeq = false;
  bool __isset_recentNewReleaseDate = false;
  bool __isset_recentEventReleaseDate = false;

  ProductSimpleList() {
  }

  // hasNext
  bool get hasNext => this._hasNext;

  set hasNext(bool hasNext) {
    this._hasNext = hasNext;
    this.__isset_hasNext = true;
  }

  bool isSetHasNext() => this.__isset_hasNext;

  unsetHasNext() {
    this.__isset_hasNext = false;
  }

  // reinvokeHour
  int get reinvokeHour => this._reinvokeHour;

  set reinvokeHour(int reinvokeHour) {
    this._reinvokeHour = reinvokeHour;
    this.__isset_reinvokeHour = true;
  }

  bool isSetReinvokeHour() => this.__isset_reinvokeHour;

  unsetReinvokeHour() {
    this.__isset_reinvokeHour = false;
  }

  // lastVersionSeq
  int get lastVersionSeq => this._lastVersionSeq;

  set lastVersionSeq(int lastVersionSeq) {
    this._lastVersionSeq = lastVersionSeq;
    this.__isset_lastVersionSeq = true;
  }

  bool isSetLastVersionSeq() => this.__isset_lastVersionSeq;

  unsetLastVersionSeq() {
    this.__isset_lastVersionSeq = false;
  }

  // productList
  List<ProductSimple> get productList => this._productList;

  set productList(List<ProductSimple> productList) {
    this._productList = productList;
  }

  bool isSetProductList() => this.productList != null;

  unsetProductList() {
    this.productList = null;
  }

  // recentNewReleaseDate
  int get recentNewReleaseDate => this._recentNewReleaseDate;

  set recentNewReleaseDate(int recentNewReleaseDate) {
    this._recentNewReleaseDate = recentNewReleaseDate;
    this.__isset_recentNewReleaseDate = true;
  }

  bool isSetRecentNewReleaseDate() => this.__isset_recentNewReleaseDate;

  unsetRecentNewReleaseDate() {
    this.__isset_recentNewReleaseDate = false;
  }

  // recentEventReleaseDate
  int get recentEventReleaseDate => this._recentEventReleaseDate;

  set recentEventReleaseDate(int recentEventReleaseDate) {
    this._recentEventReleaseDate = recentEventReleaseDate;
    this.__isset_recentEventReleaseDate = true;
  }

  bool isSetRecentEventReleaseDate() => this.__isset_recentEventReleaseDate;

  unsetRecentEventReleaseDate() {
    this.__isset_recentEventReleaseDate = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case HASNEXT:
        return this.hasNext;
      case REINVOKEHOUR:
        return this.reinvokeHour;
      case LASTVERSIONSEQ:
        return this.lastVersionSeq;
      case PRODUCTLIST:
        return this.productList;
      case RECENTNEWRELEASEDATE:
        return this.recentNewReleaseDate;
      case RECENTEVENTRELEASEDATE:
        return this.recentEventReleaseDate;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case HASNEXT:
        if (value == null) {
          unsetHasNext();
        } else {
          this.hasNext = value;
        }
        break;

      case REINVOKEHOUR:
        if (value == null) {
          unsetReinvokeHour();
        } else {
          this.reinvokeHour = value;
        }
        break;

      case LASTVERSIONSEQ:
        if (value == null) {
          unsetLastVersionSeq();
        } else {
          this.lastVersionSeq = value;
        }
        break;

      case PRODUCTLIST:
        if (value == null) {
          unsetProductList();
        } else {
          this.productList = value;
        }
        break;

      case RECENTNEWRELEASEDATE:
        if (value == null) {
          unsetRecentNewReleaseDate();
        } else {
          this.recentNewReleaseDate = value;
        }
        break;

      case RECENTEVENTRELEASEDATE:
        if (value == null) {
          unsetRecentEventReleaseDate();
        } else {
          this.recentEventReleaseDate = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case HASNEXT:
        return isSetHasNext();
      case REINVOKEHOUR:
        return isSetReinvokeHour();
      case LASTVERSIONSEQ:
        return isSetLastVersionSeq();
      case PRODUCTLIST:
        return isSetProductList();
      case RECENTNEWRELEASEDATE:
        return isSetRecentNewReleaseDate();
      case RECENTEVENTRELEASEDATE:
        return isSetRecentEventReleaseDate();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case HASNEXT:
          if (field.type == TType.BOOL) {
            this.hasNext = iprot.readBool();
            this.__isset_hasNext = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case REINVOKEHOUR:
          if (field.type == TType.I32) {
            this.reinvokeHour = iprot.readI32();
            this.__isset_reinvokeHour = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LASTVERSIONSEQ:
          if (field.type == TType.I64) {
            this.lastVersionSeq = iprot.readI64();
            this.__isset_lastVersionSeq = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PRODUCTLIST:
          if (field.type == TType.LIST) {
            {
              TList _list214 = iprot.readListBegin();
              this.productList = new List<ProductSimple>();
              for (int _i215 = 0; _i215 < _list214.length; ++_i215) {
                ProductSimple _elem216;
                _elem216 = new ProductSimple();
                _elem216.read(iprot);
                this.productList.add(_elem216);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RECENTNEWRELEASEDATE:
          if (field.type == TType.I64) {
            this.recentNewReleaseDate = iprot.readI64();
            this.__isset_recentNewReleaseDate = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RECENTEVENTRELEASEDATE:
          if (field.type == TType.I64) {
            this.recentEventReleaseDate = iprot.readI64();
            this.__isset_recentEventReleaseDate = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_HAS_NEXT_FIELD_DESC);
    oprot.writeBool(this.hasNext);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_REINVOKE_HOUR_FIELD_DESC);
    oprot.writeI32(this.reinvokeHour);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_LAST_VERSION_SEQ_FIELD_DESC);
    oprot.writeI64(this.lastVersionSeq);
    oprot.writeFieldEnd();
    if (this.productList != null) {
      oprot.writeFieldBegin(_PRODUCT_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.productList.length));
        for (var elem217 in this.productList) {
          elem217.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_RECENT_NEW_RELEASE_DATE_FIELD_DESC);
    oprot.writeI64(this.recentNewReleaseDate);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_RECENT_EVENT_RELEASE_DATE_FIELD_DESC);
    oprot.writeI64(this.recentEventReleaseDate);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ProductSimpleList(");

    ret.write("hasNext:");
    ret.write(this.hasNext);

    ret.write(", ");
    ret.write("reinvokeHour:");
    ret.write(this.reinvokeHour);

    ret.write(", ");
    ret.write("lastVersionSeq:");
    ret.write(this.lastVersionSeq);

    ret.write(", ");
    ret.write("productList:");
    if (this.productList == null) {
      ret.write("null");
    } else {
      ret.write(this.productList);
    }

    ret.write(", ");
    ret.write("recentNewReleaseDate:");
    ret.write(this.recentNewReleaseDate);

    ret.write(", ");
    ret.write("recentEventReleaseDate:");
    ret.write(this.recentEventReleaseDate);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

