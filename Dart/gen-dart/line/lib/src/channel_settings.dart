/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.channel_settings;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class ChannelSettings implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ChannelSettings");
  static final TField _UNAPPROVED_MESSAGE_RECEIVABLE_FIELD_DESC = new TField("unapprovedMessageReceivable", TType.BOOL, 1);

  bool _unapprovedMessageReceivable = false;
  static const int UNAPPROVEDMESSAGERECEIVABLE = 1;

  bool __isset_unapprovedMessageReceivable = false;

  ChannelSettings() {
  }

  // unapprovedMessageReceivable
  bool get unapprovedMessageReceivable => this._unapprovedMessageReceivable;

  set unapprovedMessageReceivable(bool unapprovedMessageReceivable) {
    this._unapprovedMessageReceivable = unapprovedMessageReceivable;
    this.__isset_unapprovedMessageReceivable = true;
  }

  bool isSetUnapprovedMessageReceivable() => this.__isset_unapprovedMessageReceivable;

  unsetUnapprovedMessageReceivable() {
    this.__isset_unapprovedMessageReceivable = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case UNAPPROVEDMESSAGERECEIVABLE:
        return this.unapprovedMessageReceivable;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case UNAPPROVEDMESSAGERECEIVABLE:
        if (value == null) {
          unsetUnapprovedMessageReceivable();
        } else {
          this.unapprovedMessageReceivable = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case UNAPPROVEDMESSAGERECEIVABLE:
        return isSetUnapprovedMessageReceivable();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case UNAPPROVEDMESSAGERECEIVABLE:
          if (field.type == TType.BOOL) {
            this.unapprovedMessageReceivable = iprot.readBool();
            this.__isset_unapprovedMessageReceivable = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_UNAPPROVED_MESSAGE_RECEIVABLE_FIELD_DESC);
    oprot.writeBool(this.unapprovedMessageReceivable);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ChannelSettings(");

    ret.write("unapprovedMessageReceivable:");
    ret.write(this.unapprovedMessageReceivable);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

