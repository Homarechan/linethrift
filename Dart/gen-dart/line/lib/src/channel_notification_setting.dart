/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.channel_notification_setting;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class ChannelNotificationSetting implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ChannelNotificationSetting");
  static final TField _CHANNEL_ID_FIELD_DESC = new TField("channelId", TType.STRING, 1);
  static final TField _NAME_FIELD_DESC = new TField("name", TType.STRING, 2);
  static final TField _NOTIFICATION_RECEIVABLE_FIELD_DESC = new TField("notificationReceivable", TType.BOOL, 3);
  static final TField _MESSAGE_RECEIVABLE_FIELD_DESC = new TField("messageReceivable", TType.BOOL, 4);
  static final TField _SHOW_DEFAULT_FIELD_DESC = new TField("showDefault", TType.BOOL, 5);

  String _channelId;
  static const int CHANNELID = 1;
  String _name;
  static const int NAME = 2;
  bool _notificationReceivable = false;
  static const int NOTIFICATIONRECEIVABLE = 3;
  bool _messageReceivable = false;
  static const int MESSAGERECEIVABLE = 4;
  bool _showDefault = false;
  static const int SHOWDEFAULT = 5;

  bool __isset_notificationReceivable = false;
  bool __isset_messageReceivable = false;
  bool __isset_showDefault = false;

  ChannelNotificationSetting() {
  }

  // channelId
  String get channelId => this._channelId;

  set channelId(String channelId) {
    this._channelId = channelId;
  }

  bool isSetChannelId() => this.channelId != null;

  unsetChannelId() {
    this.channelId = null;
  }

  // name
  String get name => this._name;

  set name(String name) {
    this._name = name;
  }

  bool isSetName() => this.name != null;

  unsetName() {
    this.name = null;
  }

  // notificationReceivable
  bool get notificationReceivable => this._notificationReceivable;

  set notificationReceivable(bool notificationReceivable) {
    this._notificationReceivable = notificationReceivable;
    this.__isset_notificationReceivable = true;
  }

  bool isSetNotificationReceivable() => this.__isset_notificationReceivable;

  unsetNotificationReceivable() {
    this.__isset_notificationReceivable = false;
  }

  // messageReceivable
  bool get messageReceivable => this._messageReceivable;

  set messageReceivable(bool messageReceivable) {
    this._messageReceivable = messageReceivable;
    this.__isset_messageReceivable = true;
  }

  bool isSetMessageReceivable() => this.__isset_messageReceivable;

  unsetMessageReceivable() {
    this.__isset_messageReceivable = false;
  }

  // showDefault
  bool get showDefault => this._showDefault;

  set showDefault(bool showDefault) {
    this._showDefault = showDefault;
    this.__isset_showDefault = true;
  }

  bool isSetShowDefault() => this.__isset_showDefault;

  unsetShowDefault() {
    this.__isset_showDefault = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case CHANNELID:
        return this.channelId;
      case NAME:
        return this.name;
      case NOTIFICATIONRECEIVABLE:
        return this.notificationReceivable;
      case MESSAGERECEIVABLE:
        return this.messageReceivable;
      case SHOWDEFAULT:
        return this.showDefault;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case CHANNELID:
        if (value == null) {
          unsetChannelId();
        } else {
          this.channelId = value;
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          this.name = value;
        }
        break;

      case NOTIFICATIONRECEIVABLE:
        if (value == null) {
          unsetNotificationReceivable();
        } else {
          this.notificationReceivable = value;
        }
        break;

      case MESSAGERECEIVABLE:
        if (value == null) {
          unsetMessageReceivable();
        } else {
          this.messageReceivable = value;
        }
        break;

      case SHOWDEFAULT:
        if (value == null) {
          unsetShowDefault();
        } else {
          this.showDefault = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case CHANNELID:
        return isSetChannelId();
      case NAME:
        return isSetName();
      case NOTIFICATIONRECEIVABLE:
        return isSetNotificationReceivable();
      case MESSAGERECEIVABLE:
        return isSetMessageReceivable();
      case SHOWDEFAULT:
        return isSetShowDefault();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case CHANNELID:
          if (field.type == TType.STRING) {
            this.channelId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NAME:
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NOTIFICATIONRECEIVABLE:
          if (field.type == TType.BOOL) {
            this.notificationReceivable = iprot.readBool();
            this.__isset_notificationReceivable = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MESSAGERECEIVABLE:
          if (field.type == TType.BOOL) {
            this.messageReceivable = iprot.readBool();
            this.__isset_messageReceivable = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SHOWDEFAULT:
          if (field.type == TType.BOOL) {
            this.showDefault = iprot.readBool();
            this.__isset_showDefault = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.channelId != null) {
      oprot.writeFieldBegin(_CHANNEL_ID_FIELD_DESC);
      oprot.writeString(this.channelId);
      oprot.writeFieldEnd();
    }
    if (this.name != null) {
      oprot.writeFieldBegin(_NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_NOTIFICATION_RECEIVABLE_FIELD_DESC);
    oprot.writeBool(this.notificationReceivable);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_MESSAGE_RECEIVABLE_FIELD_DESC);
    oprot.writeBool(this.messageReceivable);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_SHOW_DEFAULT_FIELD_DESC);
    oprot.writeBool(this.showDefault);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ChannelNotificationSetting(");

    ret.write("channelId:");
    if (this.channelId == null) {
      ret.write("null");
    } else {
      ret.write(this.channelId);
    }

    ret.write(", ");
    ret.write("name:");
    if (this.name == null) {
      ret.write("null");
    } else {
      ret.write(this.name);
    }

    ret.write(", ");
    ret.write("notificationReceivable:");
    ret.write(this.notificationReceivable);

    ret.write(", ");
    ret.write("messageReceivable:");
    ret.write(this.messageReceivable);

    ret.write(", ");
    ret.write("showDefault:");
    ret.write(this.showDefault);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

