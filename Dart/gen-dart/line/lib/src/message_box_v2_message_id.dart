/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.message_box_v2_message_id;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class MessageBoxV2MessageId implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("MessageBoxV2MessageId");
  static final TField _DELIVERED_TIME_FIELD_DESC = new TField("deliveredTime", TType.I64, 1);
  static final TField _MESSAGE_ID_FIELD_DESC = new TField("messageId", TType.I64, 2);

  int _deliveredTime = 0;
  static const int DELIVEREDTIME = 1;
  int _messageId = 0;
  static const int MESSAGEID = 2;

  bool __isset_deliveredTime = false;
  bool __isset_messageId = false;

  MessageBoxV2MessageId() {
  }

  // deliveredTime
  int get deliveredTime => this._deliveredTime;

  set deliveredTime(int deliveredTime) {
    this._deliveredTime = deliveredTime;
    this.__isset_deliveredTime = true;
  }

  bool isSetDeliveredTime() => this.__isset_deliveredTime;

  unsetDeliveredTime() {
    this.__isset_deliveredTime = false;
  }

  // messageId
  int get messageId => this._messageId;

  set messageId(int messageId) {
    this._messageId = messageId;
    this.__isset_messageId = true;
  }

  bool isSetMessageId() => this.__isset_messageId;

  unsetMessageId() {
    this.__isset_messageId = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case DELIVEREDTIME:
        return this.deliveredTime;
      case MESSAGEID:
        return this.messageId;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case DELIVEREDTIME:
        if (value == null) {
          unsetDeliveredTime();
        } else {
          this.deliveredTime = value;
        }
        break;

      case MESSAGEID:
        if (value == null) {
          unsetMessageId();
        } else {
          this.messageId = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case DELIVEREDTIME:
        return isSetDeliveredTime();
      case MESSAGEID:
        return isSetMessageId();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case DELIVEREDTIME:
          if (field.type == TType.I64) {
            this.deliveredTime = iprot.readI64();
            this.__isset_deliveredTime = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MESSAGEID:
          if (field.type == TType.I64) {
            this.messageId = iprot.readI64();
            this.__isset_messageId = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_DELIVERED_TIME_FIELD_DESC);
    oprot.writeI64(this.deliveredTime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_MESSAGE_ID_FIELD_DESC);
    oprot.writeI64(this.messageId);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("MessageBoxV2MessageId(");

    ret.write("deliveredTime:");
    ret.write(this.deliveredTime);

    ret.write(", ");
    ret.write("messageId:");
    ret.write(this.messageId);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

