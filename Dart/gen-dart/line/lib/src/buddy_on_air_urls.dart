/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.buddy_on_air_urls;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class BuddyOnAirUrls implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("BuddyOnAirUrls");
  static final TField _HLS_FIELD_DESC = new TField("hls", TType.MAP, 1);
  static final TField _SMOOTH_STREAMING_FIELD_DESC = new TField("smoothStreaming", TType.MAP, 2);

  Map<String, String> _hls;
  static const int HLS = 1;
  Map<String, String> _smoothStreaming;
  static const int SMOOTHSTREAMING = 2;


  BuddyOnAirUrls() {
  }

  // hls
  Map<String, String> get hls => this._hls;

  set hls(Map<String, String> hls) {
    this._hls = hls;
  }

  bool isSetHls() => this.hls != null;

  unsetHls() {
    this.hls = null;
  }

  // smoothStreaming
  Map<String, String> get smoothStreaming => this._smoothStreaming;

  set smoothStreaming(Map<String, String> smoothStreaming) {
    this._smoothStreaming = smoothStreaming;
  }

  bool isSetSmoothStreaming() => this.smoothStreaming != null;

  unsetSmoothStreaming() {
    this.smoothStreaming = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case HLS:
        return this.hls;
      case SMOOTHSTREAMING:
        return this.smoothStreaming;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case HLS:
        if (value == null) {
          unsetHls();
        } else {
          this.hls = value;
        }
        break;

      case SMOOTHSTREAMING:
        if (value == null) {
          unsetSmoothStreaming();
        } else {
          this.smoothStreaming = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case HLS:
        return isSetHls();
      case SMOOTHSTREAMING:
        return isSetSmoothStreaming();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case HLS:
          if (field.type == TType.MAP) {
            {
              TMap _map70 = iprot.readMapBegin();
              this.hls = new Map<String, String>();
              for (int _i71 = 0; _i71 < _map70.length; ++_i71) {
                String _key72;
                String _val73;
                _key72 = iprot.readString();
                _val73 = iprot.readString();
                this.hls[_key72] = _val73;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SMOOTHSTREAMING:
          if (field.type == TType.MAP) {
            {
              TMap _map74 = iprot.readMapBegin();
              this.smoothStreaming = new Map<String, String>();
              for (int _i75 = 0; _i75 < _map74.length; ++_i75) {
                String _key76;
                String _val77;
                _key76 = iprot.readString();
                _val77 = iprot.readString();
                this.smoothStreaming[_key76] = _val77;
              }
              iprot.readMapEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.hls != null) {
      oprot.writeFieldBegin(_HLS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.hls.length));
        for (var elem79 in this.hls.keys) {
          oprot.writeString(elem79);
          oprot.writeString(this.hls[elem79]);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.smoothStreaming != null) {
      oprot.writeFieldBegin(_SMOOTH_STREAMING_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.smoothStreaming.length));
        for (var elem81 in this.smoothStreaming.keys) {
          oprot.writeString(elem81);
          oprot.writeString(this.smoothStreaming[elem81]);
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("BuddyOnAirUrls(");

    ret.write("hls:");
    if (this.hls == null) {
      ret.write("null");
    } else {
      ret.write(this.hls);
    }

    ret.write(", ");
    ret.write("smoothStreaming:");
    if (this.smoothStreaming == null) {
      ret.write("null");
    } else {
      ret.write(this.smoothStreaming);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

