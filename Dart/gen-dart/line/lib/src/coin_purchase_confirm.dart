/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.coin_purchase_confirm;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class CoinPurchaseConfirm implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("CoinPurchaseConfirm");
  static final TField _ORDER_ID_FIELD_DESC = new TField("orderId", TType.STRING, 1);
  static final TField _APP_STORE_CODE_FIELD_DESC = new TField("appStoreCode", TType.I32, 2);
  static final TField _RECEIPT_FIELD_DESC = new TField("receipt", TType.STRING, 3);
  static final TField _SIGNATURE_FIELD_DESC = new TField("signature", TType.STRING, 4);
  static final TField _SELLER_FIELD_DESC = new TField("seller", TType.STRING, 5);
  static final TField _REQUEST_TYPE_FIELD_DESC = new TField("requestType", TType.STRING, 6);
  static final TField _IGNORE_RECEIPT_FIELD_DESC = new TField("ignoreReceipt", TType.BOOL, 7);

  String _orderId;
  static const int ORDERID = 1;
  int _appStoreCode;
  static const int APPSTORECODE = 2;
  String _receipt;
  static const int RECEIPT = 3;
  String _signature;
  static const int SIGNATURE = 4;
  String _seller;
  static const int SELLER = 5;
  String _requestType;
  static const int REQUESTTYPE = 6;
  bool _ignoreReceipt = false;
  static const int IGNORERECEIPT = 7;

  bool __isset_appStoreCode = false;
  bool __isset_ignoreReceipt = false;

  CoinPurchaseConfirm() {
  }

  // orderId
  String get orderId => this._orderId;

  set orderId(String orderId) {
    this._orderId = orderId;
  }

  bool isSetOrderId() => this.orderId != null;

  unsetOrderId() {
    this.orderId = null;
  }

  // appStoreCode
  int get appStoreCode => this._appStoreCode;

  set appStoreCode(int appStoreCode) {
    this._appStoreCode = appStoreCode;
    this.__isset_appStoreCode = true;
  }

  bool isSetAppStoreCode() => this.__isset_appStoreCode;

  unsetAppStoreCode() {
    this.__isset_appStoreCode = false;
  }

  // receipt
  String get receipt => this._receipt;

  set receipt(String receipt) {
    this._receipt = receipt;
  }

  bool isSetReceipt() => this.receipt != null;

  unsetReceipt() {
    this.receipt = null;
  }

  // signature
  String get signature => this._signature;

  set signature(String signature) {
    this._signature = signature;
  }

  bool isSetSignature() => this.signature != null;

  unsetSignature() {
    this.signature = null;
  }

  // seller
  String get seller => this._seller;

  set seller(String seller) {
    this._seller = seller;
  }

  bool isSetSeller() => this.seller != null;

  unsetSeller() {
    this.seller = null;
  }

  // requestType
  String get requestType => this._requestType;

  set requestType(String requestType) {
    this._requestType = requestType;
  }

  bool isSetRequestType() => this.requestType != null;

  unsetRequestType() {
    this.requestType = null;
  }

  // ignoreReceipt
  bool get ignoreReceipt => this._ignoreReceipt;

  set ignoreReceipt(bool ignoreReceipt) {
    this._ignoreReceipt = ignoreReceipt;
    this.__isset_ignoreReceipt = true;
  }

  bool isSetIgnoreReceipt() => this.__isset_ignoreReceipt;

  unsetIgnoreReceipt() {
    this.__isset_ignoreReceipt = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case ORDERID:
        return this.orderId;
      case APPSTORECODE:
        return this.appStoreCode;
      case RECEIPT:
        return this.receipt;
      case SIGNATURE:
        return this.signature;
      case SELLER:
        return this.seller;
      case REQUESTTYPE:
        return this.requestType;
      case IGNORERECEIPT:
        return this.ignoreReceipt;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case ORDERID:
        if (value == null) {
          unsetOrderId();
        } else {
          this.orderId = value;
        }
        break;

      case APPSTORECODE:
        if (value == null) {
          unsetAppStoreCode();
        } else {
          this.appStoreCode = value;
        }
        break;

      case RECEIPT:
        if (value == null) {
          unsetReceipt();
        } else {
          this.receipt = value;
        }
        break;

      case SIGNATURE:
        if (value == null) {
          unsetSignature();
        } else {
          this.signature = value;
        }
        break;

      case SELLER:
        if (value == null) {
          unsetSeller();
        } else {
          this.seller = value;
        }
        break;

      case REQUESTTYPE:
        if (value == null) {
          unsetRequestType();
        } else {
          this.requestType = value;
        }
        break;

      case IGNORERECEIPT:
        if (value == null) {
          unsetIgnoreReceipt();
        } else {
          this.ignoreReceipt = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case ORDERID:
        return isSetOrderId();
      case APPSTORECODE:
        return isSetAppStoreCode();
      case RECEIPT:
        return isSetReceipt();
      case SIGNATURE:
        return isSetSignature();
      case SELLER:
        return isSetSeller();
      case REQUESTTYPE:
        return isSetRequestType();
      case IGNORERECEIPT:
        return isSetIgnoreReceipt();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ORDERID:
          if (field.type == TType.STRING) {
            this.orderId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case APPSTORECODE:
          if (field.type == TType.I32) {
            this.appStoreCode = iprot.readI32();
            this.__isset_appStoreCode = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case RECEIPT:
          if (field.type == TType.STRING) {
            this.receipt = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SIGNATURE:
          if (field.type == TType.STRING) {
            this.signature = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SELLER:
          if (field.type == TType.STRING) {
            this.seller = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case REQUESTTYPE:
          if (field.type == TType.STRING) {
            this.requestType = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case IGNORERECEIPT:
          if (field.type == TType.BOOL) {
            this.ignoreReceipt = iprot.readBool();
            this.__isset_ignoreReceipt = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.orderId != null) {
      oprot.writeFieldBegin(_ORDER_ID_FIELD_DESC);
      oprot.writeString(this.orderId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_APP_STORE_CODE_FIELD_DESC);
    oprot.writeI32(this.appStoreCode);
    oprot.writeFieldEnd();
    if (this.receipt != null) {
      oprot.writeFieldBegin(_RECEIPT_FIELD_DESC);
      oprot.writeString(this.receipt);
      oprot.writeFieldEnd();
    }
    if (this.signature != null) {
      oprot.writeFieldBegin(_SIGNATURE_FIELD_DESC);
      oprot.writeString(this.signature);
      oprot.writeFieldEnd();
    }
    if (this.seller != null) {
      oprot.writeFieldBegin(_SELLER_FIELD_DESC);
      oprot.writeString(this.seller);
      oprot.writeFieldEnd();
    }
    if (this.requestType != null) {
      oprot.writeFieldBegin(_REQUEST_TYPE_FIELD_DESC);
      oprot.writeString(this.requestType);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_IGNORE_RECEIPT_FIELD_DESC);
    oprot.writeBool(this.ignoreReceipt);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("CoinPurchaseConfirm(");

    ret.write("orderId:");
    if (this.orderId == null) {
      ret.write("null");
    } else {
      ret.write(this.orderId);
    }

    ret.write(", ");
    ret.write("appStoreCode:");
    String appStoreCode_name = PaymentType.VALUES_TO_NAMES[this.appStoreCode];
    if (appStoreCode_name != null) {
      ret.write(appStoreCode_name);
      ret.write(" (");
    }
    ret.write(this.appStoreCode);
    if (appStoreCode_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("receipt:");
    if (this.receipt == null) {
      ret.write("null");
    } else {
      ret.write(this.receipt);
    }

    ret.write(", ");
    ret.write("signature:");
    if (this.signature == null) {
      ret.write("null");
    } else {
      ret.write(this.signature);
    }

    ret.write(", ");
    ret.write("seller:");
    if (this.seller == null) {
      ret.write("null");
    } else {
      ret.write(this.seller);
    }

    ret.write(", ");
    ret.write("requestType:");
    if (this.requestType == null) {
      ret.write("null");
    } else {
      ret.write(this.requestType);
    }

    ret.write(", ");
    ret.write("ignoreReceipt:");
    ret.write(this.ignoreReceipt);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetAppStoreCode() && !PaymentType.VALID_VALUES.contains(appStoreCode)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'appStoreCode' has been assigned the invalid value $appStoreCode");
    }
  }

}

