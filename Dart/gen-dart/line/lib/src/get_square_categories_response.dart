/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.get_square_categories_response;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class GetSquareCategoriesResponse implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("GetSquareCategoriesResponse");
  static final TField _CATEGORY_LIST_FIELD_DESC = new TField("categoryList", TType.LIST, 1);

  List<Category> _categoryList;
  static const int CATEGORYLIST = 1;


  GetSquareCategoriesResponse() {
  }

  // categoryList
  List<Category> get categoryList => this._categoryList;

  set categoryList(List<Category> categoryList) {
    this._categoryList = categoryList;
  }

  bool isSetCategoryList() => this.categoryList != null;

  unsetCategoryList() {
    this.categoryList = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case CATEGORYLIST:
        return this.categoryList;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case CATEGORYLIST:
        if (value == null) {
          unsetCategoryList();
        } else {
          this.categoryList = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case CATEGORYLIST:
        return isSetCategoryList();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case CATEGORYLIST:
          if (field.type == TType.LIST) {
            {
              TList _list396 = iprot.readListBegin();
              this.categoryList = new List<Category>();
              for (int _i397 = 0; _i397 < _list396.length; ++_i397) {
                Category _elem398;
                _elem398 = new Category();
                _elem398.read(iprot);
                this.categoryList.add(_elem398);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.categoryList != null) {
      oprot.writeFieldBegin(_CATEGORY_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.categoryList.length));
        for (var elem399 in this.categoryList) {
          elem399.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("GetSquareCategoriesResponse(");

    ret.write("categoryList:");
    if (this.categoryList == null) {
      ret.write("null");
    } else {
      ret.write(this.categoryList);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

