/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.system_configuration;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class SystemConfiguration implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("SystemConfiguration");
  static final TField _ENDPOINT_FIELD_DESC = new TField("endpoint", TType.STRING, 1);
  static final TField _ENDPOINT_SSL_FIELD_DESC = new TField("endpointSsl", TType.STRING, 2);
  static final TField _UPDATE_URL_FIELD_DESC = new TField("updateUrl", TType.STRING, 3);
  static final TField _C2DM_ACCOUNT_FIELD_DESC = new TField("c2dmAccount", TType.STRING, 11);
  static final TField _NNI_SERVER_FIELD_DESC = new TField("nniServer", TType.STRING, 12);

  String _endpoint;
  static const int ENDPOINT = 1;
  String _endpointSsl;
  static const int ENDPOINTSSL = 2;
  String _updateUrl;
  static const int UPDATEURL = 3;
  String _c2dmAccount;
  static const int C2DMACCOUNT = 11;
  String _nniServer;
  static const int NNISERVER = 12;


  SystemConfiguration() {
  }

  // endpoint
  String get endpoint => this._endpoint;

  set endpoint(String endpoint) {
    this._endpoint = endpoint;
  }

  bool isSetEndpoint() => this.endpoint != null;

  unsetEndpoint() {
    this.endpoint = null;
  }

  // endpointSsl
  String get endpointSsl => this._endpointSsl;

  set endpointSsl(String endpointSsl) {
    this._endpointSsl = endpointSsl;
  }

  bool isSetEndpointSsl() => this.endpointSsl != null;

  unsetEndpointSsl() {
    this.endpointSsl = null;
  }

  // updateUrl
  String get updateUrl => this._updateUrl;

  set updateUrl(String updateUrl) {
    this._updateUrl = updateUrl;
  }

  bool isSetUpdateUrl() => this.updateUrl != null;

  unsetUpdateUrl() {
    this.updateUrl = null;
  }

  // c2dmAccount
  String get c2dmAccount => this._c2dmAccount;

  set c2dmAccount(String c2dmAccount) {
    this._c2dmAccount = c2dmAccount;
  }

  bool isSetC2dmAccount() => this.c2dmAccount != null;

  unsetC2dmAccount() {
    this.c2dmAccount = null;
  }

  // nniServer
  String get nniServer => this._nniServer;

  set nniServer(String nniServer) {
    this._nniServer = nniServer;
  }

  bool isSetNniServer() => this.nniServer != null;

  unsetNniServer() {
    this.nniServer = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case ENDPOINT:
        return this.endpoint;
      case ENDPOINTSSL:
        return this.endpointSsl;
      case UPDATEURL:
        return this.updateUrl;
      case C2DMACCOUNT:
        return this.c2dmAccount;
      case NNISERVER:
        return this.nniServer;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case ENDPOINT:
        if (value == null) {
          unsetEndpoint();
        } else {
          this.endpoint = value;
        }
        break;

      case ENDPOINTSSL:
        if (value == null) {
          unsetEndpointSsl();
        } else {
          this.endpointSsl = value;
        }
        break;

      case UPDATEURL:
        if (value == null) {
          unsetUpdateUrl();
        } else {
          this.updateUrl = value;
        }
        break;

      case C2DMACCOUNT:
        if (value == null) {
          unsetC2dmAccount();
        } else {
          this.c2dmAccount = value;
        }
        break;

      case NNISERVER:
        if (value == null) {
          unsetNniServer();
        } else {
          this.nniServer = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case ENDPOINT:
        return isSetEndpoint();
      case ENDPOINTSSL:
        return isSetEndpointSsl();
      case UPDATEURL:
        return isSetUpdateUrl();
      case C2DMACCOUNT:
        return isSetC2dmAccount();
      case NNISERVER:
        return isSetNniServer();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ENDPOINT:
          if (field.type == TType.STRING) {
            this.endpoint = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ENDPOINTSSL:
          if (field.type == TType.STRING) {
            this.endpointSsl = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case UPDATEURL:
          if (field.type == TType.STRING) {
            this.updateUrl = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case C2DMACCOUNT:
          if (field.type == TType.STRING) {
            this.c2dmAccount = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NNISERVER:
          if (field.type == TType.STRING) {
            this.nniServer = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.endpoint != null) {
      oprot.writeFieldBegin(_ENDPOINT_FIELD_DESC);
      oprot.writeString(this.endpoint);
      oprot.writeFieldEnd();
    }
    if (this.endpointSsl != null) {
      oprot.writeFieldBegin(_ENDPOINT_SSL_FIELD_DESC);
      oprot.writeString(this.endpointSsl);
      oprot.writeFieldEnd();
    }
    if (this.updateUrl != null) {
      oprot.writeFieldBegin(_UPDATE_URL_FIELD_DESC);
      oprot.writeString(this.updateUrl);
      oprot.writeFieldEnd();
    }
    if (this.c2dmAccount != null) {
      oprot.writeFieldBegin(_C2DM_ACCOUNT_FIELD_DESC);
      oprot.writeString(this.c2dmAccount);
      oprot.writeFieldEnd();
    }
    if (this.nniServer != null) {
      oprot.writeFieldBegin(_NNI_SERVER_FIELD_DESC);
      oprot.writeString(this.nniServer);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("SystemConfiguration(");

    ret.write("endpoint:");
    if (this.endpoint == null) {
      ret.write("null");
    } else {
      ret.write(this.endpoint);
    }

    ret.write(", ");
    ret.write("endpointSsl:");
    if (this.endpointSsl == null) {
      ret.write("null");
    } else {
      ret.write(this.endpointSsl);
    }

    ret.write(", ");
    ret.write("updateUrl:");
    if (this.updateUrl == null) {
      ret.write("null");
    } else {
      ret.write(this.updateUrl);
    }

    ret.write(", ");
    ret.write("c2dmAccount:");
    if (this.c2dmAccount == null) {
      ret.write("null");
    } else {
      ret.write(this.c2dmAccount);
    }

    ret.write(", ");
    ret.write("nniServer:");
    if (this.nniServer == null) {
      ret.write("null");
    } else {
      ret.write(this.nniServer);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

