/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.coin_use_reservation_item;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class CoinUseReservationItem implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("CoinUseReservationItem");
  static final TField _ITEM_ID_FIELD_DESC = new TField("itemId", TType.STRING, 1);
  static final TField _ITEM_NAME_FIELD_DESC = new TField("itemName", TType.STRING, 2);
  static final TField _AMOUNT_FIELD_DESC = new TField("amount", TType.I32, 3);

  String _itemId;
  static const int ITEMID = 1;
  String _itemName;
  static const int ITEMNAME = 2;
  int _amount = 0;
  static const int AMOUNT = 3;

  bool __isset_amount = false;

  CoinUseReservationItem() {
  }

  // itemId
  String get itemId => this._itemId;

  set itemId(String itemId) {
    this._itemId = itemId;
  }

  bool isSetItemId() => this.itemId != null;

  unsetItemId() {
    this.itemId = null;
  }

  // itemName
  String get itemName => this._itemName;

  set itemName(String itemName) {
    this._itemName = itemName;
  }

  bool isSetItemName() => this.itemName != null;

  unsetItemName() {
    this.itemName = null;
  }

  // amount
  int get amount => this._amount;

  set amount(int amount) {
    this._amount = amount;
    this.__isset_amount = true;
  }

  bool isSetAmount() => this.__isset_amount;

  unsetAmount() {
    this.__isset_amount = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case ITEMID:
        return this.itemId;
      case ITEMNAME:
        return this.itemName;
      case AMOUNT:
        return this.amount;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case ITEMID:
        if (value == null) {
          unsetItemId();
        } else {
          this.itemId = value;
        }
        break;

      case ITEMNAME:
        if (value == null) {
          unsetItemName();
        } else {
          this.itemName = value;
        }
        break;

      case AMOUNT:
        if (value == null) {
          unsetAmount();
        } else {
          this.amount = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case ITEMID:
        return isSetItemId();
      case ITEMNAME:
        return isSetItemName();
      case AMOUNT:
        return isSetAmount();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ITEMID:
          if (field.type == TType.STRING) {
            this.itemId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ITEMNAME:
          if (field.type == TType.STRING) {
            this.itemName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AMOUNT:
          if (field.type == TType.I32) {
            this.amount = iprot.readI32();
            this.__isset_amount = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.itemId != null) {
      oprot.writeFieldBegin(_ITEM_ID_FIELD_DESC);
      oprot.writeString(this.itemId);
      oprot.writeFieldEnd();
    }
    if (this.itemName != null) {
      oprot.writeFieldBegin(_ITEM_NAME_FIELD_DESC);
      oprot.writeString(this.itemName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_AMOUNT_FIELD_DESC);
    oprot.writeI32(this.amount);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("CoinUseReservationItem(");

    ret.write("itemId:");
    if (this.itemId == null) {
      ret.write("null");
    } else {
      ret.write(this.itemId);
    }

    ret.write(", ");
    ret.write("itemName:");
    if (this.itemName == null) {
      ret.write("null");
    } else {
      ret.write(this.itemName);
    }

    ret.write(", ");
    ret.write("amount:");
    ret.write(this.amount);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

