/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.buddy_list;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class BuddyList implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("BuddyList");
  static final TField _CLASSIFICATION_FIELD_DESC = new TField("classification", TType.STRING, 1);
  static final TField _DISPLAY_NAME_FIELD_DESC = new TField("displayName", TType.STRING, 2);
  static final TField _TOTAL_BUDDY_COUNT_FIELD_DESC = new TField("totalBuddyCount", TType.I32, 3);
  static final TField _POPULAR_CONTACTS_FIELD_DESC = new TField("popularContacts", TType.LIST, 4);

  String _classification;
  static const int CLASSIFICATION = 1;
  String _displayName;
  static const int DISPLAYNAME = 2;
  int _totalBuddyCount = 0;
  static const int TOTALBUDDYCOUNT = 3;
  List<Contact> _popularContacts;
  static const int POPULARCONTACTS = 4;

  bool __isset_totalBuddyCount = false;

  BuddyList() {
  }

  // classification
  String get classification => this._classification;

  set classification(String classification) {
    this._classification = classification;
  }

  bool isSetClassification() => this.classification != null;

  unsetClassification() {
    this.classification = null;
  }

  // displayName
  String get displayName => this._displayName;

  set displayName(String displayName) {
    this._displayName = displayName;
  }

  bool isSetDisplayName() => this.displayName != null;

  unsetDisplayName() {
    this.displayName = null;
  }

  // totalBuddyCount
  int get totalBuddyCount => this._totalBuddyCount;

  set totalBuddyCount(int totalBuddyCount) {
    this._totalBuddyCount = totalBuddyCount;
    this.__isset_totalBuddyCount = true;
  }

  bool isSetTotalBuddyCount() => this.__isset_totalBuddyCount;

  unsetTotalBuddyCount() {
    this.__isset_totalBuddyCount = false;
  }

  // popularContacts
  List<Contact> get popularContacts => this._popularContacts;

  set popularContacts(List<Contact> popularContacts) {
    this._popularContacts = popularContacts;
  }

  bool isSetPopularContacts() => this.popularContacts != null;

  unsetPopularContacts() {
    this.popularContacts = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case CLASSIFICATION:
        return this.classification;
      case DISPLAYNAME:
        return this.displayName;
      case TOTALBUDDYCOUNT:
        return this.totalBuddyCount;
      case POPULARCONTACTS:
        return this.popularContacts;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case CLASSIFICATION:
        if (value == null) {
          unsetClassification();
        } else {
          this.classification = value;
        }
        break;

      case DISPLAYNAME:
        if (value == null) {
          unsetDisplayName();
        } else {
          this.displayName = value;
        }
        break;

      case TOTALBUDDYCOUNT:
        if (value == null) {
          unsetTotalBuddyCount();
        } else {
          this.totalBuddyCount = value;
        }
        break;

      case POPULARCONTACTS:
        if (value == null) {
          unsetPopularContacts();
        } else {
          this.popularContacts = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case CLASSIFICATION:
        return isSetClassification();
      case DISPLAYNAME:
        return isSetDisplayName();
      case TOTALBUDDYCOUNT:
        return isSetTotalBuddyCount();
      case POPULARCONTACTS:
        return isSetPopularContacts();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case CLASSIFICATION:
          if (field.type == TType.STRING) {
            this.classification = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DISPLAYNAME:
          if (field.type == TType.STRING) {
            this.displayName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TOTALBUDDYCOUNT:
          if (field.type == TType.I32) {
            this.totalBuddyCount = iprot.readI32();
            this.__isset_totalBuddyCount = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case POPULARCONTACTS:
          if (field.type == TType.LIST) {
            {
              TList _list60 = iprot.readListBegin();
              this.popularContacts = new List<Contact>();
              for (int _i61 = 0; _i61 < _list60.length; ++_i61) {
                Contact _elem62;
                _elem62 = new Contact();
                _elem62.read(iprot);
                this.popularContacts.add(_elem62);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.classification != null) {
      oprot.writeFieldBegin(_CLASSIFICATION_FIELD_DESC);
      oprot.writeString(this.classification);
      oprot.writeFieldEnd();
    }
    if (this.displayName != null) {
      oprot.writeFieldBegin(_DISPLAY_NAME_FIELD_DESC);
      oprot.writeString(this.displayName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_TOTAL_BUDDY_COUNT_FIELD_DESC);
    oprot.writeI32(this.totalBuddyCount);
    oprot.writeFieldEnd();
    if (this.popularContacts != null) {
      oprot.writeFieldBegin(_POPULAR_CONTACTS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.popularContacts.length));
        for (var elem63 in this.popularContacts) {
          elem63.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("BuddyList(");

    ret.write("classification:");
    if (this.classification == null) {
      ret.write("null");
    } else {
      ret.write(this.classification);
    }

    ret.write(", ");
    ret.write("displayName:");
    if (this.displayName == null) {
      ret.write("null");
    } else {
      ret.write(this.displayName);
    }

    ret.write(", ");
    ret.write("totalBuddyCount:");
    ret.write(this.totalBuddyCount);

    ret.write(", ");
    ret.write("popularContacts:");
    if (this.popularContacts == null) {
      ret.write("null");
    } else {
      ret.write(this.popularContacts);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

