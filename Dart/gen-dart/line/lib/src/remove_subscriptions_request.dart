/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.remove_subscriptions_request;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class RemoveSubscriptionsRequest implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("RemoveSubscriptionsRequest");
  static final TField _UNSUBSCRIPTIONS_FIELD_DESC = new TField("unsubscriptions", TType.LIST, 2);

  List<int> _unsubscriptions;
  static const int UNSUBSCRIPTIONS = 2;


  RemoveSubscriptionsRequest() {
  }

  // unsubscriptions
  List<int> get unsubscriptions => this._unsubscriptions;

  set unsubscriptions(List<int> unsubscriptions) {
    this._unsubscriptions = unsubscriptions;
  }

  bool isSetUnsubscriptions() => this.unsubscriptions != null;

  unsetUnsubscriptions() {
    this.unsubscriptions = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case UNSUBSCRIPTIONS:
        return this.unsubscriptions;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case UNSUBSCRIPTIONS:
        if (value == null) {
          unsetUnsubscriptions();
        } else {
          this.unsubscriptions = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case UNSUBSCRIPTIONS:
        return isSetUnsubscriptions();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case UNSUBSCRIPTIONS:
          if (field.type == TType.LIST) {
            {
              TList _list480 = iprot.readListBegin();
              this.unsubscriptions = new List<int>();
              for (int _i481 = 0; _i481 < _list480.length; ++_i481) {
                int _elem482;
                _elem482 = iprot.readI64();
                this.unsubscriptions.add(_elem482);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.unsubscriptions != null) {
      oprot.writeFieldBegin(_UNSUBSCRIPTIONS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.I64, this.unsubscriptions.length));
        for (var elem483 in this.unsubscriptions) {
          oprot.writeI64(elem483);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("RemoveSubscriptionsRequest(");

    ret.write("unsubscriptions:");
    if (this.unsubscriptions == null) {
      ret.write("null");
    } else {
      ret.write(this.unsubscriptions);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

