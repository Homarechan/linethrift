/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.coin_purchase_reservation;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class CoinPurchaseReservation implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("CoinPurchaseReservation");
  static final TField _PRODUCT_ID_FIELD_DESC = new TField("productId", TType.STRING, 1);
  static final TField _COUNTRY_FIELD_DESC = new TField("country", TType.STRING, 2);
  static final TField _CURRENCY_FIELD_DESC = new TField("currency", TType.STRING, 3);
  static final TField _PRICE_FIELD_DESC = new TField("price", TType.STRING, 4);
  static final TField _APP_STORE_CODE_FIELD_DESC = new TField("appStoreCode", TType.I32, 5);
  static final TField _LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, 6);
  static final TField _PG_CODE_FIELD_DESC = new TField("pgCode", TType.I32, 7);
  static final TField _REDIRECT_URL_FIELD_DESC = new TField("redirectUrl", TType.STRING, 8);

  String _productId;
  static const int PRODUCTID = 1;
  String _country;
  static const int COUNTRY = 2;
  String _currency;
  static const int CURRENCY = 3;
  String _price;
  static const int PRICE = 4;
  int _appStoreCode;
  static const int APPSTORECODE = 5;
  String _language;
  static const int LANGUAGE = 6;
  int _pgCode;
  static const int PGCODE = 7;
  String _redirectUrl;
  static const int REDIRECTURL = 8;

  bool __isset_appStoreCode = false;
  bool __isset_pgCode = false;

  CoinPurchaseReservation() {
  }

  // productId
  String get productId => this._productId;

  set productId(String productId) {
    this._productId = productId;
  }

  bool isSetProductId() => this.productId != null;

  unsetProductId() {
    this.productId = null;
  }

  // country
  String get country => this._country;

  set country(String country) {
    this._country = country;
  }

  bool isSetCountry() => this.country != null;

  unsetCountry() {
    this.country = null;
  }

  // currency
  String get currency => this._currency;

  set currency(String currency) {
    this._currency = currency;
  }

  bool isSetCurrency() => this.currency != null;

  unsetCurrency() {
    this.currency = null;
  }

  // price
  String get price => this._price;

  set price(String price) {
    this._price = price;
  }

  bool isSetPrice() => this.price != null;

  unsetPrice() {
    this.price = null;
  }

  // appStoreCode
  int get appStoreCode => this._appStoreCode;

  set appStoreCode(int appStoreCode) {
    this._appStoreCode = appStoreCode;
    this.__isset_appStoreCode = true;
  }

  bool isSetAppStoreCode() => this.__isset_appStoreCode;

  unsetAppStoreCode() {
    this.__isset_appStoreCode = false;
  }

  // language
  String get language => this._language;

  set language(String language) {
    this._language = language;
  }

  bool isSetLanguage() => this.language != null;

  unsetLanguage() {
    this.language = null;
  }

  // pgCode
  int get pgCode => this._pgCode;

  set pgCode(int pgCode) {
    this._pgCode = pgCode;
    this.__isset_pgCode = true;
  }

  bool isSetPgCode() => this.__isset_pgCode;

  unsetPgCode() {
    this.__isset_pgCode = false;
  }

  // redirectUrl
  String get redirectUrl => this._redirectUrl;

  set redirectUrl(String redirectUrl) {
    this._redirectUrl = redirectUrl;
  }

  bool isSetRedirectUrl() => this.redirectUrl != null;

  unsetRedirectUrl() {
    this.redirectUrl = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case PRODUCTID:
        return this.productId;
      case COUNTRY:
        return this.country;
      case CURRENCY:
        return this.currency;
      case PRICE:
        return this.price;
      case APPSTORECODE:
        return this.appStoreCode;
      case LANGUAGE:
        return this.language;
      case PGCODE:
        return this.pgCode;
      case REDIRECTURL:
        return this.redirectUrl;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case PRODUCTID:
        if (value == null) {
          unsetProductId();
        } else {
          this.productId = value;
        }
        break;

      case COUNTRY:
        if (value == null) {
          unsetCountry();
        } else {
          this.country = value;
        }
        break;

      case CURRENCY:
        if (value == null) {
          unsetCurrency();
        } else {
          this.currency = value;
        }
        break;

      case PRICE:
        if (value == null) {
          unsetPrice();
        } else {
          this.price = value;
        }
        break;

      case APPSTORECODE:
        if (value == null) {
          unsetAppStoreCode();
        } else {
          this.appStoreCode = value;
        }
        break;

      case LANGUAGE:
        if (value == null) {
          unsetLanguage();
        } else {
          this.language = value;
        }
        break;

      case PGCODE:
        if (value == null) {
          unsetPgCode();
        } else {
          this.pgCode = value;
        }
        break;

      case REDIRECTURL:
        if (value == null) {
          unsetRedirectUrl();
        } else {
          this.redirectUrl = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case PRODUCTID:
        return isSetProductId();
      case COUNTRY:
        return isSetCountry();
      case CURRENCY:
        return isSetCurrency();
      case PRICE:
        return isSetPrice();
      case APPSTORECODE:
        return isSetAppStoreCode();
      case LANGUAGE:
        return isSetLanguage();
      case PGCODE:
        return isSetPgCode();
      case REDIRECTURL:
        return isSetRedirectUrl();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case PRODUCTID:
          if (field.type == TType.STRING) {
            this.productId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COUNTRY:
          if (field.type == TType.STRING) {
            this.country = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CURRENCY:
          if (field.type == TType.STRING) {
            this.currency = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PRICE:
          if (field.type == TType.STRING) {
            this.price = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case APPSTORECODE:
          if (field.type == TType.I32) {
            this.appStoreCode = iprot.readI32();
            this.__isset_appStoreCode = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LANGUAGE:
          if (field.type == TType.STRING) {
            this.language = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PGCODE:
          if (field.type == TType.I32) {
            this.pgCode = iprot.readI32();
            this.__isset_pgCode = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case REDIRECTURL:
          if (field.type == TType.STRING) {
            this.redirectUrl = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.productId != null) {
      oprot.writeFieldBegin(_PRODUCT_ID_FIELD_DESC);
      oprot.writeString(this.productId);
      oprot.writeFieldEnd();
    }
    if (this.country != null) {
      oprot.writeFieldBegin(_COUNTRY_FIELD_DESC);
      oprot.writeString(this.country);
      oprot.writeFieldEnd();
    }
    if (this.currency != null) {
      oprot.writeFieldBegin(_CURRENCY_FIELD_DESC);
      oprot.writeString(this.currency);
      oprot.writeFieldEnd();
    }
    if (this.price != null) {
      oprot.writeFieldBegin(_PRICE_FIELD_DESC);
      oprot.writeString(this.price);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_APP_STORE_CODE_FIELD_DESC);
    oprot.writeI32(this.appStoreCode);
    oprot.writeFieldEnd();
    if (this.language != null) {
      oprot.writeFieldBegin(_LANGUAGE_FIELD_DESC);
      oprot.writeString(this.language);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_PG_CODE_FIELD_DESC);
    oprot.writeI32(this.pgCode);
    oprot.writeFieldEnd();
    if (this.redirectUrl != null) {
      oprot.writeFieldBegin(_REDIRECT_URL_FIELD_DESC);
      oprot.writeString(this.redirectUrl);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("CoinPurchaseReservation(");

    ret.write("productId:");
    if (this.productId == null) {
      ret.write("null");
    } else {
      ret.write(this.productId);
    }

    ret.write(", ");
    ret.write("country:");
    if (this.country == null) {
      ret.write("null");
    } else {
      ret.write(this.country);
    }

    ret.write(", ");
    ret.write("currency:");
    if (this.currency == null) {
      ret.write("null");
    } else {
      ret.write(this.currency);
    }

    ret.write(", ");
    ret.write("price:");
    if (this.price == null) {
      ret.write("null");
    } else {
      ret.write(this.price);
    }

    ret.write(", ");
    ret.write("appStoreCode:");
    String appStoreCode_name = PaymentType.VALUES_TO_NAMES[this.appStoreCode];
    if (appStoreCode_name != null) {
      ret.write(appStoreCode_name);
      ret.write(" (");
    }
    ret.write(this.appStoreCode);
    if (appStoreCode_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("language:");
    if (this.language == null) {
      ret.write("null");
    } else {
      ret.write(this.language);
    }

    ret.write(", ");
    ret.write("pgCode:");
    String pgCode_name = PaymentPgType.VALUES_TO_NAMES[this.pgCode];
    if (pgCode_name != null) {
      ret.write(pgCode_name);
      ret.write(" (");
    }
    ret.write(this.pgCode);
    if (pgCode_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("redirectUrl:");
    if (this.redirectUrl == null) {
      ret.write("null");
    } else {
      ret.write(this.redirectUrl);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetAppStoreCode() && !PaymentType.VALID_VALUES.contains(appStoreCode)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'appStoreCode' has been assigned the invalid value $appStoreCode");
    }
    if (isSetPgCode() && !PaymentPgType.VALID_VALUES.contains(pgCode)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'pgCode' has been assigned the invalid value $pgCode");
    }
  }

}

