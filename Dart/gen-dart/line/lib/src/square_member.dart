/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.square_member;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class SquareMember implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("SquareMember");
  static final TField _SQUARE_MEMBER_MID_FIELD_DESC = new TField("squareMemberMid", TType.STRING, 1);
  static final TField _SQUARE_MID_FIELD_DESC = new TField("squareMid", TType.STRING, 2);
  static final TField _DISPLAY_NAME_FIELD_DESC = new TField("displayName", TType.STRING, 3);
  static final TField _PROFILE_IMAGE_OBS_HASH_FIELD_DESC = new TField("profileImageObsHash", TType.STRING, 4);
  static final TField _ABLE_TO_RECEIVE_MESSAGE_FIELD_DESC = new TField("ableToReceiveMessage", TType.BOOL, 5);
  static final TField _MEMBERSHIP_STATE_FIELD_DESC = new TField("membershipState", TType.I32, 7);
  static final TField _ROLE_FIELD_DESC = new TField("role", TType.I32, 8);
  static final TField _REVISION_FIELD_DESC = new TField("revision", TType.I64, 9);
  static final TField _PREFERENCE_FIELD_DESC = new TField("preference", TType.STRUCT, 10);
  static final TField _JOIN_MESSAGE_FIELD_DESC = new TField("joinMessage", TType.STRING, 11);

  String _squareMemberMid;
  static const int SQUAREMEMBERMID = 1;
  String _squareMid;
  static const int SQUAREMID = 2;
  String _displayName;
  static const int DISPLAYNAME = 3;
  String _profileImageObsHash;
  static const int PROFILEIMAGEOBSHASH = 4;
  bool _ableToReceiveMessage = false;
  static const int ABLETORECEIVEMESSAGE = 5;
  int _membershipState;
  static const int MEMBERSHIPSTATE = 7;
  int _role;
  static const int ROLE = 8;
  int _revision = 0;
  static const int REVISION = 9;
  SquarePreference _preference;
  static const int PREFERENCE = 10;
  String _joinMessage;
  static const int JOINMESSAGE = 11;

  bool __isset_ableToReceiveMessage = false;
  bool __isset_membershipState = false;
  bool __isset_role = false;
  bool __isset_revision = false;

  SquareMember() {
  }

  // squareMemberMid
  String get squareMemberMid => this._squareMemberMid;

  set squareMemberMid(String squareMemberMid) {
    this._squareMemberMid = squareMemberMid;
  }

  bool isSetSquareMemberMid() => this.squareMemberMid != null;

  unsetSquareMemberMid() {
    this.squareMemberMid = null;
  }

  // squareMid
  String get squareMid => this._squareMid;

  set squareMid(String squareMid) {
    this._squareMid = squareMid;
  }

  bool isSetSquareMid() => this.squareMid != null;

  unsetSquareMid() {
    this.squareMid = null;
  }

  // displayName
  String get displayName => this._displayName;

  set displayName(String displayName) {
    this._displayName = displayName;
  }

  bool isSetDisplayName() => this.displayName != null;

  unsetDisplayName() {
    this.displayName = null;
  }

  // profileImageObsHash
  String get profileImageObsHash => this._profileImageObsHash;

  set profileImageObsHash(String profileImageObsHash) {
    this._profileImageObsHash = profileImageObsHash;
  }

  bool isSetProfileImageObsHash() => this.profileImageObsHash != null;

  unsetProfileImageObsHash() {
    this.profileImageObsHash = null;
  }

  // ableToReceiveMessage
  bool get ableToReceiveMessage => this._ableToReceiveMessage;

  set ableToReceiveMessage(bool ableToReceiveMessage) {
    this._ableToReceiveMessage = ableToReceiveMessage;
    this.__isset_ableToReceiveMessage = true;
  }

  bool isSetAbleToReceiveMessage() => this.__isset_ableToReceiveMessage;

  unsetAbleToReceiveMessage() {
    this.__isset_ableToReceiveMessage = false;
  }

  // membershipState
  int get membershipState => this._membershipState;

  set membershipState(int membershipState) {
    this._membershipState = membershipState;
    this.__isset_membershipState = true;
  }

  bool isSetMembershipState() => this.__isset_membershipState;

  unsetMembershipState() {
    this.__isset_membershipState = false;
  }

  // role
  int get role => this._role;

  set role(int role) {
    this._role = role;
    this.__isset_role = true;
  }

  bool isSetRole() => this.__isset_role;

  unsetRole() {
    this.__isset_role = false;
  }

  // revision
  int get revision => this._revision;

  set revision(int revision) {
    this._revision = revision;
    this.__isset_revision = true;
  }

  bool isSetRevision() => this.__isset_revision;

  unsetRevision() {
    this.__isset_revision = false;
  }

  // preference
  SquarePreference get preference => this._preference;

  set preference(SquarePreference preference) {
    this._preference = preference;
  }

  bool isSetPreference() => this.preference != null;

  unsetPreference() {
    this.preference = null;
  }

  // joinMessage
  String get joinMessage => this._joinMessage;

  set joinMessage(String joinMessage) {
    this._joinMessage = joinMessage;
  }

  bool isSetJoinMessage() => this.joinMessage != null;

  unsetJoinMessage() {
    this.joinMessage = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SQUAREMEMBERMID:
        return this.squareMemberMid;
      case SQUAREMID:
        return this.squareMid;
      case DISPLAYNAME:
        return this.displayName;
      case PROFILEIMAGEOBSHASH:
        return this.profileImageObsHash;
      case ABLETORECEIVEMESSAGE:
        return this.ableToReceiveMessage;
      case MEMBERSHIPSTATE:
        return this.membershipState;
      case ROLE:
        return this.role;
      case REVISION:
        return this.revision;
      case PREFERENCE:
        return this.preference;
      case JOINMESSAGE:
        return this.joinMessage;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SQUAREMEMBERMID:
        if (value == null) {
          unsetSquareMemberMid();
        } else {
          this.squareMemberMid = value;
        }
        break;

      case SQUAREMID:
        if (value == null) {
          unsetSquareMid();
        } else {
          this.squareMid = value;
        }
        break;

      case DISPLAYNAME:
        if (value == null) {
          unsetDisplayName();
        } else {
          this.displayName = value;
        }
        break;

      case PROFILEIMAGEOBSHASH:
        if (value == null) {
          unsetProfileImageObsHash();
        } else {
          this.profileImageObsHash = value;
        }
        break;

      case ABLETORECEIVEMESSAGE:
        if (value == null) {
          unsetAbleToReceiveMessage();
        } else {
          this.ableToReceiveMessage = value;
        }
        break;

      case MEMBERSHIPSTATE:
        if (value == null) {
          unsetMembershipState();
        } else {
          this.membershipState = value;
        }
        break;

      case ROLE:
        if (value == null) {
          unsetRole();
        } else {
          this.role = value;
        }
        break;

      case REVISION:
        if (value == null) {
          unsetRevision();
        } else {
          this.revision = value;
        }
        break;

      case PREFERENCE:
        if (value == null) {
          unsetPreference();
        } else {
          this.preference = value;
        }
        break;

      case JOINMESSAGE:
        if (value == null) {
          unsetJoinMessage();
        } else {
          this.joinMessage = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SQUAREMEMBERMID:
        return isSetSquareMemberMid();
      case SQUAREMID:
        return isSetSquareMid();
      case DISPLAYNAME:
        return isSetDisplayName();
      case PROFILEIMAGEOBSHASH:
        return isSetProfileImageObsHash();
      case ABLETORECEIVEMESSAGE:
        return isSetAbleToReceiveMessage();
      case MEMBERSHIPSTATE:
        return isSetMembershipState();
      case ROLE:
        return isSetRole();
      case REVISION:
        return isSetRevision();
      case PREFERENCE:
        return isSetPreference();
      case JOINMESSAGE:
        return isSetJoinMessage();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SQUAREMEMBERMID:
          if (field.type == TType.STRING) {
            this.squareMemberMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SQUAREMID:
          if (field.type == TType.STRING) {
            this.squareMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DISPLAYNAME:
          if (field.type == TType.STRING) {
            this.displayName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PROFILEIMAGEOBSHASH:
          if (field.type == TType.STRING) {
            this.profileImageObsHash = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ABLETORECEIVEMESSAGE:
          if (field.type == TType.BOOL) {
            this.ableToReceiveMessage = iprot.readBool();
            this.__isset_ableToReceiveMessage = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MEMBERSHIPSTATE:
          if (field.type == TType.I32) {
            this.membershipState = iprot.readI32();
            this.__isset_membershipState = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ROLE:
          if (field.type == TType.I32) {
            this.role = iprot.readI32();
            this.__isset_role = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case REVISION:
          if (field.type == TType.I64) {
            this.revision = iprot.readI64();
            this.__isset_revision = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PREFERENCE:
          if (field.type == TType.STRUCT) {
            this.preference = new SquarePreference();
            this.preference.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case JOINMESSAGE:
          if (field.type == TType.STRING) {
            this.joinMessage = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.squareMemberMid != null) {
      oprot.writeFieldBegin(_SQUARE_MEMBER_MID_FIELD_DESC);
      oprot.writeString(this.squareMemberMid);
      oprot.writeFieldEnd();
    }
    if (this.squareMid != null) {
      oprot.writeFieldBegin(_SQUARE_MID_FIELD_DESC);
      oprot.writeString(this.squareMid);
      oprot.writeFieldEnd();
    }
    if (this.displayName != null) {
      oprot.writeFieldBegin(_DISPLAY_NAME_FIELD_DESC);
      oprot.writeString(this.displayName);
      oprot.writeFieldEnd();
    }
    if (this.profileImageObsHash != null) {
      oprot.writeFieldBegin(_PROFILE_IMAGE_OBS_HASH_FIELD_DESC);
      oprot.writeString(this.profileImageObsHash);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_ABLE_TO_RECEIVE_MESSAGE_FIELD_DESC);
    oprot.writeBool(this.ableToReceiveMessage);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_MEMBERSHIP_STATE_FIELD_DESC);
    oprot.writeI32(this.membershipState);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_ROLE_FIELD_DESC);
    oprot.writeI32(this.role);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_REVISION_FIELD_DESC);
    oprot.writeI64(this.revision);
    oprot.writeFieldEnd();
    if (this.preference != null) {
      oprot.writeFieldBegin(_PREFERENCE_FIELD_DESC);
      this.preference.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.joinMessage != null) {
      oprot.writeFieldBegin(_JOIN_MESSAGE_FIELD_DESC);
      oprot.writeString(this.joinMessage);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("SquareMember(");

    ret.write("squareMemberMid:");
    if (this.squareMemberMid == null) {
      ret.write("null");
    } else {
      ret.write(this.squareMemberMid);
    }

    ret.write(", ");
    ret.write("squareMid:");
    if (this.squareMid == null) {
      ret.write("null");
    } else {
      ret.write(this.squareMid);
    }

    ret.write(", ");
    ret.write("displayName:");
    if (this.displayName == null) {
      ret.write("null");
    } else {
      ret.write(this.displayName);
    }

    ret.write(", ");
    ret.write("profileImageObsHash:");
    if (this.profileImageObsHash == null) {
      ret.write("null");
    } else {
      ret.write(this.profileImageObsHash);
    }

    ret.write(", ");
    ret.write("ableToReceiveMessage:");
    ret.write(this.ableToReceiveMessage);

    ret.write(", ");
    ret.write("membershipState:");
    String membershipState_name = SquareMembershipState.VALUES_TO_NAMES[this.membershipState];
    if (membershipState_name != null) {
      ret.write(membershipState_name);
      ret.write(" (");
    }
    ret.write(this.membershipState);
    if (membershipState_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("role:");
    String role_name = SquareMemberRole.VALUES_TO_NAMES[this.role];
    if (role_name != null) {
      ret.write(role_name);
      ret.write(" (");
    }
    ret.write(this.role);
    if (role_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("revision:");
    ret.write(this.revision);

    ret.write(", ");
    ret.write("preference:");
    if (this.preference == null) {
      ret.write("null");
    } else {
      ret.write(this.preference);
    }

    ret.write(", ");
    ret.write("joinMessage:");
    if (this.joinMessage == null) {
      ret.write("null");
    } else {
      ret.write(this.joinMessage);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetMembershipState() && !SquareMembershipState.VALID_VALUES.contains(membershipState)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'membershipState' has been assigned the invalid value $membershipState");
    }
    if (isSetRole() && !SquareMemberRole.VALID_VALUES.contains(role)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'role' has been assigned the invalid value $role");
    }
  }

}

