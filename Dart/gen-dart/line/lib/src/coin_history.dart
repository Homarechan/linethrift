/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.coin_history;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class CoinHistory implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("CoinHistory");
  static final TField _PAY_DATE_FIELD_DESC = new TField("payDate", TType.I64, 1);
  static final TField _COIN_BALANCE_FIELD_DESC = new TField("coinBalance", TType.I32, 2);
  static final TField _COIN_FIELD_DESC = new TField("coin", TType.I32, 3);
  static final TField _PRICE_FIELD_DESC = new TField("price", TType.STRING, 4);
  static final TField _TITLE_FIELD_DESC = new TField("title", TType.STRING, 5);
  static final TField _REFUND_FIELD_DESC = new TField("refund", TType.BOOL, 6);
  static final TField _PAY_SEQ_FIELD_DESC = new TField("paySeq", TType.STRING, 7);
  static final TField _CURRENCY_FIELD_DESC = new TField("currency", TType.STRING, 8);
  static final TField _CURRENCY_SIGN_FIELD_DESC = new TField("currencySign", TType.STRING, 9);
  static final TField _DISPLAY_PRICE_FIELD_DESC = new TField("displayPrice", TType.STRING, 10);
  static final TField _PAYLOAD_FIELD_DESC = new TField("payload", TType.STRUCT, 11);
  static final TField _CHANNEL_ID_FIELD_DESC = new TField("channelId", TType.STRING, 12);

  int _payDate = 0;
  static const int PAYDATE = 1;
  int _coinBalance = 0;
  static const int COINBALANCE = 2;
  int _coin = 0;
  static const int COIN = 3;
  String _price;
  static const int PRICE = 4;
  String _title;
  static const int TITLE = 5;
  bool _refund = false;
  static const int REFUND = 6;
  String _paySeq;
  static const int PAYSEQ = 7;
  String _currency;
  static const int CURRENCY = 8;
  String _currencySign;
  static const int CURRENCYSIGN = 9;
  String _displayPrice;
  static const int DISPLAYPRICE = 10;
  CoinPayLoad _payload;
  static const int PAYLOAD = 11;
  String _channelId;
  static const int CHANNELID = 12;

  bool __isset_payDate = false;
  bool __isset_coinBalance = false;
  bool __isset_coin = false;
  bool __isset_refund = false;

  CoinHistory() {
  }

  // payDate
  int get payDate => this._payDate;

  set payDate(int payDate) {
    this._payDate = payDate;
    this.__isset_payDate = true;
  }

  bool isSetPayDate() => this.__isset_payDate;

  unsetPayDate() {
    this.__isset_payDate = false;
  }

  // coinBalance
  int get coinBalance => this._coinBalance;

  set coinBalance(int coinBalance) {
    this._coinBalance = coinBalance;
    this.__isset_coinBalance = true;
  }

  bool isSetCoinBalance() => this.__isset_coinBalance;

  unsetCoinBalance() {
    this.__isset_coinBalance = false;
  }

  // coin
  int get coin => this._coin;

  set coin(int coin) {
    this._coin = coin;
    this.__isset_coin = true;
  }

  bool isSetCoin() => this.__isset_coin;

  unsetCoin() {
    this.__isset_coin = false;
  }

  // price
  String get price => this._price;

  set price(String price) {
    this._price = price;
  }

  bool isSetPrice() => this.price != null;

  unsetPrice() {
    this.price = null;
  }

  // title
  String get title => this._title;

  set title(String title) {
    this._title = title;
  }

  bool isSetTitle() => this.title != null;

  unsetTitle() {
    this.title = null;
  }

  // refund
  bool get refund => this._refund;

  set refund(bool refund) {
    this._refund = refund;
    this.__isset_refund = true;
  }

  bool isSetRefund() => this.__isset_refund;

  unsetRefund() {
    this.__isset_refund = false;
  }

  // paySeq
  String get paySeq => this._paySeq;

  set paySeq(String paySeq) {
    this._paySeq = paySeq;
  }

  bool isSetPaySeq() => this.paySeq != null;

  unsetPaySeq() {
    this.paySeq = null;
  }

  // currency
  String get currency => this._currency;

  set currency(String currency) {
    this._currency = currency;
  }

  bool isSetCurrency() => this.currency != null;

  unsetCurrency() {
    this.currency = null;
  }

  // currencySign
  String get currencySign => this._currencySign;

  set currencySign(String currencySign) {
    this._currencySign = currencySign;
  }

  bool isSetCurrencySign() => this.currencySign != null;

  unsetCurrencySign() {
    this.currencySign = null;
  }

  // displayPrice
  String get displayPrice => this._displayPrice;

  set displayPrice(String displayPrice) {
    this._displayPrice = displayPrice;
  }

  bool isSetDisplayPrice() => this.displayPrice != null;

  unsetDisplayPrice() {
    this.displayPrice = null;
  }

  // payload
  CoinPayLoad get payload => this._payload;

  set payload(CoinPayLoad payload) {
    this._payload = payload;
  }

  bool isSetPayload() => this.payload != null;

  unsetPayload() {
    this.payload = null;
  }

  // channelId
  String get channelId => this._channelId;

  set channelId(String channelId) {
    this._channelId = channelId;
  }

  bool isSetChannelId() => this.channelId != null;

  unsetChannelId() {
    this.channelId = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case PAYDATE:
        return this.payDate;
      case COINBALANCE:
        return this.coinBalance;
      case COIN:
        return this.coin;
      case PRICE:
        return this.price;
      case TITLE:
        return this.title;
      case REFUND:
        return this.refund;
      case PAYSEQ:
        return this.paySeq;
      case CURRENCY:
        return this.currency;
      case CURRENCYSIGN:
        return this.currencySign;
      case DISPLAYPRICE:
        return this.displayPrice;
      case PAYLOAD:
        return this.payload;
      case CHANNELID:
        return this.channelId;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case PAYDATE:
        if (value == null) {
          unsetPayDate();
        } else {
          this.payDate = value;
        }
        break;

      case COINBALANCE:
        if (value == null) {
          unsetCoinBalance();
        } else {
          this.coinBalance = value;
        }
        break;

      case COIN:
        if (value == null) {
          unsetCoin();
        } else {
          this.coin = value;
        }
        break;

      case PRICE:
        if (value == null) {
          unsetPrice();
        } else {
          this.price = value;
        }
        break;

      case TITLE:
        if (value == null) {
          unsetTitle();
        } else {
          this.title = value;
        }
        break;

      case REFUND:
        if (value == null) {
          unsetRefund();
        } else {
          this.refund = value;
        }
        break;

      case PAYSEQ:
        if (value == null) {
          unsetPaySeq();
        } else {
          this.paySeq = value;
        }
        break;

      case CURRENCY:
        if (value == null) {
          unsetCurrency();
        } else {
          this.currency = value;
        }
        break;

      case CURRENCYSIGN:
        if (value == null) {
          unsetCurrencySign();
        } else {
          this.currencySign = value;
        }
        break;

      case DISPLAYPRICE:
        if (value == null) {
          unsetDisplayPrice();
        } else {
          this.displayPrice = value;
        }
        break;

      case PAYLOAD:
        if (value == null) {
          unsetPayload();
        } else {
          this.payload = value;
        }
        break;

      case CHANNELID:
        if (value == null) {
          unsetChannelId();
        } else {
          this.channelId = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case PAYDATE:
        return isSetPayDate();
      case COINBALANCE:
        return isSetCoinBalance();
      case COIN:
        return isSetCoin();
      case PRICE:
        return isSetPrice();
      case TITLE:
        return isSetTitle();
      case REFUND:
        return isSetRefund();
      case PAYSEQ:
        return isSetPaySeq();
      case CURRENCY:
        return isSetCurrency();
      case CURRENCYSIGN:
        return isSetCurrencySign();
      case DISPLAYPRICE:
        return isSetDisplayPrice();
      case PAYLOAD:
        return isSetPayload();
      case CHANNELID:
        return isSetChannelId();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case PAYDATE:
          if (field.type == TType.I64) {
            this.payDate = iprot.readI64();
            this.__isset_payDate = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COINBALANCE:
          if (field.type == TType.I32) {
            this.coinBalance = iprot.readI32();
            this.__isset_coinBalance = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COIN:
          if (field.type == TType.I32) {
            this.coin = iprot.readI32();
            this.__isset_coin = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PRICE:
          if (field.type == TType.STRING) {
            this.price = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TITLE:
          if (field.type == TType.STRING) {
            this.title = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case REFUND:
          if (field.type == TType.BOOL) {
            this.refund = iprot.readBool();
            this.__isset_refund = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PAYSEQ:
          if (field.type == TType.STRING) {
            this.paySeq = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CURRENCY:
          if (field.type == TType.STRING) {
            this.currency = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CURRENCYSIGN:
          if (field.type == TType.STRING) {
            this.currencySign = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DISPLAYPRICE:
          if (field.type == TType.STRING) {
            this.displayPrice = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PAYLOAD:
          if (field.type == TType.STRUCT) {
            this.payload = new CoinPayLoad();
            this.payload.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CHANNELID:
          if (field.type == TType.STRING) {
            this.channelId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_PAY_DATE_FIELD_DESC);
    oprot.writeI64(this.payDate);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_COIN_BALANCE_FIELD_DESC);
    oprot.writeI32(this.coinBalance);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_COIN_FIELD_DESC);
    oprot.writeI32(this.coin);
    oprot.writeFieldEnd();
    if (this.price != null) {
      oprot.writeFieldBegin(_PRICE_FIELD_DESC);
      oprot.writeString(this.price);
      oprot.writeFieldEnd();
    }
    if (this.title != null) {
      oprot.writeFieldBegin(_TITLE_FIELD_DESC);
      oprot.writeString(this.title);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_REFUND_FIELD_DESC);
    oprot.writeBool(this.refund);
    oprot.writeFieldEnd();
    if (this.paySeq != null) {
      oprot.writeFieldBegin(_PAY_SEQ_FIELD_DESC);
      oprot.writeString(this.paySeq);
      oprot.writeFieldEnd();
    }
    if (this.currency != null) {
      oprot.writeFieldBegin(_CURRENCY_FIELD_DESC);
      oprot.writeString(this.currency);
      oprot.writeFieldEnd();
    }
    if (this.currencySign != null) {
      oprot.writeFieldBegin(_CURRENCY_SIGN_FIELD_DESC);
      oprot.writeString(this.currencySign);
      oprot.writeFieldEnd();
    }
    if (this.displayPrice != null) {
      oprot.writeFieldBegin(_DISPLAY_PRICE_FIELD_DESC);
      oprot.writeString(this.displayPrice);
      oprot.writeFieldEnd();
    }
    if (this.payload != null) {
      oprot.writeFieldBegin(_PAYLOAD_FIELD_DESC);
      this.payload.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.channelId != null) {
      oprot.writeFieldBegin(_CHANNEL_ID_FIELD_DESC);
      oprot.writeString(this.channelId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("CoinHistory(");

    ret.write("payDate:");
    ret.write(this.payDate);

    ret.write(", ");
    ret.write("coinBalance:");
    ret.write(this.coinBalance);

    ret.write(", ");
    ret.write("coin:");
    ret.write(this.coin);

    ret.write(", ");
    ret.write("price:");
    if (this.price == null) {
      ret.write("null");
    } else {
      ret.write(this.price);
    }

    ret.write(", ");
    ret.write("title:");
    if (this.title == null) {
      ret.write("null");
    } else {
      ret.write(this.title);
    }

    ret.write(", ");
    ret.write("refund:");
    ret.write(this.refund);

    ret.write(", ");
    ret.write("paySeq:");
    if (this.paySeq == null) {
      ret.write("null");
    } else {
      ret.write(this.paySeq);
    }

    ret.write(", ");
    ret.write("currency:");
    if (this.currency == null) {
      ret.write("null");
    } else {
      ret.write(this.currency);
    }

    ret.write(", ");
    ret.write("currencySign:");
    if (this.currencySign == null) {
      ret.write("null");
    } else {
      ret.write(this.currencySign);
    }

    ret.write(", ");
    ret.write("displayPrice:");
    if (this.displayPrice == null) {
      ret.write("null");
    } else {
      ret.write(this.displayPrice);
    }

    ret.write(", ");
    ret.write("payload:");
    if (this.payload == null) {
      ret.write("null");
    } else {
      ret.write(this.payload);
    }

    ret.write(", ");
    ret.write("channelId:");
    if (this.channelId == null) {
      ret.write("null");
    } else {
      ret.write(this.channelId);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

