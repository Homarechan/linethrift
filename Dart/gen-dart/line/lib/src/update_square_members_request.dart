/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.update_square_members_request;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class UpdateSquareMembersRequest implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("UpdateSquareMembersRequest");
  static final TField _UPDATED_ATTRS_FIELD_DESC = new TField("updatedAttrs", TType.SET, 2);
  static final TField _MEMBERS_FIELD_DESC = new TField("members", TType.LIST, 3);

  Set<int> _updatedAttrs;
  static const int UPDATEDATTRS = 2;
  List<SquareMember> _members;
  static const int MEMBERS = 3;


  UpdateSquareMembersRequest() {
  }

  // updatedAttrs
  Set<int> get updatedAttrs => this._updatedAttrs;

  set updatedAttrs(Set<int> updatedAttrs) {
    this._updatedAttrs = updatedAttrs;
  }

  bool isSetUpdatedAttrs() => this.updatedAttrs != null;

  unsetUpdatedAttrs() {
    this.updatedAttrs = null;
  }

  // members
  List<SquareMember> get members => this._members;

  set members(List<SquareMember> members) {
    this._members = members;
  }

  bool isSetMembers() => this.members != null;

  unsetMembers() {
    this.members = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case UPDATEDATTRS:
        return this.updatedAttrs;
      case MEMBERS:
        return this.members;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case UPDATEDATTRS:
        if (value == null) {
          unsetUpdatedAttrs();
        } else {
          this.updatedAttrs = value;
        }
        break;

      case MEMBERS:
        if (value == null) {
          unsetMembers();
        } else {
          this.members = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case UPDATEDATTRS:
        return isSetUpdatedAttrs();
      case MEMBERS:
        return isSetMembers();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case UPDATEDATTRS:
          if (field.type == TType.SET) {
            {
              TSet _set454 = iprot.readSetBegin();
              this.updatedAttrs = new Set<int>();
              for (int _i455 = 0; _i455 < _set454.length; ++_i455) {
                int _elem456;
                _elem456 = iprot.readI32();
                this.updatedAttrs.add(_elem456);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MEMBERS:
          if (field.type == TType.LIST) {
            {
              TList _list457 = iprot.readListBegin();
              this.members = new List<SquareMember>();
              for (int _i458 = 0; _i458 < _list457.length; ++_i458) {
                SquareMember _elem459;
                _elem459 = new SquareMember();
                _elem459.read(iprot);
                this.members.add(_elem459);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.updatedAttrs != null) {
      oprot.writeFieldBegin(_UPDATED_ATTRS_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.I32, this.updatedAttrs.length));
        for (var elem460 in this.updatedAttrs) {
          oprot.writeI32(elem460);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.members != null) {
      oprot.writeFieldBegin(_MEMBERS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.members.length));
        for (var elem461 in this.members) {
          elem461.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("UpdateSquareMembersRequest(");

    ret.write("updatedAttrs:");
    if (this.updatedAttrs == null) {
      ret.write("null");
    } else {
      ret.write(this.updatedAttrs);
    }

    ret.write(", ");
    ret.write("members:");
    if (this.members == null) {
      ret.write("null");
    } else {
      ret.write(this.members);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

