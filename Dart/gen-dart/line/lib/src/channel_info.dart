/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.channel_info;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class ChannelInfo implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ChannelInfo");
  static final TField _CHANNEL_ID_FIELD_DESC = new TField("channelId", TType.STRING, 1);
  static final TField _NAME_FIELD_DESC = new TField("name", TType.STRING, 3);
  static final TField _ENTRY_PAGE_URL_FIELD_DESC = new TField("entryPageUrl", TType.STRING, 4);
  static final TField _DESCRIPTION_TEXT_FIELD_DESC = new TField("descriptionText", TType.STRING, 5);
  static final TField _PROVIDER_FIELD_DESC = new TField("provider", TType.STRUCT, 6);
  static final TField _PUBLIC_TYPE_FIELD_DESC = new TField("publicType", TType.I32, 7);
  static final TField _ICON_IMAGE_FIELD_DESC = new TField("iconImage", TType.STRING, 8);
  static final TField _PERMISSIONS_FIELD_DESC = new TField("permissions", TType.LIST, 9);
  static final TField _ICON_THUMBNAIL_IMAGE_FIELD_DESC = new TField("iconThumbnailImage", TType.STRING, 11);
  static final TField _CHANNEL_CONFIGURATIONS_FIELD_DESC = new TField("channelConfigurations", TType.LIST, 12);
  static final TField _LCS_ALL_API_USABLE_FIELD_DESC = new TField("lcsAllApiUsable", TType.BOOL, 13);
  static final TField _ALLOWED_PERMISSIONS_FIELD_DESC = new TField("allowedPermissions", TType.SET, 14);
  static final TField _CHANNEL_DOMAINS_FIELD_DESC = new TField("channelDomains", TType.LIST, 15);
  static final TField _UPDATED_TIMESTAMP_FIELD_DESC = new TField("updatedTimestamp", TType.I64, 16);

  String _channelId;
  static const int CHANNELID = 1;
  String _name;
  static const int NAME = 3;
  String _entryPageUrl;
  static const int ENTRYPAGEURL = 4;
  String _descriptionText;
  static const int DESCRIPTIONTEXT = 5;
  ChannelProvider _provider;
  static const int PROVIDER = 6;
  int _publicType;
  static const int PUBLICTYPE = 7;
  String _iconImage;
  static const int ICONIMAGE = 8;
  List<String> _permissions;
  static const int PERMISSIONS = 9;
  String _iconThumbnailImage;
  static const int ICONTHUMBNAILIMAGE = 11;
  List<int> _channelConfigurations;
  static const int CHANNELCONFIGURATIONS = 12;
  bool _lcsAllApiUsable = false;
  static const int LCSALLAPIUSABLE = 13;
  Set<int> _allowedPermissions;
  static const int ALLOWEDPERMISSIONS = 14;
  List<ChannelDomain> _channelDomains;
  static const int CHANNELDOMAINS = 15;
  int _updatedTimestamp = 0;
  static const int UPDATEDTIMESTAMP = 16;

  bool __isset_publicType = false;
  bool __isset_lcsAllApiUsable = false;
  bool __isset_updatedTimestamp = false;

  ChannelInfo() {
  }

  // channelId
  String get channelId => this._channelId;

  set channelId(String channelId) {
    this._channelId = channelId;
  }

  bool isSetChannelId() => this.channelId != null;

  unsetChannelId() {
    this.channelId = null;
  }

  // name
  String get name => this._name;

  set name(String name) {
    this._name = name;
  }

  bool isSetName() => this.name != null;

  unsetName() {
    this.name = null;
  }

  // entryPageUrl
  String get entryPageUrl => this._entryPageUrl;

  set entryPageUrl(String entryPageUrl) {
    this._entryPageUrl = entryPageUrl;
  }

  bool isSetEntryPageUrl() => this.entryPageUrl != null;

  unsetEntryPageUrl() {
    this.entryPageUrl = null;
  }

  // descriptionText
  String get descriptionText => this._descriptionText;

  set descriptionText(String descriptionText) {
    this._descriptionText = descriptionText;
  }

  bool isSetDescriptionText() => this.descriptionText != null;

  unsetDescriptionText() {
    this.descriptionText = null;
  }

  // provider
  ChannelProvider get provider => this._provider;

  set provider(ChannelProvider provider) {
    this._provider = provider;
  }

  bool isSetProvider() => this.provider != null;

  unsetProvider() {
    this.provider = null;
  }

  // publicType
  int get publicType => this._publicType;

  set publicType(int publicType) {
    this._publicType = publicType;
    this.__isset_publicType = true;
  }

  bool isSetPublicType() => this.__isset_publicType;

  unsetPublicType() {
    this.__isset_publicType = false;
  }

  // iconImage
  String get iconImage => this._iconImage;

  set iconImage(String iconImage) {
    this._iconImage = iconImage;
  }

  bool isSetIconImage() => this.iconImage != null;

  unsetIconImage() {
    this.iconImage = null;
  }

  // permissions
  List<String> get permissions => this._permissions;

  set permissions(List<String> permissions) {
    this._permissions = permissions;
  }

  bool isSetPermissions() => this.permissions != null;

  unsetPermissions() {
    this.permissions = null;
  }

  // iconThumbnailImage
  String get iconThumbnailImage => this._iconThumbnailImage;

  set iconThumbnailImage(String iconThumbnailImage) {
    this._iconThumbnailImage = iconThumbnailImage;
  }

  bool isSetIconThumbnailImage() => this.iconThumbnailImage != null;

  unsetIconThumbnailImage() {
    this.iconThumbnailImage = null;
  }

  // channelConfigurations
  List<int> get channelConfigurations => this._channelConfigurations;

  set channelConfigurations(List<int> channelConfigurations) {
    this._channelConfigurations = channelConfigurations;
  }

  bool isSetChannelConfigurations() => this.channelConfigurations != null;

  unsetChannelConfigurations() {
    this.channelConfigurations = null;
  }

  // lcsAllApiUsable
  bool get lcsAllApiUsable => this._lcsAllApiUsable;

  set lcsAllApiUsable(bool lcsAllApiUsable) {
    this._lcsAllApiUsable = lcsAllApiUsable;
    this.__isset_lcsAllApiUsable = true;
  }

  bool isSetLcsAllApiUsable() => this.__isset_lcsAllApiUsable;

  unsetLcsAllApiUsable() {
    this.__isset_lcsAllApiUsable = false;
  }

  // allowedPermissions
  Set<int> get allowedPermissions => this._allowedPermissions;

  set allowedPermissions(Set<int> allowedPermissions) {
    this._allowedPermissions = allowedPermissions;
  }

  bool isSetAllowedPermissions() => this.allowedPermissions != null;

  unsetAllowedPermissions() {
    this.allowedPermissions = null;
  }

  // channelDomains
  List<ChannelDomain> get channelDomains => this._channelDomains;

  set channelDomains(List<ChannelDomain> channelDomains) {
    this._channelDomains = channelDomains;
  }

  bool isSetChannelDomains() => this.channelDomains != null;

  unsetChannelDomains() {
    this.channelDomains = null;
  }

  // updatedTimestamp
  int get updatedTimestamp => this._updatedTimestamp;

  set updatedTimestamp(int updatedTimestamp) {
    this._updatedTimestamp = updatedTimestamp;
    this.__isset_updatedTimestamp = true;
  }

  bool isSetUpdatedTimestamp() => this.__isset_updatedTimestamp;

  unsetUpdatedTimestamp() {
    this.__isset_updatedTimestamp = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case CHANNELID:
        return this.channelId;
      case NAME:
        return this.name;
      case ENTRYPAGEURL:
        return this.entryPageUrl;
      case DESCRIPTIONTEXT:
        return this.descriptionText;
      case PROVIDER:
        return this.provider;
      case PUBLICTYPE:
        return this.publicType;
      case ICONIMAGE:
        return this.iconImage;
      case PERMISSIONS:
        return this.permissions;
      case ICONTHUMBNAILIMAGE:
        return this.iconThumbnailImage;
      case CHANNELCONFIGURATIONS:
        return this.channelConfigurations;
      case LCSALLAPIUSABLE:
        return this.lcsAllApiUsable;
      case ALLOWEDPERMISSIONS:
        return this.allowedPermissions;
      case CHANNELDOMAINS:
        return this.channelDomains;
      case UPDATEDTIMESTAMP:
        return this.updatedTimestamp;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case CHANNELID:
        if (value == null) {
          unsetChannelId();
        } else {
          this.channelId = value;
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          this.name = value;
        }
        break;

      case ENTRYPAGEURL:
        if (value == null) {
          unsetEntryPageUrl();
        } else {
          this.entryPageUrl = value;
        }
        break;

      case DESCRIPTIONTEXT:
        if (value == null) {
          unsetDescriptionText();
        } else {
          this.descriptionText = value;
        }
        break;

      case PROVIDER:
        if (value == null) {
          unsetProvider();
        } else {
          this.provider = value;
        }
        break;

      case PUBLICTYPE:
        if (value == null) {
          unsetPublicType();
        } else {
          this.publicType = value;
        }
        break;

      case ICONIMAGE:
        if (value == null) {
          unsetIconImage();
        } else {
          this.iconImage = value;
        }
        break;

      case PERMISSIONS:
        if (value == null) {
          unsetPermissions();
        } else {
          this.permissions = value;
        }
        break;

      case ICONTHUMBNAILIMAGE:
        if (value == null) {
          unsetIconThumbnailImage();
        } else {
          this.iconThumbnailImage = value;
        }
        break;

      case CHANNELCONFIGURATIONS:
        if (value == null) {
          unsetChannelConfigurations();
        } else {
          this.channelConfigurations = value;
        }
        break;

      case LCSALLAPIUSABLE:
        if (value == null) {
          unsetLcsAllApiUsable();
        } else {
          this.lcsAllApiUsable = value;
        }
        break;

      case ALLOWEDPERMISSIONS:
        if (value == null) {
          unsetAllowedPermissions();
        } else {
          this.allowedPermissions = value;
        }
        break;

      case CHANNELDOMAINS:
        if (value == null) {
          unsetChannelDomains();
        } else {
          this.channelDomains = value;
        }
        break;

      case UPDATEDTIMESTAMP:
        if (value == null) {
          unsetUpdatedTimestamp();
        } else {
          this.updatedTimestamp = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case CHANNELID:
        return isSetChannelId();
      case NAME:
        return isSetName();
      case ENTRYPAGEURL:
        return isSetEntryPageUrl();
      case DESCRIPTIONTEXT:
        return isSetDescriptionText();
      case PROVIDER:
        return isSetProvider();
      case PUBLICTYPE:
        return isSetPublicType();
      case ICONIMAGE:
        return isSetIconImage();
      case PERMISSIONS:
        return isSetPermissions();
      case ICONTHUMBNAILIMAGE:
        return isSetIconThumbnailImage();
      case CHANNELCONFIGURATIONS:
        return isSetChannelConfigurations();
      case LCSALLAPIUSABLE:
        return isSetLcsAllApiUsable();
      case ALLOWEDPERMISSIONS:
        return isSetAllowedPermissions();
      case CHANNELDOMAINS:
        return isSetChannelDomains();
      case UPDATEDTIMESTAMP:
        return isSetUpdatedTimestamp();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case CHANNELID:
          if (field.type == TType.STRING) {
            this.channelId = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NAME:
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ENTRYPAGEURL:
          if (field.type == TType.STRING) {
            this.entryPageUrl = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DESCRIPTIONTEXT:
          if (field.type == TType.STRING) {
            this.descriptionText = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PROVIDER:
          if (field.type == TType.STRUCT) {
            this.provider = new ChannelProvider();
            this.provider.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PUBLICTYPE:
          if (field.type == TType.I32) {
            this.publicType = iprot.readI32();
            this.__isset_publicType = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ICONIMAGE:
          if (field.type == TType.STRING) {
            this.iconImage = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PERMISSIONS:
          if (field.type == TType.LIST) {
            {
              TList _list36 = iprot.readListBegin();
              this.permissions = new List<String>();
              for (int _i37 = 0; _i37 < _list36.length; ++_i37) {
                String _elem38;
                _elem38 = iprot.readString();
                this.permissions.add(_elem38);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ICONTHUMBNAILIMAGE:
          if (field.type == TType.STRING) {
            this.iconThumbnailImage = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CHANNELCONFIGURATIONS:
          if (field.type == TType.LIST) {
            {
              TList _list39 = iprot.readListBegin();
              this.channelConfigurations = new List<int>();
              for (int _i40 = 0; _i40 < _list39.length; ++_i40) {
                int _elem41;
                _elem41 = iprot.readI32();
                this.channelConfigurations.add(_elem41);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LCSALLAPIUSABLE:
          if (field.type == TType.BOOL) {
            this.lcsAllApiUsable = iprot.readBool();
            this.__isset_lcsAllApiUsable = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ALLOWEDPERMISSIONS:
          if (field.type == TType.SET) {
            {
              TSet _set42 = iprot.readSetBegin();
              this.allowedPermissions = new Set<int>();
              for (int _i43 = 0; _i43 < _set42.length; ++_i43) {
                int _elem44;
                _elem44 = iprot.readI32();
                this.allowedPermissions.add(_elem44);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CHANNELDOMAINS:
          if (field.type == TType.LIST) {
            {
              TList _list45 = iprot.readListBegin();
              this.channelDomains = new List<ChannelDomain>();
              for (int _i46 = 0; _i46 < _list45.length; ++_i46) {
                ChannelDomain _elem47;
                _elem47 = new ChannelDomain();
                _elem47.read(iprot);
                this.channelDomains.add(_elem47);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case UPDATEDTIMESTAMP:
          if (field.type == TType.I64) {
            this.updatedTimestamp = iprot.readI64();
            this.__isset_updatedTimestamp = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.channelId != null) {
      oprot.writeFieldBegin(_CHANNEL_ID_FIELD_DESC);
      oprot.writeString(this.channelId);
      oprot.writeFieldEnd();
    }
    if (this.name != null) {
      oprot.writeFieldBegin(_NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.entryPageUrl != null) {
      oprot.writeFieldBegin(_ENTRY_PAGE_URL_FIELD_DESC);
      oprot.writeString(this.entryPageUrl);
      oprot.writeFieldEnd();
    }
    if (this.descriptionText != null) {
      oprot.writeFieldBegin(_DESCRIPTION_TEXT_FIELD_DESC);
      oprot.writeString(this.descriptionText);
      oprot.writeFieldEnd();
    }
    if (this.provider != null) {
      oprot.writeFieldBegin(_PROVIDER_FIELD_DESC);
      this.provider.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_PUBLIC_TYPE_FIELD_DESC);
    oprot.writeI32(this.publicType);
    oprot.writeFieldEnd();
    if (this.iconImage != null) {
      oprot.writeFieldBegin(_ICON_IMAGE_FIELD_DESC);
      oprot.writeString(this.iconImage);
      oprot.writeFieldEnd();
    }
    if (this.permissions != null) {
      oprot.writeFieldBegin(_PERMISSIONS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.permissions.length));
        for (var elem48 in this.permissions) {
          oprot.writeString(elem48);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.iconThumbnailImage != null) {
      oprot.writeFieldBegin(_ICON_THUMBNAIL_IMAGE_FIELD_DESC);
      oprot.writeString(this.iconThumbnailImage);
      oprot.writeFieldEnd();
    }
    if (this.channelConfigurations != null) {
      oprot.writeFieldBegin(_CHANNEL_CONFIGURATIONS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.I32, this.channelConfigurations.length));
        for (var elem49 in this.channelConfigurations) {
          oprot.writeI32(elem49);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_LCS_ALL_API_USABLE_FIELD_DESC);
    oprot.writeBool(this.lcsAllApiUsable);
    oprot.writeFieldEnd();
    if (this.allowedPermissions != null) {
      oprot.writeFieldBegin(_ALLOWED_PERMISSIONS_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.I32, this.allowedPermissions.length));
        for (var elem50 in this.allowedPermissions) {
          oprot.writeI32(elem50);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.channelDomains != null) {
      oprot.writeFieldBegin(_CHANNEL_DOMAINS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.channelDomains.length));
        for (var elem51 in this.channelDomains) {
          elem51.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_UPDATED_TIMESTAMP_FIELD_DESC);
    oprot.writeI64(this.updatedTimestamp);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ChannelInfo(");

    ret.write("channelId:");
    if (this.channelId == null) {
      ret.write("null");
    } else {
      ret.write(this.channelId);
    }

    ret.write(", ");
    ret.write("name:");
    if (this.name == null) {
      ret.write("null");
    } else {
      ret.write(this.name);
    }

    ret.write(", ");
    ret.write("entryPageUrl:");
    if (this.entryPageUrl == null) {
      ret.write("null");
    } else {
      ret.write(this.entryPageUrl);
    }

    ret.write(", ");
    ret.write("descriptionText:");
    if (this.descriptionText == null) {
      ret.write("null");
    } else {
      ret.write(this.descriptionText);
    }

    ret.write(", ");
    ret.write("provider:");
    if (this.provider == null) {
      ret.write("null");
    } else {
      ret.write(this.provider);
    }

    ret.write(", ");
    ret.write("publicType:");
    String publicType_name = PublicType.VALUES_TO_NAMES[this.publicType];
    if (publicType_name != null) {
      ret.write(publicType_name);
      ret.write(" (");
    }
    ret.write(this.publicType);
    if (publicType_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("iconImage:");
    if (this.iconImage == null) {
      ret.write("null");
    } else {
      ret.write(this.iconImage);
    }

    ret.write(", ");
    ret.write("permissions:");
    if (this.permissions == null) {
      ret.write("null");
    } else {
      ret.write(this.permissions);
    }

    ret.write(", ");
    ret.write("iconThumbnailImage:");
    if (this.iconThumbnailImage == null) {
      ret.write("null");
    } else {
      ret.write(this.iconThumbnailImage);
    }

    ret.write(", ");
    ret.write("channelConfigurations:");
    if (this.channelConfigurations == null) {
      ret.write("null");
    } else {
      ret.write(this.channelConfigurations);
    }

    ret.write(", ");
    ret.write("lcsAllApiUsable:");
    ret.write(this.lcsAllApiUsable);

    ret.write(", ");
    ret.write("allowedPermissions:");
    if (this.allowedPermissions == null) {
      ret.write("null");
    } else {
      ret.write(this.allowedPermissions);
    }

    ret.write(", ");
    ret.write("channelDomains:");
    if (this.channelDomains == null) {
      ret.write("null");
    } else {
      ret.write(this.channelDomains);
    }

    ret.write(", ");
    ret.write("updatedTimestamp:");
    ret.write(this.updatedTimestamp);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetPublicType() && !PublicType.VALID_VALUES.contains(publicType)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'publicType' has been assigned the invalid value $publicType");
    }
  }

}

