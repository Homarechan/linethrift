/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.chat_room_announcement;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class ChatRoomAnnouncement implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ChatRoomAnnouncement");
  static final TField _ANNOUNCEMENT_SEQ_FIELD_DESC = new TField("announcementSeq", TType.I64, 1);
  static final TField _TYPE_FIELD_DESC = new TField("type", TType.I32, 2);
  static final TField _CONTENTS_FIELD_DESC = new TField("contents", TType.STRUCT, 3);
  static final TField _CREATOR_MID_FIELD_DESC = new TField("creatorMid", TType.STRING, 4);
  static final TField _CREATED_TIME_FIELD_DESC = new TField("createdTime", TType.I64, 5);

  int _announcementSeq = 0;
  static const int ANNOUNCEMENTSEQ = 1;
  int _type;
  static const int TYPE = 2;
  ChatRoomAnnouncementContents _contents;
  static const int CONTENTS = 3;
  String _creatorMid;
  static const int CREATORMID = 4;
  int _createdTime = 0;
  static const int CREATEDTIME = 5;

  bool __isset_announcementSeq = false;
  bool __isset_type = false;
  bool __isset_createdTime = false;

  ChatRoomAnnouncement() {
  }

  // announcementSeq
  int get announcementSeq => this._announcementSeq;

  set announcementSeq(int announcementSeq) {
    this._announcementSeq = announcementSeq;
    this.__isset_announcementSeq = true;
  }

  bool isSetAnnouncementSeq() => this.__isset_announcementSeq;

  unsetAnnouncementSeq() {
    this.__isset_announcementSeq = false;
  }

  // type
  int get type => this._type;

  set type(int type) {
    this._type = type;
    this.__isset_type = true;
  }

  bool isSetType() => this.__isset_type;

  unsetType() {
    this.__isset_type = false;
  }

  // contents
  ChatRoomAnnouncementContents get contents => this._contents;

  set contents(ChatRoomAnnouncementContents contents) {
    this._contents = contents;
  }

  bool isSetContents() => this.contents != null;

  unsetContents() {
    this.contents = null;
  }

  // creatorMid
  String get creatorMid => this._creatorMid;

  set creatorMid(String creatorMid) {
    this._creatorMid = creatorMid;
  }

  bool isSetCreatorMid() => this.creatorMid != null;

  unsetCreatorMid() {
    this.creatorMid = null;
  }

  // createdTime
  int get createdTime => this._createdTime;

  set createdTime(int createdTime) {
    this._createdTime = createdTime;
    this.__isset_createdTime = true;
  }

  bool isSetCreatedTime() => this.__isset_createdTime;

  unsetCreatedTime() {
    this.__isset_createdTime = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case ANNOUNCEMENTSEQ:
        return this.announcementSeq;
      case TYPE:
        return this.type;
      case CONTENTS:
        return this.contents;
      case CREATORMID:
        return this.creatorMid;
      case CREATEDTIME:
        return this.createdTime;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case ANNOUNCEMENTSEQ:
        if (value == null) {
          unsetAnnouncementSeq();
        } else {
          this.announcementSeq = value;
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          this.type = value;
        }
        break;

      case CONTENTS:
        if (value == null) {
          unsetContents();
        } else {
          this.contents = value;
        }
        break;

      case CREATORMID:
        if (value == null) {
          unsetCreatorMid();
        } else {
          this.creatorMid = value;
        }
        break;

      case CREATEDTIME:
        if (value == null) {
          unsetCreatedTime();
        } else {
          this.createdTime = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case ANNOUNCEMENTSEQ:
        return isSetAnnouncementSeq();
      case TYPE:
        return isSetType();
      case CONTENTS:
        return isSetContents();
      case CREATORMID:
        return isSetCreatorMid();
      case CREATEDTIME:
        return isSetCreatedTime();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case ANNOUNCEMENTSEQ:
          if (field.type == TType.I64) {
            this.announcementSeq = iprot.readI64();
            this.__isset_announcementSeq = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TYPE:
          if (field.type == TType.I32) {
            this.type = iprot.readI32();
            this.__isset_type = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CONTENTS:
          if (field.type == TType.STRUCT) {
            this.contents = new ChatRoomAnnouncementContents();
            this.contents.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CREATORMID:
          if (field.type == TType.STRING) {
            this.creatorMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CREATEDTIME:
          if (field.type == TType.I64) {
            this.createdTime = iprot.readI64();
            this.__isset_createdTime = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_ANNOUNCEMENT_SEQ_FIELD_DESC);
    oprot.writeI64(this.announcementSeq);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_TYPE_FIELD_DESC);
    oprot.writeI32(this.type);
    oprot.writeFieldEnd();
    if (this.contents != null) {
      oprot.writeFieldBegin(_CONTENTS_FIELD_DESC);
      this.contents.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.creatorMid != null) {
      oprot.writeFieldBegin(_CREATOR_MID_FIELD_DESC);
      oprot.writeString(this.creatorMid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_CREATED_TIME_FIELD_DESC);
    oprot.writeI64(this.createdTime);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ChatRoomAnnouncement(");

    ret.write("announcementSeq:");
    ret.write(this.announcementSeq);

    ret.write(", ");
    ret.write("type:");
    String type_name = ChatRoomAnnouncementType.VALUES_TO_NAMES[this.type];
    if (type_name != null) {
      ret.write(type_name);
      ret.write(" (");
    }
    ret.write(this.type);
    if (type_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("contents:");
    if (this.contents == null) {
      ret.write("null");
    } else {
      ret.write(this.contents);
    }

    ret.write(", ");
    ret.write("creatorMid:");
    if (this.creatorMid == null) {
      ret.write("null");
    } else {
      ret.write(this.creatorMid);
    }

    ret.write(", ");
    ret.write("createdTime:");
    ret.write(this.createdTime);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetType() && !ChatRoomAnnouncementType.VALID_VALUES.contains(type)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'type' has been assigned the invalid value $type");
    }
  }

}

