/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.update_square_authority_response;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class UpdateSquareAuthorityResponse implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("UpdateSquareAuthorityResponse");
  static final TField _UPDATD_ATTRIBUTES_FIELD_DESC = new TField("updatdAttributes", TType.SET, 1);
  static final TField _AUTHORITY_FIELD_DESC = new TField("authority", TType.STRUCT, 2);

  Set<int> _updatdAttributes;
  static const int UPDATDATTRIBUTES = 1;
  SquareAuthority _authority;
  static const int AUTHORITY = 2;


  UpdateSquareAuthorityResponse() {
  }

  // updatdAttributes
  Set<int> get updatdAttributes => this._updatdAttributes;

  set updatdAttributes(Set<int> updatdAttributes) {
    this._updatdAttributes = updatdAttributes;
  }

  bool isSetUpdatdAttributes() => this.updatdAttributes != null;

  unsetUpdatdAttributes() {
    this.updatdAttributes = null;
  }

  // authority
  SquareAuthority get authority => this._authority;

  set authority(SquareAuthority authority) {
    this._authority = authority;
  }

  bool isSetAuthority() => this.authority != null;

  unsetAuthority() {
    this.authority = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case UPDATDATTRIBUTES:
        return this.updatdAttributes;
      case AUTHORITY:
        return this.authority;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case UPDATDATTRIBUTES:
        if (value == null) {
          unsetUpdatdAttributes();
        } else {
          this.updatdAttributes = value;
        }
        break;

      case AUTHORITY:
        if (value == null) {
          unsetAuthority();
        } else {
          this.authority = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case UPDATDATTRIBUTES:
        return isSetUpdatdAttributes();
      case AUTHORITY:
        return isSetAuthority();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case UPDATDATTRIBUTES:
          if (field.type == TType.SET) {
            {
              TSet _set510 = iprot.readSetBegin();
              this.updatdAttributes = new Set<int>();
              for (int _i511 = 0; _i511 < _set510.length; ++_i511) {
                int _elem512;
                _elem512 = iprot.readI32();
                this.updatdAttributes.add(_elem512);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case AUTHORITY:
          if (field.type == TType.STRUCT) {
            this.authority = new SquareAuthority();
            this.authority.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.updatdAttributes != null) {
      oprot.writeFieldBegin(_UPDATD_ATTRIBUTES_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.I32, this.updatdAttributes.length));
        for (var elem513 in this.updatdAttributes) {
          oprot.writeI32(elem513);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.authority != null) {
      oprot.writeFieldBegin(_AUTHORITY_FIELD_DESC);
      this.authority.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("UpdateSquareAuthorityResponse(");

    ret.write("updatdAttributes:");
    if (this.updatdAttributes == null) {
      ret.write("null");
    } else {
      ret.write(this.updatdAttributes);
    }

    ret.write(", ");
    ret.write("authority:");
    if (this.authority == null) {
      ret.write("null");
    } else {
      ret.write(this.authority);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

