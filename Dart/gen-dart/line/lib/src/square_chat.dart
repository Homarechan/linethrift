/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.square_chat;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class SquareChat implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("SquareChat");
  static final TField _SQUARE_CHAT_MID_FIELD_DESC = new TField("squareChatMid", TType.STRING, 1);
  static final TField _SQUARE_MID_FIELD_DESC = new TField("squareMid", TType.STRING, 2);
  static final TField _TYPE_FIELD_DESC = new TField("type", TType.I32, 3);
  static final TField _NAME_FIELD_DESC = new TField("name", TType.STRING, 4);
  static final TField _CHAT_IMAGE_OBS_HASH_FIELD_DESC = new TField("chatImageObsHash", TType.STRING, 5);
  static final TField _SQUARE_CHAT_REVISION_FIELD_DESC = new TField("squareChatRevision", TType.I64, 6);
  static final TField _MAX_MEMBER_COUNT_FIELD_DESC = new TField("maxMemberCount", TType.I32, 7);
  static final TField _STATE_FIELD_DESC = new TField("state", TType.I32, 8);

  String _squareChatMid;
  static const int SQUARECHATMID = 1;
  String _squareMid;
  static const int SQUAREMID = 2;
  int _type;
  static const int TYPE = 3;
  String _name;
  static const int NAME = 4;
  String _chatImageObsHash;
  static const int CHATIMAGEOBSHASH = 5;
  int _squareChatRevision = 0;
  static const int SQUARECHATREVISION = 6;
  int _maxMemberCount = 0;
  static const int MAXMEMBERCOUNT = 7;
  int _state;
  static const int STATE = 8;

  bool __isset_type = false;
  bool __isset_squareChatRevision = false;
  bool __isset_maxMemberCount = false;
  bool __isset_state = false;

  SquareChat() {
  }

  // squareChatMid
  String get squareChatMid => this._squareChatMid;

  set squareChatMid(String squareChatMid) {
    this._squareChatMid = squareChatMid;
  }

  bool isSetSquareChatMid() => this.squareChatMid != null;

  unsetSquareChatMid() {
    this.squareChatMid = null;
  }

  // squareMid
  String get squareMid => this._squareMid;

  set squareMid(String squareMid) {
    this._squareMid = squareMid;
  }

  bool isSetSquareMid() => this.squareMid != null;

  unsetSquareMid() {
    this.squareMid = null;
  }

  // type
  int get type => this._type;

  set type(int type) {
    this._type = type;
    this.__isset_type = true;
  }

  bool isSetType() => this.__isset_type;

  unsetType() {
    this.__isset_type = false;
  }

  // name
  String get name => this._name;

  set name(String name) {
    this._name = name;
  }

  bool isSetName() => this.name != null;

  unsetName() {
    this.name = null;
  }

  // chatImageObsHash
  String get chatImageObsHash => this._chatImageObsHash;

  set chatImageObsHash(String chatImageObsHash) {
    this._chatImageObsHash = chatImageObsHash;
  }

  bool isSetChatImageObsHash() => this.chatImageObsHash != null;

  unsetChatImageObsHash() {
    this.chatImageObsHash = null;
  }

  // squareChatRevision
  int get squareChatRevision => this._squareChatRevision;

  set squareChatRevision(int squareChatRevision) {
    this._squareChatRevision = squareChatRevision;
    this.__isset_squareChatRevision = true;
  }

  bool isSetSquareChatRevision() => this.__isset_squareChatRevision;

  unsetSquareChatRevision() {
    this.__isset_squareChatRevision = false;
  }

  // maxMemberCount
  int get maxMemberCount => this._maxMemberCount;

  set maxMemberCount(int maxMemberCount) {
    this._maxMemberCount = maxMemberCount;
    this.__isset_maxMemberCount = true;
  }

  bool isSetMaxMemberCount() => this.__isset_maxMemberCount;

  unsetMaxMemberCount() {
    this.__isset_maxMemberCount = false;
  }

  // state
  int get state => this._state;

  set state(int state) {
    this._state = state;
    this.__isset_state = true;
  }

  bool isSetState() => this.__isset_state;

  unsetState() {
    this.__isset_state = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SQUARECHATMID:
        return this.squareChatMid;
      case SQUAREMID:
        return this.squareMid;
      case TYPE:
        return this.type;
      case NAME:
        return this.name;
      case CHATIMAGEOBSHASH:
        return this.chatImageObsHash;
      case SQUARECHATREVISION:
        return this.squareChatRevision;
      case MAXMEMBERCOUNT:
        return this.maxMemberCount;
      case STATE:
        return this.state;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SQUARECHATMID:
        if (value == null) {
          unsetSquareChatMid();
        } else {
          this.squareChatMid = value;
        }
        break;

      case SQUAREMID:
        if (value == null) {
          unsetSquareMid();
        } else {
          this.squareMid = value;
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          this.type = value;
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          this.name = value;
        }
        break;

      case CHATIMAGEOBSHASH:
        if (value == null) {
          unsetChatImageObsHash();
        } else {
          this.chatImageObsHash = value;
        }
        break;

      case SQUARECHATREVISION:
        if (value == null) {
          unsetSquareChatRevision();
        } else {
          this.squareChatRevision = value;
        }
        break;

      case MAXMEMBERCOUNT:
        if (value == null) {
          unsetMaxMemberCount();
        } else {
          this.maxMemberCount = value;
        }
        break;

      case STATE:
        if (value == null) {
          unsetState();
        } else {
          this.state = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SQUARECHATMID:
        return isSetSquareChatMid();
      case SQUAREMID:
        return isSetSquareMid();
      case TYPE:
        return isSetType();
      case NAME:
        return isSetName();
      case CHATIMAGEOBSHASH:
        return isSetChatImageObsHash();
      case SQUARECHATREVISION:
        return isSetSquareChatRevision();
      case MAXMEMBERCOUNT:
        return isSetMaxMemberCount();
      case STATE:
        return isSetState();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SQUARECHATMID:
          if (field.type == TType.STRING) {
            this.squareChatMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SQUAREMID:
          if (field.type == TType.STRING) {
            this.squareMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TYPE:
          if (field.type == TType.I32) {
            this.type = iprot.readI32();
            this.__isset_type = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NAME:
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CHATIMAGEOBSHASH:
          if (field.type == TType.STRING) {
            this.chatImageObsHash = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SQUARECHATREVISION:
          if (field.type == TType.I64) {
            this.squareChatRevision = iprot.readI64();
            this.__isset_squareChatRevision = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MAXMEMBERCOUNT:
          if (field.type == TType.I32) {
            this.maxMemberCount = iprot.readI32();
            this.__isset_maxMemberCount = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STATE:
          if (field.type == TType.I32) {
            this.state = iprot.readI32();
            this.__isset_state = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.squareChatMid != null) {
      oprot.writeFieldBegin(_SQUARE_CHAT_MID_FIELD_DESC);
      oprot.writeString(this.squareChatMid);
      oprot.writeFieldEnd();
    }
    if (this.squareMid != null) {
      oprot.writeFieldBegin(_SQUARE_MID_FIELD_DESC);
      oprot.writeString(this.squareMid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_TYPE_FIELD_DESC);
    oprot.writeI32(this.type);
    oprot.writeFieldEnd();
    if (this.name != null) {
      oprot.writeFieldBegin(_NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.chatImageObsHash != null) {
      oprot.writeFieldBegin(_CHAT_IMAGE_OBS_HASH_FIELD_DESC);
      oprot.writeString(this.chatImageObsHash);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_SQUARE_CHAT_REVISION_FIELD_DESC);
    oprot.writeI64(this.squareChatRevision);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_MAX_MEMBER_COUNT_FIELD_DESC);
    oprot.writeI32(this.maxMemberCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_STATE_FIELD_DESC);
    oprot.writeI32(this.state);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("SquareChat(");

    ret.write("squareChatMid:");
    if (this.squareChatMid == null) {
      ret.write("null");
    } else {
      ret.write(this.squareChatMid);
    }

    ret.write(", ");
    ret.write("squareMid:");
    if (this.squareMid == null) {
      ret.write("null");
    } else {
      ret.write(this.squareMid);
    }

    ret.write(", ");
    ret.write("type:");
    String type_name = SquareChatType.VALUES_TO_NAMES[this.type];
    if (type_name != null) {
      ret.write(type_name);
      ret.write(" (");
    }
    ret.write(this.type);
    if (type_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("name:");
    if (this.name == null) {
      ret.write("null");
    } else {
      ret.write(this.name);
    }

    ret.write(", ");
    ret.write("chatImageObsHash:");
    if (this.chatImageObsHash == null) {
      ret.write("null");
    } else {
      ret.write(this.chatImageObsHash);
    }

    ret.write(", ");
    ret.write("squareChatRevision:");
    ret.write(this.squareChatRevision);

    ret.write(", ");
    ret.write("maxMemberCount:");
    ret.write(this.maxMemberCount);

    ret.write(", ");
    ret.write("state:");
    String state_name = SquareChatState.VALUES_TO_NAMES[this.state];
    if (state_name != null) {
      ret.write(state_name);
      ret.write(" (");
    }
    ret.write(this.state);
    if (state_name != null) {
      ret.write(")");
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetType() && !SquareChatType.VALID_VALUES.contains(type)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'type' has been assigned the invalid value $type");
    }
    if (isSetState() && !SquareChatState.VALID_VALUES.contains(state)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'state' has been assigned the invalid value $state");
    }
  }

}

