/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.get_square_members_request;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class GetSquareMembersRequest implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("GetSquareMembersRequest");
  static final TField _MIDS_FIELD_DESC = new TField("mids", TType.SET, 2);

  Set<String> _mids;
  static const int MIDS = 2;


  GetSquareMembersRequest() {
  }

  // mids
  Set<String> get mids => this._mids;

  set mids(Set<String> mids) {
    this._mids = mids;
  }

  bool isSetMids() => this.mids != null;

  unsetMids() {
    this.mids = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case MIDS:
        return this.mids;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case MIDS:
        if (value == null) {
          unsetMids();
        } else {
          this.mids = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case MIDS:
        return isSetMids();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case MIDS:
          if (field.type == TType.SET) {
            {
              TSet _set382 = iprot.readSetBegin();
              this.mids = new Set<String>();
              for (int _i383 = 0; _i383 < _set382.length; ++_i383) {
                String _elem384;
                _elem384 = iprot.readString();
                this.mids.add(_elem384);
              }
              iprot.readSetEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.mids != null) {
      oprot.writeFieldBegin(_MIDS_FIELD_DESC);
      {
        oprot.writeSetBegin(new TSet(TType.STRING, this.mids.length));
        for (var elem385 in this.mids) {
          oprot.writeString(elem385);
        }
        oprot.writeSetEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("GetSquareMembersRequest(");

    ret.write("mids:");
    if (this.mids == null) {
      ret.write("null");
    } else {
      ret.write(this.mids);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

