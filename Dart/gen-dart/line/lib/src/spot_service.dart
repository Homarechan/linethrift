/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.spot_service;

import 'dart:async';
import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';


abstract class SpotService {

  Future<SpotPhoneNumberResponse> lookupByPhoneNumber(String countryAreaCode, String phoneNumber);

  Future<SpotNearbyResponse> lookupNearby(Location location, int category, String query, String countryAreaCode);
}

class SpotServiceClient implements SpotService {

  SpotServiceClient(TProtocol iprot, [TProtocol oprot = null]) {
    _iprot = iprot;
    _oprot = (oprot == null) ? iprot : oprot;
  }

  TProtocol _iprot;

  TProtocol get iprot => _iprot;

  TProtocol _oprot;

  TProtocol get oprot => _oprot;

  int _seqid = 0;

  int get seqid => _seqid;

  int nextSeqid() => ++_seqid;

  Future<SpotPhoneNumberResponse> lookupByPhoneNumber(String countryAreaCode, String phoneNumber) async {
    oprot.writeMessageBegin(new TMessage("lookupByPhoneNumber", TMessageType.CALL, nextSeqid()));
    lookupByPhoneNumber_args args = new lookupByPhoneNumber_args();
    args.countryAreaCode = countryAreaCode;
    args.phoneNumber = phoneNumber;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    lookupByPhoneNumber_result result = new lookupByPhoneNumber_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "lookupByPhoneNumber failed: unknown result");
  }

  Future<SpotNearbyResponse> lookupNearby(Location location, int category, String query, String countryAreaCode) async {
    oprot.writeMessageBegin(new TMessage("lookupNearby", TMessageType.CALL, nextSeqid()));
    lookupNearby_args args = new lookupNearby_args();
    args.location = location;
    args.category = category;
    args.query = query;
    args.countryAreaCode = countryAreaCode;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    lookupNearby_result result = new lookupNearby_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    if (result.e != null) {
      throw result.e;
    }
    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "lookupNearby failed: unknown result");
  }

}

typedef void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);

class SpotServiceProcessor implements TProcessor {
  SpotServiceProcessor(SpotService iface) {
    iface_ = iface;
    PROCESS_MAP["lookupByPhoneNumber"] = lookupByPhoneNumber;
    PROCESS_MAP["lookupNearby"] = lookupNearby;
  }

  SpotService iface_;
  final Map<String, ProcessFunction> PROCESS_MAP = {};

  bool process(TProtocol iprot, TProtocol oprot) {
    TMessage msg = iprot.readMessageBegin();
    ProcessFunction fn = PROCESS_MAP[msg.name];
    if (fn == null) {
      TProtocolUtil.skip(iprot, TType.STRUCT);
      iprot.readMessageEnd();
      TApplicationError x = new TApplicationError(TApplicationErrorType.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
      oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return true;
    }
    fn(msg.seqid, iprot, oprot);
    return true;
  }

  lookupByPhoneNumber(int seqid, TProtocol iprot, TProtocol oprot) async {
    lookupByPhoneNumber_args args = new lookupByPhoneNumber_args();
    args.read(iprot);
    iprot.readMessageEnd();
    lookupByPhoneNumber_result result = new lookupByPhoneNumber_result();
    try {
      result.success = await iface_.lookupByPhoneNumber(args.countryAreaCode, args.phoneNumber);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing lookupByPhoneNumber");
      oprot.writeMessageBegin(new TMessage("lookupByPhoneNumber", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("lookupByPhoneNumber", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  lookupNearby(int seqid, TProtocol iprot, TProtocol oprot) async {
    lookupNearby_args args = new lookupNearby_args();
    args.read(iprot);
    iprot.readMessageEnd();
    lookupNearby_result result = new lookupNearby_result();
    try {
      result.success = await iface_.lookupNearby(args.location, args.category, args.query, args.countryAreaCode);
    } on TalkException catch(e) {
      result.e = e;
    } catch (th) {
      // Internal error
      TApplicationError x = new TApplicationError(TApplicationErrorType.INTERNAL_ERROR, "Internal error processing lookupNearby");
      oprot.writeMessageBegin(new TMessage("lookupNearby", TMessageType.EXCEPTION, seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return;
    }
    oprot.writeMessageBegin(new TMessage("lookupNearby", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

}

class lookupByPhoneNumber_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("lookupByPhoneNumber_args");
  static final TField _COUNTRY_AREA_CODE_FIELD_DESC = new TField("countryAreaCode", TType.STRING, 2);
  static final TField _PHONE_NUMBER_FIELD_DESC = new TField("phoneNumber", TType.STRING, 3);

  String _countryAreaCode;
  static const int COUNTRYAREACODE = 2;
  String _phoneNumber;
  static const int PHONENUMBER = 3;


  lookupByPhoneNumber_args() {
  }

  // countryAreaCode
  String get countryAreaCode => this._countryAreaCode;

  set countryAreaCode(String countryAreaCode) {
    this._countryAreaCode = countryAreaCode;
  }

  bool isSetCountryAreaCode() => this.countryAreaCode != null;

  unsetCountryAreaCode() {
    this.countryAreaCode = null;
  }

  // phoneNumber
  String get phoneNumber => this._phoneNumber;

  set phoneNumber(String phoneNumber) {
    this._phoneNumber = phoneNumber;
  }

  bool isSetPhoneNumber() => this.phoneNumber != null;

  unsetPhoneNumber() {
    this.phoneNumber = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case COUNTRYAREACODE:
        return this.countryAreaCode;
      case PHONENUMBER:
        return this.phoneNumber;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case COUNTRYAREACODE:
        if (value == null) {
          unsetCountryAreaCode();
        } else {
          this.countryAreaCode = value;
        }
        break;

      case PHONENUMBER:
        if (value == null) {
          unsetPhoneNumber();
        } else {
          this.phoneNumber = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case COUNTRYAREACODE:
        return isSetCountryAreaCode();
      case PHONENUMBER:
        return isSetPhoneNumber();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case COUNTRYAREACODE:
          if (field.type == TType.STRING) {
            this.countryAreaCode = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PHONENUMBER:
          if (field.type == TType.STRING) {
            this.phoneNumber = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.countryAreaCode != null) {
      oprot.writeFieldBegin(_COUNTRY_AREA_CODE_FIELD_DESC);
      oprot.writeString(this.countryAreaCode);
      oprot.writeFieldEnd();
    }
    if (this.phoneNumber != null) {
      oprot.writeFieldBegin(_PHONE_NUMBER_FIELD_DESC);
      oprot.writeString(this.phoneNumber);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("lookupByPhoneNumber_args(");

    ret.write("countryAreaCode:");
    if (this.countryAreaCode == null) {
      ret.write("null");
    } else {
      ret.write(this.countryAreaCode);
    }

    ret.write(", ");
    ret.write("phoneNumber:");
    if (this.phoneNumber == null) {
      ret.write("null");
    } else {
      ret.write(this.phoneNumber);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class lookupByPhoneNumber_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("lookupByPhoneNumber_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  SpotPhoneNumberResponse _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  lookupByPhoneNumber_result() {
  }

  // success
  SpotPhoneNumberResponse get success => this._success;

  set success(SpotPhoneNumberResponse success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new SpotPhoneNumberResponse();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("lookupByPhoneNumber_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class lookupNearby_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("lookupNearby_args");
  static final TField _LOCATION_FIELD_DESC = new TField("location", TType.STRUCT, 2);
  static final TField _CATEGORY_FIELD_DESC = new TField("category", TType.I32, 3);
  static final TField _QUERY_FIELD_DESC = new TField("query", TType.STRING, 4);
  static final TField _COUNTRY_AREA_CODE_FIELD_DESC = new TField("countryAreaCode", TType.STRING, 5);

  Location _location;
  static const int LOCATION = 2;
  int _category;
  static const int CATEGORY = 3;
  String _query;
  static const int QUERY = 4;
  String _countryAreaCode;
  static const int COUNTRYAREACODE = 5;

  bool __isset_category = false;

  lookupNearby_args() {
  }

  // location
  Location get location => this._location;

  set location(Location location) {
    this._location = location;
  }

  bool isSetLocation() => this.location != null;

  unsetLocation() {
    this.location = null;
  }

  // category
  int get category => this._category;

  set category(int category) {
    this._category = category;
    this.__isset_category = true;
  }

  bool isSetCategory() => this.__isset_category;

  unsetCategory() {
    this.__isset_category = false;
  }

  // query
  String get query => this._query;

  set query(String query) {
    this._query = query;
  }

  bool isSetQuery() => this.query != null;

  unsetQuery() {
    this.query = null;
  }

  // countryAreaCode
  String get countryAreaCode => this._countryAreaCode;

  set countryAreaCode(String countryAreaCode) {
    this._countryAreaCode = countryAreaCode;
  }

  bool isSetCountryAreaCode() => this.countryAreaCode != null;

  unsetCountryAreaCode() {
    this.countryAreaCode = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case LOCATION:
        return this.location;
      case CATEGORY:
        return this.category;
      case QUERY:
        return this.query;
      case COUNTRYAREACODE:
        return this.countryAreaCode;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case LOCATION:
        if (value == null) {
          unsetLocation();
        } else {
          this.location = value;
        }
        break;

      case CATEGORY:
        if (value == null) {
          unsetCategory();
        } else {
          this.category = value;
        }
        break;

      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          this.query = value;
        }
        break;

      case COUNTRYAREACODE:
        if (value == null) {
          unsetCountryAreaCode();
        } else {
          this.countryAreaCode = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case LOCATION:
        return isSetLocation();
      case CATEGORY:
        return isSetCategory();
      case QUERY:
        return isSetQuery();
      case COUNTRYAREACODE:
        return isSetCountryAreaCode();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case LOCATION:
          if (field.type == TType.STRUCT) {
            this.location = new Location();
            this.location.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case CATEGORY:
          if (field.type == TType.I32) {
            this.category = iprot.readI32();
            this.__isset_category = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case QUERY:
          if (field.type == TType.STRING) {
            this.query = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COUNTRYAREACODE:
          if (field.type == TType.STRING) {
            this.countryAreaCode = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.location != null) {
      oprot.writeFieldBegin(_LOCATION_FIELD_DESC);
      this.location.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_CATEGORY_FIELD_DESC);
    oprot.writeI32(this.category);
    oprot.writeFieldEnd();
    if (this.query != null) {
      oprot.writeFieldBegin(_QUERY_FIELD_DESC);
      oprot.writeString(this.query);
      oprot.writeFieldEnd();
    }
    if (this.countryAreaCode != null) {
      oprot.writeFieldBegin(_COUNTRY_AREA_CODE_FIELD_DESC);
      oprot.writeString(this.countryAreaCode);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("lookupNearby_args(");

    ret.write("location:");
    if (this.location == null) {
      ret.write("null");
    } else {
      ret.write(this.location);
    }

    ret.write(", ");
    ret.write("category:");
    String category_name = SpotCategory.VALUES_TO_NAMES[this.category];
    if (category_name != null) {
      ret.write(category_name);
      ret.write(" (");
    }
    ret.write(this.category);
    if (category_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("query:");
    if (this.query == null) {
      ret.write("null");
    } else {
      ret.write(this.query);
    }

    ret.write(", ");
    ret.write("countryAreaCode:");
    if (this.countryAreaCode == null) {
      ret.write("null");
    } else {
      ret.write(this.countryAreaCode);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetCategory() && !SpotCategory.VALID_VALUES.contains(category)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'category' has been assigned the invalid value $category");
    }
  }

}

class lookupNearby_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("lookupNearby_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);
  static final TField _E_FIELD_DESC = new TField("e", TType.STRUCT, 1);

  SpotNearbyResponse _success;
  static const int SUCCESS = 0;
  TalkException _e;
  static const int E = 1;


  lookupNearby_result() {
  }

  // success
  SpotNearbyResponse get success => this._success;

  set success(SpotNearbyResponse success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  // e
  TalkException get e => this._e;

  set e(TalkException e) {
    this._e = e;
  }

  bool isSetE() => this.e != null;

  unsetE() {
    this.e = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      case E:
        return this.e;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          this.e = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new SpotNearbyResponse();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case E:
          if (field.type == TType.STRUCT) {
            this.e = new TalkException();
            this.e.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    } else if (this.isSetE()) {
      oprot.writeFieldBegin(_E_FIELD_DESC);
      this.e.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("lookupNearby_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(", ");
    ret.write("e:");
    if (this.e == null) {
      ret.write("null");
    } else {
      ret.write(this.e);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

