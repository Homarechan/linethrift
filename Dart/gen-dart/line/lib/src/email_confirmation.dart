/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.email_confirmation;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class EmailConfirmation implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("EmailConfirmation");
  static final TField _USE_PASSWORD_SET_FIELD_DESC = new TField("usePasswordSet", TType.BOOL, 1);
  static final TField _EMAIL_FIELD_DESC = new TField("email", TType.STRING, 2);
  static final TField _PASSWORD_FIELD_DESC = new TField("password", TType.STRING, 3);
  static final TField _IGNORE_DUPLICATION_FIELD_DESC = new TField("ignoreDuplication", TType.BOOL, 4);

  bool _usePasswordSet = false;
  static const int USEPASSWORDSET = 1;
  String _email;
  static const int EMAIL = 2;
  String _password;
  static const int PASSWORD = 3;
  bool _ignoreDuplication = false;
  static const int IGNOREDUPLICATION = 4;

  bool __isset_usePasswordSet = false;
  bool __isset_ignoreDuplication = false;

  EmailConfirmation() {
  }

  // usePasswordSet
  bool get usePasswordSet => this._usePasswordSet;

  set usePasswordSet(bool usePasswordSet) {
    this._usePasswordSet = usePasswordSet;
    this.__isset_usePasswordSet = true;
  }

  bool isSetUsePasswordSet() => this.__isset_usePasswordSet;

  unsetUsePasswordSet() {
    this.__isset_usePasswordSet = false;
  }

  // email
  String get email => this._email;

  set email(String email) {
    this._email = email;
  }

  bool isSetEmail() => this.email != null;

  unsetEmail() {
    this.email = null;
  }

  // password
  String get password => this._password;

  set password(String password) {
    this._password = password;
  }

  bool isSetPassword() => this.password != null;

  unsetPassword() {
    this.password = null;
  }

  // ignoreDuplication
  bool get ignoreDuplication => this._ignoreDuplication;

  set ignoreDuplication(bool ignoreDuplication) {
    this._ignoreDuplication = ignoreDuplication;
    this.__isset_ignoreDuplication = true;
  }

  bool isSetIgnoreDuplication() => this.__isset_ignoreDuplication;

  unsetIgnoreDuplication() {
    this.__isset_ignoreDuplication = false;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case USEPASSWORDSET:
        return this.usePasswordSet;
      case EMAIL:
        return this.email;
      case PASSWORD:
        return this.password;
      case IGNOREDUPLICATION:
        return this.ignoreDuplication;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case USEPASSWORDSET:
        if (value == null) {
          unsetUsePasswordSet();
        } else {
          this.usePasswordSet = value;
        }
        break;

      case EMAIL:
        if (value == null) {
          unsetEmail();
        } else {
          this.email = value;
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          this.password = value;
        }
        break;

      case IGNOREDUPLICATION:
        if (value == null) {
          unsetIgnoreDuplication();
        } else {
          this.ignoreDuplication = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case USEPASSWORDSET:
        return isSetUsePasswordSet();
      case EMAIL:
        return isSetEmail();
      case PASSWORD:
        return isSetPassword();
      case IGNOREDUPLICATION:
        return isSetIgnoreDuplication();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case USEPASSWORDSET:
          if (field.type == TType.BOOL) {
            this.usePasswordSet = iprot.readBool();
            this.__isset_usePasswordSet = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case EMAIL:
          if (field.type == TType.STRING) {
            this.email = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PASSWORD:
          if (field.type == TType.STRING) {
            this.password = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case IGNOREDUPLICATION:
          if (field.type == TType.BOOL) {
            this.ignoreDuplication = iprot.readBool();
            this.__isset_ignoreDuplication = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_USE_PASSWORD_SET_FIELD_DESC);
    oprot.writeBool(this.usePasswordSet);
    oprot.writeFieldEnd();
    if (this.email != null) {
      oprot.writeFieldBegin(_EMAIL_FIELD_DESC);
      oprot.writeString(this.email);
      oprot.writeFieldEnd();
    }
    if (this.password != null) {
      oprot.writeFieldBegin(_PASSWORD_FIELD_DESC);
      oprot.writeString(this.password);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_IGNORE_DUPLICATION_FIELD_DESC);
    oprot.writeBool(this.ignoreDuplication);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("EmailConfirmation(");

    ret.write("usePasswordSet:");
    ret.write(this.usePasswordSet);

    ret.write(", ");
    ret.write("email:");
    if (this.email == null) {
      ret.write("null");
    } else {
      ret.write(this.email);
    }

    ret.write(", ");
    ret.write("password:");
    if (this.password == null) {
      ret.write("null");
    } else {
      ret.write(this.password);
    }

    ret.write(", ");
    ret.write("ignoreDuplication:");
    ret.write(this.ignoreDuplication);

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

