/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.friend_request;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class FriendRequest implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("FriendRequest");
  static final TField _E_MID_FIELD_DESC = new TField("eMid", TType.STRING, 1);
  static final TField _MID_FIELD_DESC = new TField("mid", TType.STRING, 2);
  static final TField _DIRECTION_FIELD_DESC = new TField("direction", TType.I32, 3);
  static final TField _METHOD_FIELD_DESC = new TField("method", TType.I32, 4);
  static final TField _PARAM_FIELD_DESC = new TField("param", TType.STRING, 5);
  static final TField _TIMESTAMP_FIELD_DESC = new TField("timestamp", TType.I64, 6);
  static final TField _SEQ_ID_FIELD_DESC = new TField("seqId", TType.I64, 7);
  static final TField _DISPLAY_NAME_FIELD_DESC = new TField("displayName", TType.STRING, 10);
  static final TField _PICTURE_PATH_FIELD_DESC = new TField("picturePath", TType.STRING, 11);
  static final TField _PICTURE_STATUS_FIELD_DESC = new TField("pictureStatus", TType.STRING, 12);

  String _eMid;
  static const int EMID = 1;
  String _mid;
  static const int MID = 2;
  int _direction;
  static const int DIRECTION = 3;
  int _method;
  static const int METHOD = 4;
  String _param;
  static const int PARAM = 5;
  int _timestamp = 0;
  static const int TIMESTAMP = 6;
  int _seqId = 0;
  static const int SEQID = 7;
  String _displayName;
  static const int DISPLAYNAME = 10;
  String _picturePath;
  static const int PICTUREPATH = 11;
  String _pictureStatus;
  static const int PICTURESTATUS = 12;

  bool __isset_direction = false;
  bool __isset_method = false;
  bool __isset_timestamp = false;
  bool __isset_seqId = false;

  FriendRequest() {
  }

  // eMid
  String get eMid => this._eMid;

  set eMid(String eMid) {
    this._eMid = eMid;
  }

  bool isSetEMid() => this.eMid != null;

  unsetEMid() {
    this.eMid = null;
  }

  // mid
  String get mid => this._mid;

  set mid(String mid) {
    this._mid = mid;
  }

  bool isSetMid() => this.mid != null;

  unsetMid() {
    this.mid = null;
  }

  // direction
  int get direction => this._direction;

  set direction(int direction) {
    this._direction = direction;
    this.__isset_direction = true;
  }

  bool isSetDirection() => this.__isset_direction;

  unsetDirection() {
    this.__isset_direction = false;
  }

  // method
  int get method => this._method;

  set method(int method) {
    this._method = method;
    this.__isset_method = true;
  }

  bool isSetMethod() => this.__isset_method;

  unsetMethod() {
    this.__isset_method = false;
  }

  // param
  String get param => this._param;

  set param(String param) {
    this._param = param;
  }

  bool isSetParam() => this.param != null;

  unsetParam() {
    this.param = null;
  }

  // timestamp
  int get timestamp => this._timestamp;

  set timestamp(int timestamp) {
    this._timestamp = timestamp;
    this.__isset_timestamp = true;
  }

  bool isSetTimestamp() => this.__isset_timestamp;

  unsetTimestamp() {
    this.__isset_timestamp = false;
  }

  // seqId
  int get seqId => this._seqId;

  set seqId(int seqId) {
    this._seqId = seqId;
    this.__isset_seqId = true;
  }

  bool isSetSeqId() => this.__isset_seqId;

  unsetSeqId() {
    this.__isset_seqId = false;
  }

  // displayName
  String get displayName => this._displayName;

  set displayName(String displayName) {
    this._displayName = displayName;
  }

  bool isSetDisplayName() => this.displayName != null;

  unsetDisplayName() {
    this.displayName = null;
  }

  // picturePath
  String get picturePath => this._picturePath;

  set picturePath(String picturePath) {
    this._picturePath = picturePath;
  }

  bool isSetPicturePath() => this.picturePath != null;

  unsetPicturePath() {
    this.picturePath = null;
  }

  // pictureStatus
  String get pictureStatus => this._pictureStatus;

  set pictureStatus(String pictureStatus) {
    this._pictureStatus = pictureStatus;
  }

  bool isSetPictureStatus() => this.pictureStatus != null;

  unsetPictureStatus() {
    this.pictureStatus = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case EMID:
        return this.eMid;
      case MID:
        return this.mid;
      case DIRECTION:
        return this.direction;
      case METHOD:
        return this.method;
      case PARAM:
        return this.param;
      case TIMESTAMP:
        return this.timestamp;
      case SEQID:
        return this.seqId;
      case DISPLAYNAME:
        return this.displayName;
      case PICTUREPATH:
        return this.picturePath;
      case PICTURESTATUS:
        return this.pictureStatus;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case EMID:
        if (value == null) {
          unsetEMid();
        } else {
          this.eMid = value;
        }
        break;

      case MID:
        if (value == null) {
          unsetMid();
        } else {
          this.mid = value;
        }
        break;

      case DIRECTION:
        if (value == null) {
          unsetDirection();
        } else {
          this.direction = value;
        }
        break;

      case METHOD:
        if (value == null) {
          unsetMethod();
        } else {
          this.method = value;
        }
        break;

      case PARAM:
        if (value == null) {
          unsetParam();
        } else {
          this.param = value;
        }
        break;

      case TIMESTAMP:
        if (value == null) {
          unsetTimestamp();
        } else {
          this.timestamp = value;
        }
        break;

      case SEQID:
        if (value == null) {
          unsetSeqId();
        } else {
          this.seqId = value;
        }
        break;

      case DISPLAYNAME:
        if (value == null) {
          unsetDisplayName();
        } else {
          this.displayName = value;
        }
        break;

      case PICTUREPATH:
        if (value == null) {
          unsetPicturePath();
        } else {
          this.picturePath = value;
        }
        break;

      case PICTURESTATUS:
        if (value == null) {
          unsetPictureStatus();
        } else {
          this.pictureStatus = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case EMID:
        return isSetEMid();
      case MID:
        return isSetMid();
      case DIRECTION:
        return isSetDirection();
      case METHOD:
        return isSetMethod();
      case PARAM:
        return isSetParam();
      case TIMESTAMP:
        return isSetTimestamp();
      case SEQID:
        return isSetSeqId();
      case DISPLAYNAME:
        return isSetDisplayName();
      case PICTUREPATH:
        return isSetPicturePath();
      case PICTURESTATUS:
        return isSetPictureStatus();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case EMID:
          if (field.type == TType.STRING) {
            this.eMid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MID:
          if (field.type == TType.STRING) {
            this.mid = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DIRECTION:
          if (field.type == TType.I32) {
            this.direction = iprot.readI32();
            this.__isset_direction = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case METHOD:
          if (field.type == TType.I32) {
            this.method = iprot.readI32();
            this.__isset_method = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PARAM:
          if (field.type == TType.STRING) {
            this.param = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TIMESTAMP:
          if (field.type == TType.I64) {
            this.timestamp = iprot.readI64();
            this.__isset_timestamp = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SEQID:
          if (field.type == TType.I64) {
            this.seqId = iprot.readI64();
            this.__isset_seqId = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DISPLAYNAME:
          if (field.type == TType.STRING) {
            this.displayName = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PICTUREPATH:
          if (field.type == TType.STRING) {
            this.picturePath = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PICTURESTATUS:
          if (field.type == TType.STRING) {
            this.pictureStatus = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.eMid != null) {
      oprot.writeFieldBegin(_E_MID_FIELD_DESC);
      oprot.writeString(this.eMid);
      oprot.writeFieldEnd();
    }
    if (this.mid != null) {
      oprot.writeFieldBegin(_MID_FIELD_DESC);
      oprot.writeString(this.mid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_DIRECTION_FIELD_DESC);
    oprot.writeI32(this.direction);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_METHOD_FIELD_DESC);
    oprot.writeI32(this.method);
    oprot.writeFieldEnd();
    if (this.param != null) {
      oprot.writeFieldBegin(_PARAM_FIELD_DESC);
      oprot.writeString(this.param);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(_TIMESTAMP_FIELD_DESC);
    oprot.writeI64(this.timestamp);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_SEQ_ID_FIELD_DESC);
    oprot.writeI64(this.seqId);
    oprot.writeFieldEnd();
    if (this.displayName != null) {
      oprot.writeFieldBegin(_DISPLAY_NAME_FIELD_DESC);
      oprot.writeString(this.displayName);
      oprot.writeFieldEnd();
    }
    if (this.picturePath != null) {
      oprot.writeFieldBegin(_PICTURE_PATH_FIELD_DESC);
      oprot.writeString(this.picturePath);
      oprot.writeFieldEnd();
    }
    if (this.pictureStatus != null) {
      oprot.writeFieldBegin(_PICTURE_STATUS_FIELD_DESC);
      oprot.writeString(this.pictureStatus);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("FriendRequest(");

    ret.write("eMid:");
    if (this.eMid == null) {
      ret.write("null");
    } else {
      ret.write(this.eMid);
    }

    ret.write(", ");
    ret.write("mid:");
    if (this.mid == null) {
      ret.write("null");
    } else {
      ret.write(this.mid);
    }

    ret.write(", ");
    ret.write("direction:");
    String direction_name = FriendRequestDirection.VALUES_TO_NAMES[this.direction];
    if (direction_name != null) {
      ret.write(direction_name);
      ret.write(" (");
    }
    ret.write(this.direction);
    if (direction_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("method:");
    String method_name = FriendRequestMethod.VALUES_TO_NAMES[this.method];
    if (method_name != null) {
      ret.write(method_name);
      ret.write(" (");
    }
    ret.write(this.method);
    if (method_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("param:");
    if (this.param == null) {
      ret.write("null");
    } else {
      ret.write(this.param);
    }

    ret.write(", ");
    ret.write("timestamp:");
    ret.write(this.timestamp);

    ret.write(", ");
    ret.write("seqId:");
    ret.write(this.seqId);

    ret.write(", ");
    ret.write("displayName:");
    if (this.displayName == null) {
      ret.write("null");
    } else {
      ret.write(this.displayName);
    }

    ret.write(", ");
    ret.write("picturePath:");
    if (this.picturePath == null) {
      ret.write("null");
    } else {
      ret.write(this.picturePath);
    }

    ret.write(", ");
    ret.write("pictureStatus:");
    if (this.pictureStatus == null) {
      ret.write("null");
    } else {
      ret.write(this.pictureStatus);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetDirection() && !FriendRequestDirection.VALID_VALUES.contains(direction)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'direction' has been assigned the invalid value $direction");
    }
    if (isSetMethod() && !FriendRequestMethod.VALID_VALUES.contains(method)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'method' has been assigned the invalid value $method");
    }
  }

}

