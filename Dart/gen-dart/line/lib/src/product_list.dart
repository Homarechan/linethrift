/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library line.src.product_list;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:line/line.dart';

class ProductList implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("ProductList");
  static final TField _HAS_NEXT_FIELD_DESC = new TField("hasNext", TType.BOOL, 1);
  static final TField _BANNER_SEQUENCE_FIELD_DESC = new TField("bannerSequence", TType.I64, 4);
  static final TField _BANNER_TARGET_TYPE_FIELD_DESC = new TField("bannerTargetType", TType.I32, 5);
  static final TField _BANNER_TARGET_PATH_FIELD_DESC = new TField("bannerTargetPath", TType.STRING, 6);
  static final TField _PRODUCT_LIST_FIELD_DESC = new TField("productList", TType.LIST, 7);
  static final TField _BANNER_LANG_FIELD_DESC = new TField("bannerLang", TType.STRING, 8);

  bool _hasNext = false;
  static const int HASNEXT = 1;
  int _bannerSequence = 0;
  static const int BANNERSEQUENCE = 4;
  int _bannerTargetType;
  static const int BANNERTARGETTYPE = 5;
  String _bannerTargetPath;
  static const int BANNERTARGETPATH = 6;
  List<Product> _productList;
  static const int PRODUCTLIST = 7;
  String _bannerLang;
  static const int BANNERLANG = 8;

  bool __isset_hasNext = false;
  bool __isset_bannerSequence = false;
  bool __isset_bannerTargetType = false;

  ProductList() {
  }

  // hasNext
  bool get hasNext => this._hasNext;

  set hasNext(bool hasNext) {
    this._hasNext = hasNext;
    this.__isset_hasNext = true;
  }

  bool isSetHasNext() => this.__isset_hasNext;

  unsetHasNext() {
    this.__isset_hasNext = false;
  }

  // bannerSequence
  int get bannerSequence => this._bannerSequence;

  set bannerSequence(int bannerSequence) {
    this._bannerSequence = bannerSequence;
    this.__isset_bannerSequence = true;
  }

  bool isSetBannerSequence() => this.__isset_bannerSequence;

  unsetBannerSequence() {
    this.__isset_bannerSequence = false;
  }

  // bannerTargetType
  int get bannerTargetType => this._bannerTargetType;

  set bannerTargetType(int bannerTargetType) {
    this._bannerTargetType = bannerTargetType;
    this.__isset_bannerTargetType = true;
  }

  bool isSetBannerTargetType() => this.__isset_bannerTargetType;

  unsetBannerTargetType() {
    this.__isset_bannerTargetType = false;
  }

  // bannerTargetPath
  String get bannerTargetPath => this._bannerTargetPath;

  set bannerTargetPath(String bannerTargetPath) {
    this._bannerTargetPath = bannerTargetPath;
  }

  bool isSetBannerTargetPath() => this.bannerTargetPath != null;

  unsetBannerTargetPath() {
    this.bannerTargetPath = null;
  }

  // productList
  List<Product> get productList => this._productList;

  set productList(List<Product> productList) {
    this._productList = productList;
  }

  bool isSetProductList() => this.productList != null;

  unsetProductList() {
    this.productList = null;
  }

  // bannerLang
  String get bannerLang => this._bannerLang;

  set bannerLang(String bannerLang) {
    this._bannerLang = bannerLang;
  }

  bool isSetBannerLang() => this.bannerLang != null;

  unsetBannerLang() {
    this.bannerLang = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case HASNEXT:
        return this.hasNext;
      case BANNERSEQUENCE:
        return this.bannerSequence;
      case BANNERTARGETTYPE:
        return this.bannerTargetType;
      case BANNERTARGETPATH:
        return this.bannerTargetPath;
      case PRODUCTLIST:
        return this.productList;
      case BANNERLANG:
        return this.bannerLang;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case HASNEXT:
        if (value == null) {
          unsetHasNext();
        } else {
          this.hasNext = value;
        }
        break;

      case BANNERSEQUENCE:
        if (value == null) {
          unsetBannerSequence();
        } else {
          this.bannerSequence = value;
        }
        break;

      case BANNERTARGETTYPE:
        if (value == null) {
          unsetBannerTargetType();
        } else {
          this.bannerTargetType = value;
        }
        break;

      case BANNERTARGETPATH:
        if (value == null) {
          unsetBannerTargetPath();
        } else {
          this.bannerTargetPath = value;
        }
        break;

      case PRODUCTLIST:
        if (value == null) {
          unsetProductList();
        } else {
          this.productList = value;
        }
        break;

      case BANNERLANG:
        if (value == null) {
          unsetBannerLang();
        } else {
          this.bannerLang = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case HASNEXT:
        return isSetHasNext();
      case BANNERSEQUENCE:
        return isSetBannerSequence();
      case BANNERTARGETTYPE:
        return isSetBannerTargetType();
      case BANNERTARGETPATH:
        return isSetBannerTargetPath();
      case PRODUCTLIST:
        return isSetProductList();
      case BANNERLANG:
        return isSetBannerLang();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case HASNEXT:
          if (field.type == TType.BOOL) {
            this.hasNext = iprot.readBool();
            this.__isset_hasNext = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BANNERSEQUENCE:
          if (field.type == TType.I64) {
            this.bannerSequence = iprot.readI64();
            this.__isset_bannerSequence = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BANNERTARGETTYPE:
          if (field.type == TType.I32) {
            this.bannerTargetType = iprot.readI32();
            this.__isset_bannerTargetType = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BANNERTARGETPATH:
          if (field.type == TType.STRING) {
            this.bannerTargetPath = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PRODUCTLIST:
          if (field.type == TType.LIST) {
            {
              TList _list206 = iprot.readListBegin();
              this.productList = new List<Product>();
              for (int _i207 = 0; _i207 < _list206.length; ++_i207) {
                Product _elem208;
                _elem208 = new Product();
                _elem208.read(iprot);
                this.productList.add(_elem208);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BANNERLANG:
          if (field.type == TType.STRING) {
            this.bannerLang = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_HAS_NEXT_FIELD_DESC);
    oprot.writeBool(this.hasNext);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_BANNER_SEQUENCE_FIELD_DESC);
    oprot.writeI64(this.bannerSequence);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_BANNER_TARGET_TYPE_FIELD_DESC);
    oprot.writeI32(this.bannerTargetType);
    oprot.writeFieldEnd();
    if (this.bannerTargetPath != null) {
      oprot.writeFieldBegin(_BANNER_TARGET_PATH_FIELD_DESC);
      oprot.writeString(this.bannerTargetPath);
      oprot.writeFieldEnd();
    }
    if (this.productList != null) {
      oprot.writeFieldBegin(_PRODUCT_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.productList.length));
        for (var elem209 in this.productList) {
          elem209.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.bannerLang != null) {
      oprot.writeFieldBegin(_BANNER_LANG_FIELD_DESC);
      oprot.writeString(this.bannerLang);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("ProductList(");

    ret.write("hasNext:");
    ret.write(this.hasNext);

    ret.write(", ");
    ret.write("bannerSequence:");
    ret.write(this.bannerSequence);

    ret.write(", ");
    ret.write("bannerTargetType:");
    String bannerTargetType_name = ProductBannerLinkType.VALUES_TO_NAMES[this.bannerTargetType];
    if (bannerTargetType_name != null) {
      ret.write(bannerTargetType_name);
      ret.write(" (");
    }
    ret.write(this.bannerTargetType);
    if (bannerTargetType_name != null) {
      ret.write(")");
    }

    ret.write(", ");
    ret.write("bannerTargetPath:");
    if (this.bannerTargetPath == null) {
      ret.write("null");
    } else {
      ret.write(this.bannerTargetPath);
    }

    ret.write(", ");
    ret.write("productList:");
    if (this.productList == null) {
      ret.write("null");
    } else {
      ret.write(this.productList);
    }

    ret.write(", ");
    ret.write("bannerLang:");
    if (this.bannerLang == null) {
      ret.write("null");
    } else {
      ret.write(this.bannerLang);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
    if (isSetBannerTargetType() && !ProductBannerLinkType.VALID_VALUES.contains(bannerTargetType)) {
      throw new TProtocolError(TProtocolErrorType.UNKNOWN, "The field 'bannerTargetType' has been assigned the invalid value $bannerTargetType");
    }
  }

}

